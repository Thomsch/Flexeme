digraph  {
n119 [label="Hangfire.ContinuationsSupportAttribute", span=""];
n120 [label="Hangfire.States.ElectStateContext", span=""];
n0 [label="Entry Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute()", span="39-39", cluster="Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute()"];
n1 [label="Exit Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute()", span="39-39", cluster="Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute()"];
n2 [label="Entry Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)", span="44-44", cluster="Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)"];
n3 [label="Exit Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)", span="44-44", cluster="Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)"];
n4 [label="Entry Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>, Hangfire.States.IBackgroundJobStateChanger)", span="49-49", cluster="Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>, Hangfire.States.IBackgroundJobStateChanger)"];
n5 [label="knownFinalStates == null", span="53-53", cluster="Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>, Hangfire.States.IBackgroundJobStateChanger)"];
n6 [label="throw new ArgumentNullException(nameof(knownFinalStates));", span="53-53", cluster="Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>, Hangfire.States.IBackgroundJobStateChanger)"];
n7 [label="stateChanger == null", span="54-54", cluster="Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>, Hangfire.States.IBackgroundJobStateChanger)"];
n8 [label="throw new ArgumentNullException(nameof(stateChanger));", span="54-54", cluster="Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>, Hangfire.States.IBackgroundJobStateChanger)"];
n9 [label="_knownFinalStates = knownFinalStates", span="56-56", cluster="Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>, Hangfire.States.IBackgroundJobStateChanger)"];
n10 [label="_stateChanger = stateChanger", span="57-57", cluster="Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>, Hangfire.States.IBackgroundJobStateChanger)"];
n11 [label="Order = 1000", span="61-61", cluster="Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>, Hangfire.States.IBackgroundJobStateChanger)"];
n12 [label="Exit Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>, Hangfire.States.IBackgroundJobStateChanger)", span="49-49", cluster="Hangfire.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>, Hangfire.States.IBackgroundJobStateChanger)"];
n13 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n14 [label="Entry Unk.nameof", span="", cluster="Unk.nameof"];
n15 [label="Entry Hangfire.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)", span="64-64", cluster="Hangfire.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
n16 [label="var awaitingState = context.CandidateState as AwaitingState", span="66-66", cluster="Hangfire.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
n18 [label="AddContinuation(context, awaitingState)", span="70-70", cluster="Hangfire.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
n19 [label="_knownFinalStates.Contains(context.CandidateState.Name)", span="72-72", cluster="Hangfire.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
n20 [label="ExecuteContinuationsIfExist(context)", span="75-75", cluster="Hangfire.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
n17 [label="awaitingState != null", span="67-67", cluster="Hangfire.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
n21 [label="Exit Hangfire.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)", span="64-64", cluster="Hangfire.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)"];
n23 [label="Entry System.Collections.Generic.HashSet<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.HashSet<T>.Contains(T)"];
n24 [label="Entry Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", span="138-138", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n22 [label="Entry Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)", span="88-88", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n25 [label="Entry Hangfire.ContinuationsSupportAttribute.OnStateApplied(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="79-79", cluster="Hangfire.ContinuationsSupportAttribute.OnStateApplied(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)"];
n26 [label="var awaitingState = context.NewState as AwaitingState", span="81-81", cluster="Hangfire.ContinuationsSupportAttribute.OnStateApplied(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)"];
n28 [label="context.JobExpirationTimeout = awaitingState.Expiration", span="84-84", cluster="Hangfire.ContinuationsSupportAttribute.OnStateApplied(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)"];
n27 [label="awaitingState != null", span="82-82", cluster="Hangfire.ContinuationsSupportAttribute.OnStateApplied(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)"];
n29 [label="Exit Hangfire.ContinuationsSupportAttribute.OnStateApplied(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="79-79", cluster="Hangfire.ContinuationsSupportAttribute.OnStateApplied(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)"];
n30 [label="var connection = context.Connection", span="90-90", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n31 [label="var parentId = awaitingState.ParentId", span="91-91", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n34 [label="!continuations.Exists(x => x.JobId == context.BackgroundJob.Id)", span="104-104", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n57 [label="x.JobId == context.BackgroundJob.Id", span="104-104", cluster="lambda expression"];
n35 [label="continuations.Add(new Continuation { JobId = context.BackgroundJob.Id, Options = awaitingState.Options })", span="106-106", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n42 [label="var startImmediately = !awaitingState.Options.HasFlag(JobContinuationOptions.OnlyOnSucceededState) ||\r\n                        currentState.Name == SucceededState.StateName", span="128-129", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n43 [label="context.CandidateState = startImmediately\r\n                        ? awaitingState.NextState\r\n                        : new DeletedState { Reason = ''Continuation condition was not met'' }", span="131-133", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)", color=red, community=0];
n32 [label="connection.AcquireDistributedJobLock(parentId, AddJobLockTimeout)", span="97-97", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n33 [label="var continuations = GetContinuations(connection, parentId)", span="99-99", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n36 [label="SetContinuations(connection, parentId, continuations)", span="111-111", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n37 [label="var jobData = connection.GetJobData(parentId)", span="114-114", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n40 [label="var currentState = connection.GetStateData(parentId)", span="124-124", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n39 [label="throw new InvalidOperationException(\r\n                        $''Can not add a continuation: parent background job '{parentId}' does not exist.'');", span="120-121", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n45 [label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedJobLock(string, System.TimeSpan)", span="25-25", cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedJobLock(string, System.TimeSpan)"];
n46 [label="Entry Hangfire.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)", span="256-256", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)"];
n47 [label="Entry System.Collections.Generic.List<T>.Exists(System.Predicate<T>)", span="0-0", cluster="System.Collections.Generic.List<T>.Exists(System.Predicate<T>)"];
n56 [label="Entry lambda expression", span="104-104", cluster="lambda expression"];
n48 [label="Entry Hangfire.ContinuationsSupportAttribute.Continuation.Continuation()", span="266-266", cluster="Hangfire.ContinuationsSupportAttribute.Continuation.Continuation()"];
n49 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
n50 [label="Entry Hangfire.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.ContinuationsSupportAttribute.Continuation>)", span="250-250", cluster="Hangfire.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.ContinuationsSupportAttribute.Continuation>)"];
n38 [label="jobData == null", span="115-115", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n51 [label="Entry Hangfire.Storage.IStorageConnection.GetJobData(string)", span="42-42", cluster="Hangfire.Storage.IStorageConnection.GetJobData(string)"];
n41 [label="currentState != null && _knownFinalStates.Contains(currentState.Name)", span="126-126", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n53 [label="Entry Hangfire.Storage.IStorageConnection.GetStateData(string)", span="45-45", cluster="Hangfire.Storage.IStorageConnection.GetStateData(string)"];
n44 [label="Exit Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)", span="88-88", cluster="Hangfire.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.States.AwaitingState)"];
n54 [label="Entry System.Enum.HasFlag(System.Enum)", span="0-0", cluster="System.Enum.HasFlag(System.Enum)"];
n52 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)"];
n55 [label="Entry Hangfire.States.DeletedState.DeletedState()", span="65-65", cluster="Hangfire.States.DeletedState.DeletedState()"];
n58 [label="Exit lambda expression", span="104-104", cluster="lambda expression"];
n59 [label="var continuations = GetContinuations(context.Connection, context.BackgroundJob.Id)", span="142-142", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n63 [label="var currentState = GetContinuaionState(context, continuation.JobId, ContinuationStateFetchTimeout)", span="151-151", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n67 [label="continuation.Options.HasFlag(JobContinuationOptions.OnlyOnSucceededState) &&\r\n                    context.CandidateState.Name != SucceededState.StateName", span="163-164", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n75 [label="_stateChanger.ChangeState(new StateChangeContext(\r\n                    context.Storage,\r\n                    context.Connection,\r\n                    tuple.Key,\r\n                    tuple.Value,\r\n                    AwaitingState.StateName))", span="196-201", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n60 [label="var nextStates = new Dictionary<string, IState>()", span="143-143", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n61 [label=continuations, span="147-147", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n77 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
n72 [label="!nextStates.ContainsKey(continuation.JobId)", span="185-185", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n73 [label="nextStates.Add(continuation.JobId, nextState)", span="190-190", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n74 [label=nextStates, span="194-194", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n62 [label="String.IsNullOrWhiteSpace(continuation.JobId)", span="149-149", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n78 [label="Entry string.IsNullOrWhiteSpace(string)", span="0-0", cluster="string.IsNullOrWhiteSpace(string)"];
n64 [label="currentState == null", span="152-152", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n79 [label="Entry Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", span="205-205", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n65 [label="currentState.Name != AwaitingState.StateName", span="159-159", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n69 [label="nextState = JsonConvert.DeserializeObject<IState>(\r\n                            currentState.Data[''NextState''],\r\n                            new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Objects })", span="172-174", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n66 [label="IState nextState", span="161-161", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n68 [label="nextState = new DeletedState { Reason = ''Continuation condition was not met'' }", span="166-166", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n70 [label=Exception, span="176-176", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n80 [label="Entry JsonSerializerSettings.cstr", span="", cluster="JsonSerializerSettings.cstr"];
n81 [label="Entry Unk.>", span="", cluster="Unk.>"];
n71 [label="nextState = new FailedState(ex)\r\n                        {\r\n                            Reason = ''An error occurred while deserializing the continuation''\r\n                        }", span="178-181", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n82 [label="Entry Hangfire.States.FailedState.FailedState(System.Exception)", span="75-75", cluster="Hangfire.States.FailedState.FailedState(System.Exception)"];
n83 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)"];
n84 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)"];
n76 [label="Exit Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", span="138-138", cluster="Hangfire.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)"];
n85 [label="Entry Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])", span="35-35", cluster="Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])"];
n86 [label="Entry Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25", cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)"];
n87 [label="StateData currentState = null", span="207-207", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n91 [label="var continuationData = context.Connection.GetJobData(continuationJobId)", span="214-214", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n93 [label="Logger.Warn(\r\n                        $''Can not start continuation '{continuationJobId}' for background job '{context.BackgroundJob.Id}': continuation does not exist.'')", span="217-218", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n94 [label="currentState = context.Connection.GetStateData(continuationJobId)", span="223-223", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n97 [label="Logger.Warn(\r\n                        $''Continuation '{continuationJobId}' has been ignored: it was deemed to be aborted, because its state is still non-initialized.'')", span="231-232", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n98 [label="DateTime.UtcNow >= started.Add(timeout)", span="237-237", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n99 [label="throw new TimeoutException(\r\n                        $''Can not start continuation '{continuationJobId}' for background job '{context.BackgroundJob.Id}': timeout expired while trying to fetch continuation state.'');", span="239-240", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n88 [label="var started = DateTime.UtcNow", span="209-209", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n102 [label="return currentState;", span="247-247", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n89 [label="var firstAttempt = true", span="210-210", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n90 [label=true, span="212-212", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n100 [label="Thread.Sleep(firstAttempt ? 0 : 1)", span="243-243", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n92 [label="continuationData == null", span="215-215", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n96 [label="DateTime.UtcNow - continuationData.CreatedAt > ContinuationInvalidTimeout", span="229-229", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n95 [label="currentState != null", span="224-224", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n105 [label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0", cluster="System.DateTime.Add(System.TimeSpan)"];
n101 [label="firstAttempt = false", span="244-244", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n107 [label="Entry System.Threading.Thread.Sleep(int)", span="0-0", cluster="System.Threading.Thread.Sleep(int)"];
n104 [label="Entry Hangfire.Logging.ILog.Warn(string)", span="264-264", cluster="Hangfire.Logging.ILog.Warn(string)"];
n103 [label="Exit Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", span="205-205", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)"];
n106 [label="Entry System.TimeoutException.TimeoutException(string)", span="0-0", cluster="System.TimeoutException.TimeoutException(string)"];
n108 [label="connection.SetJobParameter(jobId, ''Continuations'', JobHelper.ToJson(continuations))", span="253-253", cluster="Hangfire.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.ContinuationsSupportAttribute.Continuation>)"];
n109 [label="Exit Hangfire.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.ContinuationsSupportAttribute.Continuation>)", span="250-250", cluster="Hangfire.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.ContinuationsSupportAttribute.Continuation>)"];
n110 [label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32", cluster="Hangfire.Common.JobHelper.ToJson(object)"];
n111 [label="Entry Hangfire.Storage.IStorageConnection.SetJobParameter(string, string, string)", span="38-38", cluster="Hangfire.Storage.IStorageConnection.SetJobParameter(string, string, string)"];
n112 [label="return JobHelper.FromJson<List<Continuation>>(connection.GetJobParameter(\r\n                jobId, ''Continuations'')) ?? new List<Continuation>();", span="258-259", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)"];
n113 [label="Exit Hangfire.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)", span="256-256", cluster="Hangfire.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)"];
n114 [label="Entry Hangfire.Storage.IStorageConnection.GetJobParameter(string, string)", span="39-39", cluster="Hangfire.Storage.IStorageConnection.GetJobParameter(string, string)"];
n115 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)"];
n116 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n117 [label="Entry Hangfire.ContinuationsSupportAttribute.Hangfire.States.IApplyStateFilter.OnStateUnapplied(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="262-262", cluster="Hangfire.ContinuationsSupportAttribute.Hangfire.States.IApplyStateFilter.OnStateUnapplied(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)"];
n118 [label="Exit Hangfire.ContinuationsSupportAttribute.Hangfire.States.IApplyStateFilter.OnStateUnapplied(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="262-262", cluster="Hangfire.ContinuationsSupportAttribute.Hangfire.States.IApplyStateFilter.OnStateUnapplied(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)"];
m1_28 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="BackgroundJobServer.cs"];
m1_38 [label="Entry Hangfire.BackgroundJobServer.Dispose()", span="108-108", cluster="Hangfire.BackgroundJobServer.Dispose()", file="BackgroundJobServer.cs"];
m1_39 [label="_processingServer.Dispose()", span="110-110", cluster="Hangfire.BackgroundJobServer.Dispose()", color=green, community=0, file="BackgroundJobServer.cs"];
m1_40 [label="Logger.Info(''Hangfire Server stopped.'')", span="111-111", cluster="Hangfire.BackgroundJobServer.Dispose()", file="BackgroundJobServer.cs"];
m1_41 [label="Exit Hangfire.BackgroundJobServer.Dispose()", span="108-108", cluster="Hangfire.BackgroundJobServer.Dispose()", file="BackgroundJobServer.cs"];
m1_4 [label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", span="58-58", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", file="BackgroundJobServer.cs"];
m1_5 [label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", span="58-58", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", file="BackgroundJobServer.cs"];
m1_0 [label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer()", span="38-38", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer()", file="BackgroundJobServer.cs"];
m1_1 [label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer()", span="38-38", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer()", file="BackgroundJobServer.cs"];
m1_37 [label="Entry Hangfire.Server.BackgroundProcessingServer.BackgroundProcessingServer(Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IServerProcess>, System.Collections.Generic.IDictionary<string, object>)", span="40-40", cluster="Hangfire.Server.BackgroundProcessingServer.BackgroundProcessingServer(Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IServerProcess>, System.Collections.Generic.IDictionary<string, object>)", file="BackgroundJobServer.cs"];
m1_60 [label="Entry Hangfire.Server.SchedulePoller.SchedulePoller(System.TimeSpan, Hangfire.States.IStateChangeProcess)", span="45-45", cluster="Hangfire.Server.SchedulePoller.SchedulePoller(System.TimeSpan, Hangfire.States.IStateChangeProcess)", file="BackgroundJobServer.cs"];
m1_63 [label="Entry Hangfire.BackgroundJobServer.Start()", span="135-135", cluster="Hangfire.BackgroundJobServer.Start()", file="BackgroundJobServer.cs"];
m1_64 [label="Exit Hangfire.BackgroundJobServer.Start()", span="135-135", cluster="Hangfire.BackgroundJobServer.Start()", file="BackgroundJobServer.cs"];
m1_61 [label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess)", span="43-43", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess)", file="BackgroundJobServer.cs"];
m1_62 [label="Entry Hangfire.Client.JobCreationProcess.JobCreationProcess(Hangfire.Common.IJobFilterProvider)", span="35-35", cluster="Hangfire.Client.JobCreationProcess.JobCreationProcess(Hangfire.Common.IJobFilterProvider)", file="BackgroundJobServer.cs"];
m1_35 [label="Entry Hangfire.JobStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", span="68-68", cluster="Hangfire.JobStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", file="BackgroundJobServer.cs"];
m1_55 [label="Entry Hangfire.Server.JobPerformanceProcess.JobPerformanceProcess(Hangfire.Common.IJobFilterProvider)", span="34-34", cluster="Hangfire.Server.JobPerformanceProcess.JobPerformanceProcess(Hangfire.Common.IJobFilterProvider)", file="BackgroundJobServer.cs"];
m1_32 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="BackgroundJobServer.cs"];
m1_36 [label="Entry Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="83-83", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServer.cs"];
m1_58 [label="Entry Hangfire.Server.ServerHeartbeat.ServerHeartbeat(System.TimeSpan)", span="31-31", cluster="Hangfire.Server.ServerHeartbeat.ServerHeartbeat(System.TimeSpan)", file="BackgroundJobServer.cs"];
m1_54 [label="Entry Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateChangeProcess)", span="47-47", cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateChangeProcess)", file="BackgroundJobServer.cs"];
m1_34 [label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210", cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="BackgroundJobServer.cs"];
m1_65 [label="Entry Hangfire.BackgroundJobServer.Stop()", span="140-140", cluster="Hangfire.BackgroundJobServer.Stop()", file="BackgroundJobServer.cs"];
m1_66 [label="Exit Hangfire.BackgroundJobServer.Stop()", span="140-140", cluster="Hangfire.BackgroundJobServer.Stop()", file="BackgroundJobServer.cs"];
m1_30 [label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0", cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", file="BackgroundJobServer.cs"];
m1_33 [label="Entry Hangfire.Logging.ILog.Info(string)", span="202-202", cluster="Hangfire.Logging.ILog.Info(string)", file="BackgroundJobServer.cs"];
m1_8 [label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", span="74-74", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_9 [label="storage == null", span="79-79", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_11 [label="options == null", span="80-80", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_13 [label="additionalProcesses == null", span="81-81", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_15 [label="_options = options", span="83-83", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_18 [label="processes.AddRange(storage.GetComponents())", span="87-87", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", color=red, community=0, file="BackgroundJobServer.cs"];
m1_19 [label="processes.AddRange(additionalProcesses)", span="88-88", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_20 [label="var properties = new Dictionary<string, object>\r\n            {\r\n                { ''Queues'', options.Queues },\r\n                { ''WorkerCount'', options.WorkerCount }\r\n            }", span="90-94", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_22 [label="Logger.InfoFormat(''Using job storage: '{0}'.'', storage)", span="97-97", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_23 [label="storage.WriteOptionsToLog(Logger)", span="99-99", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_24 [label="options.WriteToLog(Logger)", span="100-100", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs", color=green, community=0];
m1_25 [label="_processingServer = new BackgroundProcessingServer(storage, processes, properties)\r\n            {\r\n                ShutdownTimeout = options.ShutdownTimeout\r\n            }", span="102-105", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", color=green, community=0, file="BackgroundJobServer.cs"];
m1_10 [label="throw new ArgumentNullException(''storage'');", span="79-79", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_12 [label="throw new ArgumentNullException(''options'');", span="80-80", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_14 [label="throw new ArgumentNullException(''additionalProcesses'');", span="81-81", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_16 [label="var processes = new List<IServerProcess>()", span="85-85", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", color=green, community=0, file="BackgroundJobServer.cs"];
m1_17 [label="processes.AddRange(GetProcesses())", span="86-86", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", color=green, community=0, file="BackgroundJobServer.cs"];
m1_21 [label="Logger.Info(''Starting Hangfire Server'')", span="96-96", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_26 [label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", span="74-74", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="BackgroundJobServer.cs"];
m1_56 [label="Entry Hangfire.States.StateChangeProcess.StateChangeProcess(Hangfire.Common.IJobFilterProvider)", span="35-35", cluster="Hangfire.States.StateChangeProcess.StateChangeProcess(Hangfire.Common.IJobFilterProvider)", file="BackgroundJobServer.cs"];
m1_29 [label="Entry Hangfire.BackgroundJobServer.GetProcesses()", span="114-114", cluster="Hangfire.BackgroundJobServer.GetProcesses()", file="BackgroundJobServer.cs"];
m1_43 [label="var processes = new List<IServerProcess>()", span="116-116", cluster="Hangfire.BackgroundJobServer.GetProcesses()", color=green, community=0, file="BackgroundJobServer.cs"];
m1_44 [label="var i = 0", span="118-118", cluster="Hangfire.BackgroundJobServer.GetProcesses()", file="BackgroundJobServer.cs"];
m1_46 [label="processes.Add(new Worker(\r\n                    _options.Queues, \r\n                    new JobPerformanceProcess(_options.FilterProvider), \r\n                    new StateChangeProcess(_options.FilterProvider)))", span="120-123", cluster="Hangfire.BackgroundJobServer.GetProcesses()", file="BackgroundJobServer.cs"];
m1_48 [label="processes.Add(new ServerHeartbeat(_options.HeartbeatInterval))", span="126-126", cluster="Hangfire.BackgroundJobServer.GetProcesses()", color=green, community=0, file="BackgroundJobServer.cs"];
m1_49 [label="processes.Add(new ServerWatchdog(_options.ServerWatchdogOptions))", span="127-127", cluster="Hangfire.BackgroundJobServer.GetProcesses()", color=red, community=0, file="BackgroundJobServer.cs"];
m1_50 [label="processes.Add(new SchedulePoller(_options.SchedulePollingInterval, new StateChangeProcess(_options.FilterProvider)))", span="128-128", cluster="Hangfire.BackgroundJobServer.GetProcesses()", color=red, community=0, file="BackgroundJobServer.cs"];
m1_51 [label="processes.Add(new RecurringJobScheduler(new JobCreationProcess(_options.FilterProvider)))", span="129-129", cluster="Hangfire.BackgroundJobServer.GetProcesses()", file="BackgroundJobServer.cs"];
m1_52 [label="return processes;", span="131-131", cluster="Hangfire.BackgroundJobServer.GetProcesses()", file="BackgroundJobServer.cs"];
m1_45 [label="i < _options.WorkerCount", span="118-118", cluster="Hangfire.BackgroundJobServer.GetProcesses()", file="BackgroundJobServer.cs"];
m1_47 [label="i++", span="118-118", cluster="Hangfire.BackgroundJobServer.GetProcesses()", file="BackgroundJobServer.cs"];
m1_53 [label="Exit Hangfire.BackgroundJobServer.GetProcesses()", span="114-114", cluster="Hangfire.BackgroundJobServer.GetProcesses()", file="BackgroundJobServer.cs"];
m1_57 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="BackgroundJobServer.cs"];
m1_31 [label="Entry Hangfire.JobStorage.GetComponents()", span="58-58", cluster="Hangfire.JobStorage.GetComponents()", file="BackgroundJobServer.cs"];
m1_59 [label="Entry Hangfire.Server.ServerWatchdog.ServerWatchdog(Hangfire.Server.ServerWatchdogOptions)", span="32-32", cluster="Hangfire.Server.ServerWatchdog.ServerWatchdog(Hangfire.Server.ServerWatchdogOptions)", file="BackgroundJobServer.cs"];
m1_6 [label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", span="69-69", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", file="BackgroundJobServer.cs"];
m1_7 [label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", span="69-69", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", file="BackgroundJobServer.cs"];
m1_42 [label="Entry System.IDisposable.Dispose()", span="0-0", cluster="System.IDisposable.Dispose()", file="BackgroundJobServer.cs"];
m1_2 [label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.JobStorage)", span="48-48", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.JobStorage)", file="BackgroundJobServer.cs"];
m1_3 [label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.JobStorage)", span="48-48", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.JobStorage)", file="BackgroundJobServer.cs"];
m1_67 [label="Hangfire.BackgroundJobServer", span="", file="BackgroundJobServer.cs"];
m5_34 [label="Entry BackgroundServer.cstr", span="", cluster="BackgroundServer.cstr", file="BackgroundServerFacts.cs"];
m5_100 [label="Entry Mock<T>.cstr", span="", cluster="Mock<T>.cstr", file="BackgroundServerFacts.cs"];
m5_22 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="BackgroundServerFacts.cs"];
m5_35 [label="Entry Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", span="47-47", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", file="BackgroundServerFacts.cs"];
m5_36 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundServer(_storage.Object, _processes, null))", span="49-50", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_37 [label="Assert.Equal(''properties'', exception.ParamName)", span="52-52", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", file="BackgroundServerFacts.cs"];
m5_38 [label="Exit Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", span="47-47", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", file="BackgroundServerFacts.cs"];
m5_26 [label="Entry Hangfire.Server.BackgroundServer.BackgroundServer(Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IServerProcess>, System.Collections.Generic.IDictionary<string, object>)", span="40-40", cluster="Hangfire.Server.BackgroundServer.BackgroundServer(Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IServerProcess>, System.Collections.Generic.IDictionary<string, object>)", file="BackgroundServerFacts.cs"];
m5_10 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="BackgroundServerFacts.cs"];
m5_17 [label="Entry Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="29-29", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundServerFacts.cs"];
m5_18 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundServer(null, _processes, _properties))", span="31-32", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_19 [label="Assert.Equal(''storage'', exception.ParamName)", span="34-34", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundServerFacts.cs"];
m5_20 [label="Exit Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="29-29", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundServerFacts.cs"];
m5_49 [label="Entry System.Threading.Thread.Sleep(int)", span="0-0", cluster="System.Threading.Thread.Sleep(int)", file="BackgroundServerFacts.cs"];
m5_0 [label="Entry Hangfire.Core.Tests.Server.BackgroundServerFacts.BackgroundServerFacts()", span="18-18", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.BackgroundServerFacts()", file="BackgroundServerFacts.cs"];
m5_1 [label="_storage = new Mock<JobStorage>()", span="20-20", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.BackgroundServerFacts()", file="BackgroundServerFacts.cs"];
m5_2 [label="_processes = new List<IServerProcess>()", span="21-21", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.BackgroundServerFacts()", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_3 [label="_properties = new Dictionary<string, object> { { ''Queues'', _queues } }", span="22-22", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.BackgroundServerFacts()", file="BackgroundServerFacts.cs"];
m5_4 [label="_connection = new Mock<IStorageConnection>()", span="24-24", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.BackgroundServerFacts()", file="BackgroundServerFacts.cs"];
m5_5 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="25-25", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.BackgroundServerFacts()", file="BackgroundServerFacts.cs"];
m5_6 [label="Exit Hangfire.Core.Tests.Server.BackgroundServerFacts.BackgroundServerFacts()", span="18-18", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.BackgroundServerFacts()", file="BackgroundServerFacts.cs"];
m5_21 [label="Entry Unk.>", span="", cluster="Unk.>", file="BackgroundServerFacts.cs"];
m5_27 [label="Entry Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenProcessesArgumentIsNull()", span="38-38", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenProcessesArgumentIsNull()", file="BackgroundServerFacts.cs"];
m5_28 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundServer(_storage.Object, null, _properties))", span="40-41", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenProcessesArgumentIsNull()", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_29 [label="Assert.Equal(''processes'', exception.ParamName)", span="43-43", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenProcessesArgumentIsNull()", file="BackgroundServerFacts.cs"];
m5_30 [label="Exit Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenProcessesArgumentIsNull()", span="38-38", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_ThrowsAnException_WhenProcessesArgumentIsNull()", file="BackgroundServerFacts.cs"];
m5_16 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="BackgroundServerFacts.cs"];
m5_72 [label="Entry Hangfire.Core.Tests.Server.BackgroundServerFacts.CreateProcessMock<T>()", span="89-89", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.CreateProcessMock<T>()", file="BackgroundServerFacts.cs"];
m5_96 [label="var mock = new Mock<T>()", span="92-92", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.CreateProcessMock<T>()", file="BackgroundServerFacts.cs"];
m5_97 [label="_processes.Add(mock.Object)", span="93-93", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.CreateProcessMock<T>()", file="BackgroundServerFacts.cs"];
m5_98 [label="return mock;", span="95-95", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.CreateProcessMock<T>()", file="BackgroundServerFacts.cs"];
m5_99 [label="Exit Hangfire.Core.Tests.Server.BackgroundServerFacts.CreateProcessMock<T>()", span="89-89", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.CreateProcessMock<T>()", file="BackgroundServerFacts.cs"];
m5_101 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="BackgroundServerFacts.cs"];
m5_9 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="BackgroundServerFacts.cs"];
m5_11 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="BackgroundServerFacts.cs"];
m5_48 [label="Entry Hangfire.Core.Tests.Server.BackgroundServerFacts.CreateServer()", span="84-84", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.CreateServer()", file="BackgroundServerFacts.cs"];
m5_94 [label="return new BackgroundServer(_storage.Object, _processes, _properties);", span="86-86", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.CreateServer()", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_95 [label="Exit Hangfire.Core.Tests.Server.BackgroundServerFacts.CreateServer()", span="84-84", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.CreateServer()", file="BackgroundServerFacts.cs"];
m5_91 [label="Entry lambda expression", span="81-81", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_13 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_14 [label="x.GetConnection()", span="25-25", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_15 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_23 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_24 [label="new BackgroundServer(null, _processes, _properties)", span="32-32", cluster="lambda expression", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_25 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_31 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_32 [label="new BackgroundServer(_storage.Object, null, _properties)", span="41-41", cluster="lambda expression", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_33 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_39 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_40 [label="new BackgroundServer(_storage.Object, _processes, null)", span="50-50", cluster="lambda expression", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_41 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_51 [label="Entry lambda expression", span="60-62", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_58 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_52 [label="x.AnnounceServer(\r\n                It.IsNotNull<string>(),\r\n                It.Is<ServerContext>(y => y.Queues == _queues))", span="60-62", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_53 [label="Exit lambda expression", span="60-62", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_55 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_56 [label="y.Queues == _queues", span="62-62", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_57 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_59 [label="x.RemoveServer(It.IsNotNull<string>())", span="64-64", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_60 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_75 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_79 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_82 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_85 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_88 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_76 [label="x.Execute(It.IsAny<CancellationToken>())", span="72-72", cluster="lambda expression", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_77 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_80 [label="Thread.Sleep(10)", span="72-72", cluster="lambda expression", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_81 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_83 [label="x.Execute(It.IsAny<BackgroundProcessContext>())", span="74-74", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_84 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_86 [label="Thread.Sleep(10)", span="74-74", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_87 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_89 [label="x.Execute(It.IsAny<CancellationToken>())", span="80-80", cluster="lambda expression", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_90 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_92 [label="x.Execute(It.IsNotNull<BackgroundProcessContext>())", span="81-81", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_93 [label="Exit lambda expression", span="81-81", cluster="lambda expression", file="BackgroundServerFacts.cs"];
m5_54 [label="Entry Unk.AnnounceServer", span="", cluster="Unk.AnnounceServer", file="BackgroundServerFacts.cs"];
m5_74 [label="Entry Unk.AtLeast", span="", cluster="Unk.AtLeast", file="BackgroundServerFacts.cs"];
m5_61 [label="Entry Unk.RemoveServer", span="", cluster="Unk.RemoveServer", file="BackgroundServerFacts.cs"];
m5_78 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="BackgroundServerFacts.cs"];
m5_62 [label="Entry Hangfire.Core.Tests.Server.BackgroundServerFacts.Execute_StartsAllTheComponents_InLoop_AndWaitsForThem()", span="68-68", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Execute_StartsAllTheComponents_InLoop_AndWaitsForThem()", file="BackgroundServerFacts.cs"];
m5_63 [label="var component1 = CreateProcessMock<IServerComponent>()", span="71-71", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Execute_StartsAllTheComponents_InLoop_AndWaitsForThem()", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_64 [label="component1.Setup(x => x.Execute(It.IsAny<CancellationToken>())).Callback(() => Thread.Sleep(10))", span="72-72", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Execute_StartsAllTheComponents_InLoop_AndWaitsForThem()", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_69 [label="component1.Verify(x => x.Execute(It.IsAny<CancellationToken>()), Times.AtLeast(5))", span="80-80", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Execute_StartsAllTheComponents_InLoop_AndWaitsForThem()", color=red, community=0, file="BackgroundServerFacts.cs"];
m5_65 [label="var component2 = CreateProcessMock<IBackgroundProcess>()", span="73-73", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Execute_StartsAllTheComponents_InLoop_AndWaitsForThem()", file="BackgroundServerFacts.cs"];
m5_66 [label="component2.Setup(x => x.Execute(It.IsAny<BackgroundProcessContext>())).Callback(() => Thread.Sleep(10))", span="74-74", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Execute_StartsAllTheComponents_InLoop_AndWaitsForThem()", file="BackgroundServerFacts.cs"];
m5_70 [label="component2.Verify(x => x.Execute(It.IsNotNull<BackgroundProcessContext>()), Times.AtLeast(5))", span="81-81", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Execute_StartsAllTheComponents_InLoop_AndWaitsForThem()", file="BackgroundServerFacts.cs"];
m5_67 [label="CreateServer()", span="77-77", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Execute_StartsAllTheComponents_InLoop_AndWaitsForThem()", file="BackgroundServerFacts.cs"];
m5_68 [label="Thread.Sleep(100)", span="77-77", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Execute_StartsAllTheComponents_InLoop_AndWaitsForThem()", file="BackgroundServerFacts.cs"];
m5_71 [label="Exit Hangfire.Core.Tests.Server.BackgroundServerFacts.Execute_StartsAllTheComponents_InLoop_AndWaitsForThem()", span="68-68", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Execute_StartsAllTheComponents_InLoop_AndWaitsForThem()", file="BackgroundServerFacts.cs"];
m5_73 [label="Entry Unk.Callback", span="", cluster="Unk.Callback", file="BackgroundServerFacts.cs"];
m5_42 [label="Entry Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_AnnouncesTheServer_AndRemovesIt()", span="56-56", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_AnnouncesTheServer_AndRemovesIt()", file="BackgroundServerFacts.cs"];
m5_43 [label="CreateServer()", span="58-58", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_AnnouncesTheServer_AndRemovesIt()", file="BackgroundServerFacts.cs"];
m5_44 [label="Thread.Sleep(50)", span="58-58", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_AnnouncesTheServer_AndRemovesIt()", file="BackgroundServerFacts.cs"];
m5_45 [label="_connection.Verify(x => x.AnnounceServer(\r\n                It.IsNotNull<string>(),\r\n                It.Is<ServerContext>(y => y.Queues == _queues)))", span="60-62", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_AnnouncesTheServer_AndRemovesIt()", file="BackgroundServerFacts.cs"];
m5_46 [label="_connection.Verify(x => x.RemoveServer(It.IsNotNull<string>()))", span="64-64", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_AnnouncesTheServer_AndRemovesIt()", file="BackgroundServerFacts.cs"];
m5_47 [label="Exit Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_AnnouncesTheServer_AndRemovesIt()", span="56-56", cluster="Hangfire.Core.Tests.Server.BackgroundServerFacts.Ctor_AnnouncesTheServer_AndRemovesIt()", file="BackgroundServerFacts.cs"];
m5_12 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="BackgroundServerFacts.cs"];
m5_50 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="BackgroundServerFacts.cs"];
m5_7 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="BackgroundServerFacts.cs"];
m5_102 [label="Hangfire.Core.Tests.Server.BackgroundServerFacts", span="", file="BackgroundServerFacts.cs"];
m6_56 [label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76", cluster="HangFire.Web.RazorPage.Write(object)", file="CountersAggregator.cs"];
m6_12 [label="pager.TotalPageCount == 0", span="91-91", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_22 [label="Write(HtmlHelper.JobId(job.Key))", span="163-163", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_23 [label="WriteLiteral(''\r\n                    </a>\r\n'')", span="168-168", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_25 [label="WriteLiteral(''                        <span title=\''Job\'s state has been changed while fetching '' +\r\n''data.\'' class=\''glyphicon glyphicon-question-sign\''></span>\r\n'')", span="179-180", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_24 [label="!job.Value.InScheduledState", span="173-173", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_26 [label="WriteLiteral(''                </td>\r\n                <td data-moment=\'''')", span="190-190", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_61 [label="Entry HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.JobMethod)", span="34-34", cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.JobMethod)", file="CountersAggregator.cs"];
m6_28 [label="WriteLiteral(''\''>'')", span="200-200", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_0 [label="Entry HangFire.Web.Pages.ScheduledJobsPage.Execute()", span="47-47", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_1 [label="WriteLiteral(''\r\n'')", span="51-51", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_4 [label="int.TryParse(Request.QueryString[''from''], out from)", span="66-66", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_2 [label="Layout = new LayoutPage { Title = ''Scheduled Jobs'' }", span="62-62", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_3 [label="int from, perPage", span="64-64", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_7 [label="JobList<ScheduleDto> scheduledJobs", span="70-70", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_5 [label="int.TryParse(Request.QueryString[''count''], out perPage)", span="67-67", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_6 [label="Pager pager", span="69-69", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs", color=green, community=0];
m6_8 [label="var monitor = JobStorage.Current.CreateMonitoring()", span="72-72", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_59 [label="Entry HangFire.Web.HtmlHelper.QueueLabel(HangFire.Common.JobMethod)", span="90-90", cluster="HangFire.Web.HtmlHelper.QueueLabel(HangFire.Common.JobMethod)", file="CountersAggregator.cs"];
m6_49 [label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="29-29", cluster="HangFire.Web.Pager.Pager(int, int, long)", file="CountersAggregator.cs"];
m6_11 [label="WriteLiteral(''\r\n'')", span="86-86", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_48 [label="Entry HangFire.JobStorage.CreateMonitoring()", span="43-43", cluster="HangFire.JobStorage.CreateMonitoring()", file="CountersAggregator.cs"];
m6_47 [label="Entry Unk.TryParse", span="", cluster="Unk.TryParse", file="CountersAggregator.cs"];
m6_45 [label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69", cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="CountersAggregator.cs"];
m6_54 [label="Entry HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", span="89-89", cluster="HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", file="CountersAggregator.cs"];
m6_18 [label="Write(!job.Value.InScheduledState ? ''obsolete-data'' : null)", span="143-143", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_19 [label="WriteLiteral(''\''>\r\n                <td>\r\n                    <a href=\'''')", span="148-148", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_20 [label="Write(Request.LinkTo(''/job/'' + job.Key))", span="153-153", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_27 [label="Write(JobHelper.ToStringTimestamp(job.Value.ScheduledAt))", span="195-195", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_60 [label="Entry HangFire.Web.HtmlHelper.DisplayMethodHint(HangFire.Common.JobMethod)", span="45-45", cluster="HangFire.Web.HtmlHelper.DisplayMethodHint(HangFire.Common.JobMethod)", file="CountersAggregator.cs"];
m6_9 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)", file="CountersAggregator.cs"];
m6_13 [label="WriteLiteral(''    <div class=\''alert alert-info\''>\r\n        There are no scheduled jobs.\r\n    </d'' +\r\n''iv>\r\n'')", span="97-98", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_14 [label="Entry HangFire.JobDispatcherPool.TakeFree()", span="26-26", cluster="HangFire.JobDispatcherPool.TakeFree()", file="CountersAggregator.cs"];
m6_15 [label="return _freeDispatchers.Take();", span="28-28", cluster="HangFire.JobDispatcherPool.TakeFree()", file="CountersAggregator.cs"];
m6_17 [label="Entry System.Collections.Concurrent.BlockingCollection<T>.Take()", span="0-0", cluster="System.Collections.Concurrent.BlockingCollection<T>.Take()", file="CountersAggregator.cs"];
m6_21 [label="Entry System.Collections.Concurrent.BlockingCollection<T>.Add(T)", span="0-0", cluster="System.Collections.Concurrent.BlockingCollection<T>.Add(T)", file="CountersAggregator.cs"];
m6_29 [label="HangFire.JobDispatcherPool", span="", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_30 [label="WriteLiteral(''</td>\r\n                <td>\r\n                    '')", span="210-210", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_31 [label="Write(HtmlHelper.QueueLabel(job.Value.Method))", span="215-215", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_32 [label="WriteLiteral(''\r\n                    <span title=\'''')", span="220-220", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_33 [label="Write(HtmlHelper.DisplayMethodHint(job.Value.Method))", span="225-225", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_34 [label="WriteLiteral(''\''>\r\n                        '')", span="230-230", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_35 [label="Write(HtmlHelper.DisplayMethod(job.Value.Method))", span="235-235", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_36 [label="WriteLiteral(''\r\n                    </span>\r\n                </td>\r\n                <td>\r\n'')", span="240-240", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_38 [label="WriteLiteral(''                        <button class=\''btn btn-default btn-sm\'' data-ajax=\'''')", span="251-251", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_39 [label="Write(Request.LinkTo(''/schedule/enqueue/'' + job.Key))", span="256-256", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_40 [label="WriteLiteral(''\'' data-loading-text=\''Enqueueing...\''>\r\n                            <span class=\''gl'' +\r\n''yphicon glyphicon-play\''></span>\r\n                            Enqueue now\r\n      '' +\r\n''                  </button>\r\n'')", span="261-263", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_41 [label="WriteLiteral(''                </td>\r\n            </tr>\r\n'')", span="273-273", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_42 [label="WriteLiteral(''    </table>\r\n'')", span="283-283", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_43 [label="Write(RenderPartial(new Paginator(pager)))", span="295-295", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_10 [label="Entry System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T>)", span="0-0", cluster="System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T>)", file="CountersAggregator.cs"];
m6_16 [label="Exit HangFire.JobDispatcherPool.TakeFree()", span="26-26", cluster="HangFire.JobDispatcherPool.TakeFree()", file="CountersAggregator.cs"];
m6_37 [label="job.Value.InScheduledState", span="245-245", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_44 [label="Exit HangFire.Web.Pages.ScheduledJobsPage.Execute()", span="47-47", cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="CountersAggregator.cs"];
m6_53 [label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6", cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="CountersAggregator.cs"];
m6_58 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="CountersAggregator.cs"];
m6_55 [label="Entry Unk.Write", span="", cluster="Unk.Write", file="CountersAggregator.cs"];
m6_57 [label="Entry HangFire.Web.HtmlHelper.JobId(string, bool)", span="55-55", cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", file="CountersAggregator.cs"];
m6_50 [label="Entry HangFire.Storage.Monitoring.IMonitoringApi.ScheduledCount()", span="28-28", cluster="HangFire.Storage.Monitoring.IMonitoringApi.ScheduledCount()", file="CountersAggregator.cs"];
m6_46 [label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4", cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="CountersAggregator.cs"];
m6_51 [label="Entry HttpRequestBase.LinkTo(string)", span="24-24", cluster="HttpRequestBase.LinkTo(string)", file="CountersAggregator.cs"];
m6_62 [label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6", cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="CountersAggregator.cs"];
m6_52 [label="Entry HangFire.Storage.Monitoring.IMonitoringApi.ScheduledJobs(int, int)", span="24-24", cluster="HangFire.Storage.Monitoring.IMonitoringApi.ScheduledJobs(int, int)", file="CountersAggregator.cs"];
m6_63 [label="HangFire.Web.Pages.ScheduledJobsPage", span="", file="CountersAggregator.cs"];
m7_5 [label="_storage = storage", span="54-54", cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs"];
m7_6 [label="_checkInterval = checkInterval", span="55-55", cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs"];
m7_7 [label="Exit Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="50-50", cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs"];
m7_0 [label="Entry HangFire.Tests.JobSteps.GivenAJob()", span="15-15", cluster="HangFire.Tests.JobSteps.GivenAJob()", file="ExpirationManager.cs"];
m7_1 [label="Given(String.Format(''a job of the '{0}' type'', DefaultJobType.AssemblyQualifiedName))", span="17-17", cluster="HangFire.Tests.JobSteps.GivenAJob()", file="ExpirationManager.cs"];
m7_2 [label="Entry Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="50-50", cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs"];
m7_17 [label="cancellationToken.ThrowIfCancellationRequested()", span="92-92", cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs"];
m7_23 [label="var jobState = Redis.Client.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', DefaultJobId),\r\n                ''State'')", span="59-61", cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="ExpirationManager.cs"];
m7_8 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="ExpirationManager.cs"];
m7_35 [label="Entry Hangfire.SqlServer.ExpirationManager.ToString()", span="100-100", cluster="Hangfire.SqlServer.ExpirationManager.ToString()", file="ExpirationManager.cs"];
m7_36 [label="return GetType().ToString();", span="102-102", cluster="Hangfire.SqlServer.ExpirationManager.ToString()", color=green, community=0, file="ExpirationManager.cs"];
m7_37 [label="Exit Hangfire.SqlServer.ExpirationManager.ToString()", span="100-100", cluster="Hangfire.SqlServer.ExpirationManager.ToString()", file="ExpirationManager.cs"];
m7_19 [label="cancellationToken.WaitHandle.WaitOne(_checkInterval)", span="97-97", cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs"];
m7_18 [label="removedCount != 0", span="94-94", cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs"];
m7_20 [label="Exit Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", span="58-58", cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs"];
m7_21 [label="Entry Hangfire.Logging.ILog.DebugFormat(string, params object[])", span="122-122", cluster="Hangfire.Logging.ILog.DebugFormat(string, params object[])", file="ExpirationManager.cs"];
m7_38 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="ExpirationManager.cs"];
m7_16 [label="cancellationToken.WaitHandle.WaitOne(DelayBetweenPasses)", span="91-91", cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs"];
m7_12 [label="int removedCount = 0", span="64-64", cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs"];
m7_13 [label="_storage.UseConnection(connection =>\r\n                    {\r\n                        SqlServerDistributedLock.Acquire(connection, DistributedLockKey, DefaultLockTimeout);\r\n\r\n                        try\r\n                        {\r\n                            removedCount = connection.Execute(\r\n                                String.Format(@''\r\nset transaction isolation level read committed;\r\ndelete top (@count) from HangFire.[{0}] with (readpast) where ExpireAt < @now;'', table),\r\n                                new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass });\r\n                        }\r\n                        finally\r\n                        {\r\n                            SqlServerDistributedLock.Release(connection, DistributedLockKey);\r\n                        }\r\n                    })", span="68-84", cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs"];
m7_14 [label="removedCount > 0", span="86-86", cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs"];
m7_32 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="ExpirationManager.cs"];
m7_3 [label="storage == null", span="52-52", cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs"];
m7_9 [label="Entry Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", span="58-58", cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs"];
m7_10 [label=ProcessedTables, span="60-60", cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs"];
m7_11 [label="Logger.DebugFormat(''Removing outdated records from table '{0}'...'', table)", span="62-62", cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs"];
m7_15 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ExpirationManager.cs"];
m7_31 [label="Entry Unk.Acquire", span="", cluster="Unk.Acquire", file="ExpirationManager.cs"];
m7_39 [label="Entry System.Type.ToString()", span="0-0", cluster="System.Type.ToString()", file="ExpirationManager.cs"];
m7_27 [label="Entry lambda expression", span="68-84", cluster="lambda expression", file="ExpirationManager.cs"];
m7_34 [label="Entry Unk.Release", span="", cluster="Unk.Release", file="ExpirationManager.cs"];
m7_22 [label="Entry HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", span="57-57", cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="ExpirationManager.cs"];
m7_26 [label="Entry Unk.GetValueFromHash", span="", cluster="Unk.GetValueFromHash", file="ExpirationManager.cs"];
m7_24 [label="Assert.AreEqual(state, jobState)", span="63-63", cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="ExpirationManager.cs"];
m7_4 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="ExpirationManager.cs"];
m7_29 [label="removedCount = connection.Execute(\r\n                                String.Format(@''\r\nset transaction isolation level read committed;\r\ndelete top (@count) from HangFire.[{0}] with (readpast) where ExpireAt < @now;'', table),\r\n                                new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass })", span="74-78", cluster="lambda expression", file="ExpirationManager.cs"];
m7_28 [label="SqlServerDistributedLock.Acquire(connection, DistributedLockKey, DefaultLockTimeout)", span="70-70", cluster="lambda expression", file="ExpirationManager.cs"];
m7_30 [label="Exit lambda expression", span="68-84", cluster="lambda expression", file="ExpirationManager.cs"];
m7_25 [label="Exit HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", span="57-57", cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="ExpirationManager.cs"];
m7_33 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="ExpirationManager.cs"];
m7_40 [label="Hangfire.SqlServer.ExpirationManager", span="", file="ExpirationManager.cs"];
m7_41 [label=table, span="", file="ExpirationManager.cs"];
m8_2 [label="Entry Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="63-63", cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="IBackgroundJobClient.cs"];
m8_3 [label="Exit Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="63-63", cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="IBackgroundJobClient.cs"];
m8_0 [label="Entry Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="50-50", cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="IBackgroundJobClient.cs"];
m8_1 [label="Exit Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="50-50", cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="IBackgroundJobClient.cs"];
m9_6 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", span="20-20", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_7 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Create(\r\n                    null, () => StaticMethod(), _state.Object))", span="22-24", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_8 [label="Assert.Equal(''client'', exception.ParamName)", span="26-26", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_9 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", span="20-20", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_95 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", span="92-92", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_96 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod(), ''critical''))", span="94-96", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_97 [label="Assert.Equal(''client'', exception.ParamName)", span="98-98", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_98 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", span="92-92", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_4 [label="Entry Mock<IBackgroundJobClient>.cstr", span="", cluster="Mock<IBackgroundJobClient>.cstr", file="Job.cs"];
m9_11 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="Job.cs"];
m9_52 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", span="56-56", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_53 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod()))", span="58-60", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_54 [label="Assert.Equal(''client'', exception.ParamName)", span="62-62", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_55 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", span="56-56", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_41 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", span="176-176", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", file="Job.cs"];
m9_194 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", span="176-176", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", file="Job.cs"];
m9_151 [label="Entry HangFire.BackgroundJobClientExtensions.Schedule(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", span="106-106", cluster="HangFire.BackgroundJobClientExtensions.Schedule(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", file="Job.cs"];
m9_176 [label="Entry HangFire.BackgroundJobClientExtensions.Schedule<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="123-123", cluster="HangFire.BackgroundJobClientExtensions.Schedule<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", file="Job.cs"];
m9_180 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", span="162-162", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="Job.cs"];
m9_181 [label="_client.Object.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                x => x.InstanceMethod(), TimeSpan.FromDays(1))", span="164-165", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="Job.cs"];
m9_182 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow)))", span="167-169", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="Job.cs"];
m9_183 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", span="162-162", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="Job.cs"];
m9_150 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="Job.cs"];
m9_67 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="Job.cs"];
m9_20 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", span="30-30", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="Job.cs"];
m9_21 [label="_client.Object.Create(() => StaticMethod(), _state.Object)", span="32-32", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="Job.cs"];
m9_22 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), _state.Object))", span="34-34", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", color=red, community=0, file="Job.cs"];
m9_23 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", span="30-30", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="Job.cs"];
m9_119 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", span="112-112", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_120 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), ''critical''))", span="114-116", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_121 [label="Assert.Equal(''client'', exception.ParamName)", span="118-118", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_122 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", span="112-112", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_106 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", span="102-102", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="Job.cs"];
m9_107 [label="_client.Object.Enqueue(() => StaticMethod(), ''critical'')", span="104-104", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="Job.cs"];
m9_108 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<EnqueuedState>(state => state.Queue == ''critical'')))", span="106-108", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="Job.cs"];
m9_109 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", span="102-102", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="Job.cs"];
m9_126 [label="Entry HangFire.BackgroundJobClientExtensions.Enqueue<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, string)", span="90-90", cluster="HangFire.BackgroundJobClientExtensions.Enqueue<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, string)", file="Job.cs"];
m9_5 [label="Entry Mock<State>.cstr", span="", cluster="Mock<State>.cstr", file="Job.cs"];
m9_169 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", span="152-152", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_170 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), TimeSpan.FromDays(1)))", span="154-156", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_171 [label="Assert.Equal(''client'', exception.ParamName)", span="158-158", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_172 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", span="152-152", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_19 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", span="172-172", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", file="Job.cs"];
m9_193 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", span="172-172", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", file="Job.cs"];
m9_190 [label="Entry lambda expression", span="169-169", cluster="lambda expression", file="Job.cs"];
m9_12 [label="Entry lambda expression", span="23-24", cluster="lambda expression", file="Job.cs"];
m9_13 [label="BackgroundJobClientExtensions.Create(\r\n                    null, () => StaticMethod(), _state.Object)", span="23-24", cluster="lambda expression", file="Job.cs"];
m9_14 [label="Exit lambda expression", span="23-24", cluster="lambda expression", file="Job.cs"];
m9_16 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="Job.cs"];
m9_17 [label="StaticMethod()", span="24-24", cluster="lambda expression", file="Job.cs"];
m9_18 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="Job.cs"];
m9_25 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="Job.cs"];
m9_28 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="Job.cs"];
m9_26 [label="StaticMethod()", span="32-32", cluster="lambda expression", file="Job.cs"];
m9_27 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="Job.cs"];
m9_29 [label="x.Create(It.IsNotNull<Job>(), _state.Object)", span="34-34", cluster="lambda expression", color=red, community=0, file="Job.cs"];
m9_30 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="Job.cs"];
m9_35 [label="Entry lambda expression", span="41-42", cluster="lambda expression", file="Job.cs"];
m9_36 [label="BackgroundJobClientExtensions.Create<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), _state.Object)", span="41-42", cluster="lambda expression", color=red, community=0, file="Job.cs"];
m9_37 [label="Exit lambda expression", span="41-42", cluster="lambda expression", file="Job.cs"];
m9_38 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="Job.cs"];
m9_39 [label="x.InstanceMethod()", span="42-42", cluster="lambda expression", color=red, community=0, file="Job.cs"];
m9_40 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="Job.cs"];
m9_46 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="Job.cs"];
m9_49 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="Job.cs"];
m9_47 [label="x.InstanceMethod()", span="50-50", cluster="lambda expression", file="Job.cs"];
m9_48 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="Job.cs"];
m9_50 [label="x.Create(It.IsNotNull<Job>(), _state.Object)", span="52-52", cluster="lambda expression", file="Job.cs"];
m9_51 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="Job.cs"];
m9_56 [label="Entry lambda expression", span="59-60", cluster="lambda expression", file="Job.cs"];
m9_57 [label="BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod())", span="59-60", cluster="lambda expression", file="Job.cs"];
m9_58 [label="Exit lambda expression", span="59-60", cluster="lambda expression", file="Job.cs"];
m9_60 [label="Entry lambda expression", span="60-60", cluster="lambda expression", file="Job.cs"];
m9_61 [label="StaticMethod()", span="60-60", cluster="lambda expression", file="Job.cs"];
m9_62 [label="Exit lambda expression", span="60-60", cluster="lambda expression", file="Job.cs"];
m9_68 [label="Entry lambda expression", span="68-68", cluster="lambda expression", file="Job.cs"];
m9_71 [label="Entry lambda expression", span="70-70", cluster="lambda expression", file="Job.cs"];
m9_69 [label="StaticMethod()", span="68-68", cluster="lambda expression", file="Job.cs"];
m9_70 [label="Exit lambda expression", span="68-68", cluster="lambda expression", file="Job.cs"];
m9_72 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="70-70", cluster="lambda expression", file="Job.cs"];
m9_73 [label="Exit lambda expression", span="70-70", cluster="lambda expression", file="Job.cs"];
m9_78 [label="Entry lambda expression", span="77-78", cluster="lambda expression", file="Job.cs"];
m9_79 [label="BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod())", span="77-78", cluster="lambda expression", file="Job.cs"];
m9_80 [label="Exit lambda expression", span="77-78", cluster="lambda expression", file="Job.cs"];
m9_82 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="Job.cs"];
m9_83 [label="x.InstanceMethod()", span="78-78", cluster="lambda expression", file="Job.cs"];
m9_84 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="Job.cs"];
m9_89 [label="Entry lambda expression", span="86-86", cluster="lambda expression", file="Job.cs"];
m9_92 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="Job.cs"];
m9_90 [label="x.InstanceMethod()", span="86-86", cluster="lambda expression", file="Job.cs"];
m9_91 [label="Exit lambda expression", span="86-86", cluster="lambda expression", file="Job.cs"];
m9_93 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="88-88", cluster="lambda expression", file="Job.cs"];
m9_94 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="Job.cs"];
m9_99 [label="Entry lambda expression", span="95-96", cluster="lambda expression", file="Job.cs"];
m9_100 [label="BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod(), ''critical'')", span="95-96", cluster="lambda expression", file="Job.cs"];
m9_101 [label="Exit lambda expression", span="95-96", cluster="lambda expression", file="Job.cs"];
m9_103 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="Job.cs"];
m9_104 [label="StaticMethod()", span="96-96", cluster="lambda expression", file="Job.cs"];
m9_105 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="Job.cs"];
m9_110 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="Job.cs"];
m9_113 [label="Entry lambda expression", span="106-108", cluster="lambda expression", file="Job.cs"];
m9_111 [label="StaticMethod()", span="104-104", cluster="lambda expression", file="Job.cs"];
m9_112 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="Job.cs"];
m9_114 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<EnqueuedState>(state => state.Queue == ''critical''))", span="106-108", cluster="lambda expression", file="Job.cs"];
m9_115 [label="Exit lambda expression", span="106-108", cluster="lambda expression", file="Job.cs"];
m9_116 [label="Entry lambda expression", span="108-108", cluster="lambda expression", file="Job.cs"];
m9_117 [label="state.Queue == ''critical''", span="108-108", cluster="lambda expression", file="Job.cs"];
m9_118 [label="Exit lambda expression", span="108-108", cluster="lambda expression", file="Job.cs"];
m9_123 [label="Entry lambda expression", span="115-116", cluster="lambda expression", file="Job.cs"];
m9_124 [label="BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), ''critical'')", span="115-116", cluster="lambda expression", file="Job.cs"];
m9_125 [label="Exit lambda expression", span="115-116", cluster="lambda expression", file="Job.cs"];
m9_127 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="Job.cs"];
m9_128 [label="x.InstanceMethod()", span="116-116", cluster="lambda expression", file="Job.cs"];
m9_129 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="Job.cs"];
m9_134 [label="Entry lambda expression", span="124-124", cluster="lambda expression", file="Job.cs"];
m9_137 [label="Entry lambda expression", span="126-128", cluster="lambda expression", file="Job.cs"];
m9_135 [label="x.InstanceMethod()", span="124-124", cluster="lambda expression", file="Job.cs"];
m9_136 [label="Exit lambda expression", span="124-124", cluster="lambda expression", file="Job.cs"];
m9_138 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<EnqueuedState>(state => state.Queue == ''critical''))", span="126-128", cluster="lambda expression", file="Job.cs"];
m9_139 [label="Exit lambda expression", span="126-128", cluster="lambda expression", file="Job.cs"];
m9_140 [label="Entry lambda expression", span="128-128", cluster="lambda expression", file="Job.cs"];
m9_141 [label="state.Queue == ''critical''", span="128-128", cluster="lambda expression", file="Job.cs"];
m9_142 [label="Exit lambda expression", span="128-128", cluster="lambda expression", file="Job.cs"];
m9_147 [label="Entry lambda expression", span="135-136", cluster="lambda expression", file="Job.cs"];
m9_148 [label="BackgroundJobClientExtensions.Schedule(\r\n                    null, () => StaticMethod(), TimeSpan.FromDays(1))", span="135-136", cluster="lambda expression", file="Job.cs"];
m9_149 [label="Exit lambda expression", span="135-136", cluster="lambda expression", file="Job.cs"];
m9_152 [label="Entry lambda expression", span="136-136", cluster="lambda expression", file="Job.cs"];
m9_153 [label="StaticMethod()", span="136-136", cluster="lambda expression", file="Job.cs"];
m9_154 [label="Exit lambda expression", span="136-136", cluster="lambda expression", file="Job.cs"];
m9_160 [label="Entry lambda expression", span="144-144", cluster="lambda expression", file="Job.cs"];
m9_163 [label="Entry lambda expression", span="146-148", cluster="lambda expression", file="Job.cs"];
m9_161 [label="StaticMethod()", span="144-144", cluster="lambda expression", file="Job.cs"];
m9_162 [label="Exit lambda expression", span="144-144", cluster="lambda expression", file="Job.cs"];
m9_164 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow))", span="146-148", cluster="lambda expression", file="Job.cs"];
m9_165 [label="Exit lambda expression", span="146-148", cluster="lambda expression", file="Job.cs"];
m9_166 [label="Entry lambda expression", span="148-148", cluster="lambda expression", file="Job.cs"];
m9_167 [label="state.EnqueueAt > DateTime.UtcNow", span="148-148", cluster="lambda expression", file="Job.cs"];
m9_168 [label="Exit lambda expression", span="148-148", cluster="lambda expression", file="Job.cs"];
m9_173 [label="Entry lambda expression", span="155-156", cluster="lambda expression", file="Job.cs"];
m9_174 [label="BackgroundJobClientExtensions.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), TimeSpan.FromDays(1))", span="155-156", cluster="lambda expression", file="Job.cs"];
m9_175 [label="Exit lambda expression", span="155-156", cluster="lambda expression", file="Job.cs"];
m9_177 [label="Entry lambda expression", span="156-156", cluster="lambda expression", file="Job.cs"];
m9_178 [label="x.InstanceMethod()", span="156-156", cluster="lambda expression", file="Job.cs"];
m9_179 [label="Exit lambda expression", span="156-156", cluster="lambda expression", file="Job.cs"];
m9_184 [label="Entry lambda expression", span="165-165", cluster="lambda expression", file="Job.cs"];
m9_187 [label="Entry lambda expression", span="167-169", cluster="lambda expression", file="Job.cs"];
m9_185 [label="x.InstanceMethod()", span="165-165", cluster="lambda expression", file="Job.cs"];
m9_186 [label="Exit lambda expression", span="165-165", cluster="lambda expression", file="Job.cs"];
m9_188 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow))", span="167-169", cluster="lambda expression", file="Job.cs"];
m9_189 [label="Exit lambda expression", span="167-169", cluster="lambda expression", file="Job.cs"];
m9_191 [label="state.EnqueueAt > DateTime.UtcNow", span="169-169", cluster="lambda expression", file="Job.cs"];
m9_192 [label="Exit lambda expression", span="169-169", cluster="lambda expression", file="Job.cs"];
m9_74 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", span="74-74", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_75 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod()))", span="76-78", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_76 [label="Assert.Equal(''client'', exception.ParamName)", span="80-80", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_77 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", span="74-74", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_85 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", span="84-84", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="Job.cs"];
m9_86 [label="_client.Object.Enqueue<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod())", span="86-86", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="Job.cs"];
m9_87 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="88-88", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="Job.cs"];
m9_88 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", span="84-84", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="Job.cs"];
m9_42 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", span="48-48", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="Job.cs"];
m9_43 [label="_client.Object.Create<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod(), _state.Object)", span="50-50", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="Job.cs"];
m9_44 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), _state.Object))", span="52-52", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="Job.cs"];
m9_45 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", span="48-48", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="Job.cs"];
m9_81 [label="Entry HangFire.BackgroundJobClientExtensions.Enqueue<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>)", span="53-53", cluster="HangFire.BackgroundJobClientExtensions.Enqueue<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>)", file="Job.cs"];
m9_63 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", span="66-66", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="Job.cs"];
m9_64 [label="_client.Object.Enqueue(() => StaticMethod())", span="68-68", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="Job.cs"];
m9_65 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="70-70", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="Job.cs"];
m9_66 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", span="66-66", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="Job.cs"];
m9_159 [label="Entry Unk.Schedule", span="", cluster="Unk.Schedule", file="Job.cs"];
m9_15 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="Job.cs"];
m9_0 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", span="13-13", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", file="Job.cs"];
m9_1 [label="_client = new Mock<IBackgroundJobClient>()", span="15-15", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", file="Job.cs"];
m9_2 [label="_state = new Mock<State>()", span="16-16", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", file="Job.cs"];
m9_3 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", span="13-13", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", file="Job.cs"];
m9_155 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", span="142-142", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="Job.cs"];
m9_156 [label="_client.Object.Schedule(() => StaticMethod(), TimeSpan.FromDays(1))", span="144-144", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="Job.cs"];
m9_157 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow)))", span="146-148", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="Job.cs"];
m9_158 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", span="142-142", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="Job.cs"];
m9_24 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="Job.cs"];
m9_102 [label="Entry HangFire.BackgroundJobClientExtensions.Enqueue(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, string)", span="71-71", cluster="HangFire.BackgroundJobClientExtensions.Enqueue(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, string)", file="Job.cs"];
m9_59 [label="Entry HangFire.BackgroundJobClientExtensions.Enqueue(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>)", span="35-35", cluster="HangFire.BackgroundJobClientExtensions.Enqueue(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>)", file="Job.cs"];
m9_143 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", span="132-132", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_144 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Schedule(\r\n                    null, () => StaticMethod(), TimeSpan.FromDays(1)))", span="134-136", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_145 [label="Assert.Equal(''client'', exception.ParamName)", span="138-138", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_146 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", span="132-132", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_31 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", span="38-38", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_32 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Create<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), _state.Object))", span="40-42", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", color=red, community=0, file="Job.cs"];
m9_33 [label="Assert.Equal(''client'', exception.ParamName)", span="44-44", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", color=red, community=0, file="Job.cs"];
m9_34 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", span="38-38", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="Job.cs"];
m9_130 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", span="122-122", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="Job.cs"];
m9_131 [label="_client.Object.Enqueue<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod(), ''critical'')", span="124-124", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="Job.cs"];
m9_132 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<EnqueuedState>(state => state.Queue == ''critical'')))", span="126-128", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="Job.cs"];
m9_133 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", span="122-122", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="Job.cs"];
m9_195 [label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts", span="", file="Job.cs"];
m11_12 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ProcessingState.cs"];
m11_13 [label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68", cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="ProcessingState.cs"];
m11_9 [label="Entry Hangfire.States.ProcessingState.SerializeData()", span="124-124", cluster="Hangfire.States.ProcessingState.SerializeData()", file="ProcessingState.cs"];
m11_10 [label="return new Dictionary<string, string>\r\n            {\r\n                { ''StartedAt'', JobHelper.SerializeDateTime(StartedAt) },\r\n                { ''ServerId'', ServerId },\r\n                { ''WorkerId'', WorkerId }\r\n            };", span="126-131", cluster="Hangfire.States.ProcessingState.SerializeData()", file="ProcessingState.cs"];
m11_11 [label="Exit Hangfire.States.ProcessingState.SerializeData()", span="124-124", cluster="Hangfire.States.ProcessingState.SerializeData()", file="ProcessingState.cs"];
m11_7 [label="Entry string.IsNullOrWhiteSpace(string)", span="0-0", cluster="string.IsNullOrWhiteSpace(string)", file="ProcessingState.cs"];
m11_0 [label="Entry Hangfire.States.ProcessingState.ProcessingState(string, string)", span="36-36", cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs"];
m11_1 [label="String.IsNullOrWhiteSpace(serverId)", span="38-38", cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs"];
m11_3 [label="ServerId = serverId", span="40-40", cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs"];
m11_5 [label="WorkerId = workerId", span="42-42", cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs"];
m11_2 [label="throw new ArgumentNullException(''serverId'');", span="38-38", cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs"];
m11_4 [label="StartedAt = DateTime.UtcNow", span="41-41", cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs"];
m11_6 [label="Exit Hangfire.States.ProcessingState.ProcessingState(string, string)", span="36-36", cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs"];
m11_14 [label="Hangfire.States.ProcessingState", span="", file="ProcessingState.cs"];
m12_27 [label="_throttler.Delay(context.CancellationToken)", span="96-96", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs"];
m12_81 [label="filters.Reverse()", span="150-150", cluster="HangFire.Server.JobPerformanceProcess.InvokeServerExceptionFilters(HangFire.Server.ServerExceptionContext, System.Collections.Generic.IEnumerable<HangFire.Server.IServerExceptionFilter>)", file="RecurringJobScheduler.cs"];
m12_31 [label="Entry HangFire.Server.JobPerformanceProcess.InvokeServerExceptionFilters(HangFire.Server.ServerExceptionContext, System.Collections.Generic.IEnumerable<HangFire.Server.IServerExceptionFilter>)", span="146-146", cluster="HangFire.Server.JobPerformanceProcess.InvokeServerExceptionFilters(HangFire.Server.ServerExceptionContext, System.Collections.Generic.IEnumerable<HangFire.Server.IServerExceptionFilter>)", file="RecurringJobScheduler.cs"];
m12_66 [label="wasError = true", span="117-117", cluster="HangFire.Server.JobPerformanceProcess.InvokePerformFilter(HangFire.Server.IServerFilter, HangFire.Server.PerformingContext, System.Func<HangFire.Server.PerformedContext>)", file="RecurringJobScheduler.cs"];
m12_30 [label="Entry HangFire.Server.ServerExceptionContext.ServerExceptionContext(HangFire.Server.PerformContext, System.Exception)", span="26-26", cluster="HangFire.Server.ServerExceptionContext.ServerExceptionContext(HangFire.Server.PerformContext, System.Exception)", file="RecurringJobScheduler.cs"];
m12_83 [label="Exit HangFire.Server.JobPerformanceProcess.InvokeServerExceptionFilters(HangFire.Server.ServerExceptionContext, System.Collections.Generic.IEnumerable<HangFire.Server.IServerExceptionFilter>)", span="146-146", cluster="HangFire.Server.JobPerformanceProcess.InvokeServerExceptionFilters(HangFire.Server.ServerExceptionContext, System.Collections.Generic.IEnumerable<HangFire.Server.IServerExceptionFilter>)", file="RecurringJobScheduler.cs"];
m12_38 [label="var thunk = filters.Reverse().Aggregate(continuation,\r\n                (next, filter) => () => InvokePerformFilter(filter, preContext, next))", span="81-82", cluster="HangFire.Server.JobPerformanceProcess.PerformJobWithFilters(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer, System.Collections.Generic.IEnumerable<HangFire.Server.IServerFilter>)", file="RecurringJobScheduler.cs"];
m12_39 [label="thunk()", span="84-84", cluster="HangFire.Server.JobPerformanceProcess.PerformJobWithFilters(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer, System.Collections.Generic.IEnumerable<HangFire.Server.IServerFilter>)", color=green, community=0, file="RecurringJobScheduler.cs"];
m12_40 [label="Exit HangFire.Server.JobPerformanceProcess.PerformJobWithFilters(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer, System.Collections.Generic.IEnumerable<HangFire.Server.IServerFilter>)", span="69-69", cluster="HangFire.Server.JobPerformanceProcess.PerformJobWithFilters(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer, System.Collections.Generic.IEnumerable<HangFire.Server.IServerFilter>)", file="RecurringJobScheduler.cs"];
m12_42 [label="var serializedJob = JobHelper.FromJson<InvocationData>(recurringJob[''Job''])", span="111-111", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_28 [label="Exit Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="63-63", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs"];
m12_32 [label="Entry Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55", cluster="Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="RecurringJobScheduler.cs"];
m12_33 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="RecurringJobScheduler.cs"];
m12_75 [label="return postContext;", span="143-143", cluster="HangFire.Server.JobPerformanceProcess.InvokePerformFilter(HangFire.Server.IServerFilter, HangFire.Server.PerformingContext, System.Func<HangFire.Server.PerformedContext>)", file="RecurringJobScheduler.cs"];
m12_70 [label="throw new JobPerformanceException(\r\n                        ''An exception occurred during execution of one of the filters'',\r\n                        filterException);", span="127-129", cluster="HangFire.Server.JobPerformanceProcess.InvokePerformFilter(HangFire.Server.IServerFilter, HangFire.Server.PerformingContext, System.Func<HangFire.Server.PerformedContext>)", file="RecurringJobScheduler.cs"];
m12_2 [label="Entry HangFire.Server.JobPerformanceProcess.JobPerformanceProcess(System.Collections.Generic.IEnumerable<object>)", span="32-32", cluster="HangFire.Server.JobPerformanceProcess.JobPerformanceProcess(System.Collections.Generic.IEnumerable<object>)", file="RecurringJobScheduler.cs"];
m12_3 [label="filters != null", span="35-35", cluster="HangFire.Server.JobPerformanceProcess.JobPerformanceProcess(System.Collections.Generic.IEnumerable<object>)", file="RecurringJobScheduler.cs"];
m12_4 [label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="49-49", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m12_5 [label="creationProcess == null", span="54-54", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m12_73 [label="!wasError", span="138-138", cluster="HangFire.Server.JobPerformanceProcess.InvokePerformFilter(HangFire.Server.IServerFilter, HangFire.Server.PerformingContext, System.Func<HangFire.Server.PerformedContext>)", file="RecurringJobScheduler.cs"];
m12_41 [label="Entry HangFire.Server.PerformingContext.PerformingContext(HangFire.Server.PerformContext)", span="24-24", cluster="HangFire.Server.PerformingContext.PerformingContext(HangFire.Server.PerformContext)", file="RecurringJobScheduler.cs"];
m12_82 [label="filter.OnServerException(context)", span="152-152", cluster="HangFire.Server.JobPerformanceProcess.InvokeServerExceptionFilters(HangFire.Server.ServerExceptionContext, System.Collections.Generic.IEnumerable<HangFire.Server.IServerExceptionFilter>)", file="RecurringJobScheduler.cs"];
m12_68 [label="filter.OnPerformed(postContext)", span="123-123", cluster="HangFire.Server.JobPerformanceProcess.InvokePerformFilter(HangFire.Server.IServerFilter, HangFire.Server.PerformingContext, System.Func<HangFire.Server.PerformedContext>)", file="RecurringJobScheduler.cs"];
m12_29 [label="Entry Hangfire.Server.IThrottler.Throttle(System.Threading.CancellationToken)", span="22-22", cluster="Hangfire.Server.IThrottler.Throttle(System.Threading.CancellationToken)", file="RecurringJobScheduler.cs"];
m12_36 [label="Entry Hangfire.Logging.ILog.WarnException(string, System.Exception)", span="278-278", cluster="Hangfire.Logging.ILog.WarnException(string, System.Exception)", file="RecurringJobScheduler.cs"];
m12_37 [label="Entry Hangfire.Server.IThrottler.Delay(System.Threading.CancellationToken)", span="23-23", cluster="Hangfire.Server.IThrottler.Delay(System.Threading.CancellationToken)", file="RecurringJobScheduler.cs"];
m12_78 [label="Entry Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", span="32-32", cluster="Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", file="RecurringJobScheduler.cs"];
m12_56 [label="String.IsNullOrEmpty(jobId)", span="141-141", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_57 [label="Logger.DebugFormat(\r\n                            ''Recurring job '{0}' execution at '{1}' has been canceled.'',\r\n                            recurringJobId,\r\n                            instant.NowInstant)", span="143-146", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_60 [label="changedFields.Add(''NextExecution'', JobHelper.SerializeDateTime(instant.NextInstant))", span="153-153", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_61 [label="connection.SetRangeInHash(\r\n                    String.Format(''recurring-job:{0}'', recurringJobId),\r\n                    changedFields)", span="155-157", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_64 [label="Exit Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", span="105-105", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_67 [label="Entry Unk.Parse", span="", cluster="Unk.Parse", file="RecurringJobScheduler.cs"];
m12_74 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="RecurringJobScheduler.cs"];
m12_58 [label="changedFields.Add(''LastExecution'', JobHelper.SerializeDateTime(instant.NowInstant))", span="149-149", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_59 [label="changedFields.Add(''LastJobId'', jobId ?? String.Empty)", span="150-150", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_62 [label=TimeZoneNotFoundException, span="159-159", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_63 [label="Logger.ErrorException(\r\n                    String.Format(''Recurring job '{0}' was not triggered: {1}.'', recurringJobId, ex.Message),\r\n                    ex)", span="161-163", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_65 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="RecurringJobScheduler.cs"];
m12_71 [label="Entry Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73", cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="RecurringJobScheduler.cs"];
m12_69 [label="Entry System.TimeZoneInfo.FindSystemTimeZoneById(string)", span="0-0", cluster="System.TimeZoneInfo.FindSystemTimeZoneById(string)", file="RecurringJobScheduler.cs"];
m12_72 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobScheduler.cs"];
m12_76 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="RecurringJobScheduler.cs"];
m12_35 [label="Entry Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", span="105-105", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_44 [label="var cron = recurringJob[''Cron'']", span="113-113", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_77 [label="Entry HangFire.Server.IServerFilter.OnPerforming(HangFire.Server.PerformingContext)", span="27-27", cluster="HangFire.Server.IServerFilter.OnPerforming(HangFire.Server.PerformingContext)", file="RecurringJobScheduler.cs"];
m12_34 [label="Entry Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64", cluster="Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", file="RecurringJobScheduler.cs"];
m12_43 [label="var job = serializedJob.Deserialize()", span="112-112", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_50 [label="instant.GetNextInstants(lastExecutionTime).Any()", span="130-130", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_80 [label="Entry HangFire.Server.IServerFilter.OnPerformed(HangFire.Server.PerformedContext)", span="33-33", cluster="HangFire.Server.IServerFilter.OnPerformed(HangFire.Server.PerformedContext)", file="RecurringJobScheduler.cs"];
m12_0 [label="Entry HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()", span="28-28", cluster="HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()", file="RecurringJobScheduler.cs"];
m12_1 [label="Exit HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()", span="28-28", cluster="HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()", file="RecurringJobScheduler.cs"];
m12_49 [label="var changedFields = new Dictionary<string, string>()", span="128-128", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_84 [label="Entry Hangfire.Logging.ILog.ErrorException(string, System.Exception)", span="159-159", cluster="Hangfire.Logging.ILog.ErrorException(string, System.Exception)", file="RecurringJobScheduler.cs"];
m12_53 [label="state.Queue = recurringJob[''Queue'']", span="135-135", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_7 [label="instantFactory == null", span="55-55", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m12_6 [label="throw new ArgumentNullException(''creationProcess'');", span="54-54", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m12_8 [label="throw new ArgumentNullException(''instantFactory'');", span="55-55", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m12_10 [label="throw new ArgumentNullException(''throttler'');", span="56-56", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m12_11 [label="_creationProcess = creationProcess", span="58-58", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m12_12 [label="_instantFactory = instantFactory", span="59-59", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m12_46 [label="var timeZone = recurringJob.ContainsKey(''TimeZoneId'')\r\n                    ? TimeZoneInfo.FindSystemTimeZoneById(recurringJob[''TimeZoneId''])\r\n                    : TimeZoneInfo.Utc", span="118-120", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_47 [label="var instant = _instantFactory(cronSchedule, timeZone)", span="122-122", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_54 [label="var context = new CreateContext(storage, connection, job, state)", span="138-138", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_51 [label="var state = new EnqueuedState { Reason = ''Triggered by recurring job scheduler'' }", span="132-132", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_45 [label="var cronSchedule = CrontabSchedule.Parse(cron)", span="114-114", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_48 [label="var lastExecutionTime = recurringJob.ContainsKey(''LastExecution'')\r\n                    ? JobHelper.DeserializeDateTime(recurringJob[''LastExecution''])\r\n                    : (DateTime?)null", span="124-126", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_52 [label="recurringJob.ContainsKey(''Queue'') && !String.IsNullOrEmpty(recurringJob[''Queue''])", span="133-133", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_55 [label="var jobId = _creationProcess.Run(context)", span="139-139", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m12_13 [label="_throttler = throttler", span="60-60", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m12_16 [label="throw new ArgumentNullException(''context'');", span="43-43", cluster="HangFire.Server.JobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="RecurringJobScheduler.cs"];
m12_17 [label="performer == null", span="44-44", cluster="HangFire.Server.JobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="RecurringJobScheduler.cs"];
m12_24 [label="!exceptionContext.ExceptionHandled", span="57-57", cluster="HangFire.Server.JobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="RecurringJobScheduler.cs"];
m12_18 [label="throw new ArgumentNullException(''performer'');", span="44-44", cluster="HangFire.Server.JobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="RecurringJobScheduler.cs"];
m12_22 [label="var exceptionContext = new ServerExceptionContext(context, ex)", span="54-54", cluster="HangFire.Server.JobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="RecurringJobScheduler.cs"];
m12_21 [label=Exception, span="52-52", cluster="HangFire.Server.JobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="RecurringJobScheduler.cs"];
m12_23 [label="InvokeServerExceptionFilters(exceptionContext, filterInfo.ServerExceptionFilters)", span="55-55", cluster="HangFire.Server.JobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="RecurringJobScheduler.cs"];
m12_25 [label="throw;", span="59-59", cluster="HangFire.Server.JobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="RecurringJobScheduler.cs"];
m12_19 [label="var filterInfo = GetFilters(context.Job)", span="46-46", cluster="HangFire.Server.JobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="RecurringJobScheduler.cs"];
m12_20 [label="PerformJobWithFilters(context, performer, filterInfo.ServerFilters)", span="50-50", cluster="HangFire.Server.JobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="RecurringJobScheduler.cs"];
m12_26 [label="Exit HangFire.Server.JobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", span="41-41", cluster="HangFire.Server.JobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="RecurringJobScheduler.cs"];
m12_9 [label="throttler == null", span="56-56", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m12_79 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="RecurringJobScheduler.cs"];
m12_14 [label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="49-49", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IJobCreationProcess, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m12_15 [label="context == null", span="43-43", cluster="HangFire.Server.JobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="RecurringJobScheduler.cs"];
m12_85 [label="Hangfire.Server.RecurringJobScheduler", span="", file="RecurringJobScheduler.cs"];
m12_86 [label="System.Collections.Generic.IEnumerable<object>", span="", file="RecurringJobScheduler.cs"];
m12_87 [label="HangFire.Server.IJobPerformer", span="", file="RecurringJobScheduler.cs"];
m12_88 [label="HangFire.Server.PerformContext", span="", file="RecurringJobScheduler.cs"];
m12_89 [label=preContext, span="", file="RecurringJobScheduler.cs"];
m12_90 [label="System.Func<HangFire.Server.PerformedContext>", span="", file="RecurringJobScheduler.cs"];
m12_91 [label="HangFire.Server.IServerFilter", span="", file="RecurringJobScheduler.cs"];
m13_6 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", span="27-27", cluster="HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", file="ScheduledState.cs"];
m13_7 [label="Exit HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", span="27-27", cluster="HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", file="ScheduledState.cs"];
m13_4 [label="Entry HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", span="26-26", cluster="HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="ScheduledState.cs"];
m13_5 [label="Exit HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", span="26-26", cluster="HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="ScheduledState.cs"];
m13_0 [label="Entry HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="24-24", cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="ScheduledState.cs"];
m13_1 [label="Exit HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="24-24", cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="ScheduledState.cs"];
m13_22 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="41-41", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="ScheduledState.cs"];
m13_23 [label="Exit HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="41-41", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="ScheduledState.cs"];
m13_26 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="45-45", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", file="ScheduledState.cs"];
m13_27 [label="Exit HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="45-45", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", file="ScheduledState.cs"];
m13_2 [label="Entry HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", span="25-25", cluster="HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", file="ScheduledState.cs"];
m13_3 [label="Exit HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", span="25-25", cluster="HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", file="ScheduledState.cs"];
m13_18 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", span="39-39", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", file="ScheduledState.cs"];
m13_19 [label="Exit HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", span="39-39", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", file="ScheduledState.cs"];
m13_28 [label="Entry HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="46-46", cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", file="ScheduledState.cs"];
m13_29 [label="Exit HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="46-46", cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", file="ScheduledState.cs"];
m13_8 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", span="30-30", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", file="ScheduledState.cs"];
m13_9 [label="Exit HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", span="30-30", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", file="ScheduledState.cs"];
m13_30 [label="Entry HangFire.Storage.IWriteOnlyTransaction.Commit()", span="48-48", cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="ScheduledState.cs"];
m13_31 [label="Exit HangFire.Storage.IWriteOnlyTransaction.Commit()", span="48-48", cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="ScheduledState.cs"];
m13_10 [label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="33-33", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="ScheduledState.cs"];
m13_11 [label="Exit HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="33-33", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="ScheduledState.cs"];
m13_20 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="40-40", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="ScheduledState.cs"];
m13_21 [label="Exit HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="40-40", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="ScheduledState.cs"];
m13_14 [label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="35-35", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="ScheduledState.cs"];
m13_15 [label="Exit HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="35-35", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="ScheduledState.cs"];
m13_12 [label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="34-34", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="ScheduledState.cs"];
m13_13 [label="Exit HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="34-34", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="ScheduledState.cs"];
m13_16 [label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="36-36", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="ScheduledState.cs"];
m13_17 [label="Exit HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="36-36", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="ScheduledState.cs"];
m13_24 [label="Entry HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="44-44", cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", file="ScheduledState.cs"];
m13_25 [label="Exit HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="44-44", cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", file="ScheduledState.cs"];
m14_11 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="SchedulePoller.cs"];
m14_10 [label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", file="SchedulePoller.cs"];
m14_14 [label="Entry HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_WrapsAnException_WithTheJobLoadException()", span="29-29", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_WrapsAnException_WithTheJobLoadException()", file="SchedulePoller.cs"];
m14_15 [label="var serializedData = new InvocationData(null, null, null, null)", span="31-31", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_WrapsAnException_WithTheJobLoadException()", file="SchedulePoller.cs"];
m14_16 [label="Assert.Throws<JobLoadException>(\r\n                () => serializedData.Deserialize())", span="33-34", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_WrapsAnException_WithTheJobLoadException()", file="SchedulePoller.cs"];
m14_17 [label="Exit HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_WrapsAnException_WithTheJobLoadException()", span="29-29", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_WrapsAnException_WithTheJobLoadException()", file="SchedulePoller.cs"];
m14_29 [label="Entry HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", span="51-51", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", file="SchedulePoller.cs"];
m14_30 [label="var serializedData = new InvocationData(\r\n                typeof(InvocationDataFacts).AssemblyQualifiedName,\r\n                ''NonExistingMethod'',\r\n                JobHelper.ToJson(new [] { typeof(string) }),\r\n                '''')", span="53-57", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", file="SchedulePoller.cs"];
m14_31 [label="Assert.Throws<JobLoadException>(\r\n                () => serializedData.Deserialize())", span="59-60", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", file="SchedulePoller.cs"];
m14_32 [label="Exit HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", span="51-51", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", file="SchedulePoller.cs"];
m14_22 [label="Entry HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", span="38-38", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", file="SchedulePoller.cs"];
m14_23 [label="var serializedData = new InvocationData(\r\n                ''NonExistingType'',\r\n                ''Perform'',\r\n                '''',\r\n                '''')", span="40-44", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", color=red, community=0, file="SchedulePoller.cs"];
m14_24 [label="Assert.Throws<JobLoadException>(\r\n                () => serializedData.Deserialize())", span="46-47", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", file="SchedulePoller.cs"];
m14_25 [label="Exit HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", span="38-38", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", file="SchedulePoller.cs"];
m14_12 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()", file="SchedulePoller.cs"];
m14_44 [label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="125-125", cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SchedulePoller.cs"];
m14_13 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SchedulePoller.cs"];
m14_36 [label="Entry HangFire.Core.Tests.Storage.InvocationDataFacts.Serialize_CorrectlySerializesTheData()", span="64-64", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Serialize_CorrectlySerializesTheData()", file="SchedulePoller.cs"];
m14_37 [label="var job = Job.FromExpression(() => Sample(''Hello''))", span="66-66", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Serialize_CorrectlySerializesTheData()", file="SchedulePoller.cs"];
m14_38 [label="var invocationData = InvocationData.Serialize(job)", span="67-67", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Serialize_CorrectlySerializesTheData()", file="SchedulePoller.cs"];
m14_39 [label="Assert.Equal(typeof(InvocationDataFacts).AssemblyQualifiedName, invocationData.Type)", span="69-69", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Serialize_CorrectlySerializesTheData()", file="SchedulePoller.cs"];
m14_40 [label="Assert.Equal(''Sample'', invocationData.Method)", span="70-70", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Serialize_CorrectlySerializesTheData()", file="SchedulePoller.cs"];
m14_41 [label="Assert.Equal(JobHelper.ToJson(new[] { typeof(string) }), invocationData.ParameterTypes)", span="71-71", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Serialize_CorrectlySerializesTheData()", file="SchedulePoller.cs"];
m14_42 [label="Assert.Equal(JobHelper.ToJson(new[] { ''Hello'' }), invocationData.Arguments)", span="72-72", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Serialize_CorrectlySerializesTheData()", file="SchedulePoller.cs"];
m14_43 [label="Exit HangFire.Core.Tests.Storage.InvocationDataFacts.Serialize_CorrectlySerializesTheData()", span="64-64", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Serialize_CorrectlySerializesTheData()", file="SchedulePoller.cs"];
m14_49 [label="Entry HangFire.Core.Tests.Storage.InvocationDataFacts.Sample(string)", span="75-75", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Sample(string)", file="SchedulePoller.cs"];
m14_50 [label="Exit HangFire.Core.Tests.Storage.InvocationDataFacts.Sample(string)", span="75-75", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Sample(string)", file="SchedulePoller.cs"];
m14_46 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="SchedulePoller.cs"];
m14_20 [label="serializedData.Deserialize()", span="34-34", cluster="lambda expression", file="SchedulePoller.cs"];
m14_19 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="SchedulePoller.cs"];
m14_21 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="SchedulePoller.cs"];
m14_27 [label="serializedData.Deserialize()", span="47-47", cluster="lambda expression", file="SchedulePoller.cs"];
m14_26 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="SchedulePoller.cs"];
m14_28 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="SchedulePoller.cs"];
m14_34 [label="serializedData.Deserialize()", span="60-60", cluster="lambda expression", file="SchedulePoller.cs"];
m14_33 [label="Entry lambda expression", span="60-60", cluster="lambda expression", file="SchedulePoller.cs"];
m14_35 [label="Exit lambda expression", span="60-60", cluster="lambda expression", file="SchedulePoller.cs"];
m14_47 [label="Sample(''Hello'')", span="66-66", cluster="lambda expression", file="SchedulePoller.cs"];
m14_48 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="SchedulePoller.cs"];
m14_0 [label="Entry HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_CorrectlyDeserializes_AllTheData()", span="10-10", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_CorrectlyDeserializes_AllTheData()", file="SchedulePoller.cs"];
m14_1 [label="var type = typeof(InvocationDataFacts)", span="12-12", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_CorrectlyDeserializes_AllTheData()", file="SchedulePoller.cs"];
m14_2 [label="var methodInfo = type.GetMethod(''Sample'')", span="13-13", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_CorrectlyDeserializes_AllTheData()", file="SchedulePoller.cs"];
m14_3 [label="var serializedData = new InvocationData(\r\n                type.AssemblyQualifiedName,\r\n                methodInfo.Name,\r\n                JobHelper.ToJson(new [] { typeof(string) }),\r\n                JobHelper.ToJson(new [] { ''Hello'' }))", span="15-19", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_CorrectlyDeserializes_AllTheData()", file="SchedulePoller.cs"];
m14_5 [label="Assert.Equal(type, job.Type)", span="23-23", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_CorrectlyDeserializes_AllTheData()", color=red, community=0, file="SchedulePoller.cs"];
m14_6 [label="Assert.Equal(methodInfo, job.Method)", span="24-24", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_CorrectlyDeserializes_AllTheData()", file="SchedulePoller.cs"];
m14_4 [label="var job = serializedData.Deserialize()", span="21-21", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_CorrectlyDeserializes_AllTheData()", file="SchedulePoller.cs"];
m14_7 [label="Assert.Equal(''Hello'', job.Arguments[0])", span="25-25", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_CorrectlyDeserializes_AllTheData()", file="SchedulePoller.cs"];
m14_8 [label="Exit HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_CorrectlyDeserializes_AllTheData()", span="10-10", cluster="HangFire.Core.Tests.Storage.InvocationDataFacts.Deserialize_CorrectlyDeserializes_AllTheData()", file="SchedulePoller.cs"];
m14_9 [label="Entry System.Type.GetMethod(string)", span="0-0", cluster="System.Type.GetMethod(string)", file="SchedulePoller.cs"];
m14_45 [label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65", cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="SchedulePoller.cs"];
m14_51 [label=serializedData, span="", file="SchedulePoller.cs"];
m14_52 [label=serializedData, span="", file="SchedulePoller.cs"];
m14_53 [label=serializedData, span="", file="SchedulePoller.cs"];
m15_18 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="26-26", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", file="SchedulePollerFacts.cs"];
m15_60 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="67-67", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SchedulePollerFacts.cs"];
m15_61 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="69-72", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SchedulePollerFacts.cs"];
m15_62 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="74-86", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SchedulePollerFacts.cs"];
m15_63 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="67-67", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SchedulePollerFacts.cs"];
m15_153 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="161-161", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SchedulePollerFacts.cs"];
m15_154 [label="UseConnection(sql =>\r\n            {\r\n                var correctJobQueue = new Mock<IPersistentJobQueue>();\r\n                var correctProvider = new Mock<IPersistentJobQueueProvider>();\r\n                correctProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                    .Returns(correctJobQueue.Object);\r\n\r\n                _queueProviders.Add(correctProvider.Object, new [] { ''default'' });\r\n\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''));\r\n\r\n                correctJobQueue.Verify(x => x.Enqueue(''default'', ''1''));\r\n            })", span="163-175", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SchedulePollerFacts.cs"];
m15_155 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="161-161", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SchedulePollerFacts.cs"];
m15_212 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="221-221", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SchedulePollerFacts.cs"];
m15_213 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="223-234", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SchedulePollerFacts.cs"];
m15_214 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="221-221", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SchedulePollerFacts.cs"];
m15_419 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="488-488", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SchedulePollerFacts.cs"];
m15_420 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="490-501", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SchedulePollerFacts.cs"];
m15_421 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="488-488", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SchedulePollerFacts.cs"];
m15_449 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="195-195", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SchedulePollerFacts.cs"];
m15_267 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="290-290", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SchedulePollerFacts.cs"];
m15_268 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="292-301", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SchedulePollerFacts.cs"];
m15_269 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="290-290", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SchedulePollerFacts.cs"];
m15_368 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="422-422", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SchedulePollerFacts.cs"];
m15_369 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="424-432", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SchedulePollerFacts.cs"];
m15_370 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="422-422", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SchedulePollerFacts.cs"];
m15_48 [label="var configurationAction = app.ApplicationServices.GetRequiredService<Action<IGlobalConfiguration>>()", span="92-92", cluster="Hangfire.HangfireApplicationBuilderExtensions.Initialize(IApplicationBuilder)", file="SchedulePollerFacts.cs"];
m15_152 [label="Entry Unk.AddJobState", span="", cluster="Unk.AddJobState", file="SchedulePollerFacts.cs"];
m15_331 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="371-371", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SchedulePollerFacts.cs"];
m15_332 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="373-384", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SchedulePollerFacts.cs"];
m15_333 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="371-371", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SchedulePollerFacts.cs"];
m15_343 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="174-174", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SchedulePollerFacts.cs"];
m15_305 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="339-339", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SchedulePollerFacts.cs"];
m15_306 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="341-350", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SchedulePollerFacts.cs"];
m15_307 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="339-339", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SchedulePollerFacts.cs"];
m15_406 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="188-188", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SchedulePollerFacts.cs"];
m15_431 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="505-505", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SchedulePollerFacts.cs"];
m15_432 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="507-523", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SchedulePollerFacts.cs"];
m15_433 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="505-505", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SchedulePollerFacts.cs"];
m15_49 [label="configurationAction(configuration)", span="93-93", cluster="Hangfire.HangfireApplicationBuilderExtensions.Initialize(IApplicationBuilder)", file="SchedulePollerFacts.cs"];
m15_505 [label="var transaction = new SqlServerWriteOnlyTransaction(connection, _queueProviders)", span="608-608", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SchedulePollerFacts.cs"];
m15_506 [label="action(transaction)", span="610-610", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SchedulePollerFacts.cs"];
m15_507 [label="transaction.Commit()", span="611-611", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SchedulePollerFacts.cs"];
m15_508 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="604-604", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SchedulePollerFacts.cs"];
m15_407 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="471-471", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SchedulePollerFacts.cs"];
m15_408 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="473-484", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SchedulePollerFacts.cs"];
m15_409 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="471-471", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SchedulePollerFacts.cs"];
m15_15 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="26-26", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", file="SchedulePollerFacts.cs"];
m15_43 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="61-61", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_44 [label="Assert.Null(anotherJob.ExpireAt)", span="62-62", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_46 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="SchedulePollerFacts.cs"];
m15_45 [label="Exit lambda expression", span="51-63", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_47 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SchedulePollerFacts.cs"];
m15_50 [label="Entry Unk.GetTestJob", span="", cluster="Unk.GetTestJob", file="SchedulePollerFacts.cs"];
m15_31 [label="additionalProcesses = additionalProcesses ?? services.GetServices<IBackgroundProcess>()", span="68-68", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireServer(IApplicationBuilder, Hangfire.BackgroundJobServerOptions, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_255 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="273-273", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SchedulePollerFacts.cs"];
m15_256 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="275-286", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SchedulePollerFacts.cs"];
m15_257 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="273-273", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SchedulePollerFacts.cs"];
m15_119 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="128-128", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SchedulePollerFacts.cs"];
m15_120 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="130-133", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SchedulePollerFacts.cs"];
m15_121 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="135-157", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SchedulePollerFacts.cs"];
m15_122 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="128-128", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SchedulePollerFacts.cs"];
m15_16 [label="Entry Unk.>", span="", cluster="Unk.>", file="SchedulePollerFacts.cs"];
m15_17 [label="Entry Hangfire.DashboardOptions.DashboardOptions()", span="24-24", cluster="Hangfire.DashboardOptions.DashboardOptions()", file="SchedulePollerFacts.cs"];
m15_293 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="322-322", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SchedulePollerFacts.cs"];
m15_294 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="324-335", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SchedulePollerFacts.cs"];
m15_295 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="322-322", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SchedulePollerFacts.cs"];
m15_7 [label="options = options ?? services.GetService<DashboardOptions>() ?? new DashboardOptions()", span="44-44", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireDashboard(IApplicationBuilder, string, Hangfire.DashboardOptions, Hangfire.JobStorage)", file="SchedulePollerFacts.cs", color=green, community=0];
m15_280 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="155-155", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SchedulePollerFacts.cs"];
m15_42 [label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1))", span="59-59", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_32 [label="var server = new BackgroundJobServer(options, storage, additionalProcesses)", span="70-70", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireServer(IApplicationBuilder, Hangfire.BackgroundJobServerOptions, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_33 [label="lifetime.ApplicationStopping.Register(() => server.Dispose())", span="72-72", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireServer(IApplicationBuilder, Hangfire.BackgroundJobServerOptions, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_34 [label="return app;", span="75-75", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireServer(IApplicationBuilder, Hangfire.BackgroundJobServerOptions, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_35 [label="Exit Hangfire.HangfireApplicationBuilderExtensions.UseHangfireServer(IApplicationBuilder, Hangfire.BackgroundJobServerOptions, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.JobStorage)", span="53-53", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireServer(IApplicationBuilder, Hangfire.BackgroundJobServerOptions, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_344 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="388-388", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SchedulePollerFacts.cs"];
m15_345 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="390-401", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SchedulePollerFacts.cs"];
m15_346 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="388-388", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SchedulePollerFacts.cs"];
m15_224 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="238-238", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SchedulePollerFacts.cs"];
m15_225 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="240-249", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SchedulePollerFacts.cs"];
m15_226 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="238-238", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SchedulePollerFacts.cs"];
m15_356 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="405-405", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SchedulePollerFacts.cs"];
m15_357 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="407-418", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SchedulePollerFacts.cs"];
m15_358 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="405-405", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SchedulePollerFacts.cs"];
m15_441 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="SchedulePollerFacts.cs"];
m15_319 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="354-354", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SchedulePollerFacts.cs"];
m15_320 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="356-367", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SchedulePollerFacts.cs"];
m15_321 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="354-354", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SchedulePollerFacts.cs"];
m15_52 [label="Entry System.Threading.Interlocked.CompareExchange(ref int, int, int)", span="0-0", cluster="System.Threading.Interlocked.CompareExchange(ref int, int, int)", file="SchedulePollerFacts.cs"];
m15_5 [label="Initialize(app)", span="40-40", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireDashboard(IApplicationBuilder, string, Hangfire.DashboardOptions, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_19 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SchedulePollerFacts.cs"];
m15_509 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="50-50", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SchedulePollerFacts.cs"];
m15_39 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_10 [label="app.Map(new PathString(pathMatch), x => x.UseMiddleware<AspNetCoreDashboardMiddleware>(storage, options, routes))", span="48-48", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireDashboard(IApplicationBuilder, string, Hangfire.DashboardOptions, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_11 [label="return app;", span="50-50", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireDashboard(IApplicationBuilder, string, Hangfire.DashboardOptions, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_12 [label="Exit Hangfire.HangfireApplicationBuilderExtensions.UseHangfireDashboard(IApplicationBuilder, string, Hangfire.DashboardOptions, Hangfire.JobStorage)", span="31-31", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireDashboard(IApplicationBuilder, string, Hangfire.DashboardOptions, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_20 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_21 [label="x.UseMiddleware<AspNetCoreDashboardMiddleware>(storage, options, routes)", span="48-48", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_22 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_28 [label="var lifetime = services.GetRequiredService<IApplicationLifetime>()", span="64-64", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireServer(IApplicationBuilder, Hangfire.BackgroundJobServerOptions, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_29 [label="options = options ?? services.GetService<BackgroundJobServerOptions>() ?? new BackgroundJobServerOptions()", span="66-66", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireServer(IApplicationBuilder, Hangfire.BackgroundJobServerOptions, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_30 [label="storage = storage ?? services.GetRequiredService<JobStorage>()", span="67-67", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireServer(IApplicationBuilder, Hangfire.BackgroundJobServerOptions, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_38 [label="Entry Unk.Register", span="", cluster="Unk.Register", file="SchedulePollerFacts.cs"];
m15_37 [label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", span="75-75", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="SchedulePollerFacts.cs"];
m15_40 [label="server.Dispose()", span="72-72", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_41 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_56 [label=routes, span="", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_55 [label="Hangfire.JobStorage", span="", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_57 [label=server, span="", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_65 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="76-76", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_66 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="77-77", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_64 [label="Entry lambda expression", span="74-86", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_67 [label="Commit(sql, x => x.PersistJob(jobId))", span="79-79", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_68 [label="var job = GetTestJob(sql, jobId)", span="81-81", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_70 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="84-84", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_75 [label="x.PersistJob(jobId)", span="79-79", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_74 [label="Entry lambda expression", span="79-79", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_69 [label="Assert.Null(job.ExpireAt)", span="82-82", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_71 [label="Assert.NotNull(anotherJob.ExpireAt)", span="85-85", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_72 [label="Exit lambda expression", span="74-86", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_76 [label="Exit lambda expression", span="79-79", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_83 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="99-99", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_84 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="100-100", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_82 [label="Entry lambda expression", span="97-124", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_89 [label="Commit(sql, x => x.SetJobState(jobId, state.Object))", span="108-108", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_90 [label="var job = GetTestJob(sql, jobId)", span="110-110", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_93 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="114-114", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_96 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="118-118", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_116 [label="x.SetJobState(jobId, state.Object)", span="108-108", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_97 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="119-119", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_85 [label="var state = new Mock<IState>()", span="102-102", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_86 [label="state.Setup(x => x.Name).Returns(''State'')", span="103-103", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_87 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="104-104", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_88 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="105-106", cluster="lambda expression", color=red, community=0, file="SchedulePollerFacts.cs"];
m15_105 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_108 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_111 [label="Entry lambda expression", span="105-105", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_115 [label="Entry lambda expression", span="108-108", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_91 [label="Assert.Equal(''State'', job.StateName)", span="111-111", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_92 [label="Assert.NotNull(job.StateId)", span="112-112", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_94 [label="Assert.Null(anotherJob.StateName)", span="115-115", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_95 [label="Assert.Null(anotherJob.StateId)", span="116-116", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_98 [label="Assert.Equal(''State'', jobState.Name)", span="120-120", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_99 [label="Assert.Equal(''Reason'', jobState.Reason)", span="121-121", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_100 [label="Assert.NotNull(jobState.CreatedAt)", span="122-122", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_101 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="123-123", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_102 [label="Exit lambda expression", span="97-124", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_106 [label="x.Name", span="103-103", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_107 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_109 [label="x.Reason", span="104-104", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_110 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_112 [label="x.SerializeData()", span="105-105", cluster="lambda expression", color=red, community=0, file="SchedulePollerFacts.cs"];
m15_113 [label="Exit lambda expression", span="105-105", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_117 [label="Exit lambda expression", span="108-108", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_124 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="137-137", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_123 [label="Entry lambda expression", span="135-157", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_129 [label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="145-145", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_130 [label="var job = GetTestJob(sql, jobId)", span="147-147", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_133 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="151-151", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_125 [label="var state = new Mock<IState>()", span="139-139", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_150 [label="x.AddJobState(jobId, state.Object)", span="145-145", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_134 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="152-152", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_126 [label="state.Setup(x => x.Name).Returns(''State'')", span="140-140", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_127 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="141-141", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_128 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="142-143", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_140 [label="Entry lambda expression", span="140-140", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_143 [label="Entry lambda expression", span="141-141", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_146 [label="Entry lambda expression", span="142-142", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_149 [label="Entry lambda expression", span="145-145", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_131 [label="Assert.Null(job.StateName)", span="148-148", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_132 [label="Assert.Null(job.StateId)", span="149-149", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_135 [label="Assert.Equal(''State'', jobState.Name)", span="153-153", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_136 [label="Assert.Equal(''Reason'', jobState.Reason)", span="154-154", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_137 [label="Assert.NotNull(jobState.CreatedAt)", span="155-155", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_138 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="156-156", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_139 [label="Exit lambda expression", span="135-157", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_141 [label="x.Name", span="140-140", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_142 [label="Exit lambda expression", span="140-140", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_144 [label="x.Reason", span="141-141", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_145 [label="Exit lambda expression", span="141-141", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_147 [label="x.SerializeData()", span="142-142", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_148 [label="Exit lambda expression", span="142-142", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_151 [label="Exit lambda expression", span="145-145", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_156 [label="Entry lambda expression", span="163-175", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_157 [label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="165-165", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_161 [label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="172-172", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_158 [label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="166-166", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_159 [label="correctProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                    .Returns(correctJobQueue.Object)", span="167-168", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_162 [label="correctJobQueue.Verify(x => x.Enqueue(''default'', ''1''))", span="174-174", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_160 [label="_queueProviders.Add(correctProvider.Object, new [] { ''default'' })", span="170-170", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_166 [label="Entry lambda expression", span="167-167", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_169 [label="Entry lambda expression", span="172-172", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_163 [label="Exit lambda expression", span="163-175", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_173 [label="Entry lambda expression", span="174-174", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_167 [label="x.GetJobQueue(It.IsNotNull<IDbConnection>())", span="167-167", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_168 [label="Exit lambda expression", span="167-167", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_170 [label="x.AddToQueue(''default'', ''1'')", span="172-172", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_171 [label="Exit lambda expression", span="172-172", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_174 [label="x.Enqueue(''default'', ''1'')", span="174-174", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_175 [label="Exit lambda expression", span="174-174", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_183 [label="Entry lambda expression", span="188-197", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_184 [label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="190-190", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_185 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="192-192", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_190 [label="Entry lambda expression", span="190-190", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_186 [label="Assert.Equal(''my-key'', record.Key)", span="194-194", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_187 [label="Assert.Equal(1, record.Value)", span="195-195", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_188 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="196-196", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_189 [label="Exit lambda expression", span="188-197", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_191 [label="x.IncrementCounter(''my-key'')", span="190-190", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_192 [label="Exit lambda expression", span="190-190", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_197 [label="Entry lambda expression", span="203-217", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_198 [label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="205-205", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_199 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="207-207", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_208 [label="Entry lambda expression", span="205-205", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_200 [label="Assert.Equal(''my-key'', record.Key)", span="209-209", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_201 [label="Assert.Equal(1, record.Value)", span="210-210", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_202 [label="Assert.NotNull(record.ExpireAt)", span="211-211", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_203 [label="var expireAt = (DateTime) record.ExpireAt", span="213-213", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_204 [label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="215-215", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_205 [label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="216-216", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_206 [label="Exit lambda expression", span="203-217", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_209 [label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="205-205", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_210 [label="Exit lambda expression", span="205-205", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_215 [label="Entry lambda expression", span="223-234", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_216 [label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                })", span="225-229", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_217 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="231-231", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_220 [label="Entry lambda expression", span="225-229", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_218 [label="Assert.Equal(2, recordCount)", span="233-233", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_219 [label="Exit lambda expression", span="223-234", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_221 [label="x.IncrementCounter(''my-key'')", span="227-227", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_222 [label="x.IncrementCounter(''my-key'')", span="228-228", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_223 [label="Exit lambda expression", span="225-229", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_227 [label="Entry lambda expression", span="240-249", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_228 [label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="242-242", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_229 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="244-244", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_234 [label="Entry lambda expression", span="242-242", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_230 [label="Assert.Equal(''my-key'', record.Key)", span="246-246", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_231 [label="Assert.Equal(-1, record.Value)", span="247-247", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_232 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="248-248", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_233 [label="Exit lambda expression", span="240-249", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_235 [label="x.DecrementCounter(''my-key'')", span="242-242", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_236 [label="Exit lambda expression", span="242-242", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_241 [label="Entry lambda expression", span="255-269", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_242 [label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="257-257", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_243 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="259-259", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_251 [label="Entry lambda expression", span="257-257", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_244 [label="Assert.Equal(''my-key'', record.Key)", span="261-261", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_245 [label="Assert.Equal(-1, record.Value)", span="262-262", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_246 [label="Assert.NotNull(record.ExpireAt)", span="263-263", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_247 [label="var expireAt = (DateTime)record.ExpireAt", span="265-265", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_248 [label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="267-267", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_249 [label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="268-268", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_250 [label="Exit lambda expression", span="255-269", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_252 [label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="257-257", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_253 [label="Exit lambda expression", span="257-257", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_258 [label="Entry lambda expression", span="275-286", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_259 [label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="277-281", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_260 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="283-283", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_263 [label="Entry lambda expression", span="277-281", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_261 [label="Assert.Equal(2, recordCount)", span="285-285", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_262 [label="Exit lambda expression", span="275-286", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_264 [label="x.DecrementCounter(''my-key'')", span="279-279", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_265 [label="x.DecrementCounter(''my-key'')", span="280-280", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_266 [label="Exit lambda expression", span="277-281", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_270 [label="Entry lambda expression", span="292-301", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_271 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="294-294", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_272 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="296-296", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_277 [label="Entry lambda expression", span="294-294", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_273 [label="Assert.Equal(''my-key'', record.Key)", span="298-298", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_274 [label="Assert.Equal(''my-value'', record.Value)", span="299-299", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_275 [label="Assert.Equal(0.0, record.Score, 2)", span="300-300", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_276 [label="Exit lambda expression", span="292-301", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_278 [label="x.AddToSet(''my-key'', ''my-value'')", span="294-294", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_279 [label="Exit lambda expression", span="294-294", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_284 [label="Entry lambda expression", span="307-318", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_285 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="309-313", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_286 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="315-315", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_289 [label="Entry lambda expression", span="309-313", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_287 [label="Assert.Equal(2, recordCount)", span="317-317", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_288 [label="Exit lambda expression", span="307-318", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_290 [label="x.AddToSet(''my-key'', ''my-value'')", span="311-311", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_291 [label="x.AddToSet(''my-key'', ''another-value'')", span="312-312", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_292 [label="Exit lambda expression", span="309-313", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_296 [label="Entry lambda expression", span="324-335", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_297 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                })", span="326-330", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_298 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="332-332", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_301 [label="Entry lambda expression", span="326-330", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_299 [label="Assert.Equal(1, recordCount)", span="334-334", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_300 [label="Exit lambda expression", span="324-335", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_302 [label="x.AddToSet(''my-key'', ''my-value'')", span="328-328", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_303 [label="x.AddToSet(''my-key'', ''my-value'')", span="329-329", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_304 [label="Exit lambda expression", span="326-330", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_308 [label="Entry lambda expression", span="341-350", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_309 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="343-343", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_310 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="345-345", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_315 [label="Entry lambda expression", span="343-343", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_311 [label="Assert.Equal(''my-key'', record.Key)", span="347-347", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_312 [label="Assert.Equal(''my-value'', record.Value)", span="348-348", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_313 [label="Assert.Equal(3.2, record.Score, 3)", span="349-349", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_314 [label="Exit lambda expression", span="341-350", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_316 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="343-343", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_317 [label="Exit lambda expression", span="343-343", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_322 [label="Entry lambda expression", span="356-367", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_323 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="358-362", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_324 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="364-364", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_327 [label="Entry lambda expression", span="358-362", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_325 [label="Assert.Equal(3.2, record.Score, 3)", span="366-366", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_326 [label="Exit lambda expression", span="356-367", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_328 [label="x.AddToSet(''my-key'', ''my-value'')", span="360-360", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_329 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="361-361", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_330 [label="Exit lambda expression", span="358-362", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_334 [label="Entry lambda expression", span="373-384", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_335 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="375-379", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_336 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="381-381", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_339 [label="Entry lambda expression", span="375-379", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_337 [label="Assert.Equal(0, recordCount)", span="383-383", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_338 [label="Exit lambda expression", span="373-384", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_340 [label="x.AddToSet(''my-key'', ''my-value'')", span="377-377", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_341 [label="x.RemoveFromSet(''my-key'', ''my-value'')", span="378-378", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_342 [label="Exit lambda expression", span="375-379", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_347 [label="Entry lambda expression", span="390-401", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_348 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="392-396", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_349 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="398-398", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_352 [label="Entry lambda expression", span="392-396", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_350 [label="Assert.Equal(1, recordCount)", span="400-400", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_351 [label="Exit lambda expression", span="390-401", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_353 [label="x.AddToSet(''my-key'', ''my-value'')", span="394-394", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_354 [label="x.RemoveFromSet(''my-key'', ''different-value'')", span="395-395", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_355 [label="Exit lambda expression", span="392-396", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_359 [label="Entry lambda expression", span="407-418", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_360 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="409-413", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_361 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="415-415", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_364 [label="Entry lambda expression", span="409-413", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_362 [label="Assert.Equal(1, recordCount)", span="417-417", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_363 [label="Exit lambda expression", span="407-418", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_365 [label="x.AddToSet(''my-key'', ''my-value'')", span="411-411", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_366 [label="x.RemoveFromSet(''different-key'', ''my-value'')", span="412-412", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_367 [label="Exit lambda expression", span="409-413", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_371 [label="Entry lambda expression", span="424-432", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_372 [label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="426-426", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_373 [label="var record = sql.Query(''select * from HangFire.List'').Single()", span="428-428", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_377 [label="Entry lambda expression", span="426-426", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_374 [label="Assert.Equal(''my-key'', record.Key)", span="430-430", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_375 [label="Assert.Equal(''my-value'', record.Value)", span="431-431", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_376 [label="Exit lambda expression", span="424-432", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_378 [label="x.InsertToList(''my-key'', ''my-value'')", span="426-426", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_379 [label="Exit lambda expression", span="426-426", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_384 [label="Entry lambda expression", span="438-449", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_385 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="440-444", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_386 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="446-446", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_389 [label="Entry lambda expression", span="440-444", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_387 [label="Assert.Equal(2, recordCount)", span="448-448", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_388 [label="Exit lambda expression", span="438-449", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_390 [label="x.InsertToList(''my-key'', ''my-value'')", span="442-442", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_391 [label="x.InsertToList(''my-key'', ''my-value'')", span="443-443", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_392 [label="Exit lambda expression", span="440-444", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_396 [label="Entry lambda expression", span="455-467", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_397 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="457-462", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_398 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="464-464", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_401 [label="Entry lambda expression", span="457-462", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_399 [label="Assert.Equal(0, recordCount)", span="466-466", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_400 [label="Exit lambda expression", span="455-467", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_402 [label="x.InsertToList(''my-key'', ''my-value'')", span="459-459", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_403 [label="x.InsertToList(''my-key'', ''my-value'')", span="460-460", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_404 [label="x.RemoveFromList(''my-key'', ''my-value'')", span="461-461", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_405 [label="Exit lambda expression", span="457-462", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_410 [label="Entry lambda expression", span="473-484", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_411 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="475-479", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_412 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="481-481", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_415 [label="Entry lambda expression", span="475-479", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_413 [label="Assert.Equal(1, recordCount)", span="483-483", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_414 [label="Exit lambda expression", span="473-484", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_416 [label="x.InsertToList(''my-key'', ''my-value'')", span="477-477", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_417 [label="x.RemoveFromList(''my-key'', ''different-value'')", span="478-478", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_418 [label="Exit lambda expression", span="475-479", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_422 [label="Entry lambda expression", span="490-501", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_423 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="492-496", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_424 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="498-498", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_427 [label="Entry lambda expression", span="492-496", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_425 [label="Assert.Equal(1, recordCount)", span="500-500", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_426 [label="Exit lambda expression", span="490-501", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_428 [label="x.InsertToList(''my-key'', ''my-value'')", span="494-494", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_429 [label="x.RemoveFromList(''different-key'', ''my-value'')", span="495-495", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_430 [label="Exit lambda expression", span="492-496", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_434 [label="Entry lambda expression", span="507-523", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_435 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="509-516", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_436 [label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="518-518", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_442 [label="Entry lambda expression", span="509-516", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_437 [label="Assert.Equal(2, records.Length)", span="520-520", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_438 [label="Assert.Equal(''1'', records[0].Value)", span="521-521", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_439 [label="Assert.Equal(''2'', records[1].Value)", span="522-522", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_440 [label="Exit lambda expression", span="507-523", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_443 [label="x.InsertToList(''my-key'', ''0'')", span="511-511", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_444 [label="x.InsertToList(''my-key'', ''1'')", span="512-512", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_445 [label="x.InsertToList(''my-key'', ''2'')", span="513-513", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_446 [label="x.InsertToList(''my-key'', ''3'')", span="514-514", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_447 [label="x.TrimList(''my-key'', 1, 2)", span="515-515", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_448 [label="Exit lambda expression", span="509-516", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_453 [label="Entry lambda expression", span="529-542", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_454 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="531-537", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_455 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="539-539", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_458 [label="Entry lambda expression", span="531-537", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_456 [label="Assert.Equal(2, recordCount)", span="541-541", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_457 [label="Exit lambda expression", span="529-542", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_459 [label="x.InsertToList(''my-key'', ''0'')", span="533-533", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_460 [label="x.InsertToList(''my-key'', ''1'')", span="534-534", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_461 [label="x.InsertToList(''my-key'', ''2'')", span="535-535", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_462 [label="x.TrimList(''my-key'', 1, 100)", span="536-536", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_463 [label="Exit lambda expression", span="531-537", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_467 [label="Entry lambda expression", span="548-559", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_468 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="550-554", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_469 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="556-556", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_472 [label="Entry lambda expression", span="550-554", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_470 [label="Assert.Equal(0, recordCount)", span="558-558", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_471 [label="Exit lambda expression", span="548-559", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_473 [label="x.InsertToList(''my-key'', ''0'')", span="552-552", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_474 [label="x.TrimList(''my-key'', 1, 100)", span="553-553", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_475 [label="Exit lambda expression", span="550-554", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_479 [label="Entry lambda expression", span="565-576", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_480 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="567-571", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_481 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="573-573", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_484 [label="Entry lambda expression", span="567-571", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_482 [label="Assert.Equal(0, recordCount)", span="575-575", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_483 [label="Exit lambda expression", span="565-576", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_485 [label="x.InsertToList(''my-key'', ''0'')", span="569-569", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_486 [label="x.TrimList(''my-key'', 1, 0)", span="570-570", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_487 [label="Exit lambda expression", span="567-571", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_491 [label="Entry lambda expression", span="582-593", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_492 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="584-588", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_493 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="590-590", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_496 [label="Entry lambda expression", span="584-588", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_494 [label="Assert.Equal(1, recordCount)", span="592-592", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_495 [label="Exit lambda expression", span="582-593", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_497 [label="x.InsertToList(''my-key'', ''0'')", span="586-586", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_498 [label="x.TrimList(''another-key'', 1, 0)", span="587-587", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_499 [label="Exit lambda expression", span="584-588", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_172 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="119-119", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SchedulePollerFacts.cs"];
m15_177 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="178-178", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SchedulePollerFacts.cs"];
m15_178 [label="return connection\r\n                .Query(''select * from HangFire.Job where id = @id'', new { id = jobId })\r\n                .Single();", span="180-182", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SchedulePollerFacts.cs"];
m15_179 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="178-178", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SchedulePollerFacts.cs"];
m15_8 [label="storage = storage ?? services.GetRequiredService<JobStorage>()", span="45-45", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireDashboard(IApplicationBuilder, string, Hangfire.DashboardOptions, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_103 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="SchedulePollerFacts.cs"];
m15_51 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SchedulePollerFacts.cs"];
m15_393 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="453-453", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SchedulePollerFacts.cs"];
m15_394 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="455-467", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SchedulePollerFacts.cs"];
m15_395 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="453-453", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SchedulePollerFacts.cs"];
m15_36 [label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="32-32", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="SchedulePollerFacts.cs"];
m15_318 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="160-160", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SchedulePollerFacts.cs"];
m15_211 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="134-134", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SchedulePollerFacts.cs"];
m15_118 [label="Entry Unk.SetJobState", span="", cluster="Unk.SetJobState", file="SchedulePollerFacts.cs"];
m15_464 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="546-546", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SchedulePollerFacts.cs"];
m15_465 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="548-559", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SchedulePollerFacts.cs"];
m15_466 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="546-546", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SchedulePollerFacts.cs"];
m15_59 [label="Entry Unk.ExpireJob", span="", cluster="Unk.ExpireJob", file="SchedulePollerFacts.cs"];
m15_476 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="563-563", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SchedulePollerFacts.cs"];
m15_477 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="565-576", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SchedulePollerFacts.cs"];
m15_478 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="563-563", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SchedulePollerFacts.cs"];
m15_14 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="SchedulePollerFacts.cs"];
m15_504 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="SchedulePollerFacts.cs"];
m15_164 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="SchedulePollerFacts.cs"];
m15_73 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="SchedulePollerFacts.cs"];
m15_6 [label="var services = app.ApplicationServices", span="42-42", cluster="Hangfire.HangfireApplicationBuilderExtensions.UseHangfireDashboard(IApplicationBuilder, string, Hangfire.DashboardOptions, Hangfire.JobStorage)", file="SchedulePollerFacts.cs"];
m15_0 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="16-16", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SchedulePollerFacts.cs"];
m15_1 [label="var defaultProvider = new Mock<IPersistentJobQueueProvider>()", span="18-18", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SchedulePollerFacts.cs"];
m15_2 [label="defaultProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                .Returns(new Mock<IPersistentJobQueue>().Object)", span="19-20", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SchedulePollerFacts.cs", color=red, community=0];
m15_3 [label="_queueProviders = new PersistentJobQueueProviderCollection(defaultProvider.Object)", span="22-22", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SchedulePollerFacts.cs"];
m15_4 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="16-16", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SchedulePollerFacts.cs"];
m15_9 [label="Entry PersistentJobQueueProviderCollection.cstr", span="", cluster="PersistentJobQueueProviderCollection.cstr", file="SchedulePollerFacts.cs"];
m15_54 [label="Hangfire.DashboardOptions", span="", cluster="Unk.Null", file="SchedulePollerFacts.cs"];
m15_281 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="305-305", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SchedulePollerFacts.cs"];
m15_282 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="307-318", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SchedulePollerFacts.cs"];
m15_283 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="305-305", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SchedulePollerFacts.cs"];
m15_207 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="SchedulePollerFacts.cs"];
m15_488 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="580-580", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SchedulePollerFacts.cs"];
m15_489 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="582-593", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SchedulePollerFacts.cs"];
m15_490 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="580-580", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SchedulePollerFacts.cs"];
m15_193 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="127-127", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SchedulePollerFacts.cs"];
m15_165 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SchedulePollerFacts.cs"];
m15_380 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="181-181", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SchedulePollerFacts.cs"];
m15_78 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="90-90", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SchedulePollerFacts.cs"];
m15_79 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="92-95", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SchedulePollerFacts.cs"];
m15_80 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="97-124", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", color=red, community=0, file="SchedulePollerFacts.cs"];
m15_81 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="90-90", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SchedulePollerFacts.cs"];
m15_23 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SchedulePollerFacts.cs"];
m15_27 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="35-35", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SchedulePollerFacts.cs"];
m15_25 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null))", span="37-38", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SchedulePollerFacts.cs"];
m15_26 [label="Assert.Equal(''queueProviders'', exception.ParamName)", span="40-40", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SchedulePollerFacts.cs"];
m15_24 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="35-35", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SchedulePollerFacts.cs"];
m15_13 [label="Entry Unk.>", span="", cluster="Unk.>", file="SchedulePollerFacts.cs"];
m15_194 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="201-201", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SchedulePollerFacts.cs"];
m15_195 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="203-217", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SchedulePollerFacts.cs"];
m15_196 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="201-201", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SchedulePollerFacts.cs"];
m15_500 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="596-596", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SchedulePollerFacts.cs"];
m15_501 [label="var connection = ConnectionUtils.CreateConnection()", span="598-598", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SchedulePollerFacts.cs"];
m15_502 [label="action(connection)", span="600-600", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SchedulePollerFacts.cs"];
m15_503 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="596-596", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SchedulePollerFacts.cs"];
m15_58 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="SchedulePollerFacts.cs"];
m15_176 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="SchedulePollerFacts.cs"];
m15_254 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="148-148", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SchedulePollerFacts.cs"];
m15_237 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="141-141", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SchedulePollerFacts.cs"];
m15_53 [label="Entry Unk.True", span="", cluster="Unk.True", file="SchedulePollerFacts.cs"];
m15_104 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SchedulePollerFacts.cs"];
m15_114 [label="Entry Unk.SerializeData", span="", cluster="Unk.SerializeData", file="SchedulePollerFacts.cs"];
m15_450 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="527-527", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SchedulePollerFacts.cs"];
m15_451 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="529-542", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SchedulePollerFacts.cs"];
m15_452 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="527-527", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SchedulePollerFacts.cs"];
m15_238 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="253-253", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SchedulePollerFacts.cs"];
m15_239 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="255-269", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SchedulePollerFacts.cs"];
m15_240 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="253-253", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SchedulePollerFacts.cs"];
m15_180 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="186-186", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SchedulePollerFacts.cs"];
m15_181 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="188-197", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SchedulePollerFacts.cs"];
m15_182 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="186-186", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SchedulePollerFacts.cs"];
m15_77 [label="Entry Unk.PersistJob", span="", cluster="Unk.PersistJob", file="SchedulePollerFacts.cs"];
m15_381 [label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="436-436", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SchedulePollerFacts.cs"];
m15_382 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="438-449", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SchedulePollerFacts.cs"];
m15_383 [label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="436-436", cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SchedulePollerFacts.cs"];
m15_510 [label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span="", file="SchedulePollerFacts.cs"];
m15_511 [label=arrangeSql, span="", file="SchedulePollerFacts.cs"];
m15_512 [label=jobId, span="", file="SchedulePollerFacts.cs"];
m15_513 [label=arrangeSql, span="", file="SchedulePollerFacts.cs"];
m15_514 [label=jobId, span="", file="SchedulePollerFacts.cs"];
m15_515 [label=arrangeSql, span="", file="SchedulePollerFacts.cs"];
m15_516 [label=jobId, span="", file="SchedulePollerFacts.cs"];
m15_517 [label=state, span="", file="SchedulePollerFacts.cs"];
m15_518 [label=arrangeSql, span="", file="SchedulePollerFacts.cs"];
m15_519 [label=jobId, span="", file="SchedulePollerFacts.cs"];
m15_520 [label=state, span="", file="SchedulePollerFacts.cs"];
m17_49 [label="Exit Hangfire.Core.Tests.CronFacts.Weekly_WithDayWithoutHourMinute_ReturnsFormattedStringWithDay()", span="68-68", cluster="Hangfire.Core.Tests.CronFacts.Weekly_WithDayWithoutHourMinute_ReturnsFormattedStringWithDay()", file="ServerHeartbeatFacts.cs"];
m17_50 [label="Entry Hangfire.Cron.Weekly(System.DayOfWeek)", span="93-93", cluster="Hangfire.Cron.Weekly(System.DayOfWeek)", file="ServerHeartbeatFacts.cs"];
m17_51 [label="Entry Hangfire.Core.Tests.CronFacts.Weekly_WithDayHourWithoutMinute_ReturnsFormattedStringWithDayHour()", span="77-77", cluster="Hangfire.Core.Tests.CronFacts.Weekly_WithDayHourWithoutMinute_ReturnsFormattedStringWithDayHour()", file="ServerHeartbeatFacts.cs"];
m17_52 [label="DayOfWeek day = DayOfWeek.Thursday", span="79-79", cluster="Hangfire.Core.Tests.CronFacts.Weekly_WithDayHourWithoutMinute_ReturnsFormattedStringWithDayHour()", file="ServerHeartbeatFacts.cs"];
m17_53 [label="int hour = 5", span="80-80", cluster="Hangfire.Core.Tests.CronFacts.Weekly_WithDayHourWithoutMinute_ReturnsFormattedStringWithDayHour()", file="ServerHeartbeatFacts.cs"];
m17_54 [label="string expected = ''0 '' + hour.ToString() + '' * * '' + ((int)day).ToString()", span="81-81", cluster="Hangfire.Core.Tests.CronFacts.Weekly_WithDayHourWithoutMinute_ReturnsFormattedStringWithDayHour()", file="ServerHeartbeatFacts.cs"];
m17_12 [label="Entry Hangfire.Cron.Hourly()", span="37-37", cluster="Hangfire.Cron.Hourly()", file="ServerHeartbeatFacts.cs"];
m17_59 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is EnqueuedState &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ScheduledState.StateName })))", span="59-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_60 [label="Exit lambda expression", span="59-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_61 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState", file="ServerHeartbeatFacts.cs"];
m17_63 [label="ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is EnqueuedState &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ScheduledState.StateName })", span="60-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_64 [label="Exit lambda expression", span="59-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_62 [label="Entry lambda expression", span="59-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_65 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="ServerHeartbeatFacts.cs"];
m17_66 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_89 [label="_transaction.Verify(x => x.RemoveFromSet(''schedule'', JobId))", span="92-92", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="ServerHeartbeatFacts.cs"];
m17_90 [label="_transaction.Verify(x => x.Commit())", span="93-93", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="ServerHeartbeatFacts.cs"];
m17_91 [label="Exit Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", span="82-82", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="ServerHeartbeatFacts.cs"];
m17_93 [label="x.ChangeState(It.IsAny<StateChangeContext>())", span="85-85", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_94 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_92 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_95 [label="Entry lambda expression", span="92-92", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_96 [label="x.RemoveFromSet(''schedule'', JobId)", span="92-92", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_118 [label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts", span="", cluster="Hangfire.Cron.Yearly(int, int)", file="ServerHeartbeatFacts.cs"];
m17_128 [label="Entry Hangfire.Core.Tests.CronFacts.Yearly_WithMonthDayHourMinute_ReturnsFormattedStringWithMonthDayHourMinute()", span="174-174", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithMonthDayHourMinute_ReturnsFormattedStringWithMonthDayHourMinute()", file="ServerHeartbeatFacts.cs"];
m17_129 [label="int month = 4", span="176-176", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithMonthDayHourMinute_ReturnsFormattedStringWithMonthDayHourMinute()", file="ServerHeartbeatFacts.cs"];
m17_130 [label="int day = 17", span="177-177", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithMonthDayHourMinute_ReturnsFormattedStringWithMonthDayHourMinute()", file="ServerHeartbeatFacts.cs"];
m17_133 [label="string expected = minute.ToString() + '' '' + hour.ToString() + '' '' + day.ToString() + '' '' + month.ToString() + '' *''", span="180-180", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithMonthDayHourMinute_ReturnsFormattedStringWithMonthDayHourMinute()", file="ServerHeartbeatFacts.cs"];
m17_134 [label="string actual = Cron.Yearly(month, day, hour, minute)", span="181-181", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithMonthDayHourMinute_ReturnsFormattedStringWithMonthDayHourMinute()", file="ServerHeartbeatFacts.cs"];
m17_131 [label="int hour = 3", span="178-178", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithMonthDayHourMinute_ReturnsFormattedStringWithMonthDayHourMinute()", file="ServerHeartbeatFacts.cs"];
m17_132 [label="int minute = 45", span="179-179", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithMonthDayHourMinute_ReturnsFormattedStringWithMonthDayHourMinute()", file="ServerHeartbeatFacts.cs"];
m17_135 [label="Assert.Equal(expected, actual)", span="182-182", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithMonthDayHourMinute_ReturnsFormattedStringWithMonthDayHourMinute()", file="ServerHeartbeatFacts.cs"];
m17_136 [label="Exit Hangfire.Core.Tests.CronFacts.Yearly_WithMonthDayHourMinute_ReturnsFormattedStringWithMonthDayHourMinute()", span="174-174", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithMonthDayHourMinute_ReturnsFormattedStringWithMonthDayHourMinute()", file="ServerHeartbeatFacts.cs"];
m17_24 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_18 [label="Entry Hangfire.Cron.Hourly(int)", span="46-46", cluster="Hangfire.Cron.Hourly(int)", file="ServerHeartbeatFacts.cs"];
m17_110 [label="x.AcquireDistributedLock(It.IsAny<string>(), It.IsAny<TimeSpan>())", span="103-103", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_55 [label="string actual = Cron.Weekly(day, hour)", span="82-82", cluster="Hangfire.Core.Tests.CronFacts.Weekly_WithDayHourWithoutMinute_ReturnsFormattedStringWithDayHour()", file="ServerHeartbeatFacts.cs"];
m17_115 [label="string actual = Cron.Yearly(month, day)", span="158-158", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutHourMinuteWithMonthDay_ReturnsFormattedStringWithMonthDay()", file="ServerHeartbeatFacts.cs"];
m17_116 [label="Assert.Equal(expected, actual)", span="159-159", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutHourMinuteWithMonthDay_ReturnsFormattedStringWithMonthDay()", file="ServerHeartbeatFacts.cs"];
m17_44 [label="Entry Hangfire.Core.Tests.CronFacts.Weekly_WithDayWithoutHourMinute_ReturnsFormattedStringWithDay()", span="68-68", cluster="Hangfire.Core.Tests.CronFacts.Weekly_WithDayWithoutHourMinute_ReturnsFormattedStringWithDay()", file="ServerHeartbeatFacts.cs"];
m17_6 [label="_transaction = new Mock<IWriteOnlyTransaction>()", span="31-31", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="ServerHeartbeatFacts.cs"];
m17_25 [label="x.CreateWriteTransaction()", span="32-32", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_26 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_27 [label="Entry Unk.CreateWriteTransaction", span="", cluster="Unk.CreateWriteTransaction", file="ServerHeartbeatFacts.cs"];
m17_28 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_29 [label="x.AcquireDistributedLock(''locks:schedulepoller'', It.IsAny<TimeSpan>())", span="36-36", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_127 [label="Entry Hangfire.Cron.Yearly(int, int, int)", span="199-199", cluster="Hangfire.Cron.Yearly(int, int, int)", file="ServerHeartbeatFacts.cs"];
m17_36 [label="Entry Unk.GetFirstByLowestScoreFromSet", span="", cluster="Unk.GetFirstByLowestScoreFromSet", file="ServerHeartbeatFacts.cs"];
m17_45 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_46 [label="new DelayedJobScheduler(Timeout.InfiniteTimeSpan, null)", span="47-47", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_47 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_48 [label="Entry Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="104-104", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="ServerHeartbeatFacts.cs"];
m17_13 [label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0", cluster="System.Threading.CancellationTokenSource.Cancel()", file="ServerHeartbeatFacts.cs"];
m17_14 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="ServerHeartbeatFacts.cs"];
m17_15 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="ServerHeartbeatFacts.cs"];
m17_16 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="ServerHeartbeatFacts.cs"];
m17_17 [label="Entry Mock<IBackgroundJobStateChanger>.cstr", span="", cluster="Mock<IBackgroundJobStateChanger>.cstr", file="ServerHeartbeatFacts.cs"];
m17_40 [label="Assert.Equal(expected, actual)", span="64-64", cluster="Hangfire.Core.Tests.CronFacts.Weekly_WithoutDayHourMinute_ReturnsFormattedStringWithDefaults()", file="ServerHeartbeatFacts.cs"];
m17_41 [label="Exit Hangfire.Core.Tests.CronFacts.Weekly_WithoutDayHourMinute_ReturnsFormattedStringWithDefaults()", span="60-60", cluster="Hangfire.Core.Tests.CronFacts.Weekly_WithoutDayHourMinute_ReturnsFormattedStringWithDefaults()", file="ServerHeartbeatFacts.cs"];
m17_42 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()", file="ServerHeartbeatFacts.cs"];
m17_43 [label="Entry Hangfire.Cron.Weekly()", span="83-83", cluster="Hangfire.Cron.Weekly()", file="ServerHeartbeatFacts.cs"];
m17_85 [label="string actual = Cron.Monthly(day, hour)", span="120-120", cluster="Hangfire.Core.Tests.CronFacts.Monthly_WithoutMinuteWithDayHour_ReturnsFormattedStringWithDayHour()", file="ServerHeartbeatFacts.cs"];
m17_86 [label="Assert.Equal(expected, actual)", span="121-121", cluster="Hangfire.Core.Tests.CronFacts.Monthly_WithoutMinuteWithDayHour_ReturnsFormattedStringWithDayHour()", file="ServerHeartbeatFacts.cs"];
m17_87 [label="Exit Hangfire.Core.Tests.CronFacts.Monthly_WithoutMinuteWithDayHour_ReturnsFormattedStringWithDayHour()", span="115-115", cluster="Hangfire.Core.Tests.CronFacts.Monthly_WithoutMinuteWithDayHour_ReturnsFormattedStringWithDayHour()", file="ServerHeartbeatFacts.cs"];
m17_88 [label="Entry Hangfire.Cron.Monthly(int, int)", span="146-146", cluster="Hangfire.Cron.Monthly(int, int)", file="ServerHeartbeatFacts.cs"];
m17_80 [label="time > 0", span="71-71", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_74 [label="_stateChanger.Verify(\r\n                x => x.ChangeState(It.IsAny<StateChangeContext>()),\r\n                Times.Never)", span="76-78", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", file="ServerHeartbeatFacts.cs"];
m17_75 [label="Exit Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", span="68-68", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", file="ServerHeartbeatFacts.cs"];
m17_76 [label="Entry lambda expression", span="70-71", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_77 [label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="70-71", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_78 [label="Exit lambda expression", span="70-71", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_79 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_0 [label="Entry Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", span="22-22", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="ServerHeartbeatFacts.cs"];
m17_1 [label="_context = new BackgroundProcessContextMock()", span="24-24", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="ServerHeartbeatFacts.cs", color=green, community=0];
m17_2 [label="_context.CancellationTokenSource.Cancel()", span="25-25", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="ServerHeartbeatFacts.cs"];
m17_3 [label="_connection = new Mock<IStorageConnection>()", span="27-27", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="ServerHeartbeatFacts.cs"];
m17_4 [label="_context.Storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="28-28", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="ServerHeartbeatFacts.cs"];
m17_104 [label="var scheduler = CreateScheduler()", span="99-99", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", file="ServerHeartbeatFacts.cs"];
m17_105 [label="scheduler.Execute(_context.Object)", span="101-101", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", file="ServerHeartbeatFacts.cs"];
m17_106 [label="_connection.Verify(x => x.AcquireDistributedLock(It.IsAny<string>(), It.IsAny<TimeSpan>()))", span="103-103", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", file="ServerHeartbeatFacts.cs"];
m17_107 [label="_distributedLock.Verify(x => x.Dispose())", span="104-104", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", file="ServerHeartbeatFacts.cs"];
m17_108 [label="Exit Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", span="97-97", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", file="ServerHeartbeatFacts.cs"];
m17_109 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_19 [label="Entry Hangfire.Core.Tests.CronFacts.Daily_WithoutMinuteOrHour_ReturnsFormattedStringWithDefaults()", span="36-36", cluster="Hangfire.Core.Tests.CronFacts.Daily_WithoutMinuteOrHour_ReturnsFormattedStringWithDefaults()", file="ServerHeartbeatFacts.cs"];
m17_23 [label="Exit Hangfire.Core.Tests.CronFacts.Daily_WithoutMinuteOrHour_ReturnsFormattedStringWithDefaults()", span="36-36", cluster="Hangfire.Core.Tests.CronFacts.Daily_WithoutMinuteOrHour_ReturnsFormattedStringWithDefaults()", file="ServerHeartbeatFacts.cs"];
m17_7 [label="_connection.Setup(x => x.CreateWriteTransaction()).Returns(_transaction.Object)", span="32-32", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="ServerHeartbeatFacts.cs"];
m17_8 [label="_distributedLock = new Mock<IDisposable>()", span="34-34", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="ServerHeartbeatFacts.cs"];
m17_9 [label="_connection\r\n                .Setup(x => x.AcquireDistributedLock(''locks:schedulepoller'', It.IsAny<TimeSpan>()))\r\n                .Returns(_distributedLock.Object)", span="35-37", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", color=red, community=0, file="ServerHeartbeatFacts.cs"];
m17_10 [label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns(JobId)", span="39-40", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="ServerHeartbeatFacts.cs"];
m17_11 [label="Exit Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", span="22-22", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="ServerHeartbeatFacts.cs"];
m17_119 [label="Entry Hangfire.Core.Tests.CronFacts.Yearly_WithoutMinuteWithMonthDayHour_ReturnsFormattedStringWithMonthDayHour()", span="163-163", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutMinuteWithMonthDayHour_ReturnsFormattedStringWithMonthDayHour()", file="ServerHeartbeatFacts.cs"];
m17_120 [label="int month = 3", span="165-165", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutMinuteWithMonthDayHour_ReturnsFormattedStringWithMonthDayHour()", file="ServerHeartbeatFacts.cs"];
m17_121 [label="int day = 18", span="166-166", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutMinuteWithMonthDayHour_ReturnsFormattedStringWithMonthDayHour()", file="ServerHeartbeatFacts.cs"];
m17_123 [label="string expected = ''0 '' + hour.ToString() + '' '' + day.ToString() + '' '' + month.ToString() + '' *''", span="168-168", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutMinuteWithMonthDayHour_ReturnsFormattedStringWithMonthDayHour()", file="ServerHeartbeatFacts.cs"];
m17_124 [label="string actual = Cron.Yearly(month, day, hour)", span="169-169", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutMinuteWithMonthDayHour_ReturnsFormattedStringWithMonthDayHour()", file="ServerHeartbeatFacts.cs"];
m17_122 [label="int hour = 14", span="167-167", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutMinuteWithMonthDayHour_ReturnsFormattedStringWithMonthDayHour()", file="ServerHeartbeatFacts.cs"];
m17_125 [label="Assert.Equal(expected, actual)", span="170-170", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutMinuteWithMonthDayHour_ReturnsFormattedStringWithMonthDayHour()", file="ServerHeartbeatFacts.cs"];
m17_126 [label="Exit Hangfire.Core.Tests.CronFacts.Yearly_WithoutMinuteWithMonthDayHour_ReturnsFormattedStringWithMonthDayHour()", span="163-163", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutMinuteWithMonthDayHour_ReturnsFormattedStringWithMonthDayHour()", file="ServerHeartbeatFacts.cs"];
m17_56 [label="Entry Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="113-113", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="ServerHeartbeatFacts.cs"];
m17_57 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="ServerHeartbeatFacts.cs"];
m17_98 [label="Entry Unk.RemoveFromSet", span="", cluster="Unk.RemoveFromSet", file="ServerHeartbeatFacts.cs"];
m17_99 [label="Entry lambda expression", span="93-93", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_100 [label="x.Commit()", span="93-93", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_101 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_102 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="ServerHeartbeatFacts.cs"];
m17_20 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_21 [label="x.GetConnection()", span="28-28", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_22 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_58 [label="Entry lambda expression", span="59-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_117 [label="Exit Hangfire.Core.Tests.CronFacts.Yearly_WithoutHourMinuteWithMonthDay_ReturnsFormattedStringWithMonthDay()", span="153-153", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutHourMinuteWithMonthDay_ReturnsFormattedStringWithMonthDay()", file="ServerHeartbeatFacts.cs"];
m17_69 [label="string expected = ''0 0 1 * *''", span="100-100", cluster="Hangfire.Core.Tests.CronFacts.Monthly_WithoutDayHourMinute_ReturnsFormattedStringWithDefaults()", file="ServerHeartbeatFacts.cs"];
m17_31 [label="Entry Hangfire.Core.Tests.CronFacts.Daily_WithMinuteAndHour_ReturnsFormattedStringWithHourAndMinute()", span="52-52", cluster="Hangfire.Core.Tests.CronFacts.Daily_WithMinuteAndHour_ReturnsFormattedStringWithHourAndMinute()", file="ServerHeartbeatFacts.cs"];
m17_32 [label="Entry Unk.AcquireDistributedLock", span="", cluster="Unk.AcquireDistributedLock", file="ServerHeartbeatFacts.cs"];
m17_33 [label="Entry lambda expression", span="39-40", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_34 [label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="39-40", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_35 [label="Exit lambda expression", span="39-40", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_68 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_70 [label="Entry Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", span="68-68", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", file="ServerHeartbeatFacts.cs"];
m17_71 [label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns((string)null)", span="70-71", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", file="ServerHeartbeatFacts.cs"];
m17_72 [label="var scheduler = CreateScheduler()", span="72-72", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", file="ServerHeartbeatFacts.cs"];
m17_30 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_5 [label="_stateChanger = new Mock<IBackgroundJobStateChanger>()", span="30-30", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="ServerHeartbeatFacts.cs"];
m17_67 [label="x.Dispose()", span="64-64", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m17_103 [label="Entry Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", span="97-97", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", file="ServerHeartbeatFacts.cs"];
m17_137 [label="Entry Hangfire.Cron.Yearly(int, int, int, int)", span="212-212", cluster="Hangfire.Cron.Yearly(int, int, int, int)", file="ServerHeartbeatFacts.cs"];
m17_82 [label="int day = 7", span="117-117", cluster="Hangfire.Core.Tests.CronFacts.Monthly_WithoutMinuteWithDayHour_ReturnsFormattedStringWithDayHour()", file="ServerHeartbeatFacts.cs"];
m17_112 [label="int month = 8", span="155-155", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutHourMinuteWithMonthDay_ReturnsFormattedStringWithMonthDay()", file="ServerHeartbeatFacts.cs"];
m17_84 [label="string expected = ''0 '' + hour.ToString() + '' '' + day.ToString() + '' * *''", span="119-119", cluster="Hangfire.Core.Tests.CronFacts.Monthly_WithoutMinuteWithDayHour_ReturnsFormattedStringWithDayHour()", file="ServerHeartbeatFacts.cs"];
m17_83 [label="int hour = 4", span="118-118", cluster="Hangfire.Core.Tests.CronFacts.Monthly_WithoutMinuteWithDayHour_ReturnsFormattedStringWithDayHour()", file="ServerHeartbeatFacts.cs"];
m17_97 [label="Entry Hangfire.Cron.Monthly(int, int, int)", span="158-158", cluster="Hangfire.Cron.Monthly(int, int, int)", file="ServerHeartbeatFacts.cs"];
m17_111 [label="Entry Hangfire.Core.Tests.CronFacts.Yearly_WithoutHourMinuteWithMonthDay_ReturnsFormattedStringWithMonthDay()", span="153-153", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutHourMinuteWithMonthDay_ReturnsFormattedStringWithMonthDay()", file="ServerHeartbeatFacts.cs"];
m17_114 [label="string expected = ''0 0 '' + day.ToString() + '' '' + month.ToString() + '' *''", span="157-157", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutHourMinuteWithMonthDay_ReturnsFormattedStringWithMonthDay()", file="ServerHeartbeatFacts.cs"];
m17_113 [label="int day = 18", span="156-156", cluster="Hangfire.Core.Tests.CronFacts.Yearly_WithoutHourMinuteWithMonthDay_ReturnsFormattedStringWithMonthDay()", file="ServerHeartbeatFacts.cs"];
m17_37 [label="Entry Hangfire.Core.Tests.CronFacts.Weekly_WithoutDayHourMinute_ReturnsFormattedStringWithDefaults()", span="60-60", cluster="Hangfire.Core.Tests.CronFacts.Weekly_WithoutDayHourMinute_ReturnsFormattedStringWithDefaults()", file="ServerHeartbeatFacts.cs"];
m17_39 [label="string actual = Cron.Weekly()", span="63-63", cluster="Hangfire.Core.Tests.CronFacts.Weekly_WithoutDayHourMinute_ReturnsFormattedStringWithDefaults()", file="ServerHeartbeatFacts.cs"];
m17_38 [label="string expected = ''0 0 * * '' + ((int)DayOfWeek.Monday).ToString()", span="62-62", cluster="Hangfire.Core.Tests.CronFacts.Weekly_WithoutDayHourMinute_ReturnsFormattedStringWithDefaults()", file="ServerHeartbeatFacts.cs"];
m17_81 [label="Entry Hangfire.Core.Tests.CronFacts.Monthly_WithoutMinuteWithDayHour_ReturnsFormattedStringWithDayHour()", span="115-115", cluster="Hangfire.Core.Tests.CronFacts.Monthly_WithoutMinuteWithDayHour_ReturnsFormattedStringWithDayHour()", file="ServerHeartbeatFacts.cs"];
m17_73 [label="Entry Hangfire.Cron.Monthly()", span="125-125", cluster="Hangfire.Cron.Monthly()", file="ServerHeartbeatFacts.cs"];
m18_18 [label="return new JobPayload(job.Id.ToString(), queueName, invocationData)\r\n            {\r\n                Arguments = job.Arguments\r\n            };", span="71-74", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs"];
m18_24 [label="Entry Unk.>", span="", cluster="Unk.>", file="ServerWatchdog.cs"];
m18_15 [label="return null;", span="64-64", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs"];
m18_26 [label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0", cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="ServerWatchdog.cs"];
m18_29 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()", file="ServerWatchdog.cs"];
m18_0 [label="Entry HangFire.SqlServer.SqlServerFetcher.SqlServerFetcher(SqlConnection, System.Collections.Generic.IEnumerable<string>)", span="19-19", cluster="HangFire.SqlServer.SqlServerFetcher.SqlServerFetcher(SqlConnection, System.Collections.Generic.IEnumerable<string>)", file="ServerWatchdog.cs"];
m18_1 [label="_connection = connection", span="21-21", cluster="HangFire.SqlServer.SqlServerFetcher.SqlServerFetcher(SqlConnection, System.Collections.Generic.IEnumerable<string>)", color=red, community=0, file="ServerWatchdog.cs"];
m18_2 [label="Entry Hangfire.Server.ServerWatchdog.ServerWatchdog(Hangfire.Server.ServerWatchdogOptions)", span="32-32", cluster="Hangfire.Server.ServerWatchdog.ServerWatchdog(Hangfire.Server.ServerWatchdogOptions)", file="ServerWatchdog.cs"];
m18_3 [label="options == null", span="34-34", cluster="Hangfire.Server.ServerWatchdog.ServerWatchdog(Hangfire.Server.ServerWatchdogOptions)", file="ServerWatchdog.cs", color=green, community=0];
m18_27 [label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="28-28", cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="ServerWatchdog.cs"];
m18_8 [label="idAndQueue != null", span="42-42", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs", color=red, community=0];
m18_10 [label="parameters.Add(''@id'', idAndQueue.JobId, dbType: DbType.Int32)", span="50-50", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs"];
m18_13 [label="job == null", span="60-60", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs"];
m18_9 [label="var parameters = new DynamicParameters()", span="49-49", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs"];
m18_11 [label="job = _connection.Query<Job>(\r\n                        @''select Id, InvocationData, Arguments from HangFire.Job where Id = @id'',\r\n                        parameters)\r\n                        .SingleOrDefault()", span="52-55", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs"];
m18_12 [label="queueName = idAndQueue.QueueName", span="57-57", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs"];
m18_14 [label="cancellationToken.WaitHandle.WaitOne(TimeSpan.FromSeconds(5))", span="62-62", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs"];
m18_25 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="ServerWatchdog.cs"];
m18_4 [label="Entry HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", span="25-25", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", color=green, community=0, file="ServerWatchdog.cs"];
m18_5 [label="Job job = null", span="27-27", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs", color=red, community=0];
m18_6 [label="string queueName = null", span="28-28", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs", color=red, community=0];
m18_20 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="ServerWatchdog.cs"];
m18_16 [label="job == null", span="67-67", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs"];
m18_28 [label="Entry HangFire.Server.JobPayload.JobPayload(string, string, HangFire.Storage.InvocationData)", span="23-23", cluster="HangFire.Server.JobPayload.JobPayload(string, string, HangFire.Storage.InvocationData)", file="ServerWatchdog.cs"];
m18_19 [label="Exit HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", span="25-25", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs"];
m18_21 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="ServerWatchdog.cs"];
m18_17 [label="var invocationData = JobHelper.FromJson<InvocationData>(job.InvocationData)", span="69-69", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerWatchdog.cs"];
m18_7 [label="var idAndQueue = _connection.Query(@''\r\nset transaction isolation level read committed\r\nupdate top (1) HangFire.JobQueue set FetchedAt = GETUTCDATE()\r\noutput INSERTED.JobId, INSERTED.Queue\r\nwhere FetchedAt is null\r\nand Queue in @queues'',\r\n                    new { queues = _queues })\r\n                    .SingleOrDefault()", span="33-40", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", color=red, community=0, file="ServerWatchdog.cs"];
m18_22 [label="Entry DynamicParameters.cstr", span="", cluster="DynamicParameters.cstr", file="ServerWatchdog.cs"];
m18_23 [label="Hangfire.Server.ServerWatchdog", span="", cluster="Unk.Add", file="ServerWatchdog.cs"];
m18_30 [label="HangFire.SqlServer.SqlServerFetcher", span="", file="ServerWatchdog.cs"];
m20_4 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="ServerWatchdogOptions.cs"];
m20_0 [label="Entry Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="22-22", cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="ServerWatchdogOptions.cs"];
m20_1 [label="ServerTimeout = TimeSpan.FromMinutes(5)", span="24-24", cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", color=red, community=0, file="ServerWatchdogOptions.cs"];
m20_2 [label="CheckInterval = TimeSpan.FromMinutes(5)", span="25-25", cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", color=green, community=0, file="ServerWatchdogOptions.cs"];
m20_3 [label="Exit Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="22-22", cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="ServerWatchdogOptions.cs"];
m20_5 [label="Hangfire.Server.ServerWatchdogOptions", span="", file="ServerWatchdogOptions.cs"];
m21_19 [label="Entry HangFire.Redis.RedisMonitoringApi.DequeuedCount(string)", span="59-59", cluster="HangFire.Redis.RedisMonitoringApi.DequeuedCount(string)", file="Worker.cs"];
m21_20 [label=_redis, span="61-61", cluster="HangFire.Redis.RedisMonitoringApi.DequeuedCount(string)", file="Worker.cs"];
m21_21 [label="return _redis.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue));", span="63-63", cluster="HangFire.Redis.RedisMonitoringApi.DequeuedCount(string)", file="Worker.cs"];
m21_22 [label="Exit HangFire.Redis.RedisMonitoringApi.DequeuedCount(string)", span="59-59", cluster="HangFire.Redis.RedisMonitoringApi.DequeuedCount(string)", file="Worker.cs"];
m21_204 [label="Entry HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", span="328-328", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="Worker.cs"];
m21_205 [label=_redis, span="331-331", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="Worker.cs"];
m21_206 [label="var jobIds = _redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}'', queue),\r\n                    from,\r\n                    from + perPage - 1)", span="333-336", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="Worker.cs"];
m21_207 [label="return GetJobsWithProperties(\r\n                    _redis,\r\n                    jobIds,\r\n                    null,\r\n                    new[] { ''EnqueuedAt'', ''State'' },\r\n                    (method, job, state) => new EnqueuedJobDto\r\n                    {\r\n                        Method = method,\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="338-348", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="Worker.cs"];
m21_208 [label="Exit HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", span="328-328", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="Worker.cs"];
m21_434 [label="Entry HangFire.Common.JobMethod.Deserialize(HangFire.Storage.InvocationData)", span="89-89", cluster="HangFire.Common.JobMethod.Deserialize(HangFire.Storage.InvocationData)", file="Worker.cs"];
m21_225 [label="Entry HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", span="426-426", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_269 [label="var keys = dates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="437-437", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_271 [label="var result = new Dictionary<DateTime, long>()", span="440-440", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_263 [label="var dates = new List<DateTime>()", span="430-430", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_265 [label="i < 24", span="431-431", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_270 [label="var valuesMap = redis.GetValuesMap(keys)", span="438-438", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_272 [label="var i = 0", span="441-441", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_277 [label="result.Add(dates[i], value)", span="449-449", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_279 [label="return result;", span="452-452", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_262 [label="var endDate = DateTime.UtcNow", span="429-429", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_264 [label="var i = 0", span="431-431", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_266 [label="dates.Add(endDate)", span="433-433", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_273 [label="i < dates.Count", span="441-441", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_268 [label="i++", span="431-431", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_275 [label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="444-444", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_278 [label="i++", span="441-441", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_276 [label="value = 0", span="446-446", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_267 [label="endDate = endDate.AddHours(-1)", span="434-434", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_274 [label="long value", span="443-443", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_280 [label="Exit HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", span="426-426", cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_220 [label="Entry HangFire.Storage.Monitoring.DequeuedJobDto.DequeuedJobDto()", span="5-5", cluster="HangFire.Storage.Monitoring.DequeuedJobDto.DequeuedJobDto()", file="Worker.cs"];
m21_101 [label="Entry HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", span="455-455", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_298 [label="var keys = stringDates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x)).ToList()", span="469-469", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_297 [label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="468-468", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_300 [label="var result = new Dictionary<DateTime, long>()", span="473-473", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_299 [label="var valuesMap = redis.GetValuesMap(keys)", span="471-471", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_294 [label="startDate <= endDate", span="462-462", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_293 [label="var dates = new List<DateTime>()", span="460-460", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_302 [label="i < stringDates.Count", span="474-474", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_301 [label="var i = 0", span="474-474", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_306 [label="result.Add(dates[i], value)", span="481-481", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_308 [label="return result;", span="484-484", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_291 [label="var endDate = DateTime.UtcNow.Date", span="458-458", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_304 [label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="477-477", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_292 [label="var startDate = endDate.AddDays(-7)", span="459-459", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_296 [label="endDate = endDate.AddDays(-1)", span="465-465", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_295 [label="dates.Add(endDate)", span="464-464", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_307 [label="i++", span="474-474", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_303 [label="long value", span="476-476", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_305 [label="value = 0", span="479-479", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_309 [label="Exit HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", span="455-455", cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="Worker.cs"];
m21_140 [label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="51-51", cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="Worker.cs"];
m21_284 [label="Entry Unk.TryParse", span="", cluster="Unk.TryParse", file="Worker.cs"];
m21_44 [label="Entry HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="7-7", cluster="HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="Worker.cs"];
m21_93 [label="Entry KeyValuePair<string, ScheduleDto>.cstr", span="", cluster="KeyValuePair<string, ScheduleDto>.cstr", file="Worker.cs"];
m21_39 [label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="Worker.cs"];
m21_45 [label="Entry HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="56-56", cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="Worker.cs"];
m21_139 [label="Entry int.Parse(string)", span="0-0", cluster="int.Parse(string)", file="Worker.cs"];
m21_226 [label="Entry HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", span="385-385", cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="Worker.cs"];
m21_227 [label=_redis, span="387-387", cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="Worker.cs"];
m21_228 [label="return GetHourlyTimelineStats(_redis, ''failed'');", span="389-389", cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="Worker.cs"];
m21_229 [label="Exit HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", span="385-385", cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="Worker.cs"];
m21_366 [label="Entry HangFire.Redis.RedisMonitoringApi.GetStatistics()", span="551-551", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_367 [label=_redis, span="553-553", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_369 [label="var queues = _redis.GetAllItemsFromSet(''hangfire:queues'')", span="557-557", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_370 [label="var pipeline = _redis.CreatePipeline()", span="559-559", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_380 [label="pipeline.Flush()", span="593-593", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_368 [label="var stats = new StatisticsDto()", span="555-555", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_377 [label=queues, span="585-585", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_371 [label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:servers''),\r\n                        x => stats.Servers = x)", span="561-563", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_372 [label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:queues''),\r\n                        x => stats.Queues = x)", span="565-567", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_373 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:schedule''),\r\n                        x => stats.Scheduled = x)", span="569-571", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_374 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:processing''),\r\n                        x => stats.Processing = x)", span="573-575", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_375 [label="pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:succeeded''),\r\n                        x => stats.Succeeded = long.Parse(x ?? ''0''))", span="577-579", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_376 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:failed''),\r\n                        x => stats.Failed = x)", span="581-583", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_379 [label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName)),\r\n                            x => stats.Enqueued += x)", span="588-590", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_381 [label="return stats;", span="596-596", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_378 [label="var queueName = queue", span="587-587", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_382 [label="Exit HangFire.Redis.RedisMonitoringApi.GetStatistics()", span="551-551", cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="Worker.cs"];
m21_38 [label="Entry Unk.GetJobsWithProperties", span="", cluster="Unk.GetJobsWithProperties", file="Worker.cs"];
m21_40 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="Worker.cs"];
m21_356 [label="Entry KeyValuePair<string, T>.cstr", span="", cluster="KeyValuePair<string, T>.cstr", file="Worker.cs"];
m21_68 [label="Entry Unk.CreatePipeline", span="", cluster="Unk.CreatePipeline", file="Worker.cs"];
m21_86 [label="Entry Unk.GetValueFromHash", span="", cluster="Unk.GetValueFromHash", file="Worker.cs"];
m21_337 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="Worker.cs"];
m21_230 [label="Entry HangFire.Redis.RedisMonitoringApi.JobDetails(string)", span="393-393", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_237 [label="var history = historyList\r\n                    .Select(JobHelper.FromJson<Dictionary<string, string>>)\r\n                    .ToList()", span="405-407", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_231 [label=_redis, span="395-395", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_232 [label="var job = _redis.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', jobId))", span="397-397", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_236 [label="var historyList = _redis.GetAllItemsFromList(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId))", span="402-403", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_242 [label="return new JobDetailsDto\r\n                {\r\n                    Method = TryToGetMethod(job[''Type''], job[''Method''], job[''ParameterTypes'']),\r\n                    Arguments = job.ContainsKey(''Arguments'') ? JobHelper.FromJson<string[]>(job[''Arguments'']) : null,\r\n                    OldFormatArguments = job.ContainsKey(''Args'') ? JobHelper.FromJson<Dictionary<string, string>>(job[''Args'']) : null,\r\n                    State = job.ContainsKey(''State'') ? job[''State''] : null,\r\n                    CreatedAt = job.ContainsKey(''CreatedAt'') ? JobHelper.FromStringTimestamp(job[''CreatedAt'']) : (DateTime?)null,\r\n                    Properties = job.Where(x => !hiddenProperties.Contains(x.Key)).ToDictionary(x => x.Key, x => x.Value),\r\n                    History = history\r\n                };", span="413-422", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_238 [label="!job.ContainsKey(''Method'')", span="410-410", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_233 [label="job.Count == 0", span="398-398", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_239 [label="job.Add(''Method'', null)", span="410-410", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_240 [label="!job.ContainsKey(''ParameterTypes'')", span="411-411", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_241 [label="job.Add(''ParameterTypes'', null)", span="411-411", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_235 [label="var hiddenProperties = new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'', ''Args'', ''State'', ''CreatedAt'' }", span="400-400", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_234 [label="return null;", span="398-398", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_243 [label="Exit HangFire.Redis.RedisMonitoringApi.JobDetails(string)", span="393-393", cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="Worker.cs"];
m21_245 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="Worker.cs"];
m21_358 [label="Entry Unk.selector", span="", cluster="Unk.selector", file="Worker.cs"];
m21_362 [label="Entry HangFire.Redis.RedisMonitoringApi.SucceededListCount()", span="543-543", cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="Worker.cs"];
m21_363 [label=_redis, span="545-545", cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="Worker.cs"];
m21_364 [label="return _redis.GetListCount(''hangfire:succeeded'');", span="547-547", cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="Worker.cs"];
m21_365 [label="Exit HangFire.Redis.RedisMonitoringApi.SucceededListCount()", span="543-543", cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="Worker.cs"];
m21_342 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="Worker.cs"];
m21_383 [label="Entry HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="2-2", cluster="HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="Worker.cs"];
m21_65 [label="Entry Unk.GetRangeWithScoresFromSortedSet", span="", cluster="Unk.GetRangeWithScoresFromSortedSet", file="Worker.cs"];
m21_138 [label="Entry HangFire.Storage.Monitoring.ServerDto.ServerDto()", span="5-5", cluster="HangFire.Storage.Monitoring.ServerDto.ServerDto()", file="Worker.cs"];
m21_250 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="Worker.cs"];
m21_310 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="Worker.cs"];
m21_357 [label="Entry Unk.TrueForAll", span="", cluster="Unk.TrueForAll", file="Worker.cs"];
m21_96 [label="Entry HangFire.Redis.RedisMonitoringApi.TryToGetMethod(string, string, string)", span="600-600", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetMethod(string, string, string)", file="Worker.cs"];
m21_429 [label="return JobMethod.Deserialize(new InvocationData\r\n                {\r\n                    Type = type,\r\n                    Method = method,\r\n                    ParameterTypes = parameterTypes\r\n                });", span="605-610", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetMethod(string, string, string)", file="Worker.cs"];
m21_431 [label="return null;", span="614-614", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetMethod(string, string, string)", file="Worker.cs"];
m21_430 [label=Exception, span="612-612", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetMethod(string, string, string)", file="Worker.cs"];
m21_432 [label="Exit HangFire.Redis.RedisMonitoringApi.TryToGetMethod(string, string, string)", span="600-600", cluster="HangFire.Redis.RedisMonitoringApi.TryToGetMethod(string, string, string)", file="Worker.cs"];
m21_7 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="Worker.cs"];
m21_246 [label="Entry HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="6-6", cluster="HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="Worker.cs"];
m21_359 [label="Entry lambda expression", span="537-537", cluster="lambda expression", file="Worker.cs"];
m21_90 [label="Entry lambda expression", span="148-156", cluster="lambda expression", file="Worker.cs"];
m21_80 [label="jobs.Add(job.Key, x)", span="135-135", cluster="lambda expression", file="Worker.cs"];
m21_91 [label="new KeyValuePair<string, ScheduleDto>(\r\n                        job.Key,\r\n                        new ScheduleDto\r\n                        {\r\n                            ScheduledAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Method = TryToGetMethod(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2]),\r\n                            InScheduledState =\r\n                                ScheduledState.Name.Equals(states[job.Key], StringComparison.OrdinalIgnoreCase)\r\n                        })", span="148-156", cluster="lambda expression", file="Worker.cs"];
m21_88 [label="states.Add(job.Key, x)", span="141-141", cluster="lambda expression", file="Worker.cs"];
m21_92 [label="Exit lambda expression", span="148-156", cluster="lambda expression", file="Worker.cs"];
m21_74 [label="Entry lambda expression", span="132-134", cluster="lambda expression", file="Worker.cs"];
m21_79 [label="Entry lambda expression", span="135-135", cluster="lambda expression", file="Worker.cs"];
m21_81 [label="Exit lambda expression", span="135-135", cluster="lambda expression", file="Worker.cs"];
m21_83 [label="Entry lambda expression", span="138-140", cluster="lambda expression", file="Worker.cs"];
m21_87 [label="Entry lambda expression", span="141-141", cluster="lambda expression", file="Worker.cs"];
m21_89 [label="Exit lambda expression", span="141-141", cluster="lambda expression", file="Worker.cs"];
m21_135 [label="Entry lambda expression", span="212-219", cluster="lambda expression", file="Worker.cs"];
m21_286 [label="Entry lambda expression", span="437-437", cluster="lambda expression", file="Worker.cs"];
m21_314 [label="Entry lambda expression", span="469-469", cluster="lambda expression", file="Worker.cs"];
m21_311 [label="Entry lambda expression", span="468-468", cluster="lambda expression", file="Worker.cs"];
m21_350 [label="Entry lambda expression", span="525-534", cluster="lambda expression", file="Worker.cs"];
m21_353 [label="Entry lambda expression", span="535-539", cluster="lambda expression", file="Worker.cs"];
m21_41 [label="Entry lambda expression", span="97-104", cluster="lambda expression", file="Worker.cs"];
m21_47 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="Worker.cs"];
m21_147 [label="Entry lambda expression", span="237-245", cluster="lambda expression", file="Worker.cs"];
m21_157 [label="Entry lambda expression", span="263-268", cluster="lambda expression", file="Worker.cs"];
m21_200 [label="Entry lambda expression", span="308-313", cluster="lambda expression", file="Worker.cs"];
m21_209 [label="Entry lambda expression", span="343-348", cluster="lambda expression", file="Worker.cs"];
m21_217 [label="Entry lambda expression", span="366-373", cluster="lambda expression", file="Worker.cs"];
m21_252 [label="Entry lambda expression", span="420-420", cluster="lambda expression", file="Worker.cs"];
m21_256 [label="Entry lambda expression", span="420-420", cluster="lambda expression", file="Worker.cs"];
m21_259 [label="Entry lambda expression", span="420-420", cluster="lambda expression", file="Worker.cs"];
m21_75 [label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'' })", span="132-134", cluster="lambda expression", file="Worker.cs"];
m21_84 [label="x.GetValueFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                ''State'')", span="138-140", cluster="lambda expression", file="Worker.cs"];
m21_126 [label="servers.Add(name, x)", span="201-201", cluster="lambda expression", file="Worker.cs"];
m21_136 [label="new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }", span="212-219", cluster="lambda expression", file="Worker.cs"];
m21_133 [label="queues.Add(name, x)", span="206-206", cluster="lambda expression", file="Worker.cs"];
m21_76 [label="Exit lambda expression", span="132-134", cluster="lambda expression", file="Worker.cs"];
m21_340 [label="jobs.Add(id, x)", span="511-511", cluster="lambda expression", file="Worker.cs"];
m21_348 [label="states.Add(id, x)", span="517-517", cluster="lambda expression", file="Worker.cs"];
m21_351 [label="new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    Method = TryToGetMethod(\r\n                        jobs[x][properties.Length],\r\n                        jobs[x][properties.Length + 1],\r\n                        jobs[x][properties.Length + 2]),\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                }", span="525-534", cluster="lambda expression", file="Worker.cs"];
m21_42 [label="new ProcessingJobDto\r\n                    {\r\n                        ServerName = state[1],\r\n                        Method = method,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.Name.Equals(\r\n                            state[2], StringComparison.OrdinalIgnoreCase),\r\n                    }", span="97-104", cluster="lambda expression", file="Worker.cs"];
m21_148 [label="new FailedJobDto\r\n                    {\r\n                        Method = method,\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.Name.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="237-245", cluster="lambda expression", file="Worker.cs"];
m21_158 [label="new SucceededJobDto\r\n                    {\r\n                        Method = method,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InSucceededState = SucceededState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="263-268", cluster="lambda expression", file="Worker.cs"];
m21_201 [label="new EnqueuedJobDto\r\n                        {\r\n                            Method = method,\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        }", span="308-313", cluster="lambda expression", file="Worker.cs"];
m21_210 [label="new EnqueuedJobDto\r\n                    {\r\n                        Method = method,\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="343-348", cluster="lambda expression", file="Worker.cs"];
m21_85 [label="Exit lambda expression", span="138-140", cluster="lambda expression", file="Worker.cs"];
m21_137 [label="Exit lambda expression", span="212-219", cluster="lambda expression", file="Worker.cs"];
m21_287 [label="String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="437-437", cluster="lambda expression", file="Worker.cs"];
m21_288 [label="Exit lambda expression", span="437-437", cluster="lambda expression", file="Worker.cs"];
m21_315 [label="String.Format(''hangfire:stats:{0}:{1}'', type, x)", span="469-469", cluster="lambda expression", file="Worker.cs"];
m21_316 [label="Exit lambda expression", span="469-469", cluster="lambda expression", file="Worker.cs"];
m21_313 [label="Exit lambda expression", span="468-468", cluster="lambda expression", file="Worker.cs"];
m21_312 [label="x.ToString(''yyyy-MM-dd'')", span="468-468", cluster="lambda expression", file="Worker.cs"];
m21_344 [label="x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties)", span="516-516", cluster="lambda expression", file="Worker.cs"];
m21_354 [label="new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null) \r\n                        ? default(T) \r\n                        : selector(x.Method, x.Job, x.State))", span="535-539", cluster="lambda expression", file="Worker.cs"];
m21_339 [label="!jobs.ContainsKey(id)", span="511-511", cluster="lambda expression", file="Worker.cs"];
m21_347 [label="!states.ContainsKey(id)", span="517-517", cluster="lambda expression", file="Worker.cs"];
m21_334 [label="x.GetValuesFromHash(\r\n                            String.Format(''hangfire:job:{0}'', id), \r\n                            properties.Union(new [] { ''Type'', ''Method'', ''ParameterTypes'' }).ToArray())", span="508-510", cluster="lambda expression", file="Worker.cs"];
m21_352 [label="Exit lambda expression", span="525-534", cluster="lambda expression", file="Worker.cs"];
m21_355 [label="Exit lambda expression", span="535-539", cluster="lambda expression", file="Worker.cs"];
m21_398 [label="x.GetSortedSetCount(''hangfire:schedule'')", span="570-570", cluster="lambda expression", file="Worker.cs"];
m21_404 [label="x.GetSortedSetCount(''hangfire:processing'')", span="574-574", cluster="lambda expression", file="Worker.cs"];
m21_418 [label="x.GetSortedSetCount(''hangfire:failed'')", span="582-582", cluster="lambda expression", file="Worker.cs"];
m21_189 [label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queue))", span="293-293", cluster="lambda expression", file="Worker.cs"];
m21_195 [label="x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue))", span="297-297", cluster="lambda expression", file="Worker.cs"];
m21_424 [label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName))", span="589-589", cluster="lambda expression", file="Worker.cs"];
m21_43 [label="Exit lambda expression", span="97-104", cluster="lambda expression", file="Worker.cs"];
m21_49 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="Worker.cs"];
m21_48 [label="x.Value.StartedAt", span="104-104", cluster="lambda expression", file="Worker.cs"];
m21_122 [label="Entry lambda expression", span="198-200", cluster="lambda expression", file="Worker.cs"];
m21_125 [label="Entry lambda expression", span="201-201", cluster="lambda expression", file="Worker.cs"];
m21_128 [label="Entry lambda expression", span="204-205", cluster="lambda expression", file="Worker.cs"];
m21_132 [label="Entry lambda expression", span="206-206", cluster="lambda expression", file="Worker.cs"];
m21_149 [label="Exit lambda expression", span="237-245", cluster="lambda expression", file="Worker.cs"];
m21_183 [label="x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1)", span="288-289", cluster="lambda expression", file="Worker.cs"];
m21_159 [label="Exit lambda expression", span="263-268", cluster="lambda expression", file="Worker.cs"];
m21_182 [label="Entry lambda expression", span="288-289", cluster="lambda expression", file="Worker.cs"];
m21_185 [label="Entry lambda expression", span="290-290", cluster="lambda expression", file="Worker.cs"];
m21_188 [label="Entry lambda expression", span="293-293", cluster="lambda expression", file="Worker.cs"];
m21_191 [label="Entry lambda expression", span="294-294", cluster="lambda expression", file="Worker.cs"];
m21_194 [label="Entry lambda expression", span="297-297", cluster="lambda expression", file="Worker.cs"];
m21_197 [label="Entry lambda expression", span="298-298", cluster="lambda expression", file="Worker.cs"];
m21_202 [label="Exit lambda expression", span="308-313", cluster="lambda expression", file="Worker.cs"];
m21_211 [label="Exit lambda expression", span="343-348", cluster="lambda expression", file="Worker.cs"];
m21_219 [label="Exit lambda expression", span="366-373", cluster="lambda expression", file="Worker.cs"];
m21_218 [label="new DequeuedJobDto\r\n                    {\r\n                        Method = method,\r\n                        State = job[0],\r\n                        CreatedAt = JobHelper.FromNullableStringTimestamp(job[1]),\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(job[2]),\r\n                        CheckedAt = JobHelper.FromNullableStringTimestamp(job[3])\r\n                    }", span="366-373", cluster="lambda expression", file="Worker.cs"];
m21_253 [label="!hiddenProperties.Contains(x.Key)", span="420-420", cluster="lambda expression", file="Worker.cs"];
m21_129 [label="x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name))", span="204-205", cluster="lambda expression", file="Worker.cs"];
m21_254 [label="Exit lambda expression", span="420-420", cluster="lambda expression", file="Worker.cs"];
m21_258 [label="Exit lambda expression", span="420-420", cluster="lambda expression", file="Worker.cs"];
m21_257 [label="x.Key", span="420-420", cluster="lambda expression", file="Worker.cs"];
m21_261 [label="Exit lambda expression", span="420-420", cluster="lambda expression", file="Worker.cs"];
m21_260 [label="x.Value", span="420-420", cluster="lambda expression", file="Worker.cs"];
m21_389 [label="stats.Servers = x", span="563-563", cluster="lambda expression", file="Worker.cs"];
m21_395 [label="stats.Queues = x", span="567-567", cluster="lambda expression", file="Worker.cs"];
m21_401 [label="stats.Scheduled = x", span="571-571", cluster="lambda expression", file="Worker.cs"];
m21_407 [label="stats.Processing = x", span="575-575", cluster="lambda expression", file="Worker.cs"];
m21_414 [label="stats.Succeeded = long.Parse(x ?? ''0'')", span="579-579", cluster="lambda expression", file="Worker.cs"];
m21_421 [label="stats.Failed = x", span="583-583", cluster="lambda expression", file="Worker.cs"];
m21_427 [label="stats.Enqueued += x", span="590-590", cluster="lambda expression", file="Worker.cs"];
m21_384 [label="Entry lambda expression", span="562-562", cluster="lambda expression", file="Worker.cs"];
m21_388 [label="Entry lambda expression", span="563-563", cluster="lambda expression", file="Worker.cs"];
m21_391 [label="Entry lambda expression", span="566-566", cluster="lambda expression", file="Worker.cs"];
m21_394 [label="Entry lambda expression", span="567-567", cluster="lambda expression", file="Worker.cs"];
m21_397 [label="Entry lambda expression", span="570-570", cluster="lambda expression", file="Worker.cs"];
m21_400 [label="Entry lambda expression", span="571-571", cluster="lambda expression", file="Worker.cs"];
m21_403 [label="Entry lambda expression", span="574-574", cluster="lambda expression", file="Worker.cs"];
m21_406 [label="Entry lambda expression", span="575-575", cluster="lambda expression", file="Worker.cs"];
m21_409 [label="Entry lambda expression", span="578-578", cluster="lambda expression", file="Worker.cs"];
m21_413 [label="Entry lambda expression", span="579-579", cluster="lambda expression", file="Worker.cs"];
m21_417 [label="Entry lambda expression", span="582-582", cluster="lambda expression", file="Worker.cs"];
m21_420 [label="Entry lambda expression", span="583-583", cluster="lambda expression", file="Worker.cs"];
m21_423 [label="Entry lambda expression", span="589-589", cluster="lambda expression", file="Worker.cs"];
m21_426 [label="Entry lambda expression", span="590-590", cluster="lambda expression", file="Worker.cs"];
m21_127 [label="Exit lambda expression", span="201-201", cluster="lambda expression", file="Worker.cs"];
m21_134 [label="Exit lambda expression", span="206-206", cluster="lambda expression", file="Worker.cs"];
m21_343 [label="Entry lambda expression", span="516-516", cluster="lambda expression", file="Worker.cs"];
m21_346 [label="Entry lambda expression", span="517-517", cluster="lambda expression", file="Worker.cs"];
m21_333 [label="Entry lambda expression", span="508-510", cluster="lambda expression", file="Worker.cs"];
m21_338 [label="Entry lambda expression", span="511-511", cluster="lambda expression", file="Worker.cs"];
m21_341 [label="Exit lambda expression", span="511-511", cluster="lambda expression", file="Worker.cs"];
m21_349 [label="Exit lambda expression", span="517-517", cluster="lambda expression", file="Worker.cs"];
m21_345 [label="Exit lambda expression", span="516-516", cluster="lambda expression", file="Worker.cs"];
m21_335 [label="Exit lambda expression", span="508-510", cluster="lambda expression", file="Worker.cs"];
m21_399 [label="Exit lambda expression", span="570-570", cluster="lambda expression", file="Worker.cs"];
m21_405 [label="Exit lambda expression", span="574-574", cluster="lambda expression", file="Worker.cs"];
m21_419 [label="Exit lambda expression", span="582-582", cluster="lambda expression", file="Worker.cs"];
m21_190 [label="Exit lambda expression", span="293-293", cluster="lambda expression", file="Worker.cs"];
m21_196 [label="Exit lambda expression", span="297-297", cluster="lambda expression", file="Worker.cs"];
m21_425 [label="Exit lambda expression", span="589-589", cluster="lambda expression", file="Worker.cs"];
m21_123 [label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat'')", span="198-200", cluster="lambda expression", file="Worker.cs"];
m21_124 [label="Exit lambda expression", span="198-200", cluster="lambda expression", file="Worker.cs"];
m21_130 [label="Exit lambda expression", span="204-205", cluster="lambda expression", file="Worker.cs"];
m21_184 [label="Exit lambda expression", span="288-289", cluster="lambda expression", file="Worker.cs"];
m21_187 [label="Exit lambda expression", span="290-290", cluster="lambda expression", file="Worker.cs"];
m21_186 [label="firstJobIds = x", span="290-290", cluster="lambda expression", file="Worker.cs"];
m21_193 [label="Exit lambda expression", span="294-294", cluster="lambda expression", file="Worker.cs"];
m21_192 [label="length = x", span="294-294", cluster="lambda expression", file="Worker.cs"];
m21_199 [label="Exit lambda expression", span="298-298", cluster="lambda expression", file="Worker.cs"];
m21_198 [label="dequeued = x", span="298-298", cluster="lambda expression", file="Worker.cs"];
m21_390 [label="Exit lambda expression", span="563-563", cluster="lambda expression", file="Worker.cs"];
m21_396 [label="Exit lambda expression", span="567-567", cluster="lambda expression", file="Worker.cs"];
m21_402 [label="Exit lambda expression", span="571-571", cluster="lambda expression", file="Worker.cs"];
m21_408 [label="Exit lambda expression", span="575-575", cluster="lambda expression", file="Worker.cs"];
m21_415 [label="Exit lambda expression", span="579-579", cluster="lambda expression", file="Worker.cs"];
m21_422 [label="Exit lambda expression", span="583-583", cluster="lambda expression", file="Worker.cs"];
m21_428 [label="Exit lambda expression", span="590-590", cluster="lambda expression", file="Worker.cs"];
m21_386 [label="Exit lambda expression", span="562-562", cluster="lambda expression", file="Worker.cs"];
m21_385 [label="x.GetSetCount(''hangfire:servers'')", span="562-562", cluster="lambda expression", file="Worker.cs"];
m21_393 [label="Exit lambda expression", span="566-566", cluster="lambda expression", file="Worker.cs"];
m21_392 [label="x.GetSetCount(''hangfire:queues'')", span="566-566", cluster="lambda expression", file="Worker.cs"];
m21_411 [label="Exit lambda expression", span="578-578", cluster="lambda expression", file="Worker.cs"];
m21_410 [label="x.GetValue(''hangfire:stats:succeeded'')", span="578-578", cluster="lambda expression", file="Worker.cs"];
m21_360 [label="y == null", span="537-537", cluster="lambda expression", file="Worker.cs"];
m21_361 [label="Exit lambda expression", span="537-537", cluster="lambda expression", file="Worker.cs"];
m21_36 [label="Entry Unk.GetRangeFromSortedSet", span="", cluster="Unk.GetRangeFromSortedSet", file="Worker.cs"];
m21_0 [label="Entry HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(HangFire.Redis.RedisStorage, IRedisClient)", span="32-32", cluster="HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(HangFire.Redis.RedisStorage, IRedisClient)", file="Worker.cs"];
m21_1 [label="_storage = storage", span="34-34", cluster="HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(HangFire.Redis.RedisStorage, IRedisClient)", file="Worker.cs"];
m21_2 [label="_redis = redis", span="35-35", cluster="HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(HangFire.Redis.RedisStorage, IRedisClient)", file="Worker.cs"];
m21_3 [label="Exit HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(HangFire.Redis.RedisStorage, IRedisClient)", span="32-32", cluster="HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(HangFire.Redis.RedisStorage, IRedisClient)", file="Worker.cs"];
m21_180 [label="Entry HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="4-4", cluster="HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="Worker.cs"];
m21_181 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="Worker.cs"];
m21_73 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="Worker.cs"];
m21_77 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="Worker.cs"];
m21_69 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="Worker.cs"];
m21_141 [label="Entry HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", span="223-223", cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="Worker.cs"];
m21_142 [label=_redis, span="225-225", cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="Worker.cs"];
m21_143 [label="var failedJobIds = _redis.GetRangeFromSortedSetDesc(\r\n                    ''hangfire:failed'',\r\n                    from,\r\n                    from + count - 1)", span="227-230", cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="Worker.cs"];
m21_144 [label="return GetJobsWithProperties(\r\n                    _redis,\r\n                    failedJobIds,\r\n                    null,\r\n                    new[] { ''FailedAt'', ''ExceptionType'', ''ExceptionMessage'', ''ExceptionDetails'', ''State'' },\r\n                    (method, job, state) => new FailedJobDto\r\n                    {\r\n                        Method = method,\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.Name.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="232-245", cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="Worker.cs"];
m21_145 [label="Exit HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", span="223-223", cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="Worker.cs"];
m21_289 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)", file="Worker.cs"];
m21_94 [label="Entry HangFire.Storage.Monitoring.ScheduleDto.ScheduleDto()", span="7-7", cluster="HangFire.Storage.Monitoring.ScheduleDto.ScheduleDto()", file="Worker.cs"];
m21_178 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="Worker.cs"];
m21_283 [label="Entry Unk.ElementAt", span="", cluster="Unk.ElementAt", file="Worker.cs"];
m21_106 [label="Entry HangFire.Redis.RedisMonitoringApi.Servers()", span="177-177", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_119 [label="return serverNames.Select(x => new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }).ToList();", span="212-219", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_107 [label=_redis, span="179-179", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_108 [label="var serverNames = _redis.GetAllItemsFromSet(''hangfire:servers'')", span="181-181", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_113 [label="var pipeline = _redis.CreatePipeline()", span="191-191", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_111 [label="var servers = new Dictionary<string, List<string>>()", span="188-188", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_112 [label="var queues = new Dictionary<string, List<string>>()", span="189-189", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_118 [label="pipeline.Flush()", span="209-209", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_109 [label="serverNames.Count == 0", span="183-183", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_114 [label=serverNames, span="193-193", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_116 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat''),\r\n                            x => servers.Add(name, x))", span="197-201", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_117 [label="pipeline.QueueCommand(\r\n                            x => x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name)),\r\n                            x => queues.Add(name, x))", span="203-206", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_110 [label="return new List<ServerDto>();", span="185-185", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_115 [label="var name = serverName", span="195-195", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_120 [label="Exit HangFire.Redis.RedisMonitoringApi.Servers()", span="177-177", cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="Worker.cs"];
m21_156 [label="Entry Unk.GetRangeFromList", span="", cluster="Unk.GetRangeFromList", file="Worker.cs"];
m21_151 [label="Entry HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", span="249-249", cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="Worker.cs"];
m21_152 [label=_redis, span="251-251", cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="Worker.cs"];
m21_153 [label="var succeededJobIds = _redis.GetRangeFromList(\r\n                    ''hangfire:succeeded'',\r\n                    from,\r\n                    from + count - 1)", span="253-256", cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="Worker.cs"];
m21_154 [label="return GetJobsWithProperties(\r\n                    _redis,\r\n                    succeededJobIds,\r\n                    null,\r\n                    new[] { ''SucceededAt'', ''State'' },\r\n                    (method, job, state) => new SucceededJobDto\r\n                    {\r\n                        Method = method,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InSucceededState = SucceededState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="258-268", cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="Worker.cs"];
m21_155 [label="Exit HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", span="249-249", cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="Worker.cs"];
m21_97 [label="Entry HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", span="161-161", cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="Worker.cs"];
m21_98 [label=_redis, span="163-163", cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="Worker.cs"];
m21_99 [label="return GetTimelineStats(_redis, ''succeeded'');", span="165-165", cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="Worker.cs"];
m21_100 [label="Exit HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", span="161-161", cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="Worker.cs"];
m21_70 [label="Entry Unk.Flush", span="", cluster="Unk.Flush", file="Worker.cs"];
m21_416 [label="Entry Unk.Parse", span="", cluster="Unk.Parse", file="Worker.cs"];
m21_82 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="Worker.cs"];
m21_46 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="Worker.cs"];
m21_23 [label="Entry HangFire.Redis.RedisMonitoringApi.FailedCount()", span="67-67", cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", file="Worker.cs"];
m21_24 [label=_redis, span="69-69", cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", file="Worker.cs"];
m21_25 [label="return _redis.GetSortedSetCount(''hangfire:failed'');", span="71-71", cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", file="Worker.cs"];
m21_26 [label="Exit HangFire.Redis.RedisMonitoringApi.FailedCount()", span="67-67", cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", file="Worker.cs"];
m21_281 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="Worker.cs"];
m21_31 [label="Entry HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", span="83-83", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="Worker.cs"];
m21_32 [label=_redis, span="86-86", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="Worker.cs"];
m21_33 [label="var jobIds = _redis.GetRangeFromSortedSet(\r\n                    ''hangfire:processing'',\r\n                    from,\r\n                    from + count - 1)", span="88-91", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="Worker.cs"];
m21_34 [label="return new JobList<ProcessingJobDto>(GetJobsWithProperties(_redis,\r\n                    jobIds,\r\n                    null,\r\n                    new[] { ''StartedAt'', ''ServerName'', ''State'' },\r\n                    (method, job, state) => new ProcessingJobDto\r\n                    {\r\n                        ServerName = state[1],\r\n                        Method = method,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.Name.Equals(\r\n                            state[2], StringComparison.OrdinalIgnoreCase),\r\n                    }).OrderBy(x => x.Value.StartedAt).ToList());", span="93-104", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="Worker.cs"];
m21_35 [label="Exit HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", span="83-83", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="Worker.cs"];
m21_12 [label="Entry Unk.GetSortedSetCount", span="", cluster="Unk.GetSortedSetCount", file="Worker.cs"];
m21_160 [label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="7-7", cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="Worker.cs"];
m21_27 [label="Entry HangFire.Redis.RedisMonitoringApi.ProcessingCount()", span="75-75", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", file="Worker.cs"];
m21_28 [label=_redis, span="77-77", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", file="Worker.cs"];
m21_29 [label="return _redis.GetSortedSetCount(''hangfire:processing'');", span="79-79", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", file="Worker.cs"];
m21_30 [label="Exit HangFire.Redis.RedisMonitoringApi.ProcessingCount()", span="75-75", cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", file="Worker.cs"];
m21_336 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="Worker.cs"];
m21_247 [label="Entry Unk.TryToGetMethod", span="", cluster="Unk.TryToGetMethod", file="Worker.cs"];
m21_332 [label="Entry JobList<T>.cstr", span="", cluster="JobList<T>.cstr", file="Worker.cs"];
m21_285 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="Worker.cs"];
m21_221 [label="Entry HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", span="377-377", cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="Worker.cs"];
m21_222 [label=_redis, span="379-379", cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="Worker.cs"];
m21_223 [label="return GetHourlyTimelineStats(_redis, ''succeeded'');", span="381-381", cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="Worker.cs"];
m21_224 [label="Exit HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", span="377-377", cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="Worker.cs"];
m21_179 [label="Entry HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="487-487", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_329 [label="return new JobList<T>(jobIds\r\n                .Select(x => new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    Method = TryToGetMethod(\r\n                        jobs[x][properties.Length],\r\n                        jobs[x][properties.Length + 1],\r\n                        jobs[x][properties.Length + 2]),\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                })\r\n                .Select(x => new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null) \r\n                        ? default(T) \r\n                        : selector(x.Method, x.Job, x.State)))\r\n                .ToList());", span="524-540", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_328 [label="pipeline.Flush()", span="521-521", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_319 [label="var jobs = new Dictionary<string, List<string>>(jobIds.Count)", span="496-496", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_320 [label="var states = new Dictionary<string, List<string>>(jobIds.Count)", span="497-497", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_321 [label="properties = properties ?? new string[0]", span="499-499", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_327 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties),\r\n                            x => { if (!states.ContainsKey(id)) states.Add(id, x); })", span="515-517", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_325 [label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(''hangfire:job:{0}'', id), \r\n                            properties.Union(new [] { ''Type'', ''Method'', ''ParameterTypes'' }).ToArray()),\r\n                        x => { if (!jobs.ContainsKey(id)) jobs.Add(id, x); })", span="507-511", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_322 [label="var pipeline = redis.CreatePipeline()", span="501-501", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_323 [label=jobIds, span="503-503", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_318 [label="return new JobList<T>(new List<KeyValuePair<string, T>>());", span="494-494", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_317 [label="jobIds.Count == 0", span="494-494", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_326 [label="stateProperties != null", span="513-513", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_324 [label="var id = jobId", span="505-505", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_330 [label="Exit HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="487-487", cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="Worker.cs"];
m21_290 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="Worker.cs"];
m21_244 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="Worker.cs"];
m21_251 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="Worker.cs"];
m21_249 [label="Entry Unk.FromStringTimestamp", span="", cluster="Unk.FromStringTimestamp", file="Worker.cs"];
m21_331 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", file="Worker.cs"];
m21_387 [label="Entry Unk.GetSetCount", span="", cluster="Unk.GetSetCount", file="Worker.cs"];
m21_95 [label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="41-41", cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="Worker.cs"];
m21_17 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="Worker.cs"];
m21_102 [label="Entry HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", span="169-169", cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="Worker.cs"];
m21_103 [label=_redis, span="171-171", cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="Worker.cs"];
m21_104 [label="return GetTimelineStats(_redis, ''failed'');", span="173-173", cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="Worker.cs"];
m21_105 [label="Exit HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", span="169-169", cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="Worker.cs"];
m21_203 [label="Entry HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="7-7", cluster="HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="Worker.cs"];
m21_150 [label="Entry HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="7-7", cluster="HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="Worker.cs"];
m21_248 [label="Entry Unk.>", span="", cluster="Unk.>", file="Worker.cs"];
m21_161 [label="Entry HangFire.Redis.RedisMonitoringApi.Queues()", span="272-272", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_162 [label=_redis, span="274-274", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_163 [label="var queues = _redis.GetAllItemsFromSet(''hangfire:queues'')", span="276-276", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_169 [label="var pipeline = _redis.CreatePipeline()", span="285-285", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_174 [label="var jobs = GetJobsWithProperties(\r\n                        _redis,\r\n                        firstJobIds,\r\n                        null,\r\n                        new[] { ''EnqueuedAt'', ''State'' },\r\n                        (method, job, state) => new EnqueuedJobDto\r\n                        {\r\n                            Method = method,\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        })", span="303-313", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_173 [label="pipeline.Flush()", span="300-300", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_164 [label="var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count)", span="277-277", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_165 [label=queues, span="279-279", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_168 [label="long dequeued = 0", span="283-283", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_170 [label="pipeline.QueueCommand(\r\n                            x => x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1),\r\n                            x => firstJobIds = x)", span="287-290", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_171 [label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queue)),\r\n                            x => length = x)", span="292-294", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_172 [label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue)),\r\n                            x => dequeued = x)", span="296-298", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_175 [label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = queue,\r\n                        FirstJobs = jobs,\r\n                        Length = length,\r\n                        Dequeued = dequeued\r\n                    })", span="315-321", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_176 [label="return result;", span="324-324", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_166 [label="IList<string> firstJobIds = null", span="281-281", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_167 [label="long length = 0", span="282-282", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_177 [label="Exit HangFire.Redis.RedisMonitoringApi.Queues()", span="272-272", cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="Worker.cs"];
m21_18 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount", file="Worker.cs"];
m21_71 [label="Entry JobList<ScheduleDto>.cstr", span="", cluster="JobList<ScheduleDto>.cstr", file="Worker.cs"];
m21_50 [label="Entry HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", span="108-108", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_63 [label="return new JobList<ScheduleDto>(scheduledJobs\r\n                    .Select(job => new KeyValuePair<string, ScheduleDto>(\r\n                        job.Key,\r\n                        new ScheduleDto\r\n                        {\r\n                            ScheduledAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Method = TryToGetMethod(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2]),\r\n                            InScheduledState =\r\n                                ScheduledState.Name.Equals(states[job.Key], StringComparison.OrdinalIgnoreCase)\r\n                        }))\r\n                    .ToList());", span="147-157", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", color=green, community=0, file="Worker.cs"];
m21_52 [label="var scheduledJobs = _redis.GetRangeWithScoresFromSortedSet(\r\n                    ''hangfire:schedule'',\r\n                    from,\r\n                    from + count - 1)", span="112-115", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_55 [label="var jobs = new Dictionary<string, List<string>>()", span="122-122", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_56 [label="var states = new Dictionary<string, string>()", span="123-123", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_62 [label="pipeline.Flush()", span="144-144", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_51 [label=_redis, span="110-110", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_53 [label="scheduledJobs.Count == 0", span="117-117", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_58 [label=scheduledJobs, span="127-127", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_60 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'' }),\r\n                            x => jobs.Add(job.Key, x))", span="131-135", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_57 [label="var pipeline = _redis.CreatePipeline()", span="125-125", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_61 [label="pipeline.QueueCommand(\r\n                            x => x.GetValueFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                ''State''),\r\n                            x => states.Add(job.Key, x))", span="137-141", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_54 [label="return new JobList<ScheduleDto>(new List<KeyValuePair<string, ScheduleDto>>());", span="119-119", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_59 [label="var job = scheduledJob", span="129-129", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_64 [label="Exit HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", span="108-108", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="Worker.cs"];
m21_212 [label="Entry HangFire.Redis.RedisMonitoringApi.DequeuedJobs(string, int, int)", span="352-352", cluster="HangFire.Redis.RedisMonitoringApi.DequeuedJobs(string, int, int)", file="Worker.cs"];
m21_213 [label=_redis, span="355-355", cluster="HangFire.Redis.RedisMonitoringApi.DequeuedJobs(string, int, int)", file="Worker.cs"];
m21_214 [label="var jobIds = _redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    from, from + perPage - 1)", span="357-359", cluster="HangFire.Redis.RedisMonitoringApi.DequeuedJobs(string, int, int)", file="Worker.cs"];
m21_215 [label="return GetJobsWithProperties(\r\n                    _redis,\r\n                    jobIds,\r\n                    new[] { ''State'', ''CreatedAt'', ''Fetched'', ''Checked'' },\r\n                    null,\r\n                    (method, job, state) => new DequeuedJobDto\r\n                    {\r\n                        Method = method,\r\n                        State = job[0],\r\n                        CreatedAt = JobHelper.FromNullableStringTimestamp(job[1]),\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(job[2]),\r\n                        CheckedAt = JobHelper.FromNullableStringTimestamp(job[3])\r\n                    });", span="361-373", cluster="HangFire.Redis.RedisMonitoringApi.DequeuedJobs(string, int, int)", file="Worker.cs"];
m21_216 [label="Exit HangFire.Redis.RedisMonitoringApi.DequeuedJobs(string, int, int)", span="352-352", cluster="HangFire.Redis.RedisMonitoringApi.DequeuedJobs(string, int, int)", file="Worker.cs"];
m21_67 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="Worker.cs"];
m21_37 [label="Entry HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="7-7", cluster="HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="Worker.cs"];
m21_13 [label="Entry HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", span="51-51", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", file="Worker.cs"];
m21_14 [label=_redis, span="53-53", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", file="Worker.cs"];
m21_15 [label="return _redis.GetListCount(String.Format(''hangfire:queue:{0}'', queue));", span="55-55", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", file="Worker.cs"];
m21_16 [label="Exit HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", span="51-51", cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", file="Worker.cs"];
m21_282 [label="Entry Unk.GetValuesMap", span="", cluster="Unk.GetValuesMap", file="Worker.cs"];
m21_8 [label="Entry HangFire.Redis.RedisMonitoringApi.ScheduledCount()", span="43-43", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="Worker.cs"];
m21_9 [label=_redis, span="45-45", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="Worker.cs"];
m21_10 [label="return _redis.GetSortedSetCount(''hangfire:schedule'');", span="47-47", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="Worker.cs"];
m21_11 [label="Exit HangFire.Redis.RedisMonitoringApi.ScheduledCount()", span="43-43", cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="Worker.cs"];
m21_131 [label="Entry Unk.GetAllItemsFromList", span="", cluster="Unk.GetAllItemsFromList", file="Worker.cs"];
m21_255 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="Worker.cs"];
m21_72 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="Worker.cs"];
m21_4 [label="Entry HangFire.Redis.RedisMonitoringApi.Dispose()", span="38-38", cluster="HangFire.Redis.RedisMonitoringApi.Dispose()", file="Worker.cs"];
m21_5 [label="_redis.Dispose()", span="40-40", cluster="HangFire.Redis.RedisMonitoringApi.Dispose()", file="Worker.cs"];
m21_6 [label="Exit HangFire.Redis.RedisMonitoringApi.Dispose()", span="38-38", cluster="HangFire.Redis.RedisMonitoringApi.Dispose()", file="Worker.cs"];
m21_121 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="Worker.cs"];
m21_146 [label="Entry Unk.GetRangeFromSortedSetDesc", span="", cluster="Unk.GetRangeFromSortedSetDesc", file="Worker.cs"];
m21_412 [label="Entry Unk.GetValue", span="", cluster="Unk.GetValue", file="Worker.cs"];
m21_78 [label="Entry Unk.GetValuesFromHash", span="", cluster="Unk.GetValuesFromHash", file="Worker.cs"];
m21_433 [label="Entry HangFire.Storage.InvocationData.InvocationData()", span="2-2", cluster="HangFire.Storage.InvocationData.InvocationData()", file="Worker.cs"];
m21_435 [label="HangFire.Redis.RedisMonitoringApi", span="", file="Worker.cs"];
m21_436 [label=job, span="", file="Worker.cs"];
m21_437 [label=jobs, span="", file="Worker.cs"];
m21_438 [label=states, span="", file="Worker.cs"];
m21_439 [label=name, span="", file="Worker.cs"];
m21_440 [label=servers, span="", file="Worker.cs"];
m21_441 [label=queues, span="", file="Worker.cs"];
m21_447 [label=id, span="", file="Worker.cs"];
m21_448 [label=jobs, span="", file="Worker.cs"];
m21_450 [label=states, span="", file="Worker.cs"];
m21_446 [label="string[]", span="", file="Worker.cs"];
m21_444 [label=string, span="", file="Worker.cs"];
m21_445 [label=string, span="", file="Worker.cs"];
m21_449 [label="string[]", span="", file="Worker.cs"];
m21_451 [label="System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", span="", file="Worker.cs"];
m21_442 [label=queue, span="", file="Worker.cs"];
m21_453 [label=queueName, span="", file="Worker.cs"];
m21_443 [label=hiddenProperties, span="", file="Worker.cs"];
m21_452 [label=stats, span="", file="Worker.cs"];
n119 -> n9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.ContinuationsSupportAttribute"];
n119 -> n10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.ContinuationsSupportAttribute"];
n119 -> n11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.ContinuationsSupportAttribute"];
n119 -> n18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.ContinuationsSupportAttribute"];
n119 -> n19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.ContinuationsSupportAttribute"];
n119 -> n20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.ContinuationsSupportAttribute"];
n119 -> n41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.ContinuationsSupportAttribute"];
n119 -> n75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.ContinuationsSupportAttribute"];
n120 -> n57  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n3 -> n2  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n4 -> n6  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.HashSet<string>"];
n4 -> n7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IBackgroundJobStateChanger"];
n4 -> n8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IBackgroundJobStateChanger"];
n4 -> n9  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.HashSet<string>"];
n4 -> n10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IBackgroundJobStateChanger"];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=0, style=solid];
n6 -> n12  [key=0, style=solid];
n6 -> n13  [key=2, style=dotted];
n6 -> n14  [key=2, style=dotted];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=0, style=solid];
n8 -> n12  [key=0, style=solid];
n8 -> n13  [key=2, style=dotted];
n8 -> n14  [key=2, style=dotted];
n9 -> n10  [key=0, style=solid];
n10 -> n11  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n12 -> n4  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n15 -> n18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n15 -> n19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n15 -> n20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=1, style=dashed, color=darkseagreen4, label=awaitingState];
n18 -> n21  [key=0, style=solid];
n18 -> n22  [key=2, style=dotted];
n19 -> n20  [key=0, style=solid];
n19 -> n21  [key=0, style=solid];
n19 -> n23  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n24  [key=2, style=dotted];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=0, style=solid];
n21 -> n15  [key=0, style=bold, color=blue];
n24 -> n59  [key=0, style=solid];
n24 -> n63  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n24 -> n67  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n24 -> n75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n22 -> n30  [key=0, style=solid];
n22 -> n31  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.AwaitingState"];
n22 -> n34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n22 -> n57  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n22 -> n35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n22 -> n42  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.AwaitingState"];
n22 -> n43  [key=1, style=dashed, color=red, label="Hangfire.States.ElectStateContext"];
n25 -> n26  [key=0, style=solid];
n25 -> n28  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ApplyStateContext"];
n26 -> n27  [key=0, style=solid];
n26 -> n28  [key=1, style=dashed, color=darkseagreen4, label=awaitingState];
n28 -> n29  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=0, style=solid];
n29 -> n25  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=1, style=dashed, color=darkseagreen4, label=connection];
n30 -> n33  [key=1, style=dashed, color=darkseagreen4, label=connection];
n30 -> n36  [key=1, style=dashed, color=darkseagreen4, label=connection];
n30 -> n37  [key=1, style=dashed, color=darkseagreen4, label=connection];
n30 -> n40  [key=1, style=dashed, color=darkseagreen4, label=connection];
n31 -> n32  [key=0, style=solid];
n31 -> n33  [key=1, style=dashed, color=darkseagreen4, label=parentId];
n31 -> n36  [key=1, style=dashed, color=darkseagreen4, label=parentId];
n31 -> n37  [key=1, style=dashed, color=darkseagreen4, label=parentId];
n31 -> n39  [key=1, style=dashed, color=darkseagreen4, label=parentId];
n31 -> n40  [key=1, style=dashed, color=darkseagreen4, label=parentId];
n34 -> n35  [key=0, style=solid];
n34 -> n37  [key=0, style=solid];
n34 -> n47  [key=2, style=dotted];
n34 -> n56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n57 -> n58  [key=0, style=solid];
n57 -> n57  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.ContinuationsSupportAttribute.Continuation"];
n35 -> n36  [key=0, style=solid];
n35 -> n48  [key=2, style=dotted];
n35 -> n49  [key=2, style=dotted];
n42 -> n43  [key=0, style=solid, color=red];
n42 -> n54  [key=2, style=dotted];
n43 -> n44  [key=0, style=solid, color=red];
n43 -> n55  [key=2, style=dotted, color=red];
n32 -> n33  [key=0, style=solid];
n32 -> n45  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n33 -> n46  [key=2, style=dotted];
n33 -> n35  [key=1, style=dashed, color=darkseagreen4, label=continuations];
n33 -> n36  [key=1, style=dashed, color=darkseagreen4, label=continuations];
n36 -> n37  [key=0, style=solid];
n36 -> n50  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n37 -> n51  [key=2, style=dotted];
n40 -> n41  [key=0, style=solid];
n40 -> n53  [key=2, style=dotted];
n40 -> n42  [key=1, style=dashed, color=darkseagreen4, label=currentState];
n39 -> n44  [key=0, style=solid];
n39 -> n52  [key=2, style=dotted];
n46 -> n112  [key=0, style=solid];
n56 -> n57  [key=0, style=solid];
n50 -> n108  [key=0, style=solid];
n38 -> n39  [key=0, style=solid];
n38 -> n40  [key=0, style=solid];
n41 -> n42  [key=0, style=solid];
n41 -> n44  [key=0, style=solid];
n41 -> n23  [key=2, style=dotted];
n44 -> n22  [key=0, style=bold, color=blue];
n58 -> n56  [key=0, style=bold, color=blue];
n59 -> n60  [key=0, style=solid];
n59 -> n46  [key=2, style=dotted];
n59 -> n61  [key=1, style=dashed, color=darkseagreen4, label=continuations];
n63 -> n64  [key=0, style=solid];
n63 -> n79  [key=2, style=dotted];
n63 -> n63  [key=1, style=dashed, color=darkseagreen4, label=continuation];
n63 -> n65  [key=1, style=dashed, color=darkseagreen4, label=currentState];
n63 -> n67  [key=1, style=dashed, color=darkseagreen4, label=continuation];
n63 -> n69  [key=1, style=dashed, color=darkseagreen4, label=currentState];
n63 -> n75  [key=3, color=darkorchid, style=bold, label="method methodReturn IAppBuilder UseHangfireServer"];
n67 -> n68  [key=0, style=solid];
n67 -> n69  [key=0, style=solid];
n67 -> n54  [key=2, style=dotted];
n67 -> n67  [key=1, style=dashed, color=darkseagreen4, label=continuation];
n67 -> n72  [key=1, style=dashed, color=darkseagreen4, label=continuation];
n75 -> n74  [key=0, style=solid];
n75 -> n85  [key=2, style=dotted];
n75 -> n86  [key=2, style=dotted];
n75 -> n75  [key=1, style=dashed, color=darkseagreen4, label=tuple];
n60 -> n61  [key=0, style=solid];
n60 -> n77  [key=2, style=dotted];
n60 -> n72  [key=1, style=dashed, color=darkseagreen4, label=nextStates];
n60 -> n73  [key=1, style=dashed, color=darkseagreen4, label=nextStates];
n60 -> n74  [key=1, style=dashed, color=darkseagreen4, label=nextStates];
n61 -> n62  [key=0, style=solid];
n61 -> n74  [key=0, style=solid];
n72 -> n73  [key=0, style=solid];
n72 -> n61  [key=0, style=solid];
n72 -> n83  [key=2, style=dotted];
n72 -> n72  [key=1, style=dashed, color=darkseagreen4, label=continuation];
n73 -> n61  [key=0, style=solid];
n73 -> n84  [key=2, style=dotted];
n73 -> n73  [key=1, style=dashed, color=darkseagreen4, label=continuation];
n74 -> n75  [key=0, style=solid];
n74 -> n76  [key=0, style=solid];
n62 -> n63  [key=0, style=solid];
n62 -> n61  [key=0, style=solid];
n62 -> n78  [key=2, style=dotted];
n62 -> n62  [key=1, style=dashed, color=darkseagreen4, label=continuation];
n64 -> n65  [key=0, style=solid];
n64 -> n61  [key=0, style=solid];
n79 -> n87  [key=0, style=solid];
n79 -> n91  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n79 -> n93  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n79 -> n94  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n79 -> n97  [key=1, style=dashed, color=darkseagreen4, label=string];
n79 -> n98  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
n79 -> n99  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
n65 -> n66  [key=0, style=solid];
n65 -> n61  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n72  [key=0, style=solid];
n69 -> n80  [key=2, style=dotted];
n69 -> n81  [key=2, style=dotted];
n66 -> n67  [key=0, style=solid];
n68 -> n72  [key=0, style=solid];
n68 -> n55  [key=2, style=dotted];
n68 -> n73  [key=1, style=dashed, color=darkseagreen4, label=nextState];
n70 -> n71  [key=0, style=solid];
n71 -> n72  [key=0, style=solid];
n71 -> n82  [key=2, style=dotted];
n71 -> n73  [key=1, style=dashed, color=darkseagreen4, label=nextState];
n76 -> n24  [key=0, style=bold, color=blue];
n87 -> n88  [key=0, style=solid];
n87 -> n102  [key=1, style=dashed, color=darkseagreen4, label=currentState];
n91 -> n92  [key=0, style=solid];
n91 -> n51  [key=2, style=dotted];
n91 -> n96  [key=1, style=dashed, color=darkseagreen4, label=continuationData];
n93 -> n102  [key=0, style=solid];
n93 -> n104  [key=2, style=dotted];
n94 -> n95  [key=0, style=solid];
n94 -> n53  [key=2, style=dotted];
n94 -> n102  [key=1, style=dashed, color=darkseagreen4, label=currentState];
n97 -> n102  [key=0, style=solid];
n97 -> n104  [key=2, style=dotted];
n98 -> n99  [key=0, style=solid];
n98 -> n100  [key=0, style=solid];
n98 -> n105  [key=2, style=dotted];
n99 -> n103  [key=0, style=solid];
n99 -> n106  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n88 -> n98  [key=1, style=dashed, color=darkseagreen4, label=started];
n102 -> n103  [key=0, style=solid];
n89 -> n90  [key=0, style=solid];
n89 -> n100  [key=1, style=dashed, color=darkseagreen4, label=firstAttempt];
n90 -> n91  [key=0, style=solid];
n90 -> n102  [key=0, style=solid];
n100 -> n101  [key=0, style=solid];
n100 -> n107  [key=2, style=dotted];
n92 -> n93  [key=0, style=solid];
n92 -> n94  [key=0, style=solid];
n96 -> n97  [key=0, style=solid];
n96 -> n98  [key=0, style=solid];
n95 -> n96  [key=0, style=solid];
n95 -> n102  [key=0, style=solid];
n101 -> n90  [key=0, style=solid];
n103 -> n79  [key=0, style=bold, color=blue];
n108 -> n109  [key=0, style=solid];
n108 -> n110  [key=2, style=dotted];
n108 -> n111  [key=2, style=dotted];
n109 -> n50  [key=0, style=bold, color=blue];
n112 -> n113  [key=0, style=solid];
n112 -> n114  [key=2, style=dotted];
n112 -> n115  [key=2, style=dotted];
n112 -> n116  [key=2, style=dotted];
n113 -> n46  [key=0, style=bold, color=blue];
n117 -> n118  [key=0, style=solid];
n118 -> n117  [key=0, style=bold, color=blue];
m1_38 -> m1_39  [key=0, style=solid, color=green];
m1_39 -> m1_40  [key=0, style=solid, color=green];
m1_39 -> m1_42  [key=2, style=dotted, color=green];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_33  [key=2, style=dotted];
m1_41 -> m1_38  [key=0, style=bold, color=blue];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_4  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_0  [key=0, style=bold, color=blue];
m1_63 -> m1_64  [key=0, style=solid];
m1_64 -> m1_63  [key=0, style=bold, color=blue];
m1_65 -> m1_66  [key=0, style=solid];
m1_66 -> m1_65  [key=0, style=bold, color=blue];
m1_8 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m1_8 -> m1_25  [key=1, style=dashed, color=red, label="Hangfire.BackgroundJobServerOptions"];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m1_8 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>"];
m1_8 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m1_8 -> m1_18  [key=1, style=dashed, color=red, label="Hangfire.JobStorage"];
m1_8 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>"];
m1_8 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m1_8 -> m1_22  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m1_8 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_11  [key=0, style=solid];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_13  [key=0, style=solid];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_15  [key=0, style=solid];
m1_15 -> m1_16  [key=0, style=solid, color=green];
m1_18 -> m1_19  [key=0, style=solid, color=red];
m1_18 -> m1_31  [key=2, style=dotted, color=red];
m1_18 -> m1_30  [key=2, style=dotted, color=red];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_30  [key=2, style=dotted];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_32  [key=2, style=dotted];
m1_20 -> m1_25  [key=1, style=dashed, color=green, label=properties];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_34  [key=2, style=dotted];
m1_23 -> m1_24  [key=0, style=solid, color=green];
m1_23 -> m1_35  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid, color=green];
m1_24 -> m1_36  [key=2, style=dotted, color=green];
m1_25 -> m1_26  [key=0, style=solid, color=green];
m1_25 -> m1_37  [key=2, style=dotted, color=green];
m1_10 -> m1_26  [key=0, style=solid];
m1_10 -> n13  [key=2, style=dotted];
m1_12 -> m1_26  [key=0, style=solid];
m1_12 -> n13  [key=2, style=dotted];
m1_14 -> m1_26  [key=0, style=solid];
m1_14 -> n13  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid, color=green];
m1_16 -> m1_28  [key=2, style=dotted, color=green];
m1_16 -> m1_18  [key=1, style=dashed, color=green, label=processes];
m1_16 -> m1_19  [key=1, style=dashed, color=green, label=processes];
m1_16 -> m1_25  [key=1, style=dashed, color=green, label=processes];
m1_17 -> m1_18  [key=0, style=solid, color=green];
m1_17 -> m1_29  [key=2, style=dotted, color=green];
m1_17 -> m1_30  [key=2, style=dotted, color=green];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_33  [key=2, style=dotted];
m1_26 -> m1_8  [key=0, style=bold, color=blue];
m1_29 -> m1_43  [key=0, style=solid, color=green];
m1_43 -> m1_44  [key=0, style=solid, color=green];
m1_43 -> m1_28  [key=2, style=dotted, color=green];
m1_43 -> m1_46  [key=1, style=dashed, color=green, label=processes];
m1_43 -> m1_48  [key=1, style=dashed, color=green, label=processes];
m1_43 -> m1_49  [key=1, style=dashed, color=green, label=processes];
m1_43 -> m1_50  [key=1, style=dashed, color=green, label=processes];
m1_43 -> m1_51  [key=1, style=dashed, color=green, label=processes];
m1_43 -> m1_52  [key=1, style=dashed, color=green, label=processes];
m1_44 -> m1_45  [key=0, style=solid];
m1_44 -> m1_47  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_44 -> m1_44  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_54  [key=2, style=dotted];
m1_46 -> m1_55  [key=2, style=dotted];
m1_46 -> m1_56  [key=2, style=dotted];
m1_46 -> m1_57  [key=2, style=dotted];
m1_48 -> m1_49  [key=0, style=solid, color=green];
m1_48 -> m1_58  [key=2, style=dotted, color=green];
m1_48 -> m1_57  [key=2, style=dotted, color=green];
m1_49 -> m1_50  [key=0, style=solid, color=red];
m1_49 -> m1_59  [key=2, style=dotted, color=red];
m1_49 -> m1_57  [key=2, style=dotted, color=red];
m1_50 -> m1_51  [key=0, style=solid, color=red];
m1_50 -> m1_60  [key=2, style=dotted, color=red];
m1_50 -> m1_56  [key=2, style=dotted, color=red];
m1_50 -> m1_57  [key=2, style=dotted, color=red];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_61  [key=2, style=dotted];
m1_51 -> m1_62  [key=2, style=dotted];
m1_51 -> m1_57  [key=2, style=dotted];
m1_52 -> m1_53  [key=0, style=solid];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_48  [key=0, style=solid, color=green];
m1_47 -> m1_45  [key=0, style=solid];
m1_47 -> m1_47  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_53 -> m1_29  [key=0, style=bold, color=blue];
m1_6 -> m1_7  [key=0, style=solid];
m1_7 -> m1_6  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_2  [key=0, style=bold, color=blue];
m1_67 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServer"];
m1_67 -> m1_17  [key=1, style=dashed, color=green, label="Hangfire.BackgroundJobServer"];
m1_67 -> m1_25  [key=1, style=dashed, color=green, label="Hangfire.BackgroundJobServer"];
m1_67 -> m1_39  [key=1, style=dashed, color=green, label="Hangfire.BackgroundJobServer"];
m1_67 -> m1_45  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServer"];
m1_67 -> m1_46  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServer"];
m1_67 -> m1_48  [key=1, style=dashed, color=green, label="Hangfire.BackgroundJobServer"];
m1_67 -> m1_49  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServer"];
m1_67 -> m1_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServer"];
m1_67 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServer"];
m5_35 -> m5_36  [key=0, style=solid, color=red];
m5_36 -> m5_37  [key=0, style=solid, color=red];
m5_36 -> m5_21  [key=2, style=dotted, color=red];
m5_36 -> m5_39  [key=1, style=dashed, color=red, label="lambda expression"];
m5_37 -> m5_38  [key=0, style=solid];
m5_37 -> m5_22  [key=2, style=dotted];
m5_38 -> m5_35  [key=0, style=bold, color=blue];
m5_17 -> m5_18  [key=0, style=solid, color=red];
m5_18 -> m5_19  [key=0, style=solid, color=red];
m5_18 -> m5_21  [key=2, style=dotted, color=red];
m5_18 -> m5_23  [key=1, style=dashed, color=red, label="lambda expression"];
m5_19 -> m5_20  [key=0, style=solid];
m5_19 -> m5_22  [key=2, style=dotted];
m5_20 -> m5_17  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid, color=red];
m5_1 -> m5_7  [key=2, style=dotted];
m5_2 -> m5_3  [key=0, style=solid, color=red];
m5_2 -> n116  [key=2, style=dotted, color=red];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_9  [key=2, style=dotted];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_10  [key=2, style=dotted];
m5_5 -> m5_6  [key=0, style=solid];
m5_5 -> m5_11  [key=2, style=dotted];
m5_5 -> m5_12  [key=2, style=dotted];
m5_5 -> m5_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_6 -> m5_0  [key=0, style=bold, color=blue];
m5_27 -> m5_28  [key=0, style=solid, color=red];
m5_28 -> m5_29  [key=0, style=solid, color=red];
m5_28 -> m5_21  [key=2, style=dotted, color=red];
m5_28 -> m5_31  [key=1, style=dashed, color=red, label="lambda expression"];
m5_29 -> m5_30  [key=0, style=solid];
m5_29 -> m5_22  [key=2, style=dotted];
m5_30 -> m5_27  [key=0, style=bold, color=blue];
m5_72 -> m5_96  [key=0, style=solid];
m5_96 -> m5_97  [key=0, style=solid];
m5_96 -> m5_100  [key=2, style=dotted];
m5_96 -> m5_98  [key=1, style=dashed, color=darkseagreen4, label=mock];
m5_97 -> m5_98  [key=0, style=solid];
m5_97 -> m5_101  [key=2, style=dotted];
m5_98 -> m5_99  [key=0, style=solid];
m5_99 -> m5_72  [key=0, style=bold, color=blue];
m5_48 -> m5_94  [key=0, style=solid, color=red];
m5_94 -> m5_95  [key=0, style=solid, color=red];
m5_94 -> m5_34  [key=2, style=dotted, color=red];
m5_95 -> m5_48  [key=0, style=bold, color=blue];
m5_91 -> m5_92  [key=0, style=solid];
m5_13 -> m5_14  [key=0, style=solid];
m5_14 -> m5_15  [key=0, style=solid];
m5_14 -> m5_16  [key=2, style=dotted];
m5_15 -> m5_13  [key=0, style=bold, color=blue];
m5_23 -> m5_24  [key=0, style=solid, color=red];
m5_24 -> m5_25  [key=0, style=solid, color=red];
m5_24 -> m5_26  [key=2, style=dotted, color=red];
m5_25 -> m5_23  [key=0, style=bold, color=blue];
m5_31 -> m5_32  [key=0, style=solid, color=red];
m5_32 -> m5_33  [key=0, style=solid, color=red];
m5_32 -> m5_34  [key=2, style=dotted, color=red];
m5_33 -> m5_31  [key=0, style=bold, color=blue];
m5_39 -> m5_40  [key=0, style=solid, color=red];
m5_40 -> m5_41  [key=0, style=solid, color=red];
m5_40 -> m5_34  [key=2, style=dotted, color=red];
m5_41 -> m5_39  [key=0, style=bold, color=blue];
m5_51 -> m5_52  [key=0, style=solid];
m5_58 -> m5_59  [key=0, style=solid];
m5_52 -> m5_53  [key=0, style=solid];
m5_52 -> m5_21  [key=2, style=dotted];
m5_52 -> m5_54  [key=2, style=dotted];
m5_52 -> m5_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_53 -> m5_51  [key=0, style=bold, color=blue];
m5_55 -> m5_56  [key=0, style=solid];
m5_56 -> m5_57  [key=0, style=solid];
m5_57 -> m5_55  [key=0, style=bold, color=blue];
m5_59 -> m5_60  [key=0, style=solid];
m5_59 -> m5_21  [key=2, style=dotted];
m5_59 -> m5_61  [key=2, style=dotted];
m5_60 -> m5_58  [key=0, style=bold, color=blue];
m5_75 -> m5_76  [key=0, style=solid, color=red];
m5_79 -> m5_80  [key=0, style=solid, color=red];
m5_82 -> m5_83  [key=0, style=solid];
m5_85 -> m5_86  [key=0, style=solid];
m5_88 -> m5_89  [key=0, style=solid, color=red];
m5_76 -> m5_77  [key=0, style=solid, color=red];
m5_76 -> m5_21  [key=2, style=dotted, color=red];
m5_76 -> m5_78  [key=2, style=dotted, color=red];
m5_77 -> m5_75  [key=0, style=bold, color=blue];
m5_80 -> m5_81  [key=0, style=solid, color=red];
m5_80 -> m5_49  [key=2, style=dotted, color=red];
m5_81 -> m5_79  [key=0, style=bold, color=blue];
m5_83 -> m5_84  [key=0, style=solid];
m5_83 -> m5_21  [key=2, style=dotted];
m5_83 -> m5_78  [key=2, style=dotted];
m5_84 -> m5_82  [key=0, style=bold, color=blue];
m5_86 -> m5_87  [key=0, style=solid];
m5_86 -> m5_49  [key=2, style=dotted];
m5_87 -> m5_85  [key=0, style=bold, color=blue];
m5_89 -> m5_90  [key=0, style=solid, color=red];
m5_89 -> m5_21  [key=2, style=dotted, color=red];
m5_89 -> m5_78  [key=2, style=dotted, color=red];
m5_90 -> m5_88  [key=0, style=bold, color=blue];
m5_92 -> m5_93  [key=0, style=solid];
m5_92 -> m5_21  [key=2, style=dotted];
m5_92 -> m5_78  [key=2, style=dotted];
m5_93 -> m5_91  [key=0, style=bold, color=blue];
m5_62 -> m5_63  [key=0, style=solid, color=red];
m5_63 -> m5_64  [key=0, style=solid, color=red];
m5_63 -> m5_72  [key=2, style=dotted, color=red];
m5_63 -> m5_69  [key=1, style=dashed, color=red, label=component1];
m5_64 -> m5_65  [key=0, style=solid, color=red];
m5_64 -> m5_11  [key=2, style=dotted, color=red];
m5_64 -> m5_73  [key=2, style=dotted, color=red];
m5_64 -> m5_75  [key=1, style=dashed, color=red, label="lambda expression"];
m5_64 -> m5_79  [key=1, style=dashed, color=red, label="lambda expression"];
m5_69 -> m5_70  [key=0, style=solid, color=red];
m5_69 -> m5_74  [key=2, style=dotted, color=red];
m5_69 -> m5_50  [key=2, style=dotted, color=red];
m5_69 -> m5_88  [key=1, style=dashed, color=red, label="lambda expression"];
m5_65 -> m5_66  [key=0, style=solid];
m5_65 -> m5_72  [key=2, style=dotted];
m5_65 -> m5_70  [key=1, style=dashed, color=darkseagreen4, label=component2];
m5_66 -> m5_67  [key=0, style=solid];
m5_66 -> m5_11  [key=2, style=dotted];
m5_66 -> m5_73  [key=2, style=dotted];
m5_66 -> m5_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_66 -> m5_85  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_70 -> m5_71  [key=0, style=solid];
m5_70 -> m5_74  [key=2, style=dotted];
m5_70 -> m5_50  [key=2, style=dotted];
m5_70 -> m5_91  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_67 -> m5_68  [key=0, style=solid];
m5_67 -> m5_48  [key=2, style=dotted];
m5_68 -> m5_69  [key=0, style=solid, color=red];
m5_68 -> m5_49  [key=2, style=dotted];
m5_71 -> m5_62  [key=0, style=bold, color=blue];
m5_42 -> m5_43  [key=0, style=solid];
m5_43 -> m5_44  [key=0, style=solid];
m5_43 -> m5_48  [key=2, style=dotted];
m5_44 -> m5_45  [key=0, style=solid];
m5_44 -> m5_49  [key=2, style=dotted];
m5_45 -> m5_46  [key=0, style=solid];
m5_45 -> m5_50  [key=2, style=dotted];
m5_45 -> m5_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_46 -> m5_47  [key=0, style=solid];
m5_46 -> m5_50  [key=2, style=dotted];
m5_46 -> m5_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_47 -> m5_42  [key=0, style=bold, color=blue];
m5_102 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_2  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_18  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_24  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_28  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_32  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_36  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_40  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_45  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_52  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_56  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_46  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_63  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_65  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_67  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_94  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m5_102 -> m5_97  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundServerFacts"];
m6_12 -> m6_13  [key=0, style=solid];
m6_12 -> m6_14  [key=0, style=solid];
m6_22 -> m6_23  [key=0, style=solid];
m6_22 -> m6_25  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_22 -> m6_22  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_22 -> m6_57  [key=2, style=dotted];
m6_22 -> m6_55  [key=2, style=dotted];
m6_22 -> m6_24  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_23 -> m6_24  [key=0, style=solid];
m6_23 -> m6_25  [key=1, style=dashed, color=darkseagreen4, label=onJobCompleted];
m6_23 -> m6_45  [key=2, style=dotted];
m6_25 -> m6_26  [key=0, style=solid];
m6_25 -> m6_27  [key=2, style=dotted];
m6_25 -> m6_28  [key=2, style=dotted];
m6_25 -> m6_45  [key=2, style=dotted];
m6_24 -> m6_25  [key=0, style=solid];
m6_24 -> m6_26  [key=0, style=solid];
m6_24 -> m6_27  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_24 -> m6_24  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_26 -> m6_22  [key=0, style=bold, color=blue];
m6_26 -> m6_27  [key=0, style=solid];
m6_26 -> m6_45  [key=2, style=dotted];
m6_28 -> m6_29  [key=0, style=solid];
m6_28 -> m6_45  [key=2, style=dotted];
m6_0 -> m6_1  [key=0, style=solid];
m6_0 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label=int];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_9  [key=2, style=dotted];
m6_1 -> m6_45  [key=2, style=dotted];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_8  [key=0, style=solid];
m6_4 -> m6_47  [key=2, style=dotted];
m6_4 -> m6_9  [key=1, style=dashed, color=darkseagreen4, label=from];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_10  [key=2, style=dotted];
m6_2 -> m6_11  [key=2, style=dotted];
m6_2 -> m6_46  [key=2, style=dotted];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_7  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_7 -> m6_4  [key=0, style=solid];
m6_7 -> m6_7  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_7 -> m6_8  [key=0, style=solid];
m6_5 -> m6_6  [key=0, style=solid, color=green];
m6_5 -> m6_12  [key=2, style=dotted];
m6_5 -> m6_47  [key=2, style=dotted];
m6_5 -> m6_9  [key=1, style=dashed, color=darkseagreen4, label=perPage];
m6_6 -> m6_7  [key=0, style=solid, color=green];
m6_6 -> n49  [key=2, style=dotted];
m6_8 -> m6_0  [key=0, style=bold, color=blue];
m6_8 -> m6_9  [key=0, style=solid];
m6_8 -> m6_48  [key=2, style=dotted];
m6_8 -> m6_10  [key=1, style=dashed, color=darkseagreen4, label=monitor];
m6_11 -> m6_12  [key=0, style=solid];
m6_11 -> m6_45  [key=2, style=dotted];
m6_48 -> m6_48  [key=3, color=darkorchid, style=bold, label="Local variable int queueIndex"];
m6_18 -> m6_19  [key=0, style=solid];
m6_18 -> m6_18  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_18 -> m6_56  [key=2, style=dotted];
m6_18 -> m6_20  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_19 -> m6_20  [key=0, style=solid];
m6_19 -> m6_21  [key=2, style=dotted];
m6_19 -> m6_45  [key=2, style=dotted];
m6_20 -> m6_18  [key=0, style=bold, color=blue];
m6_20 -> m6_20  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_20 -> m6_21  [key=0, style=solid];
m6_20 -> m6_51  [key=2, style=dotted];
m6_20 -> m6_56  [key=2, style=dotted];
m6_20 -> m6_22  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_27 -> m6_27  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_27 -> m6_28  [key=0, style=solid];
m6_27 -> m6_58  [key=2, style=dotted];
m6_27 -> m6_56  [key=2, style=dotted];
m6_27 -> m6_29  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_9 -> m6_10  [key=0, style=solid];
m6_9 -> m6_49  [key=2, style=dotted];
m6_9 -> m6_50  [key=2, style=dotted];
m6_9 -> m6_51  [key=2, style=dotted];
m6_9 -> m6_12  [key=1, style=dashed, color=darkseagreen4, label=pager];
m6_9 -> m6_14  [key=1, style=dashed, color=darkseagreen4, label=pager];
m6_9 -> m6_43  [key=1, style=dashed, color=darkseagreen4, label=pager];
m6_13 -> m6_44  [key=0, style=solid];
m6_13 -> m6_45  [key=2, style=dotted];
m6_14 -> m6_15  [key=0, style=solid];
m6_14 -> m6_53  [key=2, style=dotted];
m6_14 -> m6_54  [key=2, style=dotted];
m6_14 -> m6_55  [key=2, style=dotted];
m6_15 -> m6_16  [key=0, style=solid];
m6_15 -> m6_45  [key=2, style=dotted];
m6_15 -> m6_17  [key=2, style=dotted];
m6_15 -> m6_15  [key=3, color=darkorchid, style=bold, label="Field variable int NumberOfRecordsInSinglePass"];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_45  [key=2, style=dotted];
m6_21 -> m6_22  [key=0, style=solid];
m6_21 -> m6_45  [key=2, style=dotted];
m6_29 -> m6_29  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_29 -> m6_30  [key=0, style=solid];
m6_29 -> m6_56  [key=2, style=dotted];
m6_29 -> m6_31  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_29 -> m6_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.JobDispatcherPool"];
m6_29 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.JobDispatcherPool"];
m6_29 -> m6_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.JobDispatcherPool"];
m6_29 -> m6_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.JobDispatcherPool"];
m6_29 -> m6_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.JobDispatcherPool"];
m6_29 -> m6_19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.JobDispatcherPool"];
m6_29 -> m6_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.JobDispatcherPool"];
m6_29 -> m6_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.JobDispatcherPool"];
m6_30 -> m6_31  [key=0, style=solid];
m6_30 -> m6_45  [key=2, style=dotted];
m6_31 -> m6_31  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_31 -> m6_32  [key=0, style=solid];
m6_31 -> m6_59  [key=2, style=dotted];
m6_31 -> m6_55  [key=2, style=dotted];
m6_31 -> m6_33  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_32 -> m6_33  [key=0, style=solid];
m6_32 -> m6_45  [key=2, style=dotted];
m6_33 -> m6_33  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_33 -> m6_34  [key=0, style=solid];
m6_33 -> m6_60  [key=2, style=dotted];
m6_33 -> m6_56  [key=2, style=dotted];
m6_33 -> m6_35  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_34 -> m6_35  [key=0, style=solid];
m6_34 -> m6_45  [key=2, style=dotted];
m6_35 -> m6_35  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_35 -> m6_36  [key=0, style=solid];
m6_35 -> m6_61  [key=2, style=dotted];
m6_35 -> m6_56  [key=2, style=dotted];
m6_35 -> m6_37  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_36 -> m6_37  [key=0, style=solid];
m6_36 -> m6_45  [key=2, style=dotted];
m6_38 -> m6_39  [key=0, style=solid];
m6_38 -> m6_45  [key=2, style=dotted];
m6_39 -> m6_39  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_39 -> m6_40  [key=0, style=solid];
m6_39 -> m6_51  [key=2, style=dotted];
m6_39 -> m6_56  [key=2, style=dotted];
m6_40 -> m6_41  [key=0, style=solid];
m6_40 -> m6_45  [key=2, style=dotted];
m6_41 -> m6_16  [key=0, style=solid];
m6_41 -> m6_45  [key=2, style=dotted];
m6_42 -> m6_43  [key=0, style=solid];
m6_42 -> m6_45  [key=2, style=dotted];
m6_43 -> m6_44  [key=0, style=solid];
m6_43 -> m6_62  [key=2, style=dotted];
m6_43 -> m6_54  [key=2, style=dotted];
m6_43 -> m6_55  [key=2, style=dotted];
m6_10 -> m6_11  [key=0, style=solid];
m6_10 -> m6_52  [key=2, style=dotted];
m6_10 -> m6_16  [key=1, style=dashed, color=darkseagreen4, label=scheduledJobs];
m6_16 -> m6_17  [key=0, style=solid];
m6_16 -> m6_18  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_16 -> m6_42  [key=0, style=solid];
m6_16 -> m6_14  [key=0, style=bold, color=blue];
m6_37 -> m6_38  [key=0, style=solid];
m6_37 -> m6_39  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_37 -> m6_41  [key=0, style=solid];
m6_37 -> m6_37  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_44 -> m6_0  [key=0, style=bold, color=blue];
m6_63 -> m6_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_18  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_22  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_33  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_38  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m6_63 -> m6_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ScheduledJobsPage"];
m7_5 -> m7_6  [key=0, style=solid];
m7_6 -> m7_7  [key=0, style=solid];
m7_6 -> m7_8  [key=2, style=dotted];
m7_6 -> m7_4  [key=2, style=dotted];
m7_7 -> m7_5  [key=0, style=bold, color=blue];
m7_7 -> m7_2  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=2, style=dotted];
m7_1 -> m7_4  [key=2, style=dotted];
m7_2 -> m7_0  [key=0, style=bold, color=blue];
m7_2 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
m7_2 -> m7_6  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m7_2 -> m7_3  [key=0, style=solid];
m7_17 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m7_17 -> m7_18  [key=0, style=solid];
m7_17 -> m7_17  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m7_17 -> m7_26  [key=2, style=dotted];
m7_23 -> m7_24  [key=0, style=solid];
m7_23 -> m7_3  [key=2, style=dotted];
m7_23 -> m7_26  [key=2, style=dotted];
m7_35 -> m7_36  [key=0, style=solid, color=green];
m7_36 -> m7_37  [key=0, style=solid, color=green];
m7_36 -> m7_38  [key=2, style=dotted, color=green];
m7_36 -> m7_39  [key=2, style=dotted, color=green];
m7_37 -> m7_35  [key=0, style=bold, color=blue];
m7_19 -> m7_20  [key=0, style=solid];
m7_19 -> m7_3  [key=2, style=dotted];
m7_19 -> m7_21  [key=2, style=dotted];
m7_19 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m7_19 -> m7_25  [key=2, style=dotted];
m7_18 -> m7_19  [key=0, style=solid];
m7_18 -> m7_10  [key=0, style=solid];
m7_18 -> m7_12  [key=0, style=solid];
m7_20 -> m7_18  [key=0, style=bold, color=blue];
m7_20 -> m7_9  [key=0, style=bold, color=blue];
m7_16 -> m7_17  [key=0, style=solid];
m7_16 -> m7_25  [key=2, style=dotted];
m7_16 -> m7_16  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m7_12 -> m7_13  [key=0, style=solid];
m7_12 -> m7_12  [key=3, color=darkorchid, style=bold, label="Local variable int removedCount"];
m7_13 -> m7_14  [key=0, style=solid];
m7_13 -> m7_3  [key=2, style=dotted];
m7_13 -> m7_15  [key=2, style=dotted];
m7_13 -> m7_16  [key=2, style=dotted];
m7_13 -> m7_17  [key=2, style=dotted];
m7_13 -> m7_22  [key=2, style=dotted];
m7_13 -> m7_34  [key=2, style=dotted];
m7_13 -> m7_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_13 -> m7_18  [key=1, style=dashed, color=darkseagreen4, label=removedCount];
m7_14 -> m7_12  [key=0, style=bold, color=blue];
m7_14 -> m7_15  [key=0, style=solid];
m7_14 -> m7_18  [key=0, style=solid];
m7_3 -> m7_5  [key=0, style=solid];
m7_3 -> m7_4  [key=0, style=solid];
m7_9 -> m7_10  [key=0, style=solid];
m7_9 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m7_9 -> m7_16  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m7_10 -> m7_11  [key=0, style=solid];
m7_10 -> m7_8  [key=2, style=dotted];
m7_10 -> m7_4  [key=2, style=dotted];
m7_10 -> m7_13  [key=1, style=dashed, color=darkseagreen4, label=table];
m7_10 -> m7_19  [key=0, style=solid];
m7_10 -> m7_29  [key=1, style=dashed, color=darkseagreen4, label=table];
m7_10 -> m7_15  [key=1, style=dashed, color=darkseagreen4, label=table];
m7_11 -> m7_9  [key=0, style=bold, color=blue];
m7_11 -> m7_12  [key=0, style=solid];
m7_11 -> m7_21  [key=2, style=dotted];
m7_15 -> m7_16  [key=0, style=solid];
m7_15 -> m7_23  [key=2, style=dotted];
m7_15 -> m7_24  [key=2, style=dotted];
m7_27 -> m7_13  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_27 -> m7_28  [key=0, style=solid];
m7_27 -> m7_29  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_22 -> m7_23  [key=0, style=solid];
m7_22 -> m7_24  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_24 -> m7_25  [key=0, style=solid];
m7_24 -> m7_27  [key=2, style=dotted];
m7_4 -> m7_7  [key=0, style=solid];
m7_4 -> n13  [key=2, style=dotted];
m7_29 -> m7_30  [key=0, style=solid];
m7_29 -> m7_32  [key=2, style=dotted];
m7_29 -> m7_33  [key=2, style=dotted];
m7_28 -> m7_29  [key=0, style=solid];
m7_28 -> m7_31  [key=2, style=dotted];
m7_30 -> m7_27  [key=0, style=bold, color=blue];
m7_25 -> m7_22  [key=0, style=bold, color=blue];
m7_40 -> m7_36  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.ExpirationManager"];
m7_40 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.ExpirationManager"];
m7_40 -> m7_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.ExpirationManager"];
m7_40 -> m7_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.ExpirationManager"];
m7_40 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.ExpirationManager"];
m7_41 -> m7_29  [key=1, style=dashed, color=darkseagreen4, label=table];
m8_2 -> m8_3  [key=0, style=solid];
m8_3 -> m8_2  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_0  [key=0, style=bold, color=blue];
m9_6 -> m9_7  [key=0, style=solid];
m9_7 -> m9_8  [key=0, style=solid];
m9_7 -> n81  [key=2, style=dotted];
m9_7 -> m9_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_8 -> m9_9  [key=0, style=solid];
m9_8 -> m9_11  [key=2, style=dotted];
m9_9 -> m9_6  [key=0, style=bold, color=blue];
m9_95 -> m9_96  [key=0, style=solid];
m9_96 -> m9_97  [key=0, style=solid];
m9_96 -> n81  [key=2, style=dotted];
m9_96 -> m9_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_97 -> m9_98  [key=0, style=solid];
m9_97 -> m9_11  [key=2, style=dotted];
m9_98 -> m9_95  [key=0, style=bold, color=blue];
m9_52 -> m9_53  [key=0, style=solid];
m9_53 -> m9_54  [key=0, style=solid];
m9_53 -> n81  [key=2, style=dotted];
m9_53 -> m9_56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_54 -> m9_55  [key=0, style=solid];
m9_54 -> m9_11  [key=2, style=dotted];
m9_55 -> m9_52  [key=0, style=bold, color=blue];
m9_41 -> m9_194  [key=0, style=solid];
m9_194 -> m9_41  [key=0, style=bold, color=blue];
m9_180 -> m9_181  [key=0, style=solid];
m9_181 -> m9_182  [key=0, style=solid];
m9_181 -> m9_150  [key=2, style=dotted];
m9_181 -> n81  [key=2, style=dotted];
m9_181 -> m9_184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_182 -> m9_183  [key=0, style=solid];
m9_182 -> m9_24  [key=2, style=dotted];
m9_182 -> m9_187  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_183 -> m9_180  [key=0, style=bold, color=blue];
m9_20 -> m9_21  [key=0, style=solid];
m9_21 -> m9_22  [key=0, style=solid, color=red];
m9_21 -> m9_15  [key=2, style=dotted];
m9_21 -> m9_25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_22 -> m9_23  [key=0, style=solid, color=red];
m9_22 -> m9_24  [key=2, style=dotted, color=red];
m9_22 -> m9_28  [key=1, style=dashed, color=red, label="lambda expression"];
m9_23 -> m9_20  [key=0, style=bold, color=blue];
m9_119 -> m9_120  [key=0, style=solid];
m9_120 -> m9_121  [key=0, style=solid];
m9_120 -> n81  [key=2, style=dotted];
m9_120 -> m9_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_121 -> m9_122  [key=0, style=solid];
m9_121 -> m9_11  [key=2, style=dotted];
m9_122 -> m9_119  [key=0, style=bold, color=blue];
m9_106 -> m9_107  [key=0, style=solid];
m9_107 -> m9_108  [key=0, style=solid];
m9_107 -> m9_67  [key=2, style=dotted];
m9_107 -> m9_110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_108 -> m9_109  [key=0, style=solid];
m9_108 -> m9_24  [key=2, style=dotted];
m9_108 -> m9_113  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_109 -> m9_106  [key=0, style=bold, color=blue];
m9_169 -> m9_170  [key=0, style=solid];
m9_170 -> m9_171  [key=0, style=solid];
m9_170 -> n81  [key=2, style=dotted];
m9_170 -> m9_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_171 -> m9_172  [key=0, style=solid];
m9_171 -> m9_11  [key=2, style=dotted];
m9_172 -> m9_169  [key=0, style=bold, color=blue];
m9_19 -> m9_193  [key=0, style=solid];
m9_193 -> m9_19  [key=0, style=bold, color=blue];
m9_190 -> m9_191  [key=0, style=solid];
m9_12 -> m9_13  [key=0, style=solid];
m9_13 -> m9_14  [key=0, style=solid];
m9_13 -> m9_15  [key=2, style=dotted];
m9_13 -> m9_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_14 -> m9_12  [key=0, style=bold, color=blue];
m9_16 -> m9_17  [key=0, style=solid];
m9_17 -> m9_18  [key=0, style=solid];
m9_17 -> m9_19  [key=2, style=dotted];
m9_18 -> m9_16  [key=0, style=bold, color=blue];
m9_25 -> m9_26  [key=0, style=solid];
m9_28 -> m9_29  [key=0, style=solid, color=red];
m9_26 -> m9_27  [key=0, style=solid];
m9_26 -> m9_19  [key=2, style=dotted];
m9_27 -> m9_25  [key=0, style=bold, color=blue];
m9_29 -> m9_30  [key=0, style=solid, color=red];
m9_29 -> n81  [key=2, style=dotted, color=red];
m9_29 -> m9_15  [key=2, style=dotted, color=red];
m9_30 -> m9_28  [key=0, style=bold, color=blue];
m9_35 -> m9_36  [key=0, style=solid, color=red];
m9_36 -> m9_37  [key=0, style=solid, color=red];
m9_36 -> n81  [key=2, style=dotted, color=red];
m9_36 -> m9_38  [key=1, style=dashed, color=red, label="lambda expression"];
m9_37 -> m9_35  [key=0, style=bold, color=blue];
m9_38 -> m9_39  [key=0, style=solid, color=red];
m9_39 -> m9_40  [key=0, style=solid, color=red];
m9_39 -> m9_41  [key=2, style=dotted, color=red];
m9_40 -> m9_38  [key=0, style=bold, color=blue];
m9_46 -> m9_47  [key=0, style=solid];
m9_49 -> m9_50  [key=0, style=solid];
m9_47 -> m9_48  [key=0, style=solid];
m9_47 -> m9_41  [key=2, style=dotted];
m9_48 -> m9_46  [key=0, style=bold, color=blue];
m9_50 -> m9_51  [key=0, style=solid];
m9_50 -> n81  [key=2, style=dotted];
m9_50 -> m9_15  [key=2, style=dotted];
m9_51 -> m9_49  [key=0, style=bold, color=blue];
m9_56 -> m9_57  [key=0, style=solid];
m9_57 -> m9_58  [key=0, style=solid];
m9_57 -> m9_59  [key=2, style=dotted];
m9_57 -> m9_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_58 -> m9_56  [key=0, style=bold, color=blue];
m9_60 -> m9_61  [key=0, style=solid];
m9_61 -> m9_62  [key=0, style=solid];
m9_61 -> m9_19  [key=2, style=dotted];
m9_62 -> m9_60  [key=0, style=bold, color=blue];
m9_68 -> m9_69  [key=0, style=solid];
m9_71 -> m9_72  [key=0, style=solid];
m9_69 -> m9_70  [key=0, style=solid];
m9_69 -> m9_19  [key=2, style=dotted];
m9_70 -> m9_68  [key=0, style=bold, color=blue];
m9_72 -> m9_73  [key=0, style=solid];
m9_72 -> n81  [key=2, style=dotted];
m9_72 -> m9_15  [key=2, style=dotted];
m9_73 -> m9_71  [key=0, style=bold, color=blue];
m9_78 -> m9_79  [key=0, style=solid];
m9_79 -> m9_80  [key=0, style=solid];
m9_79 -> m9_81  [key=2, style=dotted];
m9_79 -> m9_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_80 -> m9_78  [key=0, style=bold, color=blue];
m9_82 -> m9_83  [key=0, style=solid];
m9_83 -> m9_84  [key=0, style=solid];
m9_83 -> m9_41  [key=2, style=dotted];
m9_84 -> m9_82  [key=0, style=bold, color=blue];
m9_89 -> m9_90  [key=0, style=solid];
m9_92 -> m9_93  [key=0, style=solid];
m9_90 -> m9_91  [key=0, style=solid];
m9_90 -> m9_41  [key=2, style=dotted];
m9_91 -> m9_89  [key=0, style=bold, color=blue];
m9_93 -> m9_94  [key=0, style=solid];
m9_93 -> n81  [key=2, style=dotted];
m9_93 -> m9_15  [key=2, style=dotted];
m9_94 -> m9_92  [key=0, style=bold, color=blue];
m9_99 -> m9_100  [key=0, style=solid];
m9_100 -> m9_101  [key=0, style=solid];
m9_100 -> m9_102  [key=2, style=dotted];
m9_100 -> m9_103  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_101 -> m9_99  [key=0, style=bold, color=blue];
m9_103 -> m9_104  [key=0, style=solid];
m9_104 -> m9_105  [key=0, style=solid];
m9_104 -> m9_19  [key=2, style=dotted];
m9_105 -> m9_103  [key=0, style=bold, color=blue];
m9_110 -> m9_111  [key=0, style=solid];
m9_113 -> m9_114  [key=0, style=solid];
m9_111 -> m9_112  [key=0, style=solid];
m9_111 -> m9_19  [key=2, style=dotted];
m9_112 -> m9_110  [key=0, style=bold, color=blue];
m9_114 -> m9_115  [key=0, style=solid];
m9_114 -> n81  [key=2, style=dotted];
m9_114 -> m9_15  [key=2, style=dotted];
m9_114 -> m9_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_115 -> m9_113  [key=0, style=bold, color=blue];
m9_116 -> m9_117  [key=0, style=solid];
m9_117 -> m9_118  [key=0, style=solid];
m9_118 -> m9_116  [key=0, style=bold, color=blue];
m9_123 -> m9_124  [key=0, style=solid];
m9_124 -> m9_125  [key=0, style=solid];
m9_124 -> m9_126  [key=2, style=dotted];
m9_124 -> m9_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_125 -> m9_123  [key=0, style=bold, color=blue];
m9_127 -> m9_128  [key=0, style=solid];
m9_128 -> m9_129  [key=0, style=solid];
m9_128 -> m9_41  [key=2, style=dotted];
m9_129 -> m9_127  [key=0, style=bold, color=blue];
m9_134 -> m9_135  [key=0, style=solid];
m9_137 -> m9_138  [key=0, style=solid];
m9_135 -> m9_136  [key=0, style=solid];
m9_135 -> m9_41  [key=2, style=dotted];
m9_136 -> m9_134  [key=0, style=bold, color=blue];
m9_138 -> m9_139  [key=0, style=solid];
m9_138 -> n81  [key=2, style=dotted];
m9_138 -> m9_15  [key=2, style=dotted];
m9_138 -> m9_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_139 -> m9_137  [key=0, style=bold, color=blue];
m9_140 -> m9_141  [key=0, style=solid];
m9_141 -> m9_142  [key=0, style=solid];
m9_142 -> m9_140  [key=0, style=bold, color=blue];
m9_147 -> m9_148  [key=0, style=solid];
m9_148 -> m9_149  [key=0, style=solid];
m9_148 -> m9_150  [key=2, style=dotted];
m9_148 -> m9_151  [key=2, style=dotted];
m9_148 -> m9_152  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_149 -> m9_147  [key=0, style=bold, color=blue];
m9_152 -> m9_153  [key=0, style=solid];
m9_153 -> m9_154  [key=0, style=solid];
m9_153 -> m9_19  [key=2, style=dotted];
m9_154 -> m9_152  [key=0, style=bold, color=blue];
m9_160 -> m9_161  [key=0, style=solid];
m9_163 -> m9_164  [key=0, style=solid];
m9_161 -> m9_162  [key=0, style=solid];
m9_161 -> m9_19  [key=2, style=dotted];
m9_162 -> m9_160  [key=0, style=bold, color=blue];
m9_164 -> m9_165  [key=0, style=solid];
m9_164 -> n81  [key=2, style=dotted];
m9_164 -> m9_15  [key=2, style=dotted];
m9_164 -> m9_166  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_165 -> m9_163  [key=0, style=bold, color=blue];
m9_166 -> m9_167  [key=0, style=solid];
m9_167 -> m9_168  [key=0, style=solid];
m9_168 -> m9_166  [key=0, style=bold, color=blue];
m9_173 -> m9_174  [key=0, style=solid];
m9_174 -> m9_175  [key=0, style=solid];
m9_174 -> m9_150  [key=2, style=dotted];
m9_174 -> m9_176  [key=2, style=dotted];
m9_174 -> m9_177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_175 -> m9_173  [key=0, style=bold, color=blue];
m9_177 -> m9_178  [key=0, style=solid];
m9_178 -> m9_179  [key=0, style=solid];
m9_178 -> m9_41  [key=2, style=dotted];
m9_179 -> m9_177  [key=0, style=bold, color=blue];
m9_184 -> m9_185  [key=0, style=solid];
m9_187 -> m9_188  [key=0, style=solid];
m9_185 -> m9_186  [key=0, style=solid];
m9_185 -> m9_41  [key=2, style=dotted];
m9_186 -> m9_184  [key=0, style=bold, color=blue];
m9_188 -> m9_189  [key=0, style=solid];
m9_188 -> n81  [key=2, style=dotted];
m9_188 -> m9_15  [key=2, style=dotted];
m9_188 -> m9_190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_189 -> m9_187  [key=0, style=bold, color=blue];
m9_191 -> m9_192  [key=0, style=solid];
m9_192 -> m9_190  [key=0, style=bold, color=blue];
m9_74 -> m9_75  [key=0, style=solid];
m9_75 -> m9_76  [key=0, style=solid];
m9_75 -> n81  [key=2, style=dotted];
m9_75 -> m9_78  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_76 -> m9_77  [key=0, style=solid];
m9_76 -> m9_11  [key=2, style=dotted];
m9_77 -> m9_74  [key=0, style=bold, color=blue];
m9_85 -> m9_86  [key=0, style=solid];
m9_86 -> m9_87  [key=0, style=solid];
m9_86 -> n81  [key=2, style=dotted];
m9_86 -> m9_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_87 -> m9_88  [key=0, style=solid];
m9_87 -> m9_24  [key=2, style=dotted];
m9_87 -> m9_92  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_88 -> m9_85  [key=0, style=bold, color=blue];
m9_42 -> m9_43  [key=0, style=solid];
m9_43 -> m9_44  [key=0, style=solid];
m9_43 -> n81  [key=2, style=dotted];
m9_43 -> m9_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_44 -> m9_45  [key=0, style=solid];
m9_44 -> m9_24  [key=2, style=dotted];
m9_44 -> m9_49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_45 -> m9_42  [key=0, style=bold, color=blue];
m9_63 -> m9_64  [key=0, style=solid];
m9_64 -> m9_65  [key=0, style=solid];
m9_64 -> m9_67  [key=2, style=dotted];
m9_64 -> m9_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_65 -> m9_66  [key=0, style=solid];
m9_65 -> m9_24  [key=2, style=dotted];
m9_65 -> m9_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_66 -> m9_63  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_4  [key=2, style=dotted];
m9_2 -> m9_3  [key=0, style=solid];
m9_2 -> m9_5  [key=2, style=dotted];
m9_3 -> m9_0  [key=0, style=bold, color=blue];
m9_155 -> m9_156  [key=0, style=solid];
m9_156 -> m9_157  [key=0, style=solid];
m9_156 -> m9_150  [key=2, style=dotted];
m9_156 -> m9_159  [key=2, style=dotted];
m9_156 -> m9_160  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_157 -> m9_158  [key=0, style=solid];
m9_157 -> m9_24  [key=2, style=dotted];
m9_157 -> m9_163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_158 -> m9_155  [key=0, style=bold, color=blue];
m9_143 -> m9_144  [key=0, style=solid];
m9_144 -> m9_145  [key=0, style=solid];
m9_144 -> n81  [key=2, style=dotted];
m9_144 -> m9_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_145 -> m9_146  [key=0, style=solid];
m9_145 -> m9_11  [key=2, style=dotted];
m9_146 -> m9_143  [key=0, style=bold, color=blue];
m9_31 -> m9_32  [key=0, style=solid, color=red];
m9_32 -> m9_33  [key=0, style=solid, color=red];
m9_32 -> n81  [key=2, style=dotted, color=red];
m9_32 -> m9_35  [key=1, style=dashed, color=red, label="lambda expression"];
m9_33 -> m9_34  [key=0, style=solid, color=red];
m9_33 -> m9_11  [key=2, style=dotted, color=red];
m9_34 -> m9_31  [key=0, style=bold, color=blue];
m9_130 -> m9_131  [key=0, style=solid];
m9_131 -> m9_132  [key=0, style=solid];
m9_131 -> n81  [key=2, style=dotted];
m9_131 -> m9_134  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_132 -> m9_133  [key=0, style=solid];
m9_132 -> m9_24  [key=2, style=dotted];
m9_132 -> m9_137  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_133 -> m9_130  [key=0, style=bold, color=blue];
m9_195 -> m9_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_22  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_29  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_32  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_36  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_50  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_65  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_86  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_107  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_108  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_131  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_132  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_156  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_157  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_181  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m9_195 -> m9_182  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m11_9 -> m11_10  [key=0, style=solid];
m11_10 -> m11_11  [key=0, style=solid];
m11_10 -> m11_12  [key=2, style=dotted];
m11_10 -> m11_13  [key=2, style=dotted];
m11_11 -> m11_9  [key=0, style=bold, color=blue];
m11_0 -> m11_1  [key=0, style=solid];
m11_0 -> m11_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_0 -> m11_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_3  [key=0, style=solid];
m11_1 -> m11_7  [key=2, style=dotted];
m11_3 -> m11_4  [key=0, style=solid];
m11_5 -> m11_6  [key=0, style=solid];
m11_2 -> m11_6  [key=0, style=solid];
m11_2 -> n13  [key=2, style=dotted];
m11_4 -> m11_5  [key=0, style=solid];
m11_6 -> m11_0  [key=0, style=bold, color=blue];
m11_14 -> m11_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ProcessingState"];
m11_14 -> m11_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ProcessingState"];
m11_14 -> m11_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ProcessingState"];
m11_14 -> m11_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ProcessingState"];
m12_27 -> m12_28  [key=0, style=solid];
m12_27 -> m12_37  [key=2, style=dotted];
m12_81 -> m12_82  [key=0, style=solid];
m12_81 -> m12_83  [key=0, style=solid];
m12_81 -> m12_42  [key=2, style=dotted];
m12_31 -> m12_81  [key=0, style=solid];
m12_31 -> m12_82  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerExceptionContext"];
m12_66 -> m12_67  [key=0, style=solid];
m12_66 -> m12_73  [key=1, style=dashed, color=darkseagreen4, label=wasError];
m12_83 -> m12_31  [key=0, style=bold, color=blue];
m12_38 -> m12_39  [key=0, style=solid, color=green];
m12_38 -> m12_42  [key=2, style=dotted];
m12_38 -> m12_43  [key=2, style=dotted];
m12_38 -> m12_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_39 -> m12_40  [key=0, style=solid, color=green];
m12_39 -> m12_41  [key=2, style=dotted, color=green];
m12_39 -> m12_44  [key=2, style=dotted];
m12_40 -> m12_38  [key=0, style=bold, color=blue];
m12_40 -> m12_29  [key=0, style=bold, color=blue];
m12_42 -> m12_43  [key=0, style=solid];
m12_42 -> m12_65  [key=2, style=dotted];
m12_28 -> m12_32  [key=0, style=solid];
m12_28 -> m12_16  [key=0, style=bold, color=blue];
m12_32 -> m12_33  [key=0, style=solid];
m12_32 -> m12_34  [key=2, style=dotted];
m12_32 -> m12_35  [key=2, style=dotted];
m12_33 -> m12_28  [key=0, style=bold, color=blue];
m12_75 -> m12_76  [key=0, style=solid];
m12_70 -> m12_76  [key=0, style=solid];
m12_70 -> m12_78  [key=2, style=dotted];
m12_2 -> m12_3  [key=0, style=solid];
m12_2 -> m12_4  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<object>"];
m12_2 -> m12_7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<object>"];
m12_3 -> m12_4  [key=0, style=solid];
m12_3 -> m12_5  [key=0, style=solid];
m12_4 -> m12_5  [key=0, style=solid];
m12_4 -> m12_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.IJobCreationProcess"];
m12_4 -> m12_12  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>"];
m12_4 -> m12_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.IThrottler"];
m12_4 -> m12_7  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>"];
m12_4 -> m12_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.IThrottler"];
m12_5 -> m12_2  [key=0, style=bold, color=blue];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_7  [key=0, style=solid];
m12_73 -> m12_74  [key=0, style=solid];
m12_73 -> m12_75  [key=0, style=solid];
m12_82 -> m12_81  [key=0, style=solid];
m12_82 -> m12_84  [key=2, style=dotted];
m12_68 -> m12_69  [key=0, style=solid];
m12_68 -> m12_71  [key=0, style=solid];
m12_68 -> m12_80  [key=2, style=dotted];
m12_29 -> m12_36  [key=0, style=solid];
m12_29 -> m12_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformContext"];
m12_29 -> m12_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.IJobPerformer"];
m12_29 -> m12_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformContext"];
m12_29 -> m12_38  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<HangFire.Server.IServerFilter>"];
m12_36 -> m12_37  [key=0, style=solid];
m12_36 -> m12_41  [key=2, style=dotted];
m12_36 -> m12_38  [key=1, style=dashed, color=darkseagreen4, label=preContext];
m12_36 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label=preContext];
m12_37 -> m12_38  [key=0, style=solid];
m12_56 -> m12_57  [key=0, style=solid];
m12_56 -> m12_60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformingContext"];
m12_56 -> m12_61  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformingContext"];
m12_56 -> m12_64  [key=1, style=dashed, color=darkseagreen4, label="System.Func<HangFire.Server.PerformedContext>"];
m12_56 -> m12_67  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformingContext"];
m12_56 -> m12_68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.IServerFilter"];
m12_56 -> m12_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.IServerFilter"];
m12_56 -> m12_58  [key=0, style=solid];
m12_56 -> m12_76  [key=2, style=dotted];
m12_57 -> m12_58  [key=0, style=solid];
m12_57 -> m12_60  [key=0, style=solid];
m12_57 -> m12_77  [key=2, style=dotted];
m12_57 -> m12_79  [key=2, style=dotted];
m12_60 -> m12_61  [key=0, style=solid];
m12_60 -> m12_62  [key=0, style=solid];
m12_60 -> m12_80  [key=2, style=dotted];
m12_60 -> m12_81  [key=2, style=dotted];
m12_61 -> m12_76  [key=0, style=solid];
m12_61 -> m12_50  [key=2, style=dotted];
m12_61 -> m12_33  [key=2, style=dotted];
m12_61 -> m12_64  [key=0, style=solid];
m12_61 -> m12_62  [key=0, style=solid];
m12_61 -> m12_82  [key=2, style=dotted];
m12_64 -> m12_65  [key=0, style=solid];
m12_64 -> m12_73  [key=0, style=solid];
m12_64 -> m12_79  [key=2, style=dotted];
m12_64 -> m12_35  [key=0, style=bold, color=blue];
m12_67 -> m12_68  [key=0, style=solid];
m12_67 -> m12_50  [key=2, style=dotted];
m12_67 -> m12_71  [key=1, style=dashed, color=darkseagreen4, label=postContext];
m12_67 -> m12_74  [key=1, style=dashed, color=darkseagreen4, label=postContext];
m12_67 -> m12_75  [key=1, style=dashed, color=darkseagreen4, label=postContext];
m12_74 -> m12_75  [key=0, style=solid];
m12_74 -> m12_80  [key=2, style=dotted];
m12_58 -> m12_59  [key=0, style=solid];
m12_58 -> m12_80  [key=2, style=dotted];
m12_58 -> m12_81  [key=2, style=dotted];
m12_59 -> m12_76  [key=0, style=solid];
m12_59 -> m12_78  [key=2, style=dotted];
m12_59 -> m12_60  [key=0, style=solid];
m12_59 -> m12_81  [key=2, style=dotted];
m12_62 -> m12_63  [key=0, style=solid];
m12_63 -> m12_64  [key=0, style=solid];
m12_63 -> m12_83  [key=2, style=dotted];
m12_63 -> m12_84  [key=2, style=dotted];
m12_65 -> m12_66  [key=0, style=solid];
m12_71 -> m12_72  [key=0, style=solid];
m12_71 -> m12_73  [key=0, style=solid];
m12_69 -> m12_70  [key=0, style=solid];
m12_72 -> m12_76  [key=0, style=solid];
m12_76 -> m12_56  [key=0, style=bold, color=blue];
m12_35 -> m12_42  [key=0, style=solid];
m12_35 -> m12_44  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.Dictionary<string, string>"];
m12_35 -> m12_46  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.Dictionary<string, string>"];
m12_35 -> m12_48  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.Dictionary<string, string>"];
m12_35 -> m12_52  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.Dictionary<string, string>"];
m12_35 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.Dictionary<string, string>"];
m12_35 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m12_35 -> m12_57  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_35 -> m12_61  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Storage.IStorageConnection"];
m12_35 -> m12_63  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_44 -> m12_45  [key=0, style=solid];
m12_43 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label=job];
m12_43 -> m12_44  [key=0, style=solid];
m12_43 -> m12_66  [key=2, style=dotted];
m12_50 -> m12_51  [key=0, style=solid];
m12_50 -> m12_60  [key=0, style=solid];
m12_50 -> m12_73  [key=2, style=dotted];
m12_50 -> m12_74  [key=2, style=dotted];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_0  [key=0, style=bold, color=blue];
m12_49 -> m12_50  [key=0, style=solid];
m12_49 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label=changedFields];
m12_49 -> m12_60  [key=1, style=dashed, color=darkseagreen4, label=changedFields];
m12_49 -> m12_59  [key=1, style=dashed, color=darkseagreen4, label=changedFields];
m12_49 -> m12_61  [key=1, style=dashed, color=darkseagreen4, label=changedFields];
m12_49 -> m12_72  [key=2, style=dotted];
m12_53 -> m12_54  [key=0, style=solid];
m12_7 -> m12_8  [key=0, style=solid];
m12_7 -> m12_9  [key=2, style=dotted];
m12_7 -> m12_10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_6 -> m12_7  [key=0, style=solid];
m12_6 -> m12_14  [key=0, style=solid];
m12_6 -> n13  [key=2, style=dotted];
m12_8 -> m12_6  [key=0, style=bold, color=blue];
m12_8 -> m12_14  [key=0, style=solid];
m12_8 -> n13  [key=2, style=dotted];
m12_10 -> m12_11  [key=0, style=solid];
m12_10 -> m12_14  [key=0, style=solid];
m12_10 -> n13  [key=2, style=dotted];
m12_11 -> m12_12  [key=0, style=solid];
m12_11 -> m12_13  [key=2, style=dotted];
m12_12 -> m12_10  [key=0, style=bold, color=blue];
m12_12 -> m12_13  [key=0, style=solid];
m12_46 -> m12_47  [key=0, style=solid];
m12_46 -> m12_49  [key=2, style=dotted];
m12_46 -> m12_68  [key=2, style=dotted];
m12_46 -> m12_69  [key=2, style=dotted];
m12_47 -> m12_48  [key=0, style=solid];
m12_47 -> m12_50  [key=2, style=dotted];
m12_47 -> m12_70  [key=2, style=dotted];
m12_47 -> m12_57  [key=1, style=dashed, color=darkseagreen4, label=instant];
m12_47 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label=instant];
m12_47 -> m12_60  [key=1, style=dashed, color=darkseagreen4, label=instant];
m12_54 -> m12_55  [key=0, style=solid];
m12_54 -> m12_56  [key=2, style=dotted];
m12_54 -> m12_77  [key=2, style=dotted];
m12_51 -> m12_52  [key=0, style=solid];
m12_51 -> m12_38  [key=1, style=dashed, color=darkseagreen4, label="System.Func<HangFire.Server.PerformedContext>"];
m12_51 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_51 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_51 -> m12_75  [key=2, style=dotted];
m12_45 -> m12_46  [key=0, style=solid];
m12_45 -> m12_47  [key=1, style=dashed, color=darkseagreen4, label=cronSchedule];
m12_45 -> m12_67  [key=2, style=dotted];
m12_48 -> m12_45  [key=0, style=bold, color=blue];
m12_48 -> m12_49  [key=0, style=solid];
m12_48 -> m12_68  [key=2, style=dotted];
m12_48 -> m12_71  [key=2, style=dotted];
m12_48 -> m12_50  [key=1, style=dashed, color=darkseagreen4, label=lastExecutionTime];
m12_52 -> m12_51  [key=0, style=bold, color=blue];
m12_52 -> m12_54  [key=0, style=solid];
m12_52 -> m12_53  [key=0, style=solid];
m12_52 -> m12_68  [key=2, style=dotted];
m12_52 -> m12_76  [key=2, style=dotted];
m12_55 -> m12_53  [key=0, style=bold, color=blue];
m12_55 -> m12_56  [key=0, style=solid];
m12_55 -> m12_78  [key=2, style=dotted];
m12_55 -> m12_59  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_13 -> m12_14  [key=0, style=solid];
m12_16 -> m12_17  [key=0, style=solid];
m12_16 -> m12_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m12_16 -> m12_27  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m12_16 -> m12_18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m12_16 -> m12_26  [key=0, style=solid];
m12_17 -> m12_18  [key=0, style=solid];
m12_17 -> m12_29  [key=2, style=dotted];
m12_17 -> m12_19  [key=0, style=solid];
m12_24 -> m12_25  [key=0, style=solid];
m12_24 -> m12_21  [key=0, style=solid];
m12_24 -> m12_35  [key=2, style=dotted];
m12_24 -> m12_26  [key=0, style=solid];
m12_18 -> m12_24  [key=1, style=dashed, color=darkseagreen4, label=connection];
m12_18 -> m12_19  [key=0, style=solid];
m12_18 -> m12_30  [key=2, style=dotted];
m12_18 -> m12_20  [key=1, style=dashed, color=darkseagreen4, label=connection];
m12_18 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label=connection];
m12_18 -> m12_26  [key=0, style=solid];
m12_18 -> m12_27  [key=2, style=dotted];
m12_22 -> m12_24  [key=1, style=dashed, color=darkseagreen4, label=exceptionContext];
m12_22 -> m12_23  [key=0, style=solid];
m12_22 -> m12_33  [key=2, style=dotted];
m12_22 -> m12_34  [key=2, style=dotted];
m12_22 -> m12_30  [key=2, style=dotted];
m12_21 -> m12_24  [key=1, style=dashed, color=darkseagreen4, label=recurringJobId];
m12_21 -> m12_27  [key=0, style=solid];
m12_21 -> m12_22  [key=0, style=solid];
m12_21 -> m12_26  [key=1, style=dashed, color=darkseagreen4, label=recurringJobId];
m12_23 -> m12_24  [key=0, style=solid];
m12_23 -> m12_21  [key=0, style=solid];
m12_23 -> m12_31  [key=2, style=dotted];
m12_25 -> m12_26  [key=0, style=solid];
m12_19 -> m12_20  [key=0, style=solid];
m12_19 -> m12_31  [key=2, style=dotted];
m12_19 -> m12_28  [key=2, style=dotted];
m12_19 -> m12_23  [key=1, style=dashed, color=darkseagreen4, label=filterInfo];
m12_20 -> m12_21  [key=0, style=solid];
m12_20 -> m12_32  [key=2, style=dotted];
m12_20 -> m12_26  [key=0, style=solid];
m12_20 -> m12_29  [key=2, style=dotted];
m12_26 -> m12_21  [key=0, style=solid];
m12_26 -> m12_33  [key=2, style=dotted];
m12_26 -> m12_36  [key=2, style=dotted];
m12_26 -> m12_14  [key=0, style=bold, color=blue];
m12_9 -> m12_11  [key=0, style=solid];
m12_9 -> m12_10  [key=0, style=solid];
m12_14 -> m12_15  [key=0, style=solid];
m12_14 -> m12_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.IJobPerformer"];
m12_14 -> m12_19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformContext"];
m12_14 -> m12_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformContext"];
m12_14 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformContext"];
m12_14 -> m12_4  [key=0, style=bold, color=blue];
m12_15 -> m12_16  [key=0, style=solid];
m12_15 -> m12_17  [key=0, style=solid];
m12_85 -> m12_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.JobPerformanceProcess"];
m12_85 -> m12_19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.JobPerformanceProcess"];
m12_85 -> m12_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.JobPerformanceProcess"];
m12_85 -> m12_39  [key=1, style=dashed, color=green, label="Hangfire.Server.RecurringJobScheduler"];
m12_85 -> m12_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m12_85 -> m12_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m12_85 -> m12_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m12_85 -> m12_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m12_85 -> m12_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m12_85 -> m12_27  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m12_85 -> m12_47  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m12_85 -> m12_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m12_86 -> m12_7  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<object>"];
m12_87 -> m12_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.IJobPerformer"];
m12_88 -> m12_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformContext"];
m12_89 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label=preContext];
m12_90 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label="System.Func<HangFire.Server.PerformedContext>"];
m12_91 -> m12_54  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.IServerFilter"];
m13_6 -> m13_7  [key=0, style=solid];
m13_7 -> m13_6  [key=0, style=bold, color=blue];
m13_4 -> m13_5  [key=0, style=solid];
m13_5 -> m13_4  [key=0, style=bold, color=blue];
m13_0 -> m13_1  [key=0, style=solid];
m13_1 -> m13_0  [key=0, style=bold, color=blue];
m13_22 -> m13_23  [key=0, style=solid];
m13_23 -> m13_22  [key=0, style=bold, color=blue];
m13_26 -> m13_27  [key=0, style=solid];
m13_27 -> m13_26  [key=0, style=bold, color=blue];
m13_2 -> m13_3  [key=0, style=solid];
m13_3 -> m13_2  [key=0, style=bold, color=blue];
m13_18 -> m13_19  [key=0, style=solid];
m13_19 -> m13_18  [key=0, style=bold, color=blue];
m13_28 -> m13_29  [key=0, style=solid];
m13_29 -> m13_28  [key=0, style=bold, color=blue];
m13_8 -> m13_9  [key=0, style=solid];
m13_9 -> m13_8  [key=0, style=bold, color=blue];
m13_30 -> m13_31  [key=0, style=solid];
m13_31 -> m13_30  [key=0, style=bold, color=blue];
m13_10 -> m13_11  [key=0, style=solid];
m13_11 -> m13_10  [key=0, style=bold, color=blue];
m13_20 -> m13_21  [key=0, style=solid];
m13_21 -> m13_20  [key=0, style=bold, color=blue];
m13_14 -> m13_15  [key=0, style=solid];
m13_15 -> m13_14  [key=0, style=bold, color=blue];
m13_12 -> m13_13  [key=0, style=solid];
m13_13 -> m13_12  [key=0, style=bold, color=blue];
m13_16 -> m13_17  [key=0, style=solid];
m13_17 -> m13_16  [key=0, style=bold, color=blue];
m13_24 -> m13_25  [key=0, style=solid];
m13_25 -> m13_24  [key=0, style=bold, color=blue];
m14_14 -> m14_15  [key=0, style=solid];
m14_15 -> m14_16  [key=0, style=solid];
m14_15 -> m14_10  [key=2, style=dotted];
m14_15 -> m14_20  [key=1, style=dashed, color=darkseagreen4, label=serializedData];
m14_16 -> m14_17  [key=0, style=solid];
m14_16 -> n81  [key=2, style=dotted];
m14_16 -> m14_19  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m14_17 -> m14_14  [key=0, style=bold, color=blue];
m14_29 -> m14_30  [key=0, style=solid];
m14_30 -> m14_31  [key=0, style=solid];
m14_30 -> m14_10  [key=2, style=dotted];
m14_30 -> m14_11  [key=2, style=dotted];
m14_30 -> m14_34  [key=1, style=dashed, color=darkseagreen4, label=serializedData];
m14_31 -> m14_32  [key=0, style=solid];
m14_31 -> n81  [key=2, style=dotted];
m14_31 -> m14_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m14_32 -> m14_29  [key=0, style=bold, color=blue];
m14_22 -> m14_23  [key=0, style=solid, color=red];
m14_23 -> m14_24  [key=0, style=solid, color=red];
m14_23 -> m14_10  [key=2, style=dotted, color=red];
m14_23 -> m14_27  [key=1, style=dashed, color=red, label=serializedData];
m14_24 -> m14_25  [key=0, style=solid];
m14_24 -> n81  [key=2, style=dotted];
m14_24 -> m14_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m14_25 -> m14_22  [key=0, style=bold, color=blue];
m14_36 -> m14_37  [key=0, style=solid];
m14_37 -> m14_38  [key=0, style=solid];
m14_37 -> m14_44  [key=2, style=dotted];
m14_37 -> m14_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m14_38 -> m14_39  [key=0, style=solid];
m14_38 -> m14_45  [key=2, style=dotted];
m14_38 -> m14_40  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m14_38 -> m14_41  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m14_38 -> m14_42  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m14_39 -> m14_40  [key=0, style=solid];
m14_39 -> m14_13  [key=2, style=dotted];
m14_40 -> m14_41  [key=0, style=solid];
m14_40 -> m14_13  [key=2, style=dotted];
m14_41 -> m14_42  [key=0, style=solid];
m14_41 -> m14_11  [key=2, style=dotted];
m14_41 -> m14_13  [key=2, style=dotted];
m14_42 -> m14_43  [key=0, style=solid];
m14_42 -> m14_11  [key=2, style=dotted];
m14_42 -> m14_13  [key=2, style=dotted];
m14_43 -> m14_36  [key=0, style=bold, color=blue];
m14_49 -> m14_50  [key=0, style=solid];
m14_50 -> m14_49  [key=0, style=bold, color=blue];
m14_46 -> m14_47  [key=0, style=solid];
m14_20 -> m14_21  [key=0, style=solid];
m14_20 -> m14_12  [key=2, style=dotted];
m14_19 -> m14_20  [key=0, style=solid];
m14_21 -> m14_19  [key=0, style=bold, color=blue];
m14_27 -> m14_28  [key=0, style=solid];
m14_27 -> m14_12  [key=2, style=dotted];
m14_26 -> m14_27  [key=0, style=solid];
m14_28 -> m14_26  [key=0, style=bold, color=blue];
m14_34 -> m14_35  [key=0, style=solid];
m14_34 -> m14_12  [key=2, style=dotted];
m14_33 -> m14_34  [key=0, style=solid];
m14_35 -> m14_33  [key=0, style=bold, color=blue];
m14_47 -> m14_48  [key=0, style=solid];
m14_47 -> m14_49  [key=2, style=dotted];
m14_48 -> m14_46  [key=0, style=bold, color=blue];
m14_0 -> m14_1  [key=0, style=solid];
m14_1 -> m14_2  [key=0, style=solid];
m14_1 -> m14_3  [key=1, style=dashed, color=darkseagreen4, label=type];
m14_1 -> m14_5  [key=1, style=dashed, color=red, label=type];
m14_2 -> m14_3  [key=0, style=solid];
m14_2 -> m14_9  [key=2, style=dotted];
m14_2 -> m14_6  [key=1, style=dashed, color=darkseagreen4, label=methodInfo];
m14_3 -> m14_4  [key=0, style=solid];
m14_3 -> m14_10  [key=2, style=dotted];
m14_3 -> m14_11  [key=2, style=dotted];
m14_5 -> m14_6  [key=0, style=solid, color=red];
m14_5 -> m14_13  [key=2, style=dotted, color=red];
m14_6 -> m14_7  [key=0, style=solid];
m14_6 -> m14_13  [key=2, style=dotted];
m14_4 -> m14_5  [key=0, style=solid, color=red];
m14_4 -> m14_12  [key=2, style=dotted];
m14_4 -> m14_6  [key=1, style=dashed, color=darkseagreen4, label=job];
m14_4 -> m14_7  [key=1, style=dashed, color=darkseagreen4, label=job];
m14_7 -> m14_8  [key=0, style=solid];
m14_7 -> m14_13  [key=2, style=dotted];
m14_8 -> m14_0  [key=0, style=bold, color=blue];
m14_51 -> m14_20  [key=1, style=dashed, color=darkseagreen4, label=serializedData];
m14_52 -> m14_27  [key=1, style=dashed, color=darkseagreen4, label=serializedData];
m14_53 -> m14_34  [key=1, style=dashed, color=darkseagreen4, label=serializedData];
m15_18 -> m15_15  [key=0, style=bold, color=blue];
m15_60 -> m15_61  [key=0, style=solid];
m15_61 -> m15_62  [key=0, style=solid];
m15_61 -> m15_65  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m15_61 -> m15_66  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m15_62 -> m15_63  [key=0, style=solid];
m15_62 -> m15_36  [key=2, style=dotted];
m15_62 -> m15_64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_63 -> m15_60  [key=0, style=bold, color=blue];
m15_153 -> m15_154  [key=0, style=solid];
m15_154 -> m15_155  [key=0, style=solid];
m15_154 -> m15_36  [key=2, style=dotted];
m15_154 -> m15_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_155 -> m15_153  [key=0, style=bold, color=blue];
m15_212 -> m15_213  [key=0, style=solid];
m15_213 -> m15_214  [key=0, style=solid];
m15_213 -> m15_36  [key=2, style=dotted];
m15_213 -> m15_215  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_214 -> m15_212  [key=0, style=bold, color=blue];
m15_419 -> m15_420  [key=0, style=solid];
m15_420 -> m15_421  [key=0, style=solid];
m15_420 -> m15_36  [key=2, style=dotted];
m15_420 -> m15_422  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_421 -> m15_419  [key=0, style=bold, color=blue];
m15_267 -> m15_268  [key=0, style=solid];
m15_268 -> m15_269  [key=0, style=solid];
m15_268 -> m15_36  [key=2, style=dotted];
m15_268 -> m15_270  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_269 -> m15_267  [key=0, style=bold, color=blue];
m15_368 -> m15_369  [key=0, style=solid];
m15_369 -> m15_370  [key=0, style=solid];
m15_369 -> m15_36  [key=2, style=dotted];
m15_369 -> m15_371  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_370 -> m15_368  [key=0, style=bold, color=blue];
m15_48 -> m15_16  [key=2, style=dotted];
m15_48 -> m15_49  [key=0, style=solid];
m15_331 -> m15_332  [key=0, style=solid];
m15_332 -> m15_333  [key=0, style=solid];
m15_332 -> m15_36  [key=2, style=dotted];
m15_332 -> m15_334  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_333 -> m15_331  [key=0, style=bold, color=blue];
m15_305 -> m15_306  [key=0, style=solid];
m15_306 -> m15_307  [key=0, style=solid];
m15_306 -> m15_36  [key=2, style=dotted];
m15_306 -> m15_308  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_307 -> m15_305  [key=0, style=bold, color=blue];
m15_431 -> m15_432  [key=0, style=solid];
m15_432 -> m15_433  [key=0, style=solid];
m15_432 -> m15_36  [key=2, style=dotted];
m15_432 -> m15_434  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_433 -> m15_431  [key=0, style=bold, color=blue];
m15_49 -> m15_505  [key=0, style=solid];
m15_49 -> m15_506  [key=1, style=dashed, color=darkseagreen4, label="System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>"];
m15_49 -> m15_50  [key=0, style=solid];
m15_49 -> m15_53  [key=2, style=dotted];
m15_505 -> m15_506  [key=0, style=solid];
m15_505 -> m15_23  [key=2, style=dotted];
m15_505 -> m15_507  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m15_506 -> m15_507  [key=0, style=solid];
m15_506 -> m15_504  [key=2, style=dotted];
m15_507 -> m15_508  [key=0, style=solid];
m15_507 -> m15_509  [key=2, style=dotted];
m15_508 -> m15_49  [key=0, style=bold, color=blue];
m15_407 -> m15_408  [key=0, style=solid];
m15_408 -> m15_409  [key=0, style=solid];
m15_408 -> m15_36  [key=2, style=dotted];
m15_408 -> m15_410  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_409 -> m15_407  [key=0, style=bold, color=blue];
m15_15 -> m15_43  [key=0, style=solid];
m15_15 -> m15_48  [key=1, style=dashed, color=darkseagreen4, label=IApplicationBuilder];
m15_15 -> m15_16  [key=0, style=solid];
m15_43 -> m15_16  [key=2, style=dotted];
m15_43 -> m15_44  [key=0, style=solid];
m15_43 -> m15_49  [key=1, style=dashed, color=darkseagreen4, label=configuration];
m15_43 -> m15_50  [key=2, style=dotted];
m15_44 -> m15_45  [key=0, style=solid];
m15_44 -> m15_46  [key=0, style=solid];
m15_44 -> m15_54  [key=2, style=dotted];
m15_46 -> m15_48  [key=0, style=solid];
m15_46 -> m15_47  [key=0, style=solid];
m15_46 -> m15_52  [key=2, style=dotted];
m15_45 -> m15_50  [key=0, style=solid];
m15_45 -> m15_51  [key=2, style=dotted];
m15_45 -> m15_37  [key=0, style=bold, color=blue];
m15_47 -> m15_50  [key=0, style=solid];
m15_50 -> m15_15  [key=0, style=bold, color=blue];
m15_31 -> m15_16  [key=2, style=dotted];
m15_31 -> m15_31  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>"];
m15_31 -> m15_32  [key=0, style=solid];
m15_255 -> m15_256  [key=0, style=solid];
m15_256 -> m15_257  [key=0, style=solid];
m15_256 -> m15_36  [key=2, style=dotted];
m15_256 -> m15_258  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_257 -> m15_255  [key=0, style=bold, color=blue];
m15_119 -> m15_120  [key=0, style=solid];
m15_120 -> m15_121  [key=0, style=solid];
m15_120 -> m15_124  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m15_121 -> m15_122  [key=0, style=solid];
m15_121 -> m15_36  [key=2, style=dotted];
m15_121 -> m15_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_122 -> m15_119  [key=0, style=bold, color=blue];
m15_16 -> m15_17  [key=0, style=solid];
m15_16 -> m15_13  [key=2, style=dotted];
m15_16 -> m15_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_17 -> m15_18  [key=0, style=solid];
m15_17 -> m15_19  [key=2, style=dotted];
m15_293 -> m15_294  [key=0, style=solid];
m15_294 -> m15_295  [key=0, style=solid];
m15_294 -> m15_36  [key=2, style=dotted];
m15_294 -> m15_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_295 -> m15_293  [key=0, style=bold, color=blue];
m15_7 -> m15_7  [key=1, style=dashed, color=green, label="Hangfire.DashboardOptions"];
m15_7 -> m15_8  [key=0, style=solid, color=green];
m15_7 -> m15_16  [key=2, style=dotted, color=green];
m15_7 -> m15_17  [key=2, style=dotted, color=green];
m15_7 -> m15_10  [key=1, style=dashed, color=green, label="Hangfire.DashboardOptions"];
m15_7 -> m15_21  [key=1, style=dashed, color=green, label="Hangfire.DashboardOptions"];
m15_42 -> m15_43  [key=0, style=solid];
m15_42 -> m15_51  [key=2, style=dotted];
m15_42 -> m15_52  [key=2, style=dotted];
m15_42 -> m15_53  [key=2, style=dotted];
m15_32 -> m15_33  [key=0, style=solid];
m15_32 -> m15_37  [key=2, style=dotted];
m15_32 -> m15_40  [key=1, style=dashed, color=darkseagreen4, label=server];
m15_33 -> m15_34  [key=0, style=solid];
m15_33 -> m15_38  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m15_33 -> m15_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_34 -> m15_35  [key=0, style=solid];
m15_34 -> m15_36  [key=2, style=dotted];
m15_34 -> m15_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_35 -> m15_32  [key=0, style=bold, color=blue];
m15_35 -> m15_23  [key=0, style=bold, color=blue];
m15_344 -> m15_345  [key=0, style=solid];
m15_345 -> m15_346  [key=0, style=solid];
m15_345 -> m15_36  [key=2, style=dotted];
m15_345 -> m15_347  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_346 -> m15_344  [key=0, style=bold, color=blue];
m15_224 -> m15_225  [key=0, style=solid];
m15_225 -> m15_226  [key=0, style=solid];
m15_225 -> m15_36  [key=2, style=dotted];
m15_225 -> m15_227  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_226 -> m15_224  [key=0, style=bold, color=blue];
m15_356 -> m15_357  [key=0, style=solid];
m15_357 -> m15_358  [key=0, style=solid];
m15_357 -> m15_36  [key=2, style=dotted];
m15_357 -> m15_359  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_358 -> m15_356  [key=0, style=bold, color=blue];
m15_319 -> m15_320  [key=0, style=solid];
m15_320 -> m15_321  [key=0, style=solid];
m15_320 -> m15_36  [key=2, style=dotted];
m15_320 -> m15_322  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_321 -> m15_319  [key=0, style=bold, color=blue];
m15_5 -> m15_6  [key=0, style=solid];
m15_5 -> m15_15  [key=2, style=dotted];
m15_39 -> m15_40  [key=0, style=solid];
m15_39 -> m15_46  [key=2, style=dotted];
m15_39 -> m15_47  [key=2, style=dotted];
m15_39 -> m15_48  [key=2, style=dotted];
m15_39 -> m15_43  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m15_10 -> m15_11  [key=0, style=solid];
m15_10 -> m15_18  [key=2, style=dotted];
m15_10 -> m15_19  [key=2, style=dotted];
m15_10 -> m15_111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_11 -> m15_12  [key=0, style=solid];
m15_11 -> m15_13  [key=2, style=dotted];
m15_11 -> m15_14  [key=2, style=dotted];
m15_12 -> m15_10  [key=0, style=bold, color=blue];
m15_12 -> m15_0  [key=0, style=bold, color=blue];
m15_20 -> m15_21  [key=0, style=solid];
m15_21 -> m15_22  [key=0, style=solid];
m15_21 -> m15_23  [key=2, style=dotted];
m15_21 -> m15_16  [key=2, style=dotted];
m15_21 -> m15_113  [key=0, style=solid];
m15_22 -> m15_20  [key=0, style=bold, color=blue];
m15_28 -> m15_29  [key=0, style=solid];
m15_28 -> m15_16  [key=2, style=dotted];
m15_28 -> m15_33  [key=1, style=dashed, color=darkseagreen4, label=lifetime];
m15_29 -> m15_30  [key=0, style=solid];
m15_29 -> m15_23  [key=2, style=dotted];
m15_29 -> m15_31  [key=2, style=dotted];
m15_29 -> m15_16  [key=2, style=dotted];
m15_29 -> m15_29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m15_29 -> m15_36  [key=2, style=dotted];
m15_29 -> m15_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m15_30 -> m15_28  [key=0, style=bold, color=blue];
m15_30 -> m15_16  [key=2, style=dotted];
m15_30 -> m15_30  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m15_30 -> m15_31  [key=0, style=solid];
m15_30 -> m15_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m15_38 -> m15_39  [key=0, style=solid];
m15_38 -> m15_46  [key=2, style=dotted];
m15_38 -> m15_47  [key=2, style=dotted];
m15_38 -> m15_48  [key=2, style=dotted];
m15_38 -> m15_40  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_38 -> m15_56  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_38 -> m15_41  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_37 -> m15_38  [key=0, style=solid];
m15_37 -> m15_39  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_37 -> m15_40  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_37 -> m15_41  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_37 -> m15_43  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_40 -> m15_41  [key=0, style=solid];
m15_40 -> m15_49  [key=2, style=dotted];
m15_40 -> m15_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_40 -> m15_42  [key=2, style=dotted];
m15_41 -> m15_42  [key=0, style=solid];
m15_41 -> m15_50  [key=2, style=dotted];
m15_41 -> m15_39  [key=0, style=bold, color=blue];
m15_56 -> m15_57  [key=0, style=solid];
m15_56 -> m15_58  [key=2, style=dotted];
m15_56 -> m15_59  [key=2, style=dotted];
m15_56 -> m15_21  [key=1, style=dashed, color=darkseagreen4, label=routes];
m15_55 -> m15_56  [key=0, style=solid];
m15_55 -> m15_21  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m15_57 -> m15_55  [key=0, style=bold, color=blue];
m15_57 -> m15_40  [key=1, style=dashed, color=darkseagreen4, label=server];
m15_65 -> m15_66  [key=0, style=solid];
m15_65 -> m15_46  [key=2, style=dotted];
m15_65 -> m15_47  [key=2, style=dotted];
m15_65 -> m15_48  [key=2, style=dotted];
m15_65 -> m15_67  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_65 -> m15_75  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_65 -> m15_68  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_66 -> m15_67  [key=0, style=solid];
m15_66 -> m15_46  [key=2, style=dotted];
m15_66 -> m15_47  [key=2, style=dotted];
m15_66 -> m15_48  [key=2, style=dotted];
m15_66 -> m15_70  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m15_64 -> m15_65  [key=0, style=solid];
m15_64 -> m15_66  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_64 -> m15_67  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_64 -> m15_68  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_64 -> m15_70  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_67 -> m15_68  [key=0, style=solid];
m15_67 -> m15_49  [key=2, style=dotted];
m15_67 -> m15_74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_68 -> m15_69  [key=0, style=solid];
m15_68 -> m15_50  [key=2, style=dotted];
m15_70 -> m15_71  [key=0, style=solid];
m15_70 -> m15_50  [key=2, style=dotted];
m15_75 -> m15_76  [key=0, style=solid];
m15_75 -> m15_77  [key=2, style=dotted];
m15_74 -> m15_75  [key=0, style=solid];
m15_69 -> m15_70  [key=0, style=solid];
m15_69 -> m15_54  [key=2, style=dotted];
m15_71 -> m15_72  [key=0, style=solid];
m15_71 -> m15_73  [key=2, style=dotted];
m15_72 -> m15_64  [key=0, style=bold, color=blue];
m15_76 -> m15_74  [key=0, style=bold, color=blue];
m15_83 -> m15_84  [key=0, style=solid];
m15_83 -> m15_46  [key=2, style=dotted];
m15_83 -> m15_47  [key=2, style=dotted];
m15_83 -> m15_48  [key=2, style=dotted];
m15_83 -> m15_89  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_83 -> m15_116  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_83 -> m15_90  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_83 -> m15_97  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_84 -> m15_85  [key=0, style=solid];
m15_84 -> m15_46  [key=2, style=dotted];
m15_84 -> m15_47  [key=2, style=dotted];
m15_84 -> m15_48  [key=2, style=dotted];
m15_84 -> m15_93  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m15_82 -> m15_83  [key=0, style=solid];
m15_82 -> m15_84  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_82 -> m15_89  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_82 -> m15_90  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_82 -> m15_93  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_82 -> m15_96  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_89 -> m15_90  [key=0, style=solid];
m15_89 -> m15_49  [key=2, style=dotted];
m15_89 -> m15_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_90 -> m15_91  [key=0, style=solid];
m15_90 -> m15_50  [key=2, style=dotted];
m15_90 -> m15_92  [key=1, style=dashed, color=darkseagreen4, label=job];
m15_93 -> m15_94  [key=0, style=solid];
m15_93 -> m15_50  [key=2, style=dotted];
m15_93 -> m15_95  [key=1, style=dashed, color=darkseagreen4, label=anotherJob];
m15_96 -> m15_97  [key=0, style=solid];
m15_96 -> m15_46  [key=2, style=dotted];
m15_96 -> m15_47  [key=2, style=dotted];
m15_96 -> m15_98  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m15_96 -> m15_99  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m15_96 -> m15_100  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m15_96 -> m15_101  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m15_116 -> m15_117  [key=0, style=solid];
m15_116 -> m15_118  [key=2, style=dotted];
m15_97 -> m15_98  [key=0, style=solid];
m15_97 -> m15_48  [key=2, style=dotted];
m15_97 -> m15_19  [key=2, style=dotted];
m15_85 -> m15_86  [key=0, style=solid];
m15_85 -> m15_103  [key=2, style=dotted];
m15_85 -> m15_87  [key=1, style=dashed, color=darkseagreen4, label=state];
m15_85 -> m15_88  [key=1, style=dashed, color=red, label=state];
m15_85 -> m15_89  [key=1, style=dashed, color=darkseagreen4, label=state];
m15_85 -> m15_116  [key=1, style=dashed, color=darkseagreen4, label=state];
m15_86 -> m15_87  [key=0, style=solid];
m15_86 -> m15_6  [key=2, style=dotted];
m15_86 -> m15_8  [key=2, style=dotted];
m15_86 -> m15_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_87 -> m15_88  [key=0, style=solid, color=red];
m15_87 -> m15_6  [key=2, style=dotted];
m15_87 -> m15_8  [key=2, style=dotted];
m15_87 -> m15_108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_88 -> m15_89  [key=0, style=solid, color=red];
m15_88 -> m15_6  [key=2, style=dotted, color=red];
m15_88 -> m15_104  [key=2, style=dotted, color=red];
m15_88 -> m15_8  [key=2, style=dotted, color=red];
m15_88 -> m15_111  [key=1, style=dashed, color=red, label="lambda expression"];
m15_105 -> m15_106  [key=0, style=solid];
m15_108 -> m15_109  [key=0, style=solid];
m15_111 -> m15_112  [key=0, style=solid, color=red];
m15_111 -> m15_21  [key=0, style=solid];
m15_115 -> m15_116  [key=0, style=solid];
m15_91 -> m15_92  [key=0, style=solid];
m15_91 -> m15_19  [key=2, style=dotted];
m15_92 -> m15_93  [key=0, style=solid];
m15_92 -> m15_73  [key=2, style=dotted];
m15_94 -> m15_95  [key=0, style=solid];
m15_94 -> m15_54  [key=2, style=dotted];
m15_95 -> m15_96  [key=0, style=solid];
m15_95 -> m15_54  [key=2, style=dotted];
m15_98 -> m15_99  [key=0, style=solid];
m15_98 -> m15_19  [key=2, style=dotted];
m15_99 -> m15_100  [key=0, style=solid];
m15_99 -> m15_19  [key=2, style=dotted];
m15_100 -> m15_101  [key=0, style=solid];
m15_100 -> m15_73  [key=2, style=dotted];
m15_101 -> m15_102  [key=0, style=solid];
m15_101 -> m15_19  [key=2, style=dotted];
m15_102 -> m15_82  [key=0, style=bold, color=blue];
m15_106 -> m15_107  [key=0, style=solid];
m15_107 -> m15_105  [key=0, style=bold, color=blue];
m15_109 -> m15_110  [key=0, style=solid];
m15_110 -> m15_108  [key=0, style=bold, color=blue];
m15_112 -> m15_113  [key=0, style=solid, color=red];
m15_112 -> m15_114  [key=2, style=dotted, color=red];
m15_113 -> m15_111  [key=0, style=bold, color=blue];
m15_117 -> m15_115  [key=0, style=bold, color=blue];
m15_124 -> m15_125  [key=0, style=solid];
m15_124 -> m15_46  [key=2, style=dotted];
m15_124 -> m15_47  [key=2, style=dotted];
m15_124 -> m15_48  [key=2, style=dotted];
m15_124 -> m15_129  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_124 -> m15_150  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_124 -> m15_130  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_124 -> m15_134  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_123 -> m15_124  [key=0, style=solid];
m15_123 -> m15_129  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_123 -> m15_130  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_123 -> m15_133  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_129 -> m15_130  [key=0, style=solid];
m15_129 -> m15_49  [key=2, style=dotted];
m15_129 -> m15_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_130 -> m15_131  [key=0, style=solid];
m15_130 -> m15_50  [key=2, style=dotted];
m15_130 -> m15_132  [key=1, style=dashed, color=darkseagreen4, label=job];
m15_133 -> m15_134  [key=0, style=solid];
m15_133 -> m15_46  [key=2, style=dotted];
m15_133 -> m15_47  [key=2, style=dotted];
m15_133 -> m15_135  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m15_133 -> m15_136  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m15_133 -> m15_137  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m15_133 -> m15_138  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m15_125 -> m15_126  [key=0, style=solid];
m15_125 -> m15_103  [key=2, style=dotted];
m15_125 -> m15_127  [key=1, style=dashed, color=darkseagreen4, label=state];
m15_125 -> m15_128  [key=1, style=dashed, color=darkseagreen4, label=state];
m15_125 -> m15_129  [key=1, style=dashed, color=darkseagreen4, label=state];
m15_125 -> m15_150  [key=1, style=dashed, color=darkseagreen4, label=state];
m15_150 -> m15_151  [key=0, style=solid];
m15_150 -> m15_152  [key=2, style=dotted];
m15_134 -> m15_135  [key=0, style=solid];
m15_134 -> m15_48  [key=2, style=dotted];
m15_134 -> m15_19  [key=2, style=dotted];
m15_126 -> m15_127  [key=0, style=solid];
m15_126 -> m15_6  [key=2, style=dotted];
m15_126 -> m15_8  [key=2, style=dotted];
m15_126 -> m15_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_127 -> m15_128  [key=0, style=solid];
m15_127 -> m15_6  [key=2, style=dotted];
m15_127 -> m15_8  [key=2, style=dotted];
m15_127 -> m15_143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_128 -> m15_129  [key=0, style=solid];
m15_128 -> m15_6  [key=2, style=dotted];
m15_128 -> m15_104  [key=2, style=dotted];
m15_128 -> m15_8  [key=2, style=dotted];
m15_128 -> m15_146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_140 -> m15_141  [key=0, style=solid];
m15_143 -> m15_144  [key=0, style=solid];
m15_146 -> m15_147  [key=0, style=solid];
m15_149 -> m15_150  [key=0, style=solid];
m15_131 -> m15_132  [key=0, style=solid];
m15_131 -> m15_54  [key=2, style=dotted];
m15_132 -> m15_133  [key=0, style=solid];
m15_132 -> m15_54  [key=2, style=dotted];
m15_135 -> m15_136  [key=0, style=solid];
m15_135 -> m15_19  [key=2, style=dotted];
m15_136 -> m15_137  [key=0, style=solid];
m15_136 -> m15_19  [key=2, style=dotted];
m15_137 -> m15_138  [key=0, style=solid];
m15_137 -> m15_73  [key=2, style=dotted];
m15_138 -> m15_139  [key=0, style=solid];
m15_138 -> m15_19  [key=2, style=dotted];
m15_139 -> m15_123  [key=0, style=bold, color=blue];
m15_141 -> m15_142  [key=0, style=solid];
m15_142 -> m15_140  [key=0, style=bold, color=blue];
m15_144 -> m15_145  [key=0, style=solid];
m15_145 -> m15_143  [key=0, style=bold, color=blue];
m15_147 -> m15_148  [key=0, style=solid];
m15_147 -> m15_114  [key=2, style=dotted];
m15_148 -> m15_146  [key=0, style=bold, color=blue];
m15_151 -> m15_149  [key=0, style=bold, color=blue];
m15_156 -> m15_157  [key=0, style=solid];
m15_156 -> m15_161  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_157 -> m15_158  [key=0, style=solid];
m15_157 -> m15_7  [key=2, style=dotted];
m15_157 -> m15_159  [key=1, style=dashed, color=darkseagreen4, label=correctJobQueue];
m15_157 -> m15_162  [key=1, style=dashed, color=darkseagreen4, label=correctJobQueue];
m15_161 -> m15_162  [key=0, style=solid];
m15_161 -> m15_49  [key=2, style=dotted];
m15_161 -> m15_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_158 -> m15_159  [key=0, style=solid];
m15_158 -> m15_5  [key=2, style=dotted];
m15_158 -> m15_160  [key=1, style=dashed, color=darkseagreen4, label=correctProvider];
m15_159 -> m15_160  [key=0, style=solid];
m15_159 -> m15_6  [key=2, style=dotted];
m15_159 -> m15_8  [key=2, style=dotted];
m15_159 -> m15_166  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_162 -> m15_163  [key=0, style=solid];
m15_162 -> m15_165  [key=2, style=dotted];
m15_162 -> m15_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_160 -> m15_161  [key=0, style=solid];
m15_160 -> m15_164  [key=2, style=dotted];
m15_166 -> m15_167  [key=0, style=solid];
m15_169 -> m15_170  [key=0, style=solid];
m15_163 -> m15_156  [key=0, style=bold, color=blue];
m15_173 -> m15_174  [key=0, style=solid];
m15_167 -> m15_168  [key=0, style=solid];
m15_167 -> m15_13  [key=2, style=dotted];
m15_167 -> m15_14  [key=2, style=dotted];
m15_168 -> m15_166  [key=0, style=bold, color=blue];
m15_170 -> m15_171  [key=0, style=solid];
m15_170 -> m15_172  [key=2, style=dotted];
m15_171 -> m15_169  [key=0, style=bold, color=blue];
m15_174 -> m15_175  [key=0, style=solid];
m15_174 -> m15_176  [key=2, style=dotted];
m15_175 -> m15_173  [key=0, style=bold, color=blue];
m15_183 -> m15_184  [key=0, style=solid];
m15_183 -> m15_185  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_184 -> m15_185  [key=0, style=solid];
m15_184 -> m15_49  [key=2, style=dotted];
m15_184 -> m15_190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_185 -> m15_186  [key=0, style=solid];
m15_185 -> m15_46  [key=2, style=dotted];
m15_185 -> m15_47  [key=2, style=dotted];
m15_185 -> m15_187  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_185 -> m15_188  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_190 -> m15_191  [key=0, style=solid];
m15_186 -> m15_187  [key=0, style=solid];
m15_186 -> m15_19  [key=2, style=dotted];
m15_187 -> m15_188  [key=0, style=solid];
m15_187 -> m15_19  [key=2, style=dotted];
m15_188 -> m15_189  [key=0, style=solid];
m15_188 -> m15_19  [key=2, style=dotted];
m15_189 -> m15_183  [key=0, style=bold, color=blue];
m15_191 -> m15_192  [key=0, style=solid];
m15_191 -> m15_193  [key=2, style=dotted];
m15_192 -> m15_190  [key=0, style=bold, color=blue];
m15_197 -> m15_198  [key=0, style=solid];
m15_197 -> m15_199  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_198 -> m15_199  [key=0, style=solid];
m15_198 -> m15_49  [key=2, style=dotted];
m15_198 -> m15_208  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_199 -> m15_200  [key=0, style=solid];
m15_199 -> m15_46  [key=2, style=dotted];
m15_199 -> m15_47  [key=2, style=dotted];
m15_199 -> m15_201  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_199 -> m15_202  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_199 -> m15_203  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_208 -> m15_209  [key=0, style=solid];
m15_200 -> m15_201  [key=0, style=solid];
m15_200 -> m15_19  [key=2, style=dotted];
m15_201 -> m15_202  [key=0, style=solid];
m15_201 -> m15_19  [key=2, style=dotted];
m15_202 -> m15_203  [key=0, style=solid];
m15_202 -> m15_73  [key=2, style=dotted];
m15_203 -> m15_204  [key=0, style=solid];
m15_203 -> m15_205  [key=1, style=dashed, color=darkseagreen4, label=expireAt];
m15_204 -> m15_205  [key=0, style=solid];
m15_204 -> m15_207  [key=2, style=dotted];
m15_204 -> m15_53  [key=2, style=dotted];
m15_205 -> m15_206  [key=0, style=solid];
m15_205 -> m15_207  [key=2, style=dotted];
m15_205 -> m15_53  [key=2, style=dotted];
m15_206 -> m15_197  [key=0, style=bold, color=blue];
m15_209 -> m15_210  [key=0, style=solid];
m15_209 -> m15_58  [key=2, style=dotted];
m15_209 -> m15_211  [key=2, style=dotted];
m15_210 -> m15_208  [key=0, style=bold, color=blue];
m15_215 -> m15_216  [key=0, style=solid];
m15_215 -> m15_217  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_216 -> m15_217  [key=0, style=solid];
m15_216 -> m15_49  [key=2, style=dotted];
m15_216 -> m15_220  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_217 -> m15_218  [key=0, style=solid];
m15_217 -> m15_13  [key=2, style=dotted];
m15_217 -> m15_47  [key=2, style=dotted];
m15_220 -> m15_221  [key=0, style=solid];
m15_220 -> m15_222  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_218 -> m15_219  [key=0, style=solid];
m15_218 -> m15_19  [key=2, style=dotted];
m15_219 -> m15_215  [key=0, style=bold, color=blue];
m15_221 -> m15_222  [key=0, style=solid];
m15_221 -> m15_193  [key=2, style=dotted];
m15_222 -> m15_223  [key=0, style=solid];
m15_222 -> m15_193  [key=2, style=dotted];
m15_223 -> m15_220  [key=0, style=bold, color=blue];
m15_227 -> m15_228  [key=0, style=solid];
m15_227 -> m15_229  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_228 -> m15_229  [key=0, style=solid];
m15_228 -> m15_49  [key=2, style=dotted];
m15_228 -> m15_234  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_229 -> m15_230  [key=0, style=solid];
m15_229 -> m15_46  [key=2, style=dotted];
m15_229 -> m15_47  [key=2, style=dotted];
m15_229 -> m15_231  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_229 -> m15_232  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_234 -> m15_235  [key=0, style=solid];
m15_230 -> m15_231  [key=0, style=solid];
m15_230 -> m15_19  [key=2, style=dotted];
m15_231 -> m15_232  [key=0, style=solid];
m15_231 -> m15_19  [key=2, style=dotted];
m15_232 -> m15_233  [key=0, style=solid];
m15_232 -> m15_19  [key=2, style=dotted];
m15_233 -> m15_227  [key=0, style=bold, color=blue];
m15_235 -> m15_236  [key=0, style=solid];
m15_235 -> m15_237  [key=2, style=dotted];
m15_236 -> m15_234  [key=0, style=bold, color=blue];
m15_241 -> m15_242  [key=0, style=solid];
m15_241 -> m15_243  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_242 -> m15_243  [key=0, style=solid];
m15_242 -> m15_49  [key=2, style=dotted];
m15_242 -> m15_251  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_243 -> m15_244  [key=0, style=solid];
m15_243 -> m15_46  [key=2, style=dotted];
m15_243 -> m15_47  [key=2, style=dotted];
m15_243 -> m15_245  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_243 -> m15_246  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_243 -> m15_247  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_251 -> m15_252  [key=0, style=solid];
m15_244 -> m15_245  [key=0, style=solid];
m15_244 -> m15_19  [key=2, style=dotted];
m15_245 -> m15_246  [key=0, style=solid];
m15_245 -> m15_19  [key=2, style=dotted];
m15_246 -> m15_247  [key=0, style=solid];
m15_246 -> m15_73  [key=2, style=dotted];
m15_247 -> m15_248  [key=0, style=solid];
m15_247 -> m15_249  [key=1, style=dashed, color=darkseagreen4, label=expireAt];
m15_248 -> m15_249  [key=0, style=solid];
m15_248 -> m15_207  [key=2, style=dotted];
m15_248 -> m15_53  [key=2, style=dotted];
m15_249 -> m15_250  [key=0, style=solid];
m15_249 -> m15_207  [key=2, style=dotted];
m15_249 -> m15_53  [key=2, style=dotted];
m15_250 -> m15_241  [key=0, style=bold, color=blue];
m15_252 -> m15_253  [key=0, style=solid];
m15_252 -> m15_58  [key=2, style=dotted];
m15_252 -> m15_254  [key=2, style=dotted];
m15_253 -> m15_251  [key=0, style=bold, color=blue];
m15_258 -> m15_259  [key=0, style=solid];
m15_258 -> m15_260  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_259 -> m15_260  [key=0, style=solid];
m15_259 -> m15_49  [key=2, style=dotted];
m15_259 -> m15_263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_260 -> m15_261  [key=0, style=solid];
m15_260 -> m15_13  [key=2, style=dotted];
m15_260 -> m15_47  [key=2, style=dotted];
m15_263 -> m15_264  [key=0, style=solid];
m15_263 -> m15_265  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_261 -> m15_262  [key=0, style=solid];
m15_261 -> m15_19  [key=2, style=dotted];
m15_262 -> m15_258  [key=0, style=bold, color=blue];
m15_264 -> m15_265  [key=0, style=solid];
m15_264 -> m15_237  [key=2, style=dotted];
m15_265 -> m15_266  [key=0, style=solid];
m15_265 -> m15_237  [key=2, style=dotted];
m15_266 -> m15_263  [key=0, style=bold, color=blue];
m15_270 -> m15_271  [key=0, style=solid];
m15_270 -> m15_272  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_271 -> m15_272  [key=0, style=solid];
m15_271 -> m15_49  [key=2, style=dotted];
m15_271 -> m15_277  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_272 -> m15_273  [key=0, style=solid];
m15_272 -> m15_46  [key=2, style=dotted];
m15_272 -> m15_47  [key=2, style=dotted];
m15_272 -> m15_274  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_272 -> m15_275  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_277 -> m15_278  [key=0, style=solid];
m15_273 -> m15_274  [key=0, style=solid];
m15_273 -> m15_19  [key=2, style=dotted];
m15_274 -> m15_275  [key=0, style=solid];
m15_274 -> m15_19  [key=2, style=dotted];
m15_275 -> m15_276  [key=0, style=solid];
m15_275 -> m15_19  [key=2, style=dotted];
m15_276 -> m15_270  [key=0, style=bold, color=blue];
m15_278 -> m15_279  [key=0, style=solid];
m15_278 -> m15_280  [key=2, style=dotted];
m15_279 -> m15_277  [key=0, style=bold, color=blue];
m15_284 -> m15_285  [key=0, style=solid];
m15_284 -> m15_286  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_285 -> m15_286  [key=0, style=solid];
m15_285 -> m15_49  [key=2, style=dotted];
m15_285 -> m15_289  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_286 -> m15_287  [key=0, style=solid];
m15_286 -> m15_13  [key=2, style=dotted];
m15_286 -> m15_47  [key=2, style=dotted];
m15_289 -> m15_290  [key=0, style=solid];
m15_289 -> m15_291  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_287 -> m15_288  [key=0, style=solid];
m15_287 -> m15_19  [key=2, style=dotted];
m15_288 -> m15_284  [key=0, style=bold, color=blue];
m15_290 -> m15_291  [key=0, style=solid];
m15_290 -> m15_280  [key=2, style=dotted];
m15_291 -> m15_292  [key=0, style=solid];
m15_291 -> m15_280  [key=2, style=dotted];
m15_292 -> m15_289  [key=0, style=bold, color=blue];
m15_296 -> m15_297  [key=0, style=solid];
m15_296 -> m15_298  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_297 -> m15_298  [key=0, style=solid];
m15_297 -> m15_49  [key=2, style=dotted];
m15_297 -> m15_301  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_298 -> m15_299  [key=0, style=solid];
m15_298 -> m15_13  [key=2, style=dotted];
m15_298 -> m15_47  [key=2, style=dotted];
m15_301 -> m15_302  [key=0, style=solid];
m15_301 -> m15_303  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_299 -> m15_300  [key=0, style=solid];
m15_299 -> m15_19  [key=2, style=dotted];
m15_300 -> m15_296  [key=0, style=bold, color=blue];
m15_302 -> m15_303  [key=0, style=solid];
m15_302 -> m15_280  [key=2, style=dotted];
m15_303 -> m15_304  [key=0, style=solid];
m15_303 -> m15_280  [key=2, style=dotted];
m15_304 -> m15_301  [key=0, style=bold, color=blue];
m15_308 -> m15_309  [key=0, style=solid];
m15_308 -> m15_310  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_309 -> m15_310  [key=0, style=solid];
m15_309 -> m15_49  [key=2, style=dotted];
m15_309 -> m15_315  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_310 -> m15_311  [key=0, style=solid];
m15_310 -> m15_46  [key=2, style=dotted];
m15_310 -> m15_47  [key=2, style=dotted];
m15_310 -> m15_312  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_310 -> m15_313  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_315 -> m15_316  [key=0, style=solid];
m15_311 -> m15_312  [key=0, style=solid];
m15_311 -> m15_19  [key=2, style=dotted];
m15_312 -> m15_313  [key=0, style=solid];
m15_312 -> m15_19  [key=2, style=dotted];
m15_313 -> m15_314  [key=0, style=solid];
m15_313 -> m15_19  [key=2, style=dotted];
m15_314 -> m15_308  [key=0, style=bold, color=blue];
m15_316 -> m15_317  [key=0, style=solid];
m15_316 -> m15_318  [key=2, style=dotted];
m15_317 -> m15_315  [key=0, style=bold, color=blue];
m15_322 -> m15_323  [key=0, style=solid];
m15_322 -> m15_324  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_323 -> m15_324  [key=0, style=solid];
m15_323 -> m15_49  [key=2, style=dotted];
m15_323 -> m15_327  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_324 -> m15_325  [key=0, style=solid];
m15_324 -> m15_46  [key=2, style=dotted];
m15_324 -> m15_47  [key=2, style=dotted];
m15_327 -> m15_328  [key=0, style=solid];
m15_327 -> m15_329  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_325 -> m15_326  [key=0, style=solid];
m15_325 -> m15_19  [key=2, style=dotted];
m15_326 -> m15_322  [key=0, style=bold, color=blue];
m15_328 -> m15_329  [key=0, style=solid];
m15_328 -> m15_280  [key=2, style=dotted];
m15_329 -> m15_330  [key=0, style=solid];
m15_329 -> m15_318  [key=2, style=dotted];
m15_330 -> m15_327  [key=0, style=bold, color=blue];
m15_334 -> m15_335  [key=0, style=solid];
m15_334 -> m15_336  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_335 -> m15_336  [key=0, style=solid];
m15_335 -> m15_49  [key=2, style=dotted];
m15_335 -> m15_339  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_336 -> m15_337  [key=0, style=solid];
m15_336 -> m15_13  [key=2, style=dotted];
m15_336 -> m15_47  [key=2, style=dotted];
m15_339 -> m15_340  [key=0, style=solid];
m15_339 -> m15_341  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_337 -> m15_338  [key=0, style=solid];
m15_337 -> m15_19  [key=2, style=dotted];
m15_338 -> m15_334  [key=0, style=bold, color=blue];
m15_340 -> m15_341  [key=0, style=solid];
m15_340 -> m15_280  [key=2, style=dotted];
m15_341 -> m15_342  [key=0, style=solid];
m15_341 -> m15_343  [key=2, style=dotted];
m15_342 -> m15_339  [key=0, style=bold, color=blue];
m15_347 -> m15_348  [key=0, style=solid];
m15_347 -> m15_349  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_348 -> m15_349  [key=0, style=solid];
m15_348 -> m15_49  [key=2, style=dotted];
m15_348 -> m15_352  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_349 -> m15_350  [key=0, style=solid];
m15_349 -> m15_13  [key=2, style=dotted];
m15_349 -> m15_47  [key=2, style=dotted];
m15_352 -> m15_353  [key=0, style=solid];
m15_352 -> m15_354  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_350 -> m15_351  [key=0, style=solid];
m15_350 -> m15_19  [key=2, style=dotted];
m15_351 -> m15_347  [key=0, style=bold, color=blue];
m15_353 -> m15_354  [key=0, style=solid];
m15_353 -> m15_280  [key=2, style=dotted];
m15_354 -> m15_355  [key=0, style=solid];
m15_354 -> m15_343  [key=2, style=dotted];
m15_355 -> m15_352  [key=0, style=bold, color=blue];
m15_359 -> m15_360  [key=0, style=solid];
m15_359 -> m15_361  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_360 -> m15_361  [key=0, style=solid];
m15_360 -> m15_49  [key=2, style=dotted];
m15_360 -> m15_364  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_361 -> m15_362  [key=0, style=solid];
m15_361 -> m15_13  [key=2, style=dotted];
m15_361 -> m15_47  [key=2, style=dotted];
m15_364 -> m15_365  [key=0, style=solid];
m15_364 -> m15_366  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_362 -> m15_363  [key=0, style=solid];
m15_362 -> m15_19  [key=2, style=dotted];
m15_363 -> m15_359  [key=0, style=bold, color=blue];
m15_365 -> m15_366  [key=0, style=solid];
m15_365 -> m15_280  [key=2, style=dotted];
m15_366 -> m15_367  [key=0, style=solid];
m15_366 -> m15_343  [key=2, style=dotted];
m15_367 -> m15_364  [key=0, style=bold, color=blue];
m15_371 -> m15_372  [key=0, style=solid];
m15_371 -> m15_373  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_372 -> m15_373  [key=0, style=solid];
m15_372 -> m15_49  [key=2, style=dotted];
m15_372 -> m15_377  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_373 -> m15_374  [key=0, style=solid];
m15_373 -> m15_46  [key=2, style=dotted];
m15_373 -> m15_47  [key=2, style=dotted];
m15_373 -> m15_375  [key=1, style=dashed, color=darkseagreen4, label=record];
m15_377 -> m15_378  [key=0, style=solid];
m15_374 -> m15_375  [key=0, style=solid];
m15_374 -> m15_19  [key=2, style=dotted];
m15_375 -> m15_376  [key=0, style=solid];
m15_375 -> m15_19  [key=2, style=dotted];
m15_376 -> m15_371  [key=0, style=bold, color=blue];
m15_378 -> m15_379  [key=0, style=solid];
m15_378 -> m15_380  [key=2, style=dotted];
m15_379 -> m15_377  [key=0, style=bold, color=blue];
m15_384 -> m15_385  [key=0, style=solid];
m15_384 -> m15_386  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_385 -> m15_386  [key=0, style=solid];
m15_385 -> m15_49  [key=2, style=dotted];
m15_385 -> m15_389  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_386 -> m15_387  [key=0, style=solid];
m15_386 -> m15_13  [key=2, style=dotted];
m15_386 -> m15_47  [key=2, style=dotted];
m15_389 -> m15_390  [key=0, style=solid];
m15_389 -> m15_391  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_387 -> m15_388  [key=0, style=solid];
m15_387 -> m15_19  [key=2, style=dotted];
m15_388 -> m15_384  [key=0, style=bold, color=blue];
m15_390 -> m15_391  [key=0, style=solid];
m15_390 -> m15_380  [key=2, style=dotted];
m15_391 -> m15_392  [key=0, style=solid];
m15_391 -> m15_380  [key=2, style=dotted];
m15_392 -> m15_389  [key=0, style=bold, color=blue];
m15_396 -> m15_397  [key=0, style=solid];
m15_396 -> m15_398  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_397 -> m15_398  [key=0, style=solid];
m15_397 -> m15_49  [key=2, style=dotted];
m15_397 -> m15_401  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_398 -> m15_399  [key=0, style=solid];
m15_398 -> m15_13  [key=2, style=dotted];
m15_398 -> m15_47  [key=2, style=dotted];
m15_401 -> m15_402  [key=0, style=solid];
m15_401 -> m15_403  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_401 -> m15_404  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_399 -> m15_400  [key=0, style=solid];
m15_399 -> m15_19  [key=2, style=dotted];
m15_400 -> m15_396  [key=0, style=bold, color=blue];
m15_402 -> m15_403  [key=0, style=solid];
m15_402 -> m15_380  [key=2, style=dotted];
m15_403 -> m15_404  [key=0, style=solid];
m15_403 -> m15_380  [key=2, style=dotted];
m15_404 -> m15_405  [key=0, style=solid];
m15_404 -> m15_406  [key=2, style=dotted];
m15_405 -> m15_401  [key=0, style=bold, color=blue];
m15_410 -> m15_411  [key=0, style=solid];
m15_410 -> m15_412  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_411 -> m15_412  [key=0, style=solid];
m15_411 -> m15_49  [key=2, style=dotted];
m15_411 -> m15_415  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_412 -> m15_413  [key=0, style=solid];
m15_412 -> m15_13  [key=2, style=dotted];
m15_412 -> m15_47  [key=2, style=dotted];
m15_415 -> m15_416  [key=0, style=solid];
m15_415 -> m15_417  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_413 -> m15_414  [key=0, style=solid];
m15_413 -> m15_19  [key=2, style=dotted];
m15_414 -> m15_410  [key=0, style=bold, color=blue];
m15_416 -> m15_417  [key=0, style=solid];
m15_416 -> m15_380  [key=2, style=dotted];
m15_417 -> m15_418  [key=0, style=solid];
m15_417 -> m15_406  [key=2, style=dotted];
m15_418 -> m15_415  [key=0, style=bold, color=blue];
m15_422 -> m15_423  [key=0, style=solid];
m15_422 -> m15_424  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_423 -> m15_424  [key=0, style=solid];
m15_423 -> m15_49  [key=2, style=dotted];
m15_423 -> m15_427  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_424 -> m15_425  [key=0, style=solid];
m15_424 -> m15_13  [key=2, style=dotted];
m15_424 -> m15_47  [key=2, style=dotted];
m15_427 -> m15_428  [key=0, style=solid];
m15_427 -> m15_429  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_425 -> m15_426  [key=0, style=solid];
m15_425 -> m15_19  [key=2, style=dotted];
m15_426 -> m15_422  [key=0, style=bold, color=blue];
m15_428 -> m15_429  [key=0, style=solid];
m15_428 -> m15_380  [key=2, style=dotted];
m15_429 -> m15_430  [key=0, style=solid];
m15_429 -> m15_406  [key=2, style=dotted];
m15_430 -> m15_427  [key=0, style=bold, color=blue];
m15_434 -> m15_435  [key=0, style=solid];
m15_434 -> m15_436  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_435 -> m15_436  [key=0, style=solid];
m15_435 -> m15_49  [key=2, style=dotted];
m15_435 -> m15_442  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_436 -> m15_437  [key=0, style=solid];
m15_436 -> m15_46  [key=2, style=dotted];
m15_436 -> m15_441  [key=2, style=dotted];
m15_436 -> m15_438  [key=1, style=dashed, color=darkseagreen4, label=records];
m15_436 -> m15_439  [key=1, style=dashed, color=darkseagreen4, label=records];
m15_442 -> m15_443  [key=0, style=solid];
m15_442 -> m15_444  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_442 -> m15_445  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_442 -> m15_446  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_442 -> m15_447  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_437 -> m15_438  [key=0, style=solid];
m15_437 -> m15_19  [key=2, style=dotted];
m15_438 -> m15_439  [key=0, style=solid];
m15_438 -> m15_19  [key=2, style=dotted];
m15_439 -> m15_440  [key=0, style=solid];
m15_439 -> m15_19  [key=2, style=dotted];
m15_440 -> m15_434  [key=0, style=bold, color=blue];
m15_443 -> m15_444  [key=0, style=solid];
m15_443 -> m15_380  [key=2, style=dotted];
m15_444 -> m15_445  [key=0, style=solid];
m15_444 -> m15_380  [key=2, style=dotted];
m15_445 -> m15_446  [key=0, style=solid];
m15_445 -> m15_380  [key=2, style=dotted];
m15_446 -> m15_447  [key=0, style=solid];
m15_446 -> m15_380  [key=2, style=dotted];
m15_447 -> m15_448  [key=0, style=solid];
m15_447 -> m15_449  [key=2, style=dotted];
m15_448 -> m15_442  [key=0, style=bold, color=blue];
m15_453 -> m15_454  [key=0, style=solid];
m15_453 -> m15_455  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_454 -> m15_455  [key=0, style=solid];
m15_454 -> m15_49  [key=2, style=dotted];
m15_454 -> m15_458  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_455 -> m15_456  [key=0, style=solid];
m15_455 -> m15_13  [key=2, style=dotted];
m15_455 -> m15_47  [key=2, style=dotted];
m15_458 -> m15_459  [key=0, style=solid];
m15_458 -> m15_460  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_458 -> m15_461  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_458 -> m15_462  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_456 -> m15_457  [key=0, style=solid];
m15_456 -> m15_19  [key=2, style=dotted];
m15_457 -> m15_453  [key=0, style=bold, color=blue];
m15_459 -> m15_460  [key=0, style=solid];
m15_459 -> m15_380  [key=2, style=dotted];
m15_460 -> m15_461  [key=0, style=solid];
m15_460 -> m15_380  [key=2, style=dotted];
m15_461 -> m15_462  [key=0, style=solid];
m15_461 -> m15_380  [key=2, style=dotted];
m15_462 -> m15_463  [key=0, style=solid];
m15_462 -> m15_449  [key=2, style=dotted];
m15_463 -> m15_458  [key=0, style=bold, color=blue];
m15_467 -> m15_468  [key=0, style=solid];
m15_467 -> m15_469  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_468 -> m15_469  [key=0, style=solid];
m15_468 -> m15_49  [key=2, style=dotted];
m15_468 -> m15_472  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_469 -> m15_470  [key=0, style=solid];
m15_469 -> m15_13  [key=2, style=dotted];
m15_469 -> m15_47  [key=2, style=dotted];
m15_472 -> m15_473  [key=0, style=solid];
m15_472 -> m15_474  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_470 -> m15_471  [key=0, style=solid];
m15_470 -> m15_19  [key=2, style=dotted];
m15_471 -> m15_467  [key=0, style=bold, color=blue];
m15_473 -> m15_474  [key=0, style=solid];
m15_473 -> m15_380  [key=2, style=dotted];
m15_474 -> m15_475  [key=0, style=solid];
m15_474 -> m15_449  [key=2, style=dotted];
m15_475 -> m15_472  [key=0, style=bold, color=blue];
m15_479 -> m15_480  [key=0, style=solid];
m15_479 -> m15_481  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_480 -> m15_481  [key=0, style=solid];
m15_480 -> m15_49  [key=2, style=dotted];
m15_480 -> m15_484  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_481 -> m15_482  [key=0, style=solid];
m15_481 -> m15_13  [key=2, style=dotted];
m15_481 -> m15_47  [key=2, style=dotted];
m15_484 -> m15_485  [key=0, style=solid];
m15_484 -> m15_486  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_482 -> m15_483  [key=0, style=solid];
m15_482 -> m15_19  [key=2, style=dotted];
m15_483 -> m15_479  [key=0, style=bold, color=blue];
m15_485 -> m15_486  [key=0, style=solid];
m15_485 -> m15_380  [key=2, style=dotted];
m15_486 -> m15_487  [key=0, style=solid];
m15_486 -> m15_449  [key=2, style=dotted];
m15_487 -> m15_484  [key=0, style=bold, color=blue];
m15_491 -> m15_492  [key=0, style=solid];
m15_491 -> m15_493  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m15_492 -> m15_493  [key=0, style=solid];
m15_492 -> m15_49  [key=2, style=dotted];
m15_492 -> m15_496  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_493 -> m15_494  [key=0, style=solid];
m15_493 -> m15_13  [key=2, style=dotted];
m15_493 -> m15_47  [key=2, style=dotted];
m15_496 -> m15_497  [key=0, style=solid];
m15_496 -> m15_498  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m15_494 -> m15_495  [key=0, style=solid];
m15_494 -> m15_19  [key=2, style=dotted];
m15_495 -> m15_491  [key=0, style=bold, color=blue];
m15_497 -> m15_498  [key=0, style=solid];
m15_497 -> m15_380  [key=2, style=dotted];
m15_498 -> m15_499  [key=0, style=solid];
m15_498 -> m15_449  [key=2, style=dotted];
m15_499 -> m15_496  [key=0, style=bold, color=blue];
m15_177 -> m15_178  [key=0, style=solid];
m15_178 -> m15_179  [key=0, style=solid];
m15_178 -> m15_46  [key=2, style=dotted];
m15_178 -> m15_47  [key=2, style=dotted];
m15_179 -> m15_177  [key=0, style=bold, color=blue];
m15_8 -> m15_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m15_8 -> m15_9  [key=0, style=solid];
m15_8 -> m15_16  [key=2, style=dotted];
m15_8 -> m15_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m15_8 -> m15_21  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m15_393 -> m15_394  [key=0, style=solid];
m15_394 -> m15_395  [key=0, style=solid];
m15_394 -> m15_36  [key=2, style=dotted];
m15_394 -> m15_396  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_395 -> m15_393  [key=0, style=bold, color=blue];
m15_464 -> m15_465  [key=0, style=solid];
m15_465 -> m15_466  [key=0, style=solid];
m15_465 -> m15_36  [key=2, style=dotted];
m15_465 -> m15_467  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_466 -> m15_464  [key=0, style=bold, color=blue];
m15_476 -> m15_477  [key=0, style=solid];
m15_477 -> m15_478  [key=0, style=solid];
m15_477 -> m15_36  [key=2, style=dotted];
m15_477 -> m15_479  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_478 -> m15_476  [key=0, style=bold, color=blue];
m15_6 -> m15_7  [key=0, style=solid, color=green];
m15_6 -> m15_8  [key=1, style=dashed, color=darkseagreen4, label=services];
m15_0 -> m15_7  [key=1, style=dashed, color=green, label="Hangfire.DashboardOptions"];
m15_0 -> m15_1  [key=0, style=solid];
m15_0 -> m15_2  [key=1, style=dashed, color=darkseagreen4, label=IApplicationBuilder];
m15_0 -> m15_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m15_0 -> m15_4  [key=1, style=dashed, color=darkseagreen4, label=string];
m15_0 -> m15_5  [key=1, style=dashed, color=darkseagreen4, label=IApplicationBuilder];
m15_0 -> m15_6  [key=1, style=dashed, color=darkseagreen4, label=IApplicationBuilder];
m15_0 -> m15_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m15_0 -> m15_9  [key=1, style=dashed, color=darkseagreen4, label=IApplicationBuilder];
m15_0 -> m15_10  [key=1, style=dashed, color=darkseagreen4, label=IApplicationBuilder];
m15_0 -> m15_11  [key=1, style=dashed, color=darkseagreen4, label=IApplicationBuilder];
m15_1 -> m15_2  [key=0, style=solid, color=red];
m15_1 -> m15_3  [key=0, style=solid];
m15_1 -> m15_5  [key=2, style=dotted];
m15_2 -> m15_12  [key=0, style=solid];
m15_2 -> n13  [key=2, style=dotted];
m15_2 -> m15_14  [key=2, style=dotted];
m15_2 -> m15_3  [key=0, style=solid, color=red];
m15_2 -> m15_6  [key=2, style=dotted, color=red];
m15_2 -> m15_7  [key=2, style=dotted, color=red];
m15_2 -> m15_8  [key=2, style=dotted, color=red];
m15_2 -> m15_10  [key=1, style=dashed, color=red, label="lambda expression"];
m15_3 -> m15_4  [key=0, style=solid];
m15_3 -> m15_5  [key=0, style=solid];
m15_3 -> m15_9  [key=2, style=dotted];
m15_4 -> m15_12  [key=0, style=solid];
m15_4 -> n13  [key=2, style=dotted];
m15_4 -> m15_14  [key=2, style=dotted];
m15_4 -> m15_0  [key=0, style=bold, color=blue];
m15_9 -> m15_16  [key=2, style=dotted];
m15_9 -> m15_10  [key=0, style=solid];
m15_9 -> m15_21  [key=1, style=dashed, color=darkseagreen4, label=routes];
m15_54 -> m15_21  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.DashboardOptions"];
m15_281 -> m15_282  [key=0, style=solid];
m15_282 -> m15_283  [key=0, style=solid];
m15_282 -> m15_36  [key=2, style=dotted];
m15_282 -> m15_284  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_283 -> m15_281  [key=0, style=bold, color=blue];
m15_488 -> m15_489  [key=0, style=solid];
m15_489 -> m15_490  [key=0, style=solid];
m15_489 -> m15_36  [key=2, style=dotted];
m15_489 -> m15_491  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_490 -> m15_488  [key=0, style=bold, color=blue];
m15_78 -> m15_79  [key=0, style=solid];
m15_79 -> m15_80  [key=0, style=solid, color=red];
m15_79 -> m15_83  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m15_79 -> m15_84  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m15_80 -> m15_81  [key=0, style=solid, color=red];
m15_80 -> m15_36  [key=2, style=dotted, color=red];
m15_80 -> m15_82  [key=1, style=dashed, color=red, label="lambda expression"];
m15_81 -> m15_78  [key=0, style=bold, color=blue];
m15_23 -> m15_29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m15_23 -> m15_30  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m15_23 -> m15_31  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>"];
m15_23 -> m15_24  [key=0, style=solid];
m15_23 -> m15_25  [key=1, style=dashed, color=darkseagreen4, label=IApplicationBuilder];
m15_23 -> m15_26  [key=1, style=dashed, color=darkseagreen4, label=IApplicationBuilder];
m15_23 -> m15_27  [key=1, style=dashed, color=darkseagreen4, label=IApplicationBuilder];
m15_23 -> m15_34  [key=1, style=dashed, color=darkseagreen4, label=IApplicationBuilder];
m15_27 -> m15_29  [key=1, style=dashed, color=darkseagreen4, label=services];
m15_27 -> m15_30  [key=1, style=dashed, color=darkseagreen4, label=services];
m15_27 -> m15_31  [key=1, style=dashed, color=darkseagreen4, label=services];
m15_27 -> m15_28  [key=0, style=solid];
m15_27 -> m15_24  [key=0, style=bold, color=blue];
m15_25 -> n13  [key=2, style=dotted];
m15_25 -> m15_14  [key=2, style=dotted];
m15_25 -> m15_35  [key=0, style=solid];
m15_25 -> m15_26  [key=0, style=solid];
m15_25 -> m15_13  [key=2, style=dotted];
m15_25 -> m15_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_26 -> m15_15  [key=2, style=dotted];
m15_26 -> m15_27  [key=0, style=solid];
m15_26 -> m15_19  [key=2, style=dotted];
m15_24 -> m15_25  [key=0, style=solid];
m15_24 -> m15_26  [key=0, style=solid];
m15_194 -> m15_195  [key=0, style=solid];
m15_195 -> m15_196  [key=0, style=solid];
m15_195 -> m15_36  [key=2, style=dotted];
m15_195 -> m15_197  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_196 -> m15_194  [key=0, style=bold, color=blue];
m15_500 -> m15_501  [key=0, style=solid];
m15_500 -> m15_502  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection>"];
m15_501 -> m15_502  [key=0, style=solid];
m15_501 -> m15_31  [key=2, style=dotted];
m15_502 -> m15_503  [key=0, style=solid];
m15_502 -> m15_504  [key=2, style=dotted];
m15_503 -> m15_500  [key=0, style=bold, color=blue];
m15_450 -> m15_451  [key=0, style=solid];
m15_451 -> m15_452  [key=0, style=solid];
m15_451 -> m15_36  [key=2, style=dotted];
m15_451 -> m15_453  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_452 -> m15_450  [key=0, style=bold, color=blue];
m15_238 -> m15_239  [key=0, style=solid];
m15_239 -> m15_240  [key=0, style=solid];
m15_239 -> m15_36  [key=2, style=dotted];
m15_239 -> m15_241  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_240 -> m15_238  [key=0, style=bold, color=blue];
m15_180 -> m15_181  [key=0, style=solid];
m15_181 -> m15_182  [key=0, style=solid];
m15_181 -> m15_36  [key=2, style=dotted];
m15_181 -> m15_183  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_182 -> m15_180  [key=0, style=bold, color=blue];
m15_381 -> m15_382  [key=0, style=solid];
m15_382 -> m15_383  [key=0, style=solid];
m15_382 -> m15_36  [key=2, style=dotted];
m15_382 -> m15_384  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_383 -> m15_381  [key=0, style=bold, color=blue];
m15_510 -> m15_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_62  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_67  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_80  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_89  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_90  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_93  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_121  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_129  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_130  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_154  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_160  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_161  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_181  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_184  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_195  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_198  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_213  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_216  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_225  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_228  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_239  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_242  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_256  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_259  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_268  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_271  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_282  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_285  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_294  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_297  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_306  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_309  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_320  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_323  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_332  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_335  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_345  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_348  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_357  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_360  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_369  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_372  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_382  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_385  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_394  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_397  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_408  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_411  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_420  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_423  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_432  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_435  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_451  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_454  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_465  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_468  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_477  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_480  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_489  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_492  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_510 -> m15_505  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m15_511 -> m15_38  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m15_511 -> m15_39  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m15_512 -> m15_56  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_513 -> m15_65  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m15_513 -> m15_66  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m15_514 -> m15_75  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_515 -> m15_83  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m15_515 -> m15_84  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m15_516 -> m15_116  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_517 -> m15_116  [key=1, style=dashed, color=darkseagreen4, label=state];
m15_518 -> m15_124  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m15_519 -> m15_150  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m15_520 -> m15_150  [key=1, style=dashed, color=darkseagreen4, label=state];
m17_49 -> m17_50  [key=0, style=solid];
m17_49 -> m17_44  [key=0, style=bold, color=blue];
m17_50 -> m17_51  [key=0, style=solid];
m17_50 -> m17_55  [key=2, style=dotted];
m17_51 -> m17_52  [key=0, style=solid];
m17_51 -> m17_56  [key=2, style=dotted];
m17_52 -> m17_53  [key=0, style=solid];
m17_52 -> m17_57  [key=2, style=dotted];
m17_52 -> m17_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_52 -> m17_54  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_52 -> m17_55  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_53 -> m17_54  [key=0, style=solid];
m17_53 -> m17_57  [key=2, style=dotted];
m17_53 -> m17_66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_53 -> m17_55  [key=1, style=dashed, color=darkseagreen4, label=hour];
m17_54 -> m17_49  [key=0, style=bold, color=blue];
m17_54 -> m17_55  [key=0, style=solid];
m17_54 -> m17_42  [key=2, style=dotted];
m17_54 -> m17_56  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_59 -> m17_60  [key=0, style=solid];
m17_59 -> n81  [key=2, style=dotted];
m17_59 -> m17_61  [key=2, style=dotted];
m17_59 -> m17_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_60 -> m17_61  [key=0, style=solid];
m17_60 -> m17_63  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_60 -> m17_64  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_60 -> m17_58  [key=0, style=bold, color=blue];
m17_61 -> m17_62  [key=0, style=solid];
m17_61 -> m17_63  [key=1, style=dashed, color=darkseagreen4, label=hour];
m17_61 -> m17_64  [key=1, style=dashed, color=darkseagreen4, label=hour];
m17_63 -> m17_64  [key=0, style=solid];
m17_63 -> m17_42  [key=2, style=dotted];
m17_63 -> m17_65  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_64 -> m17_65  [key=0, style=solid];
m17_64 -> m17_67  [key=2, style=dotted];
m17_64 -> m17_62  [key=0, style=bold, color=blue];
m17_62 -> m17_63  [key=0, style=solid];
m17_62 -> m17_64  [key=1, style=dashed, color=darkseagreen4, label=minute];
m17_65 -> m17_66  [key=0, style=solid];
m17_65 -> m17_6  [key=2, style=dotted];
m17_66 -> m17_59  [key=0, style=bold, color=blue];
m17_66 -> m17_67  [key=0, style=solid];
m17_89 -> m17_90  [key=0, style=solid];
m17_89 -> m17_57  [key=2, style=dotted];
m17_89 -> m17_95  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_90 -> m17_91  [key=0, style=solid];
m17_90 -> m17_93  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_90 -> m17_94  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_90 -> m17_57  [key=2, style=dotted];
m17_90 -> m17_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_91 -> m17_92  [key=0, style=solid];
m17_91 -> m17_93  [key=1, style=dashed, color=darkseagreen4, label=hour];
m17_91 -> m17_94  [key=1, style=dashed, color=darkseagreen4, label=hour];
m17_91 -> m17_85  [key=0, style=bold, color=blue];
m17_93 -> m17_94  [key=0, style=solid];
m17_93 -> m17_42  [key=2, style=dotted];
m17_93 -> m17_95  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_93 -> n81  [key=2, style=dotted];
m17_93 -> m17_61  [key=2, style=dotted];
m17_94 -> m17_95  [key=0, style=solid];
m17_94 -> m17_97  [key=2, style=dotted];
m17_94 -> m17_92  [key=0, style=bold, color=blue];
m17_92 -> m17_93  [key=0, style=solid];
m17_92 -> m17_94  [key=1, style=dashed, color=darkseagreen4, label=minute];
m17_95 -> m17_96  [key=0, style=solid];
m17_95 -> m17_6  [key=2, style=dotted];
m17_96 -> m17_89  [key=0, style=bold, color=blue];
m17_96 -> m17_97  [key=0, style=solid];
m17_96 -> m17_98  [key=2, style=dotted];
m17_118 -> m17_1  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_51  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_52  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_71  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_72  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_74  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_86  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_87  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_88  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_89  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_90  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_104  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_105  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_106  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_107  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_118 -> m17_115  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m17_128 -> m17_129  [key=0, style=solid];
m17_129 -> m17_130  [key=0, style=solid];
m17_129 -> m17_133  [key=1, style=dashed, color=darkseagreen4, label=month];
m17_129 -> m17_134  [key=1, style=dashed, color=darkseagreen4, label=month];
m17_130 -> m17_131  [key=0, style=solid];
m17_130 -> m17_133  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_130 -> m17_134  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_133 -> m17_134  [key=0, style=solid];
m17_133 -> m17_42  [key=2, style=dotted];
m17_133 -> m17_135  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_134 -> m17_135  [key=0, style=solid];
m17_134 -> m17_137  [key=2, style=dotted];
m17_131 -> m17_132  [key=0, style=solid];
m17_131 -> m17_133  [key=1, style=dashed, color=darkseagreen4, label=hour];
m17_131 -> m17_134  [key=1, style=dashed, color=darkseagreen4, label=hour];
m17_132 -> m17_133  [key=0, style=solid];
m17_132 -> m17_134  [key=1, style=dashed, color=darkseagreen4, label=minute];
m17_135 -> m17_136  [key=0, style=solid];
m17_135 -> m17_6  [key=2, style=dotted];
m17_136 -> m17_128  [key=0, style=bold, color=blue];
m17_24 -> m17_25  [key=0, style=solid];
m17_110 -> n81  [key=2, style=dotted];
m17_110 -> m17_111  [key=0, style=solid];
m17_110 -> m17_32  [key=2, style=dotted];
m17_55 -> m17_115  [key=0, style=solid];
m17_55 -> m17_56  [key=0, style=solid];
m17_55 -> m17_58  [key=2, style=dotted];
m17_115 -> m17_116  [key=0, style=solid];
m17_115 -> m17_117  [key=2, style=dotted];
m17_115 -> m17_118  [key=2, style=dotted];
m17_116 -> m17_55  [key=0, style=bold, color=blue];
m17_116 -> m17_117  [key=0, style=solid];
m17_116 -> m17_6  [key=2, style=dotted];
m17_44 -> m17_45  [key=0, style=solid];
m17_6 -> m17_7  [key=0, style=solid];
m17_6 -> m17_18  [key=2, style=dotted];
m17_25 -> m17_26  [key=0, style=solid];
m17_25 -> m17_27  [key=2, style=dotted];
m17_26 -> m17_27  [key=0, style=solid];
m17_26 -> m17_28  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_26 -> m17_24  [key=0, style=bold, color=blue];
m17_27 -> m17_28  [key=0, style=solid];
m17_27 -> m17_30  [key=2, style=dotted];
m17_28 -> m17_29  [key=0, style=solid];
m17_28 -> m17_6  [key=2, style=dotted];
m17_29 -> m17_25  [key=0, style=bold, color=blue];
m17_29 -> n81  [key=2, style=dotted];
m17_29 -> m17_30  [key=0, style=solid];
m17_29 -> m17_32  [key=2, style=dotted];
m17_45 -> m17_46  [key=0, style=solid];
m17_45 -> m17_47  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_46 -> m17_47  [key=0, style=solid];
m17_46 -> m17_42  [key=2, style=dotted];
m17_46 -> m17_48  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_47 -> m17_48  [key=0, style=solid];
m17_47 -> m17_50  [key=2, style=dotted];
m17_47 -> m17_45  [key=0, style=bold, color=blue];
m17_48 -> m17_49  [key=0, style=solid];
m17_48 -> m17_6  [key=2, style=dotted];
m17_13 -> m17_14  [key=0, style=solid];
m17_14 -> m17_15  [key=0, style=solid];
m17_14 -> m17_16  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_15 -> m17_16  [key=0, style=solid];
m17_15 -> m17_18  [key=2, style=dotted];
m17_16 -> m17_17  [key=0, style=solid];
m17_16 -> m17_6  [key=2, style=dotted];
m17_17 -> m17_13  [key=0, style=bold, color=blue];
m17_40 -> m17_41  [key=0, style=solid];
m17_40 -> m17_6  [key=2, style=dotted];
m17_41 -> n81  [key=2, style=dotted];
m17_41 -> m17_42  [key=0, style=solid];
m17_41 -> m17_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_41 -> m17_37  [key=0, style=bold, color=blue];
m17_42 -> m17_43  [key=0, style=solid];
m17_42 -> m17_44  [key=2, style=dotted];
m17_43 -> m17_40  [key=0, style=bold, color=blue];
m17_85 -> m17_86  [key=0, style=solid];
m17_85 -> m17_88  [key=2, style=dotted];
m17_86 -> m17_87  [key=0, style=solid];
m17_86 -> m17_15  [key=2, style=dotted];
m17_86 -> n81  [key=2, style=dotted];
m17_86 -> m17_92  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_86 -> m17_6  [key=2, style=dotted];
m17_87 -> m17_88  [key=0, style=solid];
m17_87 -> m17_55  [key=2, style=dotted];
m17_87 -> m17_81  [key=0, style=bold, color=blue];
m17_88 -> m17_89  [key=0, style=solid];
m17_88 -> m17_56  [key=2, style=dotted];
m17_80 -> m17_81  [key=0, style=solid];
m17_74 -> m17_75  [key=0, style=solid];
m17_74 -> m17_57  [key=2, style=dotted];
m17_74 -> m17_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_75 -> m17_76  [key=0, style=solid];
m17_75 -> m17_77  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_75 -> m17_70  [key=0, style=bold, color=blue];
m17_76 -> m17_77  [key=0, style=solid];
m17_76 -> m17_42  [key=2, style=dotted];
m17_76 -> m17_78  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_77 -> m17_78  [key=0, style=solid];
m17_77 -> m17_80  [key=2, style=dotted];
m17_77 -> n81  [key=2, style=dotted];
m17_77 -> m17_36  [key=2, style=dotted];
m17_77 -> m17_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_78 -> m17_79  [key=0, style=solid];
m17_78 -> m17_6  [key=2, style=dotted];
m17_78 -> m17_76  [key=0, style=bold, color=blue];
m17_79 -> m17_74  [key=0, style=bold, color=blue];
m17_79 -> m17_80  [key=0, style=solid];
m17_0 -> m17_1  [key=0, style=solid, color=green];
m17_1 -> m17_2  [key=0, style=solid, color=green];
m17_1 -> m17_3  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_1 -> m17_12  [key=2, style=dotted, color=green];
m17_2 -> m17_3  [key=0, style=solid];
m17_2 -> m17_5  [key=2, style=dotted];
m17_2 -> m17_13  [key=2, style=dotted];
m17_3 -> m17_4  [key=0, style=solid];
m17_3 -> m17_6  [key=2, style=dotted];
m17_3 -> m17_14  [key=2, style=dotted];
m17_4 -> m17_0  [key=0, style=bold, color=blue];
m17_4 -> m17_5  [key=0, style=solid];
m17_4 -> m17_15  [key=2, style=dotted];
m17_4 -> m17_16  [key=2, style=dotted];
m17_4 -> m17_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_104 -> m17_105  [key=0, style=solid];
m17_104 -> m17_55  [key=2, style=dotted];
m17_105 -> m17_106  [key=0, style=solid];
m17_105 -> m17_107  [key=1, style=dashed, color=darkseagreen4, label=month];
m17_105 -> m17_56  [key=2, style=dotted];
m17_106 -> m17_107  [key=0, style=solid];
m17_106 -> m17_42  [key=2, style=dotted];
m17_106 -> m17_108  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_106 -> m17_57  [key=2, style=dotted];
m17_106 -> m17_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_107 -> m17_108  [key=0, style=solid];
m17_107 -> m17_110  [key=2, style=dotted];
m17_107 -> m17_57  [key=2, style=dotted];
m17_107 -> m17_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_108 -> m17_109  [key=0, style=solid];
m17_108 -> m17_6  [key=2, style=dotted];
m17_108 -> m17_103  [key=0, style=bold, color=blue];
m17_109 -> m17_104  [key=0, style=bold, color=blue];
m17_109 -> m17_110  [key=0, style=solid];
m17_19 -> m17_20  [key=0, style=solid];
m17_23 -> m17_19  [key=0, style=bold, color=blue];
m17_7 -> m17_8  [key=0, style=solid];
m17_7 -> m17_15  [key=2, style=dotted];
m17_7 -> m17_16  [key=2, style=dotted];
m17_7 -> m17_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_8 -> m17_9  [key=0, style=solid, color=red];
m17_8 -> m17_10  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_8 -> m17_19  [key=2, style=dotted];
m17_9 -> m17_10  [key=0, style=solid, color=red];
m17_9 -> m17_12  [key=2, style=dotted, color=red];
m17_9 -> m17_15  [key=2, style=dotted];
m17_9 -> m17_16  [key=2, style=dotted];
m17_9 -> m17_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_10 -> m17_11  [key=0, style=solid];
m17_10 -> m17_6  [key=2, style=dotted];
m17_10 -> m17_15  [key=2, style=dotted];
m17_10 -> m17_16  [key=2, style=dotted];
m17_10 -> m17_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_11 -> m17_7  [key=0, style=bold, color=blue];
m17_11 -> m17_0  [key=0, style=bold, color=blue];
m17_119 -> m17_120  [key=0, style=solid];
m17_120 -> m17_121  [key=0, style=solid];
m17_120 -> m17_123  [key=1, style=dashed, color=darkseagreen4, label=month];
m17_120 -> m17_124  [key=1, style=dashed, color=darkseagreen4, label=month];
m17_121 -> m17_122  [key=0, style=solid];
m17_121 -> m17_123  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_121 -> m17_124  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_123 -> m17_124  [key=0, style=solid];
m17_123 -> m17_42  [key=2, style=dotted];
m17_123 -> m17_125  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_124 -> m17_125  [key=0, style=solid];
m17_124 -> m17_127  [key=2, style=dotted];
m17_122 -> m17_123  [key=0, style=solid];
m17_122 -> m17_124  [key=1, style=dashed, color=darkseagreen4, label=hour];
m17_125 -> m17_126  [key=0, style=solid];
m17_125 -> m17_6  [key=2, style=dotted];
m17_126 -> m17_119  [key=0, style=bold, color=blue];
m17_56 -> m17_57  [key=0, style=solid];
m17_56 -> m17_6  [key=2, style=dotted];
m17_57 -> m17_51  [key=0, style=bold, color=blue];
m17_98 -> m17_99  [key=0, style=solid];
m17_99 -> m17_100  [key=0, style=solid];
m17_99 -> m17_101  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_100 -> m17_101  [key=0, style=solid];
m17_100 -> m17_103  [key=2, style=dotted];
m17_100 -> m17_102  [key=2, style=dotted];
m17_101 -> m17_102  [key=0, style=solid];
m17_101 -> m17_6  [key=2, style=dotted];
m17_101 -> m17_99  [key=0, style=bold, color=blue];
m17_102 -> m17_98  [key=0, style=bold, color=blue];
m17_20 -> m17_21  [key=0, style=solid];
m17_20 -> m17_22  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_21 -> m17_22  [key=0, style=solid];
m17_21 -> m17_24  [key=2, style=dotted];
m17_21 -> m17_23  [key=2, style=dotted];
m17_22 -> m17_23  [key=0, style=solid];
m17_22 -> m17_6  [key=2, style=dotted];
m17_22 -> m17_20  [key=0, style=bold, color=blue];
m17_58 -> m17_59  [key=0, style=solid];
m17_117 -> m17_111  [key=0, style=bold, color=blue];
m17_69 -> m17_70  [key=0, style=solid];
m17_69 -> m17_71  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_31 -> m17_32  [key=0, style=solid];
m17_32 -> m17_33  [key=0, style=solid];
m17_32 -> m17_34  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_33 -> m17_34  [key=0, style=solid];
m17_33 -> m17_36  [key=2, style=dotted];
m17_34 -> m17_35  [key=0, style=solid];
m17_34 -> m17_6  [key=2, style=dotted];
m17_34 -> n81  [key=2, style=dotted];
m17_34 -> m17_36  [key=2, style=dotted];
m17_34 -> m17_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_35 -> m17_31  [key=0, style=bold, color=blue];
m17_35 -> m17_33  [key=0, style=bold, color=blue];
m17_68 -> m17_69  [key=0, style=solid];
m17_68 -> m17_66  [key=0, style=bold, color=blue];
m17_70 -> m17_71  [key=0, style=solid];
m17_70 -> m17_73  [key=2, style=dotted];
m17_71 -> m17_72  [key=0, style=solid];
m17_71 -> m17_6  [key=2, style=dotted];
m17_71 -> m17_15  [key=2, style=dotted];
m17_71 -> m17_16  [key=2, style=dotted];
m17_71 -> m17_76  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m17_72 -> m17_68  [key=0, style=bold, color=blue];
m17_72 -> m17_73  [key=0, style=solid];
m17_72 -> m17_55  [key=2, style=dotted];
m17_30 -> m17_28  [key=0, style=bold, color=blue];
m17_5 -> m17_6  [key=0, style=solid];
m17_5 -> m17_17  [key=2, style=dotted];
m17_67 -> m17_68  [key=0, style=solid];
m17_67 -> m17_69  [key=2, style=dotted];
m17_103 -> m17_104  [key=0, style=solid];
m17_82 -> m17_83  [key=0, style=solid];
m17_82 -> m17_84  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_82 -> m17_85  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_112 -> m17_113  [key=0, style=solid];
m17_112 -> m17_114  [key=1, style=dashed, color=darkseagreen4, label=month];
m17_112 -> m17_115  [key=1, style=dashed, color=darkseagreen4, label=month];
m17_84 -> m17_82  [key=0, style=bold, color=blue];
m17_84 -> m17_85  [key=0, style=solid];
m17_84 -> m17_42  [key=2, style=dotted];
m17_84 -> m17_86  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_83 -> n81  [key=2, style=dotted];
m17_83 -> m17_84  [key=0, style=solid];
m17_83 -> m17_61  [key=2, style=dotted];
m17_83 -> m17_85  [key=1, style=dashed, color=darkseagreen4, label=hour];
m17_97 -> m17_95  [key=0, style=bold, color=blue];
m17_111 -> m17_109  [key=0, style=bold, color=blue];
m17_111 -> m17_112  [key=0, style=solid];
m17_114 -> m17_112  [key=0, style=bold, color=blue];
m17_114 -> m17_115  [key=0, style=solid];
m17_114 -> m17_42  [key=2, style=dotted];
m17_114 -> m17_116  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_113 -> m17_114  [key=0, style=solid];
m17_113 -> m17_69  [key=2, style=dotted];
m17_113 -> m17_115  [key=1, style=dashed, color=darkseagreen4, label=day];
m17_37 -> m17_38  [key=0, style=solid];
m17_39 -> m17_37  [key=0, style=bold, color=blue];
m17_39 -> m17_40  [key=0, style=solid];
m17_39 -> m17_43  [key=2, style=dotted];
m17_38 -> m17_39  [key=0, style=solid];
m17_38 -> m17_42  [key=2, style=dotted];
m17_38 -> m17_40  [key=1, style=dashed, color=darkseagreen4, label=expected];
m17_81 -> m17_79  [key=0, style=bold, color=blue];
m17_81 -> m17_82  [key=0, style=solid];
m17_73 -> m17_74  [key=0, style=solid];
m17_73 -> m17_56  [key=2, style=dotted];
m18_18 -> m18_19  [key=0, style=solid];
m18_18 -> m18_28  [key=2, style=dotted];
m18_18 -> m18_29  [key=2, style=dotted];
m18_15 -> m18_19  [key=0, style=solid];
m18_0 -> m18_1  [key=0, style=solid, color=red];
m18_0 -> m18_2  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m18_1 -> m18_2  [key=0, style=solid, color=red];
m18_2 -> m18_3  [key=0, style=solid, color=green];
m18_2 -> m18_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerWatchdogOptions"];
m18_3 -> m18_0  [key=0, style=bold, color=blue];
m18_3 -> m18_4  [key=0, style=solid, color=green];
m18_3 -> m18_5  [key=0, style=solid, color=green];
m18_8 -> m18_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m18_8 -> m18_9  [key=0, style=solid, color=red];
m18_10 -> m18_11  [key=0, style=solid];
m18_10 -> m18_16  [key=2, style=dotted];
m18_10 -> m18_12  [key=1, style=dashed, color=darkseagreen4, label=serversRemoved];
m18_10 -> m18_23  [key=2, style=dotted];
m18_13 -> m18_14  [key=0, style=solid];
m18_13 -> m18_19  [key=2, style=dotted];
m18_13 -> m18_16  [key=0, style=solid];
m18_9 -> m18_10  [key=0, style=solid];
m18_9 -> m18_15  [key=2, style=dotted];
m18_9 -> m18_22  [key=2, style=dotted];
m18_9 -> m18_11  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m18_11 -> m18_13  [key=0, style=solid];
m18_11 -> m18_12  [key=0, style=solid];
m18_11 -> m18_24  [key=2, style=dotted];
m18_11 -> m18_21  [key=2, style=dotted];
m18_11 -> m18_16  [key=1, style=dashed, color=darkseagreen4, label=job];
m18_11 -> m18_17  [key=1, style=dashed, color=darkseagreen4, label=job];
m18_11 -> m18_18  [key=1, style=dashed, color=darkseagreen4, label=job];
m18_12 -> m18_13  [key=0, style=solid];
m18_12 -> m18_17  [key=2, style=dotted];
m18_12 -> m18_18  [key=2, style=dotted];
m18_14 -> m18_8  [key=0, style=bold, color=blue];
m18_14 -> m18_15  [key=0, style=solid];
m18_14 -> m18_16  [key=0, style=solid];
m18_14 -> m18_25  [key=2, style=dotted];
m18_14 -> m18_26  [key=2, style=dotted];
m18_14 -> m18_14  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m18_4 -> m18_6  [key=0, style=solid, color=green];
m18_4 -> n13  [key=2, style=dotted, color=green];
m18_4 -> m18_5  [key=0, style=solid, color=red];
m18_4 -> m18_14  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m18_5 -> m18_6  [key=0, style=solid, color=red];
m18_5 -> m18_13  [key=1, style=dashed, color=red, label=job];
m18_5 -> m18_16  [key=1, style=dashed, color=red, label=job];
m18_5 -> m18_17  [key=1, style=dashed, color=red, label=job];
m18_5 -> m18_18  [key=1, style=dashed, color=red, label=job];
m18_6 -> m18_2  [key=0, style=bold, color=blue];
m18_6 -> m18_7  [key=0, style=solid, color=red];
m18_6 -> m18_18  [key=1, style=dashed, color=red, label=queueName];
m18_16 -> m18_6  [key=0, style=solid, color=red];
m18_16 -> m18_17  [key=0, style=solid];
m18_19 -> m18_4  [key=0, style=bold, color=blue];
m18_17 -> m18_18  [key=0, style=solid];
m18_17 -> m18_27  [key=2, style=dotted];
m18_7 -> m18_8  [key=0, style=solid, color=red];
m18_7 -> m18_20  [key=2, style=dotted, color=red];
m18_7 -> m18_21  [key=2, style=dotted, color=red];
m18_7 -> m18_10  [key=1, style=dashed, color=red, label=idAndQueue];
m18_7 -> m18_12  [key=1, style=dashed, color=red, label=idAndQueue];
m18_23 -> m18_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerWatchdog"];
m18_23 -> m18_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerWatchdog"];
m18_23 -> m18_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerWatchdog"];
m18_30 -> m18_1  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerFetcher"];
m18_30 -> m18_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerFetcher"];
m18_30 -> m18_7  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerFetcher"];
m18_30 -> m18_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerFetcher"];
m20_0 -> m20_1  [key=0, style=solid, color=red];
m20_1 -> m20_2  [key=0, style=solid, color=green];
m20_1 -> m20_4  [key=2, style=dotted, color=red];
m20_2 -> m20_3  [key=0, style=solid, color=green];
m20_2 -> m20_4  [key=2, style=dotted, color=green];
m20_3 -> m20_0  [key=0, style=bold, color=blue];
m20_5 -> m20_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerWatchdogOptions"];
m20_5 -> m20_2  [key=1, style=dashed, color=green, label="Hangfire.Server.ServerWatchdogOptions"];
m21_19 -> m21_20  [key=0, style=solid];
m21_19 -> m21_21  [key=1, style=dashed, color=darkseagreen4, label=string];
m21_20 -> m21_21  [key=0, style=solid];
m21_21 -> m21_22  [key=0, style=solid];
m21_21 -> m21_17  [key=2, style=dotted];
m21_21 -> m21_18  [key=2, style=dotted];
m21_22 -> m21_19  [key=0, style=bold, color=blue];
m21_204 -> m21_205  [key=0, style=solid];
m21_204 -> m21_206  [key=1, style=dashed, color=darkseagreen4, label=string];
m21_205 -> m21_206  [key=0, style=solid];
m21_206 -> m21_207  [key=0, style=solid];
m21_206 -> m21_17  [key=2, style=dotted];
m21_206 -> m21_156  [key=2, style=dotted];
m21_207 -> m21_208  [key=0, style=solid];
m21_207 -> m21_38  [key=2, style=dotted];
m21_207 -> m21_209  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_208 -> m21_204  [key=0, style=bold, color=blue];
m21_225 -> m21_269  [key=1, style=dashed, color=darkseagreen4, label=string];
m21_225 -> m21_262  [key=0, style=solid];
m21_225 -> m21_287  [key=1, style=dashed, color=darkseagreen4, label=string];
m21_225 -> m21_270  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m21_269 -> m21_72  [key=2, style=dotted];
m21_269 -> m21_73  [key=2, style=dotted];
m21_269 -> m21_270  [key=0, style=solid];
m21_269 -> m21_286  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_271 -> m21_67  [key=2, style=dotted];
m21_271 -> m21_272  [key=0, style=solid];
m21_271 -> m21_277  [key=1, style=dashed, color=darkseagreen4, label=result];
m21_271 -> m21_279  [key=1, style=dashed, color=darkseagreen4, label=result];
m21_263 -> m21_269  [key=1, style=dashed, color=darkseagreen4, label=dates];
m21_263 -> n116  [key=2, style=dotted];
m21_263 -> m21_264  [key=0, style=solid];
m21_263 -> m21_266  [key=1, style=dashed, color=darkseagreen4, label=dates];
m21_263 -> m21_273  [key=1, style=dashed, color=darkseagreen4, label=dates];
m21_263 -> m21_277  [key=1, style=dashed, color=darkseagreen4, label=dates];
m21_265 -> m21_269  [key=0, style=solid];
m21_265 -> m21_266  [key=0, style=solid];
m21_270 -> m21_271  [key=0, style=solid];
m21_270 -> m21_282  [key=2, style=dotted];
m21_270 -> m21_275  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m21_272 -> m21_273  [key=0, style=solid];
m21_272 -> m21_275  [key=1, style=dashed, color=darkseagreen4, label=i];
m21_272 -> m21_277  [key=1, style=dashed, color=darkseagreen4, label=i];
m21_272 -> m21_278  [key=1, style=dashed, color=darkseagreen4, label=i];
m21_277 -> m21_278  [key=0, style=solid];
m21_277 -> m21_285  [key=2, style=dotted];
m21_279 -> m21_280  [key=0, style=solid];
m21_262 -> m21_263  [key=0, style=solid];
m21_262 -> m21_266  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m21_262 -> m21_267  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m21_264 -> m21_265  [key=0, style=solid];
m21_264 -> m21_268  [key=1, style=dashed, color=darkseagreen4, label=i];
m21_266 -> m21_267  [key=0, style=solid];
m21_266 -> m21_181  [key=2, style=dotted];
m21_273 -> m21_279  [key=0, style=solid];
m21_273 -> m21_274  [key=0, style=solid];
m21_268 -> m21_265  [key=0, style=solid];
m21_268 -> m21_268  [key=1, style=dashed, color=darkseagreen4, label=i];
m21_275 -> m21_277  [key=0, style=solid];
m21_275 -> m21_276  [key=0, style=solid];
m21_275 -> m21_283  [key=2, style=dotted];
m21_275 -> m21_284  [key=2, style=dotted];
m21_278 -> m21_273  [key=0, style=solid];
m21_278 -> m21_278  [key=1, style=dashed, color=darkseagreen4, label=i];
m21_276 -> m21_277  [key=0, style=solid];
m21_267 -> m21_268  [key=0, style=solid];
m21_267 -> m21_267  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m21_267 -> m21_281  [key=2, style=dotted];
m21_274 -> m21_275  [key=0, style=solid];
m21_280 -> m21_225  [key=0, style=bold, color=blue];
m21_101 -> m21_298  [key=1, style=dashed, color=darkseagreen4, label=string];
m21_101 -> m21_291  [key=0, style=solid];
m21_101 -> m21_315  [key=1, style=dashed, color=darkseagreen4, label=string];
m21_101 -> m21_299  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m21_298 -> m21_72  [key=2, style=dotted];
m21_298 -> m21_73  [key=2, style=dotted];
m21_298 -> m21_299  [key=0, style=solid];
m21_298 -> m21_314  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_297 -> m21_72  [key=2, style=dotted];
m21_297 -> m21_73  [key=2, style=dotted];
m21_297 -> m21_298  [key=0, style=solid];
m21_297 -> m21_311  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_297 -> m21_302  [key=1, style=dashed, color=darkseagreen4, label=stringDates];
m21_300 -> m21_67  [key=2, style=dotted];
m21_300 -> m21_301  [key=0, style=solid];
m21_300 -> m21_306  [key=1, style=dashed, color=darkseagreen4, label=result];
m21_300 -> m21_308  [key=1, style=dashed, color=darkseagreen4, label=result];
m21_299 -> m21_300  [key=0, style=solid];
m21_299 -> m21_282  [key=2, style=dotted];
m21_299 -> m21_304  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m21_294 -> m21_297  [key=0, style=solid];
m21_294 -> m21_295  [key=0, style=solid];
m21_293 -> m21_297  [key=1, style=dashed, color=darkseagreen4, label=dates];
m21_293 -> n116  [key=2, style=dotted];
m21_293 -> m21_294  [key=0, style=solid];
m21_293 -> m21_295  [key=1, style=dashed, color=darkseagreen4, label=dates];
m21_293 -> m21_306  [key=1, style=dashed, color=darkseagreen4, label=dates];
m21_302 -> m21_303  [key=0, style=solid];
m21_302 -> m21_308  [key=0, style=solid];
m21_301 -> m21_302  [key=0, style=solid];
m21_301 -> m21_304  [key=1, style=dashed, color=darkseagreen4, label=i];
m21_301 -> m21_306  [key=1, style=dashed, color=darkseagreen4, label=i];
m21_301 -> m21_307  [key=1, style=dashed, color=darkseagreen4, label=i];
m21_306 -> m21_307  [key=0, style=solid];
m21_306 -> m21_285  [key=2, style=dotted];
m21_308 -> m21_309  [key=0, style=solid];
m21_291 -> m21_294  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m21_291 -> m21_292  [key=0, style=solid];
m21_291 -> m21_295  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m21_291 -> m21_296  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m21_304 -> m21_306  [key=0, style=solid];
m21_304 -> m21_305  [key=0, style=solid];
m21_304 -> m21_283  [key=2, style=dotted];
m21_304 -> m21_284  [key=2, style=dotted];
m21_292 -> m21_294  [key=1, style=dashed, color=darkseagreen4, label=startDate];
m21_292 -> m21_293  [key=0, style=solid];
m21_292 -> m21_310  [key=2, style=dotted];
m21_296 -> m21_294  [key=0, style=solid];
m21_296 -> m21_296  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m21_296 -> m21_310  [key=2, style=dotted];
m21_295 -> m21_296  [key=0, style=solid];
m21_295 -> m21_181  [key=2, style=dotted];
m21_307 -> m21_302  [key=0, style=solid];
m21_307 -> m21_307  [key=1, style=dashed, color=darkseagreen4, label=i];
m21_303 -> m21_304  [key=0, style=solid];
m21_305 -> m21_306  [key=0, style=solid];
m21_309 -> m21_101  [key=0, style=bold, color=blue];
m21_226 -> m21_227  [key=0, style=solid];
m21_227 -> m21_228  [key=0, style=solid];
m21_228 -> m21_229  [key=0, style=solid];
m21_228 -> m21_225  [key=2, style=dotted];
m21_229 -> m21_226  [key=0, style=bold, color=blue];
m21_366 -> m21_367  [key=0, style=solid];
m21_367 -> m21_368  [key=0, style=solid];
m21_369 -> m21_370  [key=0, style=solid];
m21_369 -> m21_121  [key=2, style=dotted];
m21_369 -> m21_377  [key=1, style=dashed, color=darkseagreen4, label=queues];
m21_370 -> m21_371  [key=0, style=solid];
m21_370 -> m21_68  [key=2, style=dotted];
m21_370 -> m21_372  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_370 -> m21_373  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_370 -> m21_374  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_370 -> m21_375  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_370 -> m21_376  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_370 -> m21_379  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_370 -> m21_380  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_380 -> m21_70  [key=2, style=dotted];
m21_380 -> m21_381  [key=0, style=solid];
m21_368 -> m21_369  [key=0, style=solid];
m21_368 -> m21_383  [key=2, style=dotted];
m21_368 -> m21_371  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_389  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_372  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_395  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_373  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_401  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_374  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_407  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_375  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_414  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_376  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_421  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_379  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_427  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_368 -> m21_381  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_377 -> m21_380  [key=0, style=solid];
m21_377 -> m21_378  [key=0, style=solid];
m21_371 -> m21_69  [key=2, style=dotted];
m21_371 -> m21_372  [key=0, style=solid];
m21_371 -> m21_384  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_371 -> m21_388  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_372 -> m21_69  [key=2, style=dotted];
m21_372 -> m21_373  [key=0, style=solid];
m21_372 -> m21_391  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_372 -> m21_394  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_373 -> m21_69  [key=2, style=dotted];
m21_373 -> m21_374  [key=0, style=solid];
m21_373 -> m21_397  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_373 -> m21_400  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_374 -> m21_69  [key=2, style=dotted];
m21_374 -> m21_375  [key=0, style=solid];
m21_374 -> m21_403  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_374 -> m21_406  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_375 -> m21_69  [key=2, style=dotted];
m21_375 -> m21_376  [key=0, style=solid];
m21_375 -> m21_409  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_375 -> m21_413  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_376 -> m21_69  [key=2, style=dotted];
m21_376 -> m21_377  [key=0, style=solid];
m21_376 -> m21_417  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_376 -> m21_420  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_379 -> m21_69  [key=2, style=dotted];
m21_379 -> m21_377  [key=0, style=solid];
m21_379 -> m21_423  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_379 -> m21_426  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_381 -> m21_382  [key=0, style=solid];
m21_378 -> m21_379  [key=0, style=solid];
m21_378 -> m21_424  [key=1, style=dashed, color=darkseagreen4, label=queueName];
m21_382 -> m21_366  [key=0, style=bold, color=blue];
m21_230 -> m21_231  [key=0, style=solid];
m21_230 -> m21_232  [key=1, style=dashed, color=darkseagreen4, label=string];
m21_230 -> m21_236  [key=1, style=dashed, color=darkseagreen4, label=string];
m21_237 -> m21_72  [key=2, style=dotted];
m21_237 -> m21_73  [key=2, style=dotted];
m21_237 -> m21_238  [key=0, style=solid];
m21_237 -> m21_242  [key=1, style=dashed, color=darkseagreen4, label=history];
m21_231 -> m21_232  [key=0, style=solid];
m21_232 -> m21_233  [key=0, style=solid];
m21_232 -> m21_17  [key=2, style=dotted];
m21_232 -> m21_244  [key=2, style=dotted];
m21_232 -> m21_238  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_232 -> m21_239  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_232 -> m21_240  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_232 -> m21_241  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_232 -> m21_242  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_236 -> m21_237  [key=0, style=solid];
m21_236 -> m21_17  [key=2, style=dotted];
m21_236 -> m21_131  [key=2, style=dotted];
m21_242 -> m21_243  [key=0, style=solid];
m21_242 -> m21_246  [key=2, style=dotted];
m21_242 -> m21_247  [key=2, style=dotted];
m21_242 -> m21_245  [key=2, style=dotted];
m21_242 -> m21_248  [key=2, style=dotted];
m21_242 -> m21_249  [key=2, style=dotted];
m21_242 -> m21_250  [key=2, style=dotted];
m21_242 -> m21_251  [key=2, style=dotted];
m21_242 -> m21_252  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_242 -> m21_256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_242 -> m21_259  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_238 -> m21_239  [key=0, style=solid];
m21_238 -> m21_240  [key=0, style=solid];
m21_238 -> m21_245  [key=2, style=dotted];
m21_233 -> m21_234  [key=0, style=solid];
m21_233 -> m21_235  [key=0, style=solid];
m21_239 -> m21_82  [key=2, style=dotted];
m21_239 -> m21_240  [key=0, style=solid];
m21_240 -> m21_242  [key=0, style=solid];
m21_240 -> m21_241  [key=0, style=solid];
m21_240 -> m21_245  [key=2, style=dotted];
m21_241 -> m21_242  [key=0, style=solid];
m21_241 -> m21_82  [key=2, style=dotted];
m21_235 -> m21_236  [key=0, style=solid];
m21_235 -> m21_242  [key=1, style=dashed, color=darkseagreen4, label=hiddenProperties];
m21_235 -> m21_253  [key=1, style=dashed, color=darkseagreen4, label=hiddenProperties];
m21_234 -> m21_243  [key=0, style=solid];
m21_243 -> m21_230  [key=0, style=bold, color=blue];
m21_362 -> m21_363  [key=0, style=solid];
m21_363 -> m21_364  [key=0, style=solid];
m21_364 -> m21_365  [key=0, style=solid];
m21_364 -> m21_18  [key=2, style=dotted];
m21_365 -> m21_362  [key=0, style=bold, color=blue];
m21_96 -> m21_429  [key=0, style=solid];
m21_429 -> m21_432  [key=0, style=solid];
m21_429 -> m21_433  [key=2, style=dotted];
m21_429 -> m21_434  [key=2, style=dotted];
m21_431 -> m21_432  [key=0, style=solid];
m21_430 -> m21_431  [key=0, style=solid];
m21_432 -> m21_96  [key=0, style=bold, color=blue];
m21_359 -> m21_360  [key=0, style=solid];
m21_90 -> m21_91  [key=0, style=solid];
m21_80 -> m21_81  [key=0, style=solid];
m21_80 -> m21_82  [key=2, style=dotted];
m21_91 -> m21_92  [key=0, style=solid];
m21_91 -> m21_93  [key=2, style=dotted];
m21_91 -> m21_94  [key=2, style=dotted];
m21_91 -> m21_95  [key=2, style=dotted];
m21_91 -> m21_96  [key=2, style=dotted];
m21_91 -> m21_46  [key=2, style=dotted];
m21_88 -> m21_89  [key=0, style=solid];
m21_88 -> m21_82  [key=2, style=dotted];
m21_92 -> m21_90  [key=0, style=bold, color=blue];
m21_74 -> m21_75  [key=0, style=solid];
m21_79 -> m21_80  [key=0, style=solid];
m21_81 -> m21_79  [key=0, style=bold, color=blue];
m21_83 -> m21_84  [key=0, style=solid];
m21_87 -> m21_88  [key=0, style=solid];
m21_89 -> m21_87  [key=0, style=bold, color=blue];
m21_135 -> m21_136  [key=0, style=solid];
m21_286 -> m21_287  [key=0, style=solid];
m21_314 -> m21_315  [key=0, style=solid];
m21_311 -> m21_312  [key=0, style=solid];
m21_350 -> m21_351  [key=0, style=solid];
m21_353 -> m21_354  [key=0, style=solid];
m21_41 -> m21_42  [key=0, style=solid];
m21_47 -> m21_48  [key=0, style=solid];
m21_147 -> m21_148  [key=0, style=solid];
m21_157 -> m21_158  [key=0, style=solid];
m21_200 -> m21_201  [key=0, style=solid];
m21_209 -> m21_210  [key=0, style=solid];
m21_217 -> m21_218  [key=0, style=solid];
m21_252 -> m21_253  [key=0, style=solid];
m21_256 -> m21_257  [key=0, style=solid];
m21_259 -> m21_260  [key=0, style=solid];
m21_75 -> m21_76  [key=0, style=solid];
m21_75 -> m21_77  [key=2, style=dotted];
m21_75 -> m21_78  [key=2, style=dotted];
m21_84 -> m21_85  [key=0, style=solid];
m21_84 -> m21_77  [key=2, style=dotted];
m21_84 -> m21_86  [key=2, style=dotted];
m21_126 -> m21_82  [key=2, style=dotted];
m21_126 -> m21_127  [key=0, style=solid];
m21_136 -> m21_137  [key=0, style=solid];
m21_136 -> m21_138  [key=2, style=dotted];
m21_136 -> m21_139  [key=2, style=dotted];
m21_136 -> m21_140  [key=2, style=dotted];
m21_136 -> m21_45  [key=2, style=dotted];
m21_133 -> m21_82  [key=2, style=dotted];
m21_133 -> m21_134  [key=0, style=solid];
m21_76 -> m21_74  [key=0, style=bold, color=blue];
m21_340 -> m21_82  [key=2, style=dotted];
m21_340 -> m21_341  [key=0, style=solid];
m21_348 -> m21_82  [key=2, style=dotted];
m21_348 -> m21_349  [key=0, style=solid];
m21_351 -> m21_96  [key=2, style=dotted];
m21_351 -> m21_352  [key=0, style=solid];
m21_351 -> m21_342  [key=2, style=dotted];
m21_42 -> m21_46  [key=2, style=dotted];
m21_42 -> m21_43  [key=0, style=solid];
m21_42 -> m21_44  [key=2, style=dotted];
m21_42 -> m21_45  [key=2, style=dotted];
m21_148 -> m21_46  [key=2, style=dotted];
m21_148 -> m21_149  [key=0, style=solid];
m21_148 -> m21_150  [key=2, style=dotted];
m21_148 -> m21_45  [key=2, style=dotted];
m21_158 -> m21_46  [key=2, style=dotted];
m21_158 -> m21_159  [key=0, style=solid];
m21_158 -> m21_160  [key=2, style=dotted];
m21_158 -> m21_45  [key=2, style=dotted];
m21_201 -> m21_46  [key=2, style=dotted];
m21_201 -> m21_202  [key=0, style=solid];
m21_201 -> m21_203  [key=2, style=dotted];
m21_201 -> m21_45  [key=2, style=dotted];
m21_210 -> m21_46  [key=2, style=dotted];
m21_210 -> m21_211  [key=0, style=solid];
m21_210 -> m21_203  [key=2, style=dotted];
m21_210 -> m21_45  [key=2, style=dotted];
m21_85 -> m21_83  [key=0, style=bold, color=blue];
m21_137 -> m21_135  [key=0, style=bold, color=blue];
m21_287 -> m21_288  [key=0, style=solid];
m21_287 -> m21_289  [key=2, style=dotted];
m21_287 -> m21_290  [key=2, style=dotted];
m21_288 -> m21_286  [key=0, style=bold, color=blue];
m21_315 -> m21_316  [key=0, style=solid];
m21_315 -> m21_77  [key=2, style=dotted];
m21_316 -> m21_314  [key=0, style=bold, color=blue];
m21_313 -> m21_311  [key=0, style=bold, color=blue];
m21_312 -> m21_313  [key=0, style=solid];
m21_312 -> m21_289  [key=2, style=dotted];
m21_344 -> m21_17  [key=2, style=dotted];
m21_344 -> m21_345  [key=0, style=solid];
m21_344 -> m21_78  [key=2, style=dotted];
m21_354 -> m21_355  [key=0, style=solid];
m21_354 -> m21_356  [key=2, style=dotted];
m21_354 -> m21_357  [key=2, style=dotted];
m21_354 -> m21_358  [key=2, style=dotted];
m21_354 -> m21_359  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_339 -> m21_340  [key=0, style=solid];
m21_339 -> m21_341  [key=0, style=solid];
m21_339 -> m21_342  [key=2, style=dotted];
m21_347 -> m21_348  [key=0, style=solid];
m21_347 -> m21_349  [key=0, style=solid];
m21_347 -> m21_342  [key=2, style=dotted];
m21_334 -> m21_17  [key=2, style=dotted];
m21_334 -> m21_335  [key=0, style=solid];
m21_334 -> m21_336  [key=2, style=dotted];
m21_334 -> m21_337  [key=2, style=dotted];
m21_334 -> m21_78  [key=2, style=dotted];
m21_352 -> m21_350  [key=0, style=bold, color=blue];
m21_355 -> m21_353  [key=0, style=bold, color=blue];
m21_398 -> m21_12  [key=2, style=dotted];
m21_398 -> m21_399  [key=0, style=solid];
m21_404 -> m21_12  [key=2, style=dotted];
m21_404 -> m21_405  [key=0, style=solid];
m21_418 -> m21_12  [key=2, style=dotted];
m21_418 -> m21_419  [key=0, style=solid];
m21_189 -> m21_18  [key=2, style=dotted];
m21_189 -> m21_190  [key=0, style=solid];
m21_189 -> m21_77  [key=2, style=dotted];
m21_195 -> m21_18  [key=2, style=dotted];
m21_195 -> m21_196  [key=0, style=solid];
m21_195 -> m21_77  [key=2, style=dotted];
m21_424 -> m21_18  [key=2, style=dotted];
m21_424 -> m21_425  [key=0, style=solid];
m21_424 -> m21_77  [key=2, style=dotted];
m21_43 -> m21_41  [key=0, style=bold, color=blue];
m21_49 -> m21_47  [key=0, style=bold, color=blue];
m21_48 -> m21_49  [key=0, style=solid];
m21_48 -> m21_48  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, HangFire.Storage.Monitoring.ProcessingJobDto>"];
m21_122 -> m21_123  [key=0, style=solid];
m21_125 -> m21_126  [key=0, style=solid];
m21_128 -> m21_129  [key=0, style=solid];
m21_132 -> m21_133  [key=0, style=solid];
m21_149 -> m21_147  [key=0, style=bold, color=blue];
m21_183 -> m21_156  [key=2, style=dotted];
m21_183 -> m21_184  [key=0, style=solid];
m21_183 -> m21_77  [key=2, style=dotted];
m21_159 -> m21_157  [key=0, style=bold, color=blue];
m21_182 -> m21_183  [key=0, style=solid];
m21_185 -> m21_186  [key=0, style=solid];
m21_188 -> m21_189  [key=0, style=solid];
m21_191 -> m21_192  [key=0, style=solid];
m21_194 -> m21_195  [key=0, style=solid];
m21_197 -> m21_198  [key=0, style=solid];
m21_202 -> m21_200  [key=0, style=bold, color=blue];
m21_211 -> m21_209  [key=0, style=bold, color=blue];
m21_219 -> m21_217  [key=0, style=bold, color=blue];
m21_218 -> m21_219  [key=0, style=solid];
m21_218 -> m21_220  [key=2, style=dotted];
m21_218 -> m21_45  [key=2, style=dotted];
m21_253 -> m21_254  [key=0, style=solid];
m21_253 -> m21_255  [key=2, style=dotted];
m21_129 -> m21_131  [key=2, style=dotted];
m21_129 -> m21_130  [key=0, style=solid];
m21_129 -> m21_77  [key=2, style=dotted];
m21_254 -> m21_252  [key=0, style=bold, color=blue];
m21_258 -> m21_256  [key=0, style=bold, color=blue];
m21_257 -> m21_258  [key=0, style=solid];
m21_261 -> m21_259  [key=0, style=bold, color=blue];
m21_260 -> m21_261  [key=0, style=solid];
m21_389 -> m21_390  [key=0, style=solid];
m21_395 -> m21_396  [key=0, style=solid];
m21_401 -> m21_402  [key=0, style=solid];
m21_407 -> m21_408  [key=0, style=solid];
m21_414 -> m21_415  [key=0, style=solid];
m21_414 -> m21_416  [key=2, style=dotted];
m21_421 -> m21_422  [key=0, style=solid];
m21_427 -> m21_428  [key=0, style=solid];
m21_384 -> m21_385  [key=0, style=solid];
m21_388 -> m21_389  [key=0, style=solid];
m21_391 -> m21_392  [key=0, style=solid];
m21_394 -> m21_395  [key=0, style=solid];
m21_397 -> m21_398  [key=0, style=solid];
m21_400 -> m21_401  [key=0, style=solid];
m21_403 -> m21_404  [key=0, style=solid];
m21_406 -> m21_407  [key=0, style=solid];
m21_409 -> m21_410  [key=0, style=solid];
m21_413 -> m21_414  [key=0, style=solid];
m21_417 -> m21_418  [key=0, style=solid];
m21_420 -> m21_421  [key=0, style=solid];
m21_423 -> m21_424  [key=0, style=solid];
m21_426 -> m21_427  [key=0, style=solid];
m21_127 -> m21_125  [key=0, style=bold, color=blue];
m21_134 -> m21_132  [key=0, style=bold, color=blue];
m21_343 -> m21_344  [key=0, style=solid];
m21_346 -> m21_348  [key=1, style=dashed, color=darkseagreen4, label="?"];
m21_346 -> m21_347  [key=0, style=solid];
m21_333 -> m21_334  [key=0, style=solid];
m21_338 -> m21_340  [key=1, style=dashed, color=darkseagreen4, label="?"];
m21_338 -> m21_339  [key=0, style=solid];
m21_341 -> m21_338  [key=0, style=bold, color=blue];
m21_349 -> m21_346  [key=0, style=bold, color=blue];
m21_345 -> m21_343  [key=0, style=bold, color=blue];
m21_335 -> m21_333  [key=0, style=bold, color=blue];
m21_399 -> m21_397  [key=0, style=bold, color=blue];
m21_405 -> m21_403  [key=0, style=bold, color=blue];
m21_419 -> m21_417  [key=0, style=bold, color=blue];
m21_190 -> m21_188  [key=0, style=bold, color=blue];
m21_196 -> m21_194  [key=0, style=bold, color=blue];
m21_425 -> m21_423  [key=0, style=bold, color=blue];
m21_123 -> m21_77  [key=2, style=dotted];
m21_123 -> m21_78  [key=2, style=dotted];
m21_123 -> m21_124  [key=0, style=solid];
m21_124 -> m21_122  [key=0, style=bold, color=blue];
m21_130 -> m21_128  [key=0, style=bold, color=blue];
m21_184 -> m21_182  [key=0, style=bold, color=blue];
m21_187 -> m21_185  [key=0, style=bold, color=blue];
m21_186 -> m21_187  [key=0, style=solid];
m21_193 -> m21_191  [key=0, style=bold, color=blue];
m21_192 -> m21_193  [key=0, style=solid];
m21_199 -> m21_197  [key=0, style=bold, color=blue];
m21_198 -> m21_199  [key=0, style=solid];
m21_390 -> m21_388  [key=0, style=bold, color=blue];
m21_396 -> m21_394  [key=0, style=bold, color=blue];
m21_402 -> m21_400  [key=0, style=bold, color=blue];
m21_408 -> m21_406  [key=0, style=bold, color=blue];
m21_415 -> m21_413  [key=0, style=bold, color=blue];
m21_422 -> m21_420  [key=0, style=bold, color=blue];
m21_428 -> m21_426  [key=0, style=bold, color=blue];
m21_386 -> m21_384  [key=0, style=bold, color=blue];
m21_385 -> m21_386  [key=0, style=solid];
m21_385 -> m21_387  [key=2, style=dotted];
m21_393 -> m21_391  [key=0, style=bold, color=blue];
m21_392 -> m21_393  [key=0, style=solid];
m21_392 -> m21_387  [key=2, style=dotted];
m21_411 -> m21_409  [key=0, style=bold, color=blue];
m21_410 -> m21_411  [key=0, style=solid];
m21_410 -> m21_412  [key=2, style=dotted];
m21_360 -> m21_361  [key=0, style=solid];
m21_361 -> m21_359  [key=0, style=bold, color=blue];
m21_0 -> m21_1  [key=0, style=solid];
m21_0 -> m21_2  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m21_1 -> m21_2  [key=0, style=solid];
m21_2 -> m21_3  [key=0, style=solid];
m21_3 -> m21_0  [key=0, style=bold, color=blue];
m21_141 -> m21_142  [key=0, style=solid];
m21_141 -> m21_143  [key=1, style=dashed, color=darkseagreen4, label=int];
m21_142 -> m21_143  [key=0, style=solid];
m21_143 -> m21_144  [key=0, style=solid];
m21_143 -> m21_146  [key=2, style=dotted];
m21_144 -> m21_145  [key=0, style=solid];
m21_144 -> m21_38  [key=2, style=dotted];
m21_144 -> m21_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_145 -> m21_141  [key=0, style=bold, color=blue];
m21_106 -> m21_107  [key=0, style=solid];
m21_119 -> m21_72  [key=2, style=dotted];
m21_119 -> m21_73  [key=2, style=dotted];
m21_119 -> m21_120  [key=0, style=solid];
m21_119 -> m21_135  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_107 -> m21_108  [key=0, style=solid];
m21_108 -> m21_119  [key=1, style=dashed, color=darkseagreen4, label=serverNames];
m21_108 -> m21_109  [key=0, style=solid];
m21_108 -> m21_121  [key=2, style=dotted];
m21_108 -> m21_114  [key=1, style=dashed, color=darkseagreen4, label=serverNames];
m21_113 -> m21_114  [key=0, style=solid];
m21_113 -> m21_68  [key=2, style=dotted];
m21_113 -> m21_116  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_113 -> m21_117  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_113 -> m21_118  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_111 -> m21_67  [key=2, style=dotted];
m21_111 -> m21_119  [key=1, style=dashed, color=darkseagreen4, label=servers];
m21_111 -> m21_112  [key=0, style=solid];
m21_111 -> m21_116  [key=1, style=dashed, color=darkseagreen4, label=servers];
m21_111 -> m21_126  [key=1, style=dashed, color=darkseagreen4, label=servers];
m21_111 -> m21_136  [key=1, style=dashed, color=darkseagreen4, label=servers];
m21_112 -> m21_67  [key=2, style=dotted];
m21_112 -> m21_119  [key=1, style=dashed, color=darkseagreen4, label=queues];
m21_112 -> m21_113  [key=0, style=solid];
m21_112 -> m21_117  [key=1, style=dashed, color=darkseagreen4, label=queues];
m21_112 -> m21_133  [key=1, style=dashed, color=darkseagreen4, label=queues];
m21_112 -> m21_136  [key=1, style=dashed, color=darkseagreen4, label=queues];
m21_118 -> m21_70  [key=2, style=dotted];
m21_118 -> m21_119  [key=0, style=solid];
m21_109 -> m21_111  [key=0, style=solid];
m21_109 -> m21_110  [key=0, style=solid];
m21_114 -> m21_118  [key=0, style=solid];
m21_114 -> m21_115  [key=0, style=solid];
m21_116 -> m21_69  [key=2, style=dotted];
m21_116 -> m21_117  [key=0, style=solid];
m21_116 -> m21_122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_116 -> m21_125  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_117 -> m21_69  [key=2, style=dotted];
m21_117 -> m21_114  [key=0, style=solid];
m21_117 -> m21_128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_117 -> m21_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_110 -> n116  [key=2, style=dotted];
m21_110 -> m21_120  [key=0, style=solid];
m21_115 -> m21_116  [key=0, style=solid];
m21_115 -> m21_117  [key=1, style=dashed, color=darkseagreen4, label=name];
m21_115 -> m21_126  [key=1, style=dashed, color=darkseagreen4, label=name];
m21_115 -> m21_133  [key=1, style=dashed, color=darkseagreen4, label=name];
m21_115 -> m21_123  [key=1, style=dashed, color=darkseagreen4, label=name];
m21_115 -> m21_129  [key=1, style=dashed, color=darkseagreen4, label=name];
m21_120 -> m21_106  [key=0, style=bold, color=blue];
m21_151 -> m21_152  [key=0, style=solid];
m21_151 -> m21_153  [key=1, style=dashed, color=darkseagreen4, label=int];
m21_152 -> m21_153  [key=0, style=solid];
m21_153 -> m21_154  [key=0, style=solid];
m21_153 -> m21_156  [key=2, style=dotted];
m21_154 -> m21_155  [key=0, style=solid];
m21_154 -> m21_38  [key=2, style=dotted];
m21_154 -> m21_157  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_155 -> m21_151  [key=0, style=bold, color=blue];
m21_97 -> m21_98  [key=0, style=solid];
m21_98 -> m21_99  [key=0, style=solid];
m21_99 -> m21_100  [key=0, style=solid];
m21_99 -> m21_101  [key=2, style=dotted];
m21_100 -> m21_97  [key=0, style=bold, color=blue];
m21_23 -> m21_24  [key=0, style=solid];
m21_24 -> m21_25  [key=0, style=solid];
m21_25 -> m21_26  [key=0, style=solid];
m21_25 -> m21_12  [key=2, style=dotted];
m21_26 -> m21_23  [key=0, style=bold, color=blue];
m21_31 -> m21_32  [key=0, style=solid];
m21_31 -> m21_33  [key=1, style=dashed, color=darkseagreen4, label=int];
m21_32 -> m21_33  [key=0, style=solid];
m21_33 -> m21_34  [key=0, style=solid];
m21_33 -> m21_36  [key=2, style=dotted];
m21_34 -> m21_35  [key=0, style=solid];
m21_34 -> m21_37  [key=2, style=dotted];
m21_34 -> m21_38  [key=2, style=dotted];
m21_34 -> m21_39  [key=2, style=dotted];
m21_34 -> m21_40  [key=2, style=dotted];
m21_34 -> m21_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_34 -> m21_47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_35 -> m21_31  [key=0, style=bold, color=blue];
m21_27 -> m21_28  [key=0, style=solid];
m21_28 -> m21_29  [key=0, style=solid];
m21_29 -> m21_30  [key=0, style=solid];
m21_29 -> m21_12  [key=2, style=dotted];
m21_30 -> m21_27  [key=0, style=bold, color=blue];
m21_221 -> m21_222  [key=0, style=solid];
m21_222 -> m21_223  [key=0, style=solid];
m21_223 -> m21_224  [key=0, style=solid];
m21_223 -> m21_225  [key=2, style=dotted];
m21_224 -> m21_221  [key=0, style=bold, color=blue];
m21_179 -> m21_329  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m21_179 -> m21_317  [key=0, style=solid];
m21_179 -> m21_319  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m21_179 -> m21_320  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m21_179 -> m21_321  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m21_179 -> m21_322  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m21_179 -> m21_323  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m21_179 -> m21_326  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m21_179 -> m21_327  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m21_179 -> m21_344  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m21_179 -> m21_354  [key=1, style=dashed, color=darkseagreen4, label="System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>"];
m21_329 -> m21_72  [key=2, style=dotted];
m21_329 -> m21_73  [key=2, style=dotted];
m21_329 -> m21_330  [key=0, style=solid];
m21_329 -> m21_332  [key=2, style=dotted];
m21_329 -> m21_350  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_329 -> m21_353  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_328 -> m21_70  [key=2, style=dotted];
m21_328 -> m21_329  [key=0, style=solid];
m21_319 -> m21_329  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m21_319 -> m21_320  [key=0, style=solid];
m21_319 -> m21_331  [key=2, style=dotted];
m21_319 -> m21_325  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m21_319 -> m21_339  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m21_319 -> m21_340  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m21_319 -> m21_351  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m21_320 -> m21_329  [key=1, style=dashed, color=darkseagreen4, label=states];
m21_320 -> m21_321  [key=0, style=solid];
m21_320 -> m21_331  [key=2, style=dotted];
m21_320 -> m21_327  [key=1, style=dashed, color=darkseagreen4, label=states];
m21_320 -> m21_347  [key=1, style=dashed, color=darkseagreen4, label=states];
m21_320 -> m21_348  [key=1, style=dashed, color=darkseagreen4, label=states];
m21_320 -> m21_351  [key=1, style=dashed, color=darkseagreen4, label=states];
m21_321 -> m21_329  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m21_321 -> m21_321  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m21_321 -> m21_322  [key=0, style=solid];
m21_321 -> m21_325  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m21_321 -> m21_334  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m21_321 -> m21_351  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m21_327 -> m21_69  [key=2, style=dotted];
m21_327 -> m21_323  [key=0, style=solid];
m21_327 -> m21_343  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_327 -> m21_346  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_325 -> m21_69  [key=2, style=dotted];
m21_325 -> m21_326  [key=0, style=solid];
m21_325 -> m21_333  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_325 -> m21_338  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_322 -> m21_68  [key=2, style=dotted];
m21_322 -> m21_328  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_322 -> m21_327  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_322 -> m21_325  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_322 -> m21_323  [key=0, style=solid];
m21_323 -> m21_328  [key=0, style=solid];
m21_323 -> m21_324  [key=0, style=solid];
m21_318 -> m21_37  [key=2, style=dotted];
m21_318 -> n116  [key=2, style=dotted];
m21_318 -> m21_330  [key=0, style=solid];
m21_317 -> m21_319  [key=0, style=solid];
m21_317 -> m21_318  [key=0, style=solid];
m21_326 -> m21_327  [key=0, style=solid];
m21_326 -> m21_323  [key=0, style=solid];
m21_324 -> m21_327  [key=1, style=dashed, color=darkseagreen4, label=id];
m21_324 -> m21_325  [key=0, style=solid];
m21_324 -> m21_340  [key=1, style=dashed, color=darkseagreen4, label=id];
m21_324 -> m21_348  [key=1, style=dashed, color=darkseagreen4, label=id];
m21_324 -> m21_344  [key=1, style=dashed, color=darkseagreen4, label=id];
m21_324 -> m21_339  [key=1, style=dashed, color=darkseagreen4, label=id];
m21_324 -> m21_347  [key=1, style=dashed, color=darkseagreen4, label=id];
m21_324 -> m21_334  [key=1, style=dashed, color=darkseagreen4, label=id];
m21_330 -> m21_179  [key=0, style=bold, color=blue];
m21_102 -> m21_103  [key=0, style=solid];
m21_103 -> m21_104  [key=0, style=solid];
m21_104 -> m21_105  [key=0, style=solid];
m21_104 -> m21_101  [key=2, style=dotted];
m21_105 -> m21_102  [key=0, style=bold, color=blue];
m21_161 -> m21_162  [key=0, style=solid];
m21_162 -> m21_163  [key=0, style=solid];
m21_163 -> m21_164  [key=0, style=solid];
m21_163 -> m21_121  [key=2, style=dotted];
m21_163 -> m21_165  [key=1, style=dashed, color=darkseagreen4, label=queues];
m21_169 -> m21_170  [key=0, style=solid];
m21_169 -> m21_68  [key=2, style=dotted];
m21_169 -> m21_171  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_169 -> m21_172  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_169 -> m21_173  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_174 -> m21_175  [key=0, style=solid];
m21_174 -> m21_179  [key=2, style=dotted];
m21_174 -> m21_200  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_173 -> m21_70  [key=2, style=dotted];
m21_173 -> m21_174  [key=0, style=solid];
m21_164 -> m21_165  [key=0, style=solid];
m21_164 -> m21_178  [key=2, style=dotted];
m21_164 -> m21_175  [key=1, style=dashed, color=darkseagreen4, label=result];
m21_164 -> m21_176  [key=1, style=dashed, color=darkseagreen4, label=result];
m21_165 -> m21_166  [key=0, style=solid];
m21_165 -> m21_176  [key=0, style=solid];
m21_165 -> m21_170  [key=1, style=dashed, color=darkseagreen4, label=queue];
m21_165 -> m21_183  [key=1, style=dashed, color=darkseagreen4, label=queue];
m21_165 -> m21_171  [key=1, style=dashed, color=darkseagreen4, label=queue];
m21_165 -> m21_189  [key=1, style=dashed, color=darkseagreen4, label=queue];
m21_165 -> m21_172  [key=1, style=dashed, color=darkseagreen4, label=queue];
m21_165 -> m21_195  [key=1, style=dashed, color=darkseagreen4, label=queue];
m21_165 -> m21_175  [key=1, style=dashed, color=darkseagreen4, label=queue];
m21_168 -> m21_169  [key=0, style=solid];
m21_170 -> m21_174  [key=1, style=dashed, color=darkseagreen4, label=firstJobIds];
m21_170 -> m21_69  [key=2, style=dotted];
m21_170 -> m21_171  [key=0, style=solid];
m21_170 -> m21_182  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_170 -> m21_185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_171 -> m21_69  [key=2, style=dotted];
m21_171 -> m21_172  [key=0, style=solid];
m21_171 -> m21_188  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_171 -> m21_191  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_171 -> m21_175  [key=1, style=dashed, color=darkseagreen4, label=length];
m21_172 -> m21_69  [key=2, style=dotted];
m21_172 -> m21_173  [key=0, style=solid];
m21_172 -> m21_194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_172 -> m21_197  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_172 -> m21_175  [key=1, style=dashed, color=darkseagreen4, label=dequeued];
m21_175 -> m21_165  [key=0, style=solid];
m21_175 -> m21_180  [key=2, style=dotted];
m21_175 -> m21_181  [key=2, style=dotted];
m21_176 -> m21_177  [key=0, style=solid];
m21_166 -> m21_167  [key=0, style=solid];
m21_167 -> m21_168  [key=0, style=solid];
m21_177 -> m21_161  [key=0, style=bold, color=blue];
m21_50 -> m21_52  [key=1, style=dashed, color=darkseagreen4, label=int];
m21_50 -> m21_51  [key=0, style=solid];
m21_63 -> m21_64  [key=0, style=solid, color=green];
m21_63 -> m21_71  [key=2, style=dotted, color=green];
m21_63 -> m21_72  [key=2, style=dotted, color=green];
m21_63 -> m21_73  [key=2, style=dotted, color=green];
m21_63 -> m21_90  [key=1, style=dashed, color=green, label="lambda expression"];
m21_52 -> m21_63  [key=1, style=dashed, color=green, label=scheduledJobs];
m21_52 -> m21_53  [key=0, style=solid];
m21_52 -> m21_65  [key=2, style=dotted];
m21_52 -> m21_58  [key=1, style=dashed, color=darkseagreen4, label=scheduledJobs];
m21_55 -> m21_63  [key=1, style=dashed, color=green, label=jobs];
m21_55 -> m21_56  [key=0, style=solid];
m21_55 -> m21_67  [key=2, style=dotted];
m21_55 -> m21_60  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m21_55 -> m21_80  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m21_55 -> m21_91  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m21_56 -> m21_63  [key=1, style=dashed, color=green, label=states];
m21_56 -> m21_57  [key=0, style=solid];
m21_56 -> m21_67  [key=2, style=dotted];
m21_56 -> m21_61  [key=1, style=dashed, color=darkseagreen4, label=states];
m21_56 -> m21_88  [key=1, style=dashed, color=darkseagreen4, label=states];
m21_56 -> m21_91  [key=1, style=dashed, color=darkseagreen4, label=states];
m21_62 -> m21_63  [key=0, style=solid, color=green];
m21_62 -> m21_70  [key=2, style=dotted];
m21_51 -> m21_52  [key=0, style=solid];
m21_53 -> m21_55  [key=0, style=solid];
m21_53 -> m21_54  [key=0, style=solid];
m21_58 -> m21_62  [key=0, style=solid];
m21_58 -> m21_59  [key=0, style=solid];
m21_60 -> m21_61  [key=0, style=solid];
m21_60 -> m21_69  [key=2, style=dotted];
m21_60 -> m21_74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_60 -> m21_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_57 -> m21_62  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_57 -> m21_58  [key=0, style=solid];
m21_57 -> m21_60  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_57 -> m21_68  [key=2, style=dotted];
m21_57 -> m21_61  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m21_61 -> m21_58  [key=0, style=solid];
m21_61 -> m21_69  [key=2, style=dotted];
m21_61 -> m21_83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_61 -> m21_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_54 -> m21_64  [key=0, style=solid];
m21_54 -> m21_37  [key=2, style=dotted];
m21_54 -> n116  [key=2, style=dotted];
m21_59 -> m21_60  [key=0, style=solid];
m21_59 -> m21_80  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_59 -> m21_61  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_59 -> m21_88  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_59 -> m21_75  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_59 -> m21_84  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_64 -> m21_50  [key=0, style=bold, color=blue];
m21_212 -> m21_213  [key=0, style=solid];
m21_212 -> m21_214  [key=1, style=dashed, color=darkseagreen4, label=string];
m21_213 -> m21_214  [key=0, style=solid];
m21_214 -> m21_215  [key=0, style=solid];
m21_214 -> m21_17  [key=2, style=dotted];
m21_214 -> m21_156  [key=2, style=dotted];
m21_215 -> m21_216  [key=0, style=solid];
m21_215 -> m21_38  [key=2, style=dotted];
m21_215 -> m21_217  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m21_216 -> m21_212  [key=0, style=bold, color=blue];
m21_13 -> m21_14  [key=0, style=solid];
m21_13 -> m21_15  [key=1, style=dashed, color=darkseagreen4, label=string];
m21_14 -> m21_15  [key=0, style=solid];
m21_15 -> m21_16  [key=0, style=solid];
m21_15 -> m21_17  [key=2, style=dotted];
m21_15 -> m21_18  [key=2, style=dotted];
m21_16 -> m21_13  [key=0, style=bold, color=blue];
m21_8 -> m21_9  [key=0, style=solid];
m21_9 -> m21_10  [key=0, style=solid];
m21_10 -> m21_11  [key=0, style=solid];
m21_10 -> m21_12  [key=2, style=dotted];
m21_11 -> m21_8  [key=0, style=bold, color=blue];
m21_4 -> m21_5  [key=0, style=solid];
m21_5 -> m21_6  [key=0, style=solid];
m21_5 -> m21_7  [key=2, style=dotted];
m21_6 -> m21_4  [key=0, style=bold, color=blue];
m21_435 -> m21_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_33  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_51  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_98  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_99  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_103  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_104  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_107  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_108  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_113  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_142  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_143  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_144  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_152  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_153  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_154  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_162  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_163  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_169  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_174  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_205  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_206  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_207  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_213  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_214  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_215  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_222  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_223  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_227  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_228  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_231  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_232  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_236  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_242  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_363  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_364  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_367  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_369  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_435 -> m21_370  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisMonitoringApi"];
m21_436 -> m21_80  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_436 -> m21_88  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_436 -> m21_75  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_436 -> m21_84  [key=1, style=dashed, color=darkseagreen4, label=job];
m21_437 -> m21_80  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m21_437 -> m21_91  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m21_438 -> m21_91  [key=1, style=dashed, color=darkseagreen4, label=states];
m21_438 -> m21_88  [key=1, style=dashed, color=darkseagreen4, label=states];
m21_439 -> m21_126  [key=1, style=dashed, color=darkseagreen4, label=name];
m21_439 -> m21_133  [key=1, style=dashed, color=darkseagreen4, label=name];
m21_439 -> m21_129  [key=1, style=dashed, color=darkseagreen4, label=name];
m21_439 -> m21_123  [key=1, style=dashed, color=darkseagreen4, label=name];
m21_440 -> m21_126  [key=1, style=dashed, color=darkseagreen4, label=servers];
m21_440 -> m21_136  [key=1, style=dashed, color=darkseagreen4, label=servers];
m21_441 -> m21_136  [key=1, style=dashed, color=darkseagreen4, label=queues];
m21_441 -> m21_133  [key=1, style=dashed, color=darkseagreen4, label=queues];
m21_447 -> m21_340  [key=1, style=dashed, color=darkseagreen4, label=id];
m21_447 -> m21_348  [key=1, style=dashed, color=darkseagreen4, label=id];
m21_447 -> m21_344  [key=1, style=dashed, color=darkseagreen4, label=id];
m21_447 -> m21_339  [key=1, style=dashed, color=darkseagreen4, label=id];
m21_447 -> m21_347  [key=1, style=dashed, color=darkseagreen4, label=id];
m21_447 -> m21_334  [key=1, style=dashed, color=darkseagreen4, label=id];
m21_448 -> m21_340  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m21_448 -> m21_351  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m21_448 -> m21_339  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m21_450 -> m21_348  [key=1, style=dashed, color=darkseagreen4, label=states];
m21_450 -> m21_351  [key=1, style=dashed, color=darkseagreen4, label=states];
m21_450 -> m21_347  [key=1, style=dashed, color=darkseagreen4, label=states];
m21_446 -> m21_351  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m21_446 -> m21_334  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m21_444 -> m21_287  [key=1, style=dashed, color=darkseagreen4, label=string];
m21_445 -> m21_315  [key=1, style=dashed, color=darkseagreen4, label=string];
m21_449 -> m21_344  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m21_451 -> m21_354  [key=1, style=dashed, color=darkseagreen4, label="System.Func<HangFire.Common.JobMethod, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>"];
m21_442 -> m21_189  [key=1, style=dashed, color=darkseagreen4, label=queue];
m21_442 -> m21_195  [key=1, style=dashed, color=darkseagreen4, label=queue];
m21_442 -> m21_183  [key=1, style=dashed, color=darkseagreen4, label=queue];
m21_453 -> m21_424  [key=1, style=dashed, color=darkseagreen4, label=queueName];
m21_443 -> m21_253  [key=1, style=dashed, color=darkseagreen4, label=hiddenProperties];
m21_452 -> m21_389  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_452 -> m21_395  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_452 -> m21_401  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_452 -> m21_407  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_452 -> m21_414  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_452 -> m21_421  [key=1, style=dashed, color=darkseagreen4, label=stats];
m21_452 -> m21_427  [key=1, style=dashed, color=darkseagreen4, label=stats];
}
