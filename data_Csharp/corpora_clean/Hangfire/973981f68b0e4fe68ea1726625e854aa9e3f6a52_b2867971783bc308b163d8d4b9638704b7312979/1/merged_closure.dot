digraph  {
n93 [label="Hangfire.Core.Tests.Server.SchedulePollerFacts", span=""];
n0 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19"];
n1 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_storage = new Mock<JobStorage>()", span="21-21"];
n2 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_connection = new Mock<IStorageConnection>()", span="22-22"];
n11 [cluster="Mock<JobStorage>.cstr", label="Entry Mock<JobStorage>.cstr", span=""];
n3 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_stateMachine = new Mock<IStateMachine>()", span="23-23"];
n12 [cluster="Mock<IStorageConnection>.cstr", label="Entry Mock<IStorageConnection>.cstr", span=""];
n4 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_cts = new CancellationTokenSource()", span="24-24"];
n13 [cluster="Mock<IStateMachine>.cstr", label="Entry Mock<IStateMachine>.cstr", span=""];
n5 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_cts.Cancel()", span="25-25"];
n14 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
n6 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_stateMachineFactory = new Mock<IStateMachineFactory>()", span="27-27"];
n15 [cluster="System.Threading.CancellationTokenSource.Cancel()", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
n7 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_stateMachineFactory.Setup(x => x.Create(It.IsNotNull<IStorageConnection>()))\r\n                .Returns(_stateMachine.Object)", span="28-29"];
n16 [cluster="Mock<IStateMachineFactory>.cstr", label="Entry Mock<IStateMachineFactory>.cstr", span=""];
n8 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="31-31"];
n17 [cluster="Unk.Setup", label="Entry Unk.Setup", span=""];
n18 [cluster="Unk.Returns", label="Entry Unk.Returns", span=""];
n19 [cluster="lambda expression", label="Entry lambda expression", span="28-28"];
n9 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns(JobId)", span="32-33"];
n24 [cluster="lambda expression", label="Entry lambda expression", span="31-31"];
n10 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19"];
n28 [cluster="lambda expression", label="Entry lambda expression", span="32-33"];
n20 [cluster="lambda expression", label="x.Create(It.IsNotNull<IStorageConnection>())", span="28-28"];
n21 [cluster="lambda expression", label="Exit lambda expression", span="28-28"];
n22 [cluster="Unk.>", label="Entry Unk.>", span=""];
n23 [cluster="Unk.Create", label="Entry Unk.Create", span=""];
n25 [cluster="lambda expression", label="x.GetConnection()", span="31-31"];
n26 [cluster="lambda expression", label="Exit lambda expression", span="31-31"];
n27 [cluster="Unk.GetConnection", label="Entry Unk.GetConnection", span=""];
n29 [cluster="lambda expression", label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="32-33"];
n30 [cluster="lambda expression", label="Exit lambda expression", span="32-33"];
n31 [cluster="Unk.GetFirstByLowestScoreFromSet", label="Entry Unk.GetFirstByLowestScoreFromSet", span=""];
n32 [cluster="lambda expression", label="Entry lambda expression", span="33-33"];
n33 [cluster="lambda expression", label="time > 0", span="33-33"];
n34 [cluster="lambda expression", label="Exit lambda expression", span="33-33"];
n35 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
n36 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan))", span="39-41"];
n37 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", label="Assert.Equal(''storage'', exception.ParamName)", span="43-43"];
n40 [cluster="lambda expression", label="Entry lambda expression", span="40-41"];
n38 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
n39 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n41 [cluster="lambda expression", label="new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan)", span="40-41"];
n42 [cluster="lambda expression", label="Exit lambda expression", span="40-41"];
n43 [cluster="SchedulePoller.cstr", label="Entry SchedulePoller.cstr", span=""];
n44 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="47-47"];
n46 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="53-53"];
n48 [cluster="lambda expression", label="Entry lambda expression", span="50-51"];
n47 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="47-47"];
n50 [cluster="lambda expression", label="Exit lambda expression", span="50-51"];
n51 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="57-57"];
n52 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", label="var scheduler = CreateScheduler()", span="59-59"];
n53 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", label="scheduler.Execute(_cts.Token)", span="61-61"];
n57 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="94-94"];
n54 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", label="_storage.Verify(x => x.GetConnection())", span="63-63"];
n58 [cluster="Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", label="Entry Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", span="47-47"];
n55 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", label="_connection.Verify(x => x.Dispose())", span="64-64"];
n59 [cluster="Unk.Verify", label="Entry Unk.Verify", span=""];
n60 [cluster="lambda expression", label="Entry lambda expression", span="63-63"];
n56 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="57-57"];
n63 [cluster="lambda expression", label="Entry lambda expression", span="64-64"];
n61 [cluster="lambda expression", label="x.GetConnection()", span="63-63"];
n62 [cluster="lambda expression", label="Exit lambda expression", span="63-63"];
n64 [cluster="lambda expression", label="x.Dispose()", span="64-64"];
n65 [cluster="lambda expression", label="Exit lambda expression", span="64-64"];
n66 [cluster="Unk.Dispose", label="Entry Unk.Dispose", span=""];
n67 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="68-68"];
n68 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", label="var scheduler = CreateScheduler()", span="70-70"];
n69 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", label="scheduler.Execute(_cts.Token)", span="72-72"];
n70 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", label="_stateMachine.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName }))", span="74-77"];
n71 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="68-68"];
n72 [cluster="lambda expression", label="Entry lambda expression", span="74-77"];
n73 [cluster="lambda expression", label="x.ChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName })", span="74-77"];
n74 [cluster="lambda expression", label="Exit lambda expression", span="74-77"];
n75 [cluster="Unk.ChangeState", label="Entry Unk.ChangeState", span=""];
n76 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="81-81"];
n77 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns((string)null)", span="83-84"];
n78 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="var scheduler = CreateScheduler()", span="85-85"];
n82 [cluster="lambda expression", label="Entry lambda expression", span="83-84"];
n79 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="scheduler.Execute(_cts.Token)", span="87-87"];
n80 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="_stateMachine.Verify(\r\n                x => x.ChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>()),\r\n                Times.Never)", span="89-91"];
n81 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="81-81"];
n88 [cluster="lambda expression", label="Entry lambda expression", span="90-90"];
n83 [cluster="lambda expression", label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="83-84"];
n84 [cluster="lambda expression", label="Exit lambda expression", span="83-84"];
n85 [cluster="lambda expression", label="Entry lambda expression", span="84-84"];
n86 [cluster="lambda expression", label="time > 0", span="84-84"];
n87 [cluster="lambda expression", label="Exit lambda expression", span="84-84"];
n89 [cluster="lambda expression", label="x.ChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>())", span="90-90"];
n90 [cluster="lambda expression", label="Exit lambda expression", span="90-90"];
n91 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", label="return new SchedulePoller(_storage.Object, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan);", span="96-96"];
n92 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="94-94"];
d45 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", color=green, community=0, label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    _storage.Object, null, Timeout.InfiniteTimeSpan))", prediction=0, span="49-51"];
d93 [label="Hangfire.Core.Tests.Server.SchedulePollerFacts", span=""];
d22 [cluster="Unk.>", label="Entry Unk.>", span=""];
d49 [cluster="lambda expression", color=green, community=0, label="new SchedulePoller(\r\n                    _storage.Object, null, Timeout.InfiniteTimeSpan)", prediction=1, span="50-51"];
d69 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", label="scheduler.Execute(_cts.Token)", span="72-72"];
d70 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName }))", span="74-77"];
d79 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="scheduler.Execute(_cts.Token)", span="87-87"];
d80 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="_stateMachine.Verify(\r\n                x => x.TryToChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>()),\r\n                Times.Never)", span="89-91"];
d73 [cluster="lambda expression", label="x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName })", span="74-77"];
d89 [cluster="lambda expression", label="x.TryToChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>())", span="90-90"];
d71 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="68-68"];
d59 [cluster="Unk.Verify", label="Entry Unk.Verify", span=""];
d72 [cluster="lambda expression", label="Entry lambda expression", span="74-77"];
d81 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="81-81"];
d88 [cluster="lambda expression", label="Entry lambda expression", span="90-90"];
d74 [cluster="lambda expression", label="Exit lambda expression", span="74-77"];
d75 [cluster="Unk.TryToChangeState", label="Entry Unk.TryToChangeState", span=""];
d90 [cluster="lambda expression", label="Exit lambda expression", span="90-90"];
m0_0 [cluster="HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="ExpirationManager.cs", label="Entry HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="4-4"];
m0_1 [cluster="HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="ExpirationManager.cs", label="Exit HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="4-4"];
m0_2 [cluster="HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="ExpirationManager.cs", label="Entry HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="5-5"];
m0_3 [cluster="HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="ExpirationManager.cs", label="Exit HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="5-5"];
m1_0 [cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueue(IDbConnection)", file="IPersistentJobQueueProvider.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueue(IDbConnection)", span="22-22"];
m1_1 [cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueue(IDbConnection)", file="IPersistentJobQueueProvider.cs", label="Exit Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueue(IDbConnection)", span="22-22"];
m1_2 [cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="IPersistentJobQueueProvider.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="23-23"];
m1_3 [cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="IPersistentJobQueueProvider.cs", label="Exit Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="23-23"];
m3_0 [cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="RabbitMqJobQueueProvider.cs", label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22"];
m3_1 [cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="RabbitMqJobQueueProvider.cs", label="Exit Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22"];
m4_0 [cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="SqlServerDistributedLock.cs", label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22"];
m4_1 [cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", color=green, community=0, file="SqlServerDistributedLock.cs", label="Exit Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", prediction=2, span="22-22"];
m4_2 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="SqlServerDistributedLock.cs", label="throw new ArgumentNullException(''storage'');", prediction=3, span="49-49"];
m4_3 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="String.IsNullOrEmpty(resource)", span="50-50"];
m4_5 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="SqlServerDistributedLock.cs", label="_storage = storage", prediction=4, span="52-52"];
m4_6 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="_resource = resource", span="53-53"];
m4_7 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="SqlServerDistributedLock.cs", label="_connection = storage.CreateAndOpenConnection()", prediction=5, span="54-54"];
m4_8 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="var parameters = new DynamicParameters()", span="56-56"];
m4_15 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="SqlServerDistributedLock.cs", label="_connection.Execute(\r\n                @''sp_getapplock'', \r\n                parameters, \r\n                commandType: CommandType.StoredProcedure)", prediction=6, span="64-67"];
m4_14 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", span="62-62"];
m4_16 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="var lockResult = parameters.Get<int>(''@Result'')", span="69-69"];
m4_13 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="parameters.Add(''@LockTimeout'', timeout.TotalMilliseconds)", span="61-61"];
m4_4 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="throw new ArgumentNullException(''resource'');", span="50-50"];
m4_9 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="parameters.Add(''@Resource'', _resource)", span="57-57"];
m4_18 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                    ''Could not place a lock on the resource '{0}': {1}.'',\r\n                    _resource,\r\n                    LockErrorMessages.ContainsKey(lockResult) \r\n                        ? LockErrorMessages[lockResult]\r\n                        : String.Format(''Server returned the '{0}' error.'', lockResult)));", span="73-79"];
m4_10 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="parameters.Add(''@DbPrincipal'', ''public'')", span="58-58"];
m4_11 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="parameters.Add(''@LockMode'', LockMode)", span="59-59"];
m4_12 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="parameters.Add(''@LockOwner'', LockOwner)", span="60-60"];
m4_17 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="lockResult < 0", span="71-71"];
m4_19 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="44-44"];
m4_20 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerDistributedLock.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_22 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerDistributedLock.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="218-218"];
m4_25 [cluster="Unk.Execute", file="SqlServerDistributedLock.cs", label="Entry Unk.Execute", span=""];
m4_21 [cluster="string.IsNullOrEmpty(string)", file="SqlServerDistributedLock.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m4_27 [cluster="Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", file="SqlServerDistributedLock.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", span="22-22"];
m4_29 [cluster="Unk.Format", file="SqlServerDistributedLock.cs", label="Entry Unk.Format", span=""];
m4_30 [cluster="string.Format(string, object, object)", file="SqlServerDistributedLock.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m4_28 [cluster="Unk.ContainsKey", file="SqlServerDistributedLock.cs", label="Entry Unk.ContainsKey", span=""];
m4_31 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLock.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="83-83"];
m4_35 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs", label="var parameters = new DynamicParameters()", prediction=6, span="91-91"];
m4_34 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLock.cs", label="_completed = true", span="87-87"];
m4_36 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs", label="parameters.Add(''@Resource'', _resource)", prediction=6, span="92-92"];
m4_37 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs", label="parameters.Add(''@LockOwner'', LockOwner)", prediction=6, span="93-93"];
m4_38 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs", label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", prediction=6, span="94-94"];
m4_39 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs", label="_connection.Execute(\r\n                    @''sp_releaseapplock'',\r\n                    parameters,\r\n                    commandType: CommandType.StoredProcedure)", prediction=6, span="96-99"];
m4_40 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs", label="var releaseResult = parameters.Get<int>(''@Result'')", prediction=6, span="101-101"];
m4_41 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs", label="releaseResult < 0", prediction=13, span="103-103"];
m4_42 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs", label="throw new SqlServerDistributedLockException(\r\n                        String.Format(\r\n                            ''Could not release a lock on the resource '{0}': Server returned the '{1}' error.'',\r\n                            _resource,\r\n                            releaseResult));", prediction=6, span="105-109"];
m4_32 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLock.cs", label=_completed, span="85-85"];
m4_33 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLock.cs", label="return;", span="85-85"];
m4_43 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLock.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="83-83"];
m4_23 [cluster="DynamicParameters.cstr", file="SqlServerDistributedLock.cs", label="Entry DynamicParameters.cstr", span=""];
m4_24 [cluster="Unk.Add", file="SqlServerDistributedLock.cs", label="Entry Unk.Add", span=""];
m4_44 [file="SqlServerDistributedLock.cs", label="Hangfire.SqlServer.SqlServerDistributedLock", span=""];
m5_12 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerFetchedJob.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m5_22 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", file="SqlServerFetchedJob.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", span="64-64"];
m5_23 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", color=green, community=0, file="SqlServerFetchedJob.cs", label="_storage.UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    ''update HangFire.JobQueue set FetchedAt = null where Id = @id'',\r\n                    new { id = Id });\r\n            })", prediction=15, span="66-71"];
m5_24 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", file="SqlServerFetchedJob.cs", label="_requeued = true", span="73-73"];
m5_25 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", file="SqlServerFetchedJob.cs", label="Exit Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", span="64-64"];
m5_0 [cluster="HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="SqlServerFetchedJob.cs", label="Entry HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="4-4"];
m5_1 [cluster="HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", color=green, community=0, file="SqlServerFetchedJob.cs", label="Exit HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", prediction=16, span="4-4"];
m5_2 [cluster="HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", color=green, community=0, file="SqlServerFetchedJob.cs", label="Entry HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", prediction=17, span="5-5"];
m5_3 [cluster="HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="SqlServerFetchedJob.cs", label="Exit HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="5-5"];
m5_7 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", color=green, community=0, file="SqlServerFetchedJob.cs", label="_storage = storage", prediction=18, span="41-41"];
m5_5 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs", label="queue == null", span="39-39"];
m5_8 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs", label="Id = id", span="43-43"];
m5_9 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs", label="JobId = jobId", span="44-44"];
m5_10 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs", label="Queue = queue", span="45-45"];
m5_4 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs", label="throw new ArgumentNullException(''jobId'');", span="38-38"];
m5_6 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs", label="throw new ArgumentNullException(''queue'');", span="39-39"];
m5_11 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs", label="Exit Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", span="31-31"];
m5_21 [cluster="Unk.Execute", file="SqlServerFetchedJob.cs", label="Entry Unk.Execute", span=""];
m5_29 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", span="76-76"];
m5_30 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs", label=_disposed, span="78-78"];
m5_32 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs", label="!_removedFromQueue && !_requeued", span="80-80"];
m5_33 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs", label="Requeue()", span="82-82"];
m5_34 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs", label="_disposed = true", span="85-85"];
m5_31 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs", label="return;", span="78-78"];
m5_35 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs", label="Exit Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", span="76-76"];
m5_13 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", file="SqlServerFetchedJob.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", span="52-52"];
m5_14 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", color=green, community=0, file="SqlServerFetchedJob.cs", label="_storage.UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    ''delete from HangFire.JobQueue where Id = @id'',\r\n                    new { id = Id });\r\n            })", prediction=19, span="54-59"];
m5_15 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", file="SqlServerFetchedJob.cs", label="_removedFromQueue = true", span="61-61"];
m5_16 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", file="SqlServerFetchedJob.cs", label="Exit Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", span="52-52"];
m5_17 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="SqlServerFetchedJob.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", span="174-174"];
m5_26 [cluster="lambda expression", file="SqlServerFetchedJob.cs", label="Entry lambda expression", span="66-71"];
m5_18 [cluster="lambda expression", file="SqlServerFetchedJob.cs", label="Entry lambda expression", span="54-59"];
m5_19 [cluster="lambda expression", color=green, community=0, file="SqlServerFetchedJob.cs", label="connection.Execute(\r\n                    ''delete from HangFire.JobQueue where Id = @id'',\r\n                    new { id = Id })", prediction=20, span="56-58"];
m5_20 [cluster="lambda expression", file="SqlServerFetchedJob.cs", label="Exit lambda expression", span="54-59"];
m5_27 [cluster="lambda expression", color=green, community=0, file="SqlServerFetchedJob.cs", label="connection.Execute(\r\n                    ''update HangFire.JobQueue set FetchedAt = null where Id = @id'',\r\n                    new { id = Id })", prediction=21, span="68-70"];
m5_28 [cluster="lambda expression", file="SqlServerFetchedJob.cs", label="Exit lambda expression", span="66-71"];
m5_36 [file="SqlServerFetchedJob.cs", label="Hangfire.SqlServer.SqlServerFetchedJob", span=""];
m6_69 [cluster="Unk.GetTimeToLive", file="SqlServerJobQueue.cs", label="Entry Unk.GetTimeToLive", span=""];
m6_39 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="SqlServerJobQueue.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m6_83 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="212-212"];
m6_84 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="SqlServerJobQueue.cs", label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="214-219"];
m6_85 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="SqlServerJobQueue.cs", label="keys.ForEach(x =>\r\n            {\r\n                var ttl = Redis.Client.GetTimeToLive(x);\r\n                Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl));\r\n            })", span="221-227"];
m6_86 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="212-212"];
m6_47 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="119-119"];
m6_48 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="SqlServerJobQueue.cs", label="_filters.Add(new TestStateChangedFilter(name, _stateAppliedResults))", span="121-121"];
m6_49 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="119-119"];
m6_9 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="SqlServerJobQueue.cs", label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="27-27"];
m6_99 [cluster="Unk.SortedSetContainsItem", file="SqlServerJobQueue.cs", label="Entry Unk.SortedSetContainsItem", span=""];
m6_118 [cluster="System.DateTime.AddSeconds(double)", file="SqlServerJobQueue.cs", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
m6_75 [cluster="string.Format(string, params object[])", file="SqlServerJobQueue.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m6_165 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="350-350"];
m6_166 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="SqlServerJobQueue.cs", label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.IsAny<StateApplyingContext>(), It.IsAny<IWriteOnlyTransaction>()),\r\n                Times.Never)", span="352-354"];
m6_167 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="350-350"];
m6_198 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="405-405"];
m6_203 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs", label="Assert.Equal(table.Rows[i][''State''], history[i][''State''])", span="413-413"];
m6_199 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs", label="var serializedHistory = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="407-408"];
m6_202 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs", label="i < table.RowCount", span="411-411"];
m6_200 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs", label="var history = serializedHistory.Select(JobHelper.FromJson<Dictionary<string, string>>).ToList()", span="409-409"];
m6_201 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs", label="var i = 0", span="411-411"];
m6_204 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs", label="i++", span="411-411"];
m6_205 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="405-405"];
m6_137 [cluster="Unk.GetAllEntriesFromHash", file="SqlServerJobQueue.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m6_133 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="295-295"];
m6_135 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="SqlServerJobQueue.cs", label="Assert.Equal(state, job[''State''])", span="298-298"];
m6_134 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="SqlServerJobQueue.cs", label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="297-297"];
m6_136 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="295-295"];
m6_60 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="176-176"];
m6_61 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="SqlServerJobQueue.cs", label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="178-183"];
m6_62 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="SqlServerJobQueue.cs", label="keys.ForEach(x =>\r\n                {\r\n                    var ttl = Redis.Client.GetTimeToLive(x);\r\n                    Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl));\r\n                })", span="185-192"];
m6_63 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="176-176"];
m6_82 [cluster="Unk.PopItemFromList", file="SqlServerJobQueue.cs", label="Entry Unk.PopItemFromList", span=""];
m6_150 [cluster="Unk.RemoveStartFromList", file="SqlServerJobQueue.cs", label="Entry Unk.RemoveStartFromList", span=""];
m6_4 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="SqlServerJobQueue.cs", label="HangFire.Filters.PerformedContext", span=""];
m6_5 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="SqlServerJobQueue.cs", label="_failedException = new InvalidOperationException(''Hello'')", span="50-50"];
m6_6 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="SqlServerJobQueue.cs", label="_state = new FailedState(_failedException)\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="51-54"];
m6_7 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="48-48"];
m6_13 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="SqlServerJobQueue.cs", label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="27-27"];
m6_46 [cluster="TestStateChangingFilter.cstr", file="SqlServerJobQueue.cs", label="Entry TestStateChangingFilter.cstr", span=""];
m6_44 [cluster="string.Format(string, object)", file="SqlServerJobQueue.cs", label="Entry string.Format(string, object)", span="0-0"];
m6_117 [cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="SqlServerJobQueue.cs", label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="41-41"];
m6_110 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="262-262"];
m6_113 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="SqlServerJobQueue.cs", label="Assert.True(timestamp > DateTime.UtcNow.AddSeconds(-1))", span="267-267"];
m6_114 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="SqlServerJobQueue.cs", label="Assert.True(timestamp < DateTime.UtcNow.AddSeconds(1))", span="268-268"];
m6_112 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="SqlServerJobQueue.cs", label="var timestamp = JobHelper.FromTimestamp((long)score)", span="265-265"];
m6_111 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="SqlServerJobQueue.cs", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:processing'', JobSteps.DefaultJobId)", span="264-264"];
m6_115 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="262-262"];
m6_149 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="310-310"];
m6_144 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs", label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="312-313"];
m6_145 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs", label="Assert.NotNull(entry)", span="314-314"];
m6_147 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs", label="Assert.NotNull(history)", span="317-317"];
m6_143 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="310-310"];
m6_146 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs", label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="316-316"];
m6_148 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs", label="TableAssert.ContainsFollowingItems(table, history)", span="319-319"];
m6_153 [cluster="HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", span="8-8"];
m6_94 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="237-237"];
m6_95 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="SqlServerJobQueue.cs", label="Assert.Equal(1, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="239-239"];
m6_96 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="SqlServerJobQueue.cs", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:failed'', JobSteps.DefaultJobId))", span="240-240"];
m6_97 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="237-237"];
m6_180 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="SqlServerJobQueue.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m6_72 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="196-196"];
m6_73 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="SqlServerJobQueue.cs", label="Assert.Equal(\r\n                changeType == ''increase'' ? ''1'' : ''0'',\r\n                Redis.Client.GetValue(String.Format(''hangfire:stats:succeeded'')))", span="198-200"];
m6_74 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="196-196"];
m6_152 [cluster="Unk.>", file="SqlServerJobQueue.cs", label="Entry Unk.>", span=""];
m6_116 [cluster="Unk.GetItemScoreInSortedSet", file="SqlServerJobQueue.cs", label="Entry Unk.GetItemScoreInSortedSet", span=""];
m6_22 [cluster="HangFire.States.EnqueuedState.EnqueuedState()", file="SqlServerJobQueue.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState()", span="29-29"];
m6_50 [cluster="HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", span="15-15"];
m6_56 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="170-170"];
m6_57 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="SqlServerJobQueue.cs", label="Assert.Equal(name, _state.Name)", span="172-172"];
m6_58 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="170-170"];
m6_38 [cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.State)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.State)", span="14-14"];
m6_109 [cluster="Unk.False", file="SqlServerJobQueue.cs", label="Entry Unk.False", span=""];
m6_19 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76"];
m6_20 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="SqlServerJobQueue.cs", label="_state = new EnqueuedState\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="78-81"];
m6_21 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76"];
m6_119 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="272-272"];
m6_123 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs", label="Assert.True(timestamp >= DateTime.UtcNow.Date.AddDays(1))", span="278-278"];
m6_124 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs", label="Assert.True(timestamp < DateTime.UtcNow.Date.AddDays(2))", span="279-279"];
m6_122 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs", label="var timestamp = JobHelper.FromTimestamp((long) score)", span="276-276"];
m6_121 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:schedule'', JobSteps.DefaultJobId)", span="275-275"];
m6_120 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="274-274"];
m6_125 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="272-272"];
m6_195 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="399-399"];
m6_196 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="SqlServerJobQueue.cs", label="Assert.Equal(0, _stateChangingResults.Count)", span="401-401"];
m6_197 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="399-399"];
m6_35 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="104-104"];
m6_36 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="SqlServerJobQueue.cs", label="_filters.Add(new TestStateChangingFilter(name, _stateChangingResults))", span="106-106"];
m6_37 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="104-104"];
m6_10 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58"];
m6_11 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="SqlServerJobQueue.cs", label="_state = new ProcessingState(''TestServer'')\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="60-63"];
m6_12 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58"];
m6_81 [cluster="Unk.GetListCount", file="SqlServerJobQueue.cs", label="Entry Unk.GetListCount", span=""];
m6_40 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="110-110"];
m6_42 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="SqlServerJobQueue.cs", label="_filters.Add(\r\n                new TestStateChangingFilter(name, _stateChangingResults, _stateMocks[state].Object))", span="114-115"];
m6_41 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="SqlServerJobQueue.cs", label="Given(String.Format(''a '{0}' state'', state))", span="112-112"];
m6_43 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="110-110"];
m6_171 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="358-358"];
m6_176 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs", label=_stateProperties, span="367-367"];
m6_175 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs", label="Assert.NotNull(history)", span="365-365"];
m6_178 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs", label="Assert.Equal(property.Value, history[property.Key])", span="370-370"];
m6_177 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs", label="Assert.True(history.ContainsKey(property.Key))", span="369-369"];
m6_174 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs", label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="364-364"];
m6_172 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs", label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="360-361"];
m6_173 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs", label="Assert.NotNull(entry)", span="362-362"];
m6_179 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="358-358"];
m6_3 [cluster="HangFire.Filters.PerformedContext.PerformedContext(HangFire.Filters.PerformContext, bool, System.Exception)", file="SqlServerJobQueue.cs", label="Exit HangFire.Filters.PerformedContext.PerformedContext(HangFire.Filters.PerformContext, bool, System.Exception)", span="6-6"];
m6_18 [cluster="System.DateTime.AddDays(double)", file="SqlServerJobQueue.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m6_0 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42"];
m6_1 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="SqlServerJobQueue.cs", label="_state = new SucceededState { Reason = ''SomeReason'' }", span="44-44"];
m6_2 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42"];
m6_8 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SqlServerJobQueue.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m6_23 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85"];
m6_26 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="SqlServerJobQueue.cs", label="_stateMocks.Add(state, mock)", span="90-90"];
m6_24 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="SqlServerJobQueue.cs", label="var mock = new Mock<State>()", span="87-87"];
m6_25 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="SqlServerJobQueue.cs", label="mock.Setup(x => x.Name).Returns(state)", span="88-88"];
m6_27 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85"];
m6_151 [cluster="Unk.NotNull", file="SqlServerJobQueue.cs", label="Entry Unk.NotNull", span=""];
m6_154 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="341-341"];
m6_155 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="SqlServerJobQueue.cs", label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(\r\n                    It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId),\r\n                    It.IsAny<IWriteOnlyTransaction>()))", span="343-346"];
m6_156 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="341-341"];
m6_28 [cluster="Mock<State>.cstr", file="SqlServerJobQueue.cs", label="Entry Mock<State>.cstr", span=""];
m6_181 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="375-375"];
m6_183 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="SqlServerJobQueue.cs", label=_stateProperties, span="380-380"];
m6_182 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="SqlServerJobQueue.cs", label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="377-378"];
m6_185 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="SqlServerJobQueue.cs", label="Assert.Equal(property.Value, stateEntry[property.Key])", span="383-383"];
m6_184 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="SqlServerJobQueue.cs", label="Assert.True(stateEntry.ContainsKey(property.Key))", span="382-382"];
m6_186 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="375-375"];
m6_29 [cluster="Unk.Setup", file="SqlServerJobQueue.cs", label="Entry Unk.Setup", span=""];
m6_14 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67"];
m6_15 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", color=green, community=0, file="SqlServerJobQueue.cs", label="_state = new ScheduledState(DateTime.UtcNow.AddDays(1))\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", prediction=22, span="69-72"];
m6_16 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67"];
m6_91 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="231-231"];
m6_92 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="SqlServerJobQueue.cs", label="Assert.Equal(0, Redis.Client.GetListCount(''hangfire:succeeded''))", span="233-233"];
m6_93 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="231-231"];
m6_161 [cluster="Unk.Unapply", file="SqlServerJobQueue.cs", label="Entry Unk.Unapply", span=""];
m6_64 [cluster="Unk.ForEach", file="SqlServerJobQueue.cs", label="Entry Unk.ForEach", span=""];
m6_188 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="388-388"];
m6_189 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="Assert.Equal(table.RowCount, _stateChangingResults.Count)", span="390-390"];
m6_192 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="Assert.Equal(table.Rows[i][''Filter''], _stateChangingResults[i])", span="394-394"];
m6_190 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="var i = 0", span="392-392"];
m6_191 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="i < table.RowCount", span="392-392"];
m6_193 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="i++", span="392-392"];
m6_194 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="388-388"];
m6_87 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="221-227"];
m6_158 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="344-346"];
m6_168 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="353-353"];
m6_32 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="88-88"];
m6_160 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="344-346"];
m6_159 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Unapply(\r\n                    It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId),\r\n                    It.IsAny<IWriteOnlyTransaction>())", span="344-346"];
m6_170 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="353-353"];
m6_169 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Unapply(It.IsAny<StateApplyingContext>(), It.IsAny<IWriteOnlyTransaction>())", span="353-353"];
m6_67 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl))", span="188-191"];
m6_89 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl))", span="224-226"];
m6_34 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="88-88"];
m6_33 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Name", span="88-88"];
m6_162 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="345-345"];
m6_65 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="185-192"];
m6_66 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="var ttl = Redis.Client.GetTimeToLive(x)", span="187-187"];
m6_68 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="185-192"];
m6_88 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="var ttl = Redis.Client.GetTimeToLive(x)", span="223-223"];
m6_90 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="221-227"];
m6_163 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="y.JobId == JobSteps.DefaultJobId", span="345-345"];
m6_164 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="345-345"];
m6_132 [cluster="Unk.SetContainsItem", file="SqlServerJobQueue.cs", label="Entry Unk.SetContainsItem", span=""];
m6_206 [cluster="Unk.GetAllItemsFromList", file="SqlServerJobQueue.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m6_207 [cluster="Unk.Select", file="SqlServerJobQueue.cs", label="Entry Unk.Select", span=""];
m6_45 [cluster="Unk.Given", file="SqlServerJobQueue.cs", label="Entry Unk.Given", span=""];
m6_129 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="289-289"];
m6_130 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="SqlServerJobQueue.cs", label="Assert.True(Redis.Client.SetContainsItem(''hangfire:queues'', queue))", span="291-291"];
m6_131 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="289-289"];
m6_17 [cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", file="SqlServerJobQueue.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="28-28"];
m6_103 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="250-250"];
m6_104 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="SqlServerJobQueue.cs", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="252-252"];
m6_105 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="250-250"];
m6_98 [cluster="Unk.GetSortedSetCount", file="SqlServerJobQueue.cs", label="Entry Unk.GetSortedSetCount", span=""];
m6_76 [cluster="Unk.GetValue", file="SqlServerJobQueue.cs", label="Entry Unk.GetValue", span=""];
m6_71 [cluster="Unk.True", file="SqlServerJobQueue.cs", label="Entry Unk.True", span=""];
m6_208 [cluster="Unk.ToList", file="SqlServerJobQueue.cs", label="Entry Unk.ToList", span=""];
m6_70 [cluster="Unk.Format", file="SqlServerJobQueue.cs", label="Entry Unk.Format", span=""];
m6_126 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="283-283"];
m6_127 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="SqlServerJobQueue.cs", label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="285-285"];
m6_128 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="283-283"];
m6_106 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="256-256"];
m6_107 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="SqlServerJobQueue.cs", label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="258-258"];
m6_108 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="256-256"];
m6_142 [cluster="Unk.ContainsFollowingItems", file="SqlServerJobQueue.cs", label="Entry Unk.ContainsFollowingItems", span=""];
m6_30 [cluster="Unk.Returns", file="SqlServerJobQueue.cs", label="Entry Unk.Returns", span=""];
m6_31 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="SqlServerJobQueue.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m6_157 [cluster="Unk.Verify", file="SqlServerJobQueue.cs", label="Entry Unk.Verify", span=""];
m6_77 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="204-204"];
m6_78 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="SqlServerJobQueue.cs", label="Assert.Equal(1, Redis.Client.GetListCount(''hangfire:succeeded''))", span="206-206"];
m6_79 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="SqlServerJobQueue.cs", label="Assert.Equal(JobSteps.DefaultJobId, Redis.Client.PopItemFromList(\r\n                ''hangfire:succeeded''))", span="207-208"];
m6_80 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="204-204"];
m6_100 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="244-244"];
m6_101 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="SqlServerJobQueue.cs", label="Assert.Equal(0, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="246-246"];
m6_102 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="244-244"];
m6_187 [cluster="Unk.ContainsKey", file="SqlServerJobQueue.cs", label="Entry Unk.ContainsKey", span=""];
m6_209 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="418-418"];
m6_210 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="Assert.Equal(table.RowCount, _stateAppliedResults.Count)", span="420-420"];
m6_213 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="Assert.Equal(table.Rows[i][''Method''], _stateAppliedResults[i])", span="424-424"];
m6_211 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="var i = 0", span="422-422"];
m6_212 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="i < table.RowCount", span="422-422"];
m6_214 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="i++", span="422-422"];
m6_215 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="418-418"];
m6_141 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="SqlServerJobQueue.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="302-302"];
m6_139 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="SqlServerJobQueue.cs", label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="304-305"];
m6_138 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="SqlServerJobQueue.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="302-302"];
m6_140 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="SqlServerJobQueue.cs", label="TableAssert.ContainsFollowingItems(table, stateEntry)", span="306-306"];
m6_216 [file="SqlServerJobQueue.cs", label="HangFire.Tests.States.StateSteps", span=""];
m7_32 [cluster="Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", span="28-28"];
m7_17 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m7_30 [cluster="Hangfire.JobStorage.GetConnection()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
m7_34 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="102-102"];
m7_37 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="state == null", prediction=23, span="105-105"];
m7_35 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerJobQueueMonitoringApi.cs", label="jobId == null", span="104-104"];
m7_38 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''state'');", prediction=24, span="105-105"];
m7_39 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="var connection = _storage.GetConnection()", prediction=25, span="107-107"];
m7_41 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="return stateMachine.ChangeState(jobId, state, fromState != null ? new[] { fromState } : null);", prediction=23, span="110-110"];
m7_40 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="var stateMachine = _stateMachineFactory.Create(connection)", prediction=27, span="109-109"];
m7_36 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''jobId'');", span="104-104"];
m7_42 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="102-102"];
m7_6 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", span="65-65"];
m7_8 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''storage'');", span="70-70"];
m7_10 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''stateMachineFactory'');", span="71-71"];
m7_12 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''process'');", span="72-72"];
m7_13 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs", label="_storage = storage", span="74-74"];
m7_14 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs", label="_stateMachineFactory = stateMachineFactory", span="75-75"];
m7_15 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs", label="_process = process", span="76-76"];
m7_7 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs", label="storage == null", span="70-70"];
m7_9 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs", label="stateMachineFactory == null", span="71-71"];
m7_11 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs", label="process == null", span="72-72"];
m7_16 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", span="65-65"];
m7_44 [cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24"];
m7_33 [cluster="Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", span="34-34"];
m7_43 [cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22"];
m7_18 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="80-80"];
m7_19 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="job == null", prediction=28, span="82-82"];
m7_20 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''job'');", prediction=29, span="82-82"];
m7_21 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="state == null", prediction=30, span="83-83"];
m7_22 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''state'');", prediction=31, span="83-83"];
m7_23 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="var connection = _storage.GetConnection()", prediction=32, span="87-87"];
m7_24 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs", label="var context = new CreateContext(connection, _stateMachineFactory, job, state)", span="89-89"];
m7_26 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs", label="return context.JobId;", span="92-92"];
m7_28 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new CreateJobFailedException(''Job creation process has bee failed. See inner exception for details'', ex);", span="97-97"];
m7_25 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs", label="_process.Run(context)", span="90-90"];
m7_27 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs", label=Exception, span="95-95"];
m7_29 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="80-80"];
m7_31 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachineFactory, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachineFactory, Hangfire.Common.Job, Hangfire.States.IState)", span="46-46"];
m7_45 [file="SqlServerJobQueueMonitoringApi.cs", label="Hangfire.BackgroundJobClient", span=""];
m8_10 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="SqlServerJobQueueProvider.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="39-39"];
m8_12 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="SqlServerJobQueueProvider.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="39-39"];
m8_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerJobQueueProvider.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m8_9 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(IDbConnection, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueProvider.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(IDbConnection, Hangfire.SqlServer.SqlServerStorageOptions)", span="32-32"];
m8_6 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue(IDbConnection)", file="SqlServerJobQueueProvider.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue(IDbConnection)", span="34-34"];
m8_8 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue(IDbConnection)", file="SqlServerJobQueueProvider.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue(IDbConnection)", span="34-34"];
m8_0 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueProvider.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", span="25-25"];
m8_1 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueProvider.cs", label="options == null", span="27-27"];
m8_3 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueProvider.cs", label="_options = options", span="29-29"];
m8_2 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueProvider.cs", label="throw new ArgumentNullException(''options'');", span="27-27"];
m8_4 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueProvider.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", span="25-25"];
m8_13 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(IDbConnection)", file="SqlServerJobQueueProvider.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(IDbConnection)", span="28-28"];
m8_14 [file="SqlServerJobQueueProvider.cs", label="Hangfire.SqlServer.SqlServerJobQueueProvider", span=""];
m10_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerStorage.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m10_0 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs", label="Entry HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", span="22-22"];
m10_1 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs", label="jobId == null", span="24-24"];
m10_3 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs", label="queue == null", span="25-25"];
m10_5 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs", label="JobId = jobId", span="27-27"];
m10_6 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs", label="Queue = queue", span="28-28"];
m10_2 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''jobId'');", span="24-24"];
m10_4 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''queue'');", span="25-25"];
m10_7 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs", label="Exit HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", span="22-22"];
m10_9 [file="SqlServerStorage.cs", label="HangFire.Storage.ProcessingJob", span=""];
m11_0 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", span="8-8"];
m11_1 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="var sb = new StringBuilder(request.Path)", span="10-10"];
m11_2 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="var pathInfo = request.PathInfo", span="11-11"];
m11_12 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="return basePath + link.TrimStart('/');", span="23-23"];
m11_4 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="var sbIndex = sb.Length - 1", span="13-13"];
m11_5 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="pathInfoIndex >= 0 && sb[sbIndex].Equals(pathInfo[pathInfoIndex])", span="14-14"];
m11_6 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="sb.Remove(sbIndex, 1)", span="16-16"];
m11_9 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="var basePath = sb.ToString()", span="20-20"];
m11_3 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="var pathInfoIndex = pathInfo.Length - 1", span="12-12"];
m11_8 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="pathInfoIndex--", span="18-18"];
m11_7 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="sbIndex--", span="17-17"];
m11_10 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="!basePath.EndsWith(''/'', StringComparison.OrdinalIgnoreCase)", span="21-21"];
m11_11 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="basePath += ''/''", span="21-21"];
m11_13 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", span="8-8"];
m11_19 [cluster="string.TrimStart(params char[])", file="SqlServerWriteOnlyTransaction.cs", label="Entry string.TrimStart(params char[])", span="0-0"];
m11_17 [cluster="System.Text.StringBuilder.ToString()", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m11_16 [cluster="System.Text.StringBuilder.Remove(int, int)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Text.StringBuilder.Remove(int, int)", span="0-0"];
m11_18 [cluster="string.EndsWith(string, System.StringComparison)", file="SqlServerWriteOnlyTransaction.cs", label="Entry string.EndsWith(string, System.StringComparison)", span="0-0"];
m11_14 [cluster="StringBuilder.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry StringBuilder.cstr", span=""];
m11_15 [cluster="Unk.Equals", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Equals", span=""];
n93 -> n5  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n93 -> n7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n93 -> n8  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n93 -> n9  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n93 -> n41  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n93 -> n53  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n93 -> n54  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n93 -> n55  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n93 -> n69  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n93 -> n70  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n93 -> n77  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n93 -> n79  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n93 -> n80  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n93 -> n91  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
n7 -> n19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n8 -> n24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n9 -> n28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n29 -> n32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n36 -> n40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n54 -> n60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n55 -> n63  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n70 -> n72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n77 -> n82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n80 -> n88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n83 -> n85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d45 -> n48  [color=green, key=1, label="lambda expression", style=dashed];
d93 -> d49  [color=green, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> n5  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> n7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> n8  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> n9  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> n41  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> n53  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> n54  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> n55  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> d69  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> d70  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> n77  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> d79  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> d80  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d93 -> n91  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d70 -> d72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d80 -> d88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_0 -> m4_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_0 -> m4_13  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m4_8 -> m4_15  [color=green, key=1, label=parameters, style=dashed];
m4_8 -> m4_10  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m4_8 -> m4_11  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m4_8 -> m4_12  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m4_8 -> m4_13  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m4_8 -> m4_14  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m4_16 -> m4_18  [color=darkseagreen4, key=1, label=lockResult, style=dashed];
m4_13 -> m4_13  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m4_35 -> m4_37  [color=green, key=1, label=parameters, style=dashed];
m4_35 -> m4_38  [color=green, key=1, label=parameters, style=dashed];
m4_35 -> m4_39  [color=green, key=1, label=parameters, style=dashed];
m4_40 -> m4_42  [color=green, key=1, label=releaseResult, style=dashed];
m4_44 -> m4_15  [color=green, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m4_44 -> m4_36  [color=green, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m4_44 -> m4_39  [color=green, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m4_44 -> m4_42  [color=green, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m4_44 -> m4_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m4_44 -> m4_18  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m4_44 -> m4_32  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m5_23 -> m5_26  [color=green, key=1, label="lambda expression", style=dashed];
m5_0 -> m5_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_14 -> m5_18  [color=green, key=1, label="lambda expression", style=dashed];
m5_36 -> m5_30  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m5_36 -> m5_32  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m5_36 -> m5_33  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerFetchedJob", style=dashed];
m6_85 -> m6_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_166 -> m6_168  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_198 -> m6_203  [color=darkseagreen4, key=1, label=Table, style=dashed];
m6_198 -> m6_202  [color=darkseagreen4, key=1, label=Table, style=dashed];
m6_200 -> m6_203  [color=darkseagreen4, key=1, label=history, style=dashed];
m6_201 -> m6_203  [color=darkseagreen4, key=1, label=i, style=dashed];
m6_201 -> m6_204  [color=darkseagreen4, key=1, label=i, style=dashed];
m6_204 -> m6_204  [color=darkseagreen4, key=1, label=i, style=dashed];
m6_133 -> m6_135  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_62 -> m6_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_4 -> m6_2  [color=darkseagreen4, key=1, label="HangFire.Filters.PerformedContext", style=dashed];
m6_112 -> m6_114  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m6_143 -> m6_148  [color=darkseagreen4, key=1, label=Table, style=dashed];
m6_146 -> m6_148  [color=darkseagreen4, key=1, label=history, style=dashed];
m6_122 -> m6_124  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m6_40 -> m6_42  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_178 -> m6_178  [color=darkseagreen4, key=1, label=property, style=dashed];
m6_177 -> m6_177  [color=darkseagreen4, key=1, label=property, style=dashed];
m6_174 -> m6_178  [color=darkseagreen4, key=1, label=history, style=dashed];
m6_174 -> m6_177  [color=darkseagreen4, key=1, label=history, style=dashed];
m6_0 -> m6_2  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m6_23 -> m6_26  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_23 -> m6_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_24 -> m6_26  [color=darkseagreen4, key=1, label=mock, style=dashed];
m6_25 -> m6_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_155 -> m6_158  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_182 -> m6_184  [color=darkseagreen4, key=1, label=stateEntry, style=dashed];
m6_182 -> m6_185  [color=darkseagreen4, key=1, label=stateEntry, style=dashed];
m6_185 -> m6_185  [color=darkseagreen4, key=1, label=property, style=dashed];
m6_184 -> m6_184  [color=darkseagreen4, key=1, label=property, style=dashed];
m6_188 -> m6_192  [color=darkseagreen4, key=1, label=Table, style=dashed];
m6_188 -> m6_191  [color=darkseagreen4, key=1, label=Table, style=dashed];
m6_190 -> m6_192  [color=darkseagreen4, key=1, label=i, style=dashed];
m6_190 -> m6_193  [color=darkseagreen4, key=1, label=i, style=dashed];
m6_193 -> m6_193  [color=darkseagreen4, key=1, label=i, style=dashed];
m6_87 -> m6_89  [color=darkseagreen4, key=1, label="?", style=dashed];
m6_159 -> m6_162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_65 -> m6_67  [color=darkseagreen4, key=1, label="?", style=dashed];
m6_209 -> m6_213  [color=darkseagreen4, key=1, label=Table, style=dashed];
m6_209 -> m6_212  [color=darkseagreen4, key=1, label=Table, style=dashed];
m6_211 -> m6_213  [color=darkseagreen4, key=1, label=i, style=dashed];
m6_211 -> m6_214  [color=darkseagreen4, key=1, label=i, style=dashed];
m6_214 -> m6_214  [color=darkseagreen4, key=1, label=i, style=dashed];
m6_138 -> m6_140  [color=darkseagreen4, key=1, label=Table, style=dashed];
m6_216 -> m6_26  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m6_216 -> m6_36  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m6_216 -> m6_42  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m6_216 -> m6_48  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m6_216 -> m6_57  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m6_216 -> m6_155  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m6_216 -> m6_166  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m6_216 -> m6_176  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m6_216 -> m6_183  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m6_216 -> m6_189  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m6_216 -> m6_192  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m6_216 -> m6_196  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m6_216 -> m6_210  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m6_216 -> m6_213  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m7_34 -> m7_37  [color=green, key=1, label="Hangfire.States.IState", style=dashed];
m7_34 -> m7_41  [color=green, key=1, label=string, style=dashed];
m7_6 -> m7_9  [color=darkseagreen4, key=1, label="Hangfire.States.IStateMachineFactory", style=dashed];
m7_6 -> m7_11  [color=darkseagreen4, key=1, label="Hangfire.Client.IJobCreationProcess", style=dashed];
m7_18 -> m7_21  [color=green, key=1, label="Hangfire.States.IState", style=dashed];
m7_24 -> m7_26  [color=darkseagreen4, key=1, label=context, style=dashed];
m7_45 -> m7_25  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobClient", style=dashed];
m10_0 -> m10_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_0 -> m11_12  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_1 -> m11_5  [color=darkseagreen4, key=1, label=sb, style=dashed];
m11_1 -> m11_6  [color=darkseagreen4, key=1, label=sb, style=dashed];
m11_2 -> m11_5  [color=darkseagreen4, key=1, label=pathInfo, style=dashed];
m11_4 -> m11_6  [color=darkseagreen4, key=1, label=sbIndex, style=dashed];
m11_4 -> m11_7  [color=darkseagreen4, key=1, label=sbIndex, style=dashed];
m11_9 -> m11_12  [color=darkseagreen4, key=1, label=basePath, style=dashed];
m11_3 -> m11_5  [color=darkseagreen4, key=1, label=pathInfoIndex, style=dashed];
m11_3 -> m11_8  [color=darkseagreen4, key=1, label=pathInfoIndex, style=dashed];
m11_8 -> m11_8  [color=darkseagreen4, key=1, label=pathInfoIndex, style=dashed];
m11_7 -> m11_7  [color=darkseagreen4, key=1, label=sbIndex, style=dashed];
}
