digraph  {
n93 [label="Hangfire.Core.Tests.Server.SchedulePollerFacts", span=""];
n0 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()"];
n1 [label="_storage = new Mock<JobStorage>()", span="21-21", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()"];
n2 [label="_connection = new Mock<IStorageConnection>()", span="22-22", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()"];
n11 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr"];
n3 [label="_stateMachine = new Mock<IStateMachine>()", span="23-23", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()"];
n12 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr"];
n4 [label="_cts = new CancellationTokenSource()", span="24-24", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()"];
n13 [label="Entry Mock<IStateMachine>.cstr", span="", cluster="Mock<IStateMachine>.cstr"];
n5 [label="_cts.Cancel()", span="25-25", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()"];
n14 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()"];
n6 [label="_stateMachineFactory = new Mock<IStateMachineFactory>()", span="27-27", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()"];
n15 [label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0", cluster="System.Threading.CancellationTokenSource.Cancel()"];
n7 [label="_stateMachineFactory.Setup(x => x.Create(It.IsNotNull<IStorageConnection>()))\r\n                .Returns(_stateMachine.Object)", span="28-29", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()"];
n16 [label="Entry Mock<IStateMachineFactory>.cstr", span="", cluster="Mock<IStateMachineFactory>.cstr"];
n8 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="31-31", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()"];
n17 [label="Entry Unk.Setup", span="", cluster="Unk.Setup"];
n18 [label="Entry Unk.Returns", span="", cluster="Unk.Returns"];
n19 [label="Entry lambda expression", span="28-28", cluster="lambda expression"];
n9 [label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns(JobId)", span="32-33", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()"];
n24 [label="Entry lambda expression", span="31-31", cluster="lambda expression"];
n10 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()"];
n28 [label="Entry lambda expression", span="32-33", cluster="lambda expression"];
n20 [label="x.Create(It.IsNotNull<IStorageConnection>())", span="28-28", cluster="lambda expression"];
n21 [label="Exit lambda expression", span="28-28", cluster="lambda expression"];
n22 [label="Entry Unk.>", span="", cluster="Unk.>"];
n23 [label="Entry Unk.Create", span="", cluster="Unk.Create"];
n25 [label="x.GetConnection()", span="31-31", cluster="lambda expression"];
n26 [label="Exit lambda expression", span="31-31", cluster="lambda expression"];
n27 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection"];
n29 [label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="32-33", cluster="lambda expression"];
n30 [label="Exit lambda expression", span="32-33", cluster="lambda expression"];
n31 [label="Entry Unk.GetFirstByLowestScoreFromSet", span="", cluster="Unk.GetFirstByLowestScoreFromSet"];
n32 [label="Entry lambda expression", span="33-33", cluster="lambda expression"];
n33 [label="time > 0", span="33-33", cluster="lambda expression"];
n34 [label="Exit lambda expression", span="33-33", cluster="lambda expression"];
n35 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()"];
n36 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan))", span="39-41", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()"];
n37 [label="Assert.Equal(''storage'', exception.ParamName)", span="43-43", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()"];
n40 [label="Entry lambda expression", span="40-41", cluster="lambda expression"];
n38 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()"];
n39 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n41 [label="new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan)", span="40-41", cluster="lambda expression"];
n42 [label="Exit lambda expression", span="40-41", cluster="lambda expression"];
n43 [label="Entry SchedulePoller.cstr", span="", cluster="SchedulePoller.cstr"];
n44 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="47-47", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()"];
n45 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    _storage.Object, null, Timeout.InfiniteTimeSpan))", span="49-51", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", color=red, community=0];
n46 [label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="53-53", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()"];
n48 [label="Entry lambda expression", span="50-51", cluster="lambda expression"];
n47 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="47-47", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()"];
n49 [label="new SchedulePoller(\r\n                    _storage.Object, null, Timeout.InfiniteTimeSpan)", span="50-51", cluster="lambda expression", color=red, community=0];
n50 [label="Exit lambda expression", span="50-51", cluster="lambda expression"];
n51 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="57-57", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()"];
n52 [label="var scheduler = CreateScheduler()", span="59-59", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()"];
n53 [label="scheduler.Execute(_cts.Token)", span="61-61", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()"];
n57 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="94-94", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()"];
n54 [label="_storage.Verify(x => x.GetConnection())", span="63-63", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()"];
n58 [label="Entry Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", span="47-47", cluster="Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)"];
n55 [label="_connection.Verify(x => x.Dispose())", span="64-64", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()"];
n59 [label="Entry Unk.Verify", span="", cluster="Unk.Verify"];
n60 [label="Entry lambda expression", span="63-63", cluster="lambda expression"];
n56 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="57-57", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()"];
n63 [label="Entry lambda expression", span="64-64", cluster="lambda expression"];
n61 [label="x.GetConnection()", span="63-63", cluster="lambda expression"];
n62 [label="Exit lambda expression", span="63-63", cluster="lambda expression"];
n64 [label="x.Dispose()", span="64-64", cluster="lambda expression"];
n65 [label="Exit lambda expression", span="64-64", cluster="lambda expression"];
n66 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose"];
n67 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="68-68", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()"];
n68 [label="var scheduler = CreateScheduler()", span="70-70", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()"];
n69 [label="scheduler.Execute(_cts.Token)", span="72-72", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()"];
n70 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName }))", span="74-77", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()"];
n71 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="68-68", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()"];
n72 [label="Entry lambda expression", span="74-77", cluster="lambda expression"];
n73 [label="x.ChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName })", span="74-77", cluster="lambda expression"];
n74 [label="Exit lambda expression", span="74-77", cluster="lambda expression"];
n75 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState"];
n76 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="81-81", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()"];
n77 [label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns((string)null)", span="83-84", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()"];
n78 [label="var scheduler = CreateScheduler()", span="85-85", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()"];
n82 [label="Entry lambda expression", span="83-84", cluster="lambda expression"];
n79 [label="scheduler.Execute(_cts.Token)", span="87-87", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()"];
n80 [label="_stateMachine.Verify(\r\n                x => x.ChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>()),\r\n                Times.Never)", span="89-91", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()"];
n81 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="81-81", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()"];
n88 [label="Entry lambda expression", span="90-90", cluster="lambda expression"];
n83 [label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="83-84", cluster="lambda expression"];
n84 [label="Exit lambda expression", span="83-84", cluster="lambda expression"];
n85 [label="Entry lambda expression", span="84-84", cluster="lambda expression"];
n86 [label="time > 0", span="84-84", cluster="lambda expression"];
n87 [label="Exit lambda expression", span="84-84", cluster="lambda expression"];
n89 [label="x.ChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>())", span="90-90", cluster="lambda expression"];
n90 [label="Exit lambda expression", span="90-90", cluster="lambda expression"];
n91 [label="return new SchedulePoller(_storage.Object, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan);", span="96-96", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()"];
n92 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="94-94", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()"];
d45 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    _storage.Object, null, Timeout.InfiniteTimeSpan))", span="49-51", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", color=green, community=0];
d93 [label="Hangfire.Core.Tests.Server.SchedulePollerFacts", span=""];
d22 [label="Entry Unk.>", span="", cluster="Unk.>"];
d49 [label="new SchedulePoller(\r\n                    _storage.Object, null, Timeout.InfiniteTimeSpan)", span="50-51", cluster="lambda expression", color=green, community=0];
d69 [label="scheduler.Execute(_cts.Token)", span="72-72", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()"];
d70 [label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName }))", span="74-77", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()"];
d79 [label="scheduler.Execute(_cts.Token)", span="87-87", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()"];
d80 [label="_stateMachine.Verify(\r\n                x => x.TryToChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>()),\r\n                Times.Never)", span="89-91", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()"];
d73 [label="x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName })", span="74-77", cluster="lambda expression"];
d89 [label="x.TryToChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>())", span="90-90", cluster="lambda expression"];
d71 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="68-68", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()"];
d59 [label="Entry Unk.Verify", span="", cluster="Unk.Verify"];
d72 [label="Entry lambda expression", span="74-77", cluster="lambda expression"];
d81 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="81-81", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()"];
d88 [label="Entry lambda expression", span="90-90", cluster="lambda expression"];
d74 [label="Exit lambda expression", span="74-77", cluster="lambda expression"];
d75 [label="Entry Unk.TryToChangeState", span="", cluster="Unk.TryToChangeState"];
d90 [label="Exit lambda expression", span="90-90", cluster="lambda expression"];
m0_0 [label="Entry HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="4-4", cluster="HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="ExpirationManager.cs"];
m0_1 [label="Exit HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="4-4", cluster="HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="ExpirationManager.cs"];
m0_2 [label="Entry HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="5-5", cluster="HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="ExpirationManager.cs"];
m0_3 [label="Exit HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="5-5", cluster="HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="ExpirationManager.cs"];
m1_0 [label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueue(IDbConnection)", span="22-22", cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueue(IDbConnection)", file="IPersistentJobQueueProvider.cs"];
m1_1 [label="Exit Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueue(IDbConnection)", span="22-22", cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueue(IDbConnection)", file="IPersistentJobQueueProvider.cs"];
m1_2 [label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="23-23", cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="IPersistentJobQueueProvider.cs"];
m1_3 [label="Exit Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="23-23", cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="IPersistentJobQueueProvider.cs"];
m3_0 [label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22", cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="RabbitMqJobQueueProvider.cs"];
m3_1 [label="Exit Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22", cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="RabbitMqJobQueueProvider.cs"];
m4_0 [label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22", cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="SqlServerDistributedLock.cs"];
m4_1 [label="Exit Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22", cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", color=green, community=0, file="SqlServerDistributedLock.cs"];
m4_2 [label="throw new ArgumentNullException(''storage'');", span="49-49", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="SqlServerDistributedLock.cs"];
m4_3 [label="String.IsNullOrEmpty(resource)", span="50-50", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_5 [label="_storage = storage", span="52-52", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="SqlServerDistributedLock.cs"];
m4_6 [label="_resource = resource", span="53-53", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_7 [label="_connection = storage.CreateAndOpenConnection()", span="54-54", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="SqlServerDistributedLock.cs"];
m4_8 [label="var parameters = new DynamicParameters()", span="56-56", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_15 [label="_connection.Execute(\r\n                @''sp_getapplock'', \r\n                parameters, \r\n                commandType: CommandType.StoredProcedure)", span="64-67", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="SqlServerDistributedLock.cs"];
m4_14 [label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", span="62-62", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_16 [label="var lockResult = parameters.Get<int>(''@Result'')", span="69-69", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_13 [label="parameters.Add(''@LockTimeout'', timeout.TotalMilliseconds)", span="61-61", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_4 [label="throw new ArgumentNullException(''resource'');", span="50-50", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_9 [label="parameters.Add(''@Resource'', _resource)", span="57-57", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_18 [label="throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                    ''Could not place a lock on the resource '{0}': {1}.'',\r\n                    _resource,\r\n                    LockErrorMessages.ContainsKey(lockResult) \r\n                        ? LockErrorMessages[lockResult]\r\n                        : String.Format(''Server returned the '{0}' error.'', lockResult)));", span="73-79", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_10 [label="parameters.Add(''@DbPrincipal'', ''public'')", span="58-58", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_11 [label="parameters.Add(''@LockMode'', LockMode)", span="59-59", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_12 [label="parameters.Add(''@LockOwner'', LockOwner)", span="60-60", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_17 [label="lockResult < 0", span="71-71", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_19 [label="Exit Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="44-44", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLock.cs"];
m4_20 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerDistributedLock.cs"];
m4_22 [label="Entry Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="218-218", cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerDistributedLock.cs"];
m4_25 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerDistributedLock.cs"];
m4_21 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="SqlServerDistributedLock.cs"];
m4_27 [label="Entry Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", span="22-22", cluster="Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", file="SqlServerDistributedLock.cs"];
m4_29 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="SqlServerDistributedLock.cs"];
m4_30 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="SqlServerDistributedLock.cs"];
m4_28 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="SqlServerDistributedLock.cs"];
m4_31 [label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="83-83", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLock.cs"];
m4_35 [label="var parameters = new DynamicParameters()", span="91-91", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs"];
m4_34 [label="_completed = true", span="87-87", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLock.cs"];
m4_36 [label="parameters.Add(''@Resource'', _resource)", span="92-92", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs"];
m4_37 [label="parameters.Add(''@LockOwner'', LockOwner)", span="93-93", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs"];
m4_38 [label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", span="94-94", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs"];
m4_39 [label="_connection.Execute(\r\n                    @''sp_releaseapplock'',\r\n                    parameters,\r\n                    commandType: CommandType.StoredProcedure)", span="96-99", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs"];
m4_40 [label="var releaseResult = parameters.Get<int>(''@Result'')", span="101-101", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs"];
m4_41 [label="releaseResult < 0", span="103-103", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs"];
m4_42 [label="throw new SqlServerDistributedLockException(\r\n                        String.Format(\r\n                            ''Could not release a lock on the resource '{0}': Server returned the '{1}' error.'',\r\n                            _resource,\r\n                            releaseResult));", span="105-109", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="SqlServerDistributedLock.cs"];
m4_32 [label=_completed, span="85-85", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLock.cs"];
m4_33 [label="return;", span="85-85", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLock.cs"];
m4_43 [label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="83-83", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLock.cs"];
m4_23 [label="Entry DynamicParameters.cstr", span="", cluster="DynamicParameters.cstr", file="SqlServerDistributedLock.cs"];
m4_24 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="SqlServerDistributedLock.cs"];
m4_44 [label="Hangfire.SqlServer.SqlServerDistributedLock", span="", file="SqlServerDistributedLock.cs"];
m5_12 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerFetchedJob.cs"];
m5_22 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", span="64-64", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", file="SqlServerFetchedJob.cs"];
m5_23 [label="_storage.UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    ''update HangFire.JobQueue set FetchedAt = null where Id = @id'',\r\n                    new { id = Id });\r\n            })", span="66-71", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", color=green, community=0, file="SqlServerFetchedJob.cs"];
m5_24 [label="_requeued = true", span="73-73", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", file="SqlServerFetchedJob.cs"];
m5_25 [label="Exit Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", span="64-64", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", file="SqlServerFetchedJob.cs"];
m5_0 [label="Entry HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="4-4", cluster="HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="SqlServerFetchedJob.cs"];
m5_1 [label="Exit HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="4-4", cluster="HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", color=green, community=0, file="SqlServerFetchedJob.cs"];
m5_2 [label="Entry HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="5-5", cluster="HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", color=green, community=0, file="SqlServerFetchedJob.cs"];
m5_3 [label="Exit HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="5-5", cluster="HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="SqlServerFetchedJob.cs"];
m5_7 [label="_storage = storage", span="41-41", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", color=green, community=0, file="SqlServerFetchedJob.cs"];
m5_5 [label="queue == null", span="39-39", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs"];
m5_8 [label="Id = id", span="43-43", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs"];
m5_9 [label="JobId = jobId", span="44-44", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs"];
m5_10 [label="Queue = queue", span="45-45", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs"];
m5_4 [label="throw new ArgumentNullException(''jobId'');", span="38-38", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs"];
m5_6 [label="throw new ArgumentNullException(''queue'');", span="39-39", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs"];
m5_11 [label="Exit Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", span="31-31", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(Hangfire.SqlServer.SqlServerStorage, int, string, string)", file="SqlServerFetchedJob.cs"];
m5_21 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerFetchedJob.cs"];
m5_29 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", span="76-76", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs"];
m5_30 [label=_disposed, span="78-78", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs"];
m5_32 [label="!_removedFromQueue && !_requeued", span="80-80", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs"];
m5_33 [label="Requeue()", span="82-82", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs"];
m5_34 [label="_disposed = true", span="85-85", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs"];
m5_31 [label="return;", span="78-78", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs"];
m5_35 [label="Exit Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", span="76-76", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerFetchedJob.cs"];
m5_13 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", span="52-52", cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", file="SqlServerFetchedJob.cs"];
m5_14 [label="_storage.UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    ''delete from HangFire.JobQueue where Id = @id'',\r\n                    new { id = Id });\r\n            })", span="54-59", cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", color=green, community=0, file="SqlServerFetchedJob.cs"];
m5_15 [label="_removedFromQueue = true", span="61-61", cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", file="SqlServerFetchedJob.cs"];
m5_16 [label="Exit Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", span="52-52", cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", file="SqlServerFetchedJob.cs"];
m5_17 [label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", span="174-174", cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="SqlServerFetchedJob.cs"];
m5_26 [label="Entry lambda expression", span="66-71", cluster="lambda expression", file="SqlServerFetchedJob.cs"];
m5_18 [label="Entry lambda expression", span="54-59", cluster="lambda expression", file="SqlServerFetchedJob.cs"];
m5_19 [label="connection.Execute(\r\n                    ''delete from HangFire.JobQueue where Id = @id'',\r\n                    new { id = Id })", span="56-58", cluster="lambda expression", color=green, community=0, file="SqlServerFetchedJob.cs"];
m5_20 [label="Exit lambda expression", span="54-59", cluster="lambda expression", file="SqlServerFetchedJob.cs"];
m5_27 [label="connection.Execute(\r\n                    ''update HangFire.JobQueue set FetchedAt = null where Id = @id'',\r\n                    new { id = Id })", span="68-70", cluster="lambda expression", color=green, community=0, file="SqlServerFetchedJob.cs"];
m5_28 [label="Exit lambda expression", span="66-71", cluster="lambda expression", file="SqlServerFetchedJob.cs"];
m5_36 [label="Hangfire.SqlServer.SqlServerFetchedJob", span="", file="SqlServerFetchedJob.cs"];
m6_69 [label="Entry Unk.GetTimeToLive", span="", cluster="Unk.GetTimeToLive", file="SqlServerJobQueue.cs"];
m6_39 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="SqlServerJobQueue.cs"];
m6_83 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="212-212", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="SqlServerJobQueue.cs"];
m6_84 [label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="214-219", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="SqlServerJobQueue.cs"];
m6_85 [label="keys.ForEach(x =>\r\n            {\r\n                var ttl = Redis.Client.GetTimeToLive(x);\r\n                Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl));\r\n            })", span="221-227", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="SqlServerJobQueue.cs"];
m6_86 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="212-212", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="SqlServerJobQueue.cs"];
m6_47 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="119-119", cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="SqlServerJobQueue.cs"];
m6_48 [label="_filters.Add(new TestStateChangedFilter(name, _stateAppliedResults))", span="121-121", cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="SqlServerJobQueue.cs"];
m6_49 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="119-119", cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="SqlServerJobQueue.cs"];
m6_9 [label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="27-27", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="SqlServerJobQueue.cs"];
m6_99 [label="Entry Unk.SortedSetContainsItem", span="", cluster="Unk.SortedSetContainsItem", file="SqlServerJobQueue.cs"];
m6_118 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)", file="SqlServerJobQueue.cs"];
m6_75 [label="Entry string.Format(string, params object[])", span="0-0", cluster="string.Format(string, params object[])", file="SqlServerJobQueue.cs"];
m6_165 [label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="350-350", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="SqlServerJobQueue.cs"];
m6_166 [label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.IsAny<StateApplyingContext>(), It.IsAny<IWriteOnlyTransaction>()),\r\n                Times.Never)", span="352-354", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="SqlServerJobQueue.cs"];
m6_167 [label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="350-350", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="SqlServerJobQueue.cs"];
m6_198 [label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="405-405", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs"];
m6_203 [label="Assert.Equal(table.Rows[i][''State''], history[i][''State''])", span="413-413", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs"];
m6_199 [label="var serializedHistory = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="407-408", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs"];
m6_202 [label="i < table.RowCount", span="411-411", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs"];
m6_200 [label="var history = serializedHistory.Select(JobHelper.FromJson<Dictionary<string, string>>).ToList()", span="409-409", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs"];
m6_201 [label="var i = 0", span="411-411", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs"];
m6_204 [label="i++", span="411-411", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs"];
m6_205 [label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="405-405", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="SqlServerJobQueue.cs"];
m6_137 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="SqlServerJobQueue.cs"];
m6_133 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="295-295", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="SqlServerJobQueue.cs"];
m6_135 [label="Assert.Equal(state, job[''State''])", span="298-298", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="SqlServerJobQueue.cs"];
m6_134 [label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="297-297", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="SqlServerJobQueue.cs"];
m6_136 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="295-295", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="SqlServerJobQueue.cs"];
m6_60 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="176-176", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="SqlServerJobQueue.cs"];
m6_61 [label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="178-183", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="SqlServerJobQueue.cs"];
m6_62 [label="keys.ForEach(x =>\r\n                {\r\n                    var ttl = Redis.Client.GetTimeToLive(x);\r\n                    Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl));\r\n                })", span="185-192", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="SqlServerJobQueue.cs"];
m6_63 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="176-176", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="SqlServerJobQueue.cs"];
m6_82 [label="Entry Unk.PopItemFromList", span="", cluster="Unk.PopItemFromList", file="SqlServerJobQueue.cs"];
m6_150 [label="Entry Unk.RemoveStartFromList", span="", cluster="Unk.RemoveStartFromList", file="SqlServerJobQueue.cs"];
m6_4 [label="HangFire.Filters.PerformedContext", span="", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="SqlServerJobQueue.cs"];
m6_5 [label="_failedException = new InvalidOperationException(''Hello'')", span="50-50", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="SqlServerJobQueue.cs"];
m6_6 [label="_state = new FailedState(_failedException)\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="51-54", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="SqlServerJobQueue.cs"];
m6_7 [label="Exit HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="48-48", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="SqlServerJobQueue.cs"];
m6_13 [label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="27-27", cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="SqlServerJobQueue.cs"];
m6_46 [label="Entry TestStateChangingFilter.cstr", span="", cluster="TestStateChangingFilter.cstr", file="SqlServerJobQueue.cs"];
m6_44 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SqlServerJobQueue.cs"];
m6_117 [label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="41-41", cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="SqlServerJobQueue.cs"];
m6_110 [label="Entry HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="262-262", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="SqlServerJobQueue.cs"];
m6_113 [label="Assert.True(timestamp > DateTime.UtcNow.AddSeconds(-1))", span="267-267", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="SqlServerJobQueue.cs"];
m6_114 [label="Assert.True(timestamp < DateTime.UtcNow.AddSeconds(1))", span="268-268", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="SqlServerJobQueue.cs"];
m6_112 [label="var timestamp = JobHelper.FromTimestamp((long)score)", span="265-265", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="SqlServerJobQueue.cs"];
m6_111 [label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:processing'', JobSteps.DefaultJobId)", span="264-264", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="SqlServerJobQueue.cs"];
m6_115 [label="Exit HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="262-262", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="SqlServerJobQueue.cs"];
m6_149 [label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="310-310", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs"];
m6_144 [label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="312-313", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs"];
m6_145 [label="Assert.NotNull(entry)", span="314-314", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs"];
m6_147 [label="Assert.NotNull(history)", span="317-317", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs"];
m6_143 [label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="310-310", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs"];
m6_146 [label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="316-316", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs"];
m6_148 [label="TableAssert.ContainsFollowingItems(table, history)", span="319-319", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="SqlServerJobQueue.cs"];
m6_153 [label="Entry HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", span="8-8", cluster="HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", file="SqlServerJobQueue.cs"];
m6_94 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="237-237", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="SqlServerJobQueue.cs"];
m6_95 [label="Assert.Equal(1, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="239-239", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="SqlServerJobQueue.cs"];
m6_96 [label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:failed'', JobSteps.DefaultJobId))", span="240-240", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="SqlServerJobQueue.cs"];
m6_97 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="237-237", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="SqlServerJobQueue.cs"];
m6_180 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="SqlServerJobQueue.cs"];
m6_72 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="196-196", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="SqlServerJobQueue.cs"];
m6_73 [label="Assert.Equal(\r\n                changeType == ''increase'' ? ''1'' : ''0'',\r\n                Redis.Client.GetValue(String.Format(''hangfire:stats:succeeded'')))", span="198-200", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="SqlServerJobQueue.cs"];
m6_74 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="196-196", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="SqlServerJobQueue.cs"];
m6_152 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerJobQueue.cs"];
m6_116 [label="Entry Unk.GetItemScoreInSortedSet", span="", cluster="Unk.GetItemScoreInSortedSet", file="SqlServerJobQueue.cs"];
m6_22 [label="Entry HangFire.States.EnqueuedState.EnqueuedState()", span="29-29", cluster="HangFire.States.EnqueuedState.EnqueuedState()", file="SqlServerJobQueue.cs"];
m6_50 [label="Entry HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", span="15-15", cluster="HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", file="SqlServerJobQueue.cs"];
m6_56 [label="Entry HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="170-170", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="SqlServerJobQueue.cs"];
m6_57 [label="Assert.Equal(name, _state.Name)", span="172-172", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="SqlServerJobQueue.cs"];
m6_58 [label="Exit HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="170-170", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="SqlServerJobQueue.cs"];
m6_38 [label="Entry HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.State)", span="14-14", cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.State)", file="SqlServerJobQueue.cs"];
m6_109 [label="Entry Unk.False", span="", cluster="Unk.False", file="SqlServerJobQueue.cs"];
m6_19 [label="Entry HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="SqlServerJobQueue.cs"];
m6_20 [label="_state = new EnqueuedState\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="78-81", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="SqlServerJobQueue.cs"];
m6_21 [label="Exit HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="SqlServerJobQueue.cs"];
m6_119 [label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="272-272", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs"];
m6_123 [label="Assert.True(timestamp >= DateTime.UtcNow.Date.AddDays(1))", span="278-278", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs"];
m6_124 [label="Assert.True(timestamp < DateTime.UtcNow.Date.AddDays(2))", span="279-279", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs"];
m6_122 [label="var timestamp = JobHelper.FromTimestamp((long) score)", span="276-276", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs"];
m6_121 [label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:schedule'', JobSteps.DefaultJobId)", span="275-275", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs"];
m6_120 [label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="274-274", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs"];
m6_125 [label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="272-272", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="SqlServerJobQueue.cs"];
m6_195 [label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="399-399", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="SqlServerJobQueue.cs"];
m6_196 [label="Assert.Equal(0, _stateChangingResults.Count)", span="401-401", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="SqlServerJobQueue.cs"];
m6_197 [label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="399-399", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="SqlServerJobQueue.cs"];
m6_35 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="104-104", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="SqlServerJobQueue.cs"];
m6_36 [label="_filters.Add(new TestStateChangingFilter(name, _stateChangingResults))", span="106-106", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="SqlServerJobQueue.cs"];
m6_37 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="104-104", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="SqlServerJobQueue.cs"];
m6_10 [label="Entry HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="SqlServerJobQueue.cs"];
m6_11 [label="_state = new ProcessingState(''TestServer'')\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="60-63", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="SqlServerJobQueue.cs"];
m6_12 [label="Exit HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="SqlServerJobQueue.cs"];
m6_81 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount", file="SqlServerJobQueue.cs"];
m6_40 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="110-110", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="SqlServerJobQueue.cs"];
m6_42 [label="_filters.Add(\r\n                new TestStateChangingFilter(name, _stateChangingResults, _stateMocks[state].Object))", span="114-115", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="SqlServerJobQueue.cs"];
m6_41 [label="Given(String.Format(''a '{0}' state'', state))", span="112-112", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="SqlServerJobQueue.cs"];
m6_43 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="110-110", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="SqlServerJobQueue.cs"];
m6_171 [label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="358-358", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs"];
m6_176 [label=_stateProperties, span="367-367", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs"];
m6_175 [label="Assert.NotNull(history)", span="365-365", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs"];
m6_178 [label="Assert.Equal(property.Value, history[property.Key])", span="370-370", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs"];
m6_177 [label="Assert.True(history.ContainsKey(property.Key))", span="369-369", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs"];
m6_174 [label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="364-364", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs"];
m6_172 [label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="360-361", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs"];
m6_173 [label="Assert.NotNull(entry)", span="362-362", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs"];
m6_179 [label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="358-358", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="SqlServerJobQueue.cs"];
m6_3 [label="Exit HangFire.Filters.PerformedContext.PerformedContext(HangFire.Filters.PerformContext, bool, System.Exception)", span="6-6", cluster="HangFire.Filters.PerformedContext.PerformedContext(HangFire.Filters.PerformContext, bool, System.Exception)", file="SqlServerJobQueue.cs"];
m6_18 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="SqlServerJobQueue.cs"];
m6_0 [label="Entry HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="SqlServerJobQueue.cs"];
m6_1 [label="_state = new SucceededState { Reason = ''SomeReason'' }", span="44-44", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="SqlServerJobQueue.cs"];
m6_2 [label="Exit HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="SqlServerJobQueue.cs"];
m6_8 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SqlServerJobQueue.cs"];
m6_23 [label="Entry HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="SqlServerJobQueue.cs"];
m6_26 [label="_stateMocks.Add(state, mock)", span="90-90", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="SqlServerJobQueue.cs"];
m6_24 [label="var mock = new Mock<State>()", span="87-87", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="SqlServerJobQueue.cs"];
m6_25 [label="mock.Setup(x => x.Name).Returns(state)", span="88-88", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="SqlServerJobQueue.cs"];
m6_27 [label="Exit HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="SqlServerJobQueue.cs"];
m6_151 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="SqlServerJobQueue.cs"];
m6_154 [label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="341-341", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="SqlServerJobQueue.cs"];
m6_155 [label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(\r\n                    It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId),\r\n                    It.IsAny<IWriteOnlyTransaction>()))", span="343-346", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="SqlServerJobQueue.cs"];
m6_156 [label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="341-341", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="SqlServerJobQueue.cs"];
m6_28 [label="Entry Mock<State>.cstr", span="", cluster="Mock<State>.cstr", file="SqlServerJobQueue.cs"];
m6_181 [label="Entry HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="375-375", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="SqlServerJobQueue.cs"];
m6_183 [label=_stateProperties, span="380-380", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="SqlServerJobQueue.cs"];
m6_182 [label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="377-378", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="SqlServerJobQueue.cs"];
m6_185 [label="Assert.Equal(property.Value, stateEntry[property.Key])", span="383-383", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="SqlServerJobQueue.cs"];
m6_184 [label="Assert.True(stateEntry.ContainsKey(property.Key))", span="382-382", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="SqlServerJobQueue.cs"];
m6_186 [label="Exit HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="375-375", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="SqlServerJobQueue.cs"];
m6_29 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="SqlServerJobQueue.cs"];
m6_14 [label="Entry HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67", cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="SqlServerJobQueue.cs"];
m6_15 [label="_state = new ScheduledState(DateTime.UtcNow.AddDays(1))\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="69-72", cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", color=green, community=0, file="SqlServerJobQueue.cs"];
m6_16 [label="Exit HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67", cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="SqlServerJobQueue.cs"];
m6_91 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="231-231", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="SqlServerJobQueue.cs"];
m6_92 [label="Assert.Equal(0, Redis.Client.GetListCount(''hangfire:succeeded''))", span="233-233", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="SqlServerJobQueue.cs"];
m6_93 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="231-231", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="SqlServerJobQueue.cs"];
m6_161 [label="Entry Unk.Unapply", span="", cluster="Unk.Unapply", file="SqlServerJobQueue.cs"];
m6_64 [label="Entry Unk.ForEach", span="", cluster="Unk.ForEach", file="SqlServerJobQueue.cs"];
m6_188 [label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="388-388", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_189 [label="Assert.Equal(table.RowCount, _stateChangingResults.Count)", span="390-390", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_192 [label="Assert.Equal(table.Rows[i][''Filter''], _stateChangingResults[i])", span="394-394", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_190 [label="var i = 0", span="392-392", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_191 [label="i < table.RowCount", span="392-392", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_193 [label="i++", span="392-392", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_194 [label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="388-388", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_87 [label="Entry lambda expression", span="221-227", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_158 [label="Entry lambda expression", span="344-346", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_168 [label="Entry lambda expression", span="353-353", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_32 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_160 [label="Exit lambda expression", span="344-346", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_159 [label="x.Unapply(\r\n                    It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId),\r\n                    It.IsAny<IWriteOnlyTransaction>())", span="344-346", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_170 [label="Exit lambda expression", span="353-353", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_169 [label="x.Unapply(It.IsAny<StateApplyingContext>(), It.IsAny<IWriteOnlyTransaction>())", span="353-353", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_67 [label="Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl))", span="188-191", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_89 [label="Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl))", span="224-226", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_34 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_33 [label="x.Name", span="88-88", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_162 [label="Entry lambda expression", span="345-345", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_65 [label="Entry lambda expression", span="185-192", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_66 [label="var ttl = Redis.Client.GetTimeToLive(x)", span="187-187", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_68 [label="Exit lambda expression", span="185-192", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_88 [label="var ttl = Redis.Client.GetTimeToLive(x)", span="223-223", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_90 [label="Exit lambda expression", span="221-227", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_163 [label="y.JobId == JobSteps.DefaultJobId", span="345-345", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_164 [label="Exit lambda expression", span="345-345", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_132 [label="Entry Unk.SetContainsItem", span="", cluster="Unk.SetContainsItem", file="SqlServerJobQueue.cs"];
m6_206 [label="Entry Unk.GetAllItemsFromList", span="", cluster="Unk.GetAllItemsFromList", file="SqlServerJobQueue.cs"];
m6_207 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SqlServerJobQueue.cs"];
m6_45 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="SqlServerJobQueue.cs"];
m6_129 [label="Entry HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="289-289", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="SqlServerJobQueue.cs"];
m6_130 [label="Assert.True(Redis.Client.SetContainsItem(''hangfire:queues'', queue))", span="291-291", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="SqlServerJobQueue.cs"];
m6_131 [label="Exit HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="289-289", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="SqlServerJobQueue.cs"];
m6_17 [label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="28-28", cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", file="SqlServerJobQueue.cs"];
m6_103 [label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="250-250", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="SqlServerJobQueue.cs"];
m6_104 [label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="252-252", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="SqlServerJobQueue.cs"];
m6_105 [label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="250-250", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="SqlServerJobQueue.cs"];
m6_98 [label="Entry Unk.GetSortedSetCount", span="", cluster="Unk.GetSortedSetCount", file="SqlServerJobQueue.cs"];
m6_76 [label="Entry Unk.GetValue", span="", cluster="Unk.GetValue", file="SqlServerJobQueue.cs"];
m6_71 [label="Entry Unk.True", span="", cluster="Unk.True", file="SqlServerJobQueue.cs"];
m6_208 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="SqlServerJobQueue.cs"];
m6_70 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="SqlServerJobQueue.cs"];
m6_126 [label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="283-283", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="SqlServerJobQueue.cs"];
m6_127 [label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="285-285", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="SqlServerJobQueue.cs"];
m6_128 [label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="283-283", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="SqlServerJobQueue.cs"];
m6_106 [label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="256-256", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="SqlServerJobQueue.cs"];
m6_107 [label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="258-258", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="SqlServerJobQueue.cs"];
m6_108 [label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="256-256", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="SqlServerJobQueue.cs"];
m6_142 [label="Entry Unk.ContainsFollowingItems", span="", cluster="Unk.ContainsFollowingItems", file="SqlServerJobQueue.cs"];
m6_30 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="SqlServerJobQueue.cs"];
m6_31 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="SqlServerJobQueue.cs"];
m6_157 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SqlServerJobQueue.cs"];
m6_77 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="204-204", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="SqlServerJobQueue.cs"];
m6_78 [label="Assert.Equal(1, Redis.Client.GetListCount(''hangfire:succeeded''))", span="206-206", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="SqlServerJobQueue.cs"];
m6_79 [label="Assert.Equal(JobSteps.DefaultJobId, Redis.Client.PopItemFromList(\r\n                ''hangfire:succeeded''))", span="207-208", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="SqlServerJobQueue.cs"];
m6_80 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="204-204", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="SqlServerJobQueue.cs"];
m6_100 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="244-244", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="SqlServerJobQueue.cs"];
m6_101 [label="Assert.Equal(0, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="246-246", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="SqlServerJobQueue.cs"];
m6_102 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="244-244", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="SqlServerJobQueue.cs"];
m6_187 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="SqlServerJobQueue.cs"];
m6_209 [label="Entry HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="418-418", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_210 [label="Assert.Equal(table.RowCount, _stateAppliedResults.Count)", span="420-420", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_213 [label="Assert.Equal(table.Rows[i][''Method''], _stateAppliedResults[i])", span="424-424", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_211 [label="var i = 0", span="422-422", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_212 [label="i < table.RowCount", span="422-422", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_214 [label="i++", span="422-422", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_215 [label="Exit HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="418-418", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="SqlServerJobQueue.cs"];
m6_141 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="302-302", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="SqlServerJobQueue.cs"];
m6_139 [label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="304-305", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="SqlServerJobQueue.cs"];
m6_138 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="302-302", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="SqlServerJobQueue.cs"];
m6_140 [label="TableAssert.ContainsFollowingItems(table, stateEntry)", span="306-306", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="SqlServerJobQueue.cs"];
m6_216 [label="HangFire.Tests.States.StateSteps", span="", file="SqlServerJobQueue.cs"];
m7_32 [label="Entry Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", span="28-28", cluster="Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_17 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_30 [label="Entry Hangfire.JobStorage.GetConnection()", span="56-56", cluster="Hangfire.JobStorage.GetConnection()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_34 [label="Entry Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="102-102", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_37 [label="state == null", span="105-105", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_35 [label="jobId == null", span="104-104", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_38 [label="throw new ArgumentNullException(''state'');", span="105-105", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_39 [label="var connection = _storage.GetConnection()", span="107-107", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_41 [label="return stateMachine.ChangeState(jobId, state, fromState != null ? new[] { fromState } : null);", span="110-110", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_40 [label="var stateMachine = _stateMachineFactory.Create(connection)", span="109-109", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_36 [label="throw new ArgumentNullException(''jobId'');", span="104-104", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_42 [label="Exit Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="102-102", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_6 [label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", span="65-65", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_8 [label="throw new ArgumentNullException(''storage'');", span="70-70", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_10 [label="throw new ArgumentNullException(''stateMachineFactory'');", span="71-71", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_12 [label="throw new ArgumentNullException(''process'');", span="72-72", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_13 [label="_storage = storage", span="74-74", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_14 [label="_stateMachineFactory = stateMachineFactory", span="75-75", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_15 [label="_process = process", span="76-76", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_7 [label="storage == null", span="70-70", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_9 [label="stateMachineFactory == null", span="71-71", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_11 [label="process == null", span="72-72", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_16 [label="Exit Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", span="65-65", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_44 [label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SqlServerJobQueueMonitoringApi.cs"];
m7_33 [label="Entry Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", span="34-34", cluster="Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_43 [label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22", cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_18 [label="Entry Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="80-80", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_19 [label="job == null", span="82-82", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_20 [label="throw new ArgumentNullException(''job'');", span="82-82", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_21 [label="state == null", span="83-83", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_22 [label="throw new ArgumentNullException(''state'');", span="83-83", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_23 [label="var connection = _storage.GetConnection()", span="87-87", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_24 [label="var context = new CreateContext(connection, _stateMachineFactory, job, state)", span="89-89", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_26 [label="return context.JobId;", span="92-92", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_28 [label="throw new CreateJobFailedException(''Job creation process has bee failed. See inner exception for details'', ex);", span="97-97", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_25 [label="_process.Run(context)", span="90-90", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_27 [label=Exception, span="95-95", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_29 [label="Exit Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="80-80", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_31 [label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachineFactory, Hangfire.Common.Job, Hangfire.States.IState)", span="46-46", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachineFactory, Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_45 [label="Hangfire.BackgroundJobClient", span="", file="SqlServerJobQueueMonitoringApi.cs"];
m8_10 [label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="39-39", cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="SqlServerJobQueueProvider.cs"];
m8_11 [label="return new SqlServerJobQueueMonitoringApi(connection);", span="41-41", cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", color=red, community=0, file="SqlServerJobQueueProvider.cs"];
m8_12 [label="Exit Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="39-39", cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="SqlServerJobQueueProvider.cs"];
m8_5 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerJobQueueProvider.cs"];
m8_9 [label="Entry Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(IDbConnection, Hangfire.SqlServer.SqlServerStorageOptions)", span="32-32", cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(IDbConnection, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueProvider.cs"];
m8_6 [label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue(IDbConnection)", span="34-34", cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue(IDbConnection)", file="SqlServerJobQueueProvider.cs"];
m8_7 [label="return new SqlServerJobQueue(connection, _options);", span="36-36", cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue(IDbConnection)", color=red, community=0, file="SqlServerJobQueueProvider.cs"];
m8_8 [label="Exit Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue(IDbConnection)", span="34-34", cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue(IDbConnection)", file="SqlServerJobQueueProvider.cs"];
m8_0 [label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", span="25-25", cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueProvider.cs"];
m8_1 [label="options == null", span="27-27", cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueProvider.cs"];
m8_3 [label="_options = options", span="29-29", cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueProvider.cs"];
m8_2 [label="throw new ArgumentNullException(''options'');", span="27-27", cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueProvider.cs"];
m8_4 [label="Exit Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", span="25-25", cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueueProvider.cs"];
m8_13 [label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(IDbConnection)", span="28-28", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(IDbConnection)", file="SqlServerJobQueueProvider.cs"];
m8_14 [label="Hangfire.SqlServer.SqlServerJobQueueProvider", span="", file="SqlServerJobQueueProvider.cs"];
m10_8 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerStorage.cs"];
m10_0 [label="Entry HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", span="22-22", cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs"];
m10_1 [label="jobId == null", span="24-24", cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs"];
m10_3 [label="queue == null", span="25-25", cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs"];
m10_5 [label="JobId = jobId", span="27-27", cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs"];
m10_6 [label="Queue = queue", span="28-28", cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs"];
m10_2 [label="throw new ArgumentNullException(''jobId'');", span="24-24", cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs"];
m10_4 [label="throw new ArgumentNullException(''queue'');", span="25-25", cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs"];
m10_7 [label="Exit HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", span="22-22", cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerStorage.cs"];
m10_9 [label="HangFire.Storage.ProcessingJob", span="", file="SqlServerStorage.cs"];
m11_0 [label="Entry HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", span="8-8", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_1 [label="var sb = new StringBuilder(request.Path)", span="10-10", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_2 [label="var pathInfo = request.PathInfo", span="11-11", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_12 [label="return basePath + link.TrimStart('/');", span="23-23", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_4 [label="var sbIndex = sb.Length - 1", span="13-13", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_5 [label="pathInfoIndex >= 0 && sb[sbIndex].Equals(pathInfo[pathInfoIndex])", span="14-14", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_6 [label="sb.Remove(sbIndex, 1)", span="16-16", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_9 [label="var basePath = sb.ToString()", span="20-20", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_3 [label="var pathInfoIndex = pathInfo.Length - 1", span="12-12", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_8 [label="pathInfoIndex--", span="18-18", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_7 [label="sbIndex--", span="17-17", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_10 [label="!basePath.EndsWith(''/'', StringComparison.OrdinalIgnoreCase)", span="21-21", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_11 [label="basePath += ''/''", span="21-21", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_13 [label="Exit HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", span="8-8", cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_19 [label="Entry string.TrimStart(params char[])", span="0-0", cluster="string.TrimStart(params char[])", file="SqlServerWriteOnlyTransaction.cs"];
m11_17 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="SqlServerWriteOnlyTransaction.cs"];
m11_16 [label="Entry System.Text.StringBuilder.Remove(int, int)", span="0-0", cluster="System.Text.StringBuilder.Remove(int, int)", file="SqlServerWriteOnlyTransaction.cs"];
m11_18 [label="Entry string.EndsWith(string, System.StringComparison)", span="0-0", cluster="string.EndsWith(string, System.StringComparison)", file="SqlServerWriteOnlyTransaction.cs"];
m11_14 [label="Entry StringBuilder.cstr", span="", cluster="StringBuilder.cstr", file="SqlServerWriteOnlyTransaction.cs"];
m11_15 [label="Entry Unk.Equals", span="", cluster="Unk.Equals", file="SqlServerWriteOnlyTransaction.cs"];
n93 -> n1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n36  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n45  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n49  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n52  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n54  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n68  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n69  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n70  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n77  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n78  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n79  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n80  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n93 -> n91  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n11  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n12  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n3 -> n13  [key=2, style=dotted];
n4 -> n5  [key=0, style=solid];
n4 -> n14  [key=2, style=dotted];
n5 -> n6  [key=0, style=solid];
n5 -> n15  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid];
n6 -> n16  [key=2, style=dotted];
n7 -> n8  [key=0, style=solid];
n7 -> n17  [key=2, style=dotted];
n7 -> n18  [key=2, style=dotted];
n7 -> n19  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n7 -> n7  [key=3, color=darkorchid, style=bold, label="Field variable int NumberOfRecordsInSinglePass"];
n8 -> n9  [key=0, style=solid];
n8 -> n17  [key=2, style=dotted];
n8 -> n18  [key=2, style=dotted];
n8 -> n24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n19 -> n20  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n17  [key=2, style=dotted];
n9 -> n18  [key=2, style=dotted];
n9 -> n28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n24 -> n25  [key=0, style=solid];
n10 -> n0  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid];
n20 -> n21  [key=0, style=solid];
n20 -> n22  [key=2, style=dotted];
n20 -> n23  [key=2, style=dotted];
n20 -> d22  [key=2, style=dotted];
n21 -> n19  [key=0, style=bold, color=blue];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [key=2, style=dotted];
n26 -> n24  [key=0, style=bold, color=blue];
n29 -> n30  [key=0, style=solid];
n29 -> n22  [key=2, style=dotted];
n29 -> n31  [key=2, style=dotted];
n29 -> n32  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n29 -> d22  [key=2, style=dotted];
n30 -> n28  [key=0, style=bold, color=blue];
n32 -> n33  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n34 -> n32  [key=0, style=bold, color=blue];
n35 -> n36  [key=0, style=solid];
n36 -> n37  [key=0, style=solid];
n36 -> n22  [key=2, style=dotted];
n36 -> n40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n36 -> d22  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n37 -> n39  [key=2, style=dotted];
n40 -> n41  [key=0, style=solid];
n38 -> n35  [key=0, style=bold, color=blue];
n41 -> n42  [key=0, style=solid];
n41 -> n43  [key=2, style=dotted];
n42 -> n40  [key=0, style=bold, color=blue];
n44 -> n45  [key=0, style=solid, color=red];
n44 -> d45  [key=0, style=solid, color=green];
n45 -> n46  [key=0, style=solid, color=red];
n45 -> n22  [key=2, style=dotted, color=red];
n45 -> n48  [key=1, style=dashed, color=red, label="lambda expression"];
n46 -> n47  [key=0, style=solid];
n46 -> n39  [key=2, style=dotted];
n48 -> n49  [key=0, style=solid, color=red];
n48 -> d49  [key=0, style=solid, color=green];
n47 -> n44  [key=0, style=bold, color=blue];
n49 -> n50  [key=0, style=solid, color=red];
n49 -> n43  [key=2, style=dotted, color=red];
n50 -> n48  [key=0, style=bold, color=blue];
n51 -> n52  [key=0, style=solid];
n52 -> n53  [key=0, style=solid];
n52 -> n57  [key=2, style=dotted];
n53 -> n54  [key=0, style=solid];
n53 -> n58  [key=2, style=dotted];
n57 -> n91  [key=0, style=solid];
n54 -> n55  [key=0, style=solid];
n54 -> n59  [key=2, style=dotted];
n54 -> n60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n54 -> d59  [key=2, style=dotted];
n55 -> n56  [key=0, style=solid];
n55 -> n59  [key=2, style=dotted];
n55 -> n63  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n55 -> d59  [key=2, style=dotted];
n60 -> n61  [key=0, style=solid];
n56 -> n51  [key=0, style=bold, color=blue];
n63 -> n64  [key=0, style=solid];
n61 -> n62  [key=0, style=solid];
n61 -> n27  [key=2, style=dotted];
n62 -> n60  [key=0, style=bold, color=blue];
n64 -> n65  [key=0, style=solid];
n64 -> n66  [key=2, style=dotted];
n65 -> n63  [key=0, style=bold, color=blue];
n67 -> n68  [key=0, style=solid];
n68 -> n69  [key=0, style=solid];
n68 -> n57  [key=2, style=dotted];
n68 -> d69  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n58  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n70 -> n59  [key=2, style=dotted];
n70 -> n72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n71 -> n67  [key=0, style=bold, color=blue];
n72 -> n73  [key=0, style=solid];
n73 -> n74  [key=0, style=solid];
n73 -> n22  [key=2, style=dotted];
n73 -> n75  [key=2, style=dotted];
n74 -> n72  [key=0, style=bold, color=blue];
n76 -> n77  [key=0, style=solid];
n77 -> n78  [key=0, style=solid];
n77 -> n17  [key=2, style=dotted];
n77 -> n18  [key=2, style=dotted];
n77 -> n82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n78 -> n79  [key=0, style=solid];
n78 -> n57  [key=2, style=dotted];
n78 -> d79  [key=0, style=solid];
n82 -> n83  [key=0, style=solid];
n79 -> n80  [key=0, style=solid];
n79 -> n58  [key=2, style=dotted];
n80 -> n81  [key=0, style=solid];
n80 -> n59  [key=2, style=dotted];
n80 -> n88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n81 -> n76  [key=0, style=bold, color=blue];
n88 -> n89  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n83 -> n22  [key=2, style=dotted];
n83 -> n31  [key=2, style=dotted];
n83 -> n85  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n83 -> d22  [key=2, style=dotted];
n84 -> n82  [key=0, style=bold, color=blue];
n85 -> n86  [key=0, style=solid];
n86 -> n87  [key=0, style=solid];
n87 -> n85  [key=0, style=bold, color=blue];
n89 -> n90  [key=0, style=solid];
n89 -> n22  [key=2, style=dotted];
n89 -> n75  [key=2, style=dotted];
n90 -> n88  [key=0, style=bold, color=blue];
n91 -> n92  [key=0, style=solid];
n91 -> n43  [key=2, style=dotted];
n92 -> n57  [key=0, style=bold, color=blue];
d45 -> n46  [key=0, style=solid, color=green];
d45 -> d22  [key=2, style=dotted, color=green];
d45 -> n48  [key=1, style=dashed, color=green, label="lambda expression"];
d93 -> d45  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> d49  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n36  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n52  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n54  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n68  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> d69  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> d70  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n77  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n78  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> d79  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> d80  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d93 -> n91  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
d49 -> n50  [key=0, style=solid, color=green];
d49 -> n43  [key=2, style=dotted, color=green];
d69 -> d70  [key=0, style=solid];
d69 -> n58  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d70 -> d59  [key=2, style=dotted];
d70 -> d72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d79 -> d80  [key=0, style=solid];
d79 -> n58  [key=2, style=dotted];
d80 -> d81  [key=0, style=solid];
d80 -> d59  [key=2, style=dotted];
d80 -> d88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d73 -> d22  [key=2, style=dotted];
d73 -> d74  [key=0, style=solid];
d73 -> d75  [key=2, style=dotted];
d89 -> d22  [key=2, style=dotted];
d89 -> d90  [key=0, style=solid];
d89 -> d75  [key=2, style=dotted];
d71 -> n67  [key=0, style=bold, color=blue];
d72 -> d73  [key=0, style=solid];
d81 -> n76  [key=0, style=bold, color=blue];
d88 -> d89  [key=0, style=solid];
d74 -> d72  [key=0, style=bold, color=blue];
d90 -> d88  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_0  [key=0, style=bold, color=blue];
m0_2 -> m0_3  [key=0, style=solid];
m0_3 -> m0_2  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_0  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_2  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_0  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid, color=green];
m4_0 -> m4_5  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorage"];
m4_0 -> m4_7  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorage"];
m4_0 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_0 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_0 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m4_1 -> m4_2  [key=0, style=solid, color=green];
m4_1 -> m4_3  [key=0, style=solid, color=green];
m4_1 -> m4_0  [key=0, style=bold, color=blue];
m4_2 -> m4_19  [key=0, style=solid, color=green];
m4_2 -> m4_20  [key=2, style=dotted, color=green];
m4_3 -> m4_5  [key=0, style=solid, color=green];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_21  [key=2, style=dotted];
m4_5 -> m4_6  [key=0, style=solid, color=green];
m4_6 -> m4_7  [key=0, style=solid, color=green];
m4_7 -> m4_8  [key=0, style=solid, color=green];
m4_7 -> m4_22  [key=2, style=dotted, color=green];
m4_8 -> m4_15  [key=1, style=dashed, color=green, label=parameters];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_23  [key=2, style=dotted];
m4_8 -> m4_10  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m4_8 -> m4_11  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m4_8 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m4_8 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m4_8 -> m4_14  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m4_8 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m4_15 -> m4_16  [key=0, style=solid, color=green];
m4_15 -> m4_25  [key=2, style=dotted, color=green];
m4_14 -> m4_15  [key=0, style=solid, color=green];
m4_14 -> m4_24  [key=2, style=dotted];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> d22  [key=2, style=dotted];
m4_16 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label=lockResult];
m4_13 -> m4_14  [key=0, style=solid];
m4_13 -> m4_24  [key=2, style=dotted];
m4_13 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m4_4 -> m4_19  [key=0, style=solid];
m4_4 -> m4_20  [key=2, style=dotted];
m4_9 -> m4_24  [key=2, style=dotted];
m4_9 -> m4_10  [key=0, style=solid];
m4_18 -> m4_19  [key=0, style=solid];
m4_18 -> m4_27  [key=2, style=dotted];
m4_18 -> m4_29  [key=2, style=dotted];
m4_18 -> m4_28  [key=2, style=dotted];
m4_18 -> m4_30  [key=2, style=dotted];
m4_10 -> m4_24  [key=2, style=dotted];
m4_10 -> m4_11  [key=0, style=solid];
m4_11 -> m4_24  [key=2, style=dotted];
m4_11 -> m4_12  [key=0, style=solid];
m4_12 -> m4_24  [key=2, style=dotted];
m4_12 -> m4_13  [key=0, style=solid];
m4_17 -> m4_19  [key=0, style=solid];
m4_17 -> m4_18  [key=0, style=solid];
m4_19 -> m4_0  [key=0, style=bold, color=blue];
m4_31 -> m4_32  [key=0, style=solid];
m4_35 -> m4_36  [key=0, style=solid, color=green];
m4_35 -> m4_23  [key=2, style=dotted, color=green];
m4_35 -> m4_37  [key=1, style=dashed, color=green, label=parameters];
m4_35 -> m4_38  [key=1, style=dashed, color=green, label=parameters];
m4_35 -> m4_39  [key=1, style=dashed, color=green, label=parameters];
m4_35 -> m4_40  [key=1, style=dashed, color=green, label=parameters];
m4_34 -> m4_35  [key=0, style=solid, color=green];
m4_36 -> m4_37  [key=0, style=solid, color=green];
m4_36 -> m4_24  [key=2, style=dotted, color=green];
m4_37 -> m4_38  [key=0, style=solid, color=green];
m4_37 -> m4_24  [key=2, style=dotted, color=green];
m4_38 -> m4_39  [key=0, style=solid, color=green];
m4_38 -> m4_24  [key=2, style=dotted, color=green];
m4_39 -> m4_40  [key=0, style=solid, color=green];
m4_39 -> m4_25  [key=2, style=dotted, color=green];
m4_40 -> m4_41  [key=0, style=solid, color=green];
m4_40 -> d22  [key=2, style=dotted, color=green];
m4_40 -> m4_42  [key=1, style=dashed, color=green, label=releaseResult];
m4_41 -> m4_42  [key=0, style=solid, color=green];
m4_41 -> m4_43  [key=0, style=solid, color=green];
m4_42 -> m4_43  [key=0, style=solid, color=green];
m4_42 -> m4_27  [key=2, style=dotted, color=green];
m4_42 -> m4_29  [key=2, style=dotted, color=green];
m4_32 -> m4_34  [key=0, style=solid];
m4_32 -> m4_33  [key=0, style=solid];
m4_33 -> m4_43  [key=0, style=solid];
m4_43 -> m4_31  [key=0, style=bold, color=blue];
m4_44 -> m4_5  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m4_44 -> m4_7  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m4_44 -> m4_15  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m4_44 -> m4_36  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m4_44 -> m4_39  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m4_44 -> m4_42  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m4_44 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m4_44 -> m4_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m4_44 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m4_44 -> m4_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m4_44 -> m4_34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerDistributedLock"];
m5_22 -> m5_23  [key=0, style=solid, color=green];
m5_23 -> m5_24  [key=0, style=solid, color=green];
m5_23 -> m5_17  [key=2, style=dotted, color=green];
m5_23 -> m5_26  [key=1, style=dashed, color=green, label="lambda expression"];
m5_24 -> m5_25  [key=0, style=solid];
m5_25 -> m5_22  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid, color=green];
m5_0 -> m5_7  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorage"];
m5_0 -> m5_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_0 -> m5_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_0 -> m5_8  [key=1, style=dashed, color=darkseagreen4, label=int];
m5_0 -> m5_9  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_0 -> m5_10  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_1 -> m5_2  [key=0, style=solid, color=green];
m5_1 -> m5_3  [key=0, style=solid, color=green];
m5_1 -> m5_0  [key=0, style=bold, color=blue];
m5_2 -> m5_11  [key=0, style=solid, color=green];
m5_2 -> m5_12  [key=2, style=dotted, color=green];
m5_2 -> m5_3  [key=0, style=solid];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_5  [key=0, style=solid];
m5_3 -> m5_2  [key=0, style=bold, color=blue];
m5_7 -> m5_8  [key=0, style=solid, color=green];
m5_5 -> m5_7  [key=0, style=solid, color=green];
m5_5 -> m5_6  [key=0, style=solid];
m5_8 -> m5_9  [key=0, style=solid];
m5_9 -> m5_10  [key=0, style=solid];
m5_10 -> m5_11  [key=0, style=solid];
m5_4 -> m5_11  [key=0, style=solid];
m5_4 -> m5_12  [key=2, style=dotted];
m5_6 -> m5_11  [key=0, style=solid];
m5_6 -> m5_12  [key=2, style=dotted];
m5_11 -> m5_0  [key=0, style=bold, color=blue];
m5_29 -> m5_30  [key=0, style=solid];
m5_30 -> m5_31  [key=0, style=solid];
m5_30 -> m5_32  [key=0, style=solid];
m5_32 -> m5_33  [key=0, style=solid];
m5_32 -> m5_34  [key=0, style=solid];
m5_33 -> m5_22  [key=2, style=dotted];
m5_33 -> m5_34  [key=0, style=solid];
m5_34 -> m5_35  [key=0, style=solid];
m5_31 -> m5_35  [key=0, style=solid];
m5_35 -> m5_29  [key=0, style=bold, color=blue];
m5_13 -> m5_14  [key=0, style=solid, color=green];
m5_14 -> m5_15  [key=0, style=solid, color=green];
m5_14 -> m5_17  [key=2, style=dotted, color=green];
m5_14 -> m5_18  [key=1, style=dashed, color=green, label="lambda expression"];
m5_15 -> m5_16  [key=0, style=solid];
m5_16 -> m5_13  [key=0, style=bold, color=blue];
m5_26 -> m5_27  [key=0, style=solid, color=green];
m5_18 -> m5_19  [key=0, style=solid, color=green];
m5_19 -> m5_20  [key=0, style=solid, color=green];
m5_19 -> m5_21  [key=2, style=dotted, color=green];
m5_20 -> m5_18  [key=0, style=bold, color=blue];
m5_27 -> m5_28  [key=0, style=solid, color=green];
m5_27 -> m5_21  [key=2, style=dotted, color=green];
m5_28 -> m5_26  [key=0, style=bold, color=blue];
m5_36 -> m5_7  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m5_36 -> m5_14  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m5_36 -> m5_19  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m5_36 -> m5_23  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m5_36 -> m5_27  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m5_36 -> m5_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m5_36 -> m5_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m5_36 -> m5_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m5_36 -> m5_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m5_36 -> m5_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m5_36 -> m5_30  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m5_36 -> m5_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m5_36 -> m5_33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m5_36 -> m5_34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerFetchedJob"];
m6_83 -> m6_84  [key=0, style=solid];
m6_84 -> m6_44  [key=2, style=dotted];
m6_84 -> m6_85  [key=0, style=solid];
m6_85 -> m6_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_85 -> m6_86  [key=0, style=solid];
m6_85 -> m6_64  [key=2, style=dotted];
m6_86 -> m6_83  [key=0, style=bold, color=blue];
m6_47 -> m6_48  [key=0, style=solid];
m6_48 -> m6_49  [key=0, style=solid];
m6_48 -> m6_50  [key=2, style=dotted];
m6_48 -> m6_39  [key=2, style=dotted];
m6_49 -> m6_47  [key=0, style=bold, color=blue];
m6_165 -> m6_166  [key=0, style=solid];
m6_166 -> m6_167  [key=0, style=solid];
m6_166 -> m6_157  [key=2, style=dotted];
m6_166 -> m6_168  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_167 -> m6_165  [key=0, style=bold, color=blue];
m6_198 -> m6_203  [key=1, style=dashed, color=darkseagreen4, label=Table];
m6_198 -> m6_199  [key=0, style=solid];
m6_198 -> m6_202  [key=1, style=dashed, color=darkseagreen4, label=Table];
m6_203 -> n39  [key=2, style=dotted];
m6_203 -> m6_204  [key=0, style=solid];
m6_199 -> m6_44  [key=2, style=dotted];
m6_199 -> m6_200  [key=0, style=solid];
m6_199 -> m6_206  [key=2, style=dotted];
m6_202 -> m6_203  [key=0, style=solid];
m6_202 -> m6_205  [key=0, style=solid];
m6_200 -> m6_203  [key=1, style=dashed, color=darkseagreen4, label=history];
m6_200 -> m6_201  [key=0, style=solid];
m6_200 -> m6_207  [key=2, style=dotted];
m6_200 -> m6_208  [key=2, style=dotted];
m6_201 -> m6_203  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_201 -> m6_202  [key=0, style=solid];
m6_201 -> m6_204  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_204 -> m6_202  [key=0, style=solid];
m6_204 -> m6_204  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_205 -> m6_198  [key=0, style=bold, color=blue];
m6_133 -> m6_135  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_133 -> m6_134  [key=0, style=solid];
m6_135 -> n39  [key=2, style=dotted];
m6_135 -> m6_136  [key=0, style=solid];
m6_134 -> m6_44  [key=2, style=dotted];
m6_134 -> m6_135  [key=0, style=solid];
m6_134 -> m6_137  [key=2, style=dotted];
m6_136 -> m6_133  [key=0, style=bold, color=blue];
m6_60 -> m6_61  [key=0, style=solid];
m6_61 -> m6_44  [key=2, style=dotted];
m6_61 -> m6_62  [key=0, style=solid];
m6_62 -> m6_65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_62 -> m6_63  [key=0, style=solid];
m6_62 -> m6_64  [key=2, style=dotted];
m6_63 -> m6_60  [key=0, style=bold, color=blue];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.PerformedContext"];
m6_4 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.PerformedContext"];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_8  [key=2, style=dotted];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> m6_9  [key=2, style=dotted];
m6_7 -> m6_4  [key=0, style=bold, color=blue];
m6_110 -> m6_111  [key=0, style=solid];
m6_113 -> m6_71  [key=2, style=dotted];
m6_113 -> m6_114  [key=0, style=solid];
m6_113 -> m6_118  [key=2, style=dotted];
m6_114 -> m6_71  [key=2, style=dotted];
m6_114 -> m6_115  [key=0, style=solid];
m6_114 -> m6_118  [key=2, style=dotted];
m6_112 -> m6_117  [key=2, style=dotted];
m6_112 -> m6_113  [key=0, style=solid];
m6_112 -> m6_114  [key=1, style=dashed, color=darkseagreen4, label=timestamp];
m6_111 -> m6_116  [key=2, style=dotted];
m6_111 -> m6_112  [key=0, style=solid];
m6_115 -> m6_110  [key=0, style=bold, color=blue];
m6_149 -> m6_143  [key=0, style=bold, color=blue];
m6_144 -> m6_44  [key=2, style=dotted];
m6_144 -> m6_145  [key=0, style=solid];
m6_144 -> m6_150  [key=2, style=dotted];
m6_144 -> m6_146  [key=1, style=dashed, color=darkseagreen4, label=entry];
m6_145 -> m6_151  [key=2, style=dotted];
m6_145 -> m6_146  [key=0, style=solid];
m6_147 -> m6_151  [key=2, style=dotted];
m6_147 -> m6_148  [key=0, style=solid];
m6_143 -> m6_144  [key=0, style=solid];
m6_143 -> m6_148  [key=1, style=dashed, color=darkseagreen4, label=Table];
m6_146 -> m6_152  [key=2, style=dotted];
m6_146 -> m6_147  [key=0, style=solid];
m6_146 -> m6_148  [key=1, style=dashed, color=darkseagreen4, label=history];
m6_148 -> m6_149  [key=0, style=solid];
m6_148 -> m6_153  [key=2, style=dotted];
m6_94 -> m6_95  [key=0, style=solid];
m6_95 -> n39  [key=2, style=dotted];
m6_95 -> m6_96  [key=0, style=solid];
m6_95 -> m6_98  [key=2, style=dotted];
m6_96 -> m6_71  [key=2, style=dotted];
m6_96 -> m6_97  [key=0, style=solid];
m6_96 -> m6_99  [key=2, style=dotted];
m6_97 -> m6_94  [key=0, style=bold, color=blue];
m6_72 -> m6_73  [key=0, style=solid];
m6_73 -> n39  [key=2, style=dotted];
m6_73 -> m6_74  [key=0, style=solid];
m6_73 -> m6_75  [key=2, style=dotted];
m6_73 -> m6_76  [key=2, style=dotted];
m6_74 -> m6_72  [key=0, style=bold, color=blue];
m6_56 -> m6_57  [key=0, style=solid];
m6_57 -> m6_58  [key=0, style=solid];
m6_57 -> n39  [key=2, style=dotted];
m6_58 -> m6_56  [key=0, style=bold, color=blue];
m6_19 -> m6_20  [key=0, style=solid];
m6_20 -> m6_21  [key=0, style=solid];
m6_20 -> m6_22  [key=2, style=dotted];
m6_21 -> m6_19  [key=0, style=bold, color=blue];
m6_119 -> m6_120  [key=0, style=solid];
m6_123 -> m6_18  [key=2, style=dotted];
m6_123 -> m6_124  [key=0, style=solid];
m6_123 -> m6_71  [key=2, style=dotted];
m6_124 -> m6_18  [key=2, style=dotted];
m6_124 -> m6_125  [key=0, style=solid];
m6_124 -> m6_71  [key=2, style=dotted];
m6_122 -> m6_123  [key=0, style=solid];
m6_122 -> m6_124  [key=1, style=dashed, color=darkseagreen4, label=timestamp];
m6_122 -> m6_117  [key=2, style=dotted];
m6_121 -> m6_122  [key=0, style=solid];
m6_121 -> m6_116  [key=2, style=dotted];
m6_120 -> m6_71  [key=2, style=dotted];
m6_120 -> m6_121  [key=0, style=solid];
m6_120 -> m6_99  [key=2, style=dotted];
m6_125 -> m6_119  [key=0, style=bold, color=blue];
m6_195 -> m6_196  [key=0, style=solid];
m6_196 -> m6_197  [key=0, style=solid];
m6_196 -> n39  [key=2, style=dotted];
m6_197 -> m6_195  [key=0, style=bold, color=blue];
m6_35 -> m6_36  [key=0, style=solid];
m6_36 -> m6_37  [key=0, style=solid];
m6_36 -> m6_38  [key=2, style=dotted];
m6_36 -> m6_39  [key=2, style=dotted];
m6_37 -> m6_35  [key=0, style=bold, color=blue];
m6_10 -> m6_11  [key=0, style=solid];
m6_11 -> m6_12  [key=0, style=solid];
m6_11 -> m6_13  [key=2, style=dotted];
m6_12 -> m6_10  [key=0, style=bold, color=blue];
m6_40 -> m6_42  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_40 -> m6_41  [key=0, style=solid];
m6_42 -> m6_43  [key=0, style=solid];
m6_42 -> m6_46  [key=2, style=dotted];
m6_42 -> m6_39  [key=2, style=dotted];
m6_41 -> m6_42  [key=0, style=solid];
m6_41 -> m6_44  [key=2, style=dotted];
m6_41 -> m6_45  [key=2, style=dotted];
m6_43 -> m6_40  [key=0, style=bold, color=blue];
m6_171 -> m6_172  [key=0, style=solid];
m6_176 -> m6_177  [key=0, style=solid];
m6_176 -> m6_179  [key=0, style=solid];
m6_175 -> m6_176  [key=0, style=solid];
m6_175 -> m6_151  [key=2, style=dotted];
m6_178 -> m6_176  [key=0, style=solid];
m6_178 -> n39  [key=2, style=dotted];
m6_178 -> m6_178  [key=1, style=dashed, color=darkseagreen4, label=property];
m6_177 -> m6_178  [key=0, style=solid];
m6_177 -> m6_177  [key=1, style=dashed, color=darkseagreen4, label=property];
m6_177 -> m6_180  [key=2, style=dotted];
m6_177 -> m6_71  [key=2, style=dotted];
m6_174 -> m6_175  [key=0, style=solid];
m6_174 -> m6_178  [key=1, style=dashed, color=darkseagreen4, label=history];
m6_174 -> m6_177  [key=1, style=dashed, color=darkseagreen4, label=history];
m6_174 -> m6_152  [key=2, style=dotted];
m6_172 -> m6_44  [key=2, style=dotted];
m6_172 -> m6_174  [key=1, style=dashed, color=darkseagreen4, label=entry];
m6_172 -> m6_173  [key=0, style=solid];
m6_172 -> m6_150  [key=2, style=dotted];
m6_173 -> m6_174  [key=0, style=solid];
m6_173 -> m6_151  [key=2, style=dotted];
m6_179 -> m6_171  [key=0, style=bold, color=blue];
m6_3 -> m6_0  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_0 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label="System.Exception"];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_3  [key=2, style=dotted];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_0  [key=0, style=bold, color=blue];
m6_23 -> m6_26  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_23 -> m6_24  [key=0, style=solid];
m6_23 -> m6_25  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_26 -> m6_27  [key=0, style=solid];
m6_26 -> m6_31  [key=2, style=dotted];
m6_24 -> m6_26  [key=1, style=dashed, color=darkseagreen4, label=mock];
m6_24 -> m6_25  [key=0, style=solid];
m6_24 -> m6_28  [key=2, style=dotted];
m6_25 -> m6_26  [key=0, style=solid];
m6_25 -> m6_29  [key=2, style=dotted];
m6_25 -> m6_30  [key=2, style=dotted];
m6_25 -> m6_32  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_27 -> m6_23  [key=0, style=bold, color=blue];
m6_154 -> m6_155  [key=0, style=solid];
m6_155 -> m6_156  [key=0, style=solid];
m6_155 -> m6_157  [key=2, style=dotted];
m6_155 -> m6_158  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_156 -> m6_154  [key=0, style=bold, color=blue];
m6_181 -> m6_182  [key=0, style=solid];
m6_183 -> m6_184  [key=0, style=solid];
m6_183 -> m6_186  [key=0, style=solid];
m6_182 -> m6_183  [key=0, style=solid];
m6_182 -> m6_44  [key=2, style=dotted];
m6_182 -> m6_137  [key=2, style=dotted];
m6_182 -> m6_184  [key=1, style=dashed, color=darkseagreen4, label=stateEntry];
m6_182 -> m6_185  [key=1, style=dashed, color=darkseagreen4, label=stateEntry];
m6_185 -> m6_183  [key=0, style=solid];
m6_185 -> n39  [key=2, style=dotted];
m6_185 -> m6_185  [key=1, style=dashed, color=darkseagreen4, label=property];
m6_184 -> m6_185  [key=0, style=solid];
m6_184 -> m6_184  [key=1, style=dashed, color=darkseagreen4, label=property];
m6_184 -> m6_187  [key=2, style=dotted];
m6_184 -> m6_71  [key=2, style=dotted];
m6_186 -> m6_181  [key=0, style=bold, color=blue];
m6_14 -> m6_15  [key=0, style=solid, color=green];
m6_15 -> m6_16  [key=0, style=solid, color=green];
m6_15 -> m6_17  [key=2, style=dotted, color=green];
m6_15 -> m6_18  [key=2, style=dotted, color=green];
m6_16 -> m6_14  [key=0, style=bold, color=blue];
m6_91 -> m6_92  [key=0, style=solid];
m6_92 -> n39  [key=2, style=dotted];
m6_92 -> m6_93  [key=0, style=solid];
m6_92 -> m6_81  [key=2, style=dotted];
m6_93 -> m6_91  [key=0, style=bold, color=blue];
m6_188 -> m6_189  [key=0, style=solid];
m6_188 -> m6_192  [key=1, style=dashed, color=darkseagreen4, label=Table];
m6_188 -> m6_191  [key=1, style=dashed, color=darkseagreen4, label=Table];
m6_189 -> m6_190  [key=0, style=solid];
m6_189 -> n39  [key=2, style=dotted];
m6_192 -> m6_193  [key=0, style=solid];
m6_192 -> n39  [key=2, style=dotted];
m6_190 -> m6_192  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_190 -> m6_191  [key=0, style=solid];
m6_190 -> m6_193  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_191 -> m6_192  [key=0, style=solid];
m6_191 -> m6_194  [key=0, style=solid];
m6_193 -> m6_191  [key=0, style=solid];
m6_193 -> m6_193  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_194 -> m6_188  [key=0, style=bold, color=blue];
m6_87 -> m6_89  [key=1, style=dashed, color=darkseagreen4, label="?"];
m6_87 -> m6_88  [key=0, style=solid];
m6_158 -> m6_159  [key=0, style=solid];
m6_168 -> m6_169  [key=0, style=solid];
m6_32 -> m6_33  [key=0, style=solid];
m6_160 -> m6_158  [key=0, style=bold, color=blue];
m6_159 -> m6_160  [key=0, style=solid];
m6_159 -> m6_152  [key=2, style=dotted];
m6_159 -> m6_161  [key=2, style=dotted];
m6_159 -> m6_162  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_170 -> m6_168  [key=0, style=bold, color=blue];
m6_169 -> m6_170  [key=0, style=solid];
m6_169 -> m6_152  [key=2, style=dotted];
m6_169 -> m6_161  [key=2, style=dotted];
m6_67 -> m6_71  [key=2, style=dotted];
m6_67 -> m6_68  [key=0, style=solid];
m6_67 -> m6_70  [key=2, style=dotted];
m6_89 -> m6_71  [key=2, style=dotted];
m6_89 -> m6_90  [key=0, style=solid];
m6_89 -> m6_70  [key=2, style=dotted];
m6_34 -> m6_32  [key=0, style=bold, color=blue];
m6_33 -> m6_34  [key=0, style=solid];
m6_162 -> m6_163  [key=0, style=solid];
m6_65 -> m6_67  [key=1, style=dashed, color=darkseagreen4, label="?"];
m6_65 -> m6_66  [key=0, style=solid];
m6_66 -> m6_67  [key=0, style=solid];
m6_66 -> m6_69  [key=2, style=dotted];
m6_68 -> m6_65  [key=0, style=bold, color=blue];
m6_88 -> m6_89  [key=0, style=solid];
m6_88 -> m6_69  [key=2, style=dotted];
m6_90 -> m6_87  [key=0, style=bold, color=blue];
m6_163 -> m6_164  [key=0, style=solid];
m6_164 -> m6_162  [key=0, style=bold, color=blue];
m6_129 -> m6_130  [key=0, style=solid];
m6_130 -> m6_71  [key=2, style=dotted];
m6_130 -> m6_131  [key=0, style=solid];
m6_130 -> m6_132  [key=2, style=dotted];
m6_131 -> m6_129  [key=0, style=bold, color=blue];
m6_103 -> m6_104  [key=0, style=solid];
m6_104 -> m6_71  [key=2, style=dotted];
m6_104 -> m6_105  [key=0, style=solid];
m6_104 -> m6_99  [key=2, style=dotted];
m6_105 -> m6_103  [key=0, style=bold, color=blue];
m6_126 -> m6_127  [key=0, style=solid];
m6_127 -> m6_99  [key=2, style=dotted];
m6_127 -> m6_128  [key=0, style=solid];
m6_127 -> m6_109  [key=2, style=dotted];
m6_128 -> m6_126  [key=0, style=bold, color=blue];
m6_106 -> m6_107  [key=0, style=solid];
m6_107 -> m6_99  [key=2, style=dotted];
m6_107 -> m6_108  [key=0, style=solid];
m6_107 -> m6_109  [key=2, style=dotted];
m6_108 -> m6_106  [key=0, style=bold, color=blue];
m6_77 -> m6_78  [key=0, style=solid];
m6_78 -> n39  [key=2, style=dotted];
m6_78 -> m6_79  [key=0, style=solid];
m6_78 -> m6_81  [key=2, style=dotted];
m6_79 -> n39  [key=2, style=dotted];
m6_79 -> m6_80  [key=0, style=solid];
m6_79 -> m6_82  [key=2, style=dotted];
m6_80 -> m6_77  [key=0, style=bold, color=blue];
m6_100 -> m6_101  [key=0, style=solid];
m6_101 -> n39  [key=2, style=dotted];
m6_101 -> m6_102  [key=0, style=solid];
m6_101 -> m6_98  [key=2, style=dotted];
m6_102 -> m6_100  [key=0, style=bold, color=blue];
m6_209 -> m6_210  [key=0, style=solid];
m6_209 -> m6_213  [key=1, style=dashed, color=darkseagreen4, label=Table];
m6_209 -> m6_212  [key=1, style=dashed, color=darkseagreen4, label=Table];
m6_210 -> m6_211  [key=0, style=solid];
m6_210 -> n39  [key=2, style=dotted];
m6_213 -> m6_214  [key=0, style=solid];
m6_213 -> n39  [key=2, style=dotted];
m6_211 -> m6_213  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_211 -> m6_212  [key=0, style=solid];
m6_211 -> m6_214  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_212 -> m6_213  [key=0, style=solid];
m6_212 -> m6_215  [key=0, style=solid];
m6_214 -> m6_212  [key=0, style=solid];
m6_214 -> m6_214  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_215 -> m6_209  [key=0, style=bold, color=blue];
m6_141 -> m6_138  [key=0, style=bold, color=blue];
m6_139 -> m6_44  [key=2, style=dotted];
m6_139 -> m6_137  [key=2, style=dotted];
m6_139 -> m6_140  [key=0, style=solid];
m6_138 -> m6_139  [key=0, style=solid];
m6_138 -> m6_140  [key=1, style=dashed, color=darkseagreen4, label=Table];
m6_140 -> m6_141  [key=0, style=solid];
m6_140 -> m6_142  [key=2, style=dotted];
m6_216 -> m6_15  [key=1, style=dashed, color=green, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_155  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_166  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_176  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_183  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_189  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_192  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_196  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_210  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m6_216 -> m6_213  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m7_34 -> m7_37  [key=1, style=dashed, color=green, label="Hangfire.States.IState"];
m7_34 -> m7_41  [key=1, style=dashed, color=green, label=string];
m7_34 -> m7_35  [key=0, style=solid];
m7_37 -> m7_38  [key=0, style=solid, color=green];
m7_37 -> m7_39  [key=0, style=solid, color=green];
m7_35 -> m7_37  [key=0, style=solid, color=green];
m7_35 -> m7_36  [key=0, style=solid];
m7_38 -> m7_42  [key=0, style=solid, color=green];
m7_38 -> m7_17  [key=2, style=dotted, color=green];
m7_39 -> m7_40  [key=0, style=solid, color=green];
m7_39 -> m7_30  [key=2, style=dotted, color=green];
m7_41 -> m7_42  [key=0, style=solid, color=green];
m7_41 -> m7_44  [key=2, style=dotted, color=green];
m7_40 -> m7_41  [key=0, style=solid, color=green];
m7_40 -> m7_43  [key=2, style=dotted, color=green];
m7_36 -> m7_17  [key=2, style=dotted];
m7_36 -> m7_42  [key=0, style=solid];
m7_42 -> m7_34  [key=0, style=bold, color=blue];
m7_6 -> m7_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m7_6 -> m7_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IStateMachineFactory"];
m7_6 -> m7_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.IJobCreationProcess"];
m7_6 -> m7_7  [key=0, style=solid];
m7_6 -> m7_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IStateMachineFactory"];
m7_6 -> m7_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.IJobCreationProcess"];
m7_8 -> m7_17  [key=2, style=dotted];
m7_8 -> m7_16  [key=0, style=solid];
m7_10 -> m7_17  [key=2, style=dotted];
m7_10 -> m7_16  [key=0, style=solid];
m7_12 -> m7_17  [key=2, style=dotted];
m7_12 -> m7_16  [key=0, style=solid];
m7_13 -> m7_14  [key=0, style=solid];
m7_14 -> m7_15  [key=0, style=solid];
m7_15 -> m7_16  [key=0, style=solid];
m7_7 -> m7_8  [key=0, style=solid];
m7_7 -> m7_9  [key=0, style=solid];
m7_9 -> m7_10  [key=0, style=solid];
m7_9 -> m7_11  [key=0, style=solid];
m7_11 -> m7_12  [key=0, style=solid];
m7_11 -> m7_13  [key=0, style=solid];
m7_16 -> m7_6  [key=0, style=bold, color=blue];
m7_18 -> m7_19  [key=0, style=solid, color=green];
m7_18 -> m7_21  [key=1, style=dashed, color=green, label="Hangfire.States.IState"];
m7_18 -> m7_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m7_19 -> m7_20  [key=0, style=solid, color=green];
m7_19 -> m7_21  [key=0, style=solid, color=green];
m7_20 -> m7_29  [key=0, style=solid, color=green];
m7_20 -> m7_17  [key=2, style=dotted, color=green];
m7_21 -> m7_22  [key=0, style=solid, color=green];
m7_21 -> m7_23  [key=0, style=solid, color=green];
m7_22 -> m7_29  [key=0, style=solid, color=green];
m7_22 -> m7_17  [key=2, style=dotted, color=green];
m7_23 -> m7_24  [key=0, style=solid, color=green];
m7_23 -> m7_30  [key=2, style=dotted, color=green];
m7_24 -> m7_25  [key=0, style=solid];
m7_24 -> m7_31  [key=2, style=dotted];
m7_24 -> m7_26  [key=1, style=dashed, color=darkseagreen4, label=context];
m7_26 -> m7_29  [key=0, style=solid];
m7_28 -> m7_29  [key=0, style=solid];
m7_28 -> m7_33  [key=2, style=dotted];
m7_25 -> m7_26  [key=0, style=solid];
m7_25 -> m7_32  [key=2, style=dotted];
m7_27 -> m7_28  [key=0, style=solid];
m7_29 -> m7_18  [key=0, style=bold, color=blue];
m7_45 -> m7_23  [key=1, style=dashed, color=green, label="Hangfire.BackgroundJobClient"];
m7_45 -> m7_39  [key=1, style=dashed, color=green, label="Hangfire.BackgroundJobClient"];
m7_45 -> m7_40  [key=1, style=dashed, color=green, label="Hangfire.BackgroundJobClient"];
m7_45 -> m7_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobClient"];
m7_45 -> m7_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobClient"];
m7_45 -> m7_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobClient"];
m7_45 -> m7_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobClient"];
m7_45 -> m7_25  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobClient"];
m8_10 -> m8_11  [key=0, style=solid, color=red];
m8_11 -> m8_12  [key=0, style=solid, color=red];
m8_11 -> m8_13  [key=2, style=dotted, color=red];
m8_12 -> m8_10  [key=0, style=bold, color=blue];
m8_6 -> m8_7  [key=0, style=solid, color=red];
m8_7 -> m8_8  [key=0, style=solid, color=red];
m8_7 -> m8_9  [key=2, style=dotted, color=red];
m8_8 -> m8_6  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid];
m8_0 -> m8_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m8_1 -> m8_2  [key=0, style=solid];
m8_1 -> m8_3  [key=0, style=solid];
m8_3 -> m8_4  [key=0, style=solid];
m8_2 -> m8_4  [key=0, style=solid];
m8_2 -> m8_5  [key=2, style=dotted];
m8_4 -> m8_0  [key=0, style=bold, color=blue];
m8_14 -> m8_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueProvider"];
m8_14 -> m8_7  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerJobQueueProvider"];
m10_0 -> m10_1  [key=0, style=solid];
m10_0 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_0 -> m10_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_0 -> m10_6  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_3  [key=0, style=solid];
m10_3 -> m10_4  [key=0, style=solid];
m10_3 -> m10_5  [key=0, style=solid];
m10_5 -> m10_6  [key=0, style=solid];
m10_6 -> m10_7  [key=0, style=solid];
m10_2 -> m10_7  [key=0, style=solid];
m10_2 -> m10_8  [key=2, style=dotted];
m10_4 -> m10_7  [key=0, style=solid];
m10_4 -> m10_8  [key=2, style=dotted];
m10_7 -> m10_0  [key=0, style=bold, color=blue];
m10_9 -> m10_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.ProcessingJob"];
m10_9 -> m10_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.ProcessingJob"];
m11_0 -> m11_1  [key=0, style=solid];
m11_0 -> m11_2  [key=1, style=dashed, color=darkseagreen4, label=HttpRequestBase];
m11_0 -> m11_12  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_14  [key=2, style=dotted];
m11_1 -> m11_4  [key=1, style=dashed, color=darkseagreen4, label=sb];
m11_1 -> m11_5  [key=1, style=dashed, color=darkseagreen4, label=sb];
m11_1 -> m11_6  [key=1, style=dashed, color=darkseagreen4, label=sb];
m11_1 -> m11_9  [key=1, style=dashed, color=darkseagreen4, label=sb];
m11_2 -> m11_3  [key=0, style=solid];
m11_2 -> m11_5  [key=1, style=dashed, color=darkseagreen4, label=pathInfo];
m11_12 -> m11_13  [key=0, style=solid];
m11_12 -> m11_19  [key=2, style=dotted];
m11_4 -> m11_5  [key=0, style=solid];
m11_4 -> m11_6  [key=1, style=dashed, color=darkseagreen4, label=sbIndex];
m11_4 -> m11_7  [key=1, style=dashed, color=darkseagreen4, label=sbIndex];
m11_5 -> m11_6  [key=0, style=solid];
m11_5 -> m11_9  [key=0, style=solid];
m11_5 -> m11_15  [key=2, style=dotted];
m11_6 -> m11_7  [key=0, style=solid];
m11_6 -> m11_16  [key=2, style=dotted];
m11_9 -> m11_10  [key=0, style=solid];
m11_9 -> m11_17  [key=2, style=dotted];
m11_9 -> m11_11  [key=1, style=dashed, color=darkseagreen4, label=basePath];
m11_9 -> m11_12  [key=1, style=dashed, color=darkseagreen4, label=basePath];
m11_3 -> m11_4  [key=0, style=solid];
m11_3 -> m11_5  [key=1, style=dashed, color=darkseagreen4, label=pathInfoIndex];
m11_3 -> m11_8  [key=1, style=dashed, color=darkseagreen4, label=pathInfoIndex];
m11_8 -> m11_5  [key=0, style=solid];
m11_8 -> m11_8  [key=1, style=dashed, color=darkseagreen4, label=pathInfoIndex];
m11_7 -> m11_8  [key=0, style=solid];
m11_7 -> m11_7  [key=1, style=dashed, color=darkseagreen4, label=sbIndex];
m11_10 -> m11_11  [key=0, style=solid];
m11_10 -> m11_12  [key=0, style=solid];
m11_10 -> m11_18  [key=2, style=dotted];
m11_11 -> m11_12  [key=0, style=solid];
m11_11 -> m11_11  [key=1, style=dashed, color=darkseagreen4, label=basePath];
m11_13 -> m11_0  [key=0, style=bold, color=blue];
}
