digraph  {
n0 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", span="13-13"];
n1 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", label="DateTime time", span="15-15"];
n2 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", label="timeAgo.Equals(''millisecond'')", span="16-16"];
n4 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", label="timeAgo.Equals(''day'')", span="17-17"];
n6 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", label="throw new InvalidOperationException(String.Format(''Unknown period '{0}'.'', timeAgo));", span="18-18"];
n7 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", label="Redis.Client.SetEntryInHash(\r\n                String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                ''Checked'',\r\n                JobHelper.ToStringTimestamp(time))", span="20-23"];
n3 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", label="time = DateTime.UtcNow.AddMilliseconds(-1)", span="16-16"];
n9 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
n5 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", label="time = DateTime.UtcNow.AddDays(-1)", span="17-17"];
n11 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
n10 [cluster="System.DateTime.AddMilliseconds(double)", label="Entry System.DateTime.AddMilliseconds(double)", span="0-0"];
n8 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", label="Exit HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", span="13-13"];
n12 [cluster="System.InvalidOperationException.InvalidOperationException(string)", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
n13 [cluster="string.Format(string, object)", label="Entry string.Format(string, object)", span="0-0"];
n14 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
n15 [cluster="Unk.SetEntryInHash", label="Entry Unk.SetEntryInHash", span=""];
n16 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", span="27-27"];
n17 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", label="DateTime time", span="29-29"];
n18 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", label="timeAgo.Equals(''millisecond'')", span="30-30"];
n20 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", label="timeAgo.Equals(''day'')", span="31-31"];
n22 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", label="throw new InvalidOperationException(String.Format(''Unknown period '{0}'.'', timeAgo));", span="32-32"];
n23 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", label="Redis.Client.SetEntryInHash(\r\n                String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                ''Fetched'',\r\n                JobHelper.ToStringTimestamp(time))", span="34-37"];
n19 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", label="time = DateTime.UtcNow.AddMilliseconds(-1)", span="30-30"];
n21 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", label="time = DateTime.UtcNow.AddDays(-1)", span="31-31"];
n24 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", label="Exit HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", span="27-27"];
n25 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.WhenTimedOutJobsHandlerRuns()", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.WhenTimedOutJobsHandlerRuns()", span="41-41"];
n26 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.WhenTimedOutJobsHandlerRuns()", label="var watcher = new DequeuedJobsWatcher(Redis.Storage)", span="43-43"];
n27 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.WhenTimedOutJobsHandlerRuns()", label="watcher.FindAndRequeueTimedOutJobs()", span="44-44"];
n29 [cluster="HangFire.Redis.Components.DequeuedJobsWatcher.DequeuedJobsWatcher(HangFire.Redis.RedisStorage)", label="Entry HangFire.Redis.Components.DequeuedJobsWatcher.DequeuedJobsWatcher(HangFire.Redis.RedisStorage)", span="39-39"];
n28 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.WhenTimedOutJobsHandlerRuns()", label="Exit HangFire.Tests.DequeuedJobsWatcherSteps.WhenTimedOutJobsHandlerRuns()", span="41-41"];
n30 [cluster="HangFire.Redis.Components.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", label="Entry HangFire.Redis.Components.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", span="44-44"];
n31 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenItMarksTheJobAsChecked()", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.ThenItMarksTheJobAsChecked()", span="48-48"];
n32 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenItMarksTheJobAsChecked()", label="var checkedTimestamp = Redis.Client.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                ''Checked'')", span="50-52"];
n33 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenItMarksTheJobAsChecked()", label="Assert.IsNotNull(checkedTimestamp)", span="54-54"];
n37 [cluster="Unk.GetValueFromHash", label="Entry Unk.GetValueFromHash", span=""];
n34 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenItMarksTheJobAsChecked()", label="var date = JobHelper.FromStringTimestamp(checkedTimestamp)", span="55-55"];
n38 [cluster="Unk.IsNotNull", label="Entry Unk.IsNotNull", span=""];
n35 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenItMarksTheJobAsChecked()", label="Assert.IsTrue(date > DateTime.UtcNow.AddMinutes(-1))", span="57-57"];
n39 [cluster="Unk.FromStringTimestamp", label="Entry Unk.FromStringTimestamp", span=""];
n36 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenItMarksTheJobAsChecked()", label="Exit HangFire.Tests.DequeuedJobsWatcherSteps.ThenItMarksTheJobAsChecked()", span="48-48"];
n40 [cluster="System.DateTime.AddMinutes(double)", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
n41 [cluster="Unk.IsTrue", label="Entry Unk.IsTrue", span=""];
n42 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheCheckedFlagSet()", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheCheckedFlagSet()", span="61-61"];
n43 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheCheckedFlagSet()", label="var checkedTimestamp = Redis.Client.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                ''Checked'')", span="63-65"];
n44 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheCheckedFlagSet()", label="Assert.IsNotNull(checkedTimestamp)", span="67-67"];
n45 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheCheckedFlagSet()", label="Exit HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheCheckedFlagSet()", span="61-61"];
n46 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheCheckedFlagSet()", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheCheckedFlagSet()", span="71-71"];
n47 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheCheckedFlagSet()", label="var checkedTimestamp = Redis.Client.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                ''Checked'')", span="73-75"];
n48 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheCheckedFlagSet()", label="Assert.IsNull(checkedTimestamp)", span="77-77"];
n49 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheCheckedFlagSet()", label="Exit HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheCheckedFlagSet()", span="71-71"];
n50 [cluster="Unk.IsNull", label="Entry Unk.IsNull", span=""];
n51 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheFetchedFlagSet()", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheFetchedFlagSet()", span="81-81"];
n52 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheFetchedFlagSet()", label="var fetchedTimestamp = Redis.Client.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId), ''Fetched'')", span="83-84"];
n53 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheFetchedFlagSet()", label="Assert.IsNotNull(fetchedTimestamp)", span="86-86"];
n54 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheFetchedFlagSet()", label="Exit HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheFetchedFlagSet()", span="81-81"];
n55 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheFetchedFlagSet()", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheFetchedFlagSet()", span="90-90"];
n56 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheFetchedFlagSet()", label="var fetchedTimestamp = Redis.Client.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId), ''Fetched'')", span="92-93"];
n57 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheFetchedFlagSet()", label="Assert.IsNull(fetchedTimestamp)", span="95-95"];
n58 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheFetchedFlagSet()", label="Exit HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheFetchedFlagSet()", span="90-90"];
d4 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", color=green, community=0, label="0: SchedulePollingInterval = DelayedJobScheduler.DefaultPollingDelay", span="39-39"];
d25 [label="Hangfire.BackgroundJobServerOptions", span=""];
d3 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", label="ShutdownTimeout = BackgroundProcessingServer.DefaultShutdownTimeout", span="38-38"];
d5 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", label="HeartbeatInterval = ServerHeartbeat.DefaultHeartbeatInterval", span="40-40"];
d1 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", label="WorkerCount = Math.Min(Environment.ProcessorCount * 5, MaxDefaultWorkerCount)", span="36-36"];
d2 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", label="Queues = new[] { EnqueuedState.DefaultQueue }", span="37-37"];
d6 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", label="ServerTimeout = ServerWatchdog.DefaultServerTimeout", span="41-41"];
d7 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", label="ServerCheckInterval = ServerWatchdog.DefaultCheckInterval", span="42-42"];
d8 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", label="FilterProvider = JobFilterProviders.Providers", span="44-44"];
d9 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", label="Activator = JobActivator.Current", span="45-45"];
d14 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="89-89"];
d15 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="90-90"];
d16 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="91-91"];
d17 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="92-92"];
d0 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="34-34"];
d11 [cluster="System.Math.Min(int, int)", label="Entry System.Math.Min(int, int)", span="0-0"];
d10 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", label="Exit Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="34-34"];
d12 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", label="Entry Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="86-86"];
d13 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", label="logger.InfoFormat(''Using the following options for Hangfire Server:'')", span="88-88"];
d19 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210"];
d20 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d21 [cluster="Unk.Join", label="Entry Unk.Join", span=""];
d22 [cluster="lambda expression", label="Entry lambda expression", span="90-90"];
d18 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", label="Exit Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="86-86"];
d24 [cluster="lambda expression", label="Exit lambda expression", span="90-90"];
d23 [cluster="lambda expression", label="''''' + x + '''''", span="90-90"];
m0_36 [cluster="Unk.Unapply", file="DelayedJobScheduler.cs", label="Entry Unk.Unapply", span=""];
m0_24 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="DelayedJobScheduler.cs", label="Write(JobHelper.ToStringTimestamp(server.Heartbeat.Value))", span="198-198"];
m0_18 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="DelayedJobScheduler.cs", label="Write(JobHelper.ToStringTimestamp(server.StartedAt))", span="167-167"];
m0_8 [cluster="HangFire.Web.Pages.ServersPage.Execute()", color=green, community=0, file="DelayedJobScheduler.cs", label="1: WriteLiteral(''    <div class=\''alert alert-warning\''>\r\n        There are no active servers. Backg'' +\r\n''round tasks will not be processed.\r\n    </div>\r\n'')", span="97-98"];
m0_31 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="DelayedJobScheduler.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69"];
m0_32 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", color=red, community=0, file="DelayedJobScheduler.cs", label="1: Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m0_33 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="DelayedJobScheduler.cs", label="Entry HangFire.JobStorage.GetMonitoringApi()", span="54-54"];
m0_34 [cluster="HangFire.Storage.IMonitoringApi.Servers()", file="DelayedJobScheduler.cs", label="Entry HangFire.Storage.IMonitoringApi.Servers()", span="25-25"];
m0_35 [cluster="string.ToUpperInvariant()", file="DelayedJobScheduler.cs", label="Entry string.ToUpperInvariant()", span="0-0"];
m0_29 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''        </tbody>\r\n    </table>\r\n'')", span="233-233"];
m0_7 [cluster="HangFire.Web.Pages.ServersPage.Execute()", color=green, community=0, file="DelayedJobScheduler.cs", label="1: servers.Count == 0", span="91-91"];
m0_13 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''</td>\r\n                    <td>'')", span="142-142"];
m0_14 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="DelayedJobScheduler.cs", label="Write(server.WorkersCount)", span="147-147"];
m0_15 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="DelayedJobScheduler.cs", label="WriteLiteral(''</td>\r\n                    <td>'')", span="152-152"];
m0_16 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="DelayedJobScheduler.cs", label="Write(HtmlHelper.Raw(String.Join('' '', server.Queues.Select(HtmlHelper.QueueLabel))))", span="157-157"];
m0_30 [cluster="HangFire.Web.Pages.ServersPage.Execute()", file="DelayedJobScheduler.cs", label="Exit HangFire.Web.Pages.ServersPage.Execute()", span="57-57"];
m0_5 [cluster="HangFire.Web.Pages.ServersPage.Execute()", color=green, community=0, file="DelayedJobScheduler.cs", label="1: servers = monitor.Servers()", span="79-79"];
m0_17 [cluster="HangFire.Web.Pages.ServersPage.Execute()", color=green, community=0, file="DelayedJobScheduler.cs", label="1: WriteLiteral(''</td>\r\n                    <td data-moment=\'''')", span="162-162"];
m0_0 [cluster="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts.ProcessingStateHandlerFacts()", file="DelayedJobScheduler.cs", label="Entry HangFire.Redis.Tests.States.ProcessingStateHandlerFacts.ProcessingStateHandlerFacts()", span="16-16"];
m0_1 [cluster="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts.ProcessingStateHandlerFacts()", color=green, community=0, file="DelayedJobScheduler.cs", label="1: var job = Job.FromExpression(() => Console.WriteLine())", span="18-18"];
m0_2 [cluster="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts.ProcessingStateHandlerFacts()", color=green, community=0, file="DelayedJobScheduler.cs", label="0: _context = new ApplyStateContext(\r\n                new Mock<IStorageConnection>().Object,\r\n                new StateContext(JobId, job),\r\n                new ProcessingState(''SomeServer''), \r\n                null)", span="19-23"];
m0_3 [cluster="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts.ProcessingStateHandlerFacts()", color=green, community=0, file="DelayedJobScheduler.cs", label="1: Exit HangFire.Redis.Tests.States.ProcessingStateHandlerFacts.ProcessingStateHandlerFacts()", span="16-16"];
m0_4 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", color=green, community=0, file="DelayedJobScheduler.cs", label="1: Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="119-119"];
m0_6 [cluster="Mock<IStorageConnection>.cstr", color=green, community=0, file="DelayedJobScheduler.cs", label="1: Entry Mock<IStorageConnection>.cstr", span=""];
m0_10 [cluster="lambda expression", file="DelayedJobScheduler.cs", label="Console.WriteLine()", span="18-18"];
m0_9 [cluster="lambda expression", color=green, community=0, file="DelayedJobScheduler.cs", label="1: Entry lambda expression", span="18-18"];
m0_12 [cluster="System.Console.WriteLine()", color=green, community=0, file="DelayedJobScheduler.cs", label="1: Entry System.Console.WriteLine()", span="0-0"];
m0_11 [cluster="lambda expression", file="DelayedJobScheduler.cs", label="Exit lambda expression", span="18-18"];
m0_19 [cluster="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts.Apply_ShouldAddTheJob_ToTheProcessingSet()", file="DelayedJobScheduler.cs", label="Entry HangFire.Redis.Tests.States.ProcessingStateHandlerFacts.Apply_ShouldAddTheJob_ToTheProcessingSet()", span="34-34"];
m0_20 [cluster="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts.Apply_ShouldAddTheJob_ToTheProcessingSet()", file="DelayedJobScheduler.cs", label="var handler = new ProcessingStateHandler()", span="36-36"];
m0_21 [cluster="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts.Apply_ShouldAddTheJob_ToTheProcessingSet()", color=red, community=0, file="DelayedJobScheduler.cs", label="1: handler.Apply(_context, _transaction.Object)", span="37-37"];
m0_23 [cluster="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts.Apply_ShouldAddTheJob_ToTheProcessingSet()", file="DelayedJobScheduler.cs", label="Exit HangFire.Redis.Tests.States.ProcessingStateHandlerFacts.Apply_ShouldAddTheJob_ToTheProcessingSet()", span="34-34"];
m0_25 [cluster="Unk.Verify", file="DelayedJobScheduler.cs", label="Entry Unk.Verify", span=""];
m0_26 [cluster="lambda expression", file="DelayedJobScheduler.cs", label="Entry lambda expression", span="39-40"];
m0_27 [cluster="lambda expression", file="DelayedJobScheduler.cs", label="x.AddToSet(\r\n                ''processing'', JobId, It.IsAny<double>())", span="39-40"];
m0_28 [cluster="lambda expression", file="DelayedJobScheduler.cs", label="Exit lambda expression", span="39-40"];
m0_22 [cluster="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts.Apply_ShouldAddTheJob_ToTheProcessingSet()", file="DelayedJobScheduler.cs", label="_transaction.Verify(x => x.AddToSet(\r\n                ''processing'', JobId, It.IsAny<double>()))", span="39-40"];
m0_39 [cluster="lambda expression", file="DelayedJobScheduler.cs", label="Exit lambda expression", span="49-49"];
m0_37 [cluster="Unk.Select", file="DelayedJobScheduler.cs", label="Entry Unk.Select", span=""];
m0_38 [cluster="lambda expression", file="DelayedJobScheduler.cs", label="x.RemoveFromSet(''processing'', JobId)", span="49-49"];
m0_41 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="DelayedJobScheduler.cs", label="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts", span=""];
m0_40 [cluster="Unk.RemoveFromSet", file="DelayedJobScheduler.cs", label="Entry Unk.RemoveFromSet", span=""];
m0_42 [file="DelayedJobScheduler.cs", label="HangFire.Web.Pages.ServersPage", span=""];
m1_15 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="RecurringJobScheduler.cs", label="lockResult < 0", span="66-66"];
m1_31 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="RecurringJobScheduler.cs", label="_completed = true", span="82-82"];
m1_67 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="RecurringJobScheduler.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="44-44"];
m1_82 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m1_30 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="RecurringJobScheduler.cs", label="return;", span="80-80"];
m1_84 [cluster="string.Format(string, object, object)", file="RecurringJobScheduler.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m1_38 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="RecurringJobScheduler.cs", label="releaseResult < 0", span="96-96"];
m1_39 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="RecurringJobScheduler.cs", label="throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                        ''Could not release a lock on the resource '{0}': Server returned the '{1}' error.'', \r\n                        _resource,\r\n                        releaseResult));", span="98-102"];
m1_40 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="RecurringJobScheduler.cs", label="Exit HangFire.SqlServer.SqlServerDistributedLock.Dispose()", span="78-78"];
m1_76 [cluster="Hangfire.States.EnqueuedState.EnqueuedState()", file="RecurringJobScheduler.cs", label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="87-87"];
m1_71 [cluster="Unk._instantFactory", file="RecurringJobScheduler.cs", label="Entry Unk._instantFactory", span=""];
m1_74 [cluster="Hangfire.Server.IScheduleInstant.GetNextInstants(System.DateTime?)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.IScheduleInstant.GetNextInstants(System.DateTime?)", span="25-25"];
m1_83 [cluster="Hangfire.Storage.IStorageConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="61-61"];
m1_41 [cluster="object.GetType()", file="RecurringJobScheduler.cs", label="HangFire.SqlServer.SqlServerDistributedLock", span=""];
m1_69 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m1_0 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="RecurringJobScheduler.cs", label="Entry HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", span="44-44"];
m1_1 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", color=green, community=0, file="RecurringJobScheduler.cs", label="2: String.IsNullOrEmpty(resource)", span="46-46"];
m1_23 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="recurringJob == null", span="76-76"];
m1_36 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="RecurringJobScheduler.cs", label="1: _connection.Execute(\r\n                @''sp_releaseapplock'',\r\n                parameters,\r\n                commandType: CommandType.StoredProcedure)", span="89-92"];
m1_70 [cluster="System.TimeZoneInfo.FindSystemTimeZoneById(string)", file="RecurringJobScheduler.cs", label="Entry System.TimeZoneInfo.FindSystemTimeZoneById(string)", span="0-0"];
m1_75 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m1_78 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="37-37"];
m1_68 [cluster="Unk.Parse", file="RecurringJobScheduler.cs", label="Entry Unk.Parse", span=""];
m1_29 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="RecurringJobScheduler.cs", label=_completed, span="80-80"];
m1_2 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: throw new ArgumentNullException(''resource'');", span="46-46"];
m1_3 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: connection == null", span="47-47"];
m1_20 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="var recurringJobIds = connection.GetAllItemsFromSet(''recurring-jobs'')", span="69-69"];
m1_21 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label=recurringJobIds, span="71-71"];
m1_73 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m1_81 [cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68"];
m1_66 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
m1_77 [cluster="string.IsNullOrEmpty(string)", file="RecurringJobScheduler.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m1_72 [cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73"];
m1_24 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="TryScheduleJob(context.Storage, connection, recurringJobId, recurringJob)", span="83-83"];
m1_16 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                    ''Could not place a lock on the resource '{0}': {1}.'',\r\n                    _resource,\r\n                    LockErrorMessages.ContainsKey(lockResult) \r\n                        ? LockErrorMessages[lockResult]\r\n                        : String.Format(''Server returned the '{0}' error.'', lockResult)));", span="68-74"];
m1_17 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="RecurringJobScheduler.cs", label="Exit HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", span="44-44"];
m1_18 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="var connection = context.Storage.GetConnection()", span="66-66"];
m1_27 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="_throttler.Delay(context.CancellationToken)", span="95-95"];
m1_19 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="connection.AcquireDistributedLock(''recurring-jobs:lock'', LockTimeout)", span="67-67"];
m1_22 [cluster="Unk.Execute", file="RecurringJobScheduler.cs", label="Entry Unk.Execute", span=""];
m1_26 [cluster="Unk.Format", file="RecurringJobScheduler.cs", label="Entry Unk.Format", span=""];
m1_25 [cluster="Unk.ContainsKey", file="RecurringJobScheduler.cs", label="Entry Unk.ContainsKey", span=""];
m1_28 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="RecurringJobScheduler.cs", label="Entry HangFire.SqlServer.SqlServerDistributedLock.Dispose()", span="78-78"];
m1_37 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="RecurringJobScheduler.cs", label="var releaseResult = parameters.Get<int>(''@Result'')", span="94-94"];
m1_4 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="48-48"];
m1_5 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: factory == null", span="53-53"];
m1_6 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: throw new ArgumentNullException(''factory'');", span="53-53"];
m1_7 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: instantFactory == null", span="54-54"];
m1_13 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", color=green, community=0, file="RecurringJobScheduler.cs", label="1: _throttler = throttler", span="59-59"];
m1_12 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", color=green, community=0, file="RecurringJobScheduler.cs", label="1: _instantFactory = instantFactory", span="58-58"];
m1_14 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="48-48"];
m1_8 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: throw new ArgumentNullException(''instantFactory'');", span="54-54"];
m1_9 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: throttler == null", span="55-55"];
m1_10 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: throw new ArgumentNullException(''throttler'');", span="55-55"];
m1_11 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: _factory = factory", span="57-57"];
m1_32 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="RecurringJobScheduler.cs", label="0: var parameters = new DynamicParameters()", span="84-84"];
m1_35 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="RecurringJobScheduler.cs", label="1: parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", span="87-87"];
m1_42 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var serializedJob = JobHelper.FromJson<InvocationData>(recurringJob[''Job''])", span="110-110"];
m1_44 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var cron = recurringJob[''Cron'']", span="112-112"];
m1_46 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var timeZone = recurringJob.ContainsKey(''TimeZoneId'')\r\n                    ? TimeZoneInfo.FindSystemTimeZoneById(recurringJob[''TimeZoneId''])\r\n                    : TimeZoneInfo.Utc", span="117-119"];
m1_48 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var lastExecutionTime = recurringJob.ContainsKey(''LastExecution'')\r\n                    ? JobHelper.DeserializeDateTime(recurringJob[''LastExecution''])\r\n                    : (DateTime?)null", span="123-125"];
m1_52 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="recurringJob.ContainsKey(''Queue'') && !String.IsNullOrEmpty(recurringJob[''Queue''])", span="132-132"];
m1_53 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="state.Queue = recurringJob[''Queue'']", span="134-134"];
m1_54 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=red, community=0, file="RecurringJobScheduler.cs", label="1: var context = new CreateContext(storage, connection, job, state)", span="137-137"];
m1_58 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="Logger.DebugFormat(\r\n                            ''Recurring job '{0}' execution at '{1}' has been canceled.'',\r\n                            recurringJobId,\r\n                            instant.NowInstant)", span="143-146"];
m1_62 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="connection.SetRangeInHash(\r\n                    String.Format(''recurring-job:{0}'', recurringJobId),\r\n                    changedFields)", span="155-157"];
m1_64 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="Logger.ErrorException(\r\n                    String.Format(''Recurring job '{0}' was not triggered: {1}.'', recurringJobId, ex.Message),\r\n                    ex)", span="161-163"];
m1_43 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var job = serializedJob.Deserialize()", span="111-111"];
m1_45 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var cronSchedule = CrontabSchedule.Parse(cron)", span="113-113"];
m1_47 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var instant = _instantFactory(cronSchedule, timeZone)", span="121-121"];
m1_50 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="instant.GetNextInstants(lastExecutionTime).Any()", span="129-129"];
m1_59 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="changedFields.Add(''LastExecution'', JobHelper.SerializeDateTime(instant.NowInstant))", span="149-149"];
m1_61 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="changedFields.Add(''NextExecution'', JobHelper.SerializeDateTime(instant.NextInstant))", span="153-153"];
m1_49 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var changedFields = new Dictionary<string, string>()", span="127-127"];
m1_60 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="changedFields.Add(''LastJobId'', jobId ?? String.Empty)", span="150-150"];
m1_51 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var state = new EnqueuedState { Reason = ''Triggered by recurring job scheduler'' }", span="131-131"];
m1_55 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=red, community=0, file="RecurringJobScheduler.cs", label="1: var backgroundJob = _factory.Create(context)", span="138-138"];
m1_56 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var jobId = backgroundJob != null ? backgroundJob.Id : null", span="139-139"];
m1_57 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="String.IsNullOrEmpty(jobId)", span="141-141"];
m1_63 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label=TimeZoneNotFoundException, span="159-159"];
m1_65 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", span="104-104"];
m1_34 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="RecurringJobScheduler.cs", label="0: parameters.Add(''@LockOwner'', LockOwner)", span="86-86"];
m1_33 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="RecurringJobScheduler.cs", label="0: parameters.Add(''@Resource'', _resource)", span="85-85"];
m1_80 [cluster="Hangfire.Logging.ILog.DebugFormat(string, params object[])", file="RecurringJobScheduler.cs", label="Entry Hangfire.Logging.ILog.DebugFormat(string, params object[])", span="122-122"];
m1_85 [cluster="Hangfire.Logging.ILog.ErrorException(string, System.Exception)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Logging.ILog.ErrorException(string, System.Exception)", span="159-159"];
m1_79 [cluster="Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", span="31-31"];
m1_86 [file="RecurringJobScheduler.cs", label="Hangfire.Server.RecurringJobScheduler", span=""];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [color=darkseagreen4, key=1, label=string, style=dashed];
n0 -> n4  [color=darkseagreen4, key=1, label=string, style=dashed];
n0 -> n6  [color=darkseagreen4, key=1, label=string, style=dashed];
n1 -> n2  [key=0, style=solid];
n1 -> n7  [color=darkseagreen4, key=1, label=time, style=dashed];
n2 -> n3  [key=0, style=solid];
n2 -> n4  [key=0, style=solid];
n2 -> n9  [key=2, style=dotted];
n4 -> n5  [key=0, style=solid];
n4 -> n6  [key=0, style=solid];
n4 -> n9  [key=2, style=dotted];
n6 -> n8  [key=0, style=solid];
n6 -> n12  [key=2, style=dotted];
n6 -> n13  [key=2, style=dotted];
n7 -> n8  [key=0, style=solid];
n7 -> n13  [key=2, style=dotted];
n7 -> n14  [key=2, style=dotted];
n7 -> n15  [key=2, style=dotted];
n3 -> n7  [key=0, style=solid];
n3 -> n10  [key=2, style=dotted];
n5 -> n7  [key=0, style=solid];
n5 -> n11  [key=2, style=dotted];
n8 -> n0  [color=blue, key=0, style=bold];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [color=darkseagreen4, key=1, label=string, style=dashed];
n16 -> n20  [color=darkseagreen4, key=1, label=string, style=dashed];
n16 -> n22  [color=darkseagreen4, key=1, label=string, style=dashed];
n17 -> n18  [key=0, style=solid];
n17 -> n23  [color=darkseagreen4, key=1, label=time, style=dashed];
n18 -> n19  [key=0, style=solid];
n18 -> n20  [key=0, style=solid];
n18 -> n9  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n22  [key=0, style=solid];
n20 -> n9  [key=2, style=dotted];
n22 -> n24  [key=0, style=solid];
n22 -> n12  [key=2, style=dotted];
n22 -> n13  [key=2, style=dotted];
n23 -> n24  [key=0, style=solid];
n23 -> n13  [key=2, style=dotted];
n23 -> n14  [key=2, style=dotted];
n23 -> n15  [key=2, style=dotted];
n19 -> n23  [key=0, style=solid];
n19 -> n10  [key=2, style=dotted];
n21 -> n23  [key=0, style=solid];
n21 -> n11  [key=2, style=dotted];
n24 -> n16  [color=blue, key=0, style=bold];
n25 -> n26  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n26 -> n29  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n27 -> n30  [key=2, style=dotted];
n28 -> n25  [color=blue, key=0, style=bold];
n31 -> n32  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n32 -> n13  [key=2, style=dotted];
n32 -> n37  [key=2, style=dotted];
n32 -> n34  [color=darkseagreen4, key=1, label=checkedTimestamp, style=dashed];
n33 -> n34  [key=0, style=solid];
n33 -> n38  [key=2, style=dotted];
n34 -> n35  [key=0, style=solid];
n34 -> n39  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n35 -> n40  [key=2, style=dotted];
n35 -> n41  [key=2, style=dotted];
n36 -> n31  [color=blue, key=0, style=bold];
n42 -> n43  [key=0, style=solid];
n43 -> n44  [key=0, style=solid];
n43 -> n13  [key=2, style=dotted];
n43 -> n37  [key=2, style=dotted];
n44 -> n45  [key=0, style=solid];
n44 -> n38  [key=2, style=dotted];
n45 -> n42  [color=blue, key=0, style=bold];
n46 -> n47  [key=0, style=solid];
n47 -> n48  [key=0, style=solid];
n47 -> n13  [key=2, style=dotted];
n47 -> n37  [key=2, style=dotted];
n48 -> n49  [key=0, style=solid];
n48 -> n50  [key=2, style=dotted];
n49 -> n46  [color=blue, key=0, style=bold];
n51 -> n52  [key=0, style=solid];
n52 -> n53  [key=0, style=solid];
n52 -> n13  [key=2, style=dotted];
n52 -> n37  [key=2, style=dotted];
n53 -> n54  [key=0, style=solid];
n53 -> n38  [key=2, style=dotted];
n54 -> n51  [color=blue, key=0, style=bold];
n55 -> n56  [key=0, style=solid];
n56 -> n57  [key=0, style=solid];
n56 -> n13  [key=2, style=dotted];
n56 -> n37  [key=2, style=dotted];
n57 -> n58  [key=0, style=solid];
n57 -> n50  [key=2, style=dotted];
n58 -> n55  [color=blue, key=0, style=bold];
d4 -> d5  [color=green, key=0, style=solid];
d25 -> d4  [color=green, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
d25 -> d1  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
d25 -> d2  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
d25 -> d3  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
d25 -> d5  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
d25 -> d6  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
d25 -> d7  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
d25 -> d8  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
d25 -> d9  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
d25 -> d14  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
d25 -> d15  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
d25 -> d16  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
d25 -> d17  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
d3 -> d4  [color=green, key=0, style=solid];
d5 -> d6  [key=0, style=solid];
d1 -> d2  [key=0, style=solid];
d1 -> d11  [key=2, style=dotted];
d2 -> d3  [key=0, style=solid];
d6 -> d7  [key=0, style=solid];
d7 -> d8  [key=0, style=solid];
d8 -> d9  [key=0, style=solid];
d9 -> d10  [key=0, style=solid];
d14 -> d15  [key=0, style=solid];
d14 -> d19  [key=2, style=dotted];
d15 -> d16  [key=0, style=solid];
d15 -> d20  [key=2, style=dotted];
d15 -> d21  [key=2, style=dotted];
d15 -> d19  [key=2, style=dotted];
d15 -> d22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d16 -> d17  [key=0, style=solid];
d16 -> d19  [key=2, style=dotted];
d17 -> d18  [key=0, style=solid];
d17 -> d19  [key=2, style=dotted];
d0 -> d1  [key=0, style=solid];
d10 -> d0  [color=blue, key=0, style=bold];
d12 -> d14  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
d12 -> d15  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
d12 -> d16  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
d12 -> d17  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
d12 -> d13  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d13 -> d19  [key=2, style=dotted];
d22 -> d23  [key=0, style=solid];
d18 -> d12  [color=blue, key=0, style=bold];
d24 -> d22  [color=blue, key=0, style=bold];
d23 -> d24  [key=0, style=solid];
m0_24 -> m0_36  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_41  [key=2, style=dotted];
m0_18 -> m0_36  [key=2, style=dotted];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_41  [key=2, style=dotted];
m0_8 -> m0_30  [color=green, key=0, style=solid];
m0_8 -> m0_31  [color=green, key=2, style=dotted];
m0_31 -> m0_32  [color=red, key=0, style=solid];
m0_32 -> m0_33  [color=red, key=0, style=solid];
m0_32 -> m0_17  [color=red, key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_25  [key=2, style=dotted];
m0_34 -> m0_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_35 -> m0_31  [color=blue, key=0, style=bold];
m0_29 -> m0_31  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_7 -> m0_8  [color=green, key=0, style=solid];
m0_7 -> m0_9  [color=green, key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_31  [key=2, style=dotted];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_17  [key=2, style=dotted];
m0_14 -> m0_36  [key=2, style=dotted];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_18  [key=2, style=dotted];
m0_15 -> m0_31  [key=2, style=dotted];
m0_16 -> m0_13  [color=blue, key=0, style=bold];
m0_16 -> m0_17  [color=green, key=0, style=solid];
m0_16 -> m0_37  [key=2, style=dotted];
m0_16 -> d21  [key=2, style=dotted];
m0_16 -> m0_39  [key=2, style=dotted];
m0_16 -> m0_40  [key=2, style=dotted];
m0_30 -> m0_0  [color=blue, key=0, style=bold];
m0_5 -> m0_6  [color=green, key=0, style=solid];
m0_5 -> m0_34  [color=green, key=2, style=dotted];
m0_5 -> m0_7  [color=green, key=1, label=servers, style=dashed];
m0_5 -> m0_10  [color=green, key=1, label=servers, style=dashed];
m0_17 -> m0_18  [color=green, key=0, style=solid];
m0_17 -> m0_31  [color=green, key=2, style=dotted];
m0_0 -> m0_1  [color=green, key=0, style=solid];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_31  [color=green, key=2, style=dotted];
m0_1 -> m0_4  [key=2, style=dotted];
m0_1 -> m0_9  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_3  [color=green, key=0, style=solid];
m0_2 -> m0_32  [color=green, key=2, style=dotted];
m0_2 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_6  [key=2, style=dotted];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_8  [key=2, style=dotted];
m0_3 -> m0_4  [color=green, key=0, style=solid];
m0_3 -> m0_0  [color=blue, key=0, style=bold];
m0_4 -> m0_5  [color=green, key=0, style=solid];
m0_4 -> m0_33  [color=green, key=2, style=dotted];
m0_6 -> m0_7  [color=green, key=0, style=solid];
m0_6 -> m0_31  [color=green, key=2, style=dotted];
m0_10 -> m0_12  [color=green, key=1, label=server, style=dashed];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_29  [key=0, style=solid];
m0_10 -> m0_14  [color=darkseagreen4, key=1, label=server, style=dashed];
m0_10 -> m0_16  [color=darkseagreen4, key=1, label=server, style=dashed];
m0_10 -> m0_18  [color=darkseagreen4, key=1, label=server, style=dashed];
m0_10 -> m0_20  [color=darkseagreen4, key=1, label=server, style=dashed];
m0_10 -> m0_22  [color=darkseagreen4, key=1, label=server, style=dashed];
m0_10 -> m0_24  [color=darkseagreen4, key=1, label=server, style=dashed];
m0_10 -> m0_26  [color=darkseagreen4, key=1, label=server, style=dashed];
m0_9 -> m0_10  [color=green, key=0, style=solid];
m0_9 -> m0_31  [color=green, key=2, style=dotted];
m0_12 -> m0_13  [color=green, key=0, style=solid];
m0_12 -> m0_35  [color=green, key=2, style=dotted];
m0_12 -> m0_36  [color=green, key=2, style=dotted];
m0_11 -> m0_12  [color=green, key=0, style=solid];
m0_11 -> m0_31  [key=2, style=dotted];
m0_11 -> m0_9  [color=blue, key=0, style=bold];
m0_19 -> m0_31  [key=2, style=dotted];
m0_19 -> m0_20  [key=0, style=solid];
m0_20 -> m0_36  [key=2, style=dotted];
m0_20 -> m0_21  [color=red, key=0, style=solid];
m0_20 -> m0_17  [key=2, style=dotted];
m0_21 -> m0_31  [key=2, style=dotted];
m0_21 -> m0_22  [color=red, key=0, style=solid];
m0_21 -> m0_24  [color=red, key=2, style=dotted];
m0_23 -> m0_31  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_19  [color=blue, key=0, style=bold];
m0_25 -> m0_31  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_26 -> m0_36  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_27 -> m0_31  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=2, style=dotted];
m0_27 -> m0_30  [key=2, style=dotted];
m0_28 -> m0_31  [key=2, style=dotted];
m0_28 -> m0_10  [key=0, style=solid];
m0_28 -> m0_26  [color=blue, key=0, style=bold];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_28  [key=0, style=solid];
m0_22 -> m0_25  [key=2, style=dotted];
m0_22 -> m0_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_39 -> m0_37  [color=blue, key=0, style=bold];
m0_37 -> m0_38  [key=0, style=solid];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_40  [key=2, style=dotted];
m0_41 -> m0_2  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts", style=dashed];
m0_41 -> m0_21  [color=red, key=1, label="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts", style=dashed];
m0_41 -> m0_22  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts", style=dashed];
m0_41 -> m0_33  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts", style=dashed];
m0_41 -> m0_34  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.States.ProcessingStateHandlerFacts", style=dashed];
m0_42 -> m0_1  [color=green, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_2  [color=green, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_6  [color=green, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_8  [color=green, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_9  [color=green, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_12  [color=green, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_17  [color=green, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_14  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_18  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_20  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_21  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_25  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_27  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m0_42 -> m0_29  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ServersPage", style=dashed];
m1_15 -> m1_16  [color=green, key=0, style=solid];
m1_15 -> m1_17  [key=0, style=solid];
m1_31 -> m1_32  [color=green, key=0, style=solid];
m1_30 -> m1_40  [key=0, style=solid];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_40  [key=0, style=solid];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_41  [key=2, style=dotted];
m1_39 -> m1_24  [key=2, style=dotted];
m1_39 -> m1_26  [key=2, style=dotted];
m1_40 -> m1_38  [color=blue, key=0, style=bold];
m1_40 -> m1_28  [color=blue, key=0, style=bold];
m1_41 -> m1_5  [color=green, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m1_41 -> m1_6  [color=green, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m1_41 -> m1_8  [color=green, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m1_41 -> m1_16  [color=green, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m1_41 -> m1_33  [color=green, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m1_41 -> m1_36  [color=green, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m1_41 -> m1_29  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m1_41 -> m1_31  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m1_41 -> m1_39  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m1_0 -> m1_1  [color=green, key=0, style=solid];
m1_0 -> m1_3  [color=green, key=1, label=SqlConnection, style=dashed];
m1_0 -> m1_5  [color=green, key=1, label=string, style=dashed];
m1_0 -> m1_6  [color=green, key=1, label=SqlConnection, style=dashed];
m1_0 -> m1_13  [color=green, key=1, label=SqlConnection, style=dashed];
m1_1 -> m1_0  [color=blue, key=0, style=bold];
m1_1 -> m1_2  [color=green, key=0, style=solid];
m1_1 -> m1_3  [color=green, key=0, style=solid];
m1_1 -> m1_77  [color=green, key=2, style=dotted];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_21  [key=0, style=solid];
m1_36 -> m1_37  [color=green, key=0, style=solid];
m1_36 -> m1_22  [color=green, key=2, style=dotted];
m1_29 -> m1_31  [key=0, style=solid];
m1_29 -> m1_30  [key=0, style=solid];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_17  [color=green, key=0, style=solid];
m1_2 -> m1_15  [color=green, key=2, style=dotted];
m1_3 -> m1_2  [color=blue, key=0, style=bold];
m1_3 -> m1_4  [color=green, key=0, style=solid];
m1_3 -> m1_5  [color=green, key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_32  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_27  [key=0, style=solid];
m1_21 -> m1_24  [color=darkseagreen4, key=1, label=recurringJobId, style=dashed];
m1_21 -> m1_26  [color=darkseagreen4, key=1, label=recurringJobId, style=dashed];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_21  [key=0, style=solid];
m1_24 -> m1_35  [key=2, style=dotted];
m1_16 -> m1_17  [color=green, key=0, style=solid];
m1_16 -> m1_18  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m1_16 -> m1_24  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m1_16 -> m1_27  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m1_16 -> m1_25  [color=green, key=2, style=dotted];
m1_16 -> m1_26  [color=green, key=2, style=dotted];
m1_16 -> m1_84  [color=green, key=2, style=dotted];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_29  [key=2, style=dotted];
m1_17 -> m1_0  [color=blue, key=0, style=bold];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_30  [key=2, style=dotted];
m1_18 -> m1_20  [color=darkseagreen4, key=1, label=connection, style=dashed];
m1_18 -> m1_22  [color=darkseagreen4, key=1, label=connection, style=dashed];
m1_18 -> m1_24  [color=darkseagreen4, key=1, label=connection, style=dashed];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_37  [key=2, style=dotted];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_31  [key=2, style=dotted];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> n13  [key=2, style=dotted];
m1_22 -> m1_34  [key=2, style=dotted];
m1_22 -> m1_24  [color=darkseagreen4, key=1, label=recurringJob, style=dashed];
m1_26 -> m1_21  [key=0, style=solid];
m1_26 -> n13  [key=2, style=dotted];
m1_26 -> m1_36  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid];
m1_28 -> m1_16  [color=blue, key=0, style=bold];
m1_28 -> m1_29  [key=0, style=solid];
m1_37 -> m1_23  [key=2, style=dotted];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_39  [color=darkseagreen4, key=1, label=releaseResult, style=dashed];
m1_4 -> m1_17  [color=green, key=0, style=solid];
m1_4 -> m1_15  [color=green, key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_7  [color=darkseagreen4, key=1, label="System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>", style=dashed];
m1_4 -> m1_9  [color=darkseagreen4, key=1, label="Hangfire.Server.IThrottler", style=dashed];
m1_4 -> m1_11  [color=darkseagreen4, key=1, label="Hangfire.Client.IBackgroundJobFactory", style=dashed];
m1_4 -> m1_12  [color=darkseagreen4, key=1, label="System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>", style=dashed];
m1_4 -> m1_13  [color=darkseagreen4, key=1, label="Hangfire.Server.IThrottler", style=dashed];
m1_5 -> m1_6  [color=green, key=0, style=solid];
m1_5 -> m1_7  [key=0, style=solid];
m1_6 -> m1_7  [color=green, key=0, style=solid];
m1_6 -> m1_14  [key=0, style=solid];
m1_6 -> m1_15  [key=2, style=dotted];
m1_7 -> m1_13  [color=green, key=1, label=parameters, style=dashed];
m1_7 -> m1_8  [color=green, key=0, style=solid];
m1_7 -> m1_20  [color=green, key=2, style=dotted];
m1_7 -> m1_9  [color=green, key=1, label=parameters, style=dashed];
m1_7 -> m1_10  [color=green, key=1, label=parameters, style=dashed];
m1_7 -> m1_11  [color=green, key=1, label=parameters, style=dashed];
m1_7 -> m1_12  [color=green, key=1, label=parameters, style=dashed];
m1_7 -> m1_14  [color=green, key=1, label=parameters, style=dashed];
m1_13 -> m1_14  [color=green, key=0, style=solid];
m1_13 -> m1_22  [color=green, key=2, style=dotted];
m1_12 -> m1_13  [color=green, key=0, style=solid];
m1_12 -> m1_21  [color=green, key=2, style=dotted];
m1_14 -> m1_15  [color=green, key=0, style=solid];
m1_14 -> m1_23  [color=green, key=2, style=dotted];
m1_14 -> m1_16  [color=green, key=1, label=lockResult, style=dashed];
m1_14 -> m1_4  [color=blue, key=0, style=bold];
m1_8 -> m1_9  [color=green, key=0, style=solid];
m1_8 -> m1_21  [color=green, key=2, style=dotted];
m1_8 -> m1_14  [key=0, style=solid];
m1_8 -> m1_15  [key=2, style=dotted];
m1_9 -> m1_10  [color=green, key=0, style=solid];
m1_9 -> m1_21  [color=green, key=2, style=dotted];
m1_9 -> m1_11  [key=0, style=solid];
m1_10 -> m1_11  [color=green, key=0, style=solid];
m1_10 -> m1_21  [color=green, key=2, style=dotted];
m1_10 -> m1_14  [key=0, style=solid];
m1_10 -> m1_15  [key=2, style=dotted];
m1_11 -> m1_12  [color=green, key=0, style=solid];
m1_11 -> m1_21  [color=green, key=2, style=dotted];
m1_32 -> m1_33  [color=green, key=0, style=solid];
m1_32 -> m1_20  [color=green, key=2, style=dotted];
m1_32 -> m1_34  [color=green, key=1, label=parameters, style=dashed];
m1_32 -> m1_35  [color=green, key=1, label=parameters, style=dashed];
m1_32 -> m1_36  [color=green, key=1, label=parameters, style=dashed];
m1_32 -> m1_37  [color=green, key=1, label=parameters, style=dashed];
m1_35 -> m1_42  [key=0, style=solid];
m1_35 -> m1_44  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m1_35 -> m1_46  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m1_35 -> m1_48  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m1_35 -> m1_52  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m1_35 -> m1_53  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m1_35 -> m1_54  [color=red, key=1, label="Hangfire.JobStorage", style=dashed];
m1_35 -> m1_58  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_35 -> m1_62  [color=darkseagreen4, key=1, label="Hangfire.Storage.IStorageConnection", style=dashed];
m1_35 -> m1_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_35 -> m1_36  [color=green, key=0, style=solid];
m1_35 -> m1_21  [color=green, key=2, style=dotted];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_66  [key=2, style=dotted];
m1_44 -> m1_45  [key=0, style=solid];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_69  [key=2, style=dotted];
m1_46 -> m1_70  [key=2, style=dotted];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_69  [key=2, style=dotted];
m1_48 -> m1_72  [key=2, style=dotted];
m1_48 -> m1_50  [color=darkseagreen4, key=1, label=lastExecutionTime, style=dashed];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_54  [color=red, key=0, style=solid];
m1_52 -> m1_69  [key=2, style=dotted];
m1_52 -> m1_77  [key=2, style=dotted];
m1_53 -> m1_54  [color=red, key=0, style=solid];
m1_54 -> m1_55  [color=red, key=0, style=solid];
m1_54 -> m1_78  [color=red, key=2, style=dotted];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_80  [key=2, style=dotted];
m1_62 -> m1_63  [key=0, style=solid];
m1_62 -> m1_65  [key=0, style=solid];
m1_62 -> n13  [key=2, style=dotted];
m1_62 -> m1_83  [key=2, style=dotted];
m1_64 -> m1_65  [key=0, style=solid];
m1_64 -> m1_84  [key=2, style=dotted];
m1_64 -> m1_85  [key=2, style=dotted];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_67  [key=2, style=dotted];
m1_43 -> m1_54  [color=red, key=1, label=job, style=dashed];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_68  [key=2, style=dotted];
m1_45 -> m1_47  [color=darkseagreen4, key=1, label=cronSchedule, style=dashed];
m1_47 -> m1_48  [key=0, style=solid];
m1_47 -> m1_71  [key=2, style=dotted];
m1_47 -> m1_50  [color=darkseagreen4, key=1, label=instant, style=dashed];
m1_47 -> m1_58  [color=darkseagreen4, key=1, label=instant, style=dashed];
m1_47 -> m1_59  [color=darkseagreen4, key=1, label=instant, style=dashed];
m1_47 -> m1_61  [color=darkseagreen4, key=1, label=instant, style=dashed];
m1_50 -> m1_51  [key=0, style=solid];
m1_50 -> m1_61  [key=0, style=solid];
m1_50 -> m1_74  [key=2, style=dotted];
m1_50 -> m1_75  [key=2, style=dotted];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_81  [key=2, style=dotted];
m1_59 -> m1_82  [key=2, style=dotted];
m1_61 -> m1_62  [key=0, style=solid];
m1_61 -> m1_81  [key=2, style=dotted];
m1_61 -> m1_82  [key=2, style=dotted];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_73  [key=2, style=dotted];
m1_49 -> m1_59  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m1_49 -> m1_60  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m1_49 -> m1_61  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m1_49 -> m1_62  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_82  [key=2, style=dotted];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_76  [key=2, style=dotted];
m1_51 -> m1_53  [color=darkseagreen4, key=1, label=state, style=dashed];
m1_51 -> m1_54  [color=red, key=1, label=state, style=dashed];
m1_55 -> m1_56  [color=red, key=0, style=solid];
m1_55 -> m1_79  [color=red, key=2, style=dotted];
m1_56 -> m1_57  [key=0, style=solid];
m1_56 -> m1_60  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_57 -> m1_58  [key=0, style=solid];
m1_57 -> m1_59  [key=0, style=solid];
m1_57 -> m1_77  [key=2, style=dotted];
m1_63 -> m1_64  [key=0, style=solid];
m1_65 -> m1_35  [color=blue, key=0, style=bold];
m1_34 -> m1_35  [color=green, key=0, style=solid];
m1_34 -> m1_21  [color=green, key=2, style=dotted];
m1_33 -> m1_34  [color=green, key=0, style=solid];
m1_33 -> m1_21  [color=green, key=2, style=dotted];
m1_86 -> m1_11  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m1_86 -> m1_12  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m1_86 -> m1_13  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m1_86 -> m1_17  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m1_86 -> m1_24  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m1_86 -> m1_27  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m1_86 -> m1_39  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m1_86 -> m1_47  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m1_86 -> m1_55  [color=red, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
}
