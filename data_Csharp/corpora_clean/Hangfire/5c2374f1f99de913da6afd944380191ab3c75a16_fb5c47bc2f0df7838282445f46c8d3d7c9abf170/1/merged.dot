digraph  {
n215 [label="Hangfire.Core.Tests.Common.JobArgumentFacts", span=""];
n216 [label=T, span=""];
n217 [label=converter, span=""];
n0 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", span="16-16", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()"];
n1 [label="_activator = new Mock<JobActivator>()", span="18-18", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()"];
n2 [label="_activator.Setup(x => x.ActivateJob(It.IsAny<Type>()))\r\n				      .Returns(() => new JobArgumentFacts())", span="19-20", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()"];
n5 [label="Entry Mock<JobActivator>.cstr", span="", cluster="Mock<JobActivator>.cstr"];
n3 [label="_token = new Mock<IJobCancellationToken>()", span="22-22", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()"];
n6 [label="Entry Unk.Setup", span="", cluster="Unk.Setup"];
n7 [label="Entry Unk.Returns", span="", cluster="Unk.Returns"];
n9 [label="Entry lambda expression", span="19-19", cluster="lambda expression"];
n14 [label="Entry lambda expression", span="20-20", cluster="lambda expression"];
n4 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", span="16-16", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()"];
n8 [label="Entry Mock<IJobCancellationToken>.cstr", span="", cluster="Mock<IJobCancellationToken>.cstr"];
n10 [label="x.ActivateJob(It.IsAny<Type>())", span="19-19", cluster="lambda expression"];
n11 [label="Exit lambda expression", span="19-19", cluster="lambda expression"];
n12 [label="Entry Unk.>", span="", cluster="Unk.>"];
n13 [label="Entry Unk.ActivateJob", span="", cluster="Unk.ActivateJob"];
n15 [label="new JobArgumentFacts()", span="20-20", cluster="lambda expression"];
n16 [label="Exit lambda expression", span="20-20", cluster="lambda expression"];
n17 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)", span="26-26", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)"];
n18 [label="Assert.Equal(BooleanValue, value)", span="26-26", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)"];
n19 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)", span="26-26", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)"];
n20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n21 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", span="29-29", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()"];
n22 [label="CreateAndPerform(BooleanValue)", span="31-31", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()"];
n23 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", span="29-29", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()"];
n24 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", span="292-292", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n25 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", span="35-35", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)"];
n26 [label="Assert.Equal(ByteValue, value)", span="35-35", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)"];
n27 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", span="35-35", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)"];
n28 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", span="38-38", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()"];
n29 [label="CreateAndPerform(ByteValue)", span="40-40", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()"];
n30 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", span="38-38", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()"];
n31 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", span="44-44", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)"];
n32 [label="Assert.Equal(SByteValue, value)", span="44-44", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)"];
n33 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", span="44-44", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)"];
n34 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", span="47-47", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()"];
n35 [label="CreateAndPerform(SByteValue)", span="49-49", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()"];
n36 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", span="47-47", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()"];
n37 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)", span="53-53", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)"];
n38 [label="Assert.Equal(CharValue, value)", span="53-53", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)"];
n39 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)", span="53-53", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)"];
n40 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", span="56-56", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()"];
n41 [label="CreateAndPerform(CharValue)", span="58-58", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()"];
n42 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", span="56-56", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()"];
n43 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)", span="62-62", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)"];
n44 [label="Assert.Equal(DecimalValue, value)", span="62-62", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)"];
n45 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)", span="62-62", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)"];
n46 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", span="65-65", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()"];
n47 [label="CreateAndPerform(DecimalValue)", span="67-67", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()"];
n48 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", span="65-65", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()"];
n49 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", span="71-71", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)"];
n50 [label="Assert.Equal(DoubleValue, value)", span="71-71", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)"];
n51 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", span="71-71", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)"];
n52 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()", span="74-74", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()"];
n53 [label="CreateAndPerform(DoubleValue)", span="76-76", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()"];
n54 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()", span="74-74", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()"];
n55 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", span="80-80", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)"];
n56 [label="Assert.Equal(SingleValue, value)", span="80-80", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)"];
n57 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", span="80-80", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)"];
n58 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()", span="83-83", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()"];
n59 [label="CreateAndPerform(SingleValue)", span="85-85", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()"];
n60 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()", span="83-83", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()"];
n61 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", span="89-89", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)"];
n62 [label="Assert.Equal(Int32Value, value)", span="89-89", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)"];
n63 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", span="89-89", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)"];
n64 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", span="92-92", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()"];
n65 [label="CreateAndPerform(Int32Value)", span="94-94", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()"];
n66 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", span="92-92", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()"];
n67 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", span="98-98", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)"];
n68 [label="Assert.Equal(UInt32Value, value)", span="98-98", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)"];
n69 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", span="98-98", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)"];
n70 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()", span="101-101", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()"];
n71 [label="CreateAndPerform(UInt32Value)", span="103-103", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()"];
n72 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()", span="101-101", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()"];
n73 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)", span="107-107", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)"];
n74 [label="Assert.Equal(Int64Value, value)", span="107-107", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)"];
n75 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)", span="107-107", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)"];
n76 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()", span="110-110", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()"];
n77 [label="CreateAndPerform(Int64Value)", span="112-112", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()"];
n78 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()", span="110-110", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()"];
n79 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)", span="116-116", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)"];
n80 [label="Assert.Equal(UInt64Value, value)", span="116-116", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)"];
n81 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)", span="116-116", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)"];
n82 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", span="119-119", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()"];
n83 [label="CreateAndPerform(UInt64Value)", span="121-121", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()"];
n84 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", span="119-119", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()"];
n85 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)", span="125-125", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)"];
n86 [label="Assert.Equal(Int16Value, value)", span="125-125", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)"];
n87 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)", span="125-125", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)"];
n88 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", span="128-128", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()"];
n89 [label="CreateAndPerform(Int16Value)", span="130-130", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()"];
n90 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", span="128-128", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()"];
n91 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", span="134-134", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)"];
n92 [label="Assert.Equal(UInt16Value, value)", span="134-134", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)"];
n93 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", span="134-134", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)"];
n94 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", span="137-137", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()"];
n95 [label="CreateAndPerform(UInt16Value)", span="139-139", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()"];
n96 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", span="137-137", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()"];
n97 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", span="143-143", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)"];
n98 [label="Assert.Equal(StringValue, value)", span="143-143", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)"];
n99 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", span="143-143", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)"];
n100 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", span="146-146", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()"];
n101 [label="CreateAndPerform(StringValue)", span="148-148", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()"];
n102 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", span="146-146", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()"];
n103 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", span="152-152", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)"];
n104 [label="Assert.Equal(TimeSpanValue, value)", span="152-152", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)"];
n105 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", span="152-152", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)"];
n106 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", span="155-155", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()"];
n107 [label="CreateAndPerform(TimeSpanValue)", span="157-157", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()"];
n108 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", span="155-155", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()"];
n109 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", span="161-161", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)"];
n110 [label="Assert.Equal(ObjectValue, value)", span="161-161", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)"];
n111 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", span="161-161", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)"];
n112 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", span="164-164", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()"];
n113 [label="CreateAndPerform(ObjectValue)", span="166-166", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()"];
n114 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", span="164-164", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()"];
n115 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", span="170-170", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)"];
n116 [label="Assert.Equal(DateTimeOffsetValue, value)", span="170-170", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)"];
n117 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", span="170-170", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)"];
n118 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", span="173-173", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()"];
n119 [label="CreateAndPerform(DateTimeOffsetValue)", span="175-175", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()"];
n120 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", span="173-173", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()"];
n121 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", span="179-179", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)"];
n122 [label="Assert.Equal(CultureInfoValue, value)", span="179-179", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)"];
n123 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", span="179-179", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)"];
n124 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", span="182-182", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()"];
n125 [label="CreateAndPerform(CultureInfoValue)", span="184-184", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()"];
n126 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", span="182-182", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()"];
n127 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", span="188-188", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)"];
n128 [label="Assert.Equal(EnumValue, value)", span="188-188", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)"];
n129 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", span="188-188", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)"];
n130 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", span="191-191", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()"];
n131 [label="CreateAndPerform(EnumValue)", span="193-193", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()"];
n132 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", span="191-191", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()"];
n133 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", span="197-197", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)"];
n134 [label="Assert.Equal(GuidValue, value)", span="197-197", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)"];
n135 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", span="197-197", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)"];
n136 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", span="200-200", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()"];
n137 [label="CreateAndPerform(GuidValue)", span="202-202", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()"];
n138 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", span="200-200", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()"];
n139 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", span="206-206", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)"];
n140 [label="Assert.Equal(UriValue, value)", span="206-206", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)"];
n141 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", span="206-206", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)"];
n142 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", span="209-209", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()"];
n143 [label="CreateAndPerform(UriValue)", span="211-211", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()"];
n144 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", span="209-209", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()"];
n145 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", span="215-215", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)"];
n146 [label="Assert.Equal(NotNullNullableValue, value)", span="215-215", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)"];
n147 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", span="215-215", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)"];
n148 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", span="218-218", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()"];
n149 [label="CreateAndPerform(NotNullNullableValue)", span="220-220", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()"];
n150 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", span="218-218", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()"];
n151 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", span="224-224", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)"];
n152 [label="Assert.Equal(NullNullableValue, value)", span="224-224", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)"];
n153 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", span="224-224", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)"];
n154 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", span="227-227", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()"];
n155 [label="CreateAndPerform(NullNullableValue)", span="229-229", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()"];
n156 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", span="227-227", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()"];
n157 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", span="233-233", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])"];
n158 [label="Assert.Equal(ArrayValue, value)", span="233-233", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])"];
n159 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", span="233-233", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])"];
n160 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", span="236-236", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()"];
n161 [label="CreateAndPerform(ArrayValue, true)", span="238-238", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()"];
n162 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", span="236-236", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()"];
n163 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", span="242-242", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)"];
n164 [label="Assert.Equal(ListValue, value)", span="242-242", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)"];
n165 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", span="242-242", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)"];
n166 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", span="245-245", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()"];
n167 [label="CreateAndPerform(ListValue, true)", span="247-247", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()"];
n168 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", span="245-245", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()"];
n169 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", span="255-255", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)"];
n170 [label="Assert.Equal(DictionaryValue, value)", span="255-255", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)"];
n171 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", span="255-255", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)"];
n172 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", span="258-258", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()"];
n173 [label="CreateAndPerform(DictionaryValue, true)", span="260-260", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()"];
n174 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", span="258-258", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()"];
n175 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", span="270-270", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)"];
n176 [label="Assert.Equal(CustomStructValue, value)", span="270-270", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)"];
n177 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", span="270-270", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)"];
n178 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", span="273-273", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()"];
n179 [label="CreateAndPerform(CustomStructValue, true)", span="275-275", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()"];
n180 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", span="273-273", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()"];
n181 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", span="284-284", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)"];
n182 [label="Assert.Equal(CustomClassValue.CreatedAt, value.CreatedAt)", span="284-284", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)"];
n183 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", span="284-284", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)"];
n184 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", span="287-287", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()"];
n185 [label="CreateAndPerform(CustomClassValue, true)", span="289-289", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()"];
n186 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", span="287-287", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()"];
n187 [label="var type = typeof(JobArgumentFacts)", span="294-294", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n190 [label="!checkJsonOnly", span="299-299", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n192 [label="serializationMethods.Add(new Tuple<string, Func<string>>(\r\n					''TypeDescriptor'',\r\n					() => converter.ConvertToInvariantString(argumentValue)))", span="302-304", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n208 [label="converter.ConvertToInvariantString(argumentValue)", span="304-304", cluster="lambda expression"];
n193 [label="serializationMethods.Add(new Tuple<string, Func<string>>(\r\n				''JSON'',\r\n				() => JsonConvert.SerializeObject(argumentValue)))", span="307-309", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n212 [label="JsonConvert.SerializeObject(argumentValue)", span="309-309", cluster="lambda expression"];
n188 [label="var methodInfo = type.GetMethod(''Method'', new[] { typeof(T) })", span="295-295", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n195 [label="var job = new Job(type, methodInfo, new[] { method.Item2() })", span="313-313", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n189 [label="var serializationMethods = new List<Tuple<string, Func<string>>>()", span="297-297", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n198 [label="Entry System.Type.GetMethod(string, System.Type[])", span="0-0", cluster="System.Type.GetMethod(string, System.Type[])"];
n199 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n194 [label=serializationMethods, span="311-311", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n191 [label="var converter = TypeDescriptor.GetConverter(typeof(T))", span="301-301", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n200 [label="Entry System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", span="0-0", cluster="System.ComponentModel.TypeDescriptor.GetConverter(System.Type)"];
n201 [label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0", cluster="System.Tuple<T1, T2>.Tuple(T1, T2)"];
n202 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
n203 [label="Entry Tuple<string, Func<string>>.cstr", span="", cluster="Tuple<string, Func<string>>.cstr"];
n197 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", span="292-292", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n196 [label="job.Perform(_activator.Object, _token.Object)", span="314-314", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n204 [label="Entry Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", span="68-68", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])"];
n205 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
n206 [label="Entry Unk.Perform", span="", cluster="Unk.Perform"];
n207 [label="Entry lambda expression", span="304-304", cluster="lambda expression"];
n209 [label="Exit lambda expression", span="304-304", cluster="lambda expression"];
n210 [label="Entry System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", span="0-0", cluster="System.ComponentModel.TypeConverter.ConvertToInvariantString(object)"];
n211 [label="Entry lambda expression", span="309-309", cluster="lambda expression"];
n213 [label="Exit lambda expression", span="309-309", cluster="lambda expression"];
n214 [label="Entry Unk.SerializeObject", span="", cluster="Unk.SerializeObject"];
d11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", color=green, community=0];
d10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()"];
d12 [label="Exit HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()"];
d9 [label="Entry HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()"];
d13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd"];
m0_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="SchedulePollerFacts.cs"];
m0_30 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", span="76-76", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", color=red, community=0, file="SchedulePollerFacts.cs"];
m0_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''A job in the implicit \'Dequeued\' state moved to the \'Checked\' state'', new string[] {\r\n                        ''checkpoint-1-1''})", span="78-79", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SchedulePollerFacts.cs"];
m0_25 [label="Exit HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", span="49-49", cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerFacts.cs"];
m0_7 [label="Entry System.DateTime.AddMinutes(double)", span="0-0", cluster="System.DateTime.AddMinutes(double)", file="SchedulePollerFacts.cs"];
m0_10 [label="Entry HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", span="25-25", cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerFacts.cs"];
m0_11 [label="Given(String.Format(''a job of the '{0}' type'', type))", span="27-27", cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerFacts.cs"];
m0_12 [label="And(''it's state is Scheduled'')", span="28-28", cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerFacts.cs"];
m0_13 [label="Redis.Client.AddItemToSortedSet(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow.AddMinutes(-1)))", span="30-33", cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerFacts.cs"];
m0_14 [label="Exit HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", span="25-25", cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerFacts.cs"];
m0_32 [label="this.ScenarioSetup(scenarioInfo)", span="81-81", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SchedulePollerFacts.cs"];
m0_37 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", span="76-76", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SchedulePollerFacts.cs"];
m0_15 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SchedulePollerFacts.cs"];
m0_65 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="152-152", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_72 [label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="168-168", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_71 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="166-166", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_67 [label="this.ScenarioSetup(scenarioInfo)", span="158-158", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_76 [label="this.ScenarioCleanup()", span="176-176", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_73 [label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="170-170", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_68 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="160-160", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_70 [label="testRunner.And(''it was fetched a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="164-164", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_66 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job by the \'checked\' flag in the \'Fetched\' state should not be re-queue'' +\r\n                    ''d'', new string[] {\r\n                        ''checkpoint-2''})", span="154-156", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_75 [label="testRunner.And(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="174-174", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_74 [label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="172-172", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_69 [label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="162-162", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_77 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="152-152", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_34 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SchedulePollerFacts.cs"];
m0_35 [label="testRunner.Then(''it marks the job as \'checked\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SchedulePollerFacts.cs", color=green, community=0];
m0_36 [label="this.ScenarioCleanup()", span="89-89", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SchedulePollerFacts.cs"];
m0_53 [label="Entry Unk.And", span="", cluster="Unk.And", file="SchedulePollerFacts.cs"];
m0_6 [label="Entry Unk.And", span="", cluster="Unk.And", file="SchedulePollerFacts.cs"];
m0_26 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="SchedulePollerFacts.cs"];
m0_112 [label="Entry Unk.But", span="", cluster="Unk.But", file="SchedulePollerFacts.cs"];
m0_8 [label="Entry HangFire.JobHelper.ToTimestamp(System.DateTime)", span="52-52", cluster="HangFire.JobHelper.ToTimestamp(System.DateTime)", file="SchedulePollerFacts.cs"];
m0_78 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="184-184", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_84 [label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="197-197", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_83 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="195-195", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_80 [label="this.ScenarioSetup(scenarioInfo)", span="189-189", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_88 [label="this.ScenarioCleanup()", span="205-205", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_85 [label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="199-199", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_81 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="191-191", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_82 [label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="193-193", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_79 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out jobs in the \'Fetched\' state should be re-queued'', new string[] {\r\n                        ''checkpoint-2''})", span="186-187", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_87 [label="testRunner.And(''the job does not have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="203-203", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_86 [label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="201-201", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_89 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="184-184", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs"];
m0_27 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SchedulePollerFacts.cs"];
m0_28 [label="Entry HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", span="29-29", cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SchedulePollerFacts.cs"];
m0_22 [label="Entry HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", span="49-49", cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerFacts.cs"];
m0_23 [label="var poller = new SchedulePoller(RedisFactory.BasicManager, TimeSpan.FromSeconds(15))", span="51-51", cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerFacts.cs"];
m0_24 [label="_pollerResult = poller.EnqueueNextScheduledJob()", span="53-53", cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerFacts.cs"];
m0_9 [label="Entry Unk.AddItemToSortedSet", span="", cluster="Unk.AddItemToSortedSet", file="SchedulePollerFacts.cs"];
m0_33 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="83-83", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SchedulePollerFacts.cs"];
m0_41 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="SchedulePollerFacts.cs"];
m0_90 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="214-214", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs"];
m0_97 [label="testRunner.Then(''the job moved to the Enqueued state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="230-230", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs"];
m0_96 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="228-228", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs"];
m0_92 [label="this.ScenarioSetup(scenarioInfo)", span="220-220", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs"];
m0_99 [label="this.ScenarioCleanup()", span="234-234", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs"];
m0_98 [label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="232-232", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs"];
m0_93 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="222-222", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs"];
m0_95 [label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="226-226", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs"];
m0_91 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job\'s state is changed to the Enqueued when the job is being timed out after proc'' +\r\n                    ''eeding to the Processing state'', new string[] {\r\n                        ''checkpoint-3''})", span="216-218", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs"];
m0_94 [label="testRunner.And(''it\'s state is Processing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="224-224", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs"];
m0_100 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="214-214", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs"];
m0_38 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SchedulePollerFacts.cs"];
m0_39 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="SchedulePollerFacts.cs"];
m0_40 [label="Entry Unk.When", span="", cluster="Unk.When", file="SchedulePollerFacts.cs"];
m0_113 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", span="268-268", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs"];
m0_119 [label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="280-280", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs"];
m0_118 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="278-278", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs"];
m0_115 [label="this.ScenarioSetup(scenarioInfo)", span="272-272", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs"];
m0_120 [label="this.ScenarioCleanup()", span="282-282", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs"];
m0_117 [label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="276-276", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs"];
m0_114 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job is being enqueued on it\'s actual queue after timing out'', ((string[])(null)))", span="270-270", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs"];
m0_116 [label="testRunner.And(''a dequeued job from the \'test\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="274-274", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs"];
m0_121 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", span="268-268", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs"];
m0_122 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="290-290", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_128 [label="testRunner.Then(''the job moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="303-303", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_127 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="301-301", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_124 [label="this.ScenarioSetup(scenarioInfo)", span="295-295", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_130 [label="this.ScenarioCleanup()", span="307-307", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_129 [label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="305-305", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_125 [label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="297-297", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_126 [label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="299-299", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_123 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When the server could not find the job\'s type, the job is moved to the Failed sta'' +\r\n                    ''te'', ((string[])(null)))", span="292-293", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_131 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="290-290", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_101 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="242-242", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs"];
m0_108 [label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="257-257", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs"];
m0_107 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="255-255", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs"];
m0_103 [label="this.ScenarioSetup(scenarioInfo)", span="247-247", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs"];
m0_110 [label="this.ScenarioCleanup()", span="261-261", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs"];
m0_109 [label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="259-259", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs"];
m0_104 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="249-249", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs"];
m0_106 [label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="253-253", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs"];
m0_102 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job in the Succeeded state does not move to the Enqueued state'', new string[] {\r\n                        ''checkpoint-4''})", span="244-245", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs"];
m0_105 [label="testRunner.And(''it\'s state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="251-251", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs"];
m0_111 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="242-242", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs"];
m0_42 [label="HangFire.Tests.SchedulePollerSteps", span="", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs"];
m0_48 [label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="110-110", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs"];
m0_47 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="108-108", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs"];
m0_44 [label="this.ScenarioSetup(scenarioInfo)", span="102-102", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs"];
m0_51 [label="this.ScenarioCleanup()", span="116-116", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs"];
m0_49 [label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="112-112", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs"];
m0_45 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="104-104", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs"];
m0_46 [label="testRunner.And(''it was checked a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs"];
m0_43 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Non-timed out job in the \'Checked\' state should not be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="99-100", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs"];
m0_50 [label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="114-114", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs"];
m0_52 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="97-97", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs"];
m0_54 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="124-124", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs"];
m0_60 [label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="137-137", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs"];
m0_59 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="135-135", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs"];
m0_56 [label="this.ScenarioSetup(scenarioInfo)", span="129-129", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs"];
m0_63 [label="this.ScenarioCleanup()", span="143-143", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs"];
m0_61 [label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="139-139", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs"];
m0_57 [label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="131-131", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs"];
m0_58 [label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="133-133", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs"];
m0_55 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed job in the \'Checked\' state should be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="126-127", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs"];
m0_62 [label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="141-141", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs"];
m0_64 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="124-124", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs"];
m0_21 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="SchedulePollerFacts.cs"];
m0_16 [label="Entry HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", span="37-37", cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerFacts.cs"];
m0_17 [label="Given(''a job'')", span="39-39", cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerFacts.cs"];
m0_18 [label="And(''it's state is Scheduled'')", span="40-40", cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerFacts.cs"];
m0_19 [label="Redis.Client.AddItemToSortedSet(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow.AddHours(1)))", span="42-45", cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerFacts.cs"];
m0_20 [label="Exit HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", span="37-37", cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerFacts.cs"];
m0_5 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="SchedulePollerFacts.cs"];
m0_0 [label="Entry HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", span="13-13", cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerFacts.cs"];
m0_1 [label="Given(''a job'')", span="15-15", cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerFacts.cs"];
m0_2 [label="And(''it's state is Scheduled'')", span="16-16", cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerFacts.cs"];
m0_3 [label="Redis.Client.AddItemToSortedSet(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow.AddMinutes(-1)))", span="18-21", cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerFacts.cs"];
m0_4 [label="Exit HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", span="13-13", cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerFacts.cs"];
m0_132 [label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="314-314", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_139 [label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="328-328", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_138 [label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="326-326", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_134 [label="this.ScenarioSetup(scenarioInfo)", span="318-318", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_141 [label="this.ScenarioCleanup()", span="332-332", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_140 [label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="330-330", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_135 [label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="320-320", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_137 [label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="324-324", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_133 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Succeeded job of non-existing type will not be moved to the failed state'', ((string[])(null)))", span="316-316", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_136 [label="testRunner.And(''it\'s state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="322-322", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_142 [label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="314-314", cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs"];
m0_143 [label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", span="", file="SchedulePollerFacts.cs"];
m2_20 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", span="32-32", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="ServerHeartbeatFacts.cs"];
m2_191 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", span="192-192", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", file="ServerHeartbeatFacts.cs"];
m2_192 [label="_client.Object.Requeue(JobId)", span="194-194", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", file="ServerHeartbeatFacts.cs"];
m2_193 [label="_client.Verify(x => x.ChangeState(JobId, It.IsAny<EnqueuedState>(), null))", span="196-196", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", file="ServerHeartbeatFacts.cs"];
m2_194 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", span="192-192", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", file="ServerHeartbeatFacts.cs"];
m2_153 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", span="144-144", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", file="ServerHeartbeatFacts.cs"];
m2_154 [label="_client.Object.ChangeState(''job-id'', _state.Object)", span="146-146", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", file="ServerHeartbeatFacts.cs"];
m2_155 [label="_client.Verify(x => x.ChangeState(''job-id'', _state.Object, null))", span="148-148", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", file="ServerHeartbeatFacts.cs"];
m2_156 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", span="144-144", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", file="ServerHeartbeatFacts.cs"];
m2_5 [label="Exit HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", span="14-14", cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ServerHeartbeatFacts.cs"];
m2_32 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Create<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), _state.Object))", span="42-44", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_160 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", span="152-152", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_161 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Delete(null, JobId))", span="154-155", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_162 [label="Assert.Equal(''client'', exception.ParamName)", span="157-157", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_163 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", span="152-152", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_128 [label="Entry Hangfire.BackgroundJobClientExtensions.Schedule<T>(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="85-85", cluster="Hangfire.BackgroundJobClientExtensions.Schedule<T>(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", file="ServerHeartbeatFacts.cs"];
m2_4 [label="_context = new ElectStateContext(_stateContext, enqueuedState, null, _connection.Object)", span="20-20", cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ServerHeartbeatFacts.cs", color=red, community=0];
m2_6 [label="Entry HangFire.States.StateContext.StateContext(string, HangFire.Common.Job)", span="23-23", cluster="HangFire.States.StateContext.StateContext(string, HangFire.Common.Job)", file="ServerHeartbeatFacts.cs"];
m2_7 [label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="119-119", cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="ServerHeartbeatFacts.cs"];
m2_8 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="ServerHeartbeatFacts.cs"];
m2_9 [label="Entry HangFire.States.EnqueuedState.EnqueuedState(string)", span="36-36", cluster="HangFire.States.EnqueuedState.EnqueuedState(string)", file="ServerHeartbeatFacts.cs"];
m2_19 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", span="207-207", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", file="ServerHeartbeatFacts.cs"];
m2_52 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", span="58-58", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_53 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod()))", span="60-62", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", color=green, community=0, file="ServerHeartbeatFacts.cs"];
m2_54 [label="Assert.Equal(''client'', exception.ParamName)", span="64-64", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_55 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", span="58-58", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_199 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", span="200-200", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", file="ServerHeartbeatFacts.cs"];
m2_200 [label="_client.Object.Requeue(JobId, FailedState.StateName)", span="202-202", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", file="ServerHeartbeatFacts.cs"];
m2_201 [label="_client.Verify(x => x.ChangeState(JobId, It.IsAny<EnqueuedState>(), FailedState.StateName))", span="204-204", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", file="ServerHeartbeatFacts.cs"];
m2_202 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", span="200-200", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", file="ServerHeartbeatFacts.cs"];
m2_74 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", span="76-76", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_75 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod()))", span="78-80", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_76 [label="Assert.Equal(''client'', exception.ParamName)", span="82-82", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_77 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", span="76-76", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_190 [label="Entry Hangfire.BackgroundJobClientExtensions.Requeue(Hangfire.IBackgroundJobClient, string, string)", span="227-227", cluster="Hangfire.BackgroundJobClientExtensions.Requeue(Hangfire.IBackgroundJobClient, string, string)", file="ServerHeartbeatFacts.cs"];
m2_0 [label="Entry HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", span="14-14", cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ServerHeartbeatFacts.cs"];
m2_1 [label="_stateContext = new StateContext(''id'', Job.FromExpression(() => Sample()))", span="16-16", cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ServerHeartbeatFacts.cs"];
m2_2 [label="_connection = new Mock<IStorageConnection>()", span="17-17", cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ServerHeartbeatFacts.cs"];
m2_3 [label="var enqueuedState = new EnqueuedState(''queue'')", span="18-18", cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ServerHeartbeatFacts.cs"];
m2_21 [label="Entry HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", span="31-31", cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", file="ServerHeartbeatFacts.cs"];
m2_22 [label="var filter = new QueueAttribute(''override'')", span="33-33", cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", file="ServerHeartbeatFacts.cs"];
m2_23 [label="filter.OnStateElection(_context)", span="34-34", cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", file="ServerHeartbeatFacts.cs"];
m2_167 [label="Entry Hangfire.BackgroundJobClientExtensions.Delete(Hangfire.IBackgroundJobClient, string)", span="166-166", cluster="Hangfire.BackgroundJobClientExtensions.Delete(Hangfire.IBackgroundJobClient, string)", file="ServerHeartbeatFacts.cs"];
m2_195 [label="Entry Unk.Requeue", span="", cluster="Unk.Requeue", file="ServerHeartbeatFacts.cs"];
m2_33 [label="Assert.Equal(''client'', exception.ParamName)", span="46-46", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_31 [label="Exit HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_DoesNotDoAnything_IfStateIsNotEnqueuedState()", span="40-40", cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_DoesNotDoAnything_IfStateIsNotEnqueuedState()", file="ServerHeartbeatFacts.cs"];
m2_34 [label="Entry lambda expression", span="45-45", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_27 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_28 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_29 [label="x.Create(It.IsNotNull<Job>(), _state.Object)", span="36-36", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_30 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_103 [label="Entry Hangfire.BackgroundJobClientExtensions.Schedule(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", span="68-68", cluster="Hangfire.BackgroundJobClientExtensions.Schedule(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", file="ServerHeartbeatFacts.cs"];
m2_10 [label="Entry ElectStateContext.cstr", span="", cluster="ElectStateContext.cstr", file="ServerHeartbeatFacts.cs"];
m2_63 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", span="68-68", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="ServerHeartbeatFacts.cs"];
m2_64 [label="_client.Object.Enqueue(() => StaticMethod())", span="70-70", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="ServerHeartbeatFacts.cs"];
m2_65 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="72-72", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="ServerHeartbeatFacts.cs"];
m2_66 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", span="68-68", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="ServerHeartbeatFacts.cs"];
m2_107 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", span="104-104", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs"];
m2_108 [label="_client.Object.Schedule(() => StaticMethod(), TimeSpan.FromDays(1))", span="106-106", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs"];
m2_109 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow)))", span="108-110", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs"];
m2_110 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", span="104-104", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs"];
m2_95 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", span="94-94", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_96 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Schedule(\r\n                    null, () => StaticMethod(), TimeSpan.FromDays(1)))", span="96-98", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_97 [label="Assert.Equal(''client'', exception.ParamName)", span="100-100", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_98 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", span="94-94", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_81 [label="Entry Hangfire.BackgroundJobClientExtensions.Enqueue<T>(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>)", span="53-53", cluster="Hangfire.BackgroundJobClientExtensions.Enqueue<T>(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>)", file="ServerHeartbeatFacts.cs"];
m2_41 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", span="211-211", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", file="ServerHeartbeatFacts.cs"];
m2_207 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", span="211-211", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", file="ServerHeartbeatFacts.cs"];
m2_176 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", span="172-172", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", file="ServerHeartbeatFacts.cs"];
m2_177 [label="_client.Object.Delete(JobId, FailedState.StateName)", span="174-174", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", file="ServerHeartbeatFacts.cs"];
m2_178 [label="_client.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.IsAny<DeletedState>(),\r\n                FailedState.StateName))", span="176-179", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", file="ServerHeartbeatFacts.cs"];
m2_179 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", span="172-172", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", file="ServerHeartbeatFacts.cs"];
m2_206 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", span="207-207", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", file="ServerHeartbeatFacts.cs"];
m2_102 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="ServerHeartbeatFacts.cs"];
m2_67 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="ServerHeartbeatFacts.cs"];
m2_24 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="ServerHeartbeatFacts.cs"];
m2_25 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_26 [label="StaticMethod()", span="34-34", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_152 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState", file="ServerHeartbeatFacts.cs"];
m2_132 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", span="124-124", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs"];
m2_133 [label="_client.Object.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                x => x.InstanceMethod(), TimeSpan.FromDays(1))", span="126-127", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs"];
m2_134 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow)))", span="129-131", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs"];
m2_135 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", span="124-124", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs"];
m2_168 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", span="161-161", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", file="ServerHeartbeatFacts.cs"];
m2_169 [label="_client.Object.Delete(JobId)", span="163-163", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", file="ServerHeartbeatFacts.cs"];
m2_170 [label="_client.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.IsAny<DeletedState>(),\r\n                null))", span="165-168", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", file="ServerHeartbeatFacts.cs"];
m2_171 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", span="161-161", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", file="ServerHeartbeatFacts.cs"];
m2_14 [label="Exit lambda expression", span="25-26", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_37 [label="Exit lambda expression", span="43-44", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_85 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", span="86-86", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerHeartbeatFacts.cs"];
m2_86 [label="_client.Object.Enqueue<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod())", span="88-88", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerHeartbeatFacts.cs"];
m2_87 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="90-90", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerHeartbeatFacts.cs"];
m2_88 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", span="86-86", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerHeartbeatFacts.cs"];
m2_59 [label="Entry Hangfire.BackgroundJobClientExtensions.Enqueue(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>)", span="35-35", cluster="Hangfire.BackgroundJobClientExtensions.Enqueue(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>)", file="ServerHeartbeatFacts.cs"];
m2_129 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_11 [label="Entry lambda expression", span="16-16", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_12 [label="Entry lambda expression", span="25-26", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_13 [label="BackgroundJobClientExtensions.Create(\r\n                    null, () => StaticMethod(), _state.Object)", span="25-26", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_35 [label="Entry lambda expression", span="43-44", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_36 [label="BackgroundJobClientExtensions.Create<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), _state.Object)", span="43-44", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_56 [label="Entry lambda expression", span="61-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_50 [label="x.Create(It.IsNotNull<Job>(), _state.Object)", span="54-54", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_72 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="72-72", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_93 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="90-90", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_116 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow))", span="108-110", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_140 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow))", span="129-131", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_174 [label="x.ChangeState(\r\n                JobId,\r\n                It.IsAny<DeletedState>(),\r\n                null)", span="165-168", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_181 [label="x.ChangeState(\r\n                JobId,\r\n                It.IsAny<DeletedState>(),\r\n                FailedState.StateName)", span="176-179", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_197 [label="x.ChangeState(JobId, It.IsAny<EnqueuedState>(), null)", span="196-196", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_204 [label="x.ChangeState(JobId, It.IsAny<EnqueuedState>(), FailedState.StateName)", span="204-204", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_58 [label="Exit lambda expression", span="61-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_57 [label="BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod())", span="61-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_38 [label="HangFire.Core.Tests.QueueAttributeFacts", span="", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_46 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_49 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_51 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_71 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_73 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_78 [label="Entry lambda expression", span="79-80", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_89 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_92 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_94 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_99 [label="Entry lambda expression", span="97-98", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_115 [label="Entry lambda expression", span="108-110", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_117 [label="Exit lambda expression", span="108-110", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_118 [label="Entry lambda expression", span="110-110", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_125 [label="Entry lambda expression", span="117-118", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_136 [label="Entry lambda expression", span="127-127", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_139 [label="Entry lambda expression", span="129-131", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_141 [label="Exit lambda expression", span="129-131", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_142 [label="Entry lambda expression", span="131-131", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_149 [label="Entry lambda expression", span="138-138", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_164 [label="Entry lambda expression", span="155-155", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_173 [label="Entry lambda expression", span="165-168", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_175 [label="Exit lambda expression", span="165-168", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_180 [label="Entry lambda expression", span="176-179", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_182 [label="Exit lambda expression", span="176-179", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_187 [label="Entry lambda expression", span="186-186", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_196 [label="Entry lambda expression", span="196-196", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_198 [label="Exit lambda expression", span="196-196", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_203 [label="Entry lambda expression", span="204-204", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_205 [label="Exit lambda expression", span="204-204", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_60 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_150 [label="BackgroundJobClientExtensions.ChangeState(null, ''job-id'', _state.Object)", span="138-138", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_158 [label="x.ChangeState(''job-id'', _state.Object, null)", span="148-148", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_40 [label=context, span="", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_39 [label=filter, span="", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_48 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_47 [label="x.InstanceMethod()", span="52-52", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_80 [label="Exit lambda expression", span="79-80", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_79 [label="BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod())", span="79-80", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_91 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_90 [label="x.InstanceMethod()", span="88-88", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_101 [label="Exit lambda expression", span="97-98", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_100 [label="BackgroundJobClientExtensions.Schedule(\r\n                    null, () => StaticMethod(), TimeSpan.FromDays(1))", span="97-98", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_120 [label="Exit lambda expression", span="110-110", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_119 [label="state.EnqueueAt > DateTime.UtcNow", span="110-110", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_127 [label="Exit lambda expression", span="117-118", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_126 [label="BackgroundJobClientExtensions.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), TimeSpan.FromDays(1))", span="117-118", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_138 [label="Exit lambda expression", span="127-127", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_137 [label="x.InstanceMethod()", span="127-127", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_144 [label="Exit lambda expression", span="131-131", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_143 [label="state.EnqueueAt > DateTime.UtcNow", span="131-131", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_151 [label="Exit lambda expression", span="138-138", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_166 [label="Exit lambda expression", span="155-155", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_165 [label="BackgroundJobClientExtensions.Delete(null, JobId)", span="155-155", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_189 [label="Exit lambda expression", span="186-186", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_188 [label="BackgroundJobClientExtensions.Requeue(null, JobId, FailedState.StateName)", span="186-186", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_62 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_61 [label="StaticMethod()", span="62-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_16 [label="var filter = new QueueAttribute(''hello'')", span="26-26", cluster="HangFire.Core.Tests.QueueAttributeFacts.Ctor_CorrectlySets_AllPropertyValues()", file="ServerHeartbeatFacts.cs"];
m2_68 [label="Entry lambda expression", span="70-70", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_112 [label="Entry lambda expression", span="106-106", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_157 [label="Entry lambda expression", span="148-148", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_159 [label="Exit lambda expression", span="148-148", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_82 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_104 [label="Entry lambda expression", span="98-98", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_18 [label="Exit HangFire.Core.Tests.QueueAttributeFacts.Ctor_CorrectlySets_AllPropertyValues()", span="24-24", cluster="HangFire.Core.Tests.QueueAttributeFacts.Ctor_CorrectlySets_AllPropertyValues()", file="ServerHeartbeatFacts.cs"];
m2_17 [label="Assert.Equal(''hello'', filter.Queue)", span="27-27", cluster="HangFire.Core.Tests.QueueAttributeFacts.Ctor_CorrectlySets_AllPropertyValues()", file="ServerHeartbeatFacts.cs"];
m2_70 [label="Exit lambda expression", span="70-70", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_69 [label="StaticMethod()", span="70-70", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_114 [label="Exit lambda expression", span="106-106", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_113 [label="StaticMethod()", span="106-106", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_83 [label="x.InstanceMethod()", span="80-80", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_130 [label="x.InstanceMethod()", span="118-118", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_84 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_106 [label="Exit lambda expression", span="98-98", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_105 [label="StaticMethod()", span="98-98", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_131 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m2_15 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="ServerHeartbeatFacts.cs"];
m2_42 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", span="50-50", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="ServerHeartbeatFacts.cs"];
m2_43 [label="_client.Object.Create<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod(), _state.Object)", span="52-52", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="ServerHeartbeatFacts.cs"];
m2_44 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), _state.Object))", span="54-54", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="ServerHeartbeatFacts.cs"];
m2_45 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", span="50-50", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="ServerHeartbeatFacts.cs"];
m2_172 [label="Entry Unk.Delete", span="", cluster="Unk.Delete", file="ServerHeartbeatFacts.cs"];
m2_145 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", span="135-135", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_146 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.ChangeState(null, ''job-id'', _state.Object))", span="137-138", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_147 [label="Assert.Equal(''client'', exception.ParamName)", span="140-140", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_148 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", span="135-135", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_121 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", span="114-114", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_122 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), TimeSpan.FromDays(1)))", span="116-118", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_123 [label="Assert.Equal(''client'', exception.ParamName)", span="120-120", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_124 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", span="114-114", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_111 [label="Entry Unk.Schedule", span="", cluster="Unk.Schedule", file="ServerHeartbeatFacts.cs"];
m2_183 [label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", span="183-183", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_184 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Requeue(null, JobId, FailedState.StateName))", span="185-186", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_185 [label="Assert.Equal(''client'', exception.ParamName)", span="188-188", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_186 [label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", span="183-183", cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs"];
m2_208 [label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", span="", file="ServerHeartbeatFacts.cs"];
m3_8 [label="Entry Mock<IJobPerformanceProcess>.cstr", span="", cluster="Mock<IJobPerformanceProcess>.cstr", file="WorkerManagerFacts.cs"];
m3_117 [label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="231-231", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs"];
m3_118 [label="serverId == null", span="233-233", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs"];
m3_120 [label="context == null", span="234-234", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs"];
m3_122 [label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="236-241", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs"];
m3_123 [label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                + @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", span="243-249", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs"];
m3_119 [label="throw new ArgumentNullException(''serverId'');", span="233-233", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs"];
m3_121 [label="throw new ArgumentNullException(''context'');", span="234-234", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs"];
m3_124 [label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="231-231", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs"];
m3_10 [label="_connection.Dispose()", span="48-48", cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="WorkerManagerFacts.cs"];
m3_102 [label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="209-209", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs"];
m3_103 [label="id == null", span="211-211", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs"];
m3_105 [label="name == null", span="212-212", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs"];
m3_107 [label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="214-217", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs"];
m3_104 [label="throw new ArgumentNullException(''id'');", span="211-211", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs"];
m3_106 [label="throw new ArgumentNullException(''name'');", span="212-212", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs"];
m3_108 [label="Exit HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="209-209", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs"];
m3_45 [label="parameters == null", span="91-91", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="WorkerManagerFacts.cs"];
m3_125 [label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="20-20", cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="WorkerManagerFacts.cs"];
m3_85 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_86 [label="HangFire.Core.Tests.Server.WorkerManagerFacts", span="", cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs"];
m3_89 [label="var sqlState = _connection.Query<SqlState>(sql, new { jobId = jobId }).SingleOrDefault()", span="181-181", cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs"];
m3_87 [label="throw new ArgumentNullException(''jobId'');", span="173-173", cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs"];
m3_88 [label="string sql = @''\r\nselect s.Name, s.Reason, s.Data\r\nfrom HangFire.State s\r\ninner join HangFire.Job j on j.StateId = s.Id\r\nwhere j.Id = @jobId''", span="175-179", cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs"];
m3_90 [label="sqlState == null", span="182-182", cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs"];
m3_92 [label="return new StateData\r\n            {\r\n                Name = sqlState.Name,\r\n                Reason = sqlState.Reason,\r\n                Data = JobHelper.FromJson<Dictionary<string, string>>(sqlState.Data)\r\n            };", span="187-192", cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs"];
m3_91 [label="return null;", span="184-184", cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs"];
m3_93 [label="Exit HangFire.SqlServer.SqlServerConnection.GetStateData(string)", span="171-171", cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs"];
m3_47 [label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="93-96", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="WorkerManagerFacts.cs"];
m3_48 [label="var invocationData = InvocationData.Serialize(job)", span="98-98", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", color=green, community=0, file="WorkerManagerFacts.cs"];
m3_49 [label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = createdAt,\r\n                    expireAt = createdAt.Add(expireIn)\r\n                }).Single().ToString()", span="100-108", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="WorkerManagerFacts.cs"];
m3_50 [label="parameters.Count > 0", span="110-110", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", color=green, community=0, file="WorkerManagerFacts.cs"];
m3_51 [label="var parameterArray = new object[parameters.Count]", span="112-112", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="WorkerManagerFacts.cs"];
m3_70 [label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="141-142", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="WorkerManagerFacts.cs"];
m3_21 [label="_workerSupervisors[context.WorkerNumber - 1].Object", span="38-38", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_74 [label="invocationData.Arguments = jobData.Arguments", span="148-148", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="WorkerManagerFacts.cs"];
m3_75 [label="Job job = null", span="150-150", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", color=green, community=0, file="WorkerManagerFacts.cs"];
m3_76 [label="JobLoadException loadException = null", span="151-151", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="WorkerManagerFacts.cs"];
m3_77 [label="job = invocationData.Deserialize()", span="155-155", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", color=green, community=0, file="WorkerManagerFacts.cs"];
m3_78 [label=JobLoadException, span="157-157", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="WorkerManagerFacts.cs"];
m3_17 [label="Entry HangFire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="56-56", cluster="HangFire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="WorkerManagerFacts.cs"];
m3_18 [label="Entry Unk.>", span="", cluster="Unk.>", file="WorkerManagerFacts.cs"];
m3_19 [label="Entry Unk.CreateWorkerSupervisor", span="", cluster="Unk.CreateWorkerSupervisor", file="WorkerManagerFacts.cs"];
m3_11 [label="Exit HangFire.SqlServer.SqlServerConnection.Dispose()", span="46-46", cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="WorkerManagerFacts.cs"];
m3_12 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="WorkerManagerFacts.cs"];
m3_0 [label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs"];
m3_1 [label="connection == null", span="39-39", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs"];
m3_2 [label="throw new ArgumentNullException(''connection'');", span="39-39", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs"];
m3_3 [label="queueProviders == null", span="40-40", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs"];
m3_4 [label="throw new ArgumentNullException(''queueProviders'');", span="40-40", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs"];
m3_5 [label="_connection = connection", span="42-42", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs"];
m3_143 [label="Entry System.TimeSpan.Negate()", span="0-0", cluster="System.TimeSpan.Negate()", file="WorkerManagerFacts.cs"];
m3_62 [label="Entry HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsStopMethodOnAllWorkers()", span="79-79", cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsStopMethodOnAllWorkers()", file="WorkerManagerFacts.cs"];
m3_66 [label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsStopMethodOnAllWorkers()", span="79-79", cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsStopMethodOnAllWorkers()", file="WorkerManagerFacts.cs"];
m3_67 [label="Entry lambda expression", span="83-83", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_68 [label="x.Stop()", span="83-83", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_69 [label="Exit lambda expression", span="83-83", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_71 [label="Entry lambda expression", span="84-84", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_73 [label="Exit lambda expression", span="84-84", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_80 [label="x.Dispose()", span="92-92", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_72 [label="x.Stop()", span="84-84", cluster="lambda expression", file="WorkerManagerFacts.cs", color=green, community=0];
m3_79 [label="Entry lambda expression", span="92-92", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_81 [label="Exit lambda expression", span="92-92", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_23 [label="queues == null || queues.Length == 0", span="66-66", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="WorkerManagerFacts.cs"];
m3_24 [label="throw new ArgumentNullException(''queues'');", span="66-66", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="WorkerManagerFacts.cs"];
m3_25 [label="var providers = queues\r\n                .Select(queue => _queueProviders.GetProvider(queue))\r\n                .Distinct()\r\n                .ToArray()", span="68-71", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="WorkerManagerFacts.cs", color=red, community=0];
m3_13 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="WorkerManagerFacts.cs"];
m3_14 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="WorkerManagerFacts.cs"];
m3_15 [label="Exit HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="51-51", cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="WorkerManagerFacts.cs"];
m3_16 [label="x.CreateWorkerSupervisor(It.IsNotNull<WorkerContext>())", span="37-37", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_116 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)", file="WorkerManagerFacts.cs"];
m3_35 [label="Entry lambda expression", span="52-53", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_33 [label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenWorkerCountLessOrEqualToZero()", span="49-49", cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenWorkerCountLessOrEqualToZero()", file="WorkerManagerFacts.cs"];
m3_30 [label="Exit HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="64-64", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="WorkerManagerFacts.cs"];
m3_31 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="WorkerManagerFacts.cs"];
m3_32 [label="Entry Unk.Distinct", span="", cluster="Unk.Distinct", file="WorkerManagerFacts.cs"];
m3_34 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="WorkerManagerFacts.cs"];
m3_20 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_64 [label="_workerSupervisors[0].Verify(x => x.Stop())", span="83-83", cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsStopMethodOnAllWorkers()", file="WorkerManagerFacts.cs"];
m3_61 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_46 [label="throw new ArgumentNullException(''parameters'');", span="91-91", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="WorkerManagerFacts.cs"];
m3_94 [label="Entry HangFire.Storage.StateData.StateData()", span="21-21", cluster="HangFire.Storage.StateData.StateData()", file="WorkerManagerFacts.cs"];
m3_22 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_27 [label="new WorkerManager(null, WorkerCount)", span="45-45", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_29 [label="Entry HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", span="30-30", cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", color=red, community=0, file="WorkerManagerFacts.cs"];
m3_26 [label="Entry lambda expression", span="45-45", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_28 [label="Exit lambda expression", span="45-45", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_44 [label="throw new ArgumentNullException(''job'');", span="90-90", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="WorkerManagerFacts.cs", color=red, community=0];
m3_136 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="270-270", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="WorkerManagerFacts.cs"];
m3_137 [label="timeOut.Duration() != timeOut", span="272-272", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="WorkerManagerFacts.cs"];
m3_138 [label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="274-274", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="WorkerManagerFacts.cs"];
m3_139 [label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="277-279", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="WorkerManagerFacts.cs"];
m3_140 [label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="270-270", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="WorkerManagerFacts.cs"];
m3_82 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="WorkerManagerFacts.cs"];
m3_141 [label="Entry System.TimeSpan.Duration()", span="0-0", cluster="System.TimeSpan.Duration()", file="WorkerManagerFacts.cs"];
m3_41 [label="var worker = manager.CreateWorkerSupervisor(context)", span="64-64", cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerSupervisor_CreatesAWorkerSupervisorWithGivenParameters()", file="WorkerManagerFacts.cs"];
m3_42 [label="Assert.NotNull(worker)", span="66-66", cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerSupervisor_CreatesAWorkerSupervisorWithGivenParameters()", file="WorkerManagerFacts.cs"];
m3_43 [label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerSupervisor_CreatesAWorkerSupervisorWithGivenParameters()", span="59-59", cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerSupervisor_CreatesAWorkerSupervisorWithGivenParameters()", color=red, community=0, file="WorkerManagerFacts.cs"];
m3_53 [label=parameters, span="114-114", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="WorkerManagerFacts.cs"];
m3_54 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="WorkerManagerFacts.cs"];
m3_57 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_52 [label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken(bool)", file="WorkerManagerFacts.cs"];
m3_56 [label="x.Start()", span="74-74", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_55 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_58 [label="Entry Unk.Start", span="", cluster="Unk.Start", file="WorkerManagerFacts.cs"];
m3_9 [label="Entry Mock<JobActivator>.cstr", span="", cluster="Mock<JobActivator>.cstr", file="WorkerManagerFacts.cs"];
m3_38 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_39 [label="_queueProviders.GetProvider(queue)", span="69-69", cluster="lambda expression", file="WorkerManagerFacts.cs", color=red, community=0];
m3_40 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_37 [label="Exit lambda expression", span="52-53", cluster="lambda expression", file="WorkerManagerFacts.cs"];
m3_59 [label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65", cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="WorkerManagerFacts.cs"];
m3_60 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", color=green, community=0, file="WorkerManagerFacts.cs"];
m3_83 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()", file="WorkerManagerFacts.cs"];
m3_84 [label="Entry HangFire.Storage.JobData.JobData()", span="21-21", cluster="HangFire.Storage.JobData.JobData()", color=green, community=0, file="WorkerManagerFacts.cs"];
m3_36 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="WorkerManagerFacts.cs"];
m3_95 [label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="195-195", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs"];
m3_96 [label="id == null", span="197-197", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs"];
m3_98 [label="name == null", span="198-198", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs"];
m3_100 [label="_connection.Execute(\r\n                @''merge HangFire.JobParameter as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="200-206", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs"];
m3_97 [label="throw new ArgumentNullException(''id'');", span="197-197", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs"];
m3_99 [label="throw new ArgumentNullException(''name'');", span="198-198", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs"];
m3_101 [label="Exit HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="195-195", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs"];
m3_109 [label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="220-220", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs"];
m3_110 [label="key == null", span="222-222", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs"];
m3_112 [label="toScore < fromScore", span="223-223", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs"];
m3_114 [label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="225-228", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs"];
m3_111 [label="throw new ArgumentNullException(''key'');", span="222-222", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs"];
m3_113 [label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="223-223", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs"];
m3_115 [label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="220-220", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs"];
m3_63 [label="_manager.Object.Execute(new CancellationToken(true))", span="81-81", cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsStopMethodOnAllWorkers()", file="WorkerManagerFacts.cs", color=green, community=0];
m3_142 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="WorkerManagerFacts.cs"];
m3_65 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", color=green, community=0, file="WorkerManagerFacts.cs"];
m3_126 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="252-252", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="WorkerManagerFacts.cs"];
m3_127 [label="serverId == null", span="254-254", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="WorkerManagerFacts.cs"];
m3_129 [label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="256-258", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="WorkerManagerFacts.cs"];
m3_128 [label="throw new ArgumentNullException(''serverId'');", span="254-254", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="WorkerManagerFacts.cs"];
m3_130 [label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="252-252", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="WorkerManagerFacts.cs"];
m3_6 [label="_queueProviders = queueProviders", span="43-43", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs"];
m3_131 [label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="261-261", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="WorkerManagerFacts.cs"];
m3_132 [label="serverId == null", span="263-263", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="WorkerManagerFacts.cs"];
m3_134 [label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="265-267", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="WorkerManagerFacts.cs"];
m3_133 [label="throw new ArgumentNullException(''serverId'');", span="263-263", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="WorkerManagerFacts.cs"];
m3_135 [label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="261-261", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="WorkerManagerFacts.cs"];
m3_7 [label="Exit HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs"];
m3_144 [label="HangFire.SqlServer.SqlServerConnection", span="", file="WorkerManagerFacts.cs"];
n215 -> n1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n22  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n47  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n59  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n65  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n71  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n77  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n83  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n89  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n95  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n101  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n107  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n113  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n119  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n125  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n131  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n137  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n143  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n149  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n155  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n161  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n167  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n173  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n179  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n185  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n196  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n216 -> n208  [key=1, style=dashed, color=darkseagreen4, label=T];
n216 -> n212  [key=1, style=dashed, color=darkseagreen4, label=T];
n217 -> n208  [key=1, style=dashed, color=darkseagreen4, label=converter];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n5  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n6  [key=2, style=dotted];
n2 -> n7  [key=2, style=dotted];
n2 -> n9  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n3 -> n4  [key=0, style=solid];
n3 -> n8  [key=2, style=dotted];
n9 -> n10  [key=0, style=solid];
n14 -> n15  [key=0, style=solid];
n4 -> n0  [key=0, style=bold, color=blue];
n10 -> n11  [key=0, style=solid];
n10 -> n12  [key=2, style=dotted];
n10 -> n13  [key=2, style=dotted];
n11 -> n9  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n15 -> n0  [key=2, style=dotted];
n16 -> n14  [key=0, style=bold, color=blue];
n17 -> n18  [key=0, style=solid];
n18 -> n19  [key=0, style=solid];
n18 -> n20  [key=2, style=dotted];
n19 -> n17  [key=0, style=bold, color=blue];
n21 -> n22  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n24  [key=2, style=dotted];
n23 -> n21  [key=0, style=bold, color=blue];
n24 -> n187  [key=0, style=solid];
n24 -> n190  [key=1, style=dashed, color=darkseagreen4, label=bool];
n24 -> n192  [key=1, style=dashed, color=darkseagreen4, label=T];
n24 -> n208  [key=1, style=dashed, color=darkseagreen4, label=T];
n24 -> n193  [key=1, style=dashed, color=darkseagreen4, label=T];
n24 -> n212  [key=1, style=dashed, color=darkseagreen4, label=T];
n25 -> n26  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n26 -> n20  [key=2, style=dotted];
n27 -> n25  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid];
n28 -> n83  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Redis.FetchedJobsWatcher watcher"];
n29 -> n30  [key=0, style=solid];
n29 -> n24  [key=2, style=dotted];
n30 -> n28  [key=0, style=bold, color=blue];
n31 -> n32  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n32 -> n20  [key=2, style=dotted];
n33 -> n31  [key=0, style=bold, color=blue];
n34 -> n35  [key=0, style=solid];
n35 -> n36  [key=0, style=solid];
n35 -> n24  [key=2, style=dotted];
n36 -> n34  [key=0, style=bold, color=blue];
n37 -> n38  [key=0, style=solid];
n38 -> n39  [key=0, style=solid];
n38 -> n20  [key=2, style=dotted];
n39 -> n37  [key=0, style=bold, color=blue];
n40 -> n41  [key=0, style=solid];
n41 -> n42  [key=0, style=solid];
n41 -> n24  [key=2, style=dotted];
n42 -> n40  [key=0, style=bold, color=blue];
n43 -> n44  [key=0, style=solid];
n44 -> n45  [key=0, style=solid];
n44 -> n20  [key=2, style=dotted];
n45 -> n43  [key=0, style=bold, color=blue];
n46 -> n47  [key=0, style=solid];
n47 -> n48  [key=0, style=solid];
n47 -> n24  [key=2, style=dotted];
n48 -> n46  [key=0, style=bold, color=blue];
n49 -> n50  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n50 -> n20  [key=2, style=dotted];
n51 -> n49  [key=0, style=bold, color=blue];
n52 -> n53  [key=0, style=solid];
n53 -> n54  [key=0, style=solid];
n53 -> n24  [key=2, style=dotted];
n54 -> n52  [key=0, style=bold, color=blue];
n55 -> n56  [key=0, style=solid];
n56 -> n57  [key=0, style=solid];
n56 -> n20  [key=2, style=dotted];
n57 -> n55  [key=0, style=bold, color=blue];
n58 -> n59  [key=0, style=solid];
n59 -> n60  [key=0, style=solid];
n59 -> n24  [key=2, style=dotted];
n60 -> n58  [key=0, style=bold, color=blue];
n61 -> n62  [key=0, style=solid];
n62 -> n63  [key=0, style=solid];
n62 -> n20  [key=2, style=dotted];
n63 -> n61  [key=0, style=bold, color=blue];
n64 -> n65  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n65 -> n24  [key=2, style=dotted];
n66 -> n64  [key=0, style=bold, color=blue];
n67 -> n68  [key=0, style=solid];
n68 -> n69  [key=0, style=solid];
n68 -> n20  [key=2, style=dotted];
n69 -> n67  [key=0, style=bold, color=blue];
n70 -> n71  [key=0, style=solid];
n70 -> n37  [key=3, color=darkorchid, style=bold, label="Parameter variable string jobId"];
n71 -> n72  [key=0, style=solid];
n71 -> n24  [key=2, style=dotted];
n72 -> n70  [key=0, style=bold, color=blue];
n73 -> n74  [key=0, style=solid];
n74 -> n75  [key=0, style=solid];
n74 -> n20  [key=2, style=dotted];
n75 -> n73  [key=0, style=bold, color=blue];
n76 -> n77  [key=0, style=solid];
n77 -> n78  [key=0, style=solid];
n77 -> n24  [key=2, style=dotted];
n78 -> n76  [key=0, style=bold, color=blue];
n79 -> n80  [key=0, style=solid];
n80 -> n81  [key=0, style=solid];
n80 -> n20  [key=2, style=dotted];
n81 -> n79  [key=0, style=bold, color=blue];
n82 -> n83  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n83 -> n24  [key=2, style=dotted];
n84 -> n82  [key=0, style=bold, color=blue];
n85 -> n86  [key=0, style=solid];
n86 -> n87  [key=0, style=solid];
n86 -> n20  [key=2, style=dotted];
n87 -> n85  [key=0, style=bold, color=blue];
n88 -> n89  [key=0, style=solid];
n89 -> n90  [key=0, style=solid];
n89 -> n24  [key=2, style=dotted];
n89 -> n94  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TimedOutByCheckedTime"];
n90 -> n88  [key=0, style=bold, color=blue];
n91 -> n92  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n92 -> n20  [key=2, style=dotted];
n93 -> n91  [key=0, style=bold, color=blue];
n94 -> n95  [key=0, style=solid];
n95 -> n96  [key=0, style=solid];
n95 -> n24  [key=2, style=dotted];
n96 -> n94  [key=0, style=bold, color=blue];
n97 -> n98  [key=0, style=solid];
n98 -> n99  [key=0, style=solid];
n98 -> n20  [key=2, style=dotted];
n99 -> n97  [key=0, style=bold, color=blue];
n100 -> n101  [key=0, style=solid];
n101 -> n102  [key=0, style=solid];
n101 -> n24  [key=2, style=dotted];
n102 -> n100  [key=0, style=bold, color=blue];
n103 -> n104  [key=0, style=solid];
n104 -> n105  [key=0, style=solid];
n104 -> n20  [key=2, style=dotted];
n105 -> n103  [key=0, style=bold, color=blue];
n106 -> n107  [key=0, style=solid];
n107 -> n108  [key=0, style=solid];
n107 -> n24  [key=2, style=dotted];
n108 -> n106  [key=0, style=bold, color=blue];
n109 -> n110  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n110 -> n20  [key=2, style=dotted];
n111 -> n109  [key=0, style=bold, color=blue];
n112 -> n113  [key=0, style=solid];
n113 -> n114  [key=0, style=solid];
n113 -> n24  [key=2, style=dotted];
n114 -> n112  [key=0, style=bold, color=blue];
n115 -> n116  [key=0, style=solid];
n116 -> n117  [key=0, style=solid];
n116 -> n20  [key=2, style=dotted];
n117 -> n115  [key=0, style=bold, color=blue];
n118 -> n119  [key=0, style=solid];
n119 -> n120  [key=0, style=solid];
n119 -> n24  [key=2, style=dotted];
n120 -> n118  [key=0, style=bold, color=blue];
n121 -> n122  [key=0, style=solid];
n122 -> n123  [key=0, style=solid];
n122 -> n20  [key=2, style=dotted];
n123 -> n121  [key=0, style=bold, color=blue];
n124 -> n125  [key=0, style=solid];
n125 -> n126  [key=0, style=solid];
n125 -> n24  [key=2, style=dotted];
n126 -> n124  [key=0, style=bold, color=blue];
n127 -> n128  [key=0, style=solid];
n128 -> n129  [key=0, style=solid];
n128 -> n20  [key=2, style=dotted];
n129 -> n127  [key=0, style=bold, color=blue];
n130 -> n131  [key=0, style=solid];
n131 -> n132  [key=0, style=solid];
n131 -> n24  [key=2, style=dotted];
n132 -> n130  [key=0, style=bold, color=blue];
n133 -> n134  [key=0, style=solid];
n134 -> n135  [key=0, style=solid];
n134 -> n20  [key=2, style=dotted];
n135 -> n133  [key=0, style=bold, color=blue];
n136 -> n137  [key=0, style=solid];
n137 -> n138  [key=0, style=solid];
n137 -> n24  [key=2, style=dotted];
n138 -> n136  [key=0, style=bold, color=blue];
n139 -> n140  [key=0, style=solid];
n140 -> n141  [key=0, style=solid];
n140 -> n20  [key=2, style=dotted];
n141 -> n139  [key=0, style=bold, color=blue];
n142 -> n143  [key=0, style=solid];
n143 -> n144  [key=0, style=solid];
n143 -> n24  [key=2, style=dotted];
n144 -> n142  [key=0, style=bold, color=blue];
n145 -> n146  [key=0, style=solid];
n146 -> n147  [key=0, style=solid];
n146 -> n20  [key=2, style=dotted];
n147 -> n145  [key=0, style=bold, color=blue];
n148 -> n149  [key=0, style=solid];
n149 -> n150  [key=0, style=solid];
n149 -> n24  [key=2, style=dotted];
n150 -> n148  [key=0, style=bold, color=blue];
n151 -> n152  [key=0, style=solid];
n152 -> n153  [key=0, style=solid];
n152 -> n20  [key=2, style=dotted];
n153 -> n151  [key=0, style=bold, color=blue];
n154 -> n155  [key=0, style=solid];
n155 -> n156  [key=0, style=solid];
n155 -> n24  [key=2, style=dotted];
n156 -> n154  [key=0, style=bold, color=blue];
n157 -> n158  [key=0, style=solid];
n158 -> n159  [key=0, style=solid];
n158 -> n20  [key=2, style=dotted];
n159 -> n157  [key=0, style=bold, color=blue];
n160 -> n161  [key=0, style=solid];
n161 -> n162  [key=0, style=solid];
n161 -> n24  [key=2, style=dotted];
n162 -> n160  [key=0, style=bold, color=blue];
n163 -> n164  [key=0, style=solid];
n164 -> n165  [key=0, style=solid];
n164 -> n20  [key=2, style=dotted];
n165 -> n163  [key=0, style=bold, color=blue];
n166 -> n167  [key=0, style=solid];
n167 -> n168  [key=0, style=solid];
n167 -> n24  [key=2, style=dotted];
n168 -> n166  [key=0, style=bold, color=blue];
n169 -> n170  [key=0, style=solid];
n170 -> n171  [key=0, style=solid];
n170 -> n20  [key=2, style=dotted];
n171 -> n169  [key=0, style=bold, color=blue];
n172 -> n173  [key=0, style=solid];
n173 -> n174  [key=0, style=solid];
n173 -> n24  [key=2, style=dotted];
n174 -> n172  [key=0, style=bold, color=blue];
n175 -> n176  [key=0, style=solid];
n176 -> n177  [key=0, style=solid];
n176 -> n20  [key=2, style=dotted];
n177 -> n175  [key=0, style=bold, color=blue];
n178 -> n179  [key=0, style=solid];
n179 -> n180  [key=0, style=solid];
n179 -> n24  [key=2, style=dotted];
n180 -> n178  [key=0, style=bold, color=blue];
n181 -> n182  [key=0, style=solid];
n182 -> n183  [key=0, style=solid];
n182 -> n20  [key=2, style=dotted];
n183 -> n181  [key=0, style=bold, color=blue];
n184 -> n185  [key=0, style=solid];
n185 -> n186  [key=0, style=solid];
n185 -> n24  [key=2, style=dotted];
n186 -> n184  [key=0, style=bold, color=blue];
n187 -> n188  [key=0, style=solid];
n187 -> n195  [key=1, style=dashed, color=darkseagreen4, label=type];
n190 -> n191  [key=0, style=solid];
n190 -> n193  [key=0, style=solid];
n192 -> n193  [key=0, style=solid];
n192 -> n201  [key=2, style=dotted];
n192 -> n202  [key=2, style=dotted];
n208 -> n209  [key=0, style=solid];
n208 -> n210  [key=2, style=dotted];
n193 -> n194  [key=0, style=solid];
n193 -> n203  [key=2, style=dotted];
n193 -> n202  [key=2, style=dotted];
n212 -> n213  [key=0, style=solid];
n212 -> n214  [key=2, style=dotted];
n188 -> n189  [key=0, style=solid];
n188 -> n198  [key=2, style=dotted];
n188 -> n195  [key=1, style=dashed, color=darkseagreen4, label=methodInfo];
n195 -> n196  [key=0, style=solid];
n195 -> n204  [key=2, style=dotted];
n195 -> n205  [key=2, style=dotted];
n189 -> n190  [key=0, style=solid];
n189 -> n199  [key=2, style=dotted];
n189 -> n192  [key=1, style=dashed, color=darkseagreen4, label=serializationMethods];
n189 -> n193  [key=1, style=dashed, color=darkseagreen4, label=serializationMethods];
n189 -> n194  [key=1, style=dashed, color=darkseagreen4, label=serializationMethods];
n194 -> n195  [key=0, style=solid];
n194 -> n197  [key=0, style=solid];
n191 -> n192  [key=0, style=solid];
n191 -> n200  [key=2, style=dotted];
n191 -> n208  [key=1, style=dashed, color=darkseagreen4, label=converter];
n197 -> n24  [key=0, style=bold, color=blue];
n196 -> n194  [key=0, style=solid];
n196 -> n206  [key=2, style=dotted];
n207 -> n208  [key=0, style=solid];
n209 -> n207  [key=0, style=bold, color=blue];
n211 -> n212  [key=0, style=solid];
n213 -> n211  [key=0, style=bold, color=blue];
d11 -> d12  [key=0, style=solid, color=green];
d10 -> d11  [key=0, style=solid, color=green];
d10 -> d13  [key=2, style=dotted];
d12 -> d9  [key=0, style=bold, color=blue];
d9 -> d10  [key=0, style=solid];
m0_29 -> m0_30  [key=0, style=solid, color=red];
m0_30 -> m0_31  [key=0, style=solid, color=red];
m0_30 -> m0_32  [key=2, style=dotted, color=red];
m0_30 -> m0_33  [key=2, style=dotted, color=red];
m0_31 -> m0_29  [key=0, style=bold, color=blue];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_38  [key=2, style=dotted];
m0_25 -> m0_22  [key=0, style=bold, color=blue];
m0_10 -> m0_11  [key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_15  [key=2, style=dotted];
m0_11 -> m0_5  [key=2, style=dotted];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_6  [key=2, style=dotted];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_7  [key=2, style=dotted];
m0_13 -> m0_8  [key=2, style=dotted];
m0_13 -> m0_9  [key=2, style=dotted];
m0_14 -> m0_10  [key=0, style=bold, color=blue];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_22  [key=2, style=dotted];
m0_37 -> m0_30  [key=0, style=bold, color=blue];
m0_65 -> m0_66  [key=0, style=solid];
m0_72 -> m0_41  [key=2, style=dotted];
m0_72 -> m0_73  [key=0, style=solid];
m0_71 -> m0_40  [key=2, style=dotted];
m0_71 -> m0_72  [key=0, style=solid];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_22  [key=2, style=dotted];
m0_76 -> m0_26  [key=2, style=dotted];
m0_76 -> m0_77  [key=0, style=solid];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_53  [key=2, style=dotted];
m0_68 -> m0_39  [key=2, style=dotted];
m0_68 -> m0_69  [key=0, style=solid];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_53  [key=2, style=dotted];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_38  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_53  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_53  [key=2, style=dotted];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_53  [key=2, style=dotted];
m0_77 -> m0_65  [key=0, style=bold, color=blue];
m0_34 -> m0_35  [key=0, style=solid, color=green];
m0_34 -> m0_40  [key=2, style=dotted];
m0_35 -> m0_36  [key=0, style=solid, color=green];
m0_35 -> m0_32  [key=2, style=dotted];
m0_35 -> m0_37  [key=2, style=dotted];
m0_35 -> m0_41  [key=2, style=dotted, color=green];
m0_36 -> m0_34  [key=0, style=bold, color=blue];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_26  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_78 -> m0_79  [key=0, style=solid];
m0_84 -> m0_41  [key=2, style=dotted];
m0_84 -> m0_85  [key=0, style=solid];
m0_83 -> m0_40  [key=2, style=dotted];
m0_83 -> m0_84  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_22  [key=2, style=dotted];
m0_88 -> m0_26  [key=2, style=dotted];
m0_88 -> m0_89  [key=0, style=solid];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_53  [key=2, style=dotted];
m0_81 -> m0_39  [key=2, style=dotted];
m0_81 -> m0_82  [key=0, style=solid];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_53  [key=2, style=dotted];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_38  [key=2, style=dotted];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_53  [key=2, style=dotted];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_53  [key=2, style=dotted];
m0_89 -> m0_78  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=2, style=dotted];
m0_28 -> m0_26  [key=0, style=bold, color=blue];
m0_22 -> m0_31  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_43  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m0_22 -> m0_55  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m0_22 -> m0_66  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m0_22 -> m0_79  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m0_22 -> m0_91  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m0_22 -> m0_102  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m0_22 -> m0_114  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m0_22 -> m0_123  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m0_22 -> m0_133  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=2, style=dotted];
m0_23 -> m0_26  [key=2, style=dotted];
m0_23 -> m0_27  [key=2, style=dotted];
m0_24 -> m0_22  [key=0, style=bold, color=blue];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_28  [key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_39  [key=2, style=dotted];
m0_90 -> m0_91  [key=0, style=solid];
m0_97 -> m0_41  [key=2, style=dotted];
m0_97 -> m0_98  [key=0, style=solid];
m0_96 -> m0_40  [key=2, style=dotted];
m0_96 -> m0_97  [key=0, style=solid];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_22  [key=2, style=dotted];
m0_99 -> m0_26  [key=2, style=dotted];
m0_99 -> m0_100  [key=0, style=solid];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_53  [key=2, style=dotted];
m0_93 -> m0_39  [key=2, style=dotted];
m0_93 -> m0_94  [key=0, style=solid];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_53  [key=2, style=dotted];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_38  [key=2, style=dotted];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_53  [key=2, style=dotted];
m0_100 -> m0_90  [key=0, style=bold, color=blue];
m0_38 -> m0_39  [key=0, style=solid];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_41  [key=2, style=dotted];
m0_40 -> m0_38  [key=0, style=bold, color=blue];
m0_113 -> m0_114  [key=0, style=solid];
m0_119 -> m0_41  [key=2, style=dotted];
m0_119 -> m0_120  [key=0, style=solid];
m0_118 -> m0_40  [key=2, style=dotted];
m0_118 -> m0_119  [key=0, style=solid];
m0_115 -> m0_116  [key=0, style=solid];
m0_115 -> m0_22  [key=2, style=dotted];
m0_120 -> m0_26  [key=2, style=dotted];
m0_120 -> m0_121  [key=0, style=solid];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_53  [key=2, style=dotted];
m0_114 -> m0_115  [key=0, style=solid];
m0_114 -> m0_38  [key=2, style=dotted];
m0_116 -> m0_117  [key=0, style=solid];
m0_116 -> m0_53  [key=2, style=dotted];
m0_121 -> m0_113  [key=0, style=bold, color=blue];
m0_122 -> m0_123  [key=0, style=solid];
m0_128 -> m0_41  [key=2, style=dotted];
m0_128 -> m0_129  [key=0, style=solid];
m0_127 -> m0_40  [key=2, style=dotted];
m0_127 -> m0_128  [key=0, style=solid];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_22  [key=2, style=dotted];
m0_130 -> m0_26  [key=2, style=dotted];
m0_130 -> m0_131  [key=0, style=solid];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_53  [key=2, style=dotted];
m0_125 -> m0_39  [key=2, style=dotted];
m0_125 -> m0_126  [key=0, style=solid];
m0_126 -> m0_127  [key=0, style=solid];
m0_126 -> m0_53  [key=2, style=dotted];
m0_123 -> m0_124  [key=0, style=solid];
m0_123 -> m0_38  [key=2, style=dotted];
m0_131 -> m0_122  [key=0, style=bold, color=blue];
m0_101 -> m0_102  [key=0, style=solid];
m0_108 -> m0_41  [key=2, style=dotted];
m0_108 -> m0_109  [key=0, style=solid];
m0_107 -> m0_40  [key=2, style=dotted];
m0_107 -> m0_108  [key=0, style=solid];
m0_103 -> m0_104  [key=0, style=solid];
m0_103 -> m0_22  [key=2, style=dotted];
m0_110 -> m0_26  [key=2, style=dotted];
m0_110 -> m0_111  [key=0, style=solid];
m0_109 -> m0_110  [key=0, style=solid];
m0_109 -> m0_112  [key=2, style=dotted];
m0_104 -> m0_39  [key=2, style=dotted];
m0_104 -> m0_105  [key=0, style=solid];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_53  [key=2, style=dotted];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_38  [key=2, style=dotted];
m0_105 -> m0_106  [key=0, style=solid];
m0_105 -> m0_53  [key=2, style=dotted];
m0_111 -> m0_101  [key=0, style=bold, color=blue];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerSteps"];
m0_42 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.SchedulePollerSteps"];
m0_48 -> m0_41  [key=2, style=dotted];
m0_48 -> m0_49  [key=0, style=solid];
m0_47 -> m0_40  [key=2, style=dotted];
m0_47 -> m0_48  [key=0, style=solid];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_22  [key=2, style=dotted];
m0_51 -> m0_26  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_53  [key=2, style=dotted];
m0_45 -> m0_39  [key=2, style=dotted];
m0_45 -> m0_46  [key=0, style=solid];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_53  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_38  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_53  [key=2, style=dotted];
m0_52 -> m0_42  [key=0, style=bold, color=blue];
m0_54 -> m0_55  [key=0, style=solid];
m0_60 -> m0_41  [key=2, style=dotted];
m0_60 -> m0_61  [key=0, style=solid];
m0_59 -> m0_40  [key=2, style=dotted];
m0_59 -> m0_60  [key=0, style=solid];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_22  [key=2, style=dotted];
m0_63 -> m0_26  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_53  [key=2, style=dotted];
m0_57 -> m0_39  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_53  [key=2, style=dotted];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_38  [key=2, style=dotted];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_53  [key=2, style=dotted];
m0_64 -> m0_54  [key=0, style=bold, color=blue];
m0_16 -> m0_17  [key=0, style=solid];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_5  [key=2, style=dotted];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_6  [key=2, style=dotted];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_21  [key=2, style=dotted];
m0_19 -> m0_8  [key=2, style=dotted];
m0_19 -> m0_9  [key=2, style=dotted];
m0_20 -> m0_16  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_6  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_7  [key=2, style=dotted];
m0_3 -> m0_8  [key=2, style=dotted];
m0_3 -> m0_9  [key=2, style=dotted];
m0_4 -> m0_0  [key=0, style=bold, color=blue];
m0_132 -> m0_133  [key=0, style=solid];
m0_139 -> m0_41  [key=2, style=dotted];
m0_139 -> m0_140  [key=0, style=solid];
m0_138 -> m0_40  [key=2, style=dotted];
m0_138 -> m0_139  [key=0, style=solid];
m0_134 -> m0_135  [key=0, style=solid];
m0_134 -> m0_22  [key=2, style=dotted];
m0_141 -> m0_26  [key=2, style=dotted];
m0_141 -> m0_142  [key=0, style=solid];
m0_140 -> m0_141  [key=0, style=solid];
m0_140 -> m0_112  [key=2, style=dotted];
m0_135 -> m0_39  [key=2, style=dotted];
m0_135 -> m0_136  [key=0, style=solid];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_53  [key=2, style=dotted];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_38  [key=2, style=dotted];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_53  [key=2, style=dotted];
m0_142 -> m0_132  [key=0, style=bold, color=blue];
m0_143 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_63  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_67  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_80  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_88  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_99  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_103  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_115  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_120  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_124  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_130  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_134  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m0_143 -> m0_141  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature"];
m2_20 -> m2_21  [key=0, style=solid];
m2_191 -> m2_192  [key=0, style=solid];
m2_192 -> m2_193  [key=0, style=solid];
m2_192 -> m2_195  [key=2, style=dotted];
m2_193 -> m2_196  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_193 -> m2_194  [key=0, style=solid];
m2_193 -> m2_24  [key=2, style=dotted];
m2_194 -> m2_191  [key=0, style=bold, color=blue];
m2_153 -> m2_154  [key=0, style=solid];
m2_154 -> m2_152  [key=2, style=dotted];
m2_154 -> m2_155  [key=0, style=solid];
m2_155 -> m2_156  [key=0, style=solid];
m2_155 -> m2_24  [key=2, style=dotted];
m2_155 -> m2_157  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_156 -> m2_153  [key=0, style=bold, color=blue];
m2_5 -> m2_0  [key=0, style=bold, color=blue];
m2_32 -> m2_10  [key=2, style=dotted];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_160 -> m2_161  [key=0, style=solid];
m2_161 -> m2_10  [key=2, style=dotted];
m2_161 -> m2_162  [key=0, style=solid];
m2_161 -> m2_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_162 -> n20  [key=2, style=dotted];
m2_162 -> m2_163  [key=0, style=solid];
m2_163 -> m2_160  [key=0, style=bold, color=blue];
m2_4 -> m2_5  [key=0, style=solid, color=red];
m2_4 -> m2_10  [key=2, style=dotted, color=red];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_10  [key=2, style=dotted];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_8 -> n20  [key=2, style=dotted];
m2_8 -> m2_9  [key=0, style=solid];
m2_9 -> m2_6  [key=0, style=bold, color=blue];
m2_19 -> m2_206  [key=0, style=solid];
m2_52 -> m2_53  [key=0, style=solid, color=green];
m2_53 -> m2_54  [key=0, style=solid, color=green];
m2_53 -> m2_10  [key=2, style=dotted, color=green];
m2_53 -> m2_56  [key=1, style=dashed, color=green, label="lambda expression"];
m2_54 -> m2_55  [key=0, style=solid];
m2_54 -> n20  [key=2, style=dotted];
m2_55 -> m2_52  [key=0, style=bold, color=blue];
m2_199 -> m2_200  [key=0, style=solid];
m2_200 -> m2_201  [key=0, style=solid];
m2_200 -> m2_195  [key=2, style=dotted];
m2_201 -> m2_203  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_201 -> m2_202  [key=0, style=solid];
m2_201 -> m2_24  [key=2, style=dotted];
m2_202 -> m2_199  [key=0, style=bold, color=blue];
m2_74 -> m2_75  [key=0, style=solid];
m2_75 -> m2_10  [key=2, style=dotted];
m2_75 -> m2_76  [key=0, style=solid];
m2_75 -> m2_78  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_76 -> n20  [key=2, style=dotted];
m2_76 -> m2_77  [key=0, style=solid];
m2_77 -> m2_74  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_4  [key=2, style=dotted];
m2_1 -> m2_6  [key=2, style=dotted];
m2_1 -> m2_7  [key=2, style=dotted];
m2_1 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_5  [key=2, style=dotted];
m2_2 -> m2_8  [key=2, style=dotted];
m2_3 -> m2_0  [key=0, style=bold, color=blue];
m2_3 -> m2_4  [key=0, style=solid, color=red];
m2_3 -> m2_9  [key=2, style=dotted];
m2_21 -> m2_15  [key=2, style=dotted];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_22 -> m2_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> m2_24  [key=2, style=dotted];
m2_22 -> m2_19  [key=2, style=dotted];
m2_23 -> m2_20  [key=0, style=bold, color=blue];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_26  [key=2, style=dotted];
m2_33 -> m2_54  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Server.ServerHeartbeat server"];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> n20  [key=2, style=dotted];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_27  [key=0, style=bold, color=blue];
m2_34 -> m2_31  [key=0, style=bold, color=blue];
m2_34 -> m2_35  [key=0, style=solid];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_25  [key=0, style=bold, color=blue];
m2_28 -> m2_29  [key=0, style=solid];
m2_28 -> m2_19  [key=2, style=dotted];
m2_28 -> m2_30  [key=1, style=dashed, color=darkseagreen4, label=filter];
m2_28 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label=filter];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_10  [key=2, style=dotted];
m2_29 -> m2_32  [key=2, style=dotted];
m2_29 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label=context];
m2_29 -> m2_15  [key=2, style=dotted];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_33  [key=2, style=dotted];
m2_30 -> m2_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_30 -> m2_28  [key=0, style=bold, color=blue];
m2_63 -> m2_64  [key=0, style=solid];
m2_64 -> m2_65  [key=0, style=solid];
m2_64 -> m2_67  [key=2, style=dotted];
m2_64 -> m2_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_65 -> m2_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_65 -> m2_66  [key=0, style=solid];
m2_65 -> m2_24  [key=2, style=dotted];
m2_66 -> m2_63  [key=0, style=bold, color=blue];
m2_107 -> m2_108  [key=0, style=solid];
m2_108 -> m2_102  [key=2, style=dotted];
m2_108 -> m2_109  [key=0, style=solid];
m2_108 -> m2_111  [key=2, style=dotted];
m2_108 -> m2_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_109 -> m2_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_109 -> m2_110  [key=0, style=solid];
m2_109 -> m2_24  [key=2, style=dotted];
m2_110 -> m2_107  [key=0, style=bold, color=blue];
m2_95 -> m2_96  [key=0, style=solid];
m2_96 -> m2_10  [key=2, style=dotted];
m2_96 -> m2_97  [key=0, style=solid];
m2_96 -> m2_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_97 -> n20  [key=2, style=dotted];
m2_97 -> m2_98  [key=0, style=solid];
m2_98 -> m2_95  [key=0, style=bold, color=blue];
m2_41 -> m2_207  [key=0, style=solid];
m2_207 -> m2_41  [key=0, style=bold, color=blue];
m2_176 -> m2_177  [key=0, style=solid];
m2_177 -> m2_178  [key=0, style=solid];
m2_177 -> m2_172  [key=2, style=dotted];
m2_178 -> m2_180  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_178 -> m2_179  [key=0, style=solid];
m2_178 -> m2_24  [key=2, style=dotted];
m2_179 -> m2_176  [key=0, style=bold, color=blue];
m2_206 -> m2_19  [key=0, style=bold, color=blue];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_20  [key=2, style=dotted];
m2_25 -> m2_21  [key=0, style=bold, color=blue];
m2_25 -> m2_26  [key=0, style=solid];
m2_26 -> m2_19  [key=2, style=dotted];
m2_26 -> m2_27  [key=0, style=solid];
m2_132 -> m2_133  [key=0, style=solid];
m2_133 -> m2_10  [key=2, style=dotted];
m2_133 -> m2_134  [key=0, style=solid];
m2_133 -> m2_102  [key=2, style=dotted];
m2_133 -> m2_136  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_134 -> m2_135  [key=0, style=solid];
m2_134 -> m2_24  [key=2, style=dotted];
m2_134 -> m2_139  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_135 -> m2_132  [key=0, style=bold, color=blue];
m2_168 -> m2_169  [key=0, style=solid];
m2_169 -> m2_170  [key=0, style=solid];
m2_169 -> m2_172  [key=2, style=dotted];
m2_170 -> m2_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_170 -> m2_171  [key=0, style=solid];
m2_170 -> m2_24  [key=2, style=dotted];
m2_171 -> m2_168  [key=0, style=bold, color=blue];
m2_14 -> m2_37  [key=0, style=solid];
m2_14 -> m2_12  [key=0, style=bold, color=blue];
m2_37 -> m2_14  [key=0, style=bold, color=blue];
m2_37 -> m2_35  [key=0, style=bold, color=blue];
m2_85 -> m2_86  [key=0, style=solid];
m2_86 -> m2_10  [key=2, style=dotted];
m2_86 -> m2_87  [key=0, style=solid];
m2_86 -> m2_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_87 -> m2_88  [key=0, style=solid];
m2_87 -> m2_24  [key=2, style=dotted];
m2_87 -> m2_92  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_88 -> m2_85  [key=0, style=bold, color=blue];
m2_129 -> m2_130  [key=0, style=solid];
m2_11 -> m2_12  [key=0, style=solid];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_14  [key=2, style=dotted];
m2_13 -> m2_11  [key=0, style=bold, color=blue];
m2_13 -> m2_15  [key=2, style=dotted];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_26  [key=2, style=dotted];
m2_36 -> m2_34  [key=0, style=bold, color=blue];
m2_36 -> m2_10  [key=2, style=dotted];
m2_36 -> m2_37  [key=0, style=solid];
m2_36 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_56 -> m2_57  [key=0, style=solid];
m2_50 -> m2_10  [key=2, style=dotted];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_15  [key=2, style=dotted];
m2_72 -> m2_10  [key=2, style=dotted];
m2_72 -> m2_73  [key=0, style=solid];
m2_72 -> m2_15  [key=2, style=dotted];
m2_93 -> m2_10  [key=2, style=dotted];
m2_93 -> m2_94  [key=0, style=solid];
m2_93 -> m2_15  [key=2, style=dotted];
m2_116 -> m2_10  [key=2, style=dotted];
m2_116 -> m2_117  [key=0, style=solid];
m2_116 -> m2_15  [key=2, style=dotted];
m2_116 -> m2_118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_140 -> m2_10  [key=2, style=dotted];
m2_140 -> m2_141  [key=0, style=solid];
m2_140 -> m2_15  [key=2, style=dotted];
m2_140 -> m2_142  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_174 -> m2_10  [key=2, style=dotted];
m2_174 -> m2_175  [key=0, style=solid];
m2_174 -> m2_152  [key=2, style=dotted];
m2_181 -> m2_10  [key=2, style=dotted];
m2_181 -> m2_182  [key=0, style=solid];
m2_181 -> m2_152  [key=2, style=dotted];
m2_197 -> m2_10  [key=2, style=dotted];
m2_197 -> m2_198  [key=0, style=solid];
m2_197 -> m2_152  [key=2, style=dotted];
m2_204 -> m2_10  [key=2, style=dotted];
m2_204 -> m2_205  [key=0, style=solid];
m2_204 -> m2_152  [key=2, style=dotted];
m2_58 -> m2_56  [key=0, style=bold, color=blue];
m2_57 -> m2_58  [key=0, style=solid];
m2_57 -> m2_59  [key=2, style=dotted];
m2_57 -> m2_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_38 -> m2_39  [key=0, style=solid];
m2_38 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.QueueAttributeFacts"];
m2_38 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.QueueAttributeFacts"];
m2_38 -> m2_4  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.QueueAttributeFacts"];
m2_38 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.QueueAttributeFacts"];
m2_38 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.QueueAttributeFacts"];
m2_38 -> m2_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.QueueAttributeFacts"];
m2_46 -> m2_47  [key=0, style=solid];
m2_49 -> m2_50  [key=0, style=solid];
m2_51 -> m2_49  [key=0, style=bold, color=blue];
m2_71 -> m2_72  [key=0, style=solid];
m2_73 -> m2_71  [key=0, style=bold, color=blue];
m2_78 -> m2_79  [key=0, style=solid];
m2_89 -> m2_90  [key=0, style=solid];
m2_92 -> m2_93  [key=0, style=solid];
m2_94 -> m2_92  [key=0, style=bold, color=blue];
m2_99 -> m2_100  [key=0, style=solid];
m2_115 -> m2_116  [key=0, style=solid];
m2_117 -> m2_115  [key=0, style=bold, color=blue];
m2_118 -> m2_119  [key=0, style=solid];
m2_125 -> m2_126  [key=0, style=solid];
m2_136 -> m2_137  [key=0, style=solid];
m2_139 -> m2_140  [key=0, style=solid];
m2_141 -> m2_139  [key=0, style=bold, color=blue];
m2_142 -> m2_143  [key=0, style=solid];
m2_149 -> m2_150  [key=0, style=solid];
m2_164 -> m2_165  [key=0, style=solid];
m2_173 -> m2_174  [key=0, style=solid];
m2_175 -> m2_173  [key=0, style=bold, color=blue];
m2_180 -> m2_181  [key=0, style=solid];
m2_182 -> m2_180  [key=0, style=bold, color=blue];
m2_187 -> m2_188  [key=0, style=solid];
m2_196 -> m2_197  [key=0, style=solid];
m2_198 -> m2_196  [key=0, style=bold, color=blue];
m2_203 -> m2_204  [key=0, style=solid];
m2_205 -> m2_203  [key=0, style=bold, color=blue];
m2_60 -> m2_61  [key=0, style=solid];
m2_150 -> m2_152  [key=2, style=dotted];
m2_150 -> m2_151  [key=0, style=solid];
m2_158 -> m2_152  [key=2, style=dotted];
m2_158 -> m2_159  [key=0, style=solid];
m2_40 -> m2_38  [key=0, style=bold, color=blue];
m2_40 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label=context];
m2_39 -> m2_40  [key=0, style=solid];
m2_39 -> m2_41  [key=2, style=dotted];
m2_39 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label=filter];
m2_48 -> m2_46  [key=0, style=bold, color=blue];
m2_47 -> m2_48  [key=0, style=solid];
m2_47 -> m2_41  [key=2, style=dotted];
m2_80 -> m2_78  [key=0, style=bold, color=blue];
m2_79 -> m2_80  [key=0, style=solid];
m2_79 -> m2_81  [key=2, style=dotted];
m2_79 -> m2_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_91 -> m2_89  [key=0, style=bold, color=blue];
m2_90 -> m2_91  [key=0, style=solid];
m2_90 -> m2_41  [key=2, style=dotted];
m2_101 -> m2_99  [key=0, style=bold, color=blue];
m2_100 -> m2_102  [key=2, style=dotted];
m2_100 -> m2_101  [key=0, style=solid];
m2_100 -> m2_103  [key=2, style=dotted];
m2_100 -> m2_104  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_120 -> m2_118  [key=0, style=bold, color=blue];
m2_119 -> m2_120  [key=0, style=solid];
m2_127 -> m2_125  [key=0, style=bold, color=blue];
m2_126 -> m2_102  [key=2, style=dotted];
m2_126 -> m2_127  [key=0, style=solid];
m2_126 -> m2_128  [key=2, style=dotted];
m2_126 -> m2_129  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_138 -> m2_136  [key=0, style=bold, color=blue];
m2_137 -> m2_138  [key=0, style=solid];
m2_137 -> m2_41  [key=2, style=dotted];
m2_144 -> m2_142  [key=0, style=bold, color=blue];
m2_143 -> m2_144  [key=0, style=solid];
m2_151 -> m2_149  [key=0, style=bold, color=blue];
m2_166 -> m2_164  [key=0, style=bold, color=blue];
m2_165 -> m2_166  [key=0, style=solid];
m2_165 -> m2_167  [key=2, style=dotted];
m2_189 -> m2_187  [key=0, style=bold, color=blue];
m2_188 -> m2_189  [key=0, style=solid];
m2_188 -> m2_190  [key=2, style=dotted];
m2_62 -> m2_60  [key=0, style=bold, color=blue];
m2_61 -> m2_62  [key=0, style=solid];
m2_61 -> m2_19  [key=2, style=dotted];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_19  [key=2, style=dotted];
m2_68 -> m2_69  [key=0, style=solid];
m2_112 -> m2_113  [key=0, style=solid];
m2_157 -> m2_158  [key=0, style=solid];
m2_159 -> m2_157  [key=0, style=bold, color=blue];
m2_82 -> m2_83  [key=0, style=solid];
m2_104 -> m2_105  [key=0, style=solid];
m2_18 -> m2_16  [key=0, style=bold, color=blue];
m2_18 -> m2_15  [key=0, style=bold, color=blue];
m2_17 -> m2_19  [key=2, style=dotted];
m2_17 -> m2_18  [key=0, style=solid];
m2_17 -> m2_20  [key=2, style=dotted];
m2_70 -> m2_68  [key=0, style=bold, color=blue];
m2_69 -> m2_19  [key=2, style=dotted];
m2_69 -> m2_70  [key=0, style=solid];
m2_114 -> m2_112  [key=0, style=bold, color=blue];
m2_113 -> m2_19  [key=2, style=dotted];
m2_113 -> m2_114  [key=0, style=solid];
m2_83 -> m2_41  [key=2, style=dotted];
m2_83 -> m2_84  [key=0, style=solid];
m2_130 -> m2_41  [key=2, style=dotted];
m2_130 -> m2_131  [key=0, style=solid];
m2_84 -> m2_82  [key=0, style=bold, color=blue];
m2_106 -> m2_104  [key=0, style=bold, color=blue];
m2_105 -> m2_19  [key=2, style=dotted];
m2_105 -> m2_106  [key=0, style=solid];
m2_131 -> m2_129  [key=0, style=bold, color=blue];
m2_15 -> m2_16  [key=0, style=solid];
m2_42 -> m2_43  [key=0, style=solid];
m2_43 -> m2_10  [key=2, style=dotted];
m2_43 -> m2_44  [key=0, style=solid];
m2_43 -> m2_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_44 -> m2_45  [key=0, style=solid];
m2_44 -> m2_24  [key=2, style=dotted];
m2_44 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_45 -> m2_42  [key=0, style=bold, color=blue];
m2_145 -> m2_146  [key=0, style=solid];
m2_146 -> m2_10  [key=2, style=dotted];
m2_146 -> m2_147  [key=0, style=solid];
m2_146 -> m2_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_147 -> n20  [key=2, style=dotted];
m2_147 -> m2_148  [key=0, style=solid];
m2_148 -> m2_145  [key=0, style=bold, color=blue];
m2_121 -> m2_122  [key=0, style=solid];
m2_122 -> m2_10  [key=2, style=dotted];
m2_122 -> m2_123  [key=0, style=solid];
m2_122 -> m2_125  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_123 -> n20  [key=2, style=dotted];
m2_123 -> m2_124  [key=0, style=solid];
m2_124 -> m2_121  [key=0, style=bold, color=blue];
m2_183 -> m2_184  [key=0, style=solid];
m2_184 -> m2_10  [key=2, style=dotted];
m2_184 -> m2_185  [key=0, style=solid];
m2_184 -> m2_187  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_185 -> n20  [key=2, style=dotted];
m2_185 -> m2_186  [key=0, style=solid];
m2_186 -> m2_183  [key=0, style=bold, color=blue];
m2_208 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_36  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_86  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_133  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_146  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_22  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_44  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_64  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_65  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_87  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_108  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_109  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_134  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_150  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_154  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_155  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_158  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_169  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_170  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_177  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_178  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_192  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_193  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_200  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m2_208 -> m2_201  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m3_117 -> m3_118  [key=0, style=solid];
m3_117 -> m3_120  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerContext"];
m3_117 -> m3_122  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerContext"];
m3_117 -> m3_123  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_118 -> m3_119  [key=0, style=solid];
m3_118 -> m3_120  [key=0, style=solid];
m3_120 -> m3_121  [key=0, style=solid];
m3_120 -> m3_122  [key=0, style=solid];
m3_122 -> m3_123  [key=0, style=solid];
m3_122 -> m3_125  [key=2, style=dotted];
m3_123 -> m3_124  [key=0, style=solid];
m3_123 -> m3_60  [key=2, style=dotted];
m3_123 -> m3_65  [key=2, style=dotted];
m3_119 -> m3_124  [key=0, style=solid];
m3_119 -> m3_8  [key=2, style=dotted];
m3_121 -> m3_124  [key=0, style=solid];
m3_121 -> m3_8  [key=2, style=dotted];
m3_124 -> m3_117  [key=0, style=bold, color=blue];
m3_10 -> m3_11  [key=0, style=solid];
m3_10 -> m3_12  [key=2, style=dotted];
m3_102 -> m3_103  [key=0, style=solid];
m3_102 -> m3_105  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_102 -> m3_107  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_103 -> m3_104  [key=0, style=solid];
m3_103 -> m3_105  [key=0, style=solid];
m3_105 -> m3_106  [key=0, style=solid];
m3_105 -> m3_107  [key=0, style=solid];
m3_107 -> m3_108  [key=0, style=solid];
m3_107 -> m3_62  [key=2, style=dotted];
m3_107 -> m3_82  [key=2, style=dotted];
m3_104 -> m3_108  [key=0, style=solid];
m3_104 -> m3_8  [key=2, style=dotted];
m3_106 -> m3_108  [key=0, style=solid];
m3_106 -> m3_8  [key=2, style=dotted];
m3_108 -> m3_102  [key=0, style=bold, color=blue];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_47  [key=0, style=solid];
m3_85 -> m3_86  [key=0, style=solid];
m3_85 -> m3_89  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_85 -> m3_83  [key=0, style=bold, color=blue];
m3_86 -> m3_87  [key=0, style=solid];
m3_86 -> m3_88  [key=0, style=solid];
m3_86 -> m3_48  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_50  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_63  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_65  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_75  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_77  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_86 -> m3_76  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.WorkerManagerFacts"];
m3_89 -> m3_90  [key=0, style=solid];
m3_89 -> m3_62  [key=2, style=dotted];
m3_89 -> m3_82  [key=2, style=dotted];
m3_89 -> m3_92  [key=1, style=dashed, color=darkseagreen4, label=sqlState];
m3_87 -> m3_93  [key=0, style=solid];
m3_87 -> m3_8  [key=2, style=dotted];
m3_88 -> m3_89  [key=0, style=solid];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_92  [key=0, style=solid];
m3_92 -> m3_93  [key=0, style=solid];
m3_92 -> m3_94  [key=2, style=dotted];
m3_92 -> m3_62  [key=2, style=dotted];
m3_91 -> m3_93  [key=0, style=solid];
m3_93 -> m3_85  [key=0, style=bold, color=blue];
m3_47 -> m3_48  [key=0, style=solid, color=green];
m3_47 -> m3_49  [key=1, style=dashed, color=darkseagreen4, label=createJobSql];
m3_48 -> m3_49  [key=0, style=solid, color=green];
m3_48 -> m3_52  [key=2, style=dotted, color=green];
m3_48 -> m3_65  [key=2, style=dotted, color=green];
m3_48 -> m3_59  [key=2, style=dotted];
m3_49 -> m3_50  [key=0, style=solid, color=green];
m3_49 -> m3_54  [key=2, style=dotted];
m3_49 -> m3_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_49 -> m3_60  [key=2, style=dotted];
m3_49 -> m3_61  [key=2, style=dotted];
m3_49 -> m3_62  [key=2, style=dotted];
m3_49 -> m3_63  [key=2, style=dotted];
m3_49 -> m3_64  [key=2, style=dotted];
m3_49 -> m3_57  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m3_50 -> m3_51  [key=0, style=solid, color=green];
m3_50 -> m3_54  [key=2, style=dotted, color=green];
m3_50 -> m3_59  [key=1, style=dashed, color=green, label="lambda expression"];
m3_50 -> m3_57  [key=0, style=solid];
m3_51 -> m3_47  [key=0, style=bold, color=blue];
m3_51 -> m3_52  [key=0, style=solid];
m3_51 -> m3_54  [key=1, style=dashed, color=darkseagreen4, label=parameterArray];
m3_51 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label=parameterArray];
m3_70 -> m3_71  [key=0, style=solid];
m3_70 -> m3_62  [key=2, style=dotted];
m3_70 -> m3_82  [key=2, style=dotted];
m3_70 -> m3_73  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m3_70 -> m3_74  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m3_70 -> m3_80  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m3_21 -> m3_22  [key=0, style=solid];
m3_74 -> m3_75  [key=0, style=solid, color=green];
m3_75 -> m3_76  [key=0, style=solid, color=green];
m3_75 -> m3_52  [key=2, style=dotted, color=green];
m3_75 -> m3_65  [key=2, style=dotted, color=green];
m3_76 -> m3_77  [key=0, style=solid, color=green];
m3_76 -> m3_54  [key=2, style=dotted];
m3_76 -> m3_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_77 -> m3_78  [key=0, style=solid, color=green];
m3_77 -> m3_54  [key=2, style=dotted, color=green];
m3_77 -> m3_83  [key=1, style=dashed, color=green, label="lambda expression"];
m3_77 -> m3_80  [key=0, style=solid];
m3_78 -> m3_74  [key=0, style=bold, color=blue];
m3_78 -> m3_79  [key=0, style=solid];
m3_17 -> m3_18  [key=0, style=solid];
m3_18 -> m3_19  [key=0, style=solid];
m3_18 -> m3_20  [key=2, style=dotted];
m3_18 -> m3_21  [key=2, style=dotted];
m3_19 -> m3_17  [key=0, style=bold, color=blue];
m3_11 -> m3_9  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.PersistentJobQueueProviderCollection"];
m3_0 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m3_0 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.PersistentJobQueueProviderCollection"];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_6  [key=2, style=dotted];
m3_1 -> m3_7  [key=2, style=dotted];
m3_1 -> m3_8  [key=2, style=dotted];
m3_1 -> m3_9  [key=2, style=dotted];
m3_1 -> m3_10  [key=2, style=dotted];
m3_1 -> m3_3  [key=0, style=solid];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_11  [key=2, style=dotted];
m3_2 -> m3_7  [key=0, style=solid];
m3_2 -> m3_8  [key=2, style=dotted];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_12  [key=2, style=dotted];
m3_3 -> m3_5  [key=0, style=solid];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_13  [key=2, style=dotted];
m3_4 -> m3_14  [key=2, style=dotted];
m3_4 -> m3_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_4 -> m3_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_4 -> m3_7  [key=0, style=solid];
m3_4 -> m3_8  [key=2, style=dotted];
m3_5 -> m3_0  [key=0, style=bold, color=blue];
m3_5 -> m3_6  [key=0, style=solid];
m3_62 -> m3_63  [key=0, style=solid, color=green];
m3_66 -> m3_67  [key=0, style=solid];
m3_66 -> m3_70  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_66 -> m3_62  [key=0, style=bold, color=blue];
m3_67 -> m3_68  [key=0, style=solid];
m3_67 -> m3_69  [key=0, style=solid];
m3_68 -> m3_81  [key=0, style=solid];
m3_68 -> m3_8  [key=2, style=dotted];
m3_68 -> m3_70  [key=2, style=dotted];
m3_68 -> m3_69  [key=0, style=solid];
m3_69 -> m3_70  [key=0, style=solid];
m3_69 -> m3_67  [key=0, style=bold, color=blue];
m3_71 -> m3_72  [key=0, style=solid, color=green];
m3_71 -> m3_73  [key=0, style=solid];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_62  [key=2, style=dotted];
m3_73 -> m3_77  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m3_73 -> m3_71  [key=0, style=bold, color=blue];
m3_80 -> m3_81  [key=0, style=solid];
m3_80 -> m3_84  [key=2, style=dotted];
m3_80 -> m3_82  [key=2, style=dotted];
m3_72 -> m3_81  [key=0, style=solid];
m3_72 -> m3_73  [key=0, style=solid, color=green];
m3_72 -> m3_70  [key=2, style=dotted, color=green];
m3_79 -> m3_80  [key=0, style=solid];
m3_81 -> m3_66  [key=0, style=bold, color=blue];
m3_81 -> m3_79  [key=0, style=bold, color=blue];
m3_23 -> m3_24  [key=0, style=solid];
m3_23 -> m3_25  [key=0, style=solid, color=red];
m3_24 -> m3_18  [key=2, style=dotted];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_24 -> m3_30  [key=0, style=solid];
m3_24 -> m3_8  [key=2, style=dotted];
m3_25 -> m3_23  [key=0, style=bold, color=blue];
m3_25 -> m3_26  [key=0, style=solid, color=red];
m3_25 -> m3_31  [key=2, style=dotted, color=red];
m3_25 -> m3_32  [key=2, style=dotted, color=red];
m3_25 -> m3_33  [key=2, style=dotted, color=red];
m3_25 -> m3_38  [key=1, style=dashed, color=red, label="lambda expression"];
m3_25 -> m3_28  [key=1, style=dashed, color=red, label=providers];
m3_13 -> m3_14  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_16  [key=2, style=dotted];
m3_15 -> m3_13  [key=0, style=bold, color=blue];
m3_16 -> m3_18  [key=2, style=dotted];
m3_16 -> m3_40  [key=0, style=solid];
m3_16 -> m3_19  [key=2, style=dotted];
m3_35 -> m3_36  [key=0, style=solid];
m3_33 -> m3_30  [key=0, style=bold, color=blue];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_22  [key=0, style=bold, color=blue];
m3_31 -> m3_32  [key=0, style=solid];
m3_31 -> m3_18  [key=2, style=dotted];
m3_31 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_32 -> m3_33  [key=0, style=solid];
m3_32 -> n20  [key=2, style=dotted];
m3_20 -> m3_21  [key=0, style=solid];
m3_64 -> m3_65  [key=0, style=solid, color=green];
m3_64 -> m3_54  [key=2, style=dotted];
m3_64 -> m3_67  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_61 -> m3_59  [key=0, style=bold, color=blue];
m3_46 -> m3_58  [key=0, style=solid];
m3_46 -> m3_8  [key=2, style=dotted];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_25  [key=1, style=dashed, color=red, label="string[]"];
m3_22 -> m3_27  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m3_22 -> m3_29  [key=1, style=dashed, color=red, label="string[]"];
m3_22 -> m3_20  [key=0, style=bold, color=blue];
m3_27 -> m3_30  [key=0, style=solid];
m3_27 -> m3_34  [key=2, style=dotted];
m3_27 -> m3_35  [key=2, style=dotted];
m3_27 -> m3_21  [key=2, style=dotted];
m3_27 -> m3_29  [key=2, style=dotted];
m3_27 -> m3_28  [key=0, style=solid];
m3_29 -> m3_30  [key=0, style=solid, color=red];
m3_29 -> m3_37  [key=2, style=dotted, color=red];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_28  [key=0, style=solid];
m3_28 -> m3_29  [key=0, style=solid, color=red];
m3_28 -> m3_36  [key=2, style=dotted];
m3_28 -> m3_26  [key=0, style=bold, color=blue];
m3_44 -> m3_58  [key=0, style=solid, color=red];
m3_44 -> m3_8  [key=2, style=dotted, color=red];
m3_136 -> m3_137  [key=0, style=solid];
m3_137 -> m3_138  [key=0, style=solid];
m3_137 -> m3_139  [key=0, style=solid];
m3_137 -> m3_141  [key=2, style=dotted];
m3_137 -> m3_137  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m3_138 -> m3_140  [key=0, style=solid];
m3_138 -> m3_142  [key=2, style=dotted];
m3_139 -> m3_140  [key=0, style=solid];
m3_139 -> m3_143  [key=2, style=dotted];
m3_139 -> m3_61  [key=2, style=dotted];
m3_139 -> m3_65  [key=2, style=dotted];
m3_139 -> m3_139  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m3_140 -> m3_136  [key=0, style=bold, color=blue];
m3_41 -> m3_42  [key=0, style=solid];
m3_41 -> m3_45  [key=2, style=dotted];
m3_42 -> m3_43  [key=0, style=solid, color=red];
m3_42 -> m3_45  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m3_42 -> m3_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.Job"];
m3_42 -> m3_49  [key=1, style=dashed, color=darkseagreen4, label="System.DateTime"];
m3_42 -> m3_50  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m3_42 -> m3_51  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m3_42 -> m3_53  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m3_42 -> m3_46  [key=2, style=dotted];
m3_43 -> m3_44  [key=0, style=solid, color=red];
m3_43 -> m3_45  [key=0, style=solid, color=red];
m3_43 -> m3_38  [key=0, style=bold, color=blue];
m3_53 -> m3_54  [key=0, style=solid];
m3_53 -> m3_55  [key=0, style=solid];
m3_54 -> m3_53  [key=0, style=solid];
m3_54 -> m3_54  [key=1, style=dashed, color=darkseagreen4, label=parameterIndex];
m3_57 -> m3_58  [key=0, style=solid];
m3_57 -> m3_55  [key=0, style=bold, color=blue];
m3_52 -> m3_53  [key=0, style=solid];
m3_52 -> m3_54  [key=1, style=dashed, color=darkseagreen4, label=parameterIndex];
m3_56 -> m3_57  [key=0, style=solid];
m3_56 -> m3_65  [key=2, style=dotted];
m3_56 -> m3_58  [key=2, style=dotted];
m3_55 -> m3_56  [key=0, style=solid];
m3_58 -> m3_42  [key=0, style=bold, color=blue];
m3_9 -> m3_10  [key=0, style=solid];
m3_38 -> m3_39  [key=0, style=solid, color=red];
m3_38 -> m3_16  [key=0, style=solid];
m3_39 -> m3_40  [key=0, style=solid, color=red];
m3_39 -> m3_29  [key=2, style=dotted];
m3_39 -> m3_41  [key=1, style=dashed, color=darkseagreen4, label=manager];
m3_40 -> m3_41  [key=0, style=solid];
m3_40 -> m3_44  [key=2, style=dotted];
m3_40 -> m3_38  [key=0, style=bold, color=blue];
m3_37 -> m3_35  [key=0, style=bold, color=blue];
m3_59 -> m3_60  [key=0, style=solid, color=green];
m3_60 -> m3_61  [key=0, style=solid, color=green];
m3_60 -> m3_58  [key=2, style=dotted, color=green];
m3_83 -> m3_84  [key=0, style=solid, color=green];
m3_84 -> m3_85  [key=0, style=solid, color=green];
m3_84 -> m3_82  [key=2, style=dotted, color=green];
m3_36 -> m3_37  [key=0, style=solid];
m3_36 -> m3_29  [key=2, style=dotted];
m3_95 -> m3_96  [key=0, style=solid];
m3_95 -> m3_98  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_95 -> m3_100  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_96 -> m3_97  [key=0, style=solid];
m3_96 -> m3_98  [key=0, style=solid];
m3_98 -> m3_99  [key=0, style=solid];
m3_98 -> m3_100  [key=0, style=solid];
m3_100 -> m3_101  [key=0, style=solid];
m3_100 -> m3_65  [key=2, style=dotted];
m3_97 -> m3_101  [key=0, style=solid];
m3_97 -> m3_8  [key=2, style=dotted];
m3_99 -> m3_101  [key=0, style=solid];
m3_99 -> m3_8  [key=2, style=dotted];
m3_101 -> m3_95  [key=0, style=bold, color=blue];
m3_109 -> m3_110  [key=0, style=solid];
m3_109 -> m3_112  [key=1, style=dashed, color=darkseagreen4, label=double];
m3_109 -> m3_114  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_110 -> m3_111  [key=0, style=solid];
m3_110 -> m3_112  [key=0, style=solid];
m3_112 -> m3_113  [key=0, style=solid];
m3_112 -> m3_114  [key=0, style=solid];
m3_114 -> m3_115  [key=0, style=solid];
m3_114 -> m3_62  [key=2, style=dotted];
m3_114 -> m3_82  [key=2, style=dotted];
m3_111 -> m3_115  [key=0, style=solid];
m3_111 -> m3_8  [key=2, style=dotted];
m3_113 -> m3_115  [key=0, style=solid];
m3_113 -> m3_116  [key=2, style=dotted];
m3_115 -> m3_109  [key=0, style=bold, color=blue];
m3_63 -> m3_64  [key=0, style=solid, color=green];
m3_63 -> m3_52  [key=2, style=dotted, color=green];
m3_63 -> m3_65  [key=2, style=dotted, color=green];
m3_65 -> m3_66  [key=0, style=solid, color=green];
m3_65 -> m3_54  [key=2, style=dotted, color=green];
m3_65 -> m3_71  [key=1, style=dashed, color=green, label="lambda expression"];
m3_126 -> m3_127  [key=0, style=solid];
m3_126 -> m3_129  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_127 -> m3_128  [key=0, style=solid];
m3_127 -> m3_129  [key=0, style=solid];
m3_129 -> m3_130  [key=0, style=solid];
m3_129 -> m3_65  [key=2, style=dotted];
m3_128 -> m3_130  [key=0, style=solid];
m3_128 -> m3_8  [key=2, style=dotted];
m3_130 -> m3_126  [key=0, style=bold, color=blue];
m3_6 -> m3_7  [key=0, style=solid];
m3_131 -> m3_132  [key=0, style=solid];
m3_131 -> m3_134  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_132 -> m3_133  [key=0, style=solid];
m3_132 -> m3_134  [key=0, style=solid];
m3_134 -> m3_135  [key=0, style=solid];
m3_134 -> m3_65  [key=2, style=dotted];
m3_133 -> m3_135  [key=0, style=solid];
m3_133 -> m3_8  [key=2, style=dotted];
m3_135 -> m3_131  [key=0, style=bold, color=blue];
m3_7 -> m3_0  [key=0, style=bold, color=blue];
m3_144 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_18  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_25  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_39  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_89  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_100  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_107  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_114  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_123  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_129  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_134  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_139  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
}
