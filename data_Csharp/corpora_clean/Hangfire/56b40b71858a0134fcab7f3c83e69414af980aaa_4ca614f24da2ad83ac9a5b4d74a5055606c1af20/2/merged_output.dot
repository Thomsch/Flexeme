digraph  {
m0_63 [cluster="HangFire.Web.RazorPage.Write(object)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76"];
m0_57 [cluster="Unk.TryParse", file="EnqueuedState.feature.cs", label="Entry Unk.TryParse", span=""];
m0_55 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69"];
m0_62 [cluster="HangFire.Storage.IMonitoringApi.ScheduledJobs(int, int)", file="EnqueuedState.feature.cs", label="Entry HangFire.Storage.IMonitoringApi.ScheduledJobs(int, int)", span="33-33"];
m0_59 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="29-29"];
m0_58 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="EnqueuedState.feature.cs", label="Entry HangFire.JobStorage.GetMonitoringApi()", span="54-54"];
m0_68 [cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="EnqueuedState.feature.cs", label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="39-39"];
m0_56 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m0_64 [cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6"];
m0_0 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.Pages.ScheduledJobsPage.Execute()", span="47-47"];
m0_12 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", color=green, community=0, file="EnqueuedState.feature.cs", label="0: WriteLiteral(''    <div class=\''js-jobs-list\''>\n        <div class=\''btn-toolbar btn-toolbar-top\''>\n'' +\r\n''            <button class=\''js-jobs-list-command btn btn-sm btn-primary\''\n        '' +\r\n''            data-url=\'''')", span="105-107"];
m0_10 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="pager.TotalPageCount == 0", span="86-86"];
m0_13 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(Request.LinkTo(''/scheduled/enqueue''))", span="112-112"];
m0_14 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", color=green, community=0, file="EnqueuedState.feature.cs", label="1: WriteLiteral(@''''''\n                    data-loading-text=''''Enqueueing...''''>\n                <span class=''''glyphicon glyphicon-play''''></span>\n                Enqueue now\n            </button>\n\n            <button class=''''js-jobs-list-command btn btn-sm btn-default''''\n                    data-url='''''')", span="117-124"];
m0_15 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(Request.LinkTo(''/scheduled/delete''))", span="129-129"];
m0_16 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", color=green, community=0, file="EnqueuedState.feature.cs", label="0: WriteLiteral(@''''''\n                    data-loading-text=''''Deleting...''''\n                    data-confirm=''''Do you really want to DELETE ALL selected jobs?''''>\n                <span class=''''glyphicon glyphicon-remove''''></span>\n                Delete selected\n            </button>\n\n            '')", span="134-141"];
m0_17 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(RenderPartial(new PerPageSelector(pager)))", span="146-146"];
m0_1 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\n'')", span="51-51"];
m0_2 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Layout = new LayoutPage { Title = ''Scheduled Jobs'' }", span="62-62"];
m0_4 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="int.TryParse(Request.QueryString[''from''], out from)", span="66-66"];
m0_5 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="int.TryParse(Request.QueryString[''count''], out perPage)", span="67-67"];
m0_7 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Pager pager = new Pager(from, perPage, monitor.ScheduledCount())\n    {\n        BasePageUrl = Request.LinkTo(''/scheduled'')\n    }", span="70-73"];
m0_9 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\n'')", span="81-81"];
m0_11 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''    <div class=\''alert alert-info\''>\n        There are no scheduled jobs.\n    </div'' +\r\n''>\n'')", span="92-93"];
m0_18 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(@''\n        </div>\n\n        <table class=''''table''''>\n            <thead>\n                <tr>\n                    <th class=''''min-width''''>\n                        <input type=''''checkbox'''' class=''''js-jobs-list-select-all'''' />\n                    </th>\n                    <th class=''''min-width''''>Id</th>\n                    <th>Enqueue</th>\n                    <th>Job</th>\n                    <th class=''''align-right''''>Scheduled</th>\n                </tr>\n            </thead>\n'')", span="151-166"];
m0_20 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''                <tr class=\''js-jobs-list-row '')", span="177-177"];
m0_21 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(!job.Value.InScheduledState ? ''obsolete-data'' : null)", span="182-182"];
m0_22 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral('' '')", span="187-187"];
m0_23 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(job.Value.InScheduledState ? ''hover'' : null)", span="192-192"];
m0_24 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\''>\n                    <td>\n'')", span="197-197"];
m0_26 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''                            <input type=\''checkbox\'' class=\''js-jobs-list-checkbox\'' '' +\r\n''name=\''jobs[]\'' value=\'''')", span="208-209"];
m0_27 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(job.Key)", span="214-214"];
m0_28 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\'' />\n'')", span="219-219"];
m0_29 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''                    </td>\n                    <td class=\''min-width\''>\n            '' +\r\n''            <a href=\'''')", span="229-230"];
m0_30 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="235-235"];
m0_31 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\''>\n                            '')", span="240-240"];
m0_32 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(HtmlHelper.JobId(job.Key))", span="245-245"];
m0_33 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\n                        </a>\n'')", span="250-250"];
m0_35 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''                            <span title=\''Job\'s state has been changed while fetch'' +\r\n''ing data.\'' class=\''glyphicon glyphicon-question-sign\''></span>\n'')", span="261-262"];
m0_36 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''                    </td>\n                    <td class=\''min-width\''>\n            '' +\r\n''            <span data-moment=\'''')", span="272-273"];
m0_37 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(JobHelper.ToTimestamp(job.Value.EnqueueAt))", span="278-278"];
m0_38 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\''>\n                            '')", span="283-283"];
m0_39 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(job.Value.EnqueueAt)", span="288-288"];
m0_40 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\n                        </span>\n                    </td>\n                    <t'' +\r\n''d>\n                        <a class=\''job-method\'' href=\'''')", span="293-294"];
m0_41 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="299-299"];
m0_42 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\''>\n                            '')", span="304-304"];
m0_43 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(HtmlHelper.DisplayMethod(job.Value.Job))", span="309-309"];
m0_44 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\n                        </a>\n                    </td>\n                    <td c'' +\r\n''lass=\''align-right\''>\n'')", span="314-315"];
m0_46 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''                            <span data-moment=\'''')", span="326-326"];
m0_47 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(JobHelper.ToTimestamp(job.Value.ScheduledAt.Value))", span="331-331"];
m0_48 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\''>\n                                '')", span="336-336"];
m0_49 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(job.Value.ScheduledAt)", span="341-341"];
m0_50 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''\n                            </span>\n'')", span="346-346"];
m0_51 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''                    </td>\n                </tr>\n'')", span="356-356"];
m0_52 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="WriteLiteral(''        </table>\n    </div>\n'')", span="366-366"];
m0_53 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Write(RenderPartial(new Paginator(pager)))", span="378-378"];
m0_3 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="int from, perPage", span="64-64"];
m0_6 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="var monitor = JobStorage.Current.GetMonitoringApi()", span="69-69"];
m0_8 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="JobList<ScheduledJobDto> scheduledJobs = monitor.ScheduledJobs(pager.FromRecord, pager.RecordsPerPage)", span="75-75"];
m0_19 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label=scheduledJobs, span="171-171"];
m0_25 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="job.Value.InScheduledState", span="202-202"];
m0_34 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="!job.Value.InScheduledState", span="255-255"];
m0_45 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="job.Value.ScheduledAt != null", span="320-320"];
m0_54 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="EnqueuedState.feature.cs", label="Exit HangFire.Web.Pages.ScheduledJobsPage.Execute()", span="47-47"];
m0_61 [cluster="HttpRequestBase.LinkTo(string)", file="EnqueuedState.feature.cs", label="Entry HttpRequestBase.LinkTo(string)", span="24-24"];
m0_69 [cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", span="30-30"];
m0_70 [cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6"];
m0_60 [cluster="HangFire.Storage.IMonitoringApi.ScheduledCount()", file="EnqueuedState.feature.cs", label="Entry HangFire.Storage.IMonitoringApi.ScheduledCount()", span="38-38"];
m0_65 [cluster="HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", span="89-89"];
m0_66 [cluster="Unk.Write", file="EnqueuedState.feature.cs", label="Entry Unk.Write", span=""];
m0_67 [cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.HtmlHelper.JobId(string, bool)", span="45-45"];
m0_71 [file="EnqueuedState.feature.cs", label="HangFire.Web.Pages.ScheduledJobsPage", span=""];
m2_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="FailedState.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m2_9 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="FailedState.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m2_0 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="FailedState.cs", label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="27-27"];
m2_1 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="FailedState.cs", label="exception == null", span="29-29"];
m2_3 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", color=green, community=0, file="FailedState.cs", label="1: Exception = exception", span="31-31"];
m2_2 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="FailedState.cs", label="throw new ArgumentNullException(''exception'');", span="29-29"];
m2_4 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="FailedState.cs", label="Exit HangFire.States.FailedState.FailedState(System.Exception)", span="27-27"];
m2_12 [cluster="System.Exception.ToString()", file="FailedState.cs", label="Entry System.Exception.ToString()", span="0-0"];
m2_6 [cluster="HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", file="FailedState.cs", label="Entry HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", span="37-37"];
m2_7 [cluster="HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", color=green, community=0, file="FailedState.cs", label="0: return new Dictionary<string, string>\r\n                {\r\n                    { ''FailedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''ExceptionType'', Exception.GetType().FullName },\r\n                    { ''ExceptionMessage'', Exception.Message },\r\n                    { ''ExceptionDetails'', Exception.ToString() }\r\n                };", span="39-45"];
m2_8 [cluster="HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", file="FailedState.cs", label="Exit HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", span="37-37"];
m2_10 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="FailedState.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
m2_11 [cluster="System.Exception.GetType()", file="FailedState.cs", label="Entry System.Exception.GetType()", span="0-0"];
m2_13 [file="FailedState.cs", label="HangFire.States.FailedState", span=""];
m3_164 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="184-184"];
m3_165 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="186-186"];
m3_166 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="188-188"];
m3_167 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="FailedStateFacts.cs", label="_stateMachine.Verify(x => x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<ProcessingState>(),\r\n                It.Is<string[]>(\r\n                    states => states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName),\r\n                It.IsAny<CancellationToken>()))", span="190-196"];
m3_168 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="184-184"];
m3_19 [cluster="Mock<IStateMachineFactory>.cstr", file="FailedStateFacts.cs", label="Entry Mock<IStateMachineFactory>.cstr", span=""];
m3_79 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", span="93-93"];
m3_80 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", file="FailedStateFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_context.Object, _storage.Object, _process.Object, null))", span="95-96"];
m3_81 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", file="FailedStateFacts.cs", label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="98-98"];
m3_82 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", span="93-93"];
m3_16 [cluster="Hangfire.Core.Tests.WorkerContextMock.WorkerContextMock()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.WorkerContextMock.WorkerContextMock()", span="9-9"];
m3_60 [cluster="Unk.Equal", file="FailedStateFacts.cs", label="Entry Unk.Equal", span=""];
m3_288 [cluster="System.Exception.Exception()", file="FailedStateFacts.cs", label="Entry System.Exception.Exception()", span="0-0"];
m3_245 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="284-284"];
m3_246 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="FailedStateFacts.cs", label="var exception = new InvalidOperationException()", span="287-287"];
m3_247 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="FailedStateFacts.cs", label="_process\r\n                .Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws(exception)", span="288-290"];
m3_250 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="FailedStateFacts.cs", label="_stateMachine.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason.Contains(''Internal'')),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>()))", span="298-302"];
m3_248 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="292-292"];
m3_249 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="295-295"];
m3_251 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="284-284"];
m3_234 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="270-270"];
m3_235 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="272-272"];
m3_236 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="274-274"];
m3_237 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="FailedStateFacts.cs", label="_stateMachine.Verify(x => x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<SucceededState>(),\r\n                It.Is<string[]>(states => states.Length == 1 && states[0] == ProcessingState.StateName),\r\n                It.IsAny<CancellationToken>()))", span="276-280"];
m3_238 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="270-270"];
m3_27 [cluster="System.Threading.CancellationToken.CancellationToken()", file="FailedStateFacts.cs", label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0"];
m3_134 [cluster="Unk.Requeue", file="FailedStateFacts.cs", label="Entry Unk.Requeue", span=""];
m3_175 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="200-200"];
m3_176 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="FailedStateFacts.cs", label="_stateMachine\r\n                .Setup(x => x.ChangeState(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<ProcessingState>(),\r\n                    It.IsAny<string[]>(),\r\n                    It.IsAny<CancellationToken>()))\r\n                .Returns(false)", span="203-209"];
m3_177 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="211-211"];
m3_178 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="214-214"];
m3_179 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="FailedStateFacts.cs", label="_process.Verify(\r\n                x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()),\r\n                Times.Never)", span="217-219"];
m3_180 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="200-200"];
m3_187 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="223-223"];
m3_188 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="225-225"];
m3_189 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="227-227"];
m3_190 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="FailedStateFacts.cs", label="_process.Verify(x => x.Run(\r\n                It.IsNotNull<PerformContext>(),\r\n                It.IsNotNull<IJobPerformer>()))", span="229-231"];
m3_191 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="223-223"];
m3_221 [cluster="Unk.DoesNotThrow", file="FailedStateFacts.cs", label="Entry Unk.DoesNotThrow", span=""];
m3_149 [cluster="Unk.Run", file="FailedStateFacts.cs", label="Entry Unk.Run", span=""];
m3_65 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="75-75"];
m3_66 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="FailedStateFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_context.Object, null, _process.Object, _stateMachineFactory.Object))", span="77-78"];
m3_67 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="FailedStateFacts.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="80-80"];
m3_68 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="75-75"];
m3_252 [cluster="System.InvalidOperationException.InvalidOperationException()", file="FailedStateFacts.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m3_38 [cluster="Unk.>", file="FailedStateFacts.cs", label="Entry Unk.>", span=""];
m3_115 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="127-127"];
m3_116 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="FailedStateFacts.cs", label="_stateMachine\r\n                .Setup(x => x.ChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>()))\r\n                .Throws<InvalidOperationException>()", span="129-131"];
m3_117 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="133-133"];
m3_118 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="FailedStateFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => worker.Execute(_token))", span="135-136"];
m3_119 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="FailedStateFacts.cs", label="_fetchedJob.Verify(x => x.RemoveFromQueue(), Times.Never)", span="138-138"];
m3_120 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="FailedStateFacts.cs", label="_fetchedJob.Verify(x => x.Requeue())", span="139-139"];
m3_121 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="127-127"];
m3_214 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="254-254"];
m3_215 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="FailedStateFacts.cs", label="_process.Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws<JobAbortedException>()", span="257-258"];
m3_216 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="260-260"];
m3_217 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="FailedStateFacts.cs", label="Assert.DoesNotThrow(() => worker.Execute(_token))", span="263-263"];
m3_218 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="FailedStateFacts.cs", label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="265-265"];
m3_219 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="FailedStateFacts.cs", label="_fetchedJob.Verify(x => x.Requeue(), Times.Never)", span="266-266"];
m3_220 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="254-254"];
m3_92 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="347-347"];
m3_295 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="FailedStateFacts.cs", label="return new Worker(_context.Object, _storage.Object, _process.Object, _stateMachineFactory.Object);", span="349-349"];
m3_296 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="347-347"];
m3_56 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="66-66"];
m3_57 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="FailedStateFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(null, _storage.Object, _process.Object, _stateMachineFactory.Object))", span="68-69"];
m3_58 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="FailedStateFacts.cs", label="Assert.Equal(''context'', exception.ParamName)", span="71-71"];
m3_59 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="66-66"];
m3_23 [cluster="Mock<IFetchedJob>.cstr", file="FailedStateFacts.cs", label="Entry Mock<IFetchedJob>.cstr", span=""];
m3_264 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="306-306"];
m3_265 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="FailedStateFacts.cs", label="var exception = new InvalidOperationException()", span="309-309"];
m3_266 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="FailedStateFacts.cs", label="_process\r\n                .Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws(new JobPerformanceException(''hello'', exception))", span="310-312"];
m3_269 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="FailedStateFacts.cs", label="_stateMachine.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason == ''hello''),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>()))", span="320-324"];
m3_267 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="314-314"];
m3_268 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="317-317"];
m3_270 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="306-306"];
m3_31 [cluster="Unk.GetConnection", file="FailedStateFacts.cs", label="Entry Unk.GetConnection", span=""];
m3_55 [cluster="Unk.ChangeState", file="FailedStateFacts.cs", label="Entry Unk.ChangeState", span=""];
m3_17 [cluster="Mock<JobStorage>.cstr", file="FailedStateFacts.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m3_0 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", span="26-26"];
m3_1 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="FailedStateFacts.cs", label="_context = new WorkerContextMock()", span="28-28"];
m3_2 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="FailedStateFacts.cs", label="_storage = new Mock<JobStorage>()", span="29-29"];
m3_3 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=red, community=0, file="FailedStateFacts.cs", label="1: _process = new Mock<IJobPerformanceProcess>()", span="30-30"];
m3_4 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=red, community=0, file="FailedStateFacts.cs", label="1: _stateMachineFactory = new Mock<IStateMachineFactory>()", span="31-31"];
m3_5 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="FailedStateFacts.cs", label="_connection = new Mock<IStorageConnection>()", span="33-33"];
m3_6 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=red, community=0, file="FailedStateFacts.cs", label="1: _storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="35-35"];
m3_7 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="FailedStateFacts.cs", label="_fetchedJob = new Mock<IFetchedJob>()", span="37-37"];
m3_8 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=red, community=0, file="FailedStateFacts.cs", label="0: _fetchedJob.Setup(x => x.JobId).Returns(JobId)", span="38-38"];
m3_9 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="FailedStateFacts.cs", label="_connection\r\n                .Setup(x => x.FetchNextJob(_context.Queues, It.IsNotNull<CancellationToken>()))\r\n                .Returns(_fetchedJob.Object)", span="40-42"];
m3_10 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=red, community=0, file="FailedStateFacts.cs", label="1: _connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    Job = Job.FromExpression(() => Method()),\r\n                })", span="44-48"];
m3_11 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="FailedStateFacts.cs", label="_stateMachine = new Mock<IStateMachine>()", span="50-50"];
m3_12 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="FailedStateFacts.cs", label="_stateMachineFactory\r\n                .Setup(x => x.Create(_connection.Object))\r\n                .Returns(_stateMachine.Object)", span="52-54"];
m3_13 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="FailedStateFacts.cs", label="_stateMachine.Setup(x => x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<IState>(),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())).Returns(true)", span="56-60"];
m3_14 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="FailedStateFacts.cs", label="_token = new CancellationToken()", span="62-62"];
m3_15 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", span="26-26"];
m3_142 [cluster="Unk.InSequence", file="FailedStateFacts.cs", label="Entry Unk.InSequence", span=""];
m3_21 [cluster="Unk.Setup", file="FailedStateFacts.cs", label="Entry Unk.Setup", span=""];
m3_101 [cluster="Unk.Dispose", file="FailedStateFacts.cs", label="Entry Unk.Dispose", span=""];
m3_253 [cluster="Unk.Throws", file="FailedStateFacts.cs", label="Entry Unk.Throws", span=""];
m3_39 [cluster="Unk.FetchNextJob", file="FailedStateFacts.cs", label="Entry Unk.FetchNextJob", span=""];
m3_86 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="102-102"];
m3_87 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="104-104"];
m3_88 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="106-106"];
m3_89 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="FailedStateFacts.cs", label="_storage.Verify(x => x.GetConnection(), Times.Once)", span="108-108"];
m3_90 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="FailedStateFacts.cs", label="_connection.Verify(x => x.Dispose(), Times.Once)", span="109-109"];
m3_91 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="102-102"];
m3_281 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="328-328"];
m3_282 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="FailedStateFacts.cs", label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData { LoadException = new JobLoadException(''asd'', new Exception()) })", span="331-332"];
m3_283 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="334-334"];
m3_284 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="337-337"];
m3_285 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="FailedStateFacts.cs", label="_stateMachine.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.IsAny<FailedState>(),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>()))", span="340-344"];
m3_286 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="328-328"];
m3_114 [cluster="Unk.RemoveFromQueue", file="FailedStateFacts.cs", label="Entry Unk.RemoveFromQueue", span=""];
m3_292 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="340-344"];
m3_28 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="35-35"];
m3_32 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="38-38"];
m3_35 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="41-41"];
m3_40 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="44-44"];
m3_44 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="47-47"];
m3_48 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="53-53"];
m3_52 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="56-60"];
m3_29 [cluster="lambda expression", color=red, community=0, file="FailedStateFacts.cs", label="0: x.GetConnection()", span="35-35"];
m3_30 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="35-35"];
m3_33 [cluster="lambda expression", color=red, community=0, file="FailedStateFacts.cs", label="0: x.JobId", span="38-38"];
m3_34 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="38-38"];
m3_36 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.FetchNextJob(_context.Queues, It.IsNotNull<CancellationToken>())", span="41-41"];
m3_37 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="41-41"];
m3_41 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.GetJobData(JobId)", span="44-44"];
m3_42 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="44-44"];
m3_45 [cluster="lambda expression", file="FailedStateFacts.cs", label="Method()", span="47-47"];
m3_46 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="47-47"];
m3_49 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.Create(_connection.Object)", span="53-53"];
m3_50 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="53-53"];
m3_53 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<IState>(),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="56-60"];
m3_54 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="56-60"];
m3_61 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="69-69"];
m3_62 [cluster="lambda expression", file="FailedStateFacts.cs", label="new Worker(null, _storage.Object, _process.Object, _stateMachineFactory.Object)", span="69-69"];
m3_63 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="69-69"];
m3_69 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="78-78"];
m3_70 [cluster="lambda expression", file="FailedStateFacts.cs", label="new Worker(_context.Object, null, _process.Object, _stateMachineFactory.Object)", span="78-78"];
m3_71 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="78-78"];
m3_76 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="87-87"];
m3_77 [cluster="lambda expression", file="FailedStateFacts.cs", label="new Worker(_context.Object, _storage.Object, null, _stateMachineFactory.Object)", span="87-87"];
m3_78 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="87-87"];
m3_83 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="96-96"];
m3_84 [cluster="lambda expression", file="FailedStateFacts.cs", label="new Worker(_context.Object, _storage.Object, _process.Object, null)", span="96-96"];
m3_85 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="96-96"];
m3_95 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="108-108"];
m3_98 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="109-109"];
m3_96 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.GetConnection()", span="108-108"];
m3_97 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="108-108"];
m3_99 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.Dispose()", span="109-109"];
m3_100 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="109-109"];
m3_108 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="120-120"];
m3_111 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="123-123"];
m3_109 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.FetchNextJob(_context.Queues, _token)", span="120-120"];
m3_110 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="120-120"];
m3_112 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.RemoveFromQueue()", span="123-123"];
m3_113 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="123-123"];
m3_122 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="130-130"];
m3_126 [cluster="lambda expression", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="136-136"];
m3_125 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="136-136"];
m3_128 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="138-138"];
m3_131 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="139-139"];
m3_123 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.ChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>())", span="130-130"];
m3_124 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="130-130"];
m3_127 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="136-136"];
m3_129 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.RemoveFromQueue()", span="138-138"];
m3_130 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="138-138"];
m3_132 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.Requeue()", span="139-139"];
m3_133 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="139-139"];
m3_143 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="147-148"];
m3_146 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="152-152"];
m3_150 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="156-157"];
m3_144 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.ChangeState(\r\n                    JobId, It.IsAny<ProcessingState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>())", span="147-148"];
m3_145 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="147-148"];
m3_147 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="152-152"];
m3_148 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="152-152"];
m3_151 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.ChangeState(\r\n                    JobId, It.IsAny<SucceededState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>())", span="156-157"];
m3_152 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="156-157"];
m3_158 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="176-180"];
m3_159 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.Is<ProcessingState>(state => state.ServerId == _context.Object.ServerId),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="176-180"];
m3_160 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="176-180"];
m3_161 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="178-178"];
m3_162 [cluster="lambda expression", file="FailedStateFacts.cs", label="state.ServerId == _context.Object.ServerId", span="178-178"];
m3_163 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="178-178"];
m3_169 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="190-196"];
m3_170 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<ProcessingState>(),\r\n                It.Is<string[]>(\r\n                    states => states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName),\r\n                It.IsAny<CancellationToken>())", span="190-196"];
m3_171 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="190-196"];
m3_172 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="194-195"];
m3_173 [cluster="lambda expression", file="FailedStateFacts.cs", label="states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName", span="194-195"];
m3_174 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="194-195"];
m3_181 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="204-208"];
m3_184 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="218-218"];
m3_182 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.ChangeState(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<ProcessingState>(),\r\n                    It.IsAny<string[]>(),\r\n                    It.IsAny<CancellationToken>())", span="204-208"];
m3_183 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="204-208"];
m3_185 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="218-218"];
m3_186 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="218-218"];
m3_192 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="229-231"];
m3_193 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.Run(\r\n                It.IsNotNull<PerformContext>(),\r\n                It.IsNotNull<IJobPerformer>())", span="229-231"];
m3_194 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="229-231"];
m3_202 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="238-238"];
m3_206 [cluster="lambda expression", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="244-244"];
m3_205 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="244-244"];
m3_208 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="248-248"];
m3_211 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="250-250"];
m3_203 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="238-238"];
m3_204 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="238-238"];
m3_207 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="244-244"];
m3_209 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.ChangeState(It.IsAny<string>(), It.IsAny<FailedState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>())", span="248-248"];
m3_210 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="248-248"];
m3_212 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.Requeue()", span="250-250"];
m3_213 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="250-250"];
m3_222 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="257-257"];
m3_226 [cluster="lambda expression", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="263-263"];
m3_225 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="263-263"];
m3_228 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="265-265"];
m3_231 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="266-266"];
m3_223 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="257-257"];
m3_224 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="257-257"];
m3_227 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="263-263"];
m3_229 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.RemoveFromQueue()", span="265-265"];
m3_230 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="265-265"];
m3_232 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.Requeue()", span="266-266"];
m3_233 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="266-266"];
m3_239 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="276-280"];
m3_240 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<SucceededState>(),\r\n                It.Is<string[]>(states => states.Length == 1 && states[0] == ProcessingState.StateName),\r\n                It.IsAny<CancellationToken>())", span="276-280"];
m3_241 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="276-280"];
m3_242 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="279-279"];
m3_243 [cluster="lambda expression", file="FailedStateFacts.cs", label="states.Length == 1 && states[0] == ProcessingState.StateName", span="279-279"];
m3_244 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="279-279"];
m3_258 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.ChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason.Contains(''Internal'')),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="298-302"];
m3_261 [cluster="lambda expression", file="FailedStateFacts.cs", label="state.Exception == exception && state.Reason.Contains(''Internal'')", span="300-300"];
m3_254 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="289-289"];
m3_257 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="298-302"];
m3_255 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="289-289"];
m3_256 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="289-289"];
m3_259 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="298-302"];
m3_260 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="300-300"];
m3_262 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="300-300"];
m3_276 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.ChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason == ''hello''),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="320-324"];
m3_279 [cluster="lambda expression", file="FailedStateFacts.cs", label="state.Exception == exception && state.Reason == ''hello''", span="322-322"];
m3_272 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="311-311"];
m3_275 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="320-324"];
m3_273 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="311-311"];
m3_274 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="311-311"];
m3_277 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="320-324"];
m3_278 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="322-322"];
m3_280 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="322-322"];
m3_289 [cluster="lambda expression", file="FailedStateFacts.cs", label="Entry lambda expression", span="331-331"];
m3_290 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.GetJobData(JobId)", span="331-331"];
m3_291 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="331-331"];
m3_293 [cluster="lambda expression", file="FailedStateFacts.cs", label="x.ChangeState(\r\n                JobId,\r\n                It.IsAny<FailedState>(),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="340-344"];
m3_294 [cluster="lambda expression", file="FailedStateFacts.cs", label="Exit lambda expression", span="340-344"];
m3_64 [cluster="Worker.cstr", file="FailedStateFacts.cs", label="Entry Worker.cstr", span=""];
m3_153 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="170-170"];
m3_154 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="172-172"];
m3_155 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="174-174"];
m3_156 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="FailedStateFacts.cs", label="_stateMachine.Verify(x => x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.Is<ProcessingState>(state => state.ServerId == _context.Object.ServerId),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>()))", span="176-180"];
m3_157 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="170-170"];
m3_24 [cluster="Hangfire.Storage.JobData.JobData()", file="FailedStateFacts.cs", label="Entry Hangfire.Storage.JobData.JobData()", span="21-21"];
m3_263 [cluster="Unk.Contains", file="FailedStateFacts.cs", label="Entry Unk.Contains", span=""];
m3_94 [cluster="Unk.Verify", file="FailedStateFacts.cs", label="Entry Unk.Verify", span=""];
m3_135 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="143-143"];
m3_136 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="FailedStateFacts.cs", label="_stateMachine\r\n                .Setup(x => x.ChangeState(\r\n                    JobId, It.IsAny<ProcessingState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>()))\r\n                .InSequence()\r\n                .Returns(true)", span="146-150"];
m3_137 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="FailedStateFacts.cs", label="_process.Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .InSequence()", span="152-153"];
m3_138 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="FailedStateFacts.cs", label="_stateMachine\r\n                .Setup(x => x.ChangeState(\r\n                    JobId, It.IsAny<SucceededState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>()))\r\n                .InSequence()\r\n                .Returns(true)", span="155-159"];
m3_139 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="161-161"];
m3_140 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="164-164"];
m3_141 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="143-143"];
m3_102 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="113-113"];
m3_103 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="115-115"];
m3_104 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="FailedStateFacts.cs", label="worker.Execute(_token)", span="117-117"];
m3_105 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="FailedStateFacts.cs", label="_connection.Verify(\r\n                x => x.FetchNextJob(_context.Queues, _token),\r\n                Times.Once)", span="119-121"];
m3_106 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="FailedStateFacts.cs", label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="123-123"];
m3_107 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="113-113"];
m3_287 [cluster="Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", file="FailedStateFacts.cs", label="Entry Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", span="32-32"];
m3_271 [cluster="Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="FailedStateFacts.cs", label="Entry Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22"];
m3_26 [cluster="Mock<IStateMachine>.cstr", file="FailedStateFacts.cs", label="Entry Mock<IStateMachine>.cstr", span=""];
m3_93 [cluster="Unk.Execute", file="FailedStateFacts.cs", label="Entry Unk.Execute", span=""];
m3_195 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", span="235-235"];
m3_196 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="FailedStateFacts.cs", label="_process.Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws<OperationCanceledException>()", span="238-239"];
m3_197 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="FailedStateFacts.cs", label="var worker = CreateWorker()", span="241-241"];
m3_198 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="FailedStateFacts.cs", label="Assert.Throws<OperationCanceledException>(() => worker.Execute(_token))", span="244-244"];
m3_199 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="FailedStateFacts.cs", label="_stateMachine.Verify(\r\n                x => x.ChangeState(It.IsAny<string>(), It.IsAny<FailedState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>()),\r\n                Times.Never)", span="247-249"];
m3_200 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="FailedStateFacts.cs", label="_fetchedJob.Verify(x => x.Requeue())", span="250-250"];
m3_201 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", span="235-235"];
m3_51 [cluster="Unk.Create", file="FailedStateFacts.cs", label="Entry Unk.Create", span=""];
m3_22 [cluster="Unk.Returns", file="FailedStateFacts.cs", label="Entry Unk.Returns", span=""];
m3_47 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="352-352"];
m3_297 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="352-352"];
m3_20 [cluster="Mock<IStorageConnection>.cstr", file="FailedStateFacts.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m3_43 [cluster="Unk.GetJobData", file="FailedStateFacts.cs", label="Entry Unk.GetJobData", span=""];
m3_25 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="FailedStateFacts.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="149-149"];
m3_18 [cluster="Mock<IJobPerformanceProcess>.cstr", file="FailedStateFacts.cs", label="Entry Mock<IJobPerformanceProcess>.cstr", span=""];
m3_72 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="FailedStateFacts.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", span="84-84"];
m3_73 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="FailedStateFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_context.Object, _storage.Object, null, _stateMachineFactory.Object))", span="86-87"];
m3_74 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="FailedStateFacts.cs", label="Assert.Equal(''process'', exception.ParamName)", span="89-89"];
m3_75 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="FailedStateFacts.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", span="84-84"];
m3_298 [file="FailedStateFacts.cs", label="Hangfire.Core.Tests.Server.WorkerFacts", span=""];
m3_299 [file="FailedStateFacts.cs", label=worker, span=""];
m3_300 [file="FailedStateFacts.cs", label=worker, span=""];
m3_301 [file="FailedStateFacts.cs", label=worker, span=""];
m3_302 [file="FailedStateFacts.cs", label=exception, span=""];
m3_303 [file="FailedStateFacts.cs", label=exception, span=""];
m4_9 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JobClientTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m4_17 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="JobClientTests.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m4_11 [cluster="HangFire.States.EnqueuedState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="JobClientTests.cs", label="Entry HangFire.States.EnqueuedState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="79-79"];
m4_12 [cluster="HangFire.States.EnqueuedState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="JobClientTests.cs", label="var enqueuedState = context.NewState as EnqueuedState", span="81-81"];
m4_15 [cluster="HangFire.States.EnqueuedState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="JobClientTests.cs", label="transaction.AddToQueue(enqueuedState.Queue, context.JobId)", span="89-89"];
m4_13 [cluster="HangFire.States.EnqueuedState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="JobClientTests.cs", label="enqueuedState == null", span="82-82"];
m4_14 [cluster="HangFire.States.EnqueuedState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="JobClientTests.cs", label="throw new InvalidOperationException(String.Format(\r\n                        ''`{0}` state handler can be registered only for the Enqueued state.'',\r\n                        typeof(Handler).FullName));", span="84-86"];
m4_16 [cluster="HangFire.States.EnqueuedState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="JobClientTests.cs", label="Exit HangFire.States.EnqueuedState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="79-79"];
m4_0 [cluster="HangFire.States.EnqueuedState.EnqueuedState()", file="JobClientTests.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState()", span="31-31"];
m4_1 [cluster="HangFire.States.EnqueuedState.EnqueuedState()", file="JobClientTests.cs", label="Exit HangFire.States.EnqueuedState.EnqueuedState()", span="31-31"];
m4_20 [cluster="HangFire.States.EnqueuedState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="JobClientTests.cs", label="Entry HangFire.States.EnqueuedState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="92-92"];
m4_21 [cluster="HangFire.States.EnqueuedState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="JobClientTests.cs", label="Exit HangFire.States.EnqueuedState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="92-92"];
m4_19 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", file="JobClientTests.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", span="30-30"];
m4_18 [cluster="string.Format(string, object)", file="JobClientTests.cs", label="Entry string.Format(string, object)", span="0-0"];
m4_10 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="JobClientTests.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m4_2 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string)", file="JobClientTests.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState(string)", span="36-36"];
m4_3 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string)", file="JobClientTests.cs", label="EnqueuedAt = DateTime.UtcNow", span="38-38"];
m4_4 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string)", file="JobClientTests.cs", label="Queue = queue", span="39-39"];
m4_5 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string)", file="JobClientTests.cs", label="Exit HangFire.States.EnqueuedState.EnqueuedState(string)", span="36-36"];
m4_6 [cluster="HangFire.States.EnqueuedState.SerializeData()", file="JobClientTests.cs", label="Entry HangFire.States.EnqueuedState.SerializeData()", span="68-68"];
m4_7 [cluster="HangFire.States.EnqueuedState.SerializeData()", file="JobClientTests.cs", label="return new Dictionary<string, string>\r\n            {\r\n                { ''EnqueuedAt'', JobHelper.ToStringTimestamp(EnqueuedAt) },\r\n                { ''Queue'', Queue }\r\n            };", span="70-74"];
m4_8 [cluster="HangFire.States.EnqueuedState.SerializeData()", file="JobClientTests.cs", label="Exit HangFire.States.EnqueuedState.SerializeData()", span="68-68"];
m4_22 [file="JobClientTests.cs", label="HangFire.States.EnqueuedState", span=""];
m5_3 [cluster="Unk.>", file="JobMethodTests.cs", label="Entry Unk.>", span=""];
m5_7 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="JobMethodTests.cs", label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="26-26"];
m5_25 [cluster="System.Exception.ToString()", file="JobMethodTests.cs", label="Entry System.Exception.ToString()", span="0-0"];
m5_23 [cluster="HangFire.States.FailedState.SerializeData()", file="JobMethodTests.cs", label="Entry HangFire.States.FailedState.SerializeData()", span="39-39"];
m5_13 [cluster="Unk.Equal", file="JobMethodTests.cs", label="Entry Unk.Equal", span=""];
m5_12 [cluster="System.Exception.Exception()", file="JobMethodTests.cs", label="Entry System.Exception.Exception()", span="0-0"];
m5_8 [cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="JobMethodTests.cs", label="Entry HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", span="18-18"];
m5_9 [cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="JobMethodTests.cs", label="var state = new FailedState(new Exception())", span="20-20"];
m5_10 [cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="JobMethodTests.cs", label="Assert.Equal(FailedState.StateName, state.Name)", span="21-21"];
m5_11 [cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="JobMethodTests.cs", label="Exit HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", span="18-18"];
m5_14 [cluster="HangFire.Core.Tests.States.FailedStateFacts.SerializeData_ReturnsCorrectData()", file="JobMethodTests.cs", label="Entry HangFire.Core.Tests.States.FailedStateFacts.SerializeData_ReturnsCorrectData()", span="25-25"];
m5_15 [cluster="HangFire.Core.Tests.States.FailedStateFacts.SerializeData_ReturnsCorrectData()", file="JobMethodTests.cs", label="var state = new FailedState(new Exception(''Message''))", span="27-27"];
m5_16 [cluster="HangFire.Core.Tests.States.FailedStateFacts.SerializeData_ReturnsCorrectData()", file="JobMethodTests.cs", label="var serializedData = state.SerializeData()", span="29-29"];
m5_17 [cluster="HangFire.Core.Tests.States.FailedStateFacts.SerializeData_ReturnsCorrectData()", file="JobMethodTests.cs", label="Assert.Equal(JobHelper.ToStringTimestamp(state.FailedAt), serializedData[''FailedAt''])", span="31-31"];
m5_20 [cluster="HangFire.Core.Tests.States.FailedStateFacts.SerializeData_ReturnsCorrectData()", file="JobMethodTests.cs", label="Assert.Equal(state.Exception.ToString(), serializedData[''ExceptionDetails''])", span="34-34"];
m5_18 [cluster="HangFire.Core.Tests.States.FailedStateFacts.SerializeData_ReturnsCorrectData()", file="JobMethodTests.cs", label="Assert.Equal(''System.Exception'', serializedData[''ExceptionType''])", span="32-32"];
m5_19 [cluster="HangFire.Core.Tests.States.FailedStateFacts.SerializeData_ReturnsCorrectData()", file="JobMethodTests.cs", label="Assert.Equal(''Message'', serializedData[''ExceptionMessage''])", span="33-33"];
m5_21 [cluster="HangFire.Core.Tests.States.FailedStateFacts.SerializeData_ReturnsCorrectData()", file="JobMethodTests.cs", label="Exit HangFire.Core.Tests.States.FailedStateFacts.SerializeData_ReturnsCorrectData()", span="25-25"];
m5_0 [cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", file="JobMethodTests.cs", label="Entry HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", span="11-11"];
m5_1 [cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", file="JobMethodTests.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => new FailedState(null))", span="13-14"];
m5_2 [cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", file="JobMethodTests.cs", label="Exit HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", span="11-11"];
m5_4 [cluster="lambda expression", file="JobMethodTests.cs", label="Entry lambda expression", span="14-14"];
m5_5 [cluster="lambda expression", file="JobMethodTests.cs", label="new FailedState(null)", span="14-14"];
m5_6 [cluster="lambda expression", file="JobMethodTests.cs", label="Exit lambda expression", span="14-14"];
m5_22 [cluster="System.Exception.Exception(string)", file="JobMethodTests.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m5_24 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="JobMethodTests.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m6_0 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="ProcessingState.cs", label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="27-27"];
m6_1 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", color=red, community=0, file="ProcessingState.cs", label="0: ServerName = serverName", span="29-29"];
m6_2 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="ProcessingState.cs", label="Exit HangFire.States.ProcessingState.ProcessingState(string)", span="27-27"];
m6_7 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ProcessingState.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
m6_6 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ProcessingState.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m6_3 [cluster="HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", file="ProcessingState.cs", label="Entry HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", span="35-35"];
m6_4 [cluster="HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", color=green, community=0, file="ProcessingState.cs", label="0: return new Dictionary<string, string>\r\n                {\r\n                    { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''ServerName'', ServerName }\r\n                };", span="37-41"];
m6_5 [cluster="HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", file="ProcessingState.cs", label="Exit HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", span="35-35"];
m6_8 [file="ProcessingState.cs", label="HangFire.States.ProcessingState", span=""];
m7_4 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureSetup()", span="33-33"];
m7_5 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup()", file="ProcessingState.feature.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="35-35"];
m7_6 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup()", file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Processing state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="36-37"];
m7_7 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup()", file="ProcessingState.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="38-38"];
m7_8 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureSetup()", span="33-33"];
m7_26 [cluster="Unk.OnScenarioStart", file="ProcessingState.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m7_30 [cluster="Unk.CollectScenarioErrors", file="ProcessingState.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m7_22 [cluster="Unk.OnScenarioEnd", file="ProcessingState.feature.cs", label="Entry Unk.OnScenarioEnd", span=""];
m7_73 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", span="150-150"];
m7_74 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying, it should remove the job from the processing set'', ((string[])(null)))", span="152-152"];
m7_75 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="154-154"];
m7_76 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="this.FeatureBackground()", span="156-156"];
m7_77 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="158-158"];
m7_78 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="160-160"];
m7_79 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="testRunner.Then(''the processing set should not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="162-162"];
m7_80 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="this.ScenarioCleanup()", span="164-164"];
m7_81 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", span="150-150"];
m7_36 [cluster="Unk.And", file="ProcessingState.feature.cs", label="Entry Unk.And", span=""];
m7_9 [cluster="Unk.GetTestRunner", file="ProcessingState.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m7_82 [cluster="HangFire.Tests.States.ProcessingStateFeature.FixtureData.FixtureData()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.FixtureData.FixtureData()", span="172-172"];
m7_83 [cluster="HangFire.Tests.States.ProcessingStateFeature.FixtureData.FixtureData()", file="ProcessingState.feature.cs", label="ProcessingStateFeature.FeatureSetup()", span="174-174"];
m7_84 [cluster="HangFire.Tests.States.ProcessingStateFeature.FixtureData.FixtureData()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FixtureData.FixtureData()", span="172-172"];
m7_3 [cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", span="47-47"];
m7_18 [cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", span="47-47"];
m7_19 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", span="51-51"];
m7_20 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", file="ProcessingState.feature.cs", label="testRunner.OnScenarioEnd()", span="53-53"];
m7_21 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", span="51-51"];
m7_17 [cluster="Unk.OnFeatureEnd", file="ProcessingState.feature.cs", label="Entry Unk.OnFeatureEnd", span=""];
m7_39 [cluster="HangFire.Tests.States.ProcessingStateFeature.System.IDisposable.Dispose()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.System.IDisposable.Dispose()", span="80-80"];
m7_40 [cluster="HangFire.Tests.States.ProcessingStateFeature.System.IDisposable.Dispose()", file="ProcessingState.feature.cs", label="this.ScenarioTearDown()", span="82-82"];
m7_41 [cluster="HangFire.Tests.States.ProcessingStateFeature.System.IDisposable.Dispose()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.System.IDisposable.Dispose()", span="80-80"];
m7_11 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="ProcessingState.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m7_37 [cluster="HangFire.Tests.States.ProcessingStateFeature.SetFixture(HangFire.Tests.States.ProcessingStateFeature.FixtureData)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.SetFixture(HangFire.Tests.States.ProcessingStateFeature.FixtureData)", span="76-76"];
m7_38 [cluster="HangFire.Tests.States.ProcessingStateFeature.SetFixture(HangFire.Tests.States.ProcessingStateFeature.FixtureData)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.SetFixture(HangFire.Tests.States.ProcessingStateFeature.FixtureData)", span="76-76"];
m7_42 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", span="88-88"];
m7_43 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", color=red, community=0, file="ProcessingState.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name should be \'Processing\''', ((string[])(null)))", span="90-90"];
m7_44 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", color=red, community=0, file="ProcessingState.feature.cs", label="1: this.ScenarioSetup(scenarioInfo)", span="92-92"];
m7_45 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", color=red, community=0, file="ProcessingState.feature.cs", label="0: this.FeatureBackground()", span="94-94"];
m7_46 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", color=red, community=0, file="ProcessingState.feature.cs", label="1: testRunner.Then(''the state name should be equal to \'Processing\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="96-96"];
m7_47 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", color=red, community=0, file="ProcessingState.feature.cs", label="0: this.ScenarioCleanup()", span="98-98"];
m7_48 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", span="88-88"];
m7_72 [cluster="Unk.When", file="ProcessingState.feature.cs", label="Entry Unk.When", span=""];
m7_63 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", span="130-130"];
m7_64 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying, it should add the job to the processing set'', ((string[])(null)))", span="132-132"];
m7_65 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="134-134"];
m7_66 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="this.FeatureBackground()", span="136-136"];
m7_67 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="138-138"];
m7_68 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="testRunner.Then(''the processing set should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="140-140"];
m7_69 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="testRunner.And(''processing timestamp should be set to UtcNow'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="142-142"];
m7_70 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="this.ScenarioCleanup()", span="144-144"];
m7_71 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", span="130-130"];
m7_62 [cluster="Unk.AddRow", file="ProcessingState.feature.cs", label="Entry Unk.AddRow", span=""];
m7_0 [cluster="HangFire.Tests.States.ProcessingStateFeature.ProcessingStateFeature()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ProcessingStateFeature()", span="28-28"];
m7_1 [cluster="HangFire.Tests.States.ProcessingStateFeature.ProcessingStateFeature()", file="ProcessingState.feature.cs", label="this.TestInitialize()", span="30-30"];
m7_2 [cluster="HangFire.Tests.States.ProcessingStateFeature.ProcessingStateFeature()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ProcessingStateFeature()", span="28-28"];
m7_49 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="ProcessingState.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m7_27 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="61-61"];
m7_28 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ProcessingState.feature.cs", label="testRunner.CollectScenarioErrors()", span="63-63"];
m7_29 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="61-61"];
m7_50 [cluster="Unk.Then", file="ProcessingState.feature.cs", label="Entry Unk.Then", span=""];
m7_35 [cluster="Unk.Given", file="ProcessingState.feature.cs", label="Entry Unk.Given", span=""];
m7_51 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="104-104"];
m7_52 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=0, file="ProcessingState.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should have the correct properties set'', ((string[])(null)))", span="106-106"];
m7_53 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=0, file="ProcessingState.feature.cs", label="1: this.ScenarioSetup(scenarioInfo)", span="108-108"];
m7_54 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=0, file="ProcessingState.feature.cs", label="0: this.FeatureBackground()", span="110-110"];
m7_55 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=1, file="ProcessingState.feature.cs", label="1: TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="112-114"];
m7_56 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=1, file="ProcessingState.feature.cs", label="0: table1.AddRow(new string[] {\r\n                        ''StartedAt'',\r\n                        ''<UtcNow timestamp>''})", span="115-117"];
m7_57 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=1, file="ProcessingState.feature.cs", label="1: table1.AddRow(new string[] {\r\n                        ''ServerName'',\r\n                        ''TestServer''})", span="118-120"];
m7_58 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=0, file="ProcessingState.feature.cs", label="0: testRunner.Then(''properties table should contain the following items:'', ((string)(null)), table1, ''Then '')", span="122-122"];
m7_59 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=0, file="ProcessingState.feature.cs", label="1: this.ScenarioCleanup()", span="124-124"];
m7_60 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="104-104"];
m7_10 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="ProcessingState.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m7_61 [cluster="TechTalk.SpecFlow.Table.cstr", file="ProcessingState.feature.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m7_23 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="56-56"];
m7_24 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ProcessingState.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="58-58"];
m7_25 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="56-56"];
m7_31 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", span="66-66"];
m7_32 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="70-70"];
m7_33 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs", label="testRunner.And(''the Processing state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="72-72"];
m7_34 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", span="66-66"];
m7_12 [cluster="Unk.OnFeatureStart", file="ProcessingState.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m7_13 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", span="41-41"];
m7_14 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", file="ProcessingState.feature.cs", label="testRunner.OnFeatureEnd()", span="43-43"];
m7_15 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", file="ProcessingState.feature.cs", label="testRunner = null", span="44-44"];
m7_16 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", span="41-41"];
m7_85 [cluster="HangFire.Tests.States.ProcessingStateFeature.FixtureData.System.IDisposable.Dispose()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.FixtureData.System.IDisposable.Dispose()", span="177-177"];
m7_86 [cluster="HangFire.Tests.States.ProcessingStateFeature.FixtureData.System.IDisposable.Dispose()", file="ProcessingState.feature.cs", label="ProcessingStateFeature.FeatureTearDown()", span="179-179"];
m7_87 [cluster="HangFire.Tests.States.ProcessingStateFeature.FixtureData.System.IDisposable.Dispose()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FixtureData.System.IDisposable.Dispose()", span="177-177"];
m7_88 [file="ProcessingState.feature.cs", label="HangFire.Tests.States.ProcessingStateFeature", span=""];
m9_12 [cluster="Hangfire.Server.IServerComponent.Execute(System.Threading.CancellationToken)", file="ScheduledState.cs", label="Entry Hangfire.Server.IServerComponent.Execute(System.Threading.CancellationToken)", span="22-22"];
m9_13 [cluster="Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="Entry Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", span="48-48"];
m9_14 [cluster="Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="process == null", span="50-50"];
m9_16 [cluster="Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="!(process is IServerComponent || process is IBackgroundProcess)", span="51-51"];
m9_18 [cluster="Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="return Task.Factory.StartNew(\r\n                () => RunProcess(process, context),\r\n                TaskCreationOptions.LongRunning);", span="56-58"];
m9_15 [cluster="Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="throw new ArgumentNullException(''process'');", span="50-50"];
m9_17 [cluster="Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="throw new ArgumentOutOfRangeException(''process'', ''Long-running process must be of type IServerComponent or IBackgroundProcess.'');", span="53-53"];
m9_19 [cluster="Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="Exit Hangfire.Server.BackgroundProcessExtensions.CreateTask(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", span="48-48"];
m9_20 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ScheduledState.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m9_0 [cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="Entry Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", span="26-26"];
m9_1 [cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="!(process is IServerComponent || process is IBackgroundProcess)", span="28-28"];
m9_3 [cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="var backgroundProcess = process as IBackgroundProcess", span="33-33"];
m9_5 [cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="backgroundProcess.Execute(context)", span="36-36"];
m9_6 [cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="var component = process as IServerComponent", span="40-40"];
m9_8 [cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="component.Execute(context.CancellationToken)", span="43-43"];
m9_2 [cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="throw new ArgumentOutOfRangeException(''process'', ''Long-running process must be of type IServerComponent or IBackgroundProcess.'');", span="30-30"];
m9_4 [cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="backgroundProcess != null", span="34-34"];
m9_7 [cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="component != null", span="41-41"];
m9_9 [cluster="Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="Exit Hangfire.Server.BackgroundProcessExtensions.Execute(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", span="26-26"];
m9_10 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", file="ScheduledState.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0"];
m9_40 [cluster="string.Format(string, object)", file="ScheduledState.cs", label="Entry string.Format(string, object)", span="0-0"];
m9_21 [cluster="System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.Tasks.TaskCreationOptions)", file="ScheduledState.cs", label="Entry System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.Tasks.TaskCreationOptions)", span="0-0"];
m9_25 [cluster="Hangfire.Server.BackgroundProcessExtensions.RunProcess(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="Entry Hangfire.Server.BackgroundProcessExtensions.RunProcess(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", span="61-61"];
m9_26 [cluster="Hangfire.Server.BackgroundProcessExtensions.RunProcess(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="TrySetThreadName(process.ToString())", span="66-66"];
m9_27 [cluster="Hangfire.Server.BackgroundProcessExtensions.RunProcess(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="var logger = LogProvider.GetLogger(process.ToString())", span="70-70"];
m9_28 [cluster="Hangfire.Server.BackgroundProcessExtensions.RunProcess(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="logger.DebugFormat(''Server component '{0}' started.'', process)", span="71-71"];
m9_29 [cluster="Hangfire.Server.BackgroundProcessExtensions.RunProcess(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="process.Execute(context)", span="75-75"];
m9_32 [cluster="Hangfire.Server.BackgroundProcessExtensions.RunProcess(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="logger.FatalException(\r\n                    String.Format(\r\n                        ''Fatal error occurred during execution of '{0}' component. It will be stopped. See the exception for details.'',\r\n                        process),\r\n                    ex)", span="82-86"];
m9_33 [cluster="Hangfire.Server.BackgroundProcessExtensions.RunProcess(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="logger.DebugFormat(''Server component '{0}' stopped.'', process)", span="89-89"];
m9_30 [cluster="Hangfire.Server.BackgroundProcessExtensions.RunProcess(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label=OperationCanceledException, span="77-77"];
m9_31 [cluster="Hangfire.Server.BackgroundProcessExtensions.RunProcess(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label=Exception, span="80-80"];
m9_34 [cluster="Hangfire.Server.BackgroundProcessExtensions.RunProcess(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="Exit Hangfire.Server.BackgroundProcessExtensions.RunProcess(Hangfire.Server.ILongRunningProcess, Hangfire.Server.BackgroundProcessContext)", span="61-61"];
m9_37 [cluster="Hangfire.Logging.LogProvider.GetLogger(string)", file="ScheduledState.cs", label="Entry Hangfire.Logging.LogProvider.GetLogger(string)", span="363-363"];
m9_38 [cluster="Hangfire.Logging.ILog.DebugFormat(string, params object[])", file="ScheduledState.cs", label="Entry Hangfire.Logging.ILog.DebugFormat(string, params object[])", span="122-122"];
m9_41 [cluster="Hangfire.Logging.ILog.FatalException(string, System.Exception)", file="ScheduledState.cs", label="Entry Hangfire.Logging.ILog.FatalException(string, System.Exception)", span="188-188"];
m9_36 [cluster="Hangfire.Server.BackgroundProcessExtensions.TrySetThreadName(string)", file="ScheduledState.cs", label="Entry Hangfire.Server.BackgroundProcessExtensions.TrySetThreadName(string)", span="92-92"];
m9_42 [cluster="Hangfire.Server.BackgroundProcessExtensions.TrySetThreadName(string)", file="ScheduledState.cs", label="Thread.CurrentThread.Name = name", span="96-96"];
m9_43 [cluster="Hangfire.Server.BackgroundProcessExtensions.TrySetThreadName(string)", file="ScheduledState.cs", label=InvalidOperationException, span="98-98"];
m9_44 [cluster="Hangfire.Server.BackgroundProcessExtensions.TrySetThreadName(string)", file="ScheduledState.cs", label="Exit Hangfire.Server.BackgroundProcessExtensions.TrySetThreadName(string)", span="92-92"];
m9_11 [cluster="Hangfire.Server.IBackgroundProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="Entry Hangfire.Server.IBackgroundProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="24-24"];
m9_39 [cluster="Hangfire.Server.ILongRunningProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="ScheduledState.cs", label="Entry Hangfire.Server.ILongRunningProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="26-26"];
m9_22 [cluster="lambda expression", file="ScheduledState.cs", label="Entry lambda expression", span="57-57"];
m9_23 [cluster="lambda expression", file="ScheduledState.cs", label="RunProcess(process, context)", span="57-57"];
m9_24 [cluster="lambda expression", file="ScheduledState.cs", label="Exit lambda expression", span="57-57"];
m9_35 [cluster="object.ToString()", file="ScheduledState.cs", label="Entry object.ToString()", span="0-0"];
m9_45 [file="ScheduledState.cs", label="Hangfire.Server.ILongRunningProcess", span=""];
m9_46 [file="ScheduledState.cs", label="Hangfire.Server.BackgroundProcessContext", span=""];
m10_26 [cluster="Unk.OnScenarioStart", file="ScheduledState.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m10_84 [cluster="HangFire.Tests.States.ScheduledStateFeature.FixtureData.System.IDisposable.Dispose()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.FixtureData.System.IDisposable.Dispose()", span="175-175"];
m10_85 [cluster="HangFire.Tests.States.ScheduledStateFeature.FixtureData.System.IDisposable.Dispose()", file="ScheduledState.feature.cs", label="ScheduledStateFeature.FeatureTearDown()", span="177-177"];
m10_86 [cluster="HangFire.Tests.States.ScheduledStateFeature.FixtureData.System.IDisposable.Dispose()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.FixtureData.System.IDisposable.Dispose()", span="175-175"];
m10_30 [cluster="Unk.CollectScenarioErrors", file="ScheduledState.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m10_22 [cluster="Unk.OnScenarioEnd", file="ScheduledState.feature.cs", label="Entry Unk.OnScenarioEnd", span=""];
m10_13 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureTearDown()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.FeatureTearDown()", span="41-41"];
m10_14 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureTearDown()", file="ScheduledState.feature.cs", label="testRunner.OnFeatureEnd()", span="43-43"];
m10_15 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureTearDown()", file="ScheduledState.feature.cs", label="testRunner = null", span="44-44"];
m10_16 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureTearDown()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.FeatureTearDown()", span="41-41"];
m10_72 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", span="148-148"];
m10_73 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying, it should remove the job from the schedule'', ((string[])(null)))", span="150-150"];
m10_74 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="152-152"];
m10_75 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="this.FeatureBackground()", span="154-154"];
m10_76 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156"];
m10_77 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="158-158"];
m10_78 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="testRunner.Then(''the schedule should not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="160-160"];
m10_79 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="this.ScenarioCleanup()", span="162-162"];
m10_80 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSchedule()", span="148-148"];
m10_63 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", span="130-130"];
m10_64 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying, it should add the job to the schedule at tomorrow'', ((string[])(null)))", span="132-132"];
m10_65 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="134-134"];
m10_66 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="this.FeatureBackground()", span="136-136"];
m10_67 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="138-138"];
m10_68 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="testRunner.Then(''the schedule should contain the job that will be enqueued tomorrow'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="140-140"];
m10_69 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="this.ScenarioCleanup()", span="142-142"];
m10_70 [cluster="HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.AfterApplyingItShouldAddTheJobToTheScheduleAtTomorrow()", span="130-130"];
m10_36 [cluster="Unk.And", file="ScheduledState.feature.cs", label="Entry Unk.And", span=""];
m10_9 [cluster="Unk.GetTestRunner", file="ScheduledState.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m10_42 [cluster="HangFire.Tests.States.ScheduledStateFeature.StateNameShouldBeScheduled()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.StateNameShouldBeScheduled()", span="88-88"];
m10_43 [cluster="HangFire.Tests.States.ScheduledStateFeature.StateNameShouldBeScheduled()", color=red, community=0, file="ScheduledState.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name should be \'Scheduled\''', ((string[])(null)))", span="90-90"];
m10_44 [cluster="HangFire.Tests.States.ScheduledStateFeature.StateNameShouldBeScheduled()", color=red, community=0, file="ScheduledState.feature.cs", label="1: this.ScenarioSetup(scenarioInfo)", span="92-92"];
m10_45 [cluster="HangFire.Tests.States.ScheduledStateFeature.StateNameShouldBeScheduled()", color=red, community=0, file="ScheduledState.feature.cs", label="0: this.FeatureBackground()", span="94-94"];
m10_46 [cluster="HangFire.Tests.States.ScheduledStateFeature.StateNameShouldBeScheduled()", color=red, community=0, file="ScheduledState.feature.cs", label="1: testRunner.Then(''the state name should be equal to \'Scheduled\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="96-96"];
m10_47 [cluster="HangFire.Tests.States.ScheduledStateFeature.StateNameShouldBeScheduled()", color=red, community=0, file="ScheduledState.feature.cs", label="0: this.ScenarioCleanup()", span="98-98"];
m10_48 [cluster="HangFire.Tests.States.ScheduledStateFeature.StateNameShouldBeScheduled()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.StateNameShouldBeScheduled()", span="88-88"];
m10_31 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureBackground()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.FeatureBackground()", span="66-66"];
m10_32 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureBackground()", file="ScheduledState.feature.cs", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="70-70"];
m10_33 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureBackground()", file="ScheduledState.feature.cs", label="testRunner.And(''the Scheduled state with the date set to tomorrow'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="72-72"];
m10_34 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureBackground()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.FeatureBackground()", span="66-66"];
m10_37 [cluster="HangFire.Tests.States.ScheduledStateFeature.SetFixture(HangFire.Tests.States.ScheduledStateFeature.FixtureData)", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.SetFixture(HangFire.Tests.States.ScheduledStateFeature.FixtureData)", span="76-76"];
m10_38 [cluster="HangFire.Tests.States.ScheduledStateFeature.SetFixture(HangFire.Tests.States.ScheduledStateFeature.FixtureData)", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.SetFixture(HangFire.Tests.States.ScheduledStateFeature.FixtureData)", span="76-76"];
m10_17 [cluster="Unk.OnFeatureEnd", file="ScheduledState.feature.cs", label="Entry Unk.OnFeatureEnd", span=""];
m10_11 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="ScheduledState.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m10_3 [cluster="HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", span="47-47"];
m10_18 [cluster="HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.TestInitialize()", span="47-47"];
m10_39 [cluster="HangFire.Tests.States.ScheduledStateFeature.System.IDisposable.Dispose()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.System.IDisposable.Dispose()", span="80-80"];
m10_40 [cluster="HangFire.Tests.States.ScheduledStateFeature.System.IDisposable.Dispose()", file="ScheduledState.feature.cs", label="this.ScenarioTearDown()", span="82-82"];
m10_41 [cluster="HangFire.Tests.States.ScheduledStateFeature.System.IDisposable.Dispose()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.System.IDisposable.Dispose()", span="80-80"];
m10_71 [cluster="Unk.When", file="ScheduledState.feature.cs", label="Entry Unk.When", span=""];
m10_19 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", span="51-51"];
m10_20 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", file="ScheduledState.feature.cs", label="testRunner.OnScenarioEnd()", span="53-53"];
m10_21 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.ScenarioTearDown()", span="51-51"];
m10_62 [cluster="Unk.AddRow", file="ScheduledState.feature.cs", label="Entry Unk.AddRow", span=""];
m10_81 [cluster="HangFire.Tests.States.ScheduledStateFeature.FixtureData.FixtureData()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.FixtureData.FixtureData()", span="170-170"];
m10_82 [cluster="HangFire.Tests.States.ScheduledStateFeature.FixtureData.FixtureData()", file="ScheduledState.feature.cs", label="ScheduledStateFeature.FeatureSetup()", span="172-172"];
m10_83 [cluster="HangFire.Tests.States.ScheduledStateFeature.FixtureData.FixtureData()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.FixtureData.FixtureData()", span="170-170"];
m10_0 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScheduledStateFeature()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.ScheduledStateFeature()", span="28-28"];
m10_1 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScheduledStateFeature()", file="ScheduledState.feature.cs", label="this.TestInitialize()", span="30-30"];
m10_2 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScheduledStateFeature()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.ScheduledStateFeature()", span="28-28"];
m10_49 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="ScheduledState.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m10_50 [cluster="Unk.Then", file="ScheduledState.feature.cs", label="Entry Unk.Then", span=""];
m10_35 [cluster="Unk.Given", file="ScheduledState.feature.cs", label="Entry Unk.Given", span=""];
m10_10 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="ScheduledState.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m10_23 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="56-56"];
m10_24 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ScheduledState.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="58-58"];
m10_25 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="56-56"];
m10_27 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioCleanup()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.ScenarioCleanup()", span="61-61"];
m10_28 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioCleanup()", file="ScheduledState.feature.cs", label="testRunner.CollectScenarioErrors()", span="63-63"];
m10_29 [cluster="HangFire.Tests.States.ScheduledStateFeature.ScenarioCleanup()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.ScenarioCleanup()", span="61-61"];
m10_51 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="104-104"];
m10_52 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=0, file="ScheduledState.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should have the correct properties set'', ((string[])(null)))", span="106-106"];
m10_53 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=0, file="ScheduledState.feature.cs", label="1: this.ScenarioSetup(scenarioInfo)", span="108-108"];
m10_54 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=0, file="ScheduledState.feature.cs", label="0: this.FeatureBackground()", span="110-110"];
m10_55 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=green, community=0, file="ScheduledState.feature.cs", label="1: TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="112-114"];
m10_56 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=green, community=0, file="ScheduledState.feature.cs", label="0: table1.AddRow(new string[] {\r\n                        ''ScheduledAt'',\r\n                        ''<UtcNow timestamp>''})", span="115-117"];
m10_57 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=1, file="ScheduledState.feature.cs", label="1: table1.AddRow(new string[] {\r\n                        ''EnqueueAt'',\r\n                        ''<Tomorrow timestamp>''})", span="118-120"];
m10_58 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=0, file="ScheduledState.feature.cs", label="1: testRunner.Then(''properties table should contain the following items:'', ((string)(null)), table1, ''Then '')", span="122-122"];
m10_59 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", color=red, community=0, file="ScheduledState.feature.cs", label="0: this.ScenarioCleanup()", span="124-124"];
m10_60 [cluster="HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="104-104"];
m10_61 [cluster="TechTalk.SpecFlow.Table.cstr", file="ScheduledState.feature.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m10_12 [cluster="Unk.OnFeatureStart", file="ScheduledState.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m10_4 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", file="ScheduledState.feature.cs", label="Entry HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", span="33-33"];
m10_5 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", file="ScheduledState.feature.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="35-35"];
m10_6 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", file="ScheduledState.feature.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Scheduled state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="36-37"];
m10_7 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", file="ScheduledState.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="38-38"];
m10_8 [cluster="HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", file="ScheduledState.feature.cs", label="Exit HangFire.Tests.States.ScheduledStateFeature.FeatureSetup()", span="33-33"];
m10_87 [file="ScheduledState.feature.cs", label="HangFire.Tests.States.ScheduledStateFeature", span=""];
m12_0 [cluster="HangFire.States.SucceededState.GetProperties(HangFire.Common.JobMethod)", file="SucceededState.cs", label="Entry HangFire.States.SucceededState.GetProperties(HangFire.Common.JobMethod)", span="31-31"];
m12_1 [cluster="HangFire.States.SucceededState.GetProperties(HangFire.Common.JobMethod)", file="SucceededState.cs", label="return new Dictionary<string, string>\r\n                {\r\n                    { ''SucceededAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) }\r\n                };", span="33-36"];
m12_2 [cluster="HangFire.States.SucceededState.GetProperties(HangFire.Common.JobMethod)", file="SucceededState.cs", label="Exit HangFire.States.SucceededState.GetProperties(HangFire.Common.JobMethod)", span="31-31"];
m12_3 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SucceededState.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m12_5 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="SucceededState.cs", label="Entry HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", span="41-41"];
m12_6 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="SucceededState.cs", label="context.Transaction.Jobs.Expire(context.JobId, JobExpirationTimeout)", span="44-44"];
m12_7 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="SucceededState.cs", label="context.Transaction.Counters.Increment(''stats:succeeded'')", span="45-45"];
m12_8 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="SucceededState.cs", label="Exit HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", span="41-41"];
m12_16 [cluster="HangFire.Storage.IWriteOnlyPersistentJob.Persist(string)", file="SucceededState.cs", label="Entry HangFire.Storage.IWriteOnlyPersistentJob.Persist(string)", span="8-8"];
m12_10 [cluster="HangFire.Storage.IWriteOnlyPersistentCounter.Increment(string)", file="SucceededState.cs", label="Entry HangFire.Storage.IWriteOnlyPersistentCounter.Increment(string)", span="6-6"];
m12_15 [cluster="HangFire.Storage.IWriteOnlyPersistentCounter.Decrement(string)", file="SucceededState.cs", label="Entry HangFire.Storage.IWriteOnlyPersistentCounter.Decrement(string)", span="9-9"];
m12_9 [cluster="HangFire.Storage.IWriteOnlyPersistentJob.Expire(string, System.TimeSpan)", file="SucceededState.cs", label="Entry HangFire.Storage.IWriteOnlyPersistentJob.Expire(string, System.TimeSpan)", span="7-7"];
m12_11 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", file="SucceededState.cs", label="Entry HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", span="48-48"];
m12_12 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", file="SucceededState.cs", label="context.Transaction.Counters.Decrement(''stats:succeeded'')", span="50-50"];
m12_13 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", file="SucceededState.cs", label="context.Transaction.Jobs.Persist(context.JobId)", span="51-51"];
m12_14 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", file="SucceededState.cs", label="Exit HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", span="48-48"];
m12_4 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="SucceededState.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
m13_17 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SucceededState.feature.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m13_20 [cluster="Hangfire.Common.GlobalJobFilterCollection.Add(object)", file="SucceededState.feature.cs", label="Entry Hangfire.Common.GlobalJobFilterCollection.Add(object)", span="56-56"];
m13_23 [cluster="IAppBuilder.MapHangfireDashboard(string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>)", file="SucceededState.feature.cs", label="Entry IAppBuilder.MapHangfireDashboard(string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>)", span="88-88"];
m13_18 [cluster="Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", file="SucceededState.feature.cs", label="Entry Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", span="24-24"];
m13_0 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="Entry Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", span="34-34"];
m13_1 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="app == null", span="38-38"];
m13_3 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="configurationAction == null", span="39-39"];
m13_6 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="configurationAction(configuration)", span="42-42"];
m13_14 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="app.RunHangfireServer(server())", span="61-61"];
m13_15 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="app.MapHangfireDashboard(configuration.DashboardPath, configuration.AppPath, configuration.AuthorizationFilters)", span="64-64"];
m13_2 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="throw new ArgumentNullException(''app'');", span="38-38"];
m13_4 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="throw new ArgumentNullException(''configurationAction'');", span="39-39"];
m13_5 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="var configuration = new BootstrapperConfiguration()", span="41-41"];
m13_7 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="configuration.Activator != null", span="44-44"];
m13_8 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="JobActivator.Current = configuration.Activator", span="46-46"];
m13_9 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="configuration.Storage != null", span="49-49"];
m13_10 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="JobStorage.Current = configuration.Storage", span="51-51"];
m13_11 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="configuration.Filters", span="54-54"];
m13_13 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="configuration.Servers", span="59-59"];
m13_12 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="GlobalJobFilters.Filters.Add(filter)", span="56-56"];
m13_16 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="SucceededState.feature.cs", label="Exit Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", span="34-34"];
m13_22 [cluster="IAppBuilder.RunHangfireServer(Hangfire.BackgroundJobServer)", file="SucceededState.feature.cs", label="Entry IAppBuilder.RunHangfireServer(Hangfire.BackgroundJobServer)", span="38-38"];
m13_19 [cluster="System.Action<T>.Invoke(T)", file="SucceededState.feature.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m13_21 [cluster="System.Func<TResult>.Invoke()", file="SucceededState.feature.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_0 -> m0_1  [key=0, style=solid];
m0_12 -> m0_13  [color=green, key=0, style=solid];
m0_12 -> m0_55  [color=green, key=2, style=dotted];
m0_10 -> m0_12  [color=green, key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_13 -> m0_14  [color=green, key=0, style=solid];
m0_13 -> m0_61  [key=2, style=dotted];
m0_13 -> m0_63  [key=2, style=dotted];
m0_14 -> m0_15  [color=green, key=0, style=solid];
m0_14 -> m0_55  [color=green, key=2, style=dotted];
m0_15 -> m0_16  [color=green, key=0, style=solid];
m0_15 -> m0_61  [key=2, style=dotted];
m0_15 -> m0_63  [key=2, style=dotted];
m0_16 -> m0_17  [color=green, key=0, style=solid];
m0_16 -> m0_55  [color=green, key=2, style=dotted];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_64  [key=2, style=dotted];
m0_17 -> m0_65  [key=2, style=dotted];
m0_17 -> m0_66  [key=2, style=dotted];
m0_1 -> m0_55  [key=2, style=dotted];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_56  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_57  [key=2, style=dotted];
m0_4 -> m0_7  [color=darkseagreen4, key=1, label=from, style=dashed];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_57  [key=2, style=dotted];
m0_5 -> m0_7  [color=darkseagreen4, key=1, label=perPage, style=dashed];
m0_7 -> m0_10  [color=darkseagreen4, key=1, label=pager, style=dashed];
m0_7 -> m0_17  [color=darkseagreen4, key=1, label=pager, style=dashed];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_59  [key=2, style=dotted];
m0_7 -> m0_60  [key=2, style=dotted];
m0_7 -> m0_61  [key=2, style=dotted];
m0_7 -> m0_53  [color=darkseagreen4, key=1, label=pager, style=dashed];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_55  [key=2, style=dotted];
m0_11 -> m0_55  [key=2, style=dotted];
m0_11 -> m0_54  [key=0, style=solid];
m0_18 -> m0_55  [key=2, style=dotted];
m0_18 -> m0_19  [key=0, style=solid];
m0_20 -> m0_55  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid];
m0_21 -> m0_21  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_63  [key=2, style=dotted];
m0_21 -> m0_23  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_22 -> m0_55  [key=2, style=dotted];
m0_22 -> m0_23  [key=0, style=solid];
m0_23 -> m0_23  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_63  [key=2, style=dotted];
m0_23 -> m0_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_24 -> m0_55  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_26 -> m0_55  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_27 -> m0_27  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_63  [key=2, style=dotted];
m0_27 -> m0_30  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_28 -> m0_55  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_29 -> m0_55  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_30 -> m0_30  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_61  [key=2, style=dotted];
m0_30 -> m0_63  [key=2, style=dotted];
m0_30 -> m0_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_31 -> m0_55  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_32 -> m0_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_67  [key=2, style=dotted];
m0_32 -> m0_66  [key=2, style=dotted];
m0_32 -> m0_34  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_33 -> m0_55  [key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid];
m0_35 -> m0_55  [key=2, style=dotted];
m0_35 -> m0_36  [key=0, style=solid];
m0_36 -> m0_55  [key=2, style=dotted];
m0_36 -> m0_37  [key=0, style=solid];
m0_37 -> m0_37  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_68  [key=2, style=dotted];
m0_37 -> m0_63  [key=2, style=dotted];
m0_37 -> m0_39  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_38 -> m0_55  [key=2, style=dotted];
m0_38 -> m0_39  [key=0, style=solid];
m0_39 -> m0_39  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_63  [key=2, style=dotted];
m0_39 -> m0_41  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_40 -> m0_55  [key=2, style=dotted];
m0_40 -> m0_41  [key=0, style=solid];
m0_41 -> m0_41  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_61  [key=2, style=dotted];
m0_41 -> m0_63  [key=2, style=dotted];
m0_41 -> m0_43  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_42 -> m0_55  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_43 -> m0_43  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_69  [key=2, style=dotted];
m0_43 -> m0_66  [key=2, style=dotted];
m0_43 -> m0_45  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_44 -> m0_55  [key=2, style=dotted];
m0_44 -> m0_45  [key=0, style=solid];
m0_46 -> m0_55  [key=2, style=dotted];
m0_46 -> m0_47  [key=0, style=solid];
m0_47 -> m0_47  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_68  [key=2, style=dotted];
m0_47 -> m0_63  [key=2, style=dotted];
m0_47 -> m0_49  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_48 -> m0_55  [key=2, style=dotted];
m0_48 -> m0_49  [key=0, style=solid];
m0_49 -> m0_49  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_63  [key=2, style=dotted];
m0_50 -> m0_55  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_51 -> m0_55  [key=2, style=dotted];
m0_51 -> m0_19  [key=0, style=solid];
m0_52 -> m0_55  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_70  [key=2, style=dotted];
m0_53 -> m0_65  [key=2, style=dotted];
m0_53 -> m0_66  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_58  [key=2, style=dotted];
m0_6 -> m0_8  [color=darkseagreen4, key=1, label=monitor, style=dashed];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_62  [key=2, style=dotted];
m0_8 -> m0_19  [color=darkseagreen4, key=1, label=scheduledJobs, style=dashed];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_21  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_19 -> m0_52  [key=0, style=solid];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_25 -> m0_29  [key=0, style=solid];
m0_25 -> m0_30  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_25 -> m0_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_36  [key=0, style=solid];
m0_34 -> m0_37  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_34 -> m0_34  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_47  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_45 -> m0_51  [key=0, style=solid];
m0_45 -> m0_45  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_54 -> m0_0  [color=blue, key=0, style=bold];
m0_71 -> m0_12  [color=green, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_14  [color=green, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_16  [color=green, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_2  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_5  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_7  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_9  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_18  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_20  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_21  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_22  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_27  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_29  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_30  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_31  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_33  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_35  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_36  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_37  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_38  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_39  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_40  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_41  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_42  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_43  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_44  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_46  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_47  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_48  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_49  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_50  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_51  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_52  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_71 -> m0_53  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_3  [color=green, key=1, label="System.Exception", style=dashed];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [color=green, key=0, style=solid];
m2_3 -> m2_4  [color=green, key=0, style=solid];
m2_2 -> m2_4  [key=0, style=solid];
m2_2 -> m2_5  [key=2, style=dotted];
m2_4 -> m2_0  [color=blue, key=0, style=bold];
m2_6 -> m2_7  [color=green, key=0, style=solid];
m2_7 -> m2_8  [color=green, key=0, style=solid];
m2_7 -> m2_9  [color=green, key=2, style=dotted];
m2_7 -> m2_10  [color=green, key=2, style=dotted];
m2_7 -> m2_11  [color=green, key=2, style=dotted];
m2_7 -> m2_12  [color=green, key=2, style=dotted];
m2_8 -> m2_6  [color=blue, key=0, style=bold];
m2_13 -> m2_3  [color=green, key=1, label="HangFire.States.FailedState", style=dashed];
m2_13 -> m2_7  [color=green, key=1, label="HangFire.States.FailedState", style=dashed];
m3_164 -> m3_165  [key=0, style=solid];
m3_165 -> m3_166  [key=0, style=solid];
m3_165 -> m3_92  [key=2, style=dotted];
m3_166 -> m3_167  [key=0, style=solid];
m3_166 -> m3_93  [key=2, style=dotted];
m3_167 -> m3_168  [key=0, style=solid];
m3_167 -> m3_94  [key=2, style=dotted];
m3_167 -> m3_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_168 -> m3_164  [color=blue, key=0, style=bold];
m3_79 -> m3_80  [key=0, style=solid];
m3_80 -> m3_81  [key=0, style=solid];
m3_80 -> m3_38  [key=2, style=dotted];
m3_80 -> m3_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_60  [key=2, style=dotted];
m3_82 -> m3_79  [color=blue, key=0, style=bold];
m3_245 -> m3_246  [key=0, style=solid];
m3_246 -> m3_247  [key=0, style=solid];
m3_246 -> m3_252  [key=2, style=dotted];
m3_246 -> m3_250  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_246 -> m3_258  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_246 -> m3_261  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_247 -> m3_248  [key=0, style=solid];
m3_247 -> m3_21  [key=2, style=dotted];
m3_247 -> m3_253  [key=2, style=dotted];
m3_247 -> m3_254  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_250 -> m3_251  [key=0, style=solid];
m3_250 -> m3_94  [key=2, style=dotted];
m3_250 -> m3_257  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_248 -> m3_249  [key=0, style=solid];
m3_248 -> m3_92  [key=2, style=dotted];
m3_249 -> m3_250  [key=0, style=solid];
m3_249 -> m3_93  [key=2, style=dotted];
m3_251 -> m3_245  [color=blue, key=0, style=bold];
m3_234 -> m3_235  [key=0, style=solid];
m3_235 -> m3_236  [key=0, style=solid];
m3_235 -> m3_92  [key=2, style=dotted];
m3_236 -> m3_237  [key=0, style=solid];
m3_236 -> m3_93  [key=2, style=dotted];
m3_237 -> m3_238  [key=0, style=solid];
m3_237 -> m3_94  [key=2, style=dotted];
m3_237 -> m3_239  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_238 -> m3_234  [color=blue, key=0, style=bold];
m3_175 -> m3_176  [key=0, style=solid];
m3_176 -> m3_177  [key=0, style=solid];
m3_176 -> m3_21  [key=2, style=dotted];
m3_176 -> m3_22  [key=2, style=dotted];
m3_176 -> m3_181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_177 -> m3_178  [key=0, style=solid];
m3_177 -> m3_92  [key=2, style=dotted];
m3_178 -> m3_179  [key=0, style=solid];
m3_178 -> m3_93  [key=2, style=dotted];
m3_179 -> m3_180  [key=0, style=solid];
m3_179 -> m3_94  [key=2, style=dotted];
m3_179 -> m3_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_180 -> m3_175  [color=blue, key=0, style=bold];
m3_187 -> m3_188  [key=0, style=solid];
m3_188 -> m3_189  [key=0, style=solid];
m3_188 -> m3_92  [key=2, style=dotted];
m3_189 -> m3_190  [key=0, style=solid];
m3_189 -> m3_93  [key=2, style=dotted];
m3_190 -> m3_191  [key=0, style=solid];
m3_190 -> m3_94  [key=2, style=dotted];
m3_190 -> m3_192  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_191 -> m3_187  [color=blue, key=0, style=bold];
m3_65 -> m3_66  [key=0, style=solid];
m3_66 -> m3_67  [key=0, style=solid];
m3_66 -> m3_38  [key=2, style=dotted];
m3_66 -> m3_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_67 -> m3_68  [key=0, style=solid];
m3_67 -> m3_60  [key=2, style=dotted];
m3_68 -> m3_65  [color=blue, key=0, style=bold];
m3_115 -> m3_116  [key=0, style=solid];
m3_116 -> m3_117  [key=0, style=solid];
m3_116 -> m3_21  [key=2, style=dotted];
m3_116 -> m3_38  [key=2, style=dotted];
m3_116 -> m3_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_117 -> m3_118  [key=0, style=solid];
m3_117 -> m3_92  [key=2, style=dotted];
m3_117 -> m3_126  [color=darkseagreen4, key=1, label=worker, style=dashed];
m3_118 -> m3_119  [key=0, style=solid];
m3_118 -> m3_38  [key=2, style=dotted];
m3_118 -> m3_125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_119 -> m3_120  [key=0, style=solid];
m3_119 -> m3_94  [key=2, style=dotted];
m3_119 -> m3_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_120 -> m3_121  [key=0, style=solid];
m3_120 -> m3_94  [key=2, style=dotted];
m3_120 -> m3_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_121 -> m3_115  [color=blue, key=0, style=bold];
m3_214 -> m3_215  [key=0, style=solid];
m3_215 -> m3_216  [key=0, style=solid];
m3_215 -> m3_21  [key=2, style=dotted];
m3_215 -> m3_38  [key=2, style=dotted];
m3_215 -> m3_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_216 -> m3_217  [key=0, style=solid];
m3_216 -> m3_92  [key=2, style=dotted];
m3_216 -> m3_226  [color=darkseagreen4, key=1, label=worker, style=dashed];
m3_217 -> m3_218  [key=0, style=solid];
m3_217 -> m3_221  [key=2, style=dotted];
m3_217 -> m3_225  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_218 -> m3_219  [key=0, style=solid];
m3_218 -> m3_94  [key=2, style=dotted];
m3_218 -> m3_228  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_219 -> m3_220  [key=0, style=solid];
m3_219 -> m3_94  [key=2, style=dotted];
m3_219 -> m3_231  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_220 -> m3_214  [color=blue, key=0, style=bold];
m3_92 -> m3_295  [key=0, style=solid];
m3_295 -> m3_296  [key=0, style=solid];
m3_295 -> m3_64  [key=2, style=dotted];
m3_296 -> m3_92  [color=blue, key=0, style=bold];
m3_56 -> m3_57  [key=0, style=solid];
m3_57 -> m3_58  [key=0, style=solid];
m3_57 -> m3_38  [key=2, style=dotted];
m3_57 -> m3_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_60  [key=2, style=dotted];
m3_59 -> m3_56  [color=blue, key=0, style=bold];
m3_264 -> m3_265  [key=0, style=solid];
m3_265 -> m3_266  [key=0, style=solid];
m3_265 -> m3_252  [key=2, style=dotted];
m3_265 -> m3_269  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_265 -> m3_276  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_265 -> m3_279  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_266 -> m3_267  [key=0, style=solid];
m3_266 -> m3_21  [key=2, style=dotted];
m3_266 -> m3_271  [key=2, style=dotted];
m3_266 -> m3_253  [key=2, style=dotted];
m3_266 -> m3_272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_269 -> m3_270  [key=0, style=solid];
m3_269 -> m3_94  [key=2, style=dotted];
m3_269 -> m3_275  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_267 -> m3_268  [key=0, style=solid];
m3_267 -> m3_92  [key=2, style=dotted];
m3_268 -> m3_269  [key=0, style=solid];
m3_268 -> m3_93  [key=2, style=dotted];
m3_270 -> m3_264  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_16  [key=2, style=dotted];
m3_2 -> m3_3  [color=red, key=0, style=solid];
m3_2 -> m3_17  [key=2, style=dotted];
m3_3 -> m3_4  [color=red, key=0, style=solid];
m3_3 -> m3_18  [color=red, key=2, style=dotted];
m3_4 -> m3_5  [color=red, key=0, style=solid];
m3_4 -> m3_19  [color=red, key=2, style=dotted];
m3_5 -> m3_6  [color=red, key=0, style=solid];
m3_5 -> m3_20  [key=2, style=dotted];
m3_6 -> m3_7  [color=red, key=0, style=solid];
m3_6 -> m3_21  [color=red, key=2, style=dotted];
m3_6 -> m3_22  [color=red, key=2, style=dotted];
m3_6 -> m3_28  [color=red, key=1, label="lambda expression", style=dashed];
m3_7 -> m3_8  [color=red, key=0, style=solid];
m3_7 -> m3_23  [key=2, style=dotted];
m3_8 -> m3_9  [color=red, key=0, style=solid];
m3_8 -> m3_21  [color=red, key=2, style=dotted];
m3_8 -> m3_22  [color=red, key=2, style=dotted];
m3_8 -> m3_32  [color=red, key=1, label="lambda expression", style=dashed];
m3_9 -> m3_10  [color=red, key=0, style=solid];
m3_9 -> m3_21  [key=2, style=dotted];
m3_9 -> m3_22  [key=2, style=dotted];
m3_9 -> m3_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_10 -> m3_11  [color=red, key=0, style=solid];
m3_10 -> m3_21  [color=red, key=2, style=dotted];
m3_10 -> m3_24  [color=red, key=2, style=dotted];
m3_10 -> m3_25  [color=red, key=2, style=dotted];
m3_10 -> m3_22  [color=red, key=2, style=dotted];
m3_10 -> m3_40  [color=red, key=1, label="lambda expression", style=dashed];
m3_10 -> m3_44  [color=red, key=1, label="lambda expression", style=dashed];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_26  [key=2, style=dotted];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_21  [key=2, style=dotted];
m3_12 -> m3_22  [key=2, style=dotted];
m3_12 -> m3_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_21  [key=2, style=dotted];
m3_13 -> m3_22  [key=2, style=dotted];
m3_13 -> m3_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_27  [key=2, style=dotted];
m3_15 -> m3_0  [color=blue, key=0, style=bold];
m3_86 -> m3_87  [key=0, style=solid];
m3_87 -> m3_88  [key=0, style=solid];
m3_87 -> m3_92  [key=2, style=dotted];
m3_88 -> m3_89  [key=0, style=solid];
m3_88 -> m3_93  [key=2, style=dotted];
m3_89 -> m3_90  [key=0, style=solid];
m3_89 -> m3_94  [key=2, style=dotted];
m3_89 -> m3_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_94  [key=2, style=dotted];
m3_90 -> m3_98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_91 -> m3_86  [color=blue, key=0, style=bold];
m3_281 -> m3_282  [key=0, style=solid];
m3_282 -> m3_283  [key=0, style=solid];
m3_282 -> m3_21  [key=2, style=dotted];
m3_282 -> m3_24  [key=2, style=dotted];
m3_282 -> m3_287  [key=2, style=dotted];
m3_282 -> m3_288  [key=2, style=dotted];
m3_282 -> m3_22  [key=2, style=dotted];
m3_282 -> m3_289  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_283 -> m3_284  [key=0, style=solid];
m3_283 -> m3_92  [key=2, style=dotted];
m3_284 -> m3_285  [key=0, style=solid];
m3_284 -> m3_93  [key=2, style=dotted];
m3_285 -> m3_286  [key=0, style=solid];
m3_285 -> m3_94  [key=2, style=dotted];
m3_285 -> m3_292  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_286 -> m3_281  [color=blue, key=0, style=bold];
m3_292 -> m3_293  [key=0, style=solid];
m3_28 -> m3_29  [color=red, key=0, style=solid];
m3_32 -> m3_33  [color=red, key=0, style=solid];
m3_35 -> m3_36  [key=0, style=solid];
m3_40 -> m3_41  [key=0, style=solid];
m3_44 -> m3_45  [key=0, style=solid];
m3_48 -> m3_49  [key=0, style=solid];
m3_52 -> m3_53  [key=0, style=solid];
m3_29 -> m3_30  [color=red, key=0, style=solid];
m3_29 -> m3_31  [color=red, key=2, style=dotted];
m3_30 -> m3_28  [color=blue, key=0, style=bold];
m3_33 -> m3_34  [color=red, key=0, style=solid];
m3_34 -> m3_32  [color=blue, key=0, style=bold];
m3_36 -> m3_37  [key=0, style=solid];
m3_36 -> m3_38  [key=2, style=dotted];
m3_36 -> m3_39  [key=2, style=dotted];
m3_37 -> m3_35  [color=blue, key=0, style=bold];
m3_41 -> m3_42  [key=0, style=solid];
m3_41 -> m3_43  [key=2, style=dotted];
m3_42 -> m3_40  [color=blue, key=0, style=bold];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_47  [key=2, style=dotted];
m3_46 -> m3_44  [color=blue, key=0, style=bold];
m3_49 -> m3_50  [key=0, style=solid];
m3_49 -> m3_51  [key=2, style=dotted];
m3_50 -> m3_48  [color=blue, key=0, style=bold];
m3_53 -> m3_54  [key=0, style=solid];
m3_53 -> m3_38  [key=2, style=dotted];
m3_53 -> m3_55  [key=2, style=dotted];
m3_54 -> m3_52  [color=blue, key=0, style=bold];
m3_61 -> m3_62  [key=0, style=solid];
m3_62 -> m3_63  [key=0, style=solid];
m3_62 -> m3_64  [key=2, style=dotted];
m3_63 -> m3_61  [color=blue, key=0, style=bold];
m3_69 -> m3_70  [key=0, style=solid];
m3_70 -> m3_71  [key=0, style=solid];
m3_70 -> m3_64  [key=2, style=dotted];
m3_71 -> m3_69  [color=blue, key=0, style=bold];
m3_76 -> m3_77  [key=0, style=solid];
m3_77 -> m3_78  [key=0, style=solid];
m3_77 -> m3_64  [key=2, style=dotted];
m3_78 -> m3_76  [color=blue, key=0, style=bold];
m3_83 -> m3_84  [key=0, style=solid];
m3_84 -> m3_85  [key=0, style=solid];
m3_84 -> m3_64  [key=2, style=dotted];
m3_85 -> m3_83  [color=blue, key=0, style=bold];
m3_95 -> m3_96  [key=0, style=solid];
m3_98 -> m3_99  [key=0, style=solid];
m3_96 -> m3_97  [key=0, style=solid];
m3_96 -> m3_31  [key=2, style=dotted];
m3_97 -> m3_95  [color=blue, key=0, style=bold];
m3_99 -> m3_100  [key=0, style=solid];
m3_99 -> m3_101  [key=2, style=dotted];
m3_100 -> m3_98  [color=blue, key=0, style=bold];
m3_108 -> m3_109  [key=0, style=solid];
m3_111 -> m3_112  [key=0, style=solid];
m3_109 -> m3_110  [key=0, style=solid];
m3_109 -> m3_39  [key=2, style=dotted];
m3_110 -> m3_108  [color=blue, key=0, style=bold];
m3_112 -> m3_113  [key=0, style=solid];
m3_112 -> m3_114  [key=2, style=dotted];
m3_113 -> m3_111  [color=blue, key=0, style=bold];
m3_122 -> m3_123  [key=0, style=solid];
m3_126 -> m3_127  [key=0, style=solid];
m3_126 -> m3_93  [key=2, style=dotted];
m3_125 -> m3_126  [key=0, style=solid];
m3_128 -> m3_129  [key=0, style=solid];
m3_131 -> m3_132  [key=0, style=solid];
m3_123 -> m3_124  [key=0, style=solid];
m3_123 -> m3_38  [key=2, style=dotted];
m3_123 -> m3_55  [key=2, style=dotted];
m3_124 -> m3_122  [color=blue, key=0, style=bold];
m3_127 -> m3_125  [color=blue, key=0, style=bold];
m3_129 -> m3_130  [key=0, style=solid];
m3_129 -> m3_114  [key=2, style=dotted];
m3_130 -> m3_128  [color=blue, key=0, style=bold];
m3_132 -> m3_133  [key=0, style=solid];
m3_132 -> m3_134  [key=2, style=dotted];
m3_133 -> m3_131  [color=blue, key=0, style=bold];
m3_143 -> m3_144  [key=0, style=solid];
m3_146 -> m3_147  [key=0, style=solid];
m3_150 -> m3_151  [key=0, style=solid];
m3_144 -> m3_145  [key=0, style=solid];
m3_144 -> m3_38  [key=2, style=dotted];
m3_144 -> m3_55  [key=2, style=dotted];
m3_145 -> m3_143  [color=blue, key=0, style=bold];
m3_147 -> m3_148  [key=0, style=solid];
m3_147 -> m3_38  [key=2, style=dotted];
m3_147 -> m3_149  [key=2, style=dotted];
m3_148 -> m3_146  [color=blue, key=0, style=bold];
m3_151 -> m3_152  [key=0, style=solid];
m3_151 -> m3_38  [key=2, style=dotted];
m3_151 -> m3_55  [key=2, style=dotted];
m3_152 -> m3_150  [color=blue, key=0, style=bold];
m3_158 -> m3_159  [key=0, style=solid];
m3_159 -> m3_160  [key=0, style=solid];
m3_159 -> m3_38  [key=2, style=dotted];
m3_159 -> m3_55  [key=2, style=dotted];
m3_159 -> m3_161  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_160 -> m3_158  [color=blue, key=0, style=bold];
m3_161 -> m3_162  [key=0, style=solid];
m3_162 -> m3_163  [key=0, style=solid];
m3_163 -> m3_161  [color=blue, key=0, style=bold];
m3_169 -> m3_170  [key=0, style=solid];
m3_170 -> m3_171  [key=0, style=solid];
m3_170 -> m3_38  [key=2, style=dotted];
m3_170 -> m3_55  [key=2, style=dotted];
m3_170 -> m3_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_171 -> m3_169  [color=blue, key=0, style=bold];
m3_172 -> m3_173  [key=0, style=solid];
m3_173 -> m3_174  [key=0, style=solid];
m3_174 -> m3_172  [color=blue, key=0, style=bold];
m3_181 -> m3_182  [key=0, style=solid];
m3_184 -> m3_185  [key=0, style=solid];
m3_182 -> m3_183  [key=0, style=solid];
m3_182 -> m3_38  [key=2, style=dotted];
m3_182 -> m3_55  [key=2, style=dotted];
m3_183 -> m3_181  [color=blue, key=0, style=bold];
m3_185 -> m3_186  [key=0, style=solid];
m3_185 -> m3_38  [key=2, style=dotted];
m3_185 -> m3_149  [key=2, style=dotted];
m3_186 -> m3_184  [color=blue, key=0, style=bold];
m3_192 -> m3_193  [key=0, style=solid];
m3_193 -> m3_194  [key=0, style=solid];
m3_193 -> m3_38  [key=2, style=dotted];
m3_193 -> m3_149  [key=2, style=dotted];
m3_194 -> m3_192  [color=blue, key=0, style=bold];
m3_202 -> m3_203  [key=0, style=solid];
m3_206 -> m3_207  [key=0, style=solid];
m3_206 -> m3_93  [key=2, style=dotted];
m3_205 -> m3_206  [key=0, style=solid];
m3_208 -> m3_209  [key=0, style=solid];
m3_211 -> m3_212  [key=0, style=solid];
m3_203 -> m3_204  [key=0, style=solid];
m3_203 -> m3_38  [key=2, style=dotted];
m3_203 -> m3_149  [key=2, style=dotted];
m3_204 -> m3_202  [color=blue, key=0, style=bold];
m3_207 -> m3_205  [color=blue, key=0, style=bold];
m3_209 -> m3_210  [key=0, style=solid];
m3_209 -> m3_38  [key=2, style=dotted];
m3_209 -> m3_55  [key=2, style=dotted];
m3_210 -> m3_208  [color=blue, key=0, style=bold];
m3_212 -> m3_213  [key=0, style=solid];
m3_212 -> m3_134  [key=2, style=dotted];
m3_213 -> m3_211  [color=blue, key=0, style=bold];
m3_222 -> m3_223  [key=0, style=solid];
m3_226 -> m3_227  [key=0, style=solid];
m3_226 -> m3_93  [key=2, style=dotted];
m3_225 -> m3_226  [key=0, style=solid];
m3_228 -> m3_229  [key=0, style=solid];
m3_231 -> m3_232  [key=0, style=solid];
m3_223 -> m3_224  [key=0, style=solid];
m3_223 -> m3_38  [key=2, style=dotted];
m3_223 -> m3_149  [key=2, style=dotted];
m3_224 -> m3_222  [color=blue, key=0, style=bold];
m3_227 -> m3_225  [color=blue, key=0, style=bold];
m3_229 -> m3_230  [key=0, style=solid];
m3_229 -> m3_114  [key=2, style=dotted];
m3_230 -> m3_228  [color=blue, key=0, style=bold];
m3_232 -> m3_233  [key=0, style=solid];
m3_232 -> m3_134  [key=2, style=dotted];
m3_233 -> m3_231  [color=blue, key=0, style=bold];
m3_239 -> m3_240  [key=0, style=solid];
m3_240 -> m3_241  [key=0, style=solid];
m3_240 -> m3_38  [key=2, style=dotted];
m3_240 -> m3_55  [key=2, style=dotted];
m3_240 -> m3_242  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_241 -> m3_239  [color=blue, key=0, style=bold];
m3_242 -> m3_243  [key=0, style=solid];
m3_243 -> m3_244  [key=0, style=solid];
m3_244 -> m3_242  [color=blue, key=0, style=bold];
m3_258 -> m3_259  [key=0, style=solid];
m3_258 -> m3_38  [key=2, style=dotted];
m3_258 -> m3_55  [key=2, style=dotted];
m3_258 -> m3_260  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_261 -> m3_262  [key=0, style=solid];
m3_261 -> m3_263  [key=2, style=dotted];
m3_254 -> m3_255  [key=0, style=solid];
m3_257 -> m3_258  [key=0, style=solid];
m3_255 -> m3_256  [key=0, style=solid];
m3_255 -> m3_38  [key=2, style=dotted];
m3_255 -> m3_149  [key=2, style=dotted];
m3_256 -> m3_254  [color=blue, key=0, style=bold];
m3_259 -> m3_257  [color=blue, key=0, style=bold];
m3_260 -> m3_261  [key=0, style=solid];
m3_262 -> m3_260  [color=blue, key=0, style=bold];
m3_276 -> m3_277  [key=0, style=solid];
m3_276 -> m3_38  [key=2, style=dotted];
m3_276 -> m3_55  [key=2, style=dotted];
m3_276 -> m3_278  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_279 -> m3_280  [key=0, style=solid];
m3_272 -> m3_273  [key=0, style=solid];
m3_275 -> m3_276  [key=0, style=solid];
m3_273 -> m3_274  [key=0, style=solid];
m3_273 -> m3_38  [key=2, style=dotted];
m3_273 -> m3_149  [key=2, style=dotted];
m3_274 -> m3_272  [color=blue, key=0, style=bold];
m3_277 -> m3_275  [color=blue, key=0, style=bold];
m3_278 -> m3_279  [key=0, style=solid];
m3_280 -> m3_278  [color=blue, key=0, style=bold];
m3_289 -> m3_290  [key=0, style=solid];
m3_290 -> m3_291  [key=0, style=solid];
m3_290 -> m3_43  [key=2, style=dotted];
m3_291 -> m3_289  [color=blue, key=0, style=bold];
m3_293 -> m3_294  [key=0, style=solid];
m3_293 -> m3_38  [key=2, style=dotted];
m3_293 -> m3_55  [key=2, style=dotted];
m3_294 -> m3_292  [color=blue, key=0, style=bold];
m3_153 -> m3_154  [key=0, style=solid];
m3_154 -> m3_155  [key=0, style=solid];
m3_154 -> m3_92  [key=2, style=dotted];
m3_155 -> m3_156  [key=0, style=solid];
m3_155 -> m3_93  [key=2, style=dotted];
m3_156 -> m3_157  [key=0, style=solid];
m3_156 -> m3_94  [key=2, style=dotted];
m3_156 -> m3_158  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_157 -> m3_153  [color=blue, key=0, style=bold];
m3_135 -> m3_136  [key=0, style=solid];
m3_136 -> m3_137  [key=0, style=solid];
m3_136 -> m3_21  [key=2, style=dotted];
m3_136 -> m3_142  [key=2, style=dotted];
m3_136 -> m3_22  [key=2, style=dotted];
m3_136 -> m3_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_137 -> m3_138  [key=0, style=solid];
m3_137 -> m3_21  [key=2, style=dotted];
m3_137 -> m3_142  [key=2, style=dotted];
m3_137 -> m3_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_138 -> m3_139  [key=0, style=solid];
m3_138 -> m3_21  [key=2, style=dotted];
m3_138 -> m3_142  [key=2, style=dotted];
m3_138 -> m3_22  [key=2, style=dotted];
m3_138 -> m3_150  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_139 -> m3_140  [key=0, style=solid];
m3_139 -> m3_92  [key=2, style=dotted];
m3_140 -> m3_141  [key=0, style=solid];
m3_140 -> m3_93  [key=2, style=dotted];
m3_141 -> m3_135  [color=blue, key=0, style=bold];
m3_102 -> m3_103  [key=0, style=solid];
m3_103 -> m3_104  [key=0, style=solid];
m3_103 -> m3_92  [key=2, style=dotted];
m3_104 -> m3_105  [key=0, style=solid];
m3_104 -> m3_93  [key=2, style=dotted];
m3_105 -> m3_106  [key=0, style=solid];
m3_105 -> m3_94  [key=2, style=dotted];
m3_105 -> m3_108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_106 -> m3_107  [key=0, style=solid];
m3_106 -> m3_94  [key=2, style=dotted];
m3_106 -> m3_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_107 -> m3_102  [color=blue, key=0, style=bold];
m3_195 -> m3_196  [key=0, style=solid];
m3_196 -> m3_197  [key=0, style=solid];
m3_196 -> m3_21  [key=2, style=dotted];
m3_196 -> m3_38  [key=2, style=dotted];
m3_196 -> m3_202  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_197 -> m3_198  [key=0, style=solid];
m3_197 -> m3_92  [key=2, style=dotted];
m3_197 -> m3_206  [color=darkseagreen4, key=1, label=worker, style=dashed];
m3_198 -> m3_199  [key=0, style=solid];
m3_198 -> m3_38  [key=2, style=dotted];
m3_198 -> m3_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_199 -> m3_200  [key=0, style=solid];
m3_199 -> m3_94  [key=2, style=dotted];
m3_199 -> m3_208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_200 -> m3_201  [key=0, style=solid];
m3_200 -> m3_94  [key=2, style=dotted];
m3_200 -> m3_211  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_201 -> m3_195  [color=blue, key=0, style=bold];
m3_47 -> m3_297  [key=0, style=solid];
m3_297 -> m3_47  [color=blue, key=0, style=bold];
m3_72 -> m3_73  [key=0, style=solid];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_38  [key=2, style=dotted];
m3_73 -> m3_76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_74 -> m3_75  [key=0, style=solid];
m3_74 -> m3_60  [key=2, style=dotted];
m3_75 -> m3_72  [color=blue, key=0, style=bold];
m3_298 -> m3_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_2  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_3  [color=red, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_4  [color=red, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_5  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_6  [color=red, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_8  [color=red, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_9  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_36  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_10  [color=red, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_11  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_12  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_49  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_13  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_14  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_57  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_62  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_66  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_70  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_73  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_77  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_80  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_84  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_87  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_88  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_89  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_90  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_103  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_104  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_105  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_109  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_106  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_116  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_117  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_118  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_126  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_119  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_120  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_136  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_137  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_138  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_139  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_140  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_154  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_155  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_156  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_159  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_162  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_165  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_166  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_167  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_176  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_177  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_178  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_179  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_188  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_189  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_190  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_196  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_197  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_198  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_206  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_199  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_200  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_215  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_216  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_217  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_226  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_218  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_219  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_235  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_236  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_237  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_247  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_248  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_249  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_250  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_266  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_267  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_268  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_269  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_282  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_283  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_284  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_285  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_298 -> m3_295  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m3_299 -> m3_126  [color=darkseagreen4, key=1, label=worker, style=dashed];
m3_300 -> m3_206  [color=darkseagreen4, key=1, label=worker, style=dashed];
m3_301 -> m3_226  [color=darkseagreen4, key=1, label=worker, style=dashed];
m3_302 -> m3_258  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_302 -> m3_261  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_303 -> m3_276  [color=darkseagreen4, key=1, label=exception, style=dashed];
m3_303 -> m3_279  [color=darkseagreen4, key=1, label=exception, style=dashed];
m4_11 -> m4_12  [key=0, style=solid];
m4_11 -> m4_15  [color=darkseagreen4, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_15  [color=darkseagreen4, key=1, label=enqueuedState, style=dashed];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_19  [key=2, style=dotted];
m4_13 -> m4_14  [key=0, style=solid];
m4_13 -> m4_15  [key=0, style=solid];
m4_14 -> m4_16  [key=0, style=solid];
m4_14 -> m4_17  [key=2, style=dotted];
m4_14 -> m4_18  [key=2, style=dotted];
m4_16 -> m4_11  [color=blue, key=0, style=bold];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_0  [color=blue, key=0, style=bold];
m4_20 -> m4_21  [key=0, style=solid];
m4_21 -> m4_20  [color=blue, key=0, style=bold];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_3 -> m4_4  [key=0, style=solid];
m4_4 -> m4_5  [key=0, style=solid];
m4_5 -> m4_2  [color=blue, key=0, style=bold];
m4_6 -> m4_7  [key=0, style=solid];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_9  [key=2, style=dotted];
m4_7 -> m4_10  [key=2, style=dotted];
m4_8 -> m4_6  [color=blue, key=0, style=bold];
m4_22 -> m4_3  [color=darkseagreen4, key=1, label="HangFire.States.EnqueuedState", style=dashed];
m4_22 -> m4_4  [color=darkseagreen4, key=1, label="HangFire.States.EnqueuedState", style=dashed];
m4_22 -> m4_7  [color=darkseagreen4, key=1, label="HangFire.States.EnqueuedState", style=dashed];
m5_8 -> m5_9  [key=0, style=solid];
m5_9 -> m5_10  [key=0, style=solid];
m5_9 -> m5_7  [key=2, style=dotted];
m5_9 -> m5_12  [key=2, style=dotted];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_13  [key=2, style=dotted];
m5_11 -> m5_8  [color=blue, key=0, style=bold];
m5_14 -> m5_15  [key=0, style=solid];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_7  [key=2, style=dotted];
m5_15 -> m5_22  [key=2, style=dotted];
m5_15 -> m5_17  [color=darkseagreen4, key=1, label=state, style=dashed];
m5_15 -> m5_20  [color=darkseagreen4, key=1, label=state, style=dashed];
m5_16 -> m5_17  [key=0, style=solid];
m5_16 -> m5_23  [key=2, style=dotted];
m5_16 -> m5_18  [color=darkseagreen4, key=1, label=serializedData, style=dashed];
m5_16 -> m5_19  [color=darkseagreen4, key=1, label=serializedData, style=dashed];
m5_16 -> m5_20  [color=darkseagreen4, key=1, label=serializedData, style=dashed];
m5_17 -> m5_18  [key=0, style=solid];
m5_17 -> m5_24  [key=2, style=dotted];
m5_17 -> m5_13  [key=2, style=dotted];
m5_20 -> m5_21  [key=0, style=solid];
m5_20 -> m5_25  [key=2, style=dotted];
m5_20 -> m5_13  [key=2, style=dotted];
m5_18 -> m5_19  [key=0, style=solid];
m5_18 -> m5_13  [key=2, style=dotted];
m5_19 -> m5_20  [key=0, style=solid];
m5_19 -> m5_13  [key=2, style=dotted];
m5_21 -> m5_14  [color=blue, key=0, style=bold];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_3  [key=2, style=dotted];
m5_1 -> m5_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_2 -> m5_0  [color=blue, key=0, style=bold];
m5_4 -> m5_5  [key=0, style=solid];
m5_5 -> m5_6  [key=0, style=solid];
m5_5 -> m5_7  [key=2, style=dotted];
m5_6 -> m5_4  [color=blue, key=0, style=bold];
m6_0 -> m6_1  [color=red, key=0, style=solid];
m6_1 -> m6_2  [color=red, key=0, style=solid];
m6_2 -> m6_0  [color=blue, key=0, style=bold];
m6_3 -> m6_4  [color=green, key=0, style=solid];
m6_4 -> m6_5  [color=green, key=0, style=solid];
m6_4 -> m6_6  [color=green, key=2, style=dotted];
m6_4 -> m6_7  [color=green, key=2, style=dotted];
m6_5 -> m6_3  [color=blue, key=0, style=bold];
m6_8 -> m6_1  [color=red, key=1, label="HangFire.States.ProcessingState", style=dashed];
m6_8 -> m6_4  [color=green, key=1, label="HangFire.States.ProcessingState", style=dashed];
m7_4 -> m7_5  [key=0, style=solid];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_9  [key=2, style=dotted];
m7_6 -> m7_7  [key=0, style=solid];
m7_6 -> m7_10  [key=2, style=dotted];
m7_6 -> m7_11  [key=2, style=dotted];
m7_7 -> m7_8  [key=0, style=solid];
m7_7 -> m7_12  [key=2, style=dotted];
m7_8 -> m7_4  [color=blue, key=0, style=bold];
m7_73 -> m7_74  [key=0, style=solid];
m7_74 -> m7_75  [key=0, style=solid];
m7_74 -> m7_49  [key=2, style=dotted];
m7_75 -> m7_76  [key=0, style=solid];
m7_75 -> m7_23  [key=2, style=dotted];
m7_76 -> m7_77  [key=0, style=solid];
m7_76 -> m7_31  [key=2, style=dotted];
m7_77 -> m7_78  [key=0, style=solid];
m7_77 -> m7_72  [key=2, style=dotted];
m7_78 -> m7_79  [key=0, style=solid];
m7_78 -> m7_36  [key=2, style=dotted];
m7_79 -> m7_80  [key=0, style=solid];
m7_79 -> m7_50  [key=2, style=dotted];
m7_80 -> m7_81  [key=0, style=solid];
m7_80 -> m7_27  [key=2, style=dotted];
m7_81 -> m7_73  [color=blue, key=0, style=bold];
m7_82 -> m7_83  [key=0, style=solid];
m7_83 -> m7_84  [key=0, style=solid];
m7_83 -> m7_4  [key=2, style=dotted];
m7_84 -> m7_82  [color=blue, key=0, style=bold];
m7_3 -> m7_18  [key=0, style=solid];
m7_18 -> m7_3  [color=blue, key=0, style=bold];
m7_19 -> m7_20  [key=0, style=solid];
m7_20 -> m7_21  [key=0, style=solid];
m7_20 -> m7_22  [key=2, style=dotted];
m7_21 -> m7_19  [color=blue, key=0, style=bold];
m7_39 -> m7_40  [key=0, style=solid];
m7_40 -> m7_41  [key=0, style=solid];
m7_40 -> m7_19  [key=2, style=dotted];
m7_41 -> m7_39  [color=blue, key=0, style=bold];
m7_37 -> m7_38  [key=0, style=solid];
m7_38 -> m7_37  [color=blue, key=0, style=bold];
m7_42 -> m7_43  [color=red, key=0, style=solid];
m7_43 -> m7_44  [color=red, key=0, style=solid];
m7_43 -> m7_49  [color=red, key=2, style=dotted];
m7_44 -> m7_45  [color=red, key=0, style=solid];
m7_44 -> m7_23  [color=red, key=2, style=dotted];
m7_45 -> m7_46  [color=red, key=0, style=solid];
m7_45 -> m7_31  [color=red, key=2, style=dotted];
m7_46 -> m7_47  [color=red, key=0, style=solid];
m7_46 -> m7_50  [color=red, key=2, style=dotted];
m7_47 -> m7_48  [color=red, key=0, style=solid];
m7_47 -> m7_27  [color=red, key=2, style=dotted];
m7_48 -> m7_42  [color=blue, key=0, style=bold];
m7_63 -> m7_64  [key=0, style=solid];
m7_64 -> m7_65  [key=0, style=solid];
m7_64 -> m7_49  [key=2, style=dotted];
m7_65 -> m7_66  [key=0, style=solid];
m7_65 -> m7_23  [key=2, style=dotted];
m7_66 -> m7_67  [key=0, style=solid];
m7_66 -> m7_31  [key=2, style=dotted];
m7_67 -> m7_68  [key=0, style=solid];
m7_67 -> m7_72  [key=2, style=dotted];
m7_68 -> m7_69  [key=0, style=solid];
m7_68 -> m7_50  [key=2, style=dotted];
m7_69 -> m7_70  [key=0, style=solid];
m7_69 -> m7_36  [key=2, style=dotted];
m7_70 -> m7_71  [key=0, style=solid];
m7_70 -> m7_27  [key=2, style=dotted];
m7_71 -> m7_63  [color=blue, key=0, style=bold];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=2, style=dotted];
m7_2 -> m7_0  [color=blue, key=0, style=bold];
m7_27 -> m7_28  [key=0, style=solid];
m7_28 -> m7_29  [key=0, style=solid];
m7_28 -> m7_30  [key=2, style=dotted];
m7_29 -> m7_27  [color=blue, key=0, style=bold];
m7_51 -> m7_52  [color=red, key=0, style=solid];
m7_52 -> m7_53  [color=red, key=0, style=solid];
m7_52 -> m7_49  [color=red, key=2, style=dotted];
m7_53 -> m7_54  [color=red, key=0, style=solid];
m7_53 -> m7_23  [color=red, key=2, style=dotted];
m7_54 -> m7_55  [color=red, key=0, style=solid];
m7_54 -> m7_31  [color=red, key=2, style=dotted];
m7_55 -> m7_56  [color=red, key=0, style=solid];
m7_55 -> m7_61  [color=red, key=2, style=dotted];
m7_55 -> m7_57  [color=red, key=1, label=table1, style=dashed];
m7_55 -> m7_58  [color=red, key=1, label=table1, style=dashed];
m7_56 -> m7_57  [color=red, key=0, style=solid];
m7_56 -> m7_62  [color=red, key=2, style=dotted];
m7_57 -> m7_58  [color=red, key=0, style=solid];
m7_57 -> m7_62  [color=red, key=2, style=dotted];
m7_58 -> m7_59  [color=red, key=0, style=solid];
m7_58 -> m7_50  [color=red, key=2, style=dotted];
m7_59 -> m7_60  [color=red, key=0, style=solid];
m7_59 -> m7_27  [color=red, key=2, style=dotted];
m7_60 -> m7_51  [color=blue, key=0, style=bold];
m7_23 -> m7_24  [key=0, style=solid];
m7_23 -> m7_43  [color=red, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m7_23 -> m7_52  [color=red, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m7_23 -> m7_64  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m7_23 -> m7_74  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m7_24 -> m7_25  [key=0, style=solid];
m7_24 -> m7_26  [key=2, style=dotted];
m7_25 -> m7_23  [color=blue, key=0, style=bold];
m7_31 -> m7_32  [key=0, style=solid];
m7_32 -> m7_33  [key=0, style=solid];
m7_32 -> m7_35  [key=2, style=dotted];
m7_33 -> m7_34  [key=0, style=solid];
m7_33 -> m7_36  [key=2, style=dotted];
m7_34 -> m7_31  [color=blue, key=0, style=bold];
m7_13 -> m7_14  [key=0, style=solid];
m7_14 -> m7_15  [key=0, style=solid];
m7_14 -> m7_17  [key=2, style=dotted];
m7_15 -> m7_16  [key=0, style=solid];
m7_16 -> m7_13  [color=blue, key=0, style=bold];
m7_85 -> m7_86  [key=0, style=solid];
m7_86 -> m7_87  [key=0, style=solid];
m7_86 -> m7_13  [key=2, style=dotted];
m7_87 -> m7_85  [color=blue, key=0, style=bold];
m7_88 -> m7_1  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_88 -> m7_40  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_88 -> m7_44  [color=red, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_88 -> m7_45  [color=red, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_88 -> m7_47  [color=red, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_88 -> m7_53  [color=red, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_88 -> m7_54  [color=red, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_88 -> m7_59  [color=red, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_88 -> m7_65  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_88 -> m7_66  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_88 -> m7_70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_88 -> m7_75  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_88 -> m7_76  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_88 -> m7_80  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m9_13 -> m9_14  [key=0, style=solid];
m9_13 -> m9_16  [color=darkseagreen4, key=1, label="Hangfire.Server.ILongRunningProcess", style=dashed];
m9_13 -> m9_18  [color=darkseagreen4, key=1, label="Hangfire.Server.ILongRunningProcess", style=dashed];
m9_13 -> m9_23  [color=darkseagreen4, key=1, label="Hangfire.Server.ILongRunningProcess", style=dashed];
m9_14 -> m9_15  [key=0, style=solid];
m9_14 -> m9_16  [key=0, style=solid];
m9_16 -> m9_17  [key=0, style=solid];
m9_16 -> m9_18  [key=0, style=solid];
m9_18 -> m9_19  [key=0, style=solid];
m9_18 -> m9_21  [key=2, style=dotted];
m9_18 -> m9_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_15 -> m9_19  [key=0, style=solid];
m9_15 -> m9_20  [key=2, style=dotted];
m9_17 -> m9_19  [key=0, style=solid];
m9_17 -> m9_10  [key=2, style=dotted];
m9_19 -> m9_13  [color=blue, key=0, style=bold];
m9_0 -> m9_1  [key=0, style=solid];
m9_0 -> m9_3  [color=darkseagreen4, key=1, label="Hangfire.Server.ILongRunningProcess", style=dashed];
m9_0 -> m9_5  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m9_0 -> m9_6  [color=darkseagreen4, key=1, label="Hangfire.Server.ILongRunningProcess", style=dashed];
m9_0 -> m9_8  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m9_0 -> m9_25  [color=green, key=3, label="Parameter variable Hangfire.Server.BackgroundProcessContext context", style=bold];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_3  [key=0, style=solid];
m9_3 -> m9_4  [key=0, style=solid];
m9_3 -> m9_5  [color=darkseagreen4, key=1, label=backgroundProcess, style=dashed];
m9_5 -> m9_9  [key=0, style=solid];
m9_5 -> m9_11  [key=2, style=dotted];
m9_6 -> m9_7  [key=0, style=solid];
m9_6 -> m9_8  [color=darkseagreen4, key=1, label=component, style=dashed];
m9_8 -> m9_9  [key=0, style=solid];
m9_8 -> m9_12  [key=2, style=dotted];
m9_2 -> m9_9  [key=0, style=solid];
m9_2 -> m9_10  [key=2, style=dotted];
m9_4 -> m9_5  [key=0, style=solid];
m9_4 -> m9_6  [key=0, style=solid];
m9_7 -> m9_8  [key=0, style=solid];
m9_7 -> m9_9  [key=0, style=solid];
m9_9 -> m9_0  [color=blue, key=0, style=bold];
m9_25 -> m9_26  [key=0, style=solid];
m9_25 -> m9_27  [color=darkseagreen4, key=1, label="Hangfire.Server.ILongRunningProcess", style=dashed];
m9_25 -> m9_28  [color=darkseagreen4, key=1, label="Hangfire.Server.ILongRunningProcess", style=dashed];
m9_25 -> m9_29  [color=darkseagreen4, key=1, label="Hangfire.Server.ILongRunningProcess", style=dashed];
m9_25 -> m9_32  [color=darkseagreen4, key=1, label="Hangfire.Server.ILongRunningProcess", style=dashed];
m9_25 -> m9_33  [color=darkseagreen4, key=1, label="Hangfire.Server.ILongRunningProcess", style=dashed];
m9_25 -> m9_13  [color=green, key=3, label="Parameter variable Hangfire.Server.BackgroundProcessContext context", style=bold];
m9_26 -> m9_27  [key=0, style=solid];
m9_26 -> m9_35  [key=2, style=dotted];
m9_26 -> m9_36  [key=2, style=dotted];
m9_27 -> m9_28  [key=0, style=solid];
m9_27 -> m9_35  [key=2, style=dotted];
m9_27 -> m9_37  [key=2, style=dotted];
m9_27 -> m9_32  [color=darkseagreen4, key=1, label=logger, style=dashed];
m9_27 -> m9_33  [color=darkseagreen4, key=1, label=logger, style=dashed];
m9_28 -> m9_29  [key=0, style=solid];
m9_28 -> m9_38  [key=2, style=dotted];
m9_29 -> m9_30  [key=0, style=solid];
m9_29 -> m9_31  [key=0, style=solid];
m9_29 -> m9_33  [key=0, style=solid];
m9_29 -> m9_39  [key=2, style=dotted];
m9_32 -> m9_33  [key=0, style=solid];
m9_32 -> m9_40  [key=2, style=dotted];
m9_32 -> m9_41  [key=2, style=dotted];
m9_33 -> m9_34  [key=0, style=solid];
m9_33 -> m9_38  [key=2, style=dotted];
m9_30 -> m9_33  [key=0, style=solid];
m9_31 -> m9_32  [key=0, style=solid];
m9_34 -> m9_25  [color=blue, key=0, style=bold];
m9_36 -> m9_42  [key=0, style=solid];
m9_42 -> m9_43  [key=0, style=solid];
m9_42 -> m9_44  [key=0, style=solid];
m9_43 -> m9_44  [key=0, style=solid];
m9_44 -> m9_36  [color=blue, key=0, style=bold];
m9_22 -> m9_23  [key=0, style=solid];
m9_23 -> m9_24  [key=0, style=solid];
m9_23 -> m9_25  [key=2, style=dotted];
m9_24 -> m9_22  [color=blue, key=0, style=bold];
m9_45 -> m9_23  [color=darkseagreen4, key=1, label="Hangfire.Server.ILongRunningProcess", style=dashed];
m9_46 -> m9_23  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m10_84 -> m10_85  [key=0, style=solid];
m10_85 -> m10_86  [key=0, style=solid];
m10_85 -> m10_13  [key=2, style=dotted];
m10_86 -> m10_84  [color=blue, key=0, style=bold];
m10_13 -> m10_14  [key=0, style=solid];
m10_14 -> m10_15  [key=0, style=solid];
m10_14 -> m10_17  [key=2, style=dotted];
m10_15 -> m10_16  [key=0, style=solid];
m10_16 -> m10_13  [color=blue, key=0, style=bold];
m10_72 -> m10_73  [key=0, style=solid];
m10_73 -> m10_74  [key=0, style=solid];
m10_73 -> m10_49  [key=2, style=dotted];
m10_74 -> m10_75  [key=0, style=solid];
m10_74 -> m10_23  [key=2, style=dotted];
m10_75 -> m10_76  [key=0, style=solid];
m10_75 -> m10_31  [key=2, style=dotted];
m10_76 -> m10_77  [key=0, style=solid];
m10_76 -> m10_71  [key=2, style=dotted];
m10_77 -> m10_78  [key=0, style=solid];
m10_77 -> m10_36  [key=2, style=dotted];
m10_78 -> m10_79  [key=0, style=solid];
m10_78 -> m10_50  [key=2, style=dotted];
m10_79 -> m10_80  [key=0, style=solid];
m10_79 -> m10_27  [key=2, style=dotted];
m10_80 -> m10_72  [color=blue, key=0, style=bold];
m10_63 -> m10_64  [key=0, style=solid];
m10_64 -> m10_65  [key=0, style=solid];
m10_64 -> m10_49  [key=2, style=dotted];
m10_65 -> m10_66  [key=0, style=solid];
m10_65 -> m10_23  [key=2, style=dotted];
m10_66 -> m10_67  [key=0, style=solid];
m10_66 -> m10_31  [key=2, style=dotted];
m10_67 -> m10_68  [key=0, style=solid];
m10_67 -> m10_71  [key=2, style=dotted];
m10_68 -> m10_69  [key=0, style=solid];
m10_68 -> m10_50  [key=2, style=dotted];
m10_69 -> m10_70  [key=0, style=solid];
m10_69 -> m10_27  [key=2, style=dotted];
m10_70 -> m10_63  [color=blue, key=0, style=bold];
m10_42 -> m10_43  [color=red, key=0, style=solid];
m10_43 -> m10_44  [color=red, key=0, style=solid];
m10_43 -> m10_49  [color=red, key=2, style=dotted];
m10_44 -> m10_45  [color=red, key=0, style=solid];
m10_44 -> m10_23  [color=red, key=2, style=dotted];
m10_45 -> m10_46  [color=red, key=0, style=solid];
m10_45 -> m10_31  [color=red, key=2, style=dotted];
m10_46 -> m10_47  [color=red, key=0, style=solid];
m10_46 -> m10_50  [color=red, key=2, style=dotted];
m10_47 -> m10_48  [color=red, key=0, style=solid];
m10_47 -> m10_27  [color=red, key=2, style=dotted];
m10_48 -> m10_42  [color=blue, key=0, style=bold];
m10_31 -> m10_32  [key=0, style=solid];
m10_32 -> m10_33  [key=0, style=solid];
m10_32 -> m10_35  [key=2, style=dotted];
m10_33 -> m10_34  [key=0, style=solid];
m10_33 -> m10_36  [key=2, style=dotted];
m10_34 -> m10_31  [color=blue, key=0, style=bold];
m10_37 -> m10_38  [key=0, style=solid];
m10_38 -> m10_37  [color=blue, key=0, style=bold];
m10_3 -> m10_18  [key=0, style=solid];
m10_18 -> m10_3  [color=blue, key=0, style=bold];
m10_39 -> m10_40  [key=0, style=solid];
m10_40 -> m10_41  [key=0, style=solid];
m10_40 -> m10_19  [key=2, style=dotted];
m10_41 -> m10_39  [color=blue, key=0, style=bold];
m10_19 -> m10_20  [key=0, style=solid];
m10_20 -> m10_21  [key=0, style=solid];
m10_20 -> m10_22  [key=2, style=dotted];
m10_21 -> m10_19  [color=blue, key=0, style=bold];
m10_81 -> m10_82  [key=0, style=solid];
m10_82 -> m10_83  [key=0, style=solid];
m10_82 -> m10_4  [key=2, style=dotted];
m10_83 -> m10_81  [color=blue, key=0, style=bold];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_3  [key=2, style=dotted];
m10_2 -> m10_0  [color=blue, key=0, style=bold];
m10_23 -> m10_24  [key=0, style=solid];
m10_23 -> m10_43  [color=red, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m10_23 -> m10_52  [color=red, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m10_23 -> m10_64  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m10_23 -> m10_73  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m10_24 -> m10_25  [key=0, style=solid];
m10_24 -> m10_26  [key=2, style=dotted];
m10_25 -> m10_23  [color=blue, key=0, style=bold];
m10_27 -> m10_28  [key=0, style=solid];
m10_28 -> m10_29  [key=0, style=solid];
m10_28 -> m10_30  [key=2, style=dotted];
m10_29 -> m10_27  [color=blue, key=0, style=bold];
m10_51 -> m10_52  [color=red, key=0, style=solid];
m10_52 -> m10_53  [color=red, key=0, style=solid];
m10_52 -> m10_49  [color=red, key=2, style=dotted];
m10_53 -> m10_54  [color=red, key=0, style=solid];
m10_53 -> m10_23  [color=red, key=2, style=dotted];
m10_54 -> m10_55  [color=green, key=0, style=solid];
m10_54 -> m10_31  [color=red, key=2, style=dotted];
m10_55 -> m10_56  [color=green, key=0, style=solid];
m10_55 -> m10_61  [color=green, key=2, style=dotted];
m10_55 -> m10_57  [color=green, key=1, label=table1, style=dashed];
m10_55 -> m10_58  [color=green, key=1, label=table1, style=dashed];
m10_56 -> m10_57  [color=green, key=0, style=solid];
m10_56 -> m10_62  [color=green, key=2, style=dotted];
m10_57 -> m10_58  [color=red, key=0, style=solid];
m10_57 -> m10_62  [color=red, key=2, style=dotted];
m10_58 -> m10_59  [color=red, key=0, style=solid];
m10_58 -> m10_50  [color=red, key=2, style=dotted];
m10_59 -> m10_60  [color=red, key=0, style=solid];
m10_59 -> m10_27  [color=red, key=2, style=dotted];
m10_60 -> m10_51  [color=blue, key=0, style=bold];
m10_4 -> m10_5  [key=0, style=solid];
m10_5 -> m10_6  [key=0, style=solid];
m10_5 -> m10_9  [key=2, style=dotted];
m10_6 -> m10_7  [key=0, style=solid];
m10_6 -> m10_10  [key=2, style=dotted];
m10_6 -> m10_11  [key=2, style=dotted];
m10_7 -> m10_8  [key=0, style=solid];
m10_7 -> m10_12  [key=2, style=dotted];
m10_8 -> m10_4  [color=blue, key=0, style=bold];
m10_87 -> m10_1  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m10_87 -> m10_40  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m10_87 -> m10_44  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m10_87 -> m10_45  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m10_87 -> m10_47  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m10_87 -> m10_53  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m10_87 -> m10_54  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m10_87 -> m10_59  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m10_87 -> m10_65  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m10_87 -> m10_66  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m10_87 -> m10_69  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m10_87 -> m10_74  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m10_87 -> m10_75  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m10_87 -> m10_79  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ScheduledStateFeature", style=dashed];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_3  [key=2, style=dotted];
m12_1 -> m12_4  [key=2, style=dotted];
m12_2 -> m12_0  [color=blue, key=0, style=bold];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_7  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateApplyingContext", style=dashed];
m12_6 -> m12_7  [key=0, style=solid];
m12_6 -> m12_9  [key=2, style=dotted];
m12_7 -> m12_8  [key=0, style=solid];
m12_7 -> m12_10  [key=2, style=dotted];
m12_8 -> m12_5  [color=blue, key=0, style=bold];
m12_11 -> m12_12  [key=0, style=solid];
m12_11 -> m12_13  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateApplyingContext", style=dashed];
m12_12 -> m12_13  [key=0, style=solid];
m12_12 -> m12_15  [key=2, style=dotted];
m12_13 -> m12_14  [key=0, style=solid];
m12_13 -> m12_16  [key=2, style=dotted];
m12_14 -> m12_11  [color=blue, key=0, style=bold];
m13_0 -> m13_1  [key=0, style=solid];
m13_0 -> m13_3  [color=darkseagreen4, key=1, label="System.Action<Hangfire.IBootstrapperConfiguration>", style=dashed];
m13_0 -> m13_6  [color=darkseagreen4, key=1, label="System.Action<Hangfire.IBootstrapperConfiguration>", style=dashed];
m13_0 -> m13_14  [color=darkseagreen4, key=1, label=IAppBuilder, style=dashed];
m13_0 -> m13_15  [color=darkseagreen4, key=1, label=IAppBuilder, style=dashed];
m13_1 -> m13_2  [key=0, style=solid];
m13_1 -> m13_3  [key=0, style=solid];
m13_3 -> m13_4  [key=0, style=solid];
m13_3 -> m13_5  [key=0, style=solid];
m13_6 -> m13_7  [key=0, style=solid];
m13_6 -> m13_19  [key=2, style=dotted];
m13_14 -> m13_13  [key=0, style=solid];
m13_14 -> m13_21  [key=2, style=dotted];
m13_14 -> m13_22  [key=2, style=dotted];
m13_15 -> m13_16  [key=0, style=solid];
m13_15 -> m13_23  [key=2, style=dotted];
m13_2 -> m13_16  [key=0, style=solid];
m13_2 -> m13_17  [key=2, style=dotted];
m13_4 -> m13_16  [key=0, style=solid];
m13_4 -> m13_17  [key=2, style=dotted];
m13_5 -> m13_6  [key=0, style=solid];
m13_5 -> m13_18  [key=2, style=dotted];
m13_5 -> m13_7  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m13_5 -> m13_8  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m13_5 -> m13_9  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m13_5 -> m13_10  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m13_5 -> m13_11  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m13_5 -> m13_13  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m13_5 -> m13_15  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m13_7 -> m13_8  [key=0, style=solid];
m13_7 -> m13_9  [key=0, style=solid];
m13_8 -> m13_9  [key=0, style=solid];
m13_9 -> m13_10  [key=0, style=solid];
m13_9 -> m13_11  [key=0, style=solid];
m13_10 -> m13_11  [key=0, style=solid];
m13_11 -> m13_12  [key=0, style=solid];
m13_11 -> m13_13  [key=0, style=solid];
m13_13 -> m13_14  [key=0, style=solid];
m13_13 -> m13_15  [key=0, style=solid];
m13_12 -> m13_11  [key=0, style=solid];
m13_12 -> m13_20  [key=2, style=dotted];
m13_16 -> m13_0  [color=blue, key=0, style=bold];
}
