digraph  {
n80 [label="HangFire.Tests.ServerFeature", span=""];
n0 [cluster="HangFire.Tests.ServerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="Entry HangFire.Tests.ServerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
n1 [cluster="HangFire.Tests.ServerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
n2 [cluster="HangFire.Tests.ServerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Server'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
n5 [cluster="Unk.GetTestRunner", label="Entry Unk.GetTestRunner", span=""];
n3 [cluster="HangFire.Tests.ServerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
n6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
n7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
n4 [cluster="HangFire.Tests.ServerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="Exit HangFire.Tests.ServerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
n8 [cluster="Unk.OnFeatureStart", label="Entry Unk.OnFeatureStart", span=""];
n9 [cluster="HangFire.Tests.ServerFeature.FeatureTearDown()", label="Entry HangFire.Tests.ServerFeature.FeatureTearDown()", span="39-39"];
n10 [cluster="HangFire.Tests.ServerFeature.FeatureTearDown()", label="testRunner.OnFeatureEnd()", span="41-41"];
n11 [cluster="HangFire.Tests.ServerFeature.FeatureTearDown()", label="testRunner = null", span="42-42"];
n13 [cluster="Unk.OnFeatureEnd", label="Entry Unk.OnFeatureEnd", span=""];
n12 [cluster="HangFire.Tests.ServerFeature.FeatureTearDown()", label="Exit HangFire.Tests.ServerFeature.FeatureTearDown()", span="39-39"];
n14 [cluster="HangFire.Tests.ServerFeature.TestInitialize()", label="Entry HangFire.Tests.ServerFeature.TestInitialize()", span="46-46"];
n15 [cluster="HangFire.Tests.ServerFeature.TestInitialize()", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Server''))", span="48-49"];
n16 [cluster="HangFire.Tests.ServerFeature.TestInitialize()", label="HangFire.Tests.ServerFeature.FeatureSetup(null)", span="51-51"];
n17 [cluster="HangFire.Tests.ServerFeature.TestInitialize()", label="Exit HangFire.Tests.ServerFeature.TestInitialize()", span="46-46"];
n18 [cluster="HangFire.Tests.ServerFeature.ScenarioTearDown()", label="Entry HangFire.Tests.ServerFeature.ScenarioTearDown()", span="56-56"];
n19 [cluster="HangFire.Tests.ServerFeature.ScenarioTearDown()", label="testRunner.OnScenarioEnd()", span="58-58"];
n20 [cluster="HangFire.Tests.ServerFeature.ScenarioTearDown()", label="Exit HangFire.Tests.ServerFeature.ScenarioTearDown()", span="56-56"];
n21 [cluster="Unk.OnScenarioEnd", label="Entry Unk.OnScenarioEnd", span=""];
n22 [cluster="HangFire.Tests.ServerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", label="Entry HangFire.Tests.ServerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
n23 [cluster="HangFire.Tests.ServerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
n24 [cluster="HangFire.Tests.ServerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", label="Exit HangFire.Tests.ServerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
n25 [cluster="Unk.OnScenarioStart", label="Entry Unk.OnScenarioStart", span=""];
n26 [cluster="HangFire.Tests.ServerFeature.ScenarioCleanup()", label="Entry HangFire.Tests.ServerFeature.ScenarioCleanup()", span="66-66"];
n27 [cluster="HangFire.Tests.ServerFeature.ScenarioCleanup()", label="testRunner.CollectScenarioErrors()", span="68-68"];
n28 [cluster="HangFire.Tests.ServerFeature.ScenarioCleanup()", label="Exit HangFire.Tests.ServerFeature.ScenarioCleanup()", span="66-66"];
n29 [cluster="Unk.CollectScenarioErrors", label="Entry Unk.CollectScenarioErrors", span=""];
n30 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldAddItselfToTheServersSet()", label="Entry HangFire.Tests.ServerFeature.WhenAServerStartsItShouldAddItselfToTheServersSet()", span="75-75"];
n31 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldAddItselfToTheServersSet()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When a server starts, it should add itself to the servers set'', ((string[])(null)))", span="77-77"];
n32 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldAddItselfToTheServersSet()", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
n37 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
n33 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldAddItselfToTheServersSet()", label="testRunner.When(''the \'Test\' server starts'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="81-81"];
n34 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldAddItselfToTheServersSet()", label="testRunner.Then(''the servers set should contain the \'Test\' server'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="83-83"];
n38 [cluster="Unk.When", label="Entry Unk.When", span=""];
n35 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldAddItselfToTheServersSet()", label="this.ScenarioCleanup()", span="85-85"];
n39 [cluster="Unk.Then", label="Entry Unk.Then", span=""];
n36 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldAddItselfToTheServersSet()", label="Exit HangFire.Tests.ServerFeature.WhenAServerStartsItShouldAddItselfToTheServersSet()", span="75-75"];
n40 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsProperties()", label="Entry HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsProperties()", span="92-92"];
n41 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsProperties()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When a server starts, it should publicate its properties'', ((string[])(null)))", span="94-94"];
n42 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsProperties()", label="this.ScenarioSetup(scenarioInfo)", span="96-96"];
n43 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsProperties()", label="testRunner.When(''the \'Test\' server starts with 5 workers'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="98-98"];
n44 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsProperties()", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="100-102"];
n45 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsProperties()", label="table1.AddRow(new string[] {\r\n                        ''WorkerCount'',\r\n                        ''5''})", span="103-105"];
n50 [cluster="TechTalk.SpecFlow.Table.cstr", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
n46 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsProperties()", label="table1.AddRow(new string[] {\r\n                        ''StartedAt'',\r\n                        ''<UtcNow timestamp>''})", span="106-108"];
n47 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsProperties()", label="testRunner.Then(''the \'Test\' server\'s properties should contain the following items:'', ((string)(null)), table1, ''Then '')", span="110-110"];
n51 [cluster="Unk.AddRow", label="Entry Unk.AddRow", span=""];
n48 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsProperties()", label="this.ScenarioCleanup()", span="112-112"];
n49 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsProperties()", label="Exit HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsProperties()", span="92-92"];
n52 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsQueues()", label="Entry HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsQueues()", span="119-119"];
n53 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsQueues()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When a server starts, it should publicate its queues'', ((string[])(null)))", span="121-121"];
n54 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsQueues()", label="this.ScenarioSetup(scenarioInfo)", span="123-123"];
n55 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsQueues()", label="testRunner.When(''the \'Test\' server starts with the queues critical, high'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="125-125"];
n56 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsQueues()", label="testRunner.Then(''the \'Test\' server\'s queues list should contain queues critical, high'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="127-127"];
n57 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsQueues()", label="this.ScenarioCleanup()", span="129-129"];
n58 [cluster="HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsQueues()", label="Exit HangFire.Tests.ServerFeature.WhenAServerStartsItShouldPublicateItsQueues()", span="119-119"];
n59 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldRemoveItselfFromTheServersSet()", label="Entry HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldRemoveItselfFromTheServersSet()", span="136-136"];
n60 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldRemoveItselfFromTheServersSet()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When a server shuts down, it should remove itself from the servers set'', ((string[])(null)))", span="138-138"];
n61 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldRemoveItselfFromTheServersSet()", label="this.ScenarioSetup(scenarioInfo)", span="140-140"];
n62 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldRemoveItselfFromTheServersSet()", label="testRunner.When(''the \'Test\' server shuts down'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="142-142"];
n63 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldRemoveItselfFromTheServersSet()", label="testRunner.Then(''the servers set should not contain the \'Test\' server'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="144-144"];
n64 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldRemoveItselfFromTheServersSet()", label="this.ScenarioCleanup()", span="146-146"];
n65 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldRemoveItselfFromTheServersSet()", label="Exit HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldRemoveItselfFromTheServersSet()", span="136-136"];
n66 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsPropertiesList()", label="Entry HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsPropertiesList()", span="153-153"];
n67 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsPropertiesList()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When a server shuts down, it should clear its properties list'', ((string[])(null)))", span="155-155"];
n68 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsPropertiesList()", label="this.ScenarioSetup(scenarioInfo)", span="157-157"];
n69 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsPropertiesList()", label="testRunner.When(''the \'Test\' server shuts down'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="159-159"];
n70 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsPropertiesList()", label="testRunner.Then(''the storage should not contain an entry for the \'Test\' server properties'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="161-161"];
n71 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsPropertiesList()", label="this.ScenarioCleanup()", span="163-163"];
n72 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsPropertiesList()", label="Exit HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsPropertiesList()", span="153-153"];
n73 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsQueues()", label="Entry HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsQueues()", span="170-170"];
n74 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsQueues()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When a server shuts down, it should clear its queues'', ((string[])(null)))", span="172-172"];
n75 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsQueues()", label="this.ScenarioSetup(scenarioInfo)", span="174-174"];
n76 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsQueues()", label="testRunner.When(''the \'Test\' server shuts down'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="176-176"];
n77 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsQueues()", label="testRunner.Then(''the storage should not contain an entry for the \'Test\' server queues'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="178-178"];
n78 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsQueues()", label="this.ScenarioCleanup()", span="180-180"];
n79 [cluster="HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsQueues()", label="Exit HangFire.Tests.ServerFeature.WhenAServerShutsDownItShouldClearItsQueues()", span="170-170"];
d34 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, label="var appliedState = _stateChanger.ChangeState(new StateChangeContext(\r\n                    context.Storage,\r\n                    connection,\r\n                    jobId,\r\n                    new EnqueuedState { Reason = String.Format(''Triggered by {0}'', ToString()) }, \r\n                    ScheduledState.StateName))", prediction=0, span="150-155"];
d53 [label="Hangfire.Server.DelayedJobScheduler", span=""];
d20 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="Entry Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", span="129-129"];
d27 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="var connection = context.Storage.GetConnection()", span="131-131"];
d30 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="var jobId = connection.GetFirstByLowestScoreFromSet(''schedule'', 0, timestamp)", span="137-137"];
d33 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="var enqueuedState = new EnqueuedState\r\n                {\r\n                    Reason = ''Triggered scheduled job''\r\n                }", span="145-148"];
d35 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="appliedState == null", span="157-157"];
d47 [cluster="Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])", label="Entry Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])", span="35-35"];
d46 [cluster="Hangfire.States.EnqueuedState.EnqueuedState()", label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="87-87"];
d23 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", label="Entry Hangfire.Server.DelayedJobScheduler.ToString()", span="124-124"];
d48 [cluster="string.Format(string, object)", label="Entry string.Format(string, object)", span="0-0"];
d49 [cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", label="Entry Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25"];
d7 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", label="_stateChanger = stateChanger", span="92-92"];
d8 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", label="_pollingDelay = pollingDelay", span="93-93"];
d13 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", label="EnqueueNextScheduledJob(context)", span="105-105"];
d18 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", label="context.Sleep(_pollingDelay)", span="120-120"];
d24 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", label="return GetType().Name;", span="126-126"];
d40 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="Exit Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", span="129-129"];
d11 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", label="Entry Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="101-101"];
d32 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="return false;", span="142-142"];
d39 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="return true;", span="169-169"];
d28 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="connection.AcquireDistributedLock(''locks:schedulepoller'', DefaultLockTimeout)", span="132-132"];
d41 [cluster="Hangfire.JobStorage.GetConnection()", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
d36 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="var transaction = connection.CreateWriteTransaction()", span="162-162"];
d29 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="var timestamp = JobHelper.ToTimestamp(DateTime.UtcNow)", span="134-134"];
d31 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="String.IsNullOrEmpty(jobId)", span="139-139"];
d44 [cluster="Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", label="Entry Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="57-57"];
d37 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="transaction.RemoveFromSet(''schedule'', jobId)", span="164-164"];
d25 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", label="Exit Hangfire.Server.DelayedJobScheduler.ToString()", span="124-124"];
d4 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", label="Entry Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="88-88"];
d5 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", label="stateChanger == null", span="90-90"];
d9 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", label="Exit Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="88-88"];
d12 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", label="var jobsEnqueued = 0", span="103-103"];
d15 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", label="context.CancellationToken.IsCancellationRequested", span="109-109"];
d14 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", label="jobsEnqueued++", span="107-107"];
d16 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", label="jobsEnqueued != 0", span="115-115"];
d17 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", label="Logger.InfoFormat(''{0} scheduled job(s) enqueued.'', jobsEnqueued)", span="117-117"];
d19 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", label="Exit Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="101-101"];
d22 [cluster="Hangfire.Server.BackgroundProcessContext.Sleep(System.TimeSpan)", label="Entry Hangfire.Server.BackgroundProcessContext.Sleep(System.TimeSpan)", span="23-23"];
d26 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
d38 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", label="transaction.Commit()", span="165-165"];
d42 [cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", span="28-28"];
d50 [cluster="Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", label="Entry Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27"];
d43 [cluster="Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", label="Entry Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", span="57-57"];
d45 [cluster="string.IsNullOrEmpty(string)", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
d51 [cluster="Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", label="Entry Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="43-43"];
d6 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", label="throw new ArgumentNullException(''stateChanger'');", span="90-90"];
d21 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210"];
d52 [cluster="Hangfire.Storage.IWriteOnlyTransaction.Commit()", label="Entry Hangfire.Storage.IWriteOnlyTransaction.Commit()", span="54-54"];
d10 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_438 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="JobServer.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m0_232 [cluster="System.Linq.Expressions.Expression.Parameter(System.Type, string)", file="JobServer.cs", label="Entry System.Linq.Expressions.Expression.Parameter(System.Type, string)", span="0-0"];
m0_54 [cluster="Hangfire.Logging.LogExtensions.ErrorFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.ErrorFormat(Hangfire.Logging.ILog, string, params object[])", span="153-153"];
m0_56 [cluster="Hangfire.Logging.LogExtensions.ErrorFormat(Hangfire.Logging.ILog, string, params object[])", color=green, community=0, file="JobServer.cs", label="logger.LogFormat(LogLevel.Error, message, args)", prediction=1, span="157-157"];
m0_55 [cluster="Hangfire.Logging.LogExtensions.ErrorFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="logger.IsErrorEnabled()", span="155-155"];
m0_57 [cluster="Hangfire.Logging.LogExtensions.ErrorFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.ErrorFormat(Hangfire.Logging.ILog, string, params object[])", span="153-153"];
m0_331 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log4NetLogger(dynamic)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log4NetLogger(dynamic)", span="709-709"];
m0_345 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log4NetLogger(dynamic)", file="JobServer.cs", label="_logger = logger", span="711-711"];
m0_346 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log4NetLogger(dynamic)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log4NetLogger(dynamic)", span="709-709"];
m0_305 [cluster="Unk.WarnException", file="JobServer.cs", label="Entry Unk.WarnException", span=""];
m0_6 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="JobServer.cs", label="throw new ArgumentNullException(''stateChanger'');", span="90-90"];
m0_129 [cluster="Hangfire.Logging.LogExtensions.GuardAgainstNullLogger(Hangfire.Logging.ILog)", file="JobServer.cs", label="logger == null", span="290-290"];
m0_130 [cluster="Hangfire.Logging.LogExtensions.GuardAgainstNullLogger(Hangfire.Logging.ILog)", file="JobServer.cs", label="throw new ArgumentNullException(nameof(logger));", span="292-292"];
m0_131 [cluster="Hangfire.Logging.LogExtensions.GuardAgainstNullLogger(Hangfire.Logging.ILog)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.GuardAgainstNullLogger(Hangfire.Logging.ILog)", span="288-288"];
m0_26 [cluster="Hangfire.Logging.LogExtensions.IsWarnEnabled(Hangfire.Logging.ILog)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.IsWarnEnabled(Hangfire.Logging.ILog)", span="104-104"];
m0_51 [cluster="Hangfire.Logging.LogExtensions.Error(Hangfire.Logging.ILog, string)", color=green, community=0, file="JobServer.cs", label="logger.Log(LogLevel.Error, message.AsFunc())", prediction=2, span="149-149"];
m0_272 [cluster="Unk.Info", file="JobServer.cs", label="Entry Unk.Info", span=""];
m0_540 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.ColouredConsoleLogger(string)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.ColouredConsoleLogger(string)", span="1435-1435"];
m0_563 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.ColouredConsoleLogger(string)", file="JobServer.cs", label="_name = name", span="1437-1437"];
m0_564 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.ColouredConsoleLogger(string)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.ColouredConsoleLogger(string)", span="1435-1435"];
m0_49 [cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", file="JobServer.cs", label="Entry Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25"];
m0_50 [cluster="Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", color=green, community=0, file="JobServer.cs", label="Entry Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", prediction=3, span="27-27"];
m0_52 [cluster="Hangfire.Storage.IWriteOnlyTransaction.Commit()", file="JobServer.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.Commit()", span="54-54"];
m0_423 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogManagerType()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogManagerType()", span="1018-1018"];
m0_424 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogManagerType()", file="JobServer.cs", label="return Type.GetType(''Serilog.Log, Serilog'');", span="1020-1020"];
m0_425 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogManagerType()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogManagerType()", span="1018-1018"];
m0_234 [cluster="System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", file="JobServer.cs", label="Entry System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", span="0-0"];
m0_53 [cluster="Hangfire.Logging.ILog.IsErrorEnabled()", file="JobServer.cs", label="Hangfire.Server.DelayedJobScheduler", span=""];
m0_37 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="transaction.RemoveFromSet(''schedule'', jobId)", span="164-164"];
m0_39 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="return true;", span="169-169"];
m0_38 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="transaction.Commit()", span="165-165"];
m0_40 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="Exit Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", span="129-129"];
m0_22 [cluster="Hangfire.Logging.LogExtensions.IsTraceEnabled(Hangfire.Logging.ILog)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.IsTraceEnabled(Hangfire.Logging.ILog)", span="98-98"];
m0_23 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", file="JobServer.cs", label="Entry Hangfire.Server.DelayedJobScheduler.ToString()", span="124-124"];
m0_24 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", file="JobServer.cs", label="return GetType().Name;", span="126-126"];
m0_25 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", file="JobServer.cs", label="Exit Hangfire.Server.DelayedJobScheduler.ToString()", span="124-124"];
m0_78 [cluster="Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, System.Func<string>)", span="198-198"];
m0_79 [cluster="Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="GuardAgainstNullLogger(logger)", span="200-200"];
m0_80 [cluster="Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="logger.Log(LogLevel.Info, messageFunc)", span="201-201"];
m0_81 [cluster="Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, System.Func<string>)", span="198-198"];
m0_467 [cluster="System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", file="JobServer.cs", label="Entry System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", span="0-0"];
m0_303 [cluster="Unk.DebugException", file="JobServer.cs", label="Entry Unk.DebugException", span=""];
m0_42 [cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", file="JobServer.cs", label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", span="28-28"];
m0_44 [cluster="Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="JobServer.cs", label="Entry Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="57-57"];
m0_43 [cluster="Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", file="JobServer.cs", label="Entry Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", span="57-57"];
m0_45 [cluster="string.IsNullOrEmpty(string)", file="JobServer.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m0_420 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger(object)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger(object)", span="1121-1121"];
m0_469 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger(object)", file="JobServer.cs", label="_logger = logger", span="1123-1123"];
m0_470 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger(object)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger(object)", span="1121-1121"];
m0_147 [cluster="Hangfire.Logging.LogProvider.For<T>()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProvider.For<T>()", span="335-335"];
m0_148 [cluster="Hangfire.Logging.LogProvider.For<T>()", file="JobServer.cs", label="return GetLogger(typeof(T));", span="337-337"];
m0_149 [cluster="Hangfire.Logging.LogProvider.For<T>()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProvider.For<T>()", span="335-335"];
m0_11 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="Entry Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="101-101"];
m0_12 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="var jobsEnqueued = 0", span="103-103"];
m0_13 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="EnqueueNextScheduledJob(context)", span="105-105"];
m0_14 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="jobsEnqueued++", span="107-107"];
m0_275 [cluster="Unk.Fatal", file="JobServer.cs", label="Entry Unk.Fatal", span=""];
m0_0 [cluster="Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="56-56"];
m0_1 [cluster="Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="56-56"];
m0_571 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", span="1451-1451"];
m0_572 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="JobServer.cs", label="var formattedMessage = MessageFormatter(_name, logLevel, message, e)", span="1453-1453"];
m0_574 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="JobServer.cs", label="Colors.TryGetValue(logLevel, out color)", span="1456-1456"];
m0_573 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="JobServer.cs", label="ConsoleColor color", span="1454-1454"];
m0_578 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="JobServer.cs", label="Console.Out.WriteLine(formattedMessage)", span="1464-1464"];
m0_579 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="JobServer.cs", label="Console.Out.WriteLine(formattedMessage)", span="1474-1474"];
m0_575 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="JobServer.cs", label=Lock, span="1458-1458"];
m0_577 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="JobServer.cs", label="Console.ForegroundColor = color", span="1463-1463"];
m0_576 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="JobServer.cs", label="var originalColor = Console.ForegroundColor", span="1460-1460"];
m0_580 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Hangfire.Logging.LogLevel, string, System.Exception)", span="1451-1451"];
m0_91 [cluster="Hangfire.Logging.LogExtensions.InfoException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.InfoException(Hangfire.Logging.ILog, string, System.Exception)", span="220-220"];
m0_93 [cluster="Hangfire.Logging.LogExtensions.InfoException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="logger.Log(LogLevel.Info, message.AsFunc(), exception)", span="224-224"];
m0_92 [cluster="Hangfire.Logging.LogExtensions.InfoException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="logger.IsInfoEnabled()", span="222-222"];
m0_94 [cluster="Hangfire.Logging.LogExtensions.InfoException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.InfoException(Hangfire.Logging.ILog, string, System.Exception)", span="220-220"];
m0_531 [cluster="System.Action<T1, T2, T3, T4>.Invoke(T1, T2, T3, T4)", file="JobServer.cs", label="Entry System.Action<T1, T2, T3, T4>.Invoke(T1, T2, T3, T4)", span="0-0"];
m0_116 [cluster="Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, string)", span="264-264"];
m0_118 [cluster="Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="logger.Log(LogLevel.Warn, message.AsFunc())", span="268-268"];
m0_117 [cluster="Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="logger.IsWarnEnabled()", span="266-266"];
m0_119 [cluster="Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, string)", span="264-264"];
m0_334 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogManagerType()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogManagerType()", span="691-691"];
m0_335 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogManagerType()", file="JobServer.cs", label="return Type.GetType(''log4net.LogManager, log4net'');", span="693-693"];
m0_336 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogManagerType()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogManagerType()", span="691-691"];
m0_271 [cluster="Unk.Debug", file="JobServer.cs", label="Entry Unk.Debug", span=""];
m0_221 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetLogManagerType()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.NLogLogProvider.GetLogManagerType()", span="509-509"];
m0_222 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetLogManagerType()", file="JobServer.cs", label="return Type.GetType(''NLog.LogManager, NLog'');", span="511-511"];
m0_223 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetLogManagerType()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.GetLogManagerType()", span="509-509"];
m0_8 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="JobServer.cs", label="_pollingDelay = pollingDelay", span="93-93"];
m0_9 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="JobServer.cs", label="Exit Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="88-88"];
m0_10 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="JobServer.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_87 [cluster="Hangfire.Logging.LogExtensions.InfoFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.InfoFormat(Hangfire.Logging.ILog, string, params object[])", span="212-212"];
m0_89 [cluster="Hangfire.Logging.LogExtensions.InfoFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="logger.LogFormat(LogLevel.Info, message, args)", span="216-216"];
m0_88 [cluster="Hangfire.Logging.LogExtensions.InfoFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="logger.IsInfoEnabled()", span="214-214"];
m0_90 [cluster="Hangfire.Logging.LogExtensions.InfoFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.InfoFormat(Hangfire.Logging.ILog, string, params object[])", span="212-212"];
m0_132 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="JobServer.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_103 [cluster="Hangfire.Logging.ILog.IsTraceEnabled()", file="JobServer.cs", label="Entry Hangfire.Logging.ILog.IsTraceEnabled()", span="98-98"];
m0_276 [cluster="Unk.Trace", file="JobServer.cs", label="Entry Unk.Trace", span=""];
m0_270 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="590-590"];
m0_280 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.DebugException(messageFunc(), exception)", span="597-597"];
m0_284 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.InfoException(messageFunc(), exception)", span="604-604"];
m0_288 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.WarnException(messageFunc(), exception)", span="611-611"];
m0_292 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.ErrorException(messageFunc(), exception)", span="618-618"];
m0_296 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.FatalException(messageFunc(), exception)", span="625-625"];
m0_299 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.TraceException(messageFunc(), exception)", span="632-632"];
m0_279 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsDebugEnabled", span="595-595"];
m0_281 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="598-598"];
m0_283 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsInfoEnabled", span="602-602"];
m0_285 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="605-605"];
m0_287 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsWarnEnabled", span="609-609"];
m0_289 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="612-612"];
m0_291 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsErrorEnabled", span="616-616"];
m0_293 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="619-619"];
m0_295 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsFatalEnabled", span="623-623"];
m0_297 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="626-626"];
m0_298 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsTraceEnabled", span="630-630"];
m0_300 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="633-633"];
m0_277 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label=logLevel, span="592-592"];
m0_278 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Debug", span="594-594"];
m0_301 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return false;", span="637-637"];
m0_282 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Info", span="601-601"];
m0_286 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Warn", span="608-608"];
m0_290 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Error", span="615-615"];
m0_294 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Fatal", span="622-622"];
m0_302 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="590-590"];
m0_138 [cluster="string.Format(System.IFormatProvider, string, params object[])", file="JobServer.cs", label="Entry string.Format(System.IFormatProvider, string, params object[])", span="0-0"];
m0_439 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", span="1058-1058"];
m0_454 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="IsEnabled = Expression.Lambda<Func<object, object, bool>>(isEnabledMethodCall, new[]\r\n                {\r\n                    instanceParam,\r\n                    levelParam\r\n                }).Compile()", span="1076-1080"];
m0_459 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="Write = Expression.Lambda<Action<object, object, string>>(writeMethodExp, new[]\r\n                {\r\n                    instanceParam,\r\n                    levelParam,\r\n                    messageParam\r\n                }).Compile()", span="1088-1093"];
m0_463 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="WriteException = Expression.Lambda<Action<object, object, Exception, string>>(writeMethodExp, new[]\r\n                {\r\n                    instanceParam,\r\n                    levelParam,\r\n                    exceptionParam,\r\n                    messageParam,\r\n                }).Compile()", span="1112-1118"];
m0_448 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="MethodInfo isEnabledMethodInfo = loggerType.GetRuntimeMethod(''IsEnabled'', new Type[] { logEventTypeType })", span="1070-1070"];
m0_455 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="MethodInfo writeMethodInfo = loggerType.GetRuntimeMethod(''Write'', new[] { logEventTypeType, typeof(string), typeof(object[]) })", span="1084-1084"];
m0_460 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="MethodInfo writeExceptionMethodInfo = loggerType.GetRuntimeMethod(''Write'', new[]\r\n                {\r\n                    logEventTypeType,\r\n                    typeof(Exception), \r\n                    typeof(string),\r\n                    typeof(object[])\r\n                })", span="1097-1103"];
m0_453 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="MethodCallExpression isEnabledMethodCall = Expression.Call(instanceCast, isEnabledMethodInfo, levelCast)", span="1075-1075"];
m0_462 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="writeMethodExp = Expression.Call(\r\n                    instanceCast,\r\n                    writeExceptionMethodInfo,\r\n                    levelCast,\r\n                    exceptionParam,\r\n                    messageParam,\r\n                    propertyValuesParam)", span="1105-1111"];
m0_449 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="ParameterExpression instanceParam = Expression.Parameter(typeof(object))", span="1071-1071"];
m0_451 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="ParameterExpression levelParam = Expression.Parameter(typeof(object))", span="1073-1073"];
m0_458 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="MethodCallExpression writeMethodExp = Expression.Call(instanceCast, writeMethodInfo, levelCast, messageParam, propertyValuesParam)", span="1087-1087"];
m0_456 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="ParameterExpression messageParam = Expression.Parameter(typeof(string))", span="1085-1085"];
m0_461 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="ParameterExpression exceptionParam = Expression.Parameter(typeof(Exception))", span="1104-1104"];
m0_440 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="var logEventTypeType = Type.GetType(''Serilog.Events.LogEventLevel, Serilog'')", span="1060-1060"];
m0_447 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="var loggerType = Type.GetType(''Serilog.ILogger, Serilog'')", span="1069-1069"];
m0_457 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="ConstantExpression propertyValuesParam = Expression.Constant(new object[0])", span="1086-1086"];
m0_452 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="UnaryExpression levelCast = Expression.Convert(levelParam, logEventTypeType)", span="1074-1074"];
m0_450 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="UnaryExpression instanceCast = Expression.Convert(instanceParam, loggerType)", span="1072-1072"];
m0_441 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="DebugLevel = Enum.Parse(logEventTypeType, ''Debug'')", span="1061-1061"];
m0_442 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="ErrorLevel = Enum.Parse(logEventTypeType, ''Error'')", span="1062-1062"];
m0_443 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="FatalLevel = Enum.Parse(logEventTypeType, ''Fatal'')", span="1063-1063"];
m0_444 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="InformationLevel = Enum.Parse(logEventTypeType, ''Information'')", span="1064-1064"];
m0_445 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="VerboseLevel = Enum.Parse(logEventTypeType, ''Verbose'')", span="1065-1065"];
m0_446 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="WarningLevel = Enum.Parse(logEventTypeType, ''Warning'')", span="1066-1066"];
m0_464 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.SerilogLogger()", span="1058-1058"];
m0_466 [cluster="System.Linq.Expressions.Expression.Parameter(System.Type)", file="JobServer.cs", label="Entry System.Linq.Expressions.Expression.Parameter(System.Type)", span="0-0"];
m0_326 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.IsLoggerAvailable()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.IsLoggerAvailable()", span="686-686"];
m0_332 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.IsLoggerAvailable()", file="JobServer.cs", label="return ProviderIsAvailableOverride && GetLogManagerType() != null;", span="688-688"];
m0_333 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.IsLoggerAvailable()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.IsLoggerAvailable()", span="686-686"];
m0_74 [cluster="Hangfire.Logging.LogExtensions.FatalException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.FatalException(Hangfire.Logging.ILog, string, System.Exception)", span="190-190"];
m0_76 [cluster="Hangfire.Logging.LogExtensions.FatalException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="logger.Log(LogLevel.Fatal, message.AsFunc(), exception)", span="194-194"];
m0_75 [cluster="Hangfire.Logging.LogExtensions.FatalException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="logger.IsFatalEnabled()", span="192-192"];
m0_77 [cluster="Hangfire.Logging.LogExtensions.FatalException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.FatalException(Hangfire.Logging.ILog, string, System.Exception)", span="190-190"];
m0_153 [cluster="Hangfire.Logging.LogProvider.GetLogger(string)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProvider.GetLogger(string)", span="367-367"];
m0_155 [cluster="Hangfire.Logging.LogProvider.GetLogger(string)", file="JobServer.cs", label="return logProvider == null ? new NoOpLogger() : (ILog)new LoggerExecutionWrapper(logProvider.GetLogger(name));", span="370-370"];
m0_154 [cluster="Hangfire.Logging.LogProvider.GetLogger(string)", file="JobServer.cs", label="ILogProvider logProvider = _currentLogProvider ?? ResolveLogProvider()", span="369-369"];
m0_156 [cluster="Hangfire.Logging.LogProvider.GetLogger(string)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProvider.GetLogger(string)", span="367-367"];
m0_99 [cluster="Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, string)", span="234-234"];
m0_101 [cluster="Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="logger.Log(LogLevel.Trace, message.AsFunc())", span="238-238"];
m0_100 [cluster="Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="logger.IsTraceEnabled()", span="236-236"];
m0_102 [cluster="Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, string)", span="234-234"];
m0_504 [cluster="System.Action<T1, T2, T3>.Invoke(T1, T2, T3)", file="JobServer.cs", label="Entry System.Action<T1, T2, T3>.Invoke(T1, T2, T3)", span="0-0"];
m0_218 [cluster="System.Func<T, TResult>.Invoke(T)", file="JobServer.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m0_304 [cluster="Unk.InfoException", file="JobServer.cs", label="Entry Unk.InfoException", span=""];
m0_235 [cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", file="JobServer.cs", label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0"];
m0_31 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="String.IsNullOrEmpty(jobId)", span="139-139"];
m0_33 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="var enqueuedState = new EnqueuedState\r\n                {\r\n                    Reason = ''Triggered scheduled job''\r\n                }", span="145-148"];
m0_32 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="return false;", span="142-142"];
m0_34 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="var appliedState = _stateChanger.ChangeState(new StateChangeContext(\r\n                    context.Storage,\r\n                    connection,\r\n                    jobId,\r\n                    new EnqueuedState { Reason = String.Format(''Triggered by {0}'', ToString()) }, \r\n                    ScheduledState.StateName))", span="150-155"];
m0_69 [cluster="Hangfire.Logging.ILog.IsFatalEnabled()", file="JobServer.cs", label="Entry Hangfire.Logging.ILog.IsFatalEnabled()", span="86-86"];
m0_415 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.IsLoggerAvailable()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.IsLoggerAvailable()", span="1013-1013"];
m0_421 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.IsLoggerAvailable()", file="JobServer.cs", label="return ProviderIsAvailableOverride && GetLogManagerType() != null;", span="1015-1015"];
m0_422 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.IsLoggerAvailable()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.IsLoggerAvailable()", span="1013-1013"];
m0_134 [cluster="Hangfire.Logging.LogExtensions.LogFormat(Hangfire.Logging.ILog, Hangfire.Logging.LogLevel, string, params object[])", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.LogFormat(Hangfire.Logging.ILog, Hangfire.Logging.LogLevel, string, params object[])", span="296-296"];
m0_136 [cluster="Hangfire.Logging.LogExtensions.LogFormat(Hangfire.Logging.ILog, Hangfire.Logging.LogLevel, string, params object[])", file="JobServer.cs", label="logger.Log(logLevel, result.AsFunc())", span="299-299"];
m0_135 [cluster="Hangfire.Logging.LogExtensions.LogFormat(Hangfire.Logging.ILog, Hangfire.Logging.LogLevel, string, params object[])", file="JobServer.cs", label="var result = string.Format(CultureInfo.InvariantCulture, message, args)", span="298-298"];
m0_137 [cluster="Hangfire.Logging.LogExtensions.LogFormat(Hangfire.Logging.ILog, Hangfire.Logging.LogLevel, string, params object[])", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.LogFormat(Hangfire.Logging.ILog, Hangfire.Logging.LogLevel, string, params object[])", span="296-296"];
m0_375 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="765-765"];
m0_379 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Info(messageFunc(), exception)", span="772-772"];
m0_383 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Warn(messageFunc(), exception)", span="779-779"];
m0_387 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Error(messageFunc(), exception)", span="786-786"];
m0_391 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Fatal(messageFunc(), exception)", span="793-793"];
m0_394 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Debug(messageFunc(), exception)", span="800-800"];
m0_378 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsDebugEnabled", span="770-770"];
m0_380 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="773-773"];
m0_382 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsWarnEnabled", span="777-777"];
m0_384 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="780-780"];
m0_386 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsErrorEnabled", span="784-784"];
m0_388 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="787-787"];
m0_390 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsFatalEnabled", span="791-791"];
m0_392 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="794-794"];
m0_393 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsDebugEnabled", span="798-798"];
m0_395 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="801-801"];
m0_376 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label=logLevel, span="767-767"];
m0_377 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Info", span="769-769"];
m0_396 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return false;", span="805-805"];
m0_381 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Warn", span="776-776"];
m0_385 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Error", span="783-783"];
m0_389 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Fatal", span="790-790"];
m0_397 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="765-765"];
m0_15 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="context.CancellationToken.IsCancellationRequested", span="109-109"];
m0_16 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="JobServer.cs", label="jobsEnqueued != 0", prediction=4, span="115-115"];
m0_17 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="JobServer.cs", label="Logger.InfoFormat(''{0} scheduled job(s) enqueued.'', jobsEnqueued)", prediction=4, span="117-117"];
m0_18 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobServer.cs", label="context.Sleep(_pollingDelay)", span="120-120"];
m0_21 [cluster="Hangfire.Logging.LogExtensions.IsTraceEnabled(Hangfire.Logging.ILog)", color=green, community=0, file="JobServer.cs", label="return logger.Log(LogLevel.Trace, null);", prediction=6, span="101-101"];
m0_435 [cluster="lambda expression", file="JobServer.cs", label="Entry lambda expression", span="1042-1042"];
m0_200 [cluster="lambda expression", file="JobServer.cs", label="Log(LogLevel.Error, () => FailedToGenerateLogMessage, ex)", span="460-460"];
m0_198 [cluster="lambda expression", file="JobServer.cs", label="return messageFunc();", span="456-456"];
m0_199 [cluster="lambda expression", file="JobServer.cs", label=Exception, span="458-458"];
m0_201 [cluster="lambda expression", file="JobServer.cs", label="return null;", span="462-462"];
m0_204 [cluster="lambda expression", file="JobServer.cs", label="Entry lambda expression", span="460-460"];
m0_197 [cluster="lambda expression", file="JobServer.cs", label="Entry lambda expression", span="452-463"];
m0_202 [cluster="lambda expression", file="JobServer.cs", label="Exit lambda expression", span="452-463"];
m0_206 [cluster="lambda expression", file="JobServer.cs", label="Exit lambda expression", span="460-460"];
m0_205 [cluster="lambda expression", file="JobServer.cs", label=FailedToGenerateLogMessage, span="460-460"];
m0_168 [cluster="lambda expression", file="JobServer.cs", label="new NLogLogProvider()", span="390-390"];
m0_172 [cluster="lambda expression", file="JobServer.cs", label="new Log4NetLogProvider()", span="391-391"];
m0_164 [cluster="lambda expression", file="JobServer.cs", label="new SerilogLogProvider()", span="389-389"];
m0_167 [cluster="lambda expression", file="JobServer.cs", label="Entry lambda expression", span="390-390"];
m0_169 [cluster="lambda expression", file="JobServer.cs", label="Exit lambda expression", span="390-390"];
m0_171 [cluster="lambda expression", file="JobServer.cs", label="Entry lambda expression", span="391-391"];
m0_173 [cluster="lambda expression", file="JobServer.cs", label="Exit lambda expression", span="391-391"];
m0_163 [cluster="lambda expression", file="JobServer.cs", label="Entry lambda expression", span="389-389"];
m0_165 [cluster="lambda expression", file="JobServer.cs", label="Exit lambda expression", span="389-389"];
m0_436 [cluster="lambda expression", file="JobServer.cs", label="func(''Name'', name, false)", span="1042-1042"];
m0_437 [cluster="lambda expression", file="JobServer.cs", label="Exit lambda expression", span="1042-1042"];
m0_308 [cluster="Unk.TraceException", file="JobServer.cs", label="Entry Unk.TraceException", span=""];
m0_19 [cluster="Hangfire.Logging.LogExtensions.IsTraceEnabled(Hangfire.Logging.ILog)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.IsTraceEnabled(Hangfire.Logging.ILog)", span="98-98"];
m0_502 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="JobServer.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m0_203 [cluster="System.Func<TResult>.Invoke()", file="JobServer.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_233 [cluster="System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, params System.Linq.Expressions.Expression[])", file="JobServer.cs", label="Entry System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, params System.Linq.Expressions.Expression[])", span="0-0"];
m0_238 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="532-532"];
m0_246 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Debug(messageFunc())", span="547-547"];
m0_250 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Info(messageFunc())", span="554-554"];
m0_254 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Warn(messageFunc())", span="561-561"];
m0_258 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Error(messageFunc())", span="568-568"];
m0_262 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Fatal(messageFunc())", span="575-575"];
m0_265 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Trace(messageFunc())", span="582-582"];
m0_245 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsDebugEnabled", span="545-545"];
m0_247 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="548-548"];
m0_249 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsInfoEnabled", span="552-552"];
m0_251 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="555-555"];
m0_253 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsWarnEnabled", span="559-559"];
m0_255 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="562-562"];
m0_257 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsErrorEnabled", span="566-566"];
m0_259 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="569-569"];
m0_261 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsFatalEnabled", span="573-573"];
m0_263 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="576-576"];
m0_264 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsTraceEnabled", span="580-580"];
m0_266 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="583-583"];
m0_240 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return IsLogLevelEnable(logLevel);", span="536-536"];
m0_242 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return LogException(logLevel, messageFunc, exception);", span="540-540"];
m0_239 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="messageFunc == null", span="534-534"];
m0_241 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="exception != null", span="538-538"];
m0_243 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label=logLevel, span="542-542"];
m0_244 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Debug", span="544-544"];
m0_267 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return false;", span="587-587"];
m0_248 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Info", span="551-551"];
m0_252 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Warn", span="558-558"];
m0_256 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Error", span="565-565"];
m0_260 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Fatal", span="572-572"];
m0_268 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="532-532"];
m0_581 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.MessageFormatterDelegate.Invoke(string, Hangfire.Logging.LogLevel, object, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.MessageFormatterDelegate.Invoke(string, Hangfire.Logging.LogLevel, object, System.Exception)", span="1393-1393"];
m0_2 [cluster="Hangfire.Logging.LogExtensions.IsDebugEnabled(Hangfire.Logging.ILog)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.IsDebugEnabled(Hangfire.Logging.ILog)", span="74-74"];
m0_3 [cluster="Hangfire.Logging.LogExtensions.IsDebugEnabled(Hangfire.Logging.ILog)", file="JobServer.cs", label="GuardAgainstNullLogger(logger)", span="76-76"];
m0_47 [cluster="Hangfire.Logging.LogExtensions.Error(Hangfire.Logging.ILog, System.Func<string>)", color=green, community=0, file="JobServer.cs", label="logger.Log(LogLevel.Error, messageFunc)", prediction=7, span="142-142"];
m0_465 [cluster="System.Enum.Parse(System.Type, string)", file="JobServer.cs", label="Entry System.Enum.Parse(System.Type, string)", span="0-0"];
m0_343 [cluster="System.Reflection.Assembly.GetEntryAssembly()", file="JobServer.cs", label="Entry System.Reflection.Assembly.GetEntryAssembly()", span="0-0"];
m0_46 [cluster="Hangfire.Logging.LogExtensions.Error(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.Error(Hangfire.Logging.ILog, System.Func<string>)", span="140-140"];
m0_211 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.IsLoggerAvailable()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.NLogLogProvider.IsLoggerAvailable()", span="504-504"];
m0_219 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.IsLoggerAvailable()", file="JobServer.cs", label="return ProviderIsAvailableOverride && GetLogManagerType() != null;", span="506-506"];
m0_220 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.IsLoggerAvailable()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.IsLoggerAvailable()", span="504-504"];
m0_214 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetLogger(string)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.NLogLogProvider.GetLogger(string)", span="499-499"];
m0_215 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetLogger(string)", file="JobServer.cs", label="return new NLogLogger(_getLoggerByNameDelegate(name));", span="501-501"];
m0_216 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetLogger(string)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.GetLogger(string)", span="499-499"];
m0_20 [cluster="Hangfire.Logging.LogExtensions.IsTraceEnabled(Hangfire.Logging.ILog)", color=green, community=0, file="JobServer.cs", label="GuardAgainstNullLogger(logger)", prediction=8, span="100-100"];
m0_27 [cluster="Hangfire.Logging.LogExtensions.Debug(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.Debug(Hangfire.Logging.ILog, System.Func<string>)", span="110-110"];
m0_28 [cluster="Hangfire.Logging.LogExtensions.Debug(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="GuardAgainstNullLogger(logger)", span="112-112"];
m0_36 [cluster="T.AsFunc<T>()", file="JobServer.cs", label="Entry T.AsFunc<T>()", span="303-303"];
m0_29 [cluster="Hangfire.Logging.LogExtensions.Debug(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="logger.Log(LogLevel.Debug, messageFunc)", span="113-113"];
m0_35 [cluster="Hangfire.Logging.ILog.IsDebugEnabled()", file="JobServer.cs", label="Entry Hangfire.Logging.ILog.IsDebugEnabled()", span="74-74"];
m0_95 [cluster="Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, System.Func<string>)", span="228-228"];
m0_96 [cluster="Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="GuardAgainstNullLogger(logger)", span="230-230"];
m0_97 [cluster="Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="logger.Log(LogLevel.Trace, messageFunc)", span="231-231"];
m0_98 [cluster="Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.Trace(Hangfire.Logging.ILog, System.Func<string>)", span="228-228"];
m0_48 [cluster="string.Format(string, object)", file="JobServer.cs", label="Entry string.Format(string, object)", span="0-0"];
m0_217 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.NLogLogger(dynamic)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.NLogLogger(dynamic)", span="527-527"];
m0_236 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.NLogLogger(dynamic)", file="JobServer.cs", label="_logger = logger", span="529-529"];
m0_237 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.NLogLogger(dynamic)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.NLogLogger(dynamic)", span="527-527"];
m0_344 [cluster="System.Linq.Expressions.Expression.Constant(object)", file="JobServer.cs", label="Entry System.Linq.Expressions.Expression.Constant(object)", span="0-0"];
m0_108 [cluster="Hangfire.Logging.LogExtensions.TraceException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.TraceException(Hangfire.Logging.ILog, string, System.Exception)", span="250-250"];
m0_110 [cluster="Hangfire.Logging.LogExtensions.TraceException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="logger.Log(LogLevel.Trace, message.AsFunc(), exception)", span="254-254"];
m0_109 [cluster="Hangfire.Logging.LogExtensions.TraceException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="logger.IsTraceEnabled()", span="252-252"];
m0_111 [cluster="Hangfire.Logging.LogExtensions.TraceException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.TraceException(Hangfire.Logging.ILog, string, System.Exception)", span="250-250"];
m0_133 [cluster="Unk.nameof", file="JobServer.cs", label="Entry Unk.nameof", span=""];
m0_212 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="JobServer.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m0_468 [cluster="System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)", file="JobServer.cs", label="Entry System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)", span="0-0"];
m0_121 [cluster="Hangfire.Logging.LogExtensions.WarnFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.WarnFormat(Hangfire.Logging.ILog, string, params object[])", span="272-272"];
m0_123 [cluster="Hangfire.Logging.LogExtensions.WarnFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="logger.LogFormat(LogLevel.Warn, message, args)", span="276-276"];
m0_122 [cluster="Hangfire.Logging.LogExtensions.WarnFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="logger.IsWarnEnabled()", span="274-274"];
m0_124 [cluster="Hangfire.Logging.LogExtensions.WarnFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.WarnFormat(Hangfire.Logging.ILog, string, params object[])", span="272-272"];
m0_503 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="1185-1185"];
m0_508 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="WriteException(_logger, DebugLevel, exception, messageFunc())", span="1192-1192"];
m0_512 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="WriteException(_logger, InformationLevel, exception, messageFunc())", span="1199-1199"];
m0_516 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="WriteException(_logger, WarningLevel, exception, messageFunc())", span="1206-1206"];
m0_520 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="WriteException(_logger, ErrorLevel, exception, messageFunc())", span="1213-1213"];
m0_524 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="WriteException(_logger, FatalLevel, exception, messageFunc())", span="1220-1220"];
m0_527 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="WriteException(_logger, VerboseLevel, exception, messageFunc())", span="1227-1227"];
m0_507 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="IsEnabled(_logger, DebugLevel)", span="1190-1190"];
m0_509 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1193-1193"];
m0_511 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="IsEnabled(_logger, InformationLevel)", span="1197-1197"];
m0_513 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1200-1200"];
m0_515 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="IsEnabled(_logger, WarningLevel)", span="1204-1204"];
m0_517 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1207-1207"];
m0_519 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="IsEnabled(_logger, ErrorLevel)", span="1211-1211"];
m0_521 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1214-1214"];
m0_523 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="IsEnabled(_logger, FatalLevel)", span="1218-1218"];
m0_525 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1221-1221"];
m0_526 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="IsEnabled(_logger, VerboseLevel)", span="1225-1225"];
m0_528 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1228-1228"];
m0_505 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label=logLevel, span="1187-1187"];
m0_506 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Debug", span="1189-1189"];
m0_529 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return false;", span="1232-1232"];
m0_510 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Info", span="1196-1196"];
m0_514 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Warn", span="1203-1203"];
m0_518 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Error", span="1210-1210"];
m0_522 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Fatal", span="1217-1217"];
m0_530 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.LogException(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="1185-1185"];
m0_582 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="JobServer.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m0_273 [cluster="Unk.Warn", file="JobServer.cs", label="Entry Unk.Warn", span=""];
m0_174 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", span="666-666"];
m0_324 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", file="JobServer.cs", label="_getLoggerByNameDelegate = GetGetLoggerMethodCall()", span="672-672"];
m0_322 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", file="JobServer.cs", label="!IsLoggerAvailable()", span="668-668"];
m0_323 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", file="JobServer.cs", label="throw new InvalidOperationException(''log4net.LogManager not found'');", span="670-670"];
m0_325 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogProvider()", span="666-666"];
m0_104 [cluster="Hangfire.Logging.LogExtensions.TraceFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.TraceFormat(Hangfire.Logging.ILog, string, params object[])", span="242-242"];
m0_106 [cluster="Hangfire.Logging.LogExtensions.TraceFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="logger.LogFormat(LogLevel.Trace, message, args)", span="246-246"];
m0_105 [cluster="Hangfire.Logging.LogExtensions.TraceFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="logger.IsTraceEnabled()", span="244-244"];
m0_107 [cluster="Hangfire.Logging.LogExtensions.TraceFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.TraceFormat(Hangfire.Logging.ILog, string, params object[])", span="242-242"];
m0_166 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", span="993-993"];
m0_413 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", file="JobServer.cs", label="_getLoggerByNameDelegate = GetForContextMethodCall()", span="999-999"];
m0_411 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", file="JobServer.cs", label="!IsLoggerAvailable()", span="995-995"];
m0_412 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", file="JobServer.cs", label="throw new InvalidOperationException(''Serilog.Log not found'');", span="997-997"];
m0_414 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogProvider()", span="993-993"];
m0_583 [cluster="System.IO.TextWriter.WriteLine(string)", file="JobServer.cs", label="Entry System.IO.TextWriter.WriteLine(string)", span="0-0"];
m0_184 [cluster="System.Type.GetTypeInfo()", file="JobServer.cs", label="Entry System.Type.GetTypeInfo()", span="0-0"];
m0_340 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="MethodCallExpression methodCall = Expression.Call(null, method, new Expression[] { Expression.Constant(Assembly.GetEntryAssembly()), nameParam })", span="701-701"];
m0_327 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", span="696-696"];
m0_337 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="Type logManagerType = GetLogManagerType()", span="698-698"];
m0_341 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="return Expression.Lambda<Func<string, object>>(methodCall, new[] { nameParam }).Compile();", span="702-702"];
m0_338 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="MethodInfo method = logManagerType.GetRuntimeMethod(''GetLogger'', new[] { typeof(string) })", span="699-699"];
m0_339 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="ParameterExpression nameParam = Expression.Parameter(typeof(string), ''name'')", span="700-700"];
m0_342 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.GetGetLoggerMethodCall()", span="696-696"];
m0_62 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, System.Func<string>)", span="169-169"];
m0_63 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="logger.Log(LogLevel.Fatal, messageFunc)", span="171-171"];
m0_64 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, System.Func<string>)", span="169-169"];
m0_145 [cluster="Hangfire.Logging.ILogProvider.GetLogger(string)", file="JobServer.cs", label="Entry Hangfire.Logging.ILogProvider.GetLogger(string)", span="319-319"];
m0_146 [cluster="Hangfire.Logging.ILogProvider.GetLogger(string)", file="JobServer.cs", label="Exit Hangfire.Logging.ILogProvider.GetLogger(string)", span="319-319"];
m0_416 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", span="1023-1023"];
m0_426 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="JobServer.cs", label="Type logManagerType = GetLogManagerType()", span="1025-1025"];
m0_433 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="JobServer.cs", label="return name => func(''Name'', name, false);", span="1042-1042"];
m0_427 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="JobServer.cs", label="MethodInfo method = logManagerType.GetRuntimeMethod(''ForContext'', new[] { typeof(string), typeof(object), typeof(bool) })", span="1026-1026"];
m0_432 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="JobServer.cs", label="var func = Expression.Lambda<Func<string, object, bool, object>>(methodCall, new[]\r\n            {\r\n                propertyNameParam,\r\n                valueParam,\r\n                destructureObjectsParam\r\n            }).Compile()", span="1036-1041"];
m0_428 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="JobServer.cs", label="ParameterExpression propertyNameParam = Expression.Parameter(typeof(string), ''propertyName'')", span="1027-1027"];
m0_431 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="JobServer.cs", label="MethodCallExpression methodCall = Expression.Call(null, method, new Expression[]\r\n            {\r\n                propertyNameParam, \r\n                valueParam,\r\n                destructureObjectsParam\r\n            })", span="1030-1035"];
m0_429 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="JobServer.cs", label="ParameterExpression valueParam = Expression.Parameter(typeof(object), ''value'')", span="1028-1028"];
m0_430 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="JobServer.cs", label="ParameterExpression destructureObjectsParam = Expression.Parameter(typeof(bool), ''destructureObjects'')", span="1029-1029"];
m0_434 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.GetForContextMethodCall()", span="1023-1023"];
m0_269 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", span="640-640"];
m0_311 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="return _logger.IsDebugEnabled;", span="645-645"];
m0_313 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="return _logger.IsInfoEnabled;", span="647-647"];
m0_315 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="return _logger.IsWarnEnabled;", span="649-649"];
m0_317 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="return _logger.IsErrorEnabled;", span="651-651"];
m0_319 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="return _logger.IsFatalEnabled;", span="653-653"];
m0_320 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="return _logger.IsTraceEnabled;", span="655-655"];
m0_310 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="LogLevel.Debug", span="644-644"];
m0_312 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="LogLevel.Info", span="646-646"];
m0_314 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="LogLevel.Warn", span="648-648"];
m0_316 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="LogLevel.Error", span="650-650"];
m0_318 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="LogLevel.Fatal", span="652-652"];
m0_309 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label=logLevel, span="642-642"];
m0_321 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", span="640-640"];
m0_471 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="1126-1126"];
m0_479 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Write(_logger, DebugLevel, messageFunc())", span="1142-1142"];
m0_483 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Write(_logger, InformationLevel, messageFunc())", span="1149-1149"];
m0_487 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Write(_logger, WarningLevel, messageFunc())", span="1156-1156"];
m0_491 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Write(_logger, ErrorLevel, messageFunc())", span="1163-1163"];
m0_495 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Write(_logger, FatalLevel, messageFunc())", span="1170-1170"];
m0_498 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Write(_logger, VerboseLevel, messageFunc())", span="1177-1177"];
m0_478 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="IsEnabled(_logger, DebugLevel)", span="1140-1140"];
m0_480 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1143-1143"];
m0_482 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="IsEnabled(_logger, InformationLevel)", span="1147-1147"];
m0_484 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1150-1150"];
m0_486 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="IsEnabled(_logger, WarningLevel)", span="1154-1154"];
m0_488 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1157-1157"];
m0_490 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="IsEnabled(_logger, ErrorLevel)", span="1161-1161"];
m0_492 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1164-1164"];
m0_494 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="IsEnabled(_logger, FatalLevel)", span="1168-1168"];
m0_496 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1171-1171"];
m0_497 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="IsEnabled(_logger, VerboseLevel)", span="1175-1175"];
m0_499 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1178-1178"];
m0_473 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return IsEnabled(_logger, logLevel);", span="1130-1130"];
m0_475 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return LogException(logLevel, messageFunc, exception);", span="1134-1134"];
m0_472 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="messageFunc == null", span="1128-1128"];
m0_474 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="exception != null", span="1132-1132"];
m0_476 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label=logLevel, span="1137-1137"];
m0_477 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Debug", span="1139-1139"];
m0_500 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return false;", span="1182-1182"];
m0_481 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Info", span="1146-1146"];
m0_485 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Warn", span="1153-1153"];
m0_489 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Error", span="1160-1160"];
m0_493 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Fatal", span="1167-1167"];
m0_501 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="1126-1126"];
m0_4 [cluster="Hangfire.Logging.LogExtensions.IsDebugEnabled(Hangfire.Logging.ILog)", file="JobServer.cs", label="return logger.Log(LogLevel.Debug, null);", span="77-77"];
m0_5 [cluster="Hangfire.Logging.LogExtensions.IsDebugEnabled(Hangfire.Logging.ILog)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.IsDebugEnabled(Hangfire.Logging.ILog)", span="74-74"];
m0_274 [cluster="Unk.Error", file="JobServer.cs", label="Entry Unk.Error", span=""];
m0_70 [cluster="Hangfire.Logging.LogExtensions.FatalFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.FatalFormat(Hangfire.Logging.ILog, string, params object[])", span="182-182"];
m0_72 [cluster="Hangfire.Logging.LogExtensions.FatalFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="logger.LogFormat(LogLevel.Fatal, message, args)", span="186-186"];
m0_71 [cluster="Hangfire.Logging.LogExtensions.FatalFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="logger.IsFatalEnabled()", span="184-184"];
m0_73 [cluster="Hangfire.Logging.LogExtensions.FatalFormat(Hangfire.Logging.ILog, string, params object[])", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.FatalFormat(Hangfire.Logging.ILog, string, params object[])", span="182-182"];
m0_157 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProvider.ResolveLogProvider()", span="399-399"];
m0_175 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="JobServer.cs", label=LogProviderResolvers, span="403-403"];
m0_180 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="JobServer.cs", label="return null;", span="418-418"];
m0_177 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="JobServer.cs", label="return providerResolver.Item2();", span="407-407"];
m0_176 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="JobServer.cs", label="providerResolver.Item1()", span="405-405"];
m0_178 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="JobServer.cs", label=Exception, span="411-411"];
m0_179 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="JobServer.cs", label="Console.WriteLine(\r\n                    ''Exception occured resolving a log provider. Logging for this assembly {0} is disabled. {1}'',\r\n                    typeof(LogProvider).GetTypeInfo().Assembly.FullName,\r\n                    ex)", span="413-416"];
m0_181 [cluster="Hangfire.Logging.LogProvider.ResolveLogProvider()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProvider.ResolveLogProvider()", span="399-399"];
m0_565 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="1440-1440"];
m0_568 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Write(logLevel, messageFunc(), exception)", span="1447-1447"];
m0_566 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="messageFunc == null", span="1442-1442"];
m0_569 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1448-1448"];
m0_567 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="1444-1444"];
m0_570 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="1440-1440"];
m0_347 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="714-714"];
m0_355 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Info(messageFunc())", span="729-729"];
m0_359 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Warn(messageFunc())", span="736-736"];
m0_363 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Error(messageFunc())", span="743-743"];
m0_367 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Fatal(messageFunc())", span="750-750"];
m0_370 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.Debug(messageFunc())", span="757-757"];
m0_354 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsInfoEnabled", span="727-727"];
m0_356 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="730-730"];
m0_358 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsWarnEnabled", span="734-734"];
m0_360 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="737-737"];
m0_362 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsErrorEnabled", span="741-741"];
m0_364 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="744-744"];
m0_366 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsFatalEnabled", span="748-748"];
m0_368 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="751-751"];
m0_369 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="_logger.IsDebugEnabled", span="755-755"];
m0_371 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return true;", span="758-758"];
m0_349 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return IsLogLevelEnable(logLevel);", span="718-718"];
m0_351 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return LogException(logLevel, messageFunc, exception);", span="722-722"];
m0_348 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="messageFunc == null", span="716-716"];
m0_350 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="exception != null", span="720-720"];
m0_352 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label=logLevel, span="724-724"];
m0_353 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Info", span="726-726"];
m0_372 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return false;", span="762-762"];
m0_357 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Warn", span="733-733"];
m0_361 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Error", span="740-740"];
m0_365 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="LogLevel.Fatal", span="747-747"];
m0_373 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="714-714"];
m0_213 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", span="514-514"];
m0_225 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="Type logManagerType = GetLogManagerType()", span="516-516"];
m0_229 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="return Expression.Lambda<Func<string, object>>(methodCall, new[] { nameParam }).Compile();", span="520-520"];
m0_226 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="MethodInfo method = logManagerType.GetRuntimeMethod(''GetLogger'', new[] { typeof(string) })", span="517-517"];
m0_227 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="ParameterExpression nameParam = Expression.Parameter(typeof(string), ''name'')", span="518-518"];
m0_228 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="MethodCallExpression methodCall = Expression.Call(null, method, new Expression[] { nameParam })", span="519-519"];
m0_230 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.GetGetLoggerMethodCall()", span="514-514"];
m0_182 [cluster="Hangfire.Logging.LogProvider.IsLoggerAvailable.Invoke()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProvider.IsLoggerAvailable.Invoke()", span="382-382"];
m0_86 [cluster="Hangfire.Logging.ILog.IsInfoEnabled()", file="JobServer.cs", label="Entry Hangfire.Logging.ILog.IsInfoEnabled()", span="92-92"];
m0_159 [cluster="Hangfire.Logging.LoggerExecutionWrapper.LoggerExecutionWrapper(Hangfire.Logging.ILog)", file="JobServer.cs", label="Entry Hangfire.Logging.LoggerExecutionWrapper.LoggerExecutionWrapper(Hangfire.Logging.ILog)", span="440-440"];
m0_189 [cluster="Hangfire.Logging.LoggerExecutionWrapper.LoggerExecutionWrapper(Hangfire.Logging.ILog)", file="JobServer.cs", label="_logger = logger", span="442-442"];
m0_190 [cluster="Hangfire.Logging.LoggerExecutionWrapper.LoggerExecutionWrapper(Hangfire.Logging.ILog)", file="JobServer.cs", label="Exit Hangfire.Logging.LoggerExecutionWrapper.LoggerExecutionWrapper(Hangfire.Logging.ILog)", span="440-440"];
m0_170 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogProvider()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogProvider()", span="484-484"];
m0_209 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogProvider()", file="JobServer.cs", label="_getLoggerByNameDelegate = GetGetLoggerMethodCall()", span="490-490"];
m0_207 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogProvider()", file="JobServer.cs", label="!IsLoggerAvailable()", span="486-486"];
m0_208 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogProvider()", file="JobServer.cs", label="throw new InvalidOperationException(''NLog.LogManager not found'');", span="488-488"];
m0_210 [cluster="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogProvider()", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogProvider()", span="484-484"];
m0_58 [cluster="Hangfire.Logging.LogExtensions.ErrorException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.ErrorException(Hangfire.Logging.ILog, string, System.Exception)", span="161-161"];
m0_60 [cluster="Hangfire.Logging.LogExtensions.ErrorException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="logger.Log(LogLevel.Error, message.AsFunc(), exception)", span="165-165"];
m0_59 [cluster="Hangfire.Logging.LogExtensions.ErrorException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="logger.IsErrorEnabled()", span="163-163"];
m0_61 [cluster="Hangfire.Logging.LogExtensions.ErrorException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.ErrorException(Hangfire.Logging.ILog, string, System.Exception)", span="161-161"];
m0_307 [cluster="Unk.FatalException", file="JobServer.cs", label="Entry Unk.FatalException", span=""];
m0_191 [cluster="Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="445-445"];
m0_193 [cluster="Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return _logger.Log(logLevel, null);", span="449-449"];
m0_195 [cluster="Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="return _logger.Log(logLevel, wrappedMessageFunc, exception);", span="464-464"];
m0_192 [cluster="Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="messageFunc == null", span="447-447"];
m0_194 [cluster="Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Func<string> wrappedMessageFunc = () =>\r\n            {\r\n                try\r\n                {\r\n                    return messageFunc();\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    Log(LogLevel.Error, () => FailedToGenerateLogMessage, ex);\r\n                }\r\n                return null;\r\n            }", span="452-463"];
m0_196 [cluster="Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LoggerExecutionWrapper.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="445-445"];
m0_224 [cluster="System.Type.GetType(string)", file="JobServer.cs", label="Entry System.Type.GetType(string)", span="0-0"];
m0_65 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, string)", span="174-174"];
m0_67 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="logger.Log(LogLevel.Fatal, message.AsFunc())", span="178-178"];
m0_66 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="logger.IsFatalEnabled()", span="176-176"];
m0_68 [cluster="Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.Fatal(Hangfire.Logging.ILog, string)", span="174-174"];
m0_231 [cluster="System.Type.GetRuntimeMethod(string, System.Type[])", file="JobServer.cs", label="Entry System.Type.GetRuntimeMethod(string, System.Type[])", span="0-0"];
m0_82 [cluster="Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, string)", span="204-204"];
m0_84 [cluster="Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="logger.Log(LogLevel.Info, message.AsFunc())", span="208-208"];
m0_83 [cluster="Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="logger.IsInfoEnabled()", span="206-206"];
m0_85 [cluster="Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, string)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.Info(Hangfire.Logging.ILog, string)", span="204-204"];
m0_328 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogger(string)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogger(string)", span="681-681"];
m0_329 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogger(string)", file="JobServer.cs", label="return new Log4NetLogger(_getLoggerByNameDelegate(name));", span="683-683"];
m0_330 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogger(string)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.GetLogger(string)", span="681-681"];
m0_158 [cluster="Hangfire.Logging.LogProvider.NoOpLogger.NoOpLogger()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProvider.NoOpLogger.NoOpLogger()", span="421-421"];
m0_306 [cluster="Unk.ErrorException", file="JobServer.cs", label="Entry Unk.ErrorException", span=""];
m0_537 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.GetLogger(string)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.GetLogger(string)", span="1380-1380"];
m0_538 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.GetLogger(string)", file="JobServer.cs", label="return new ColouredConsoleLogger(name);", span="1382-1382"];
m0_539 [cluster="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.GetLogger(string)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.GetLogger(string)", span="1380-1380"];
m0_417 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogger(string)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogger(string)", span="1008-1008"];
m0_418 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogger(string)", file="JobServer.cs", label="return new SerilogLogger(_getLoggerByNameDelegate(name));", span="1010-1010"];
m0_419 [cluster="Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogger(string)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.SerilogLogProvider.GetLogger(string)", span="1008-1008"];
m0_185 [cluster="System.Console.WriteLine(string, object, object)", file="JobServer.cs", label="Entry System.Console.WriteLine(string, object, object)", span="0-0"];
m0_183 [cluster="Hangfire.Logging.LogProvider.CreateLogProvider.Invoke()", file="JobServer.cs", label="Entry Hangfire.Logging.LogProvider.CreateLogProvider.Invoke()", span="384-384"];
m0_125 [cluster="Hangfire.Logging.LogExtensions.WarnException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.WarnException(Hangfire.Logging.ILog, string, System.Exception)", span="280-280"];
m0_127 [cluster="Hangfire.Logging.LogExtensions.WarnException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="logger.Log(LogLevel.Warn, message.AsFunc(), exception)", span="284-284"];
m0_126 [cluster="Hangfire.Logging.LogExtensions.WarnException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="logger.IsWarnEnabled()", span="282-282"];
m0_128 [cluster="Hangfire.Logging.LogExtensions.WarnException(Hangfire.Logging.ILog, string, System.Exception)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.WarnException(Hangfire.Logging.ILog, string, System.Exception)", span="280-280"];
m0_374 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", span="808-808"];
m0_400 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="return _logger.IsDebugEnabled;", span="813-813"];
m0_402 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="return _logger.IsInfoEnabled;", span="815-815"];
m0_404 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="return _logger.IsWarnEnabled;", span="817-817"];
m0_406 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="return _logger.IsErrorEnabled;", span="819-819"];
m0_408 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="return _logger.IsFatalEnabled;", span="821-821"];
m0_409 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="return _logger.IsDebugEnabled;", span="823-823"];
m0_399 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="LogLevel.Debug", span="812-812"];
m0_401 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="LogLevel.Info", span="814-814"];
m0_403 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="LogLevel.Warn", span="816-816"];
m0_405 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="LogLevel.Error", span="818-818"];
m0_407 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="LogLevel.Fatal", span="820-820"];
m0_398 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label=logLevel, span="810-810"];
m0_410 [cluster="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger.IsLogLevelEnable(Hangfire.Logging.LogLevel)", span="808-808"];
m0_150 [cluster="Hangfire.Logging.LogProvider.GetLogger(System.Type)", file="JobServer.cs", label="Entry Hangfire.Logging.LogProvider.GetLogger(System.Type)", span="357-357"];
m0_151 [cluster="Hangfire.Logging.LogProvider.GetLogger(System.Type)", file="JobServer.cs", label="return GetLogger(type.FullName);", span="359-359"];
m0_152 [cluster="Hangfire.Logging.LogProvider.GetLogger(System.Type)", file="JobServer.cs", label="Exit Hangfire.Logging.LogProvider.GetLogger(System.Type)", span="357-357"];
m0_112 [cluster="Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="Entry Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, System.Func<string>)", span="258-258"];
m0_113 [cluster="Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="GuardAgainstNullLogger(logger)", span="260-260"];
m0_114 [cluster="Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="logger.Log(LogLevel.Warn, messageFunc)", span="261-261"];
m0_115 [cluster="Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, System.Func<string>)", file="JobServer.cs", label="Exit Hangfire.Logging.LogExtensions.Warn(Hangfire.Logging.ILog, System.Func<string>)", span="258-258"];
m0_120 [cluster="Hangfire.Logging.ILog.IsWarnEnabled()", file="JobServer.cs", label="Entry Hangfire.Logging.ILog.IsWarnEnabled()", span="104-104"];
m0_41 [cluster="Hangfire.Logging.ILog.LogFormat(Hangfire.Logging.LogLevel, string, params object[])", file="JobServer.cs", label="Entry Hangfire.Logging.ILog.LogFormat(Hangfire.Logging.LogLevel, string, params object[])", span="296-296"];
m0_584 [file="JobServer.cs", label="Hangfire.Logging.LoggerExecutionWrapper", span=""];
m0_585 [file="JobServer.cs", label="System.Func<string>", span=""];
m0_587 [file="JobServer.cs", label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", span=""];
m0_589 [file="JobServer.cs", label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", span=""];
m0_592 [file="JobServer.cs", label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", span=""];
m0_593 [file="JobServer.cs", label="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger", span=""];
m0_586 [file="JobServer.cs", label="Hangfire.Logging.LogProviders.NLogLogProvider", span=""];
m0_588 [file="JobServer.cs", label="Hangfire.Logging.LogProviders.Log4NetLogProvider", span=""];
m0_590 [file="JobServer.cs", label="Hangfire.Logging.LogProviders.SerilogLogProvider", span=""];
m0_591 [file="JobServer.cs", label=func, span=""];
m1_113 [cluster="System.Collections.Generic.List<T>.List()", file="JobStorage.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_36 [cluster="HangFire.JobHelper.FromJson<T>(string)", file="JobStorage.cs", label="Entry HangFire.JobHelper.FromJson<T>(string)", span="37-37"];
m1_0 [cluster="HangFire.Web.JobStorage.ScheduledCount()", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.ScheduledCount()", span="12-12"];
m1_1 [cluster="HangFire.Web.JobStorage.ScheduledCount()", file="JobStorage.cs", label=Redis, span="14-14"];
m1_3 [cluster="HangFire.Web.JobStorage.ScheduledCount()", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.ScheduledCount()", span="12-12"];
m1_5 [cluster="HangFire.Web.JobStorage.EnqueuedCount(string)", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.EnqueuedCount(string)", span="20-20"];
m1_7 [cluster="HangFire.Web.JobStorage.EnqueuedCount(string)", file="JobStorage.cs", label="return Redis.GetListCount(String.Format(''hangfire:queue:{0}'', queue));", span="24-24"];
m1_8 [cluster="HangFire.Web.JobStorage.EnqueuedCount(string)", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.EnqueuedCount(string)", span="20-20"];
m1_9 [cluster="string.Format(string, object)", file="JobStorage.cs", label="Entry string.Format(string, object)", span="0-0"];
m1_10 [cluster="Unk.GetListCount", file="JobStorage.cs", label="Entry Unk.GetListCount", span=""];
m1_2 [cluster="HangFire.Web.JobStorage.ScheduledCount()", file="JobStorage.cs", label="return Redis.GetSortedSetCount(''hangfire:schedule'');", span="16-16"];
m1_4 [cluster="Unk.GetSortedSetCount", file="JobStorage.cs", label="Entry Unk.GetSortedSetCount", span=""];
m1_6 [cluster="HangFire.Web.JobStorage.EnqueuedCount(string)", file="JobStorage.cs", label=Redis, span="22-22"];
m1_11 [cluster="HangFire.Web.JobStorage.DequeuedCount(string)", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.DequeuedCount(string)", span="28-28"];
m1_28 [cluster="Unk.GetRangeFromSortedSet", file="JobStorage.cs", label="Entry Unk.GetRangeFromSortedSet", span=""];
m1_291 [cluster="Unk.TryParse", file="JobStorage.cs", label="Entry Unk.TryParse", span=""];
m1_30 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="JobStorage.cs", label="Hangfire.Dashboard.DashboardMiddleware", span=""];
m1_133 [cluster="int.Parse(string)", file="JobStorage.cs", label="Entry int.Parse(string)", span="0-0"];
m1_43 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.ScheduledJobs(int, int)", span="80-80"];
m1_53 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Args'' }),\r\n                            x => jobs.Add(job.Key, x))", span="103-107"];
m1_54 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValueFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                ''State''),\r\n                            x => states.Add(job.Key, x))", span="109-113"];
m1_47 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label="return new Dictionary<string, ScheduleDto>();", span="91-91"];
m1_48 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label="var jobs = new Dictionary<string, List<string>>()", span="94-94"];
m1_49 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label="var states = new Dictionary<string, string>()", span="95-95"];
m1_55 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label="pipeline.Flush()", span="116-116"];
m1_50 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label="var pipeline = Redis.CreatePipeline()", span="97-97"];
m1_52 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label="var job = scheduledJob", span="101-101"];
m1_51 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label=scheduledJobs, span="99-99"];
m1_46 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label="scheduledJobs.Count == 0", span="89-89"];
m1_56 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label="return scheduledJobs.ToDictionary(\r\n                    job => job.Key,\r\n                    job => new ScheduleDto\r\n                    {\r\n                        ScheduledAt = JobHelper.FromTimestamp((long) job.Value),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(jobs[job.Key][1]),\r\n                        Queue = JobHelper.TryToGetQueue(jobs[job.Key][0]),\r\n                        Type = jobs[job.Key][0],\r\n                        InScheduledState =\r\n                            ScheduledState.Name.Equals(states[job.Key], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="119-129"];
m1_45 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label="var scheduledJobs = Redis.GetRangeWithScoresFromSortedSet(\r\n                    ''hangfire:schedule'',\r\n                    from,\r\n                    from + count - 1)", span="84-87"];
m1_44 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label=Redis, span="82-82"];
m1_57 [cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.ScheduledJobs(int, int)", span="80-80"];
m1_38 [cluster="HangFire.JobHelper.FromNullableStringTimestamp(string)", file="JobStorage.cs", label="Entry HangFire.JobHelper.FromNullableStringTimestamp(string)", span="65-65"];
m1_214 [cluster="HangFire.Web.DequeuedJobDto.DequeuedJobDto()", file="JobStorage.cs", label="Entry HangFire.Web.DequeuedJobDto.DequeuedJobDto()", span="5-5"];
m1_386 [cluster="HangFire.Web.StatisticsDto.StatisticsDto()", file="JobStorage.cs", label="Entry HangFire.Web.StatisticsDto.StatisticsDto()", span="2-2"];
m1_27 [cluster="HangFire.Web.JobStorage.ProcessingJobs(int, int)", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.ProcessingJobs(int, int)", span="52-52"];
m1_29 [cluster="Hangfire.Dashboard.IRequestDispatcher.Dispatch(Hangfire.Dashboard.RequestDispatcherContext)", file="JobStorage.cs", label="Entry Hangfire.Dashboard.IRequestDispatcher.Dispatch(Hangfire.Dashboard.RequestDispatcherContext)", span="22-22"];
m1_359 [cluster="KeyValuePair<string, T>.cstr", file="JobStorage.cs", label="Entry KeyValuePair<string, T>.cstr", span=""];
m1_31 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="JobStorage.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m1_197 [cluster="HangFire.Web.EnqueuedJobDto.EnqueuedJobDto()", file="JobStorage.cs", label="Entry HangFire.Web.EnqueuedJobDto.EnqueuedJobDto()", span="5-5"];
m1_60 [cluster="Unk.CreatePipeline", file="JobStorage.cs", label="Entry Unk.CreatePipeline", span=""];
m1_76 [cluster="Unk.GetValueFromHash", file="JobStorage.cs", label="Entry Unk.GetValueFromHash", span=""];
m1_23 [cluster="Hangfire.Dashboard.DashboardMiddleware.Invoke(IOwinContext)", file="JobStorage.cs", label="Exit Hangfire.Dashboard.DashboardMiddleware.Invoke(IOwinContext)", span="50-50"];
m1_26 [cluster="Unk.Authorize", file="JobStorage.cs", label="Entry Unk.Authorize", span=""];
m1_25 [cluster="Unk.Invoke", file="JobStorage.cs", label="Entry Unk.Invoke", span=""];
m1_24 [cluster="Unk.FindDispatcher", file="JobStorage.cs", label="Entry Unk.FindDispatcher", span=""];
m1_134 [cluster="HangFire.JobHelper.FromStringTimestamp(string)", file="JobStorage.cs", label="Entry HangFire.JobHelper.FromStringTimestamp(string)", span="60-60"];
m1_257 [cluster="Unk.ContainsKey", file="JobStorage.cs", label="Entry Unk.ContainsKey", span=""];
m1_234 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string, string, string)", file="JobStorage.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState(string, string, string)", span="10-10"];
m1_173 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="500-500"];
m1_335 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label="return jobIds\r\n                .Select(x => new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                })\r\n                .Select(x => new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null) ? default(T) : selector(x.Job, x.State)))\r\n                .ToList();", span="533-543"];
m1_331 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(String.Format(''hangfire:job:{0}'', id), properties),\r\n                        x => { if (!jobs.ContainsKey(id)) jobs.Add(id, x); })", span="518-520"];
m1_333 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties),\r\n                            x => { if (!states.ContainsKey(id)) states.Add(id, x); })", span="524-526"];
m1_334 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label="pipeline.Flush()", span="530-530"];
m1_326 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label="var jobs = new Dictionary<string, List<string>>(jobIds.Count)", span="509-509"];
m1_327 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label="var states = new Dictionary<string, List<string>>(jobIds.Count)", span="510-510"];
m1_328 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label="var pipeline = redis.CreatePipeline()", span="512-512"];
m1_330 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label="var id = jobId", span="516-516"];
m1_332 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label="stateProperties != null", span="522-522"];
m1_329 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label=jobIds, span="514-514"];
m1_325 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label="return new List<KeyValuePair<string, T>>();", span="507-507"];
m1_324 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label="jobIds.Count == 0", span="507-507"];
m1_336 [cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="500-500"];
m1_361 [cluster="Unk.selector", file="JobStorage.cs", label="Entry Unk.selector", span=""];
m1_345 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="JobStorage.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m1_13 [cluster="Hangfire.Dashboard.DashboardMiddleware.Invoke(IOwinContext)", file="JobStorage.cs", label="Entry Hangfire.Dashboard.DashboardMiddleware.Invoke(IOwinContext)", span="50-50"];
m1_12 [cluster="HangFire.Web.JobStorage.DequeuedCount(string)", file="JobStorage.cs", label=Redis, span="30-30"];
m1_14 [cluster="Hangfire.Dashboard.DashboardMiddleware.Invoke(IOwinContext)", file="JobStorage.cs", label="var dispatcher = _routes.FindDispatcher(context.Request.Path.Value)", span="52-52"];
m1_219 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", span="439-439"];
m1_276 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var keys = dates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="450-450"];
m1_278 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var result = new Dictionary<DateTime, long>()", span="453-453"];
m1_270 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var dates = new List<DateTime>()", span="443-443"];
m1_272 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="i < 24", span="444-444"];
m1_277 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var valuesMap = redis.GetValuesMap(keys)", span="451-451"];
m1_279 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var i = 0", span="454-454"];
m1_284 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="result.Add(dates[i], value)", span="462-462"];
m1_286 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="return result;", span="465-465"];
m1_269 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var endDate = DateTime.UtcNow", span="442-442"];
m1_271 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var i = 0", span="444-444"];
m1_273 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="dates.Add(endDate)", span="446-446"];
m1_280 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="i < dates.Count", span="454-454"];
m1_275 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="i++", span="444-444"];
m1_282 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="457-457"];
m1_285 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="i++", span="454-454"];
m1_283 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="value = 0", span="459-459"];
m1_274 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="endDate = endDate.AddHours(-1)", span="447-447"];
m1_281 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="long value", span="456-456"];
m1_287 [cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", span="439-439"];
m1_232 [cluster="Unk.TryToGetQueue", file="JobStorage.cs", label="Entry Unk.TryToGetQueue", span=""];
m1_58 [cluster="Unk.GetRangeWithScoresFromSortedSet", file="JobStorage.cs", label="Entry Unk.GetRangeWithScoresFromSortedSet", span=""];
m1_132 [cluster="HangFire.Web.ServerDto.ServerDto()", file="JobStorage.cs", label="Entry HangFire.Web.ServerDto.ServerDto()", span="5-5"];
m1_258 [cluster="Unk.Where", file="JobStorage.cs", label="Entry Unk.Where", span=""];
m1_236 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.EnqueueScheduled(string)", span="393-393"];
m1_238 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="JobStorage.cs", label="var jobType = Redis.GetValueFromHash(String.Format(''hangfire:job:{0}'', jobId), ''Type'')", span="397-397"];
m1_237 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="JobStorage.cs", label=Redis, span="395-395"];
m1_239 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="JobStorage.cs", label="var queue = JobHelper.TryToGetQueue(jobType)", span="398-398"];
m1_242 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="JobStorage.cs", label="return JobState.Apply(\r\n                    Redis,\r\n                    new EnqueuedState(jobId, ''The job has been enqueued by a user.'', queue),\r\n                    ScheduledState.Name);", span="405-408"];
m1_240 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="JobStorage.cs", label="String.IsNullOrEmpty(queue)", span="400-400"];
m1_241 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="JobStorage.cs", label="return false;", span="402-402"];
m1_243 [cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.EnqueueScheduled(string)", span="393-393"];
m1_174 [cluster="HangFire.Web.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="JobStorage.cs", label="Entry HangFire.Web.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="4-4"];
m1_317 [cluster="System.DateTime.AddDays(double)", file="JobStorage.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m1_360 [cluster="Unk.TrueForAll", file="JobStorage.cs", label="Entry Unk.TrueForAll", span=""];
m1_40 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="76-76"];
m1_129 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="184-191"];
m1_116 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="170-172"];
m1_119 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="173-173"];
m1_130 [cluster="lambda expression", color=green, community=0, file="JobStorage.cs", label="new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }", prediction=9, span="184-191"];
m1_131 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="184-191"];
m1_117 [cluster="lambda expression", color=green, community=0, file="JobStorage.cs", label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat'')", prediction=10, span="170-172"];
m1_118 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="170-172"];
m1_120 [cluster="lambda expression", file="JobStorage.cs", label="servers.Add(name, x)", span="173-173"];
m1_127 [cluster="lambda expression", file="JobStorage.cs", label="queues.Add(name, x)", span="178-178"];
m1_123 [cluster="lambda expression", file="JobStorage.cs", label="x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name))", span="176-177"];
m1_122 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="176-177"];
m1_126 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="178-178"];
m1_121 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="173-173"];
m1_33 [cluster="lambda expression", file="JobStorage.cs", label="new ProcessingJobDto\r\n                    {\r\n                        ServerName = state[1],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.Name.Equals(\r\n                            state[2], StringComparison.OrdinalIgnoreCase),\r\n                        State = state[2]\r\n                    }", span="66-76"];
m1_142 [cluster="lambda expression", file="JobStorage.cs", label="new FailedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.Name.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="209-219"];
m1_152 [cluster="lambda expression", file="JobStorage.cs", label="new SucceededJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InSucceededState = SucceededState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="237-244"];
m1_195 [cluster="lambda expression", file="JobStorage.cs", label="new EnqueuedJobDto\r\n                        {\r\n                            Type = job[0],\r\n                            Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        }", span="284-290"];
m1_204 [cluster="lambda expression", file="JobStorage.cs", label="new EnqueuedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="320-326"];
m1_212 [cluster="lambda expression", file="JobStorage.cs", label="new DequeuedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        State = job[2],\r\n                        CreatedAt = JobHelper.FromNullableStringTimestamp(job[3]),\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(job[4]),\r\n                        CheckedAt = JobHelper.FromNullableStringTimestamp(job[5])\r\n                    }", span="344-352"];
m1_65 [cluster="lambda expression", file="JobStorage.cs", label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Args'' })", span="104-106"];
m1_74 [cluster="lambda expression", file="JobStorage.cs", label="x.GetValueFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                ''State'')", span="110-112"];
m1_177 [cluster="lambda expression", file="JobStorage.cs", label="x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1)", span="264-265"];
m1_183 [cluster="lambda expression", file="JobStorage.cs", label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queue))", span="269-269"];
m1_189 [cluster="lambda expression", file="JobStorage.cs", label="x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue))", span="273-273"];
m1_322 [cluster="lambda expression", file="JobStorage.cs", label="String.Format(''hangfire:stats:{0}:{1}'', type, x)", span="482-482"];
m1_427 [cluster="lambda expression", file="JobStorage.cs", label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName))", span="592-592"];
m1_339 [cluster="lambda expression", file="JobStorage.cs", label="x.GetValuesFromHash(String.Format(''hangfire:job:{0}'', id), properties)", span="519-519"];
m1_347 [cluster="lambda expression", file="JobStorage.cs", label="x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties)", span="525-525"];
m1_128 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="178-178"];
m1_293 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="450-450"];
m1_321 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="482-482"];
m1_318 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="481-481"];
m1_353 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="534-539"];
m1_356 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="540-542"];
m1_124 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="176-177"];
m1_64 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="104-106"];
m1_69 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="107-107"];
m1_73 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="110-112"];
m1_77 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="113-113"];
m1_176 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="264-265"];
m1_179 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="266-266"];
m1_182 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="269-269"];
m1_185 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="270-270"];
m1_188 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="273-273"];
m1_191 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="274-274"];
m1_338 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="519-519"];
m1_341 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="520-520"];
m1_346 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="525-525"];
m1_349 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="526-526"];
m1_387 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="565-565"];
m1_391 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="566-566"];
m1_394 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="569-569"];
m1_397 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="570-570"];
m1_400 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="573-573"];
m1_403 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="574-574"];
m1_406 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="577-577"];
m1_409 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="578-578"];
m1_412 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="581-581"];
m1_416 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="582-582"];
m1_420 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="585-585"];
m1_423 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="586-586"];
m1_426 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="592-592"];
m1_429 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="593-593"];
m1_32 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="66-76"];
m1_34 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="66-76"];
m1_141 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="209-219"];
m1_143 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="209-219"];
m1_151 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="237-244"];
m1_153 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="237-244"];
m1_194 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="284-290"];
m1_196 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="284-290"];
m1_203 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="320-326"];
m1_205 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="320-326"];
m1_211 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="344-352"];
m1_213 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="344-352"];
m1_66 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="104-106"];
m1_75 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="110-112"];
m1_178 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="264-265"];
m1_184 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="269-269"];
m1_190 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="273-273"];
m1_323 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="482-482"];
m1_428 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="592-592"];
m1_340 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="519-519"];
m1_348 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="525-525"];
m1_70 [cluster="lambda expression", file="JobStorage.cs", label="jobs.Add(job.Key, x)", span="107-107"];
m1_84 [cluster="lambda expression", file="JobStorage.cs", label="new ScheduleDto\r\n                    {\r\n                        ScheduledAt = JobHelper.FromTimestamp((long) job.Value),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(jobs[job.Key][1]),\r\n                        Queue = JobHelper.TryToGetQueue(jobs[job.Key][0]),\r\n                        Type = jobs[job.Key][0],\r\n                        InScheduledState =\r\n                            ScheduledState.Name.Equals(states[job.Key], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="121-129"];
m1_78 [cluster="lambda expression", file="JobStorage.cs", label="states.Add(job.Key, x)", span="113-113"];
m1_343 [cluster="lambda expression", file="JobStorage.cs", label="jobs.Add(id, x)", span="520-520"];
m1_351 [cluster="lambda expression", file="JobStorage.cs", label="states.Add(id, x)", span="526-526"];
m1_259 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="433-433"];
m1_263 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="433-433"];
m1_266 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="433-433"];
m1_294 [cluster="lambda expression", file="JobStorage.cs", label="String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="450-450"];
m1_295 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="450-450"];
m1_320 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="481-481"];
m1_319 [cluster="lambda expression", file="JobStorage.cs", label="x.ToString(''yyyy-MM-dd'')", span="481-481"];
m1_357 [cluster="lambda expression", file="JobStorage.cs", label="new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null) ? default(T) : selector(x.Job, x.State))", span="540-542"];
m1_342 [cluster="lambda expression", file="JobStorage.cs", label="!jobs.ContainsKey(id)", span="520-520"];
m1_354 [cluster="lambda expression", file="JobStorage.cs", label="new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                }", span="534-539"];
m1_350 [cluster="lambda expression", file="JobStorage.cs", label="!states.ContainsKey(id)", span="526-526"];
m1_355 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="534-539"];
m1_358 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="540-542"];
m1_71 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="107-107"];
m1_79 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="113-113"];
m1_181 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="266-266"];
m1_180 [cluster="lambda expression", file="JobStorage.cs", label="firstJobIds = x", span="266-266"];
m1_187 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="270-270"];
m1_186 [cluster="lambda expression", file="JobStorage.cs", label="length = x", span="270-270"];
m1_193 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="274-274"];
m1_192 [cluster="lambda expression", file="JobStorage.cs", label="dequeued = x", span="274-274"];
m1_344 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="520-520"];
m1_352 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="526-526"];
m1_392 [cluster="lambda expression", file="JobStorage.cs", label="stats.Servers = x", span="566-566"];
m1_398 [cluster="lambda expression", file="JobStorage.cs", label="stats.Queues = x", span="570-570"];
m1_404 [cluster="lambda expression", file="JobStorage.cs", label="stats.Scheduled = x", span="574-574"];
m1_410 [cluster="lambda expression", file="JobStorage.cs", label="stats.Processing = x", span="578-578"];
m1_417 [cluster="lambda expression", file="JobStorage.cs", label="stats.Succeeded = long.Parse(x ?? ''0'')", span="582-582"];
m1_424 [cluster="lambda expression", file="JobStorage.cs", label="stats.Failed = x", span="586-586"];
m1_430 [cluster="lambda expression", file="JobStorage.cs", label="stats.Enqueued += x", span="593-593"];
m1_389 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="565-565"];
m1_388 [cluster="lambda expression", file="JobStorage.cs", label="x.GetSetCount(''hangfire:servers'')", span="565-565"];
m1_393 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="566-566"];
m1_396 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="569-569"];
m1_395 [cluster="lambda expression", file="JobStorage.cs", label="x.GetSetCount(''hangfire:queues'')", span="569-569"];
m1_399 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="570-570"];
m1_402 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="573-573"];
m1_401 [cluster="lambda expression", file="JobStorage.cs", label="x.GetSortedSetCount(''hangfire:schedule'')", span="573-573"];
m1_405 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="574-574"];
m1_408 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="577-577"];
m1_407 [cluster="lambda expression", file="JobStorage.cs", label="x.GetSortedSetCount(''hangfire:processing'')", span="577-577"];
m1_411 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="578-578"];
m1_414 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="581-581"];
m1_413 [cluster="lambda expression", file="JobStorage.cs", label="x.GetValue(''hangfire:stats:succeeded'')", span="581-581"];
m1_418 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="582-582"];
m1_422 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="585-585"];
m1_421 [cluster="lambda expression", file="JobStorage.cs", label="x.GetSortedSetCount(''hangfire:failed'')", span="585-585"];
m1_425 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="586-586"];
m1_431 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="593-593"];
m1_80 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="120-120"];
m1_83 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="121-129"];
m1_85 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="121-129"];
m1_260 [cluster="lambda expression", file="JobStorage.cs", label="!hiddenProperties.Contains(x.Key)", span="433-433"];
m1_261 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="433-433"];
m1_265 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="433-433"];
m1_264 [cluster="lambda expression", file="JobStorage.cs", label="x.Key", span="433-433"];
m1_268 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="433-433"];
m1_267 [cluster="lambda expression", file="JobStorage.cs", label="x.Value", span="433-433"];
m1_362 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="542-542"];
m1_82 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="120-120"];
m1_81 [cluster="lambda expression", file="JobStorage.cs", label="job.Key", span="120-120"];
m1_364 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="542-542"];
m1_363 [cluster="lambda expression", file="JobStorage.cs", label="y == null", span="542-542"];
m1_41 [cluster="lambda expression", file="JobStorage.cs", label="x.Value.StartedAt", span="76-76"];
m1_42 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="76-76"];
m1_175 [cluster="System.Collections.Generic.List<T>.Add(T)", file="JobStorage.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m1_115 [cluster="Unk.ToList", file="JobStorage.cs", label="Entry Unk.ToList", span=""];
m1_67 [cluster="Unk.Format", file="JobStorage.cs", label="Entry Unk.Format", span=""];
m1_220 [cluster="HangFire.Web.JobStorage.HourlyFailedJobs()", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.HourlyFailedJobs()", span="364-364"];
m1_222 [cluster="HangFire.Web.JobStorage.HourlyFailedJobs()", file="JobStorage.cs", label="return GetHourlyTimelineStats(Redis, ''failed'');", span="368-368"];
m1_221 [cluster="HangFire.Web.JobStorage.HourlyFailedJobs()", file="JobStorage.cs", label=Redis, span="366-366"];
m1_223 [cluster="HangFire.Web.JobStorage.HourlyFailedJobs()", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.HourlyFailedJobs()", span="364-364"];
m1_61 [cluster="Unk.QueueCommand", file="JobStorage.cs", label="Entry Unk.QueueCommand", span=""];
m1_35 [cluster="HangFire.Web.ProcessingJobDto.ProcessingJobDto()", file="JobStorage.cs", label="Entry HangFire.Web.ProcessingJobDto.ProcessingJobDto()", span="5-5"];
m1_135 [cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.FailedJobs(int, int)", span="195-195"];
m1_138 [cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="JobStorage.cs", label="return GetJobsWithProperties(\r\n                    Redis,\r\n                    failedJobIds,\r\n                    new[] { ''Type'', ''Args'' },\r\n                    new[] { ''FailedAt'', ''ExceptionType'', ''ExceptionMessage'', ''ExceptionDetails'', ''State'' },\r\n                    (job, state) => new FailedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.Name.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="204-219"];
m1_137 [cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="JobStorage.cs", label="var failedJobIds = Redis.GetRangeFromSortedSetDesc(\r\n                    ''hangfire:failed'',\r\n                    from,\r\n                    from + count - 1)", span="199-202"];
m1_136 [cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="JobStorage.cs", label=Redis, span="197-197"];
m1_139 [cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.FailedJobs(int, int)", span="195-195"];
m1_37 [cluster="HangFire.JobHelper.TryToGetQueue(string)", file="JobStorage.cs", label="Entry HangFire.JobHelper.TryToGetQueue(string)", span="9-9"];
m1_144 [cluster="HangFire.Web.FailedJobDto.FailedJobDto()", file="JobStorage.cs", label="Entry HangFire.Web.FailedJobDto.FailedJobDto()", span="5-5"];
m1_87 [cluster="HangFire.JobHelper.FromTimestamp(long)", file="JobStorage.cs", label="Entry HangFire.JobHelper.FromTimestamp(long)", span="50-50"];
m1_296 [cluster="System.DateTime.ToString(string)", file="JobStorage.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m1_145 [cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.SucceededJobs(int, int)", span="223-223"];
m1_148 [cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="JobStorage.cs", label="return GetJobsWithProperties(\r\n                    Redis,\r\n                    succeededJobIds,\r\n                    new[] { ''Type'', ''Args'' },\r\n                    new[] { ''SucceededAt'', ''State'' },\r\n                    (job, state) => new SucceededJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InSucceededState = SucceededState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="232-244"];
m1_147 [cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="JobStorage.cs", label="var succeededJobIds = Redis.GetRangeFromList(\r\n                    ''hangfire:succeeded'',\r\n                    from,\r\n                    from + count - 1)", span="227-230"];
m1_146 [cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="JobStorage.cs", label=Redis, span="225-225"];
m1_149 [cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.SucceededJobs(int, int)", span="223-223"];
m1_172 [cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="JobStorage.cs", label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span=""];
m1_290 [cluster="Unk.ElementAt", file="JobStorage.cs", label="Entry Unk.ElementAt", span=""];
m1_150 [cluster="Unk.GetRangeFromList", file="JobStorage.cs", label="Entry Unk.GetRangeFromList", span=""];
m1_155 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.Queues()", span="248-248"];
m1_164 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1),\r\n                            x => firstJobIds = x)", span="263-266"];
m1_165 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queue)),\r\n                            x => length = x)", span="268-270"];
m1_166 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue)),\r\n                            x => dequeued = x)", span="272-274"];
m1_157 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="var queues = Redis.GetAllItemsFromSet(''hangfire:queues'')", span="252-252"];
m1_167 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="pipeline.Flush()", span="276-276"];
m1_163 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="var pipeline = Redis.CreatePipeline()", span="261-261"];
m1_159 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label=queues, span="255-255"];
m1_160 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="IList<string> firstJobIds = null", span="257-257"];
m1_168 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="var jobs = GetJobsWithProperties(\r\n                        Redis,\r\n                        firstJobIds,\r\n                        new[] { ''Type'', ''Args'' },\r\n                        new[] { ''EnqueuedAt'', ''State'' },\r\n                        (job, state) => new EnqueuedJobDto\r\n                        {\r\n                            Type = job[0],\r\n                            Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        })", span="279-290"];
m1_161 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="long length = 0", span="258-258"];
m1_169 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = queue,\r\n                        FirstJobs = jobs,\r\n                        Length = length,\r\n                        Dequeued = dequeued\r\n                    })", span="292-298"];
m1_162 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="long dequeued = 0", span="259-259"];
m1_156 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label=Redis, span="250-250"];
m1_158 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count)", span="253-253"];
m1_170 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="return result;", span="301-301"];
m1_171 [cluster="HangFire.Web.JobStorage.Queues()", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.Queues()", span="248-248"];
m1_88 [cluster="HangFire.Web.JobStorage.SucceededByDatesCount()", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.SucceededByDatesCount()", span="133-133"];
m1_90 [cluster="HangFire.Web.JobStorage.SucceededByDatesCount()", file="JobStorage.cs", label="return GetTimelineStats(Redis, ''succeeded'');", span="137-137"];
m1_89 [cluster="HangFire.Web.JobStorage.SucceededByDatesCount()", file="JobStorage.cs", label=Redis, span="135-135"];
m1_91 [cluster="HangFire.Web.JobStorage.SucceededByDatesCount()", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.SucceededByDatesCount()", span="133-133"];
m1_62 [cluster="Unk.Flush", file="JobStorage.cs", label="Entry Unk.Flush", span=""];
m1_154 [cluster="HangFire.Web.SucceededJobDto.SucceededJobDto()", file="JobStorage.cs", label="Entry HangFire.Web.SucceededJobDto.SucceededJobDto()", span="5-5"];
m1_419 [cluster="Unk.Parse", file="JobStorage.cs", label="Entry Unk.Parse", span=""];
m1_72 [cluster="Unk.Add", file="JobStorage.cs", label="Entry Unk.Add", span=""];
m1_97 [cluster="HangFire.Web.JobStorage.Servers()", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.Servers()", span="149-149"];
m1_110 [cluster="HangFire.Web.JobStorage.Servers()", color=green, community=0, file="JobStorage.cs", label="return serverNames.Select(x => new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }).ToList();", prediction=11, span="184-191"];
m1_99 [cluster="HangFire.Web.JobStorage.Servers()", file="JobStorage.cs", label="var serverNames = Redis.GetAllItemsFromSet(''hangfire:servers'')", span="153-153"];
m1_102 [cluster="HangFire.Web.JobStorage.Servers()", file="JobStorage.cs", label="var servers = new Dictionary<string, List<string>>()", span="160-160"];
m1_103 [cluster="HangFire.Web.JobStorage.Servers()", file="JobStorage.cs", label="var queues = new Dictionary<string, List<string>>()", span="161-161"];
m1_109 [cluster="HangFire.Web.JobStorage.Servers()", file="JobStorage.cs", label="pipeline.Flush()", span="181-181"];
m1_107 [cluster="HangFire.Web.JobStorage.Servers()", color=green, community=0, file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat''),\r\n                            x => servers.Add(name, x))", prediction=12, span="169-173"];
m1_104 [cluster="HangFire.Web.JobStorage.Servers()", file="JobStorage.cs", label="var pipeline = Redis.CreatePipeline()", span="163-163"];
m1_106 [cluster="HangFire.Web.JobStorage.Servers()", file="JobStorage.cs", label="var name = serverName", span="167-167"];
m1_108 [cluster="HangFire.Web.JobStorage.Servers()", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name)),\r\n                            x => queues.Add(name, x))", span="175-178"];
m1_98 [cluster="HangFire.Web.JobStorage.Servers()", file="JobStorage.cs", label=Redis, span="151-151"];
m1_100 [cluster="HangFire.Web.JobStorage.Servers()", file="JobStorage.cs", label="serverNames.Count == 0", span="155-155"];
m1_105 [cluster="HangFire.Web.JobStorage.Servers()", file="JobStorage.cs", label=serverNames, span="165-165"];
m1_101 [cluster="HangFire.Web.JobStorage.Servers()", file="JobStorage.cs", label="return new List<ServerDto>();", span="157-157"];
m1_111 [cluster="HangFire.Web.JobStorage.Servers()", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.Servers()", span="149-149"];
m1_369 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.GetStatistics()", span="554-554"];
m1_374 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:servers''),\r\n                        x => stats.Servers = x)", span="564-566"];
m1_375 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:queues''),\r\n                        x => stats.Queues = x)", span="568-570"];
m1_376 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:schedule''),\r\n                        x => stats.Scheduled = x)", span="572-574"];
m1_377 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:processing''),\r\n                        x => stats.Processing = x)", span="576-578"];
m1_378 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:succeeded''),\r\n                        x => stats.Succeeded = long.Parse(x ?? ''0''))", span="580-582"];
m1_379 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:failed''),\r\n                        x => stats.Failed = x)", span="584-586"];
m1_382 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName)),\r\n                            x => stats.Enqueued += x)", span="591-593"];
m1_372 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="var queues = Redis.GetAllItemsFromSet(''hangfire:queues'')", span="560-560"];
m1_383 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="pipeline.Flush()", span="596-596"];
m1_373 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="var pipeline = Redis.CreatePipeline()", span="562-562"];
m1_371 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="var stats = new StatisticsDto()", span="558-558"];
m1_380 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label=queues, span="588-588"];
m1_381 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="var queueName = queue", span="590-590"];
m1_384 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="return stats;", span="599-599"];
m1_370 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label=Redis, span="556-556"];
m1_385 [cluster="HangFire.Web.JobStorage.GetStatistics()", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.GetStatistics()", span="554-554"];
m1_365 [cluster="HangFire.Web.JobStorage.SucceededListCount()", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.SucceededListCount()", span="546-546"];
m1_367 [cluster="HangFire.Web.JobStorage.SucceededListCount()", file="JobStorage.cs", label="return Redis.GetListCount(''hangfire:succeeded'');", span="550-550"];
m1_366 [cluster="HangFire.Web.JobStorage.SucceededListCount()", file="JobStorage.cs", label=Redis, span="548-548"];
m1_368 [cluster="HangFire.Web.JobStorage.SucceededListCount()", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.SucceededListCount()", span="546-546"];
m1_215 [cluster="HangFire.Web.JobStorage.HourlySucceededJobs()", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.HourlySucceededJobs()", span="356-356"];
m1_217 [cluster="HangFire.Web.JobStorage.HourlySucceededJobs()", file="JobStorage.cs", label="return GetHourlyTimelineStats(Redis, ''succeeded'');", span="360-360"];
m1_216 [cluster="HangFire.Web.JobStorage.HourlySucceededJobs()", file="JobStorage.cs", label=Redis, span="358-358"];
m1_218 [cluster="HangFire.Web.JobStorage.HourlySucceededJobs()", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.HourlySucceededJobs()", span="356-356"];
m1_39 [cluster="string.Equals(string, System.StringComparison)", file="JobStorage.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m1_235 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="JobStorage.cs", label="Entry HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", span="47-47"];
m1_288 [cluster="System.DateTime.AddHours(double)", file="JobStorage.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m1_92 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", span="468-468"];
m1_305 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var keys = stringDates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x)).ToList()", span="482-482"];
m1_304 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="481-481"];
m1_307 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var result = new Dictionary<DateTime, long>()", span="486-486"];
m1_306 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var valuesMap = redis.GetValuesMap(keys)", span="484-484"];
m1_301 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="startDate <= endDate", span="475-475"];
m1_300 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var dates = new List<DateTime>()", span="473-473"];
m1_309 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="i < stringDates.Count", span="487-487"];
m1_308 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var i = 0", span="487-487"];
m1_313 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="result.Add(dates[i], value)", span="494-494"];
m1_315 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="return result;", span="497-497"];
m1_298 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var endDate = DateTime.UtcNow.Date", span="471-471"];
m1_311 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="490-490"];
m1_299 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="var startDate = endDate.AddDays(-7)", span="472-472"];
m1_303 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="endDate = endDate.AddDays(-1)", span="478-478"];
m1_302 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="dates.Add(endDate)", span="477-477"];
m1_314 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="i++", span="487-487"];
m1_310 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="long value", span="489-489"];
m1_312 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="value = 0", span="492-492"];
m1_316 [cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", span="468-468"];
m1_15 [cluster="Hangfire.Dashboard.DashboardMiddleware.Invoke(IOwinContext)", file="JobStorage.cs", label="dispatcher == null", span="54-54"];
m1_17 [cluster="Hangfire.Dashboard.DashboardMiddleware.Invoke(IOwinContext)", file="JobStorage.cs", label=_authorizationFilters, span="59-59"];
m1_16 [cluster="Hangfire.Dashboard.DashboardMiddleware.Invoke(IOwinContext)", file="JobStorage.cs", label="return Next.Invoke(context);", span="56-56"];
m1_18 [cluster="Hangfire.Dashboard.DashboardMiddleware.Invoke(IOwinContext)", file="JobStorage.cs", label="!filter.Authorize(context.Environment)", span="61-61"];
m1_255 [cluster="HangFire.Web.JobDetailsDto.JobDetailsDto()", file="JobStorage.cs", label="Entry HangFire.Web.JobDetailsDto.JobDetailsDto()", span="4-4"];
m1_244 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.JobDetails(string)", span="412-412"];
m1_251 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="JobStorage.cs", label="var history = historyList\r\n                    .Select(JobHelper.FromJson<Dictionary<string, string>>)\r\n                    .ToList()", span="424-426"];
m1_250 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="JobStorage.cs", label="var historyList = Redis.GetAllItemsFromList(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId))", span="421-422"];
m1_252 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="JobStorage.cs", label="return new JobDetailsDto\r\n                {\r\n                    Type = job[''Type''],\r\n                    Arguments = JobHelper.FromJson<Dictionary<string, string>>(job[''Args'']),\r\n                    State = job.ContainsKey(''State'') ? job[''State''] : null,\r\n                    Properties = job.Where(x => !hiddenProperties.Contains(x.Key)).ToDictionary(x => x.Key, x => x.Value),\r\n                    History = history\r\n                };", span="428-435"];
m1_249 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="JobStorage.cs", label="var hiddenProperties = new[] { ''Type'', ''Args'', ''State'' }", span="419-419"];
m1_246 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="JobStorage.cs", label="var job = Redis.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', jobId))", span="416-416"];
m1_245 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="JobStorage.cs", label=Redis, span="414-414"];
m1_247 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="JobStorage.cs", label="job.Count == 0", span="417-417"];
m1_248 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="JobStorage.cs", label="return null;", span="417-417"];
m1_253 [cluster="HangFire.Web.JobStorage.JobDetails(string)", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.JobDetails(string)", span="412-412"];
m1_292 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="JobStorage.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m1_297 [cluster="string.Format(string, object, object)", file="JobStorage.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m1_254 [cluster="Unk.GetAllEntriesFromHash", file="JobStorage.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m1_63 [cluster="Unk.ToDictionary", file="JobStorage.cs", label="Entry Unk.ToDictionary", span=""];
m1_337 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", file="JobStorage.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", span="0-0"];
m1_390 [cluster="Unk.GetSetCount", file="JobStorage.cs", label="Entry Unk.GetSetCount", span=""];
m1_206 [cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", span="330-330"];
m1_209 [cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="JobStorage.cs", label="return GetJobsWithProperties(\r\n                    Redis,\r\n                    jobIds,\r\n                    new[] { ''Type'', ''Args'', ''State'', ''CreatedAt'', ''Fetched'', ''Checked'' },\r\n                    null,\r\n                    (job, state) => new DequeuedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        State = job[2],\r\n                        CreatedAt = JobHelper.FromNullableStringTimestamp(job[3]),\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(job[4]),\r\n                        CheckedAt = JobHelper.FromNullableStringTimestamp(job[5])\r\n                    });", span="339-352"];
m1_208 [cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="JobStorage.cs", label="var jobIds = Redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    from, from + perPage - 1)", span="335-337"];
m1_207 [cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="JobStorage.cs", label=Redis, span="333-333"];
m1_210 [cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", span="330-330"];
m1_93 [cluster="HangFire.Web.JobStorage.FailedByDatesCount()", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.FailedByDatesCount()", span="141-141"];
m1_95 [cluster="HangFire.Web.JobStorage.FailedByDatesCount()", file="JobStorage.cs", label="return GetTimelineStats(Redis, ''failed'');", span="145-145"];
m1_94 [cluster="HangFire.Web.JobStorage.FailedByDatesCount()", file="JobStorage.cs", label=Redis, span="143-143"];
m1_96 [cluster="HangFire.Web.JobStorage.FailedByDatesCount()", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.FailedByDatesCount()", span="141-141"];
m1_256 [cluster="Unk.>", file="JobStorage.cs", label="Entry Unk.>", span=""];
m1_86 [cluster="HangFire.Web.ScheduleDto.ScheduleDto()", file="JobStorage.cs", label="Entry HangFire.Web.ScheduleDto.ScheduleDto()", span="5-5"];
m1_59 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JobStorage.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m1_233 [cluster="string.IsNullOrEmpty(string)", file="JobStorage.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m1_289 [cluster="Unk.GetValuesMap", file="JobStorage.cs", label="Entry Unk.GetValuesMap", span=""];
m1_19 [cluster="Hangfire.Dashboard.DashboardMiddleware.Invoke(IOwinContext)", file="JobStorage.cs", label="context.Response.StatusCode = (int) HttpStatusCode.Unauthorized", span="63-63"];
m1_21 [cluster="Hangfire.Dashboard.DashboardMiddleware.Invoke(IOwinContext)", file="JobStorage.cs", label="var dispatcherContext = new RequestDispatcherContext(\r\n                _appPath,\r\n                _storage,\r\n                context.Environment,\r\n                dispatcher.Item2)", span="68-72"];
m1_20 [cluster="Hangfire.Dashboard.DashboardMiddleware.Invoke(IOwinContext)", file="JobStorage.cs", label="return Task.FromResult(false);", span="64-64"];
m1_22 [cluster="Hangfire.Dashboard.DashboardMiddleware.Invoke(IOwinContext)", file="JobStorage.cs", label="return dispatcher.Item1.Dispatch(dispatcherContext);", span="74-74"];
m1_125 [cluster="Unk.GetAllItemsFromList", file="JobStorage.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m1_262 [cluster="Unk.Contains", file="JobStorage.cs", label="Entry Unk.Contains", span=""];
m1_114 [cluster="Unk.Select", file="JobStorage.cs", label="Entry Unk.Select", span=""];
m1_112 [cluster="Unk.GetAllItemsFromSet", file="JobStorage.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m1_140 [cluster="Unk.GetRangeFromSortedSetDesc", file="JobStorage.cs", label="Entry Unk.GetRangeFromSortedSetDesc", span=""];
m1_415 [cluster="Unk.GetValue", file="JobStorage.cs", label="Entry Unk.GetValue", span=""];
m1_68 [cluster="Unk.GetValuesFromHash", file="JobStorage.cs", label="Entry Unk.GetValuesFromHash", span=""];
m1_224 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.RetryJob(string)", span="372-372"];
m1_226 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="JobStorage.cs", label="var jobType = Redis.GetValueFromHash(String.Format(''hangfire:job:{0}'', jobId), ''Type'')", span="376-376"];
m1_225 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="JobStorage.cs", label=Redis, span="374-374"];
m1_227 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="JobStorage.cs", label="var queue = JobHelper.TryToGetQueue(jobType)", span="378-378"];
m1_230 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="JobStorage.cs", label="return JobState.Apply(\r\n                    Redis,\r\n                    new EnqueuedState(jobId, ''The job has been retried by a user.'', queue),\r\n                    FailedState.Name);", span="386-389"];
m1_229 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="JobStorage.cs", label="return false;", span="381-381"];
m1_228 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="JobStorage.cs", label="String.IsNullOrEmpty(queue)", span="379-379"];
m1_231 [cluster="HangFire.Web.JobStorage.RetryJob(string)", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.RetryJob(string)", span="372-372"];
m1_198 [cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="JobStorage.cs", label="Entry HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", span="305-305"];
m1_201 [cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="JobStorage.cs", label="return GetJobsWithProperties(\r\n                    Redis,\r\n                    jobIds,\r\n                    new[] { ''Type'', ''Args'' },\r\n                    new[] { ''EnqueuedAt'', ''State'' },\r\n                    (job, state) => new EnqueuedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="315-326"];
m1_200 [cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="JobStorage.cs", label="var jobIds = Redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}'', queue),\r\n                    from,\r\n                    from + perPage - 1)", span="310-313"];
m1_199 [cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="JobStorage.cs", label=Redis, span="308-308"];
m1_202 [cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="JobStorage.cs", label="Exit HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", span="305-305"];
m1_436 [file="JobStorage.cs", label=servers, span=""];
m1_437 [file="JobStorage.cs", label=queues, span=""];
m1_435 [file="JobStorage.cs", label=name, span=""];
m1_432 [file="JobStorage.cs", label=job, span=""];
m1_438 [file="JobStorage.cs", label=queue, span=""];
m1_441 [file="JobStorage.cs", label=string, span=""];
m1_449 [file="JobStorage.cs", label=queueName, span=""];
m1_442 [file="JobStorage.cs", label="string[]", span=""];
m1_443 [file="JobStorage.cs", label=id, span=""];
m1_445 [file="JobStorage.cs", label="string[]", span=""];
m1_433 [file="JobStorage.cs", label=jobs, span=""];
m1_434 [file="JobStorage.cs", label=states, span=""];
m1_444 [file="JobStorage.cs", label=jobs, span=""];
m1_446 [file="JobStorage.cs", label=states, span=""];
m1_440 [file="JobStorage.cs", label=string, span=""];
m1_447 [file="JobStorage.cs", label="System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", span=""];
m1_448 [file="JobStorage.cs", label=stats, span=""];
m1_439 [file="JobStorage.cs", label=hiddenProperties, span=""];
m2_363 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255"];
m2_622 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", span="889-889"];
m2_623 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetRangeFromSet(null, 0, 1));\r\n            })", span="891-894"];
m2_624 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", span="889-889"];
m2_155 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="SchedulePoller.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="40-40"];
m2_621 [cluster="System.Collections.Generic.List<T>.List()", file="SchedulePoller.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m2_401 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="301-301"];
m2_57 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="84-84"];
m2_810 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", span="1204-1204"];
m2_811 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [Value])\r\nvalues (@key, @field, @value)''", span="1206-1208"];
m2_812 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'', value = ''1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'', value = ''2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetValueFromHash(''hash-1'', ''field-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(''1'', result);\r\n            })", span="1210-1225"];
m2_813 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", span="1204-1204"];
m2_478 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="680-680"];
m2_479 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SchedulePoller.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="682-683"];
m2_480 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="680-680"];
m2_460 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="331-331"];
m2_25 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenProvidersCollectionIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenProvidersCollectionIsNull()", span="42-42"];
m2_364 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="528-528"];
m2_365 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SchedulePoller.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="530-531"];
m2_366 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="528-528"];
m2_739 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", span="1090-1090"];
m2_740 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetListCount(''my-list'');\r\n                Assert.Equal(0, result);\r\n            })", span="1092-1096"];
m2_741 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", span="1090-1090"];
m2_667 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", span="968-968"];
m2_668 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.AggregatedCounter ([Key], [Value])\r\nvalues (@key, @value)''", span="970-972"];
m2_669 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 12 },\r\n                    new { key = ''counter-2'', value = 15 }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetCounter(''counter-1'');\r\n\r\n                Assert.Equal(12, result);\r\n            })", span="974-987"];
m2_670 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", span="968-968"];
m2_864 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", span="1298-1298"];
m2_865 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], Value)\r\nvalues (@key, @value)''", span="1300-1302"];
m2_866 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromList(''list-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(new [] { ''3'', ''1'' }, result);\r\n            })", span="1304-1319"];
m2_867 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", span="1298-1298"];
m2_575 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="289-289"];
m2_271 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="376-376"];
m2_272 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="378-384"];
m2_273 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="376-376"];
m2_343 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="492-492"];
m2_344 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="494-501"];
m2_345 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="503-512"];
m2_346 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="492-492"];
m2_905 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="SchedulePoller.cs", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
m2_304 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="435-435"];
m2_305 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="437-440"];
m2_306 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="442-454"];
m2_307 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="435-435"];
m2_153 [cluster="Unk.ToString", file="SchedulePoller.cs", label="Entry Unk.ToString", span=""];
m2_26 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", span="43-43"];
m2_27 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundProcessContext(_serverId, _storage.Object, null, _cts.Token))", span="45-46"];
m2_28 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", file="SchedulePoller.cs", label="Assert.Equal(''properties'', exception.ParamName)", span="48-48"];
m2_857 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1288-1288"];
m2_858 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromList(''my-list'');\r\n                Assert.Empty(result);\r\n            })", span="1290-1294"];
m2_859 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1288-1288"];
m2_24 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="37-37"];
m2_209 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="249-249"];
m2_210 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SchedulePoller.cs", label="UseConnection(\r\n                connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null)))", span="251-253"];
m2_211 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="249-249"];
m2_883 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", span="1332-1332"];
m2_884 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetSetTtl(''my-set'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1334-1338"];
m2_885 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", span="1332-1332"];
m2_450 [cluster="Unk.NotEqual", file="SchedulePoller.cs", label="Entry Unk.NotEqual", span=""];
m2_829 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="467-467"];
m2_719 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", span="1055-1055"];
m2_720 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="1057-1059"];
m2_721 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetHashTtl(''hash-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1061-1076"];
m2_722 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", span="1055-1055"];
m2_281 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="388-388"];
m2_282 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="390-393"];
m2_283 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="395-407"];
m2_284 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="388-388"];
m2_353 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="516-516"];
m2_354 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="518-524"];
m2_355 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="516-516"];
m2_792 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="430-430"];
m2_430 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="623-623"];
m2_431 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SchedulePoller.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="625-626"];
m2_432 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="623-623"];
m2_772 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", span="1145-1145"];
m2_773 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="1147-1149"];
m2_774 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''list-2'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetListTtl(''list-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1151-1166"];
m2_775 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", span="1145-1145"];
m2_389 [cluster="Unk.Execute", file="SchedulePoller.cs", label="Entry Unk.Execute", span=""];
m2_239 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", span="304-304"];
m2_240 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues ('', '', '', getutcdate());\r\ndeclare @JobId int;\r\nset @JobId = scope_identity();\r\ninsert into HangFire.State (JobId, Name, CreatedAt)\r\nvalues (@JobId, 'old-state', getutcdate());\r\ninsert into HangFire.State (JobId, Name, Reason, Data, CreatedAt)\r\nvalues (@JobId, @name, @reason, @data, getutcdate());\r\ndeclare @StateId int;\r\nset @StateId = scope_identity();\r\nupdate HangFire.Job set StateId = @StateId;\r\nselect @JobId as Id;''", span="306-318"];
m2_241 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var data = new Dictionary<string, string>\r\n                {\r\n                    { ''key'', ''Value'' }\r\n                };\r\n\r\n                var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id;\r\n\r\n                var result = connection.GetStateData(jobId.ToString());\r\n                Assert.NotNull(result);\r\n\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="320-335"];
m2_242 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", span="304-304"];
m2_658 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", span="943-943"];
m2_659 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Counter ([Key], [Value])\r\nvalues (@key, @value)''", span="945-947"];
m2_660 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 1 },\r\n                    new { key = ''counter-2'', value = 1 },\r\n                    new { key = ''counter-1'', value = 1 }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetCounter(''counter-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="949-964"];
m2_661 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", span="943-943"];
m2_259 [cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", file="SchedulePoller.cs", label="Entry Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", span="26-26"];
m2_847 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", span="1278-1278"];
m2_848 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetAllItemsFromList(null));\r\n            })", span="1280-1284"];
m2_849 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", span="1278-1278"];
m2_5 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", span="21-21"];
m2_488 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="340-340"];
m2_6 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SchedulePoller.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m2_402 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="580-580"];
m2_403 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="582-588"];
m2_404 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="580-580"];
m2_764 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="453-453"];
m2_39 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", file="SchedulePoller.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", span="52-52"];
m2_685 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="405-405"];
m2_33 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", file="SchedulePoller.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", span="52-52"];
m2_34 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", file="SchedulePoller.cs", label="var context = new BackgroundProcessContext(_serverId, _storage.Object, _properties, _cts.Token)", span="54-54"];
m2_35 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", file="SchedulePoller.cs", label="Assert.Equal(_serverId, context.ServerId)", span="56-56"];
m2_37 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", file="SchedulePoller.cs", label="Assert.Same(_storage.Object, context.Storage)", span="58-58"];
m2_36 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", file="SchedulePoller.cs", label="Assert.True(_properties.SequenceEqual(context.Properties))", span="57-57"];
m2_38 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", file="SchedulePoller.cs", label="Assert.Equal(_cts.Token, context.CancellationToken)", span="59-59"];
m2_205 [cluster="int.ToString()", file="SchedulePoller.cs", label="Entry int.ToString()", span="0-0"];
m2_326 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="470-470"];
m2_327 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="472-478"];
m2_328 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="470-470"];
m2_203 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="SchedulePoller.cs", label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="67-67"];
m2_250 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="339-339"];
m2_251 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="341-344"];
m2_252 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result.LoadException);\r\n            })", span="346-360"];
m2_253 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="339-339"];
m2_650 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="391-391"];
m2_890 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", span="1342-1342"];
m2_891 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="1344-1346"];
m2_892 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) },\r\n                    new { key = ''set-2'', value = ''2'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetSetTtl(''set-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1348-1363"];
m2_893 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", span="1342-1342"];
m2_156 [cluster="System.DateTime.AddDays(double)", file="SchedulePoller.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m2_439 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="322-322"];
m2_7 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="SchedulePoller.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m2_154 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="SchedulePoller.cs", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
m2_566 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="802-802"];
m2_567 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null)))", span="804-805"];
m2_568 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="802-802"];
m2_511 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", span="718-718"];
m2_512 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(0, result.Count);\r\n            })", span="720-726"];
m2_513 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", span="718-718"];
m2_219 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", span="257-257"];
m2_220 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetStateData(''1'');\r\n                Assert.Null(result);\r\n            })", span="259-263"];
m2_221 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", span="257-257"];
m2_576 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", span="809-809"];
m2_577 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n                Assert.Null(result);\r\n            })", span="811-815"];
m2_578 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", span="809-809"];
m2_440 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="630-630"];
m2_441 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues \r\n('Server1', '', getutcdate()),\r\n('Server2', '', getutcdate())''", span="632-636"];
m2_442 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="638-646"];
m2_443 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="630-630"];
m2_583 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", span="819-819"];
m2_584 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [Value])\r\nvalues (@key, @field, @value)''", span="821-823"];
m2_585 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-hash'', field = ''Key1'', value = ''Value1'' },\r\n                    new { key = ''some-hash'', field = ''Key2'', value = ''Value2'' },\r\n                    new { key = ''another-hash'', field = ''Key3'', value = ''Value3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n\r\n                // Assert\r\n                Assert.NotNull(result);\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="825-843"];
m2_586 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", span="819-819"];
m2_782 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", span="1170-1170"];
m2_783 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(null, ''name''));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1172-1178"];
m2_784 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", span="1170-1170"];
m2_712 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", span="1045-1045"];
m2_713 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetHashTtl(''my-hash'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1047-1051"];
m2_714 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", span="1045-1045"];
m2_793 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", span="1182-1182"];
m2_794 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(''key'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="1184-1190"];
m2_795 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", span="1182-1182"];
m2_62 [cluster="Unk.Dequeue", file="SchedulePoller.cs", label="Entry Unk.Dequeue", span=""];
m2_30 [cluster="lambda expression", file="SchedulePoller.cs", label="new SqlServerConnection(ConnectionUtils.CreateConnection(), IsolationLevel.Serializable, null)", span="45-45"];
m2_11 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", span="25-25"];
m2_12 [cluster="Unk.>", file="SchedulePoller.cs", label="Entry Unk.>", span=""];
m2_13 [cluster="Unk.Equal", file="SchedulePoller.cs", label="Entry Unk.Equal", span=""];
m2_21 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="34-34"];
m2_22 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="37-37"];
m2_23 [cluster="lambda expression", file="SchedulePoller.cs", label="new BackgroundProcessContext(_serverId, null, _properties, _cts.Token)", span="37-37"];
m2_29 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", span="43-43"];
m2_31 [cluster="lambda expression", file="SchedulePoller.cs", label="new BackgroundProcessContext(_serverId, _storage.Object, null, _cts.Token)", span="46-46"];
m2_50 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="79-87"];
m2_54 [cluster="lambda expression", file="SchedulePoller.cs", label="_queue.Verify(x => x.Dequeue(queues, token))", span="86-86"];
m2_60 [cluster="lambda expression", file="SchedulePoller.cs", label="x.Dequeue(queues, token)", span="86-86"];
m2_55 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="79-87"];
m2_59 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="86-86"];
m2_61 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="86-86"];
m2_67 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="93-101"];
m2_68 [cluster="lambda expression", file="SchedulePoller.cs", label="var token = new CancellationToken()", span="95-95"];
m2_71 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<InvalidOperationException>(\r\n                    () => connection.FetchNextJob(new[] { ''critical'', ''default'' }, token))", span="99-100"];
m2_75 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.FetchNextJob(new[] { ''critical'', ''default'' }, token)", span="100-100"];
m2_70 [cluster="lambda expression", file="SchedulePoller.cs", label="_providers.Add(anotherProvider.Object, new [] { ''critical'' })", span="97-97"];
m2_72 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="93-101"];
m2_74 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="100-100"];
m2_76 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="100-100"];
m2_80 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="107-111"];
m2_81 [cluster="lambda expression", file="SchedulePoller.cs", label="var transaction = connection.CreateWriteTransaction()", span="109-109"];
m2_82 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotNull(transaction)", span="110-110"];
m2_83 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="107-111"];
m2_89 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="117-121"];
m2_90 [cluster="lambda expression", file="SchedulePoller.cs", label="var @lock = connection.AcquireDistributedLock(''1'', TimeSpan.FromSeconds(1))", span="119-119"];
m2_91 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotNull(@lock)", span="120-120"];
m2_92 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="117-121"];
m2_98 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="127-137"];
m2_99 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero))", span="129-134"];
m2_103 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero)", span="130-134"];
m2_100 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''job'', exception.ParamName)", span="136-136"];
m2_102 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="130-134"];
m2_101 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="127-137"];
m2_104 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="130-134"];
m2_110 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="143-153"];
m2_111 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero))", span="145-150"];
m2_115 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero)", span="146-150"];
m2_112 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''parameters'', exception.ParamName)", span="152-152"];
m2_114 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="146-150"];
m2_113 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="143-153"];
m2_116 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="146-150"];
m2_118 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="147-147"];
m2_119 [cluster="lambda expression", file="SchedulePoller.cs", label="SampleMethod(''hello'')", span="147-147"];
m2_120 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="147-147"];
m2_126 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="159-195"];
m2_127 [cluster="lambda expression", file="SchedulePoller.cs", label="var createdAt = new DateTime(2012, 12, 12)", span="161-161"];
m2_128 [cluster="lambda expression", file="SchedulePoller.cs", label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1))", span="162-166"];
m2_131 [cluster="lambda expression", file="SchedulePoller.cs", label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="171-171"];
m2_144 [cluster="lambda expression", file="SchedulePoller.cs", label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="188-191"];
m2_133 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(createdAt, sqlJob.CreatedAt)", span="173-173"];
m2_142 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.ExpireAt)", span="185-185"];
m2_143 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(sqlJob.ExpireAt < createdAt.AddDays(1).AddMinutes(1))", span="186-186"];
m2_129 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotNull(jobId)", span="168-168"];
m2_160 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="163-163"];
m2_130 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotEmpty(jobId)", span="169-169"];
m2_132 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="172-172"];
m2_134 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(null, (int?) sqlJob.StateId)", span="174-174"];
m2_135 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(null, (string) sqlJob.StateName)", span="175-175"];
m2_136 [cluster="lambda expression", file="SchedulePoller.cs", label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="177-177"];
m2_137 [cluster="lambda expression", file="SchedulePoller.cs", label="invocationData.Arguments = sqlJob.Arguments", span="178-178"];
m2_138 [cluster="lambda expression", file="SchedulePoller.cs", label="var job = invocationData.Deserialize()", span="180-180"];
m2_139 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(typeof(SqlServerConnectionFacts), job.Type)", span="181-181"];
m2_140 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="182-182"];
m2_141 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''\''Hello\'''', job.Arguments[0])", span="183-183"];
m2_145 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''Value1'', parameters[''Key1''])", span="193-193"];
m2_163 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="191-191"];
m2_166 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="191-191"];
m2_146 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''Value2'', parameters[''Key2''])", span="194-194"];
m2_147 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="159-195"];
m2_161 [cluster="lambda expression", file="SchedulePoller.cs", label="SampleMethod(''Hello'')", span="163-163"];
m2_162 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="163-163"];
m2_164 [cluster="lambda expression", file="SchedulePoller.cs", label="(string) x.Name", span="191-191"];
m2_165 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="191-191"];
m2_167 [cluster="lambda expression", file="SchedulePoller.cs", label="(string) x.Value", span="191-191"];
m2_168 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="191-191"];
m2_172 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="201-202"];
m2_173 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="201-202"];
m2_176 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetJobData(null)", span="202-202"];
m2_174 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="201-202"];
m2_175 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="202-202"];
m2_177 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="202-202"];
m2_182 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="208-212"];
m2_183 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetJobData(''1'')", span="210-210"];
m2_184 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Null(result)", span="211-211"];
m2_185 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="208-212"];
m2_193 [cluster="lambda expression", file="SchedulePoller.cs", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="227-234"];
m2_191 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="223-245"];
m2_192 [cluster="lambda expression", file="SchedulePoller.cs", label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="225-225"];
m2_194 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="236-236"];
m2_206 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="225-225"];
m2_195 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotNull(result)", span="238-238"];
m2_196 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotNull(result.Job)", span="239-239"];
m2_197 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''Succeeded'', result.State)", span="240-240"];
m2_198 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''Arguments'', result.Job.Arguments[0])", span="241-241"];
m2_199 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Null(result.LoadException)", span="242-242"];
m2_200 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < result.CreatedAt)", span="243-243"];
m2_201 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(result.CreatedAt < DateTime.UtcNow.AddMinutes(1))", span="244-244"];
m2_202 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="223-245"];
m2_207 [cluster="lambda expression", file="SchedulePoller.cs", label="SampleMethod(''wrong'')", span="225-225"];
m2_208 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="225-225"];
m2_212 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="252-253"];
m2_213 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null))", span="252-253"];
m2_216 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetStateData(null)", span="253-253"];
m2_214 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="252-253"];
m2_215 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="253-253"];
m2_217 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="253-253"];
m2_222 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="259-263"];
m2_223 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetStateData(''1'')", span="261-261"];
m2_224 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Null(result)", span="262-262"];
m2_225 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="259-263"];
m2_232 [cluster="lambda expression", file="SchedulePoller.cs", label="var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id", span="290-292"];
m2_230 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="283-300"];
m2_231 [cluster="lambda expression", file="SchedulePoller.cs", label="var data = new Dictionary<string, string>\r\n                {\r\n                    { ''Key'', ''Value'' }\r\n                }", span="285-288"];
m2_233 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetStateData(jobId.ToString())", span="294-294"];
m2_234 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotNull(result)", span="295-295"];
m2_235 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''Name'', result.Name)", span="297-297"];
m2_236 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''Reason'', result.Reason)", span="298-298"];
m2_237 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''Value'', result.Data[''Key''])", span="299-299"];
m2_238 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="283-300"];
m2_245 [cluster="lambda expression", file="SchedulePoller.cs", label="var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id", span="327-329"];
m2_243 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="320-335"];
m2_244 [cluster="lambda expression", file="SchedulePoller.cs", label="var data = new Dictionary<string, string>\r\n                {\r\n                    { ''key'', ''Value'' }\r\n                }", span="322-325"];
m2_246 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetStateData(jobId.ToString())", span="331-331"];
m2_247 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotNull(result)", span="332-332"];
m2_248 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''Value'', result.Data[''Key''])", span="334-334"];
m2_249 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="320-335"];
m2_255 [cluster="lambda expression", file="SchedulePoller.cs", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="348-355"];
m2_254 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="346-360"];
m2_256 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="357-357"];
m2_257 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotNull(result.LoadException)", span="359-359"];
m2_258 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="346-360"];
m2_263 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="366-372"];
m2_264 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="368-369"];
m2_268 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.SetJobParameter(null, ''name'', ''value'')", span="369-369"];
m2_265 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''id'', exception.ParamName)", span="371-371"];
m2_267 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="369-369"];
m2_266 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="366-372"];
m2_269 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="369-369"];
m2_274 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="378-384"];
m2_275 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="380-381"];
m2_279 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.SetJobParameter(''1'', null, ''value'')", span="381-381"];
m2_276 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''name'', exception.ParamName)", span="383-383"];
m2_278 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="381-381"];
m2_277 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="378-384"];
m2_280 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="381-381"];
m2_286 [cluster="lambda expression", file="SchedulePoller.cs", label="var job = sql.Query(arrangeSql).Single()", span="397-397"];
m2_285 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="395-407"];
m2_288 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="400-400"];
m2_289 [cluster="lambda expression", file="SchedulePoller.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="402-404"];
m2_287 [cluster="lambda expression", file="SchedulePoller.cs", label="string jobId = job.Id.ToString()", span="398-398"];
m2_290 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''Value'', parameter.Value)", span="406-406"];
m2_291 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="395-407"];
m2_297 [cluster="lambda expression", file="SchedulePoller.cs", label="var job = sql.Query(arrangeSql).Single()", span="420-420"];
m2_296 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="418-431"];
m2_299 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="423-423"];
m2_300 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="424-424"];
m2_301 [cluster="lambda expression", file="SchedulePoller.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="426-428"];
m2_298 [cluster="lambda expression", file="SchedulePoller.cs", label="string jobId = job.Id.ToString()", span="421-421"];
m2_302 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''AnotherValue'', parameter.Value)", span="430-430"];
m2_303 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="418-431"];
m2_309 [cluster="lambda expression", file="SchedulePoller.cs", label="var job = sql.Query(arrangeSql).Single()", span="444-444"];
m2_308 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="442-454"];
m2_311 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.SetJobParameter(jobId, ''Name'', null)", span="447-447"];
m2_312 [cluster="lambda expression", file="SchedulePoller.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="449-451"];
m2_310 [cluster="lambda expression", file="SchedulePoller.cs", label="string jobId = job.Id.ToString()", span="445-445"];
m2_313 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal((string) null, parameter.Value)", span="453-453"];
m2_314 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="442-454"];
m2_318 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="460-466"];
m2_319 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="462-463"];
m2_323 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetJobParameter(null, ''hello'')", span="463-463"];
m2_320 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''id'', exception.ParamName)", span="465-465"];
m2_322 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="463-463"];
m2_321 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="460-466"];
m2_324 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="463-463"];
m2_329 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="472-478"];
m2_330 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="474-475"];
m2_334 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetJobParameter(''1'', null)", span="475-475"];
m2_331 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''name'', exception.ParamName)", span="477-477"];
m2_333 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="475-475"];
m2_332 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="472-478"];
m2_335 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="475-475"];
m2_339 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="484-488"];
m2_340 [cluster="lambda expression", file="SchedulePoller.cs", label="var value = connection.GetJobParameter(''1'', ''hello'')", span="486-486"];
m2_341 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Null(value)", span="487-487"];
m2_342 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="484-488"];
m2_348 [cluster="lambda expression", file="SchedulePoller.cs", label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="505-507"];
m2_347 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="503-512"];
m2_349 [cluster="lambda expression", file="SchedulePoller.cs", label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="509-509"];
m2_350 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''value'', value)", span="511-511"];
m2_351 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="503-512"];
m2_356 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="518-524"];
m2_357 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="520-521"];
m2_361 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="521-521"];
m2_358 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''key'', exception.ParamName)", span="523-523"];
m2_360 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="521-521"];
m2_359 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="518-524"];
m2_362 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="521-521"];
m2_367 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="530-531"];
m2_368 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="530-531"];
m2_371 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="531-531"];
m2_369 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="530-531"];
m2_370 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="531-531"];
m2_372 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="531-531"];
m2_376 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="537-543"];
m2_377 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="539-540"];
m2_378 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Null(result)", span="542-542"];
m2_379 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="537-543"];
m2_385 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql)", span="559-559"];
m2_384 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="557-564"];
m2_386 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="561-561"];
m2_387 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''-1.0'', result)", span="563-563"];
m2_388 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="557-564"];
m2_393 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="570-576"];
m2_394 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="572-573"];
m2_398 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.AnnounceServer(null, new ServerContext())", span="573-573"];
m2_395 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''serverId'', exception.ParamName)", span="575-575"];
m2_397 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="573-573"];
m2_396 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="570-576"];
m2_399 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="573-573"];
m2_405 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="582-588"];
m2_406 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="584-585"];
m2_410 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.AnnounceServer(''server'', null)", span="585-585"];
m2_407 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''context'', exception.ParamName)", span="587-587"];
m2_409 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="585-585"];
m2_408 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="582-588"];
m2_411 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="585-585"];
m2_415 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="594-619"];
m2_416 [cluster="lambda expression", file="SchedulePoller.cs", label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="596-600"];
m2_417 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.AnnounceServer(''server'', context1)", span="601-601"];
m2_418 [cluster="lambda expression", file="SchedulePoller.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="603-603"];
m2_423 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.AnnounceServer(''server'', context2)", span="615-615"];
m2_424 [cluster="lambda expression", file="SchedulePoller.cs", label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="616-616"];
m2_419 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''server'', server.Id)", span="604-604"];
m2_420 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="605-607"];
m2_421 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotNull(server.LastHeartbeat)", span="608-608"];
m2_422 [cluster="lambda expression", file="SchedulePoller.cs", label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="610-614"];
m2_425 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''server'', sameServer.Id)", span="617-617"];
m2_426 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Contains(''1000'', sameServer.Data)", span="618-618"];
m2_427 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="594-619"];
m2_433 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="625-626"];
m2_434 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="625-626"];
m2_437 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.RemoveServer(null)", span="626-626"];
m2_435 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="625-626"];
m2_436 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="626-626"];
m2_438 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="626-626"];
m2_445 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql)", span="640-640"];
m2_444 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="638-646"];
m2_446 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.RemoveServer(''Server1'')", span="642-642"];
m2_447 [cluster="lambda expression", file="SchedulePoller.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="644-644"];
m2_448 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="645-645"];
m2_449 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="638-646"];
m2_454 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="652-653"];
m2_455 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="652-653"];
m2_458 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.Heartbeat(null)", span="653-653"];
m2_456 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="652-653"];
m2_457 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="653-653"];
m2_459 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="653-653"];
m2_466 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql)", span="667-667"];
m2_465 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="665-676"];
m2_467 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.Heartbeat(''server1'')", span="669-669"];
m2_468 [cluster="lambda expression", file="SchedulePoller.cs", label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat)", span="671-672"];
m2_469 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotEqual(2012, servers[''server1''].Year)", span="674-674"];
m2_472 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="672-672"];
m2_475 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="672-672"];
m2_470 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(2012, servers[''server2''].Year)", span="675-675"];
m2_471 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="665-676"];
m2_473 [cluster="lambda expression", file="SchedulePoller.cs", label="(string)x.Id", span="672-672"];
m2_474 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="672-672"];
m2_476 [cluster="lambda expression", file="SchedulePoller.cs", label="(DateTime)x.LastHeartbeat", span="672-672"];
m2_477 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="672-672"];
m2_481 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="682-683"];
m2_482 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="682-683"];
m2_485 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="683-683"];
m2_483 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="682-683"];
m2_484 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="683-683"];
m2_486 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="683-683"];
m2_494 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="695-701"];
m2_493 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="693-707"];
m2_495 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="703-703"];
m2_496 [cluster="lambda expression", file="SchedulePoller.cs", label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="705-705"];
m2_497 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''server2'', liveServer.Id)", span="706-706"];
m2_498 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="693-707"];
m2_504 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="713-714"];
m2_505 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null))", span="714-714"];
m2_508 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetAllItemsFromSet(null)", span="714-714"];
m2_506 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="713-714"];
m2_507 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="714-714"];
m2_509 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="714-714"];
m2_514 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="720-726"];
m2_515 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetAllItemsFromSet(''some-set'')", span="722-722"];
m2_516 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotNull(result)", span="724-724"];
m2_517 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(0, result.Count)", span="725-725"];
m2_518 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="720-726"];
m2_524 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-set'', value = ''1'' },\r\n                    new { key = ''some-set'', value = ''2'' },\r\n                    new { key = ''another-set'', value = ''3'' }\r\n                })", span="739-744"];
m2_523 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="736-753"];
m2_525 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetAllItemsFromSet(''some-set'')", span="747-747"];
m2_526 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(2, result.Count)", span="750-750"];
m2_527 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Contains(''1'', result)", span="751-751"];
m2_528 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Contains(''2'', result)", span="752-752"];
m2_529 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="736-753"];
m2_533 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="759-765"];
m2_534 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()))", span="761-762"];
m2_538 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.SetRangeInHash(null, new Dictionary<string, string>())", span="762-762"];
m2_535 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''key'', exception.ParamName)", span="764-764"];
m2_537 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="762-762"];
m2_536 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="759-765"];
m2_539 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="762-762"];
m2_544 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="771-777"];
m2_545 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null))", span="773-774"];
m2_549 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.SetRangeInHash(''some-hash'', null)", span="774-774"];
m2_546 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="776-776"];
m2_548 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="774-774"];
m2_547 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="771-777"];
m2_550 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="774-774"];
m2_554 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="783-798"];
m2_555 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="785-789"];
m2_556 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="791-794"];
m2_557 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="796-796"];
m2_560 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="794-794"];
m2_563 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="794-794"];
m2_558 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="797-797"];
m2_559 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="783-798"];
m2_561 [cluster="lambda expression", file="SchedulePoller.cs", label="(string)x.Field", span="794-794"];
m2_562 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="794-794"];
m2_564 [cluster="lambda expression", file="SchedulePoller.cs", label="(string)x.Value", span="794-794"];
m2_565 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="794-794"];
m2_569 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="804-805"];
m2_570 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null))", span="805-805"];
m2_573 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetAllEntriesFromHash(null)", span="805-805"];
m2_571 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="804-805"];
m2_572 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="805-805"];
m2_574 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="805-805"];
m2_579 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="811-815"];
m2_580 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="813-813"];
m2_581 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Null(result)", span="814-814"];
m2_582 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="811-815"];
m2_588 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-hash'', field = ''Key1'', value = ''Value1'' },\r\n                    new { key = ''some-hash'', field = ''Key2'', value = ''Value2'' },\r\n                    new { key = ''another-hash'', field = ''Key3'', value = ''Value3'' }\r\n                })", span="828-833"];
m2_587 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="825-843"];
m2_589 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="836-836"];
m2_590 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.NotNull(result)", span="839-839"];
m2_591 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(2, result.Count)", span="840-840"];
m2_592 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="841-841"];
m2_593 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="842-842"];
m2_594 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="825-843"];
m2_598 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="849-853"];
m2_599 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetSetCount(null))", span="851-852"];
m2_602 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetSetCount(null)", span="852-852"];
m2_600 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="849-853"];
m2_601 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="852-852"];
m2_603 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="852-852"];
m2_608 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="859-863"];
m2_609 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetSetCount(''my-set'')", span="861-861"];
m2_610 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(0, result)", span="862-862"];
m2_611 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="859-863"];
m2_617 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { Key = ''set-1'', Value = ''value-1'' },\r\n                    new { Key = ''set-2'', Value = ''value-1'' },\r\n                    new { Key = ''set-1'', Value = ''value-2'' }\r\n                })", span="875-880"];
m2_616 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="873-885"];
m2_618 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetSetCount(''set-1'')", span="882-882"];
m2_619 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(2, result)", span="884-884"];
m2_620 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="873-885"];
m2_625 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="891-894"];
m2_626 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetRangeFromSet(null, 0, 1))", span="893-893"];
m2_629 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetRangeFromSet(null, 0, 1)", span="893-893"];
m2_627 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="891-894"];
m2_628 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="893-893"];
m2_630 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="893-893"];
m2_637 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { Key = ''set-1'', Value = ''1'' },\r\n                    new { Key = ''set-1'', Value = ''2'' },\r\n                    new { Key = ''set-1'', Value = ''3'' },\r\n                    new { Key = ''set-1'', Value = ''4'' },\r\n                    new { Key = ''set-2'', Value = ''4'' },\r\n                    new { Key = ''set-1'', Value = ''5'' }\r\n                })", span="906-914"];
m2_636 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="904-919"];
m2_638 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetRangeFromSet(''set-1'', 2, 3)", span="916-916"];
m2_639 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(new [] { ''3'', ''4'' }, result)", span="918-918"];
m2_640 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="904-919"];
m2_644 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="925-929"];
m2_645 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetCounter(null))", span="927-928"];
m2_648 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetCounter(null)", span="928-928"];
m2_646 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="925-929"];
m2_647 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="928-928"];
m2_649 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="928-928"];
m2_654 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="935-939"];
m2_655 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetCounter(''my-counter'')", span="937-937"];
m2_656 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(0, result)", span="938-938"];
m2_657 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="935-939"];
m2_663 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 1 },\r\n                    new { key = ''counter-2'', value = 1 },\r\n                    new { key = ''counter-1'', value = 1 }\r\n                })", span="952-957"];
m2_662 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="949-964"];
m2_664 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetCounter(''counter-1'')", span="960-960"];
m2_665 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(2, result)", span="963-963"];
m2_666 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="949-964"];
m2_672 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 12 },\r\n                    new { key = ''counter-2'', value = 15 }\r\n                })", span="977-981"];
m2_671 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="974-987"];
m2_673 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetCounter(''counter-1'')", span="984-984"];
m2_674 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(12, result)", span="986-986"];
m2_675 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="974-987"];
m2_679 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="993-996"];
m2_680 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetHashCount(null))", span="995-995"];
m2_683 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetHashCount(null)", span="995-995"];
m2_681 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="993-996"];
m2_682 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="995-995"];
m2_684 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="995-995"];
m2_689 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1002-1006"];
m2_690 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetHashCount(''my-hash'')", span="1004-1004"];
m2_691 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(0, result)", span="1005-1005"];
m2_692 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1002-1006"];
m2_698 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'' }\r\n                })", span="1019-1024"];
m2_697 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1016-1031"];
m2_699 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetHashCount(''hash-1'')", span="1027-1027"];
m2_700 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(2, result)", span="1030-1030"];
m2_701 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1016-1031"];
m2_705 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1037-1041"];
m2_706 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetHashTtl(null))", span="1039-1040"];
m2_709 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetHashTtl(null)", span="1040-1040"];
m2_707 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1037-1041"];
m2_708 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1040-1040"];
m2_710 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1040-1040"];
m2_715 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1047-1051"];
m2_716 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetHashTtl(''my-hash'')", span="1049-1049"];
m2_717 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(result < TimeSpan.Zero)", span="1050-1050"];
m2_718 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1047-1051"];
m2_724 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = (DateTime?) null }\r\n                })", span="1064-1068"];
m2_723 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1061-1076"];
m2_725 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetHashTtl(''hash-1'')", span="1071-1071"];
m2_726 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1074-1074"];
m2_727 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1075-1075"];
m2_728 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1061-1076"];
m2_732 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1082-1086"];
m2_733 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListCount(null))", span="1084-1085"];
m2_736 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetListCount(null)", span="1085-1085"];
m2_734 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1082-1086"];
m2_735 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1085-1085"];
m2_737 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1085-1085"];
m2_742 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1092-1096"];
m2_743 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetListCount(''my-list'')", span="1094-1094"];
m2_744 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(0, result)", span="1095-1095"];
m2_745 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1092-1096"];
m2_751 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-2'' }\r\n                })", span="1109-1114"];
m2_750 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1106-1121"];
m2_752 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetListCount(''list-1'')", span="1117-1117"];
m2_753 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(2, result)", span="1120-1120"];
m2_754 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1106-1121"];
m2_758 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1127-1131"];
m2_759 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListTtl(null))", span="1129-1130"];
m2_762 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetListTtl(null)", span="1130-1130"];
m2_760 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1127-1131"];
m2_761 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1130-1130"];
m2_763 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1130-1130"];
m2_768 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1137-1141"];
m2_769 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetListTtl(''my-list'')", span="1139-1139"];
m2_770 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(result < TimeSpan.Zero)", span="1140-1140"];
m2_771 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1137-1141"];
m2_777 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''list-2'', expireAt = (DateTime?) null }\r\n                })", span="1154-1158"];
m2_776 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1151-1166"];
m2_778 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetListTtl(''list-1'')", span="1161-1161"];
m2_779 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1164-1164"];
m2_780 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1165-1165"];
m2_781 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1151-1166"];
m2_785 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1172-1178"];
m2_786 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(null, ''name''))", span="1174-1175"];
m2_790 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetValueFromHash(null, ''name'')", span="1175-1175"];
m2_787 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1177-1177"];
m2_789 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1175-1175"];
m2_788 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1172-1178"];
m2_791 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1175-1175"];
m2_796 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1184-1190"];
m2_797 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(''key'', null))", span="1186-1187"];
m2_801 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetValueFromHash(''key'', null)", span="1187-1187"];
m2_798 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''name'', exception.ParamName)", span="1189-1189"];
m2_800 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1187-1187"];
m2_799 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1184-1190"];
m2_802 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1187-1187"];
m2_806 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1196-1200"];
m2_807 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetValueFromHash(''my-hash'', ''name'')", span="1198-1198"];
m2_808 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Null(result)", span="1199-1199"];
m2_809 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1196-1200"];
m2_815 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'', value = ''1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'', value = ''2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'', value = ''3'' }\r\n                })", span="1213-1218"];
m2_814 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1210-1225"];
m2_816 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetValueFromHash(''hash-1'', ''field-1'')", span="1221-1221"];
m2_817 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''1'', result)", span="1224-1224"];
m2_818 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1210-1225"];
m2_822 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1231-1237"];
m2_823 [cluster="lambda expression", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetRangeFromList(null, 0, 1))", span="1233-1234"];
m2_827 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetRangeFromList(null, 0, 1)", span="1234-1234"];
m2_824 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1236-1236"];
m2_826 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1234-1234"];
m2_825 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1231-1237"];
m2_828 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1234-1234"];
m2_833 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1243-1247"];
m2_834 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetRangeFromList(''my-list'', 0, 1)", span="1245-1245"];
m2_835 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Empty(result)", span="1246-1246"];
m2_836 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1243-1247"];
m2_843 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' },\r\n                    new { key = ''list-1'', value = ''4'' },\r\n                    new { key = ''list-1'', value = ''5'' }\r\n                })", span="1260-1267"];
m2_842 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1257-1274"];
m2_844 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetRangeFromList(''list-1'', 1, 2)", span="1270-1270"];
m2_845 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(new [] { ''4'', ''3'' }, result)", span="1273-1273"];
m2_846 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1257-1274"];
m2_850 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1280-1284"];
m2_851 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetAllItemsFromList(null))", span="1282-1283"];
m2_854 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetAllItemsFromList(null)", span="1283-1283"];
m2_852 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1280-1284"];
m2_853 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1283-1283"];
m2_855 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1283-1283"];
m2_860 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1290-1294"];
m2_861 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetAllItemsFromList(''my-list'')", span="1292-1292"];
m2_862 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Empty(result)", span="1293-1293"];
m2_863 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1290-1294"];
m2_869 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' }\r\n                })", span="1307-1312"];
m2_868 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1304-1319"];
m2_870 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetAllItemsFromList(''list-1'')", span="1315-1315"];
m2_871 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Equal(new [] { ''3'', ''1'' }, result)", span="1318-1318"];
m2_872 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1304-1319"];
m2_876 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1325-1328"];
m2_877 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetSetTtl(null))", span="1327-1327"];
m2_880 [cluster="lambda expression", file="SchedulePoller.cs", label="connection.GetSetTtl(null)", span="1327-1327"];
m2_878 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1325-1328"];
m2_879 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1327-1327"];
m2_881 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1327-1327"];
m2_886 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1334-1338"];
m2_887 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetSetTtl(''my-set'')", span="1336-1336"];
m2_888 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(result < TimeSpan.Zero)", span="1337-1337"];
m2_889 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1334-1338"];
m2_895 [cluster="lambda expression", file="SchedulePoller.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) },\r\n                    new { key = ''set-2'', value = ''2'', expireAt = (DateTime?) null }\r\n                })", span="1351-1355"];
m2_894 [cluster="lambda expression", file="SchedulePoller.cs", label="Entry lambda expression", span="1348-1363"];
m2_896 [cluster="lambda expression", file="SchedulePoller.cs", label="var result = connection.GetSetTtl(''set-1'')", span="1358-1358"];
m2_897 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1361-1361"];
m2_898 [cluster="lambda expression", file="SchedulePoller.cs", label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1362-1362"];
m2_899 [cluster="lambda expression", file="SchedulePoller.cs", label="Exit lambda expression", span="1348-1363"];
m2_15 [cluster="Unk.GetJobQueue", file="SchedulePoller.cs", label="Entry Unk.GetJobQueue", span=""];
m2_16 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="33-33"];
m2_32 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m2_125 [cluster="Unk.UseConnections", file="SchedulePoller.cs", label="Entry Unk.UseConnections", span=""];
m2_412 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="592-592"];
m2_413 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.NotNull(server.LastHeartbeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="594-619"];
m2_414 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="592-592"];
m2_540 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266"];
m2_84 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="71-71"];
m2_693 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", span="1010-1010"];
m2_694 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="1012-1014"];
m2_695 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetHashCount(''hash-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="1016-1031"];
m2_696 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", span="1010-1010"];
m2_9 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundProcessContext(null, _storage.Object, _properties, _cts.Token))", span="27-28"];
m2_390 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="568-568"];
m2_391 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="570-576"];
m2_392 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="568-568"];
m2_117 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SchedulePoller.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="149-149"];
m2_501 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="711-711"];
m2_502 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null)))", span="713-714"];
m2_503 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="711-711"];
m2_711 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="416-416"];
m2_900 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", span="1366-1366"];
m2_901 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="SchedulePoller.cs", label="var sqlConnection = ConnectionUtils.CreateConnection()", span="1368-1368"];
m2_903 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="SchedulePoller.cs", label="action(sqlConnection, connection)", span="1371-1371"];
m2_902 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="SchedulePoller.cs", label="var connection = new SqlServerConnection(sqlConnection, IsolationLevel.Serializable, _providers)", span="1369-1369"];
m2_904 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", span="1366-1366"];
m2_260 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="364-364"];
m2_261 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="366-372"];
m2_262 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="364-364"];
m2_179 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="206-206"];
m2_180 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="208-212"];
m2_181 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="206-206"];
m2_77 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="105-105"];
m2_78 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="107-111"];
m2_79 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="105-105"];
m2_157 [cluster="System.DateTime.AddMinutes(double)", file="SchedulePoller.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m2_336 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="482-482"];
m2_337 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="484-488"];
m2_338 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="482-482"];
m2_66 [cluster="Unk.UseConnection", file="SchedulePoller.cs", label="Entry Unk.UseConnection", span=""];
m2_20 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SchedulePoller.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="39-39"];
m2_121 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="1386-1386"];
m2_910 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="1386-1386"];
m2_631 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="361-361"];
m2_729 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", span="1080-1080"];
m2_730 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListCount(null));\r\n            })", span="1082-1086"];
m2_731 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", span="1080-1080"];
m2_56 [cluster="System.Threading.CancellationToken.CancellationToken()", file="SchedulePoller.cs", label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0"];
m2_530 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="757-757"];
m2_531 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="759-765"];
m2_532 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="757-757"];
m2_0 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", file="SchedulePoller.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", span="17-17"];
m2_1 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", color=green, community=0, file="SchedulePoller.cs", label="_storage = new Mock<JobStorage>()", prediction=13, span="19-19"];
m2_2 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", file="SchedulePoller.cs", label="_properties = new Dictionary<string, object> {{''key'', ''value''}}", span="20-20"];
m2_3 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", file="SchedulePoller.cs", label="_cts = new CancellationTokenSource()", span="21-21"];
m2_4 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", file="SchedulePoller.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", span="17-17"];
m2_178 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="154-154"];
m2_94 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="76-76"];
m2_18 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SchedulePoller.cs", label="Assert.Equal(''connection'', exception.ParamName)", span="38-38"];
m2_19 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="33-33"];
m2_107 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", span="141-141"];
m2_108 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="143-153"];
m2_109 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", span="141-141"];
m2_612 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", span="867-867"];
m2_613 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into Hangfire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="869-871"];
m2_614 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { Key = ''set-1'', Value = ''value-1'' },\r\n                    new { Key = ''set-2'', Value = ''value-1'' },\r\n                    new { Key = ''set-1'', Value = ''value-2'' }\r\n                });\r\n\r\n                var result = connection.GetSetCount(''set-1'');\r\n\r\n                Assert.Equal(2, result);\r\n            })", span="873-885"];
m2_615 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", span="867-867"];
m2_765 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", span="1135-1135"];
m2_766 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetListTtl(''my-list'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1137-1141"];
m2_767 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", span="1135-1135"];
m2_17 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SchedulePoller.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(null, IsolationLevel.Serializable, _providers))", span="35-36"];
m2_151 [cluster="Unk.Query", file="SchedulePoller.cs", label="Entry Unk.Query", span=""];
m2_489 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="687-687"];
m2_490 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="689-691"];
m2_491 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="693-707"];
m2_492 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="687-687"];
m2_755 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", span="1125-1125"];
m2_756 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListTtl(null));\r\n            })", span="1127-1131"];
m2_757 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", span="1125-1125"];
m2_909 [cluster="System.Action<T>.Invoke(T)", file="SchedulePoller.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m2_226 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", span="267-267"];
m2_227 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues ('', '', '', getutcdate());\r\ndeclare @JobId int;\r\nset @JobId = scope_identity();\r\ninsert into HangFire.State (JobId, Name, CreatedAt)\r\nvalues (@JobId, 'old-state', getutcdate());\r\ninsert into HangFire.State (JobId, Name, Reason, Data, CreatedAt)\r\nvalues (@JobId, @name, @reason, @data, getutcdate());\r\ndeclare @StateId int;\r\nset @StateId = scope_identity();\r\nupdate HangFire.Job set StateId = @StateId;\r\nselect @JobId as Id;''", span="269-281"];
m2_228 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var data = new Dictionary<string, string>\r\n                {\r\n                    { ''Key'', ''Value'' }\r\n                };\r\n\r\n                var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id;\r\n\r\n                var result = connection.GetStateData(jobId.ToString());\r\n                Assert.NotNull(result);\r\n\r\n                Assert.Equal(''Name'', result.Name);\r\n                Assert.Equal(''Reason'', result.Reason);\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="283-300"];
m2_229 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", span="267-267"];
m2_803 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", span="1194-1194"];
m2_804 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetValueFromHash(''my-hash'', ''name'');\r\n                Assert.Null(result);\r\n            })", span="1196-1200"];
m2_805 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", span="1194-1194"];
m2_73 [cluster="Unk.Add", file="SchedulePoller.cs", label="Entry Unk.Add", span=""];
m2_85 [cluster="Unk.NotNull", file="SchedulePoller.cs", label="Entry Unk.NotNull", span=""];
m2_63 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", span="91-91"];
m2_65 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", span="91-91"];
m2_8 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", span="25-25"];
m2_676 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", span="991-991"];
m2_677 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetHashCount(null));\r\n            })", span="993-996"];
m2_678 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", span="991-991"];
m2_186 [cluster="Unk.Null", file="SchedulePoller.cs", label="Entry Unk.Null", span=""];
m2_46 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="77-77"];
m2_48 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="77-77"];
m2_519 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="730-730"];
m2_520 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues (@key, 0.0, @value)''", span="732-734"];
m2_521 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-set'', value = ''1'' },\r\n                    new { key = ''some-set'', value = ''2'' },\r\n                    new { key = ''another-set'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Contains(''1'', result);\r\n                Assert.Contains(''2'', result);\r\n            })", span="736-753"];
m2_522 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="730-730"];
m2_10 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="SchedulePoller.cs", label="Assert.Equal(''serverId'', exception.ParamName)", span="30-30"];
m2_106 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="104-104"];
m2_204 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SchedulePoller.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m2_499 [cluster="System.DateTime.AddHours(double)", file="SchedulePoller.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m2_150 [cluster="Unk.NotEmpty", file="SchedulePoller.cs", label="Entry Unk.NotEmpty", span=""];
m2_837 [cluster="Unk.Empty", file="SchedulePoller.cs", label="Entry Unk.Empty", span=""];
m2_541 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="769-769"];
m2_542 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="771-777"];
m2_543 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="769-769"];
m2_686 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", span="1000-1000"];
m2_687 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetHashCount(''my-hash'');\r\n                Assert.Equal(0, result);\r\n            })", span="1002-1006"];
m2_688 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", span="1000-1000"];
m2_702 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", span="1035-1035"];
m2_703 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetHashTtl(null));\r\n            })", span="1037-1041"];
m2_704 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", span="1035-1035"];
m2_49 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", span="1375-1375"];
m2_906 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SchedulePoller.cs", label="var connection = new SqlServerConnection( \r\n                ConnectionUtils.CreateConnection(),\r\n                IsolationLevel.Serializable,\r\n                _providers)", span="1377-1380"];
m2_907 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SchedulePoller.cs", label="action(connection)", span="1382-1382"];
m2_908 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", span="1375-1375"];
m2_510 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="244-244"];
m2_58 [cluster="Unk.Verify", file="SchedulePoller.cs", label="Entry Unk.Verify", span=""];
m2_641 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", span="923-923"];
m2_642 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetCounter(null));\r\n            })", span="925-929"];
m2_643 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", span="923-923"];
m2_819 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", span="1229-1229"];
m2_820 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetRangeFromList(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1231-1237"];
m2_821 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", span="1229-1229"];
m2_315 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="458-458"];
m2_316 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="460-466"];
m2_317 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="458-458"];
m2_42 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Dispose_DoesNotDisposeTheConnection_IfNotOwned()", file="SchedulePoller.cs", label="var connection = new SqlServerConnection(sqlConnection, IsolationLevel.Serializable, _providers, ownsConnection: false)", span="68-68"];
m2_428 [cluster="string.StartsWith(string)", file="SchedulePoller.cs", label="Entry string.StartsWith(string)", span="0-0"];
m2_487 [cluster="System.TimeSpan.FromMinutes(double)", file="SchedulePoller.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m2_838 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", span="1251-1251"];
m2_839 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], [Value])\r\nvalues (@key, @value)''", span="1253-1255"];
m2_840 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' },\r\n                    new { key = ''list-1'', value = ''4'' },\r\n                    new { key = ''list-1'', value = ''5'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetRangeFromList(''list-1'', 1, 2);\r\n                \r\n                // Assert\r\n                Assert.Equal(new [] { ''4'', ''3'' }, result);\r\n            })", span="1257-1274"];
m2_841 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", span="1251-1251"];
m2_159 [cluster="Unk.ToDictionary", file="SchedulePoller.cs", label="Entry Unk.ToDictionary", span=""];
m2_500 [cluster="System.TimeSpan.FromHours(double)", file="SchedulePoller.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m2_95 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="125-125"];
m2_96 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="127-137"];
m2_97 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="125-125"];
m2_651 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", span="933-933"];
m2_652 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetCounter(''my-counter'');\r\n                Assert.Equal(0, result);\r\n            })", span="935-939"];
m2_653 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", span="933-933"];
m2_856 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="483-483"];
m2_873 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", span="1323-1323"];
m2_874 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetSetTtl(null));\r\n            })", span="1325-1328"];
m2_875 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", span="1323-1323"];
m2_86 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", span="115-115"];
m2_87 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireDistributedLock(''1'', TimeSpan.FromSeconds(1));\r\n                Assert.NotNull(@lock);\r\n            })", span="117-121"];
m2_88 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", span="115-115"];
m2_148 [cluster="System.DateTime.DateTime(int, int, int)", file="SchedulePoller.cs", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
m2_14 [cluster="Unk.>", file="SchedulePoller.cs", label="Entry Unk.>", span=""];
m2_270 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="219-219"];
m2_595 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", span="847-847"];
m2_596 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetSetCount(null));\r\n            })", span="849-853"];
m2_597 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", span="847-847"];
m2_93 [cluster="System.TimeSpan.FromSeconds(double)", file="SchedulePoller.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m2_380 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="547-547"];
m2_381 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="549-555"];
m2_382 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="557-564"];
m2_383 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="547-547"];
m2_632 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", span="898-898"];
m2_633 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into Hangfire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="900-902"];
m2_634 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { Key = ''set-1'', Value = ''1'' },\r\n                    new { Key = ''set-1'', Value = ''2'' },\r\n                    new { Key = ''set-1'', Value = ''3'' },\r\n                    new { Key = ''set-1'', Value = ''4'' },\r\n                    new { Key = ''set-2'', Value = ''4'' },\r\n                    new { Key = ''set-1'', Value = ''5'' }\r\n                });\r\n\r\n                var result = connection.GetRangeFromSet(''set-1'', 2, 3);\r\n\r\n                Assert.Equal(new [] { ''3'', ''4'' }, result);\r\n            })", span="904-919"];
m2_635 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", span="898-898"];
m2_149 [cluster="System.TimeSpan.FromDays(double)", file="SchedulePoller.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m2_292 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="411-411"];
m2_293 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="413-416"];
m2_294 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="418-431"];
m2_295 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="411-411"];
m2_882 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="377-377"];
m2_325 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="233-233"];
m2_400 [cluster="Hangfire.Server.ServerContext.ServerContext()", file="SchedulePoller.cs", label="Entry Hangfire.Server.ServerContext.ServerContext()", span="18-18"];
m2_40 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Dispose_DoesNotDisposeTheConnection_IfNotOwned()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Dispose_DoesNotDisposeTheConnection_IfNotOwned()", span="64-64"];
m2_105 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SchedulePoller.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m2_218 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="191-191"];
m2_352 [cluster="Unk.GetJobParameter", file="SchedulePoller.cs", label="Entry Unk.GetJobParameter", span=""];
m2_461 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="657-657"];
m2_462 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues\r\n('server1', '', '2012-12-12 12:12:12'),\r\n('server2', '', '2012-12-12 12:12:12')''", span="659-663"];
m2_463 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat);\r\n\r\n                Assert.NotEqual(2012, servers[''server1''].Year);\r\n                Assert.Equal(2012, servers[''server2''].Year);\r\n            })", span="665-676"];
m2_464 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="657-657"];
m2_830 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1241-1241"];
m2_831 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetRangeFromList(''my-list'', 0, 1);\r\n                Assert.Empty(result);\r\n            })", span="1243-1247"];
m2_832 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1241-1241"];
m2_551 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", span="781-781"];
m2_552 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="783-798"];
m2_553 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", span="781-781"];
m2_187 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="216-216"];
m2_188 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="218-221"];
m2_189 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Arguments[0]);\r\n                Assert.Null(result.LoadException);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < result.CreatedAt);\r\n                Assert.True(result.CreatedAt < DateTime.UtcNow.AddMinutes(1));\r\n            })", span="223-245"];
m2_190 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="216-216"];
m2_429 [cluster="Unk.Contains", file="SchedulePoller.cs", label="Entry Unk.Contains", span=""];
m2_451 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="650-650"];
m2_452 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SchedulePoller.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="652-653"];
m2_453 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="650-650"];
m2_746 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", span="1100-1100"];
m2_747 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SchedulePoller.cs", label="string arrangeSql = @''\r\ninsert into Hangfire.List ([Key])\r\nvalues (@key)''", span="1102-1104"];
m2_748 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-2'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetListCount(''list-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="1106-1121"];
m2_749 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", span="1100-1100"];
m2_604 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="352-352"];
m2_152 [cluster="Unk.Single", file="SchedulePoller.cs", label="Entry Unk.Single", span=""];
m2_169 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="199-199"];
m2_170 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SchedulePoller.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="201-202"];
m2_171 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="199-199"];
m2_122 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="157-157"];
m2_123 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="SchedulePoller.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var createdAt = new DateTime(2012, 12, 12);\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1));\r\n\r\n                Assert.NotNull(jobId);\r\n                Assert.NotEmpty(jobId);\r\n\r\n                var sqlJob = sql.Query(''select * from HangFire.Job'').Single();\r\n                Assert.Equal(jobId, sqlJob.Id.ToString());\r\n                Assert.Equal(createdAt, sqlJob.CreatedAt);\r\n                Assert.Equal(null, (int?) sqlJob.StateId);\r\n                Assert.Equal(null, (string) sqlJob.StateName);\r\n\r\n                var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData);\r\n                invocationData.Arguments = sqlJob.Arguments;\r\n\r\n                var job = invocationData.Deserialize();\r\n                Assert.Equal(typeof(SqlServerConnectionFacts), job.Type);\r\n                Assert.Equal(''SampleMethod'', job.Method.Name);\r\n                Assert.Equal(''\''Hello\'''', job.Arguments[0]);\r\n\r\n                Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.ExpireAt);\r\n                Assert.True(sqlJob.ExpireAt < createdAt.AddDays(1).AddMinutes(1));\r\n\r\n                var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value);\r\n\r\n                Assert.Equal(''Value1'', parameters[''Key1'']);\r\n                Assert.Equal(''Value2'', parameters[''Key2'']);\r\n            })", span="159-195"];
m2_124 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="157-157"];
m2_41 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Dispose_DoesNotDisposeTheConnection_IfNotOwned()", file="SchedulePoller.cs", label="var sqlConnection = ConnectionUtils.CreateConnection()", span="66-66"];
m2_158 [cluster="Unk.True", file="SchedulePoller.cs", label="Entry Unk.True", span=""];
m2_373 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="535-535"];
m2_374 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="537-543"];
m2_375 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="535-535"];
m2_44 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Dispose_DoesNotDisposeTheConnection_IfNotOwned()", file="SchedulePoller.cs", label="Assert.Equal(ConnectionState.Open, sqlConnection.State)", span="72-72"];
m2_43 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Dispose_DoesNotDisposeTheConnection_IfNotOwned()", file="SchedulePoller.cs", label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", span=""];
m2_45 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Dispose_DoesNotDisposeTheConnection_IfNotOwned()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Dispose_DoesNotDisposeTheConnection_IfNotOwned()", span="64-64"];
m2_738 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="442-442"];
m2_605 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="SchedulePoller.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", span="857-857"];
m2_606 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="SchedulePoller.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetSetCount(''my-set'');\r\n                Assert.Equal(0, result);\r\n            })", span="859-863"];
m2_607 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="SchedulePoller.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", span="857-857"];
m2_911 [file="SchedulePoller.cs", label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", span=""];
m2_912 [file="SchedulePoller.cs", label=token, span=""];
m2_913 [file="SchedulePoller.cs", label=queues, span=""];
m2_914 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_915 [file="SchedulePoller.cs", label=token, span=""];
m2_916 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_917 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_918 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_919 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_920 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_921 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_922 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_923 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_924 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_925 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_926 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_927 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_928 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_929 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_930 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_931 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_932 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_933 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_934 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_935 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_936 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_937 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_938 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_939 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_940 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_941 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_942 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_943 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_944 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_945 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_946 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_947 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_948 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_949 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_950 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_951 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_952 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_953 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_954 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_955 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_956 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_957 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_958 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_959 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_960 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_961 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_962 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_963 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_964 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_965 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_966 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_967 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_968 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_969 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_970 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m2_971 [file="SchedulePoller.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m2_972 [file="SchedulePoller.cs", label=arrangeSql, span=""];
m4_86 [cluster="System.Collections.Generic.List<T>.List()", file="ServerWatchdog.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m4_190 [cluster="long.Parse(string)", file="ServerWatchdog.cs", label="Entry long.Parse(string)", span="0-0"];
m4_247 [cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", span="343-343"];
m4_248 [cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="ServerWatchdog.cs", label="return UseConnection(redis =>\r\n            {\r\n                var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}'', queue),\r\n                    from,\r\n                    from + perPage - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'' },\r\n                    new[] { ''EnqueuedAt'', ''State'' },\r\n                    (job, jobData, state) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", span="346-365"];
m4_249 [cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", span="343-343"];
m4_311 [cluster="Dictionary<string, string>.cstr", file="ServerWatchdog.cs", label="Entry Dictionary<string, string>.cstr", span=""];
m4_274 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", span="457-457"];
m4_329 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var i = 0", span="462-462"];
m4_338 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="i < dates.Count", span="472-472"];
m4_328 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var dates = new List<DateTime>()", span="461-461"];
m4_330 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="i < 24", span="462-462"];
m4_333 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="i++", span="462-462"];
m4_337 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var i = 0", span="472-472"];
m4_343 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="i++", span="472-472"];
m4_339 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="long value", span="474-474"];
m4_344 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="return result;", span="483-483"];
m4_327 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var endDate = DateTime.UtcNow", span="460-460"];
m4_334 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var keys = dates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="468-468"];
m4_335 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var valuesMap = redis.GetValuesMap(keys)", span="469-469"];
m4_336 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var result = new Dictionary<DateTime, long>()", span="471-471"];
m4_331 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="dates.Add(endDate)", span="464-464"];
m4_342 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="result.Add(dates[i], value)", span="480-480"];
m4_332 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="endDate = endDate.AddHours(-1)", span="465-465"];
m4_340 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="475-475"];
m4_341 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="value = 0", span="477-477"];
m4_345 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", span="457-457"];
m4_122 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", span="486-486"];
m4_367 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="i < stringDates.Count", span="505-505"];
m4_356 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var endDate = DateTime.UtcNow.Date", span="489-489"];
m4_363 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var keys = stringDates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x)).ToList()", span="500-500"];
m4_364 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var valuesMap = redis.GetValuesMap(keys)", span="502-502"];
m4_365 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var result = new Dictionary<DateTime, long>()", span="504-504"];
m4_362 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="499-499"];
m4_366 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var i = 0", span="505-505"];
m4_372 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="i++", span="505-505"];
m4_368 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="long value", span="507-507"];
m4_373 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="return result;", span="515-515"];
m4_358 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var dates = new List<DateTime>()", span="491-491"];
m4_357 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="var startDate = endDate.AddDays(-7)", span="490-490"];
m4_359 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="startDate <= endDate", span="493-493"];
m4_360 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="dates.Add(endDate)", span="495-495"];
m4_361 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="endDate = endDate.AddDays(-1)", span="496-496"];
m4_369 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="508-508"];
m4_371 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="result.Add(dates[i], value)", span="512-512"];
m4_370 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="value = 0", span="510-510"];
m4_374 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", span="486-486"];
m4_165 [cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="ServerWatchdog.cs", label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55"];
m4_257 [cluster="HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", span="368-368"];
m4_258 [cluster="HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", file="ServerWatchdog.cs", label="return UseConnection(redis =>\r\n            {\r\n                var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    from, from + perPage - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'', ''Fetched'' },\r\n                    null,\r\n                    (job, jobData, state) => new FetchedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(jobData[1])\r\n                    });\r\n            });", span="371-388"];
m4_259 [cluster="HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", span="368-368"];
m4_349 [cluster="Unk.TryParse", file="ServerWatchdog.cs", label="Entry Unk.TryParse", span=""];
m4_61 [cluster="HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="ServerWatchdog.cs", label="Entry HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23"];
m4_56 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="ServerWatchdog.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
m4_62 [cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="ServerWatchdog.cs", label="Entry HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="60-60"];
m4_164 [cluster="int.Parse(string)", file="ServerWatchdog.cs", label="Entry int.Parse(string)", span="0-0"];
m4_275 [cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", span="396-396"];
m4_276 [cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="ServerWatchdog.cs", label="return UseConnection(redis => GetHourlyTimelineStats(redis, ''failed''));", span="398-398"];
m4_277 [cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", span="396-396"];
m4_515 [cluster="Unk.GetClient", file="ServerWatchdog.cs", label="Entry Unk.GetClient", span=""];
m4_433 [cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.GetStatistics()", span="580-580"];
m4_434 [cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="ServerWatchdog.cs", label="return UseConnection(redis =>\r\n            {\r\n                var stats = new StatisticsDto();\r\n\r\n                var queues = redis.GetAllItemsFromSet(''hangfire:queues'');\r\n\r\n                using (var pipeline = redis.CreatePipeline())\r\n                {\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:servers''),\r\n                        x => stats.Servers = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:queues''),\r\n                        x => stats.Queues = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:schedule''),\r\n                        x => stats.Scheduled = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:processing''),\r\n                        x => stats.Processing = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:succeeded''),\r\n                        x => stats.Succeeded = long.Parse(x ?? ''0''));\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:failed''),\r\n                        x => stats.Failed = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:deleted''),\r\n                        x => stats.Deleted = long.Parse(x ?? ''0''));\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:recurring-jobs''),\r\n                        x => stats.Recurring = x);\r\n\r\n                    foreach (var queue in queues)\r\n                    {\r\n                        var queueName = queue;\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName)),\r\n                            x => stats.Enqueued += x);\r\n                    }\r\n\r\n                    pipeline.Flush();\r\n                }\r\n\r\n                return stats;\r\n            });", span="582-634"];
m4_435 [cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.GetStatistics()", span="580-580"];
m4_22 [cluster="HangFire.Redis.RedisMonitoringApi.FetchedCount(string)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.FetchedCount(string)", span="51-51"];
m4_23 [cluster="HangFire.Redis.RedisMonitoringApi.FetchedCount(string)", color=green, community=0, file="ServerWatchdog.cs", label="return UseConnection(redis => \r\n                redis.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue)));", prediction=14, span="53-54"];
m4_24 [cluster="HangFire.Redis.RedisMonitoringApi.FetchedCount(string)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.FetchedCount(string)", span="51-51"];
m4_55 [cluster="Unk.GetJobsWithProperties", file="ServerWatchdog.cs", label="Entry Unk.GetJobsWithProperties", span=""];
m4_57 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="ServerWatchdog.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m4_421 [cluster="KeyValuePair<string, T>.cstr", file="ServerWatchdog.cs", label="Entry KeyValuePair<string, T>.cstr", span=""];
m4_91 [cluster="JobList<ScheduledJobDto>.cstr", file="ServerWatchdog.cs", label="Entry JobList<ScheduledJobDto>.cstr", span=""];
m4_88 [cluster="Unk.CreatePipeline", file="ServerWatchdog.cs", label="Entry Unk.CreatePipeline", span=""];
m4_522 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="ServerWatchdog.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m4_516 [cluster="Unk.action", file="ServerWatchdog.cs", label="Entry Unk.action", span=""];
m4_402 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="ServerWatchdog.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m4_281 [cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.JobDetails(string)", span="401-401"];
m4_282 [cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="ServerWatchdog.cs", label="return UseConnection(redis =>\r\n            {\r\n                var job = redis.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', jobId));\r\n                if (job.Count == 0) return null;\r\n\r\n                var hiddenProperties = new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'', ''State'', ''CreatedAt'' };\r\n\r\n                var historyList = redis.GetAllItemsFromList(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId));\r\n\r\n                var history = historyList\r\n                    .Select(JobHelper.FromJson<Dictionary<string, string>>)\r\n                    .ToList();\r\n\r\n                var stateHistory = new List<StateHistoryDto>(history.Count);\r\n                foreach (var entry in history)\r\n                {\r\n                    var dto = new StateHistoryDto\r\n                    {\r\n                        StateName = entry[''State''],\r\n                        Reason = entry.ContainsKey(''Reason'') ? entry[''Reason''] : null,\r\n                        CreatedAt = JobHelper.FromStringTimestamp(entry[''CreatedAt'']),\r\n                    };\r\n\r\n                    // Each history item contains all of the information,\r\n                    // but other code should not know this. We'll remove\r\n                    // unwanted keys.\r\n                    var stateData = new Dictionary<string, string>(entry);\r\n                    stateData.Remove(''State'');\r\n                    stateData.Remove(''Reason'');\r\n                    stateData.Remove(''CreatedAt'');\r\n\r\n                    dto.Data = stateData;\r\n                    stateHistory.Add(dto);\r\n                }\r\n\r\n                // For compatibility\r\n                if (!job.ContainsKey(''Method'')) job.Add(''Method'', null);\r\n                if (!job.ContainsKey(''ParameterTypes'')) job.Add(''ParameterTypes'', null);\r\n\r\n                return new JobDetailsDto\r\n                {\r\n                    Job = TryToGetJob(job[''Type''], job[''Method''], job[''ParameterTypes''], job[''Arguments'']),\r\n                    CreatedAt =\r\n                        job.ContainsKey(''CreatedAt'')\r\n                            ? JobHelper.FromStringTimestamp(job[''CreatedAt''])\r\n                            : (DateTime?) null,\r\n                    Properties =\r\n                        job.Where(x => !hiddenProperties.Contains(x.Key)).ToDictionary(x => x.Key, x => x.Value),\r\n                    History = stateHistory\r\n                };\r\n            });", span="403-454"];
m4_283 [cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.JobDetails(string)", span="401-401"];
m4_309 [cluster="Unk.ContainsKey", file="ServerWatchdog.cs", label="Entry Unk.ContainsKey", span=""];
m4_113 [cluster="HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="ServerWatchdog.cs", label="Entry HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23"];
m4_423 [cluster="Unk.selector", file="ServerWatchdog.cs", label="Entry Unk.selector", span=""];
m4_427 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.SucceededListCount()", span="575-575"];
m4_428 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="ServerWatchdog.cs", label="return UseConnection(redis => redis.GetListCount(''hangfire:succeeded''));", span="577-577"];
m4_429 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.SucceededListCount()", span="575-575"];
m4_407 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="ServerWatchdog.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m4_454 [cluster="HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="ServerWatchdog.cs", label="Entry HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18"];
m4_85 [cluster="Unk.GetRangeWithScoresFromSortedSet", file="ServerWatchdog.cs", label="Entry Unk.GetRangeWithScoresFromSortedSet", span=""];
m4_163 [cluster="HangFire.Storage.Monitoring.ServerDto.ServerDto()", file="ServerWatchdog.cs", label="Entry HangFire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21"];
m4_307 [cluster="List<StateHistoryDto>.cstr", file="ServerWatchdog.cs", label="Entry List<StateHistoryDto>.cstr", span=""];
m4_315 [cluster="Unk.Where", file="ServerWatchdog.cs", label="Entry Unk.Where", span=""];
m4_191 [cluster="HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", span="263-263"];
m4_192 [cluster="HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", file="ServerWatchdog.cs", label="return UseConnection(redis =>\r\n            {\r\n                var deletedJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:deleted'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    deletedJobIds,\r\n                    null,\r\n                    new[] { ''DeletedAt'', ''State'' },\r\n                    (job, jobData, state) => new DeletedJobDto\r\n                    {\r\n                        Job = job,\r\n                        DeletedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InDeletedState = DeletedState.StateName.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", span="265-283"];
m4_193 [cluster="HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", span="263-263"];
m4_375 [cluster="System.DateTime.AddDays(double)", file="ServerWatchdog.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m4_222 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="518-518"];
m4_383 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="return new JobList<T>(new List<KeyValuePair<string, T>>());", span="525-525"];
m4_389 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="var id = jobId", span="536-536"];
m4_386 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="properties = properties ?? new string[0]", span="530-530"];
m4_382 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="jobIds.Count == 0", span="525-525"];
m4_384 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="var jobs = new Dictionary<string, List<string>>(jobIds.Count)", span="527-527"];
m4_385 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="var states = new Dictionary<string, List<string>>(jobIds.Count)", span="528-528"];
m4_387 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="var pipeline = redis.CreatePipeline()", span="532-532"];
m4_388 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label=jobIds, span="534-534"];
m4_391 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="stateProperties != null", span="544-544"];
m4_392 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties),\r\n                            x => { if (!states.ContainsKey(id)) states.Add(id, x); })", span="546-548"];
m4_394 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="return new JobList<T>(jobIds\r\n                .Select(x => new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    Method = TryToGetJob(\r\n                        jobs[x][properties.Length],\r\n                        jobs[x][properties.Length + 1],\r\n                        jobs[x][properties.Length + 2],\r\n                        jobs[x][properties.Length + 3]),\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                })\r\n                .Select(x => new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null)\r\n                        ? default(T)\r\n                        : selector(x.Method, x.Job, x.State)))\r\n                .ToList());", span="555-572"];
m4_390 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(''hangfire:job:{0}'', id),\r\n                            properties.Union(new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }).ToArray()),\r\n                        x => { if (!jobs.ContainsKey(id)) jobs.Add(id, x); })", span="538-542"];
m4_393 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="pipeline.Flush()", span="552-552"];
m4_395 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="518-518"];
m4_422 [cluster="Unk.TrueForAll", file="ServerWatchdog.cs", label="Entry Unk.TrueForAll", span=""];
m4_9 [cluster="HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", span="637-637"];
m4_512 [cluster="HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", file="ServerWatchdog.cs", label="var redis = _connectionPool.GetClient()", span="639-639"];
m4_513 [cluster="HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", file="ServerWatchdog.cs", label="return action(redis);", span="641-641"];
m4_514 [cluster="HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", span="637-637"];
m4_313 [cluster="HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="ServerWatchdog.cs", label="Entry HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22"];
m4_112 [cluster="KeyValuePair<string, ScheduledJobDto>.cstr", file="ServerWatchdog.cs", label="Entry KeyValuePair<string, ScheduledJobDto>.cstr", span=""];
m4_0 [cluster="HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(PooledRedisClientManager)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(PooledRedisClientManager)", span="32-32"];
m4_1 [cluster="HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(PooledRedisClientManager)", color=green, community=0, file="ServerWatchdog.cs", label="connectionPool == null", prediction=15, span="34-34"];
m4_2 [cluster="HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(PooledRedisClientManager)", color=green, community=0, file="ServerWatchdog.cs", label="throw new ArgumentNullException(''connectionPool'');", prediction=16, span="34-34"];
m4_3 [cluster="HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(PooledRedisClientManager)", color=green, community=0, file="ServerWatchdog.cs", label="_connectionPool = connectionPool", prediction=17, span="36-36"];
m4_4 [cluster="HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(PooledRedisClientManager)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(PooledRedisClientManager)", span="32-32"];
m4_201 [cluster="HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="ServerWatchdog.cs", label="Entry HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7"];
m4_497 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="616-616"];
m4_10 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="41-42"];
m4_11 [cluster="lambda expression", color=green, community=0, file="ServerWatchdog.cs", label="redis.GetSortedSetCount(''hangfire:schedule'')", prediction=18, span="42-42"];
m4_12 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="41-42"];
m4_17 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="47-48"];
m4_18 [cluster="lambda expression", color=green, community=0, file="ServerWatchdog.cs", label="redis.GetListCount(String.Format(''hangfire:queue:{0}'', queue))", prediction=19, span="48-48"];
m4_19 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="47-48"];
m4_25 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="53-54"];
m4_26 [cluster="lambda expression", color=green, community=0, file="ServerWatchdog.cs", label="redis.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue))", prediction=20, span="54-54"];
m4_27 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="53-54"];
m4_31 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="59-59"];
m4_32 [cluster="lambda expression", color=green, community=0, file="ServerWatchdog.cs", label="redis.GetSortedSetCount(''hangfire:failed'')", prediction=21, span="59-59"];
m4_33 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="59-59"];
m4_37 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="64-64"];
m4_38 [cluster="lambda expression", color=green, community=0, file="ServerWatchdog.cs", label="redis.GetSortedSetCount(''hangfire:processing'')", prediction=22, span="64-64"];
m4_39 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="64-64"];
m4_43 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="69-69"];
m4_44 [cluster="lambda expression", color=green, community=0, file="ServerWatchdog.cs", label="redis.GetListCount(''hangfire:deleted'')", prediction=23, span="69-69"];
m4_45 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="69-69"];
m4_49 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="75-94"];
m4_50 [cluster="lambda expression", color=green, community=0, file="ServerWatchdog.cs", label="var jobIds = redis.GetRangeFromSortedSet(\r\n                    ''hangfire:processing'',\r\n                    from,\r\n                    from + count - 1)", prediction=24, span="77-80"];
m4_51 [cluster="lambda expression", color=green, community=0, file="ServerWatchdog.cs", label="return new JobList<ProcessingJobDto>(GetJobsWithProperties(redis,\r\n                    jobIds,\r\n                    null,\r\n                    new[] { ''StartedAt'', ''ServerName'', ''ServerId'', ''State'' },\r\n                    (job, jobData, state) => new ProcessingJobDto\r\n                    {\r\n                        ServerId = state[2] ?? state[1],\r\n                        Job = job,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.StateName.Equals(\r\n                            state[3], StringComparison.OrdinalIgnoreCase),\r\n                    }).OrderBy(x => x.Value.StartedAt).ToList());", prediction=25, span="82-93"];
m4_52 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="75-94"];
m4_58 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="86-93"];
m4_64 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="93-93"];
m4_59 [cluster="lambda expression", color=green, community=0, file="ServerWatchdog.cs", label="new ProcessingJobDto\r\n                    {\r\n                        ServerId = state[2] ?? state[1],\r\n                        Job = job,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.StateName.Equals(\r\n                            state[3], StringComparison.OrdinalIgnoreCase),\r\n                    }", prediction=26, span="86-93"];
m4_60 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="86-93"];
m4_120 [cluster="lambda expression", file="ServerWatchdog.cs", label="GetTimelineStats(redis, ''succeeded'')", span="156-156"];
m4_127 [cluster="lambda expression", file="ServerWatchdog.cs", label="GetTimelineStats(redis, ''failed'')", span="161-161"];
m4_171 [cluster="lambda expression", file="ServerWatchdog.cs", label="return GetJobsWithProperties(\r\n                    redis,\r\n                    failedJobIds,\r\n                    null,\r\n                    new[] { ''FailedAt'', ''ExceptionType'', ''ExceptionMessage'', ''ExceptionDetails'', ''State'', ''Reason'' },\r\n                    (job, jobData, state) => new FailedJobDto\r\n                    {\r\n                        Job = job,\r\n                        Reason = state[5],\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.StateName.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="219-233"];
m4_183 [cluster="lambda expression", file="ServerWatchdog.cs", label="return GetJobsWithProperties(\r\n                    redis,\r\n                    succeededJobIds,\r\n                    null,\r\n                    new[] { ''SucceededAt'', ''PerformanceDuration'', ''Latency'', ''State'' },\r\n                    (job, jobData, state) => new SucceededJobDto\r\n                    {\r\n                        Job = job,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        TotalDuration = state[1] != null && state[2] != null\r\n                            ? (long?) long.Parse(state[1]) + (long?) long.Parse(state[2])\r\n                            : null,\r\n                        InSucceededState = SucceededState.StateName.Equals(state[3], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="246-259"];
m4_196 [cluster="lambda expression", file="ServerWatchdog.cs", label="return GetJobsWithProperties(\r\n                    redis,\r\n                    deletedJobIds,\r\n                    null,\r\n                    new[] { ''DeletedAt'', ''State'' },\r\n                    (job, jobData, state) => new DeletedJobDto\r\n                    {\r\n                        Job = job,\r\n                        DeletedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InDeletedState = DeletedState.StateName.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="272-282"];
m4_217 [cluster="lambda expression", file="ServerWatchdog.cs", label="var jobs = GetJobsWithProperties(\r\n                        redis,\r\n                        firstJobIds,\r\n                        new[] { ''State'' },\r\n                        new[] { ''EnqueuedAt'', ''State'' },\r\n                        (job, jobData, state) => new EnqueuedJobDto\r\n                        {\r\n                            Job = job,\r\n                            State = jobData[0],\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        })", span="317-328"];
m4_252 [cluster="lambda expression", file="ServerWatchdog.cs", label="return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'' },\r\n                    new[] { ''EnqueuedAt'', ''State'' },\r\n                    (job, jobData, state) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="353-364"];
m4_262 [cluster="lambda expression", file="ServerWatchdog.cs", label="return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'', ''Fetched'' },\r\n                    null,\r\n                    (job, jobData, state) => new FetchedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(jobData[1])\r\n                    });", span="377-387"];
m4_272 [cluster="lambda expression", file="ServerWatchdog.cs", label="GetHourlyTimelineStats(redis, ''succeeded'')", span="393-393"];
m4_279 [cluster="lambda expression", file="ServerWatchdog.cs", label="GetHourlyTimelineStats(redis, ''failed'')", span="398-398"];
m4_304 [cluster="lambda expression", file="ServerWatchdog.cs", label="return new JobDetailsDto\r\n                {\r\n                    Job = TryToGetJob(job[''Type''], job[''Method''], job[''ParameterTypes''], job[''Arguments'']),\r\n                    CreatedAt =\r\n                        job.ContainsKey(''CreatedAt'')\r\n                            ? JobHelper.FromStringTimestamp(job[''CreatedAt''])\r\n                            : (DateTime?) null,\r\n                    Properties =\r\n                        job.Where(x => !hiddenProperties.Contains(x.Key)).ToDictionary(x => x.Key, x => x.Value),\r\n                    History = stateHistory\r\n                };", span="443-453"];
m4_469 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetSortedSetCount(''hangfire:schedule'')", span="599-599"];
m4_475 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetSortedSetCount(''hangfire:processing'')", span="603-603"];
m4_489 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetSortedSetCount(''hangfire:failed'')", span="611-611"];
m4_501 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetSortedSetCount(''hangfire:recurring-jobs'')", span="619-619"];
m4_251 [cluster="lambda expression", file="ServerWatchdog.cs", label="var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}'', queue),\r\n                    from,\r\n                    from + perPage - 1)", span="348-351"];
m4_261 [cluster="lambda expression", file="ServerWatchdog.cs", label="var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    from, from + perPage - 1)", span="373-375"];
m4_285 [cluster="lambda expression", file="ServerWatchdog.cs", label="var job = redis.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', jobId))", span="405-405"];
m4_289 [cluster="lambda expression", file="ServerWatchdog.cs", label="var historyList = redis.GetAllItemsFromList(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId))", span="410-411"];
m4_409 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties)", span="547-547"];
m4_399 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetValuesFromHash(\r\n                            String.Format(''hangfire:job:{0}'', id),\r\n                            properties.Union(new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }).ToArray())", span="539-541"];
m4_232 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queue))", span="307-307"];
m4_238 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue))", span="311-311"];
m4_431 [cluster="lambda expression", file="ServerWatchdog.cs", label="redis.GetListCount(''hangfire:succeeded'')", span="577-577"];
m4_507 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName))", span="626-626"];
m4_74 [cluster="lambda expression", file="ServerWatchdog.cs", label="return new JobList<ScheduledJobDto>(new List<KeyValuePair<string, ScheduledJobDto>>());", span="108-108"];
m4_66 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="93-93"];
m4_65 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Value.StartedAt", span="93-93"];
m4_110 [cluster="lambda expression", file="ServerWatchdog.cs", label="new KeyValuePair<string, ScheduledJobDto>(\r\n                        job.Key,\r\n                        new ScheduledJobDto\r\n                        {\r\n                            EnqueueAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Job = TryToGetJob(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2], jobs[job.Key][3]),\r\n                            ScheduledAt =\r\n                                states[job.Key].Count > 1\r\n                                    ? JobHelper.FromNullableStringTimestamp(states[job.Key][1])\r\n                                    : null,\r\n                            InScheduledState =\r\n                                ScheduledState.StateName.Equals(states[job.Key][0], StringComparison.OrdinalIgnoreCase)\r\n                        })", span="137-149"];
m4_161 [cluster="lambda expression", file="ServerWatchdog.cs", label="new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }", span="199-206"];
m4_175 [cluster="lambda expression", file="ServerWatchdog.cs", label="new FailedJobDto\r\n                    {\r\n                        Job = job,\r\n                        Reason = state[5],\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.StateName.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="224-233"];
m4_187 [cluster="lambda expression", file="ServerWatchdog.cs", label="new SucceededJobDto\r\n                    {\r\n                        Job = job,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        TotalDuration = state[1] != null && state[2] != null\r\n                            ? (long?) long.Parse(state[1]) + (long?) long.Parse(state[2])\r\n                            : null,\r\n                        InSucceededState = SucceededState.StateName.Equals(state[3], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="251-259"];
m4_199 [cluster="lambda expression", file="ServerWatchdog.cs", label="new DeletedJobDto\r\n                    {\r\n                        Job = job,\r\n                        DeletedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InDeletedState = DeletedState.StateName.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="277-282"];
m4_244 [cluster="lambda expression", file="ServerWatchdog.cs", label="new EnqueuedJobDto\r\n                        {\r\n                            Job = job,\r\n                            State = jobData[0],\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        }", span="322-328"];
m4_255 [cluster="lambda expression", file="ServerWatchdog.cs", label="new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="358-364"];
m4_265 [cluster="lambda expression", file="ServerWatchdog.cs", label="new FetchedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(jobData[1])\r\n                    }", span="382-387"];
m4_71 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="99-151"];
m4_119 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="156-156"];
m4_121 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="156-156"];
m4_126 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="161-161"];
m4_128 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="161-161"];
m4_132 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="166-207"];
m4_169 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="212-234"];
m4_170 [cluster="lambda expression", file="ServerWatchdog.cs", label="var failedJobIds = redis.GetRangeFromSortedSetDesc(\r\n                    ''hangfire:failed'',\r\n                    from,\r\n                    from + count - 1)", span="214-217"];
m4_172 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="212-234"];
m4_174 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="224-233"];
m4_181 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="239-260"];
m4_182 [cluster="lambda expression", file="ServerWatchdog.cs", label="var succeededJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:succeeded'',\r\n                    from,\r\n                    from + count - 1)", span="241-244"];
m4_184 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="239-260"];
m4_186 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="251-259"];
m4_194 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="265-283"];
m4_195 [cluster="lambda expression", file="ServerWatchdog.cs", label="var deletedJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:deleted'',\r\n                    from,\r\n                    from + count - 1)", span="267-270"];
m4_197 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="265-283"];
m4_198 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="277-282"];
m4_205 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="288-340"];
m4_213 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1),\r\n                            x => firstJobIds = x)", span="301-304"];
m4_216 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.Flush()", span="314-314"];
m4_218 [cluster="lambda expression", file="ServerWatchdog.cs", label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = queue,\r\n                        FirstJobs = jobs,\r\n                        Length = length,\r\n                        Fetched = fetched\r\n                    })", span="330-336"];
m4_243 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="322-328"];
m4_250 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="346-365"];
m4_253 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="346-365"];
m4_254 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="358-364"];
m4_260 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="371-388"];
m4_263 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="371-388"];
m4_264 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="382-387"];
m4_271 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="393-393"];
m4_273 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="393-393"];
m4_278 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="398-398"];
m4_280 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="398-398"];
m4_284 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="403-454"];
m4_302 [cluster="lambda expression", file="ServerWatchdog.cs", label="!job.ContainsKey(''ParameterTypes'')", span="441-441"];
m4_303 [cluster="lambda expression", file="ServerWatchdog.cs", label="job.Add(''ParameterTypes'', null)", span="441-441"];
m4_288 [cluster="lambda expression", file="ServerWatchdog.cs", label="var hiddenProperties = new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'', ''State'', ''CreatedAt'' }", span="408-408"];
m4_291 [cluster="lambda expression", file="ServerWatchdog.cs", label="var stateHistory = new List<StateHistoryDto>(history.Count)", span="417-417"];
m4_305 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="403-454"];
m4_317 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="451-451"];
m4_321 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="451-451"];
m4_324 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="451-451"];
m4_430 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="577-577"];
m4_436 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="582-634"];
m4_468 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="599-599"];
m4_470 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="599-599"];
m4_474 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="603-603"];
m4_476 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="603-603"];
m4_488 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="611-611"];
m4_490 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="611-611"];
m4_500 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="619-619"];
m4_502 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="619-619"];
m4_286 [cluster="lambda expression", file="ServerWatchdog.cs", label="job.Count == 0", span="406-406"];
m4_300 [cluster="lambda expression", file="ServerWatchdog.cs", label="!job.ContainsKey(''Method'')", span="440-440"];
m4_301 [cluster="lambda expression", file="ServerWatchdog.cs", label="job.Add(''Method'', null)", span="440-440"];
m4_290 [cluster="lambda expression", file="ServerWatchdog.cs", label="var history = historyList\r\n                    .Select(JobHelper.FromJson<Dictionary<string, string>>)\r\n                    .ToList()", span="413-415"];
m4_408 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="547-547"];
m4_410 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="547-547"];
m4_398 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="539-541"];
m4_400 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="539-541"];
m4_208 [cluster="lambda expression", file="ServerWatchdog.cs", label=queues, span="293-293"];
m4_231 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="307-307"];
m4_233 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="307-307"];
m4_237 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="311-311"];
m4_239 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="311-311"];
m4_432 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="577-577"];
m4_449 [cluster="lambda expression", file="ServerWatchdog.cs", label="var queueName = queue", span="624-624"];
m4_506 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="626-626"];
m4_508 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="626-626"];
m4_73 [cluster="lambda expression", file="ServerWatchdog.cs", label="scheduledJobs.Count == 0", span="106-106"];
m4_84 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="99-151"];
m4_75 [cluster="lambda expression", file="ServerWatchdog.cs", label="var jobs = new Dictionary<string, List<string>>()", span="111-111"];
m4_76 [cluster="lambda expression", file="ServerWatchdog.cs", label="var states = new Dictionary<string, List<String>>()", span="112-112"];
m4_109 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="137-149"];
m4_111 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="137-149"];
m4_136 [cluster="lambda expression", file="ServerWatchdog.cs", label="var servers = new Dictionary<string, List<string>>()", span="175-175"];
m4_137 [cluster="lambda expression", file="ServerWatchdog.cs", label="var queues = new Dictionary<string, List<string>>()", span="176-176"];
m4_160 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="199-206"];
m4_162 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="199-206"];
m4_176 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="224-233"];
m4_188 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="251-259"];
m4_200 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="277-282"];
m4_245 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="322-328"];
m4_256 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="358-364"];
m4_266 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="382-387"];
m4_72 [cluster="lambda expression", file="ServerWatchdog.cs", label="var scheduledJobs = redis.GetRangeWithScoresFromSortedSet(\r\n                    ''hangfire:schedule'',\r\n                    from,\r\n                    from + count - 1)", span="101-104"];
m4_77 [cluster="lambda expression", file="ServerWatchdog.cs", label="var pipeline = redis.CreatePipeline()", span="114-114"];
m4_380 [cluster="lambda expression", file="ServerWatchdog.cs", label="String.Format(''hangfire:stats:{0}:{1}'', type, x)", span="500-500"];
m4_145 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="166-207"];
m4_133 [cluster="lambda expression", file="ServerWatchdog.cs", label="var serverNames = redis.GetAllItemsFromSet(''hangfire:servers'')", span="168-168"];
m4_138 [cluster="lambda expression", file="ServerWatchdog.cs", label="var pipeline = redis.CreatePipeline()", span="178-178"];
m4_416 [cluster="lambda expression", file="ServerWatchdog.cs", label="new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    Method = TryToGetJob(\r\n                        jobs[x][properties.Length],\r\n                        jobs[x][properties.Length + 1],\r\n                        jobs[x][properties.Length + 2],\r\n                        jobs[x][properties.Length + 3]),\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                }", span="556-566"];
m4_220 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="288-340"];
m4_206 [cluster="lambda expression", file="ServerWatchdog.cs", label="var queues = redis.GetAllItemsFromSet(''hangfire:queues'')", span="290-290"];
m4_212 [cluster="lambda expression", file="ServerWatchdog.cs", label="var pipeline = redis.CreatePipeline()", span="299-299"];
m4_419 [cluster="lambda expression", file="ServerWatchdog.cs", label="new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null)\r\n                        ? default(T)\r\n                        : selector(x.Method, x.Job, x.State))", span="567-571"];
m4_214 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queue)),\r\n                            x => length = x)", span="306-308"];
m4_225 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="302-303"];
m4_228 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="304-304"];
m4_215 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue)),\r\n                            x => fetched = x)", span="310-312"];
m4_207 [cluster="lambda expression", file="ServerWatchdog.cs", label="var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count)", span="291-291"];
m4_352 [cluster="lambda expression", file="ServerWatchdog.cs", label="String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="468-468"];
m4_318 [cluster="lambda expression", file="ServerWatchdog.cs", label="!hiddenProperties.Contains(x.Key)", span="451-451"];
m4_292 [cluster="lambda expression", file="ServerWatchdog.cs", label=history, span="418-418"];
m4_299 [cluster="lambda expression", file="ServerWatchdog.cs", label="stateHistory.Add(dto)", span="436-436"];
m4_287 [cluster="lambda expression", file="ServerWatchdog.cs", label="return null;", span="406-406"];
m4_293 [cluster="lambda expression", file="ServerWatchdog.cs", label="var dto = new StateHistoryDto\r\n                    {\r\n                        StateName = entry[''State''],\r\n                        Reason = entry.ContainsKey(''Reason'') ? entry[''Reason''] : null,\r\n                        CreatedAt = JobHelper.FromStringTimestamp(entry[''CreatedAt'']),\r\n                    }", span="420-425"];
m4_319 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="451-451"];
m4_323 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="451-451"];
m4_322 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Key", span="451-451"];
m4_326 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="451-451"];
m4_325 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Value", span="451-451"];
m4_453 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="582-634"];
m4_437 [cluster="lambda expression", file="ServerWatchdog.cs", label="var stats = new StatisticsDto()", span="584-584"];
m4_438 [cluster="lambda expression", file="ServerWatchdog.cs", label="var queues = redis.GetAllItemsFromSet(''hangfire:queues'')", span="586-586"];
m4_439 [cluster="lambda expression", file="ServerWatchdog.cs", label="var pipeline = redis.CreatePipeline()", span="588-588"];
m4_442 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:schedule''),\r\n                        x => stats.Scheduled = x)", span="598-600"];
m4_443 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:processing''),\r\n                        x => stats.Processing = x)", span="602-604"];
m4_445 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:failed''),\r\n                        x => stats.Failed = x)", span="610-612"];
m4_447 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:recurring-jobs''),\r\n                        x => stats.Recurring = x)", span="618-620"];
m4_226 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1)", span="302-303"];
m4_154 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name))", span="191-192"];
m4_404 [cluster="lambda expression", file="ServerWatchdog.cs", label="!jobs.ContainsKey(id)", span="542-542"];
m4_405 [cluster="lambda expression", file="ServerWatchdog.cs", label="jobs.Add(id, x)", span="542-542"];
m4_412 [cluster="lambda expression", file="ServerWatchdog.cs", label="!states.ContainsKey(id)", span="548-548"];
m4_413 [cluster="lambda expression", file="ServerWatchdog.cs", label="states.Add(id, x)", span="548-548"];
m4_95 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' })", span="121-123"];
m4_104 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                new[] { ''State'', ''ScheduledAt'' })", span="127-129"];
m4_148 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat'')", span="185-187"];
m4_209 [cluster="lambda expression", file="ServerWatchdog.cs", label="IList<string> firstJobIds = null", span="295-295"];
m4_219 [cluster="lambda expression", file="ServerWatchdog.cs", label="return result;", span="339-339"];
m4_448 [cluster="lambda expression", file="ServerWatchdog.cs", label=queues, span="622-622"];
m4_450 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName)),\r\n                            x => stats.Enqueued += x)", span="625-627"];
m4_83 [cluster="lambda expression", file="ServerWatchdog.cs", label="return new JobList<ScheduledJobDto>(scheduledJobs\r\n                    .Select(job => new KeyValuePair<string, ScheduledJobDto>(\r\n                        job.Key,\r\n                        new ScheduledJobDto\r\n                        {\r\n                            EnqueueAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Job = TryToGetJob(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2], jobs[job.Key][3]),\r\n                            ScheduledAt =\r\n                                states[job.Key].Count > 1\r\n                                    ? JobHelper.FromNullableStringTimestamp(states[job.Key][1])\r\n                                    : null,\r\n                            InScheduledState =\r\n                                ScheduledState.StateName.Equals(states[job.Key][0], StringComparison.OrdinalIgnoreCase)\r\n                        }))\r\n                    .ToList());", span="136-150"];
m4_135 [cluster="lambda expression", file="ServerWatchdog.cs", label="return new List<ServerDto>();", span="172-172"];
m4_100 [cluster="lambda expression", file="ServerWatchdog.cs", label="jobs.Add(job.Key, x)", span="124-124"];
m4_107 [cluster="lambda expression", file="ServerWatchdog.cs", label="states.Add(job.Key, x)", span="130-130"];
m4_80 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }),\r\n                            x => jobs.Add(job.Key, x))", span="120-124"];
m4_81 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                new[] { ''State'', ''ScheduledAt'' }),\r\n                            x => states.Add(job.Key, x))", span="126-130"];
m4_151 [cluster="lambda expression", file="ServerWatchdog.cs", label="servers.Add(name, x)", span="188-188"];
m4_158 [cluster="lambda expression", file="ServerWatchdog.cs", label="queues.Add(name, x)", span="193-193"];
m4_134 [cluster="lambda expression", file="ServerWatchdog.cs", label="serverNames.Count == 0", span="170-170"];
m4_141 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat''),\r\n                            x => servers.Add(name, x))", span="184-188"];
m4_144 [cluster="lambda expression", file="ServerWatchdog.cs", label="return serverNames.Select(x => new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }).ToList();", span="199-206"];
m4_142 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name)),\r\n                            x => queues.Add(name, x))", span="190-193"];
m4_78 [cluster="lambda expression", file="ServerWatchdog.cs", label=scheduledJobs, span="116-116"];
m4_82 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.Flush()", span="133-133"];
m4_379 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="500-500"];
m4_381 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="500-500"];
m4_139 [cluster="lambda expression", file="ServerWatchdog.cs", label=serverNames, span="180-180"];
m4_143 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.Flush()", span="196-196"];
m4_415 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="556-566"];
m4_417 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="556-566"];
m4_376 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="499-499"];
m4_211 [cluster="lambda expression", file="ServerWatchdog.cs", label="long fetched = 0", span="297-297"];
m4_411 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="548-548"];
m4_418 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="567-571"];
m4_420 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="567-571"];
m4_424 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="569-569"];
m4_234 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="308-308"];
m4_440 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:servers''),\r\n                        x => stats.Servers = x)", span="590-592"];
m4_441 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:queues''),\r\n                        x => stats.Queues = x)", span="594-596"];
m4_444 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:succeeded''),\r\n                        x => stats.Succeeded = long.Parse(x ?? ''0''))", span="606-608"];
m4_446 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:deleted''),\r\n                        x => stats.Deleted = long.Parse(x ?? ''0''))", span="614-616"];
m4_227 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="302-303"];
m4_230 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="304-304"];
m4_229 [cluster="lambda expression", file="ServerWatchdog.cs", label="firstJobIds = x", span="304-304"];
m4_240 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="312-312"];
m4_451 [cluster="lambda expression", file="ServerWatchdog.cs", label="pipeline.Flush()", span="630-630"];
m4_351 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="468-468"];
m4_353 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="468-468"];
m4_294 [cluster="lambda expression", file="ServerWatchdog.cs", label="var stateData = new Dictionary<string, string>(entry)", span="430-430"];
m4_298 [cluster="lambda expression", file="ServerWatchdog.cs", label="dto.Data = stateData", span="435-435"];
m4_452 [cluster="lambda expression", file="ServerWatchdog.cs", label="return stats;", span="633-633"];
m4_460 [cluster="lambda expression", file="ServerWatchdog.cs", label="stats.Servers = x", span="592-592"];
m4_466 [cluster="lambda expression", file="ServerWatchdog.cs", label="stats.Queues = x", span="596-596"];
m4_472 [cluster="lambda expression", file="ServerWatchdog.cs", label="stats.Scheduled = x", span="600-600"];
m4_478 [cluster="lambda expression", file="ServerWatchdog.cs", label="stats.Processing = x", span="604-604"];
m4_485 [cluster="lambda expression", file="ServerWatchdog.cs", label="stats.Succeeded = long.Parse(x ?? ''0'')", span="608-608"];
m4_492 [cluster="lambda expression", file="ServerWatchdog.cs", label="stats.Failed = x", span="612-612"];
m4_498 [cluster="lambda expression", file="ServerWatchdog.cs", label="stats.Deleted = long.Parse(x ?? ''0'')", span="616-616"];
m4_504 [cluster="lambda expression", file="ServerWatchdog.cs", label="stats.Recurring = x", span="620-620"];
m4_510 [cluster="lambda expression", file="ServerWatchdog.cs", label="stats.Enqueued += x", span="627-627"];
m4_471 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="600-600"];
m4_477 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="604-604"];
m4_491 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="612-612"];
m4_503 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="620-620"];
m4_140 [cluster="lambda expression", file="ServerWatchdog.cs", label="var name = serverName", span="182-182"];
m4_153 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="191-192"];
m4_155 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="191-192"];
m4_403 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="542-542"];
m4_406 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="542-542"];
m4_414 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="548-548"];
m4_79 [cluster="lambda expression", file="ServerWatchdog.cs", label="var job = scheduledJob", span="118-118"];
m4_94 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="121-123"];
m4_96 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="121-123"];
m4_103 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="127-129"];
m4_105 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="127-129"];
m4_147 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="185-187"];
m4_149 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="185-187"];
m4_210 [cluster="lambda expression", file="ServerWatchdog.cs", label="long length = 0", span="296-296"];
m4_509 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="627-627"];
m4_99 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="124-124"];
m4_101 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="124-124"];
m4_106 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="130-130"];
m4_108 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="130-130"];
m4_150 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="188-188"];
m4_152 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="188-188"];
m4_157 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="193-193"];
m4_159 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="193-193"];
m4_378 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="499-499"];
m4_377 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.ToString(''yyyy-MM-dd'')", span="499-499"];
m4_426 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="569-569"];
m4_425 [cluster="lambda expression", file="ServerWatchdog.cs", label="y == null", span="569-569"];
m4_236 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="308-308"];
m4_235 [cluster="lambda expression", file="ServerWatchdog.cs", label="length = x", span="308-308"];
m4_455 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="591-591"];
m4_459 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="592-592"];
m4_462 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="595-595"];
m4_465 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="596-596"];
m4_480 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="607-607"];
m4_484 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="608-608"];
m4_494 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="615-615"];
m4_242 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="312-312"];
m4_241 [cluster="lambda expression", file="ServerWatchdog.cs", label="fetched = x", span="312-312"];
m4_295 [cluster="lambda expression", file="ServerWatchdog.cs", label="stateData.Remove(''State'')", span="431-431"];
m4_296 [cluster="lambda expression", file="ServerWatchdog.cs", label="stateData.Remove(''Reason'')", span="432-432"];
m4_297 [cluster="lambda expression", file="ServerWatchdog.cs", label="stateData.Remove(''CreatedAt'')", span="433-433"];
m4_461 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="592-592"];
m4_467 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="596-596"];
m4_473 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="600-600"];
m4_479 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="604-604"];
m4_486 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="608-608"];
m4_493 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="612-612"];
m4_499 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="616-616"];
m4_505 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="620-620"];
m4_511 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="627-627"];
m4_457 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="591-591"];
m4_456 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetSetCount(''hangfire:servers'')", span="591-591"];
m4_464 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="595-595"];
m4_463 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetSetCount(''hangfire:queues'')", span="595-595"];
m4_482 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="607-607"];
m4_481 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetValue(''hangfire:stats:succeeded'')", span="607-607"];
m4_495 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.GetValue(''hangfire:stats:deleted'')", span="615-615"];
m4_496 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="615-615"];
m4_53 [cluster="Unk.GetRangeFromSortedSet", file="ServerWatchdog.cs", label="Entry Unk.GetRangeFromSortedSet", span=""];
m4_223 [cluster="HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="ServerWatchdog.cs", label="Entry HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18"];
m4_224 [cluster="System.Collections.Generic.List<T>.Add(T)", file="ServerWatchdog.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m4_93 [cluster="Unk.ToList", file="ServerWatchdog.cs", label="Entry Unk.ToList", span=""];
m4_97 [cluster="Unk.Format", file="ServerWatchdog.cs", label="Entry Unk.Format", span=""];
m4_89 [cluster="Unk.QueueCommand", file="ServerWatchdog.cs", label="Entry Unk.QueueCommand", span=""];
m4_115 [cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", span="645-645"];
m4_517 [cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="ServerWatchdog.cs", label="return new InvocationData(\r\n                    type,\r\n                    method,\r\n                    parameterTypes,\r\n                    arguments).Deserialize();", span="650-654"];
m4_519 [cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="ServerWatchdog.cs", label="return null;", span="658-658"];
m4_518 [cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="ServerWatchdog.cs", label=Exception, span="656-656"];
m4_520 [cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", span="645-645"];
m4_166 [cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", span="210-210"];
m4_167 [cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="ServerWatchdog.cs", label="return UseConnection(redis =>\r\n            {\r\n                var failedJobIds = redis.GetRangeFromSortedSetDesc(\r\n                    ''hangfire:failed'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    failedJobIds,\r\n                    null,\r\n                    new[] { ''FailedAt'', ''ExceptionType'', ''ExceptionMessage'', ''ExceptionDetails'', ''State'', ''Reason'' },\r\n                    (job, jobData, state) => new FailedJobDto\r\n                    {\r\n                        Job = job,\r\n                        Reason = state[5],\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.StateName.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", span="212-234"];
m4_168 [cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", span="210-210"];
m4_267 [cluster="HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", file="ServerWatchdog.cs", label="Entry HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21"];
m4_354 [cluster="System.DateTime.ToString(string)", file="ServerWatchdog.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m4_70 [cluster="Unk.UseConnection", file="ServerWatchdog.cs", label="Entry Unk.UseConnection", span=""];
m4_221 [cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="ServerWatchdog.cs", label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span=""];
m4_348 [cluster="Unk.ElementAt", file="ServerWatchdog.cs", label="Entry Unk.ElementAt", span=""];
m4_129 [cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.Servers()", span="164-164"];
m4_130 [cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="ServerWatchdog.cs", label="return UseConnection(redis =>\r\n            {\r\n                var serverNames = redis.GetAllItemsFromSet(''hangfire:servers'');\r\n\r\n                if (serverNames.Count == 0)\r\n                {\r\n                    return new List<ServerDto>();\r\n                }\r\n\r\n                var servers = new Dictionary<string, List<string>>();\r\n                var queues = new Dictionary<string, List<string>>();\r\n\r\n                using (var pipeline = redis.CreatePipeline())\r\n                {\r\n                    foreach (var serverName in serverNames)\r\n                    {\r\n                        var name = serverName;\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat''),\r\n                            x => servers.Add(name, x));\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name)),\r\n                            x => queues.Add(name, x));\r\n                    }\r\n\r\n                    pipeline.Flush();\r\n                }\r\n\r\n                return serverNames.Select(x => new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }).ToList();\r\n            });", span="166-207"];
m4_131 [cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.Servers()", span="164-164"];
m4_40 [cluster="HangFire.Redis.RedisMonitoringApi.DeletedListCount()", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.DeletedListCount()", span="67-67"];
m4_41 [cluster="HangFire.Redis.RedisMonitoringApi.DeletedListCount()", color=green, community=0, file="ServerWatchdog.cs", label="return UseConnection(redis => redis.GetListCount(''hangfire:deleted''));", prediction=14, span="69-69"];
m4_42 [cluster="HangFire.Redis.RedisMonitoringApi.DeletedListCount()", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.DeletedListCount()", span="67-67"];
m4_185 [cluster="Unk.GetRangeFromList", file="ServerWatchdog.cs", label="Entry Unk.GetRangeFromList", span=""];
m4_178 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", span="237-237"];
m4_179 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="ServerWatchdog.cs", label="return UseConnection(redis =>\r\n            {\r\n                var succeededJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:succeeded'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    succeededJobIds,\r\n                    null,\r\n                    new[] { ''SucceededAt'', ''PerformanceDuration'', ''Latency'', ''State'' },\r\n                    (job, jobData, state) => new SucceededJobDto\r\n                    {\r\n                        Job = job,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        TotalDuration = state[1] != null && state[2] != null\r\n                            ? (long?) long.Parse(state[1]) + (long?) long.Parse(state[2])\r\n                            : null,\r\n                        InSucceededState = SucceededState.StateName.Equals(state[3], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", span="239-260"];
m4_180 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", span="237-237"];
m4_116 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", span="154-154"];
m4_117 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="ServerWatchdog.cs", label="return UseConnection(redis => GetTimelineStats(redis, ''succeeded''));", span="156-156"];
m4_118 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", span="154-154"];
m4_90 [cluster="Unk.Flush", file="ServerWatchdog.cs", label="Entry Unk.Flush", span=""];
m4_487 [cluster="Unk.Parse", file="ServerWatchdog.cs", label="Entry Unk.Parse", span=""];
m4_102 [cluster="Unk.Add", file="ServerWatchdog.cs", label="Entry Unk.Add", span=""];
m4_63 [cluster="string.Equals(string, System.StringComparison)", file="ServerWatchdog.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m4_28 [cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.FailedCount()", span="57-57"];
m4_29 [cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", color=green, community=0, file="ServerWatchdog.cs", label="return UseConnection(redis => redis.GetSortedSetCount(''hangfire:failed''));", prediction=14, span="59-59"];
m4_30 [cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.FailedCount()", span="57-57"];
m4_346 [cluster="System.DateTime.AddHours(double)", file="ServerWatchdog.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m4_46 [cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", span="72-72"];
m4_47 [cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", color=green, community=0, file="ServerWatchdog.cs", label="return UseConnection(redis =>\r\n            {\r\n                var jobIds = redis.GetRangeFromSortedSet(\r\n                    ''hangfire:processing'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return new JobList<ProcessingJobDto>(GetJobsWithProperties(redis,\r\n                    jobIds,\r\n                    null,\r\n                    new[] { ''StartedAt'', ''ServerName'', ''ServerId'', ''State'' },\r\n                    (job, jobData, state) => new ProcessingJobDto\r\n                    {\r\n                        ServerId = state[2] ?? state[1],\r\n                        Job = job,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.StateName.Equals(\r\n                            state[3], StringComparison.OrdinalIgnoreCase),\r\n                    }).OrderBy(x => x.Value.StartedAt).ToList());\r\n            });", prediction=29, span="75-94"];
m4_48 [cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", span="72-72"];
m4_13 [cluster="Unk.GetSortedSetCount", file="ServerWatchdog.cs", label="Entry Unk.GetSortedSetCount", span=""];
m4_189 [cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="ServerWatchdog.cs", label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23"];
m4_34 [cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.ProcessingCount()", span="62-62"];
m4_35 [cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", color=green, community=0, file="ServerWatchdog.cs", label="return UseConnection(redis => redis.GetSortedSetCount(''hangfire:processing''));", prediction=14, span="64-64"];
m4_36 [cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.ProcessingCount()", span="62-62"];
m4_401 [cluster="System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="ServerWatchdog.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m4_312 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", file="ServerWatchdog.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0"];
m4_397 [cluster="JobList<T>.cstr", file="ServerWatchdog.cs", label="Entry JobList<T>.cstr", span=""];
m4_350 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="ServerWatchdog.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m4_521 [cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", file="ServerWatchdog.cs", label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24"];
m4_268 [cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", span="391-391"];
m4_269 [cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="ServerWatchdog.cs", label="return UseConnection(redis => GetHourlyTimelineStats(redis, ''succeeded''));", span="393-393"];
m4_270 [cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", span="391-391"];
m4_355 [cluster="string.Format(string, object, object)", file="ServerWatchdog.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m4_306 [cluster="Unk.GetAllEntriesFromHash", file="ServerWatchdog.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m4_316 [cluster="Unk.ToDictionary", file="ServerWatchdog.cs", label="Entry Unk.ToDictionary", span=""];
m4_310 [cluster="Unk.FromStringTimestamp", file="ServerWatchdog.cs", label="Entry Unk.FromStringTimestamp", span=""];
m4_396 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", file="ServerWatchdog.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", span="0-0"];
m4_458 [cluster="Unk.GetSetCount", file="ServerWatchdog.cs", label="Entry Unk.GetSetCount", span=""];
m4_114 [cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="ServerWatchdog.cs", label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="45-45"];
m4_20 [cluster="string.Format(string, object)", file="ServerWatchdog.cs", label="Entry string.Format(string, object)", span="0-0"];
m4_123 [cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", span="159-159"];
m4_124 [cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="ServerWatchdog.cs", label="return UseConnection(redis => GetTimelineStats(redis, ''failed''));", span="161-161"];
m4_125 [cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", span="159-159"];
m4_246 [cluster="HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="ServerWatchdog.cs", label="Entry HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23"];
m4_177 [cluster="HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="ServerWatchdog.cs", label="Entry HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23"];
m4_202 [cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.Queues()", span="286-286"];
m4_203 [cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="ServerWatchdog.cs", label="return UseConnection(redis =>\r\n            {\r\n                var queues = redis.GetAllItemsFromSet(''hangfire:queues'');\r\n                var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count);\r\n\r\n                foreach (var queue in queues)\r\n                {\r\n                    IList<string> firstJobIds = null;\r\n                    long length = 0;\r\n                    long fetched = 0;\r\n\r\n                    using (var pipeline = redis.CreatePipeline())\r\n                    {\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1),\r\n                            x => firstJobIds = x);\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queue)),\r\n                            x => length = x);\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue)),\r\n                            x => fetched = x);\r\n\r\n                        pipeline.Flush();\r\n                    }\r\n\r\n                    var jobs = GetJobsWithProperties(\r\n                        redis,\r\n                        firstJobIds,\r\n                        new[] { ''State'' },\r\n                        new[] { ''EnqueuedAt'', ''State'' },\r\n                        (job, jobData, state) => new EnqueuedJobDto\r\n                        {\r\n                            Job = job,\r\n                            State = jobData[0],\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        });\r\n\r\n                    result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = queue,\r\n                        FirstJobs = jobs,\r\n                        Length = length,\r\n                        Fetched = fetched\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="288-340"];
m4_204 [cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.Queues()", span="286-286"];
m4_314 [cluster="Unk.TryToGetJob", file="ServerWatchdog.cs", label="Entry Unk.TryToGetJob", span=""];
m4_21 [cluster="Unk.GetListCount", file="ServerWatchdog.cs", label="Entry Unk.GetListCount", span=""];
m4_67 [cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", span="97-97"];
m4_68 [cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="ServerWatchdog.cs", label="return UseConnection(redis =>\r\n            {\r\n                var scheduledJobs = redis.GetRangeWithScoresFromSortedSet(\r\n                    ''hangfire:schedule'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                if (scheduledJobs.Count == 0)\r\n                {\r\n                    return new JobList<ScheduledJobDto>(new List<KeyValuePair<string, ScheduledJobDto>>());\r\n                }\r\n\r\n                var jobs = new Dictionary<string, List<string>>();\r\n                var states = new Dictionary<string, List<String>>();\r\n\r\n                using (var pipeline = redis.CreatePipeline())\r\n                {\r\n                    foreach (var scheduledJob in scheduledJobs)\r\n                    {\r\n                        var job = scheduledJob;\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }),\r\n                            x => jobs.Add(job.Key, x));\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                new[] { ''State'', ''ScheduledAt'' }),\r\n                            x => states.Add(job.Key, x));\r\n                    }\r\n\r\n                    pipeline.Flush();\r\n                }\r\n\r\n                return new JobList<ScheduledJobDto>(scheduledJobs\r\n                    .Select(job => new KeyValuePair<string, ScheduledJobDto>(\r\n                        job.Key,\r\n                        new ScheduledJobDto\r\n                        {\r\n                            EnqueueAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Job = TryToGetJob(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2], jobs[job.Key][3]),\r\n                            ScheduledAt =\r\n                                states[job.Key].Count > 1\r\n                                    ? JobHelper.FromNullableStringTimestamp(states[job.Key][1])\r\n                                    : null,\r\n                            InScheduledState =\r\n                                ScheduledState.StateName.Equals(states[job.Key][0], StringComparison.OrdinalIgnoreCase)\r\n                        }))\r\n                    .ToList());\r\n            });", span="99-151"];
m4_69 [cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", span="97-97"];
m4_87 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ServerWatchdog.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m4_54 [cluster="HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="ServerWatchdog.cs", label="Entry HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22"];
m4_14 [cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", span="45-45"];
m4_15 [cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", color=green, community=0, file="ServerWatchdog.cs", label="return UseConnection(redis => \r\n                redis.GetListCount(String.Format(''hangfire:queue:{0}'', queue)));", prediction=14, span="47-48"];
m4_16 [cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", span="45-45"];
m4_347 [cluster="Unk.GetValuesMap", file="ServerWatchdog.cs", label="Entry Unk.GetValuesMap", span=""];
m4_6 [cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="ServerWatchdog.cs", label="Entry HangFire.Redis.RedisMonitoringApi.ScheduledCount()", span="39-39"];
m4_7 [cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", color=green, community=0, file="ServerWatchdog.cs", label="return UseConnection(redis => \r\n                redis.GetSortedSetCount(''hangfire:schedule''));", prediction=14, span="41-42"];
m4_8 [cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="ServerWatchdog.cs", label="Exit HangFire.Redis.RedisMonitoringApi.ScheduledCount()", span="39-39"];
m4_156 [cluster="Unk.GetAllItemsFromList", file="ServerWatchdog.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m4_320 [cluster="Unk.Contains", file="ServerWatchdog.cs", label="Entry Unk.Contains", span=""];
m4_92 [cluster="Unk.Select", file="ServerWatchdog.cs", label="Entry Unk.Select", span=""];
m4_308 [cluster="HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", file="ServerWatchdog.cs", label="Entry HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21"];
m4_146 [cluster="Unk.GetAllItemsFromSet", file="ServerWatchdog.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m4_173 [cluster="Unk.GetRangeFromSortedSetDesc", file="ServerWatchdog.cs", label="Entry Unk.GetRangeFromSortedSetDesc", span=""];
m4_483 [cluster="Unk.GetValue", file="ServerWatchdog.cs", label="Entry Unk.GetValue", span=""];
m4_98 [cluster="Unk.GetValuesFromHash", file="ServerWatchdog.cs", label="Entry Unk.GetValuesFromHash", span=""];
m4_523 [file="ServerWatchdog.cs", label="HangFire.Redis.RedisMonitoringApi", span=""];
m4_524 [file="ServerWatchdog.cs", label=string, span=""];
m4_525 [file="ServerWatchdog.cs", label=string, span=""];
m4_526 [file="ServerWatchdog.cs", label=int, span=""];
m4_527 [file="ServerWatchdog.cs", label=int, span=""];
m4_543 [file="ServerWatchdog.cs", label=string, span=""];
m4_544 [file="ServerWatchdog.cs", label=int, span=""];
m4_545 [file="ServerWatchdog.cs", label=int, span=""];
m4_546 [file="ServerWatchdog.cs", label=string, span=""];
m4_547 [file="ServerWatchdog.cs", label=int, span=""];
m4_548 [file="ServerWatchdog.cs", label=int, span=""];
m4_549 [file="ServerWatchdog.cs", label=string, span=""];
m4_554 [file="ServerWatchdog.cs", label=id, span=""];
m4_556 [file="ServerWatchdog.cs", label="string[]", span=""];
m4_553 [file="ServerWatchdog.cs", label="string[]", span=""];
m4_542 [file="ServerWatchdog.cs", label=queue, span=""];
m4_560 [file="ServerWatchdog.cs", label=queueName, span=""];
m4_531 [file="ServerWatchdog.cs", label=jobs, span=""];
m4_532 [file="ServerWatchdog.cs", label=states, span=""];
m4_534 [file="ServerWatchdog.cs", label=servers, span=""];
m4_535 [file="ServerWatchdog.cs", label=queues, span=""];
m4_536 [file="ServerWatchdog.cs", label=int, span=""];
m4_537 [file="ServerWatchdog.cs", label=int, span=""];
m4_538 [file="ServerWatchdog.cs", label=int, span=""];
m4_539 [file="ServerWatchdog.cs", label=int, span=""];
m4_540 [file="ServerWatchdog.cs", label=int, span=""];
m4_541 [file="ServerWatchdog.cs", label=int, span=""];
m4_528 [file="ServerWatchdog.cs", label=int, span=""];
m4_529 [file="ServerWatchdog.cs", label=int, span=""];
m4_552 [file="ServerWatchdog.cs", label=string, span=""];
m4_555 [file="ServerWatchdog.cs", label=jobs, span=""];
m4_557 [file="ServerWatchdog.cs", label=states, span=""];
m4_558 [file="ServerWatchdog.cs", label="System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", span=""];
m4_551 [file="ServerWatchdog.cs", label=string, span=""];
m4_550 [file="ServerWatchdog.cs", label=hiddenProperties, span=""];
m4_533 [file="ServerWatchdog.cs", label=name, span=""];
m4_530 [file="ServerWatchdog.cs", label=job, span=""];
m4_559 [file="ServerWatchdog.cs", label=stats, span=""];
m5_15 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="SucceededState.cs", label="transaction.QueueCommand(x => x.IncrementValue(''hangfire:stats:succeeded''))", span="46-46"];
m5_33 [cluster="string.Format(string, object)", file="SucceededState.cs", label="Entry string.Format(string, object)", span="0-0"];
m5_31 [cluster="lambda expression", file="SucceededState.cs", label="x.EnqueueItemOnList(''hangfire:succeeded'', JobId)", span="43-43"];
m5_67 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="SucceededState.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="44-44"];
m5_82 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="SucceededState.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m5_30 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="43-43"];
m5_84 [cluster="string.Format(string, object, object)", file="SucceededState.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m5_38 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="46-46"];
m5_39 [cluster="lambda expression", file="SucceededState.cs", label="x.IncrementValue(''hangfire:stats:succeeded'')", span="46-46"];
m5_40 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="46-46"];
m5_76 [cluster="Hangfire.States.EnqueuedState.EnqueuedState()", file="SucceededState.cs", label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="87-87"];
m5_42 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="var serializedJob = JobHelper.FromJson<InvocationData>(recurringJob[''Job''])", span="110-110"];
m5_48 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=green, community=1, file="SucceededState.cs", label="var lastExecutionTime = recurringJob.ContainsKey(''LastExecution'')\r\n                    ? JobHelper.DeserializeDateTime(recurringJob[''LastExecution''])\r\n                    : (DateTime?)null", prediction=33, span="123-125"];
m5_47 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="var instant = _instantFactory(cronSchedule, timeZone)", span="121-121"];
m5_45 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="var cronSchedule = CrontabSchedule.Parse(cron)", span="113-113"];
m5_46 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="var timeZone = recurringJob.ContainsKey(''TimeZoneId'')\r\n                    ? TimeZoneInfo.FindSystemTimeZoneById(recurringJob[''TimeZoneId''])\r\n                    : TimeZoneInfo.Utc", span="117-119"];
m5_43 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="var job = serializedJob.Deserialize()", span="111-111"];
m5_44 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="var cron = recurringJob[''Cron'']", span="112-112"];
m5_49 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="var changedFields = new Dictionary<string, string>()", span="127-127"];
m5_71 [cluster="Unk._instantFactory", file="SucceededState.cs", label="Entry Unk._instantFactory", span=""];
m5_74 [cluster="Hangfire.Server.IScheduleInstant.GetNextInstants(System.DateTime?)", file="SucceededState.cs", label="Entry Hangfire.Server.IScheduleInstant.GetNextInstants(System.DateTime?)", span="25-25"];
m5_83 [cluster="Hangfire.Storage.IStorageConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SucceededState.cs", label="Entry Hangfire.Storage.IStorageConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="61-61"];
m5_41 [cluster="Unk.IncrementValue", file="SucceededState.cs", label="Entry Unk.IncrementValue", span=""];
m5_10 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="SucceededState.cs", label="throw new ArgumentNullException(''throttler'');", span="55-55"];
m5_12 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", color=green, community=1, file="SucceededState.cs", label="_instantFactory = instantFactory", prediction=34, span="58-58"];
m5_7 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="SucceededState.cs", label="instantFactory == null", span="54-54"];
m5_11 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="SucceededState.cs", label="_factory = factory", span="57-57"];
m5_13 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="SucceededState.cs", label="_throttler = throttler", span="59-59"];
m5_8 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="SucceededState.cs", label="throw new ArgumentNullException(''instantFactory'');", span="54-54"];
m5_14 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="SucceededState.cs", label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="48-48"];
m5_9 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="SucceededState.cs", label="throttler == null", span="55-55"];
m5_16 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="SucceededState.cs", label="Entry Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="62-62"];
m5_22 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="SucceededState.cs", label="var recurringJob = connection.GetAllEntriesFromHash(\r\n                        String.Format(''recurring-job:{0}'', recurringJobId))", span="73-74"];
m5_69 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="SucceededState.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m5_0 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler()", file="SucceededState.cs", label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler()", span="38-38"];
m5_1 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler()", file="SucceededState.cs", label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler()", span="38-38"];
m5_36 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="44-44"];
m5_70 [cluster="System.TimeZoneInfo.FindSystemTimeZoneById(string)", file="SucceededState.cs", label="Entry System.TimeZoneInfo.FindSystemTimeZoneById(string)", span="0-0"];
m5_75 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="SucceededState.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m5_23 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="SucceededState.cs", label="recurringJob == null", span="76-76"];
m5_78 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="SucceededState.cs", label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="37-37"];
m5_68 [cluster="Unk.Parse", file="SucceededState.cs", label="Entry Unk.Parse", span=""];
m5_29 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="39-41"];
m5_2 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", file="SucceededState.cs", label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", span="43-43"];
m5_3 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", file="SucceededState.cs", label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", span="43-43"];
m5_73 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SucceededState.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m5_81 [cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="SucceededState.cs", label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68"];
m5_66 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="SucceededState.cs", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
m5_77 [cluster="string.IsNullOrEmpty(string)", file="SucceededState.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m5_72 [cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="SucceededState.cs", label="Entry Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73"];
m5_17 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="SucceededState.cs", label="_throttler.Throttle(context.CancellationToken)", span="64-64"];
m5_18 [cluster="Unk.QueueCommand", file="SucceededState.cs", label="Entry Unk.QueueCommand", span=""];
m5_24 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="35-37"];
m5_27 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="39-41"];
m5_19 [cluster="lambda expression", file="SucceededState.cs", label="Entry lambda expression", span="31-33"];
m5_20 [cluster="lambda expression", file="SucceededState.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                _jobExpirationTimeout)", span="31-33"];
m5_21 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="31-33"];
m5_26 [cluster="lambda expression", file="SucceededState.cs", label="Exit lambda expression", span="35-37"];
m5_25 [cluster="lambda expression", file="SucceededState.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:history'', JobId),\r\n                _jobExpirationTimeout)", span="35-37"];
m5_28 [cluster="lambda expression", color=green, community=1, file="SucceededState.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:state'', JobId),\r\n                _jobExpirationTimeout)", prediction=35, span="39-41"];
m5_37 [cluster="Unk.TrimList", file="SucceededState.cs", label="Entry Unk.TrimList", span=""];
m5_54 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="var context = new CreateContext(storage, connection, job, state)", span="137-137"];
m5_61 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="changedFields.Add(''NextExecution'', JobHelper.SerializeDateTime(instant.NextInstant))", span="153-153"];
m5_62 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=green, community=1, file="SucceededState.cs", label="connection.SetRangeInHash(\r\n                    String.Format(''recurring-job:{0}'', recurringJobId),\r\n                    changedFields)", prediction=36, span="155-157"];
m5_63 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label=TimeZoneNotFoundException, span="159-159"];
m5_55 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="var backgroundJob = _factory.Create(context)", span="138-138"];
m5_59 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="changedFields.Add(''LastExecution'', JobHelper.SerializeDateTime(instant.NowInstant))", span="149-149"];
m5_58 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="Logger.DebugFormat(\r\n                            ''Recurring job '{0}' execution at '{1}' has been canceled.'',\r\n                            recurringJobId,\r\n                            instant.NowInstant)", span="143-146"];
m5_32 [cluster="Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="SucceededState.cs", label="Entry Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55"];
m5_34 [cluster="Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", file="SucceededState.cs", label="Entry Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64"];
m5_50 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="instant.GetNextInstants(lastExecutionTime).Any()", span="129-129"];
m5_56 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="var jobId = backgroundJob != null ? backgroundJob.Id : null", span="139-139"];
m5_60 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="changedFields.Add(''LastJobId'', jobId ?? String.Empty)", span="150-150"];
m5_35 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="Entry Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", span="104-104"];
m5_51 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="var state = new EnqueuedState { Reason = ''Triggered by recurring job scheduler'' }", span="131-131"];
m5_52 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="recurringJob.ContainsKey(''Queue'') && !String.IsNullOrEmpty(recurringJob[''Queue''])", span="132-132"];
m5_57 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="String.IsNullOrEmpty(jobId)", span="141-141"];
m5_4 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="SucceededState.cs", label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="48-48"];
m5_5 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="SucceededState.cs", label="factory == null", span="53-53"];
m5_6 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="SucceededState.cs", label="throw new ArgumentNullException(''factory'');", span="53-53"];
m5_53 [cluster="Unk.DecrementValue", file="SucceededState.cs", label="Entry Unk.DecrementValue", span=""];
m5_64 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label="HangFire.States.SucceededState", span=""];
m5_65 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="SucceededState.cs", label=string, span=""];
m5_80 [cluster="Hangfire.Logging.ILog.DebugFormat(string, params object[])", file="SucceededState.cs", label="Entry Hangfire.Logging.ILog.DebugFormat(string, params object[])", span="122-122"];
m5_85 [cluster="Hangfire.Logging.ILog.ErrorException(string, System.Exception)", file="SucceededState.cs", label="Entry Hangfire.Logging.ILog.ErrorException(string, System.Exception)", span="159-159"];
m5_79 [cluster="Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", file="SucceededState.cs", label="Entry Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", span="31-31"];
m5_86 [file="SucceededState.cs", label="Hangfire.Server.RecurringJobScheduler", span=""];
n80 -> n32  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFeature", style=dashed];
n80 -> n35  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFeature", style=dashed];
n80 -> n42  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFeature", style=dashed];
n80 -> n48  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFeature", style=dashed];
n80 -> n54  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFeature", style=dashed];
n80 -> n57  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFeature", style=dashed];
n80 -> n61  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFeature", style=dashed];
n80 -> n64  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFeature", style=dashed];
n80 -> n68  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFeature", style=dashed];
n80 -> n71  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFeature", style=dashed];
n80 -> n75  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFeature", style=dashed];
n80 -> n78  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFeature", style=dashed];
n44 -> n46  [color=darkseagreen4, key=1, label=table1, style=dashed];
n44 -> n47  [color=darkseagreen4, key=1, label=table1, style=dashed];
d53 -> d13  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
d53 -> d18  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
d53 -> d24  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
d30 -> d37  [color=darkseagreen4, key=1, label=jobId, style=dashed];
d11 -> d13  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
d11 -> d18  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
d11 -> d15  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
d36 -> d38  [color=darkseagreen4, key=1, label=transaction, style=dashed];
d12 -> d14  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
d12 -> d16  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
d12 -> d17  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
d14 -> d14  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
d14 -> d16  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
d14 -> d17  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
m0_54 -> m0_56  [color=green, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_6 -> m0_130  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_49 -> m0_51  [color=green, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_53 -> m0_13  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m0_53 -> m0_18  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m0_53 -> m0_24  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m0_37 -> m0_39  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_23 -> m0_25  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_78 -> m0_80  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_42 -> m0_44  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_11 -> m0_13  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m0_11 -> m0_15  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m0_11 -> m0_18  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m0_12 -> m0_14  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
m0_12 -> m0_16  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
m0_12 -> m0_17  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
m0_14 -> m0_14  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
m0_14 -> m0_16  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
m0_14 -> m0_17  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
m0_571 -> m0_574  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m0_572 -> m0_578  [color=darkseagreen4, key=1, label=formattedMessage, style=dashed];
m0_572 -> m0_579  [color=darkseagreen4, key=1, label=formattedMessage, style=dashed];
m0_91 -> m0_93  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_116 -> m0_118  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_87 -> m0_89  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_270 -> m0_280  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_270 -> m0_284  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_270 -> m0_288  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_270 -> m0_292  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_270 -> m0_296  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_270 -> m0_299  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_74 -> m0_76  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_153 -> m0_155  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_99 -> m0_101  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_134 -> m0_136  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_375 -> m0_379  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_375 -> m0_383  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_375 -> m0_387  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_375 -> m0_391  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_375 -> m0_394  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_15 -> m0_17  [color=green, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_200 -> m0_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_19 -> m0_21  [color=green, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_238 -> m0_246  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_238 -> m0_250  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_238 -> m0_254  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_238 -> m0_258  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_238 -> m0_262  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_238 -> m0_265  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_238 -> m0_240  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m0_238 -> m0_241  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m0_238 -> m0_242  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m0_238 -> m0_243  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m0_2 -> m0_4  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_27 -> m0_36  [color=darkseagreen4, key=1, label=connection, style=dashed];
m0_27 -> m0_29  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_36 -> m0_38  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m0_95 -> m0_97  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_108 -> m0_110  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_121 -> m0_123  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_503 -> m0_508  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_503 -> m0_512  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_503 -> m0_516  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_503 -> m0_520  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_503 -> m0_524  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_503 -> m0_527  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_104 -> m0_106  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_339 -> m0_341  [color=darkseagreen4, key=1, label=nameParam, style=dashed];
m0_433 -> m0_436  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_432 -> m0_436  [color=darkseagreen4, key=1, label=func, style=dashed];
m0_471 -> m0_479  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_471 -> m0_483  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_471 -> m0_487  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_471 -> m0_491  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_471 -> m0_495  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_471 -> m0_498  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_471 -> m0_473  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m0_471 -> m0_474  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m0_471 -> m0_475  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m0_471 -> m0_476  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m0_70 -> m0_72  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_175 -> m0_177  [color=darkseagreen4, key=1, label=providerResolver, style=dashed];
m0_565 -> m0_568  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m0_347 -> m0_355  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_347 -> m0_359  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_347 -> m0_363  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_347 -> m0_367  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_347 -> m0_370  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_347 -> m0_349  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m0_347 -> m0_350  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m0_347 -> m0_351  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m0_347 -> m0_352  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m0_227 -> m0_229  [color=darkseagreen4, key=1, label=nameParam, style=dashed];
m0_58 -> m0_60  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_191 -> m0_193  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m0_191 -> m0_195  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogLevel", style=dashed];
m0_191 -> m0_198  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_194 -> m0_200  [color=darkseagreen4, key=1, label=ex, style=dashed];
m0_65 -> m0_67  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_82 -> m0_84  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_125 -> m0_127  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_112 -> m0_114  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m0_584 -> m0_193  [color=darkseagreen4, key=1, label="Hangfire.Logging.LoggerExecutionWrapper", style=dashed];
m0_584 -> m0_195  [color=darkseagreen4, key=1, label="Hangfire.Logging.LoggerExecutionWrapper", style=dashed];
m0_584 -> m0_200  [color=darkseagreen4, key=1, label="Hangfire.Logging.LoggerExecutionWrapper", style=dashed];
m0_585 -> m0_198  [color=darkseagreen4, key=1, label="System.Func<string>", style=dashed];
m0_587 -> m0_246  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_250  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_254  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_258  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_262  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_265  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_280  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_284  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_288  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_292  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_296  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_299  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_240  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_242  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_245  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_249  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_253  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_257  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_261  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_264  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_279  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_283  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_287  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_291  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_295  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_298  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_311  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_313  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_315  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_317  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_319  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_587 -> m0_320  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider.NLogLogger", style=dashed];
m0_589 -> m0_355  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_359  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_363  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_367  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_370  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_379  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_383  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_387  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_391  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_394  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_349  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_351  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_354  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_358  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_362  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_366  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_369  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_378  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_382  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_386  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_390  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_393  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_400  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_402  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_404  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_406  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_408  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_589 -> m0_409  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider.Log4NetLogger", style=dashed];
m0_592 -> m0_479  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_483  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_487  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_491  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_495  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_498  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_508  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_512  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_516  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_520  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_524  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_527  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_473  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_475  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_478  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_482  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_486  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_490  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_494  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_497  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_507  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_511  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_515  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_519  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_523  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_592 -> m0_526  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider.SerilogLogger", style=dashed];
m0_593 -> m0_568  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger", style=dashed];
m0_586 -> m0_215  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.NLogLogProvider", style=dashed];
m0_588 -> m0_329  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.Log4NetLogProvider", style=dashed];
m0_590 -> m0_418  [color=darkseagreen4, key=1, label="Hangfire.Logging.LogProviders.SerilogLogProvider", style=dashed];
m0_591 -> m0_436  [color=darkseagreen4, key=1, label=func, style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.RouteCollection", style=dashed];
m1_0 -> m1_5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>", style=dashed];
m1_0 -> m1_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_8  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m1_0 -> m1_9  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.RouteCollection", style=dashed];
m1_0 -> m1_10  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>", style=dashed];
m1_11 -> m1_13  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_30 -> m1_7  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.DashboardMiddleware", style=dashed];
m1_30 -> m1_8  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.DashboardMiddleware", style=dashed];
m1_30 -> m1_9  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.DashboardMiddleware", style=dashed];
m1_30 -> m1_10  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.DashboardMiddleware", style=dashed];
m1_30 -> m1_17  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.DashboardMiddleware", style=dashed];
m1_53 -> m1_64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_53 -> m1_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_54 -> m1_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_54 -> m1_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_48 -> m1_53  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m1_48 -> m1_70  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m1_49 -> m1_54  [color=darkseagreen4, key=1, label=states, style=dashed];
m1_49 -> m1_78  [color=darkseagreen4, key=1, label=states, style=dashed];
m1_50 -> m1_53  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m1_50 -> m1_54  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m1_50 -> m1_55  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m1_52 -> m1_54  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_52 -> m1_65  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_52 -> m1_74  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_52 -> m1_70  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_52 -> m1_78  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_56 -> m1_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_56 -> m1_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_45 -> m1_51  [color=darkseagreen4, key=1, label=scheduledJobs, style=dashed];
m1_23 -> m1_25  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_26 -> m1_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_26 -> m1_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_173 -> m1_331  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_173 -> m1_333  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_173 -> m1_339  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_173 -> m1_347  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_173 -> m1_329  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<string>", style=dashed];
m1_173 -> m1_332  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_173 -> m1_357  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", style=dashed];
m1_335 -> m1_353  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_335 -> m1_356  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_331 -> m1_338  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_331 -> m1_341  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_333 -> m1_346  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_333 -> m1_349  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_326 -> m1_331  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m1_326 -> m1_342  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m1_326 -> m1_343  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m1_327 -> m1_333  [color=darkseagreen4, key=1, label=states, style=dashed];
m1_327 -> m1_350  [color=darkseagreen4, key=1, label=states, style=dashed];
m1_327 -> m1_351  [color=darkseagreen4, key=1, label=states, style=dashed];
m1_328 -> m1_331  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m1_328 -> m1_333  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m1_328 -> m1_334  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m1_330 -> m1_333  [color=darkseagreen4, key=1, label=id, style=dashed];
m1_330 -> m1_339  [color=darkseagreen4, key=1, label=id, style=dashed];
m1_330 -> m1_347  [color=darkseagreen4, key=1, label=id, style=dashed];
m1_330 -> m1_342  [color=darkseagreen4, key=1, label=id, style=dashed];
m1_330 -> m1_343  [color=darkseagreen4, key=1, label=id, style=dashed];
m1_330 -> m1_350  [color=darkseagreen4, key=1, label=id, style=dashed];
m1_330 -> m1_351  [color=darkseagreen4, key=1, label=id, style=dashed];
m1_13 -> m1_16  [color=darkseagreen4, key=1, label=IOwinContext, style=dashed];
m1_13 -> m1_18  [color=darkseagreen4, key=1, label=IOwinContext, style=dashed];
m1_14 -> m1_22  [color=darkseagreen4, key=1, label=dispatcher, style=dashed];
m1_219 -> m1_294  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_276 -> m1_293  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_278 -> m1_284  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_278 -> m1_286  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_270 -> m1_273  [color=darkseagreen4, key=1, label=dates, style=dashed];
m1_270 -> m1_280  [color=darkseagreen4, key=1, label=dates, style=dashed];
m1_270 -> m1_284  [color=darkseagreen4, key=1, label=dates, style=dashed];
m1_277 -> m1_282  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m1_279 -> m1_282  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_279 -> m1_284  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_279 -> m1_285  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_269 -> m1_273  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m1_271 -> m1_275  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_275 -> m1_275  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_285 -> m1_285  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_236 -> m1_242  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_239 -> m1_242  [color=darkseagreen4, key=1, label=queue, style=dashed];
m1_341 -> m1_343  [color=darkseagreen4, key=1, label="?", style=dashed];
m1_349 -> m1_351  [color=darkseagreen4, key=1, label="?", style=dashed];
m1_357 -> m1_362  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_41 -> m1_41  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, HangFire.Web.ProcessingJobDto>", style=dashed];
m1_138 -> m1_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_148 -> m1_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_164 -> m1_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_164 -> m1_179  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_165 -> m1_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_165 -> m1_185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_166 -> m1_188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_166 -> m1_191  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_157 -> m1_159  [color=darkseagreen4, key=1, label=queues, style=dashed];
m1_163 -> m1_167  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m1_159 -> m1_177  [color=darkseagreen4, key=1, label=queue, style=dashed];
m1_159 -> m1_183  [color=darkseagreen4, key=1, label=queue, style=dashed];
m1_159 -> m1_189  [color=darkseagreen4, key=1, label=queue, style=dashed];
m1_168 -> m1_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_158 -> m1_170  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_110 -> m1_129  [color=green, key=1, label="lambda expression", style=dashed];
m1_99 -> m1_105  [color=darkseagreen4, key=1, label=serverNames, style=dashed];
m1_102 -> m1_107  [color=green, key=1, label=servers, style=dashed];
m1_102 -> m1_120  [color=darkseagreen4, key=1, label=servers, style=dashed];
m1_103 -> m1_108  [color=darkseagreen4, key=1, label=queues, style=dashed];
m1_103 -> m1_127  [color=darkseagreen4, key=1, label=queues, style=dashed];
m1_107 -> m1_116  [color=green, key=1, label="lambda expression", style=dashed];
m1_107 -> m1_119  [color=green, key=1, label="lambda expression", style=dashed];
m1_104 -> m1_107  [color=green, key=1, label=pipeline, style=dashed];
m1_104 -> m1_109  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m1_104 -> m1_108  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m1_106 -> m1_117  [color=green, key=1, label=name, style=dashed];
m1_106 -> m1_120  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_106 -> m1_108  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_106 -> m1_123  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_106 -> m1_127  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_108 -> m1_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_108 -> m1_126  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_374 -> m1_387  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_374 -> m1_391  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_375 -> m1_394  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_375 -> m1_397  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_376 -> m1_400  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_376 -> m1_403  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_377 -> m1_406  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_377 -> m1_409  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_378 -> m1_412  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_378 -> m1_416  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_379 -> m1_420  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_379 -> m1_423  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_382 -> m1_426  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_382 -> m1_429  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_372 -> m1_380  [color=darkseagreen4, key=1, label=queues, style=dashed];
m1_373 -> m1_383  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m1_371 -> m1_384  [color=darkseagreen4, key=1, label=stats, style=dashed];
m1_381 -> m1_427  [color=darkseagreen4, key=1, label=queueName, style=dashed];
m1_92 -> m1_322  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_305 -> m1_321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_304 -> m1_318  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_304 -> m1_309  [color=darkseagreen4, key=1, label=stringDates, style=dashed];
m1_307 -> m1_313  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_307 -> m1_315  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_306 -> m1_311  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m1_300 -> m1_302  [color=darkseagreen4, key=1, label=dates, style=dashed];
m1_300 -> m1_313  [color=darkseagreen4, key=1, label=dates, style=dashed];
m1_308 -> m1_311  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_308 -> m1_313  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_308 -> m1_314  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_298 -> m1_301  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m1_298 -> m1_302  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m1_299 -> m1_301  [color=darkseagreen4, key=1, label=startDate, style=dashed];
m1_314 -> m1_314  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_252 -> m1_259  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_252 -> m1_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_252 -> m1_266  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_249 -> m1_260  [color=darkseagreen4, key=1, label=hiddenProperties, style=dashed];
m1_209 -> m1_211  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_224 -> m1_230  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_227 -> m1_230  [color=darkseagreen4, key=1, label=queue, style=dashed];
m1_201 -> m1_203  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_436 -> m1_120  [color=darkseagreen4, key=1, label=servers, style=dashed];
m1_437 -> m1_127  [color=darkseagreen4, key=1, label=queues, style=dashed];
m1_435 -> m1_117  [color=green, key=1, label=name, style=dashed];
m1_435 -> m1_120  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_435 -> m1_123  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_435 -> m1_127  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_432 -> m1_65  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_432 -> m1_74  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_432 -> m1_70  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_432 -> m1_78  [color=darkseagreen4, key=1, label=job, style=dashed];
m1_438 -> m1_177  [color=darkseagreen4, key=1, label=queue, style=dashed];
m1_438 -> m1_183  [color=darkseagreen4, key=1, label=queue, style=dashed];
m1_438 -> m1_189  [color=darkseagreen4, key=1, label=queue, style=dashed];
m1_441 -> m1_322  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_449 -> m1_427  [color=darkseagreen4, key=1, label=queueName, style=dashed];
m1_442 -> m1_339  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_443 -> m1_339  [color=darkseagreen4, key=1, label=id, style=dashed];
m1_443 -> m1_347  [color=darkseagreen4, key=1, label=id, style=dashed];
m1_443 -> m1_342  [color=darkseagreen4, key=1, label=id, style=dashed];
m1_443 -> m1_343  [color=darkseagreen4, key=1, label=id, style=dashed];
m1_443 -> m1_350  [color=darkseagreen4, key=1, label=id, style=dashed];
m1_443 -> m1_351  [color=darkseagreen4, key=1, label=id, style=dashed];
m1_445 -> m1_347  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_433 -> m1_70  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m1_434 -> m1_78  [color=darkseagreen4, key=1, label=states, style=dashed];
m1_444 -> m1_343  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m1_444 -> m1_342  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m1_446 -> m1_351  [color=darkseagreen4, key=1, label=states, style=dashed];
m1_446 -> m1_350  [color=darkseagreen4, key=1, label=states, style=dashed];
m1_440 -> m1_294  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_447 -> m1_357  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", style=dashed];
m1_439 -> m1_260  [color=darkseagreen4, key=1, label=hiddenProperties, style=dashed];
m2_623 -> m2_625  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_812 -> m2_814  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_479 -> m2_481  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_365 -> m2_367  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_740 -> m2_742  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_669 -> m2_671  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_866 -> m2_868  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_272 -> m2_274  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_345 -> m2_347  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_306 -> m2_308  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_26 -> m2_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_27 -> m2_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_858 -> m2_860  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_210 -> m2_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_884 -> m2_886  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_721 -> m2_723  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_283 -> m2_285  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_354 -> m2_356  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_431 -> m2_433  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_774 -> m2_776  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_241 -> m2_243  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_660 -> m2_662  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_848 -> m2_850  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_403 -> m2_405  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_34 -> m2_37  [color=darkseagreen4, key=1, label=context, style=dashed];
m2_34 -> m2_36  [color=darkseagreen4, key=1, label=context, style=dashed];
m2_34 -> m2_38  [color=darkseagreen4, key=1, label=context, style=dashed];
m2_327 -> m2_329  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_252 -> m2_254  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_892 -> m2_894  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_567 -> m2_569  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_512 -> m2_514  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_220 -> m2_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_577 -> m2_579  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_441 -> m2_445  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m2_442 -> m2_444  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_585 -> m2_587  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_783 -> m2_785  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_713 -> m2_715  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_794 -> m2_796  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_54 -> m2_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_67 -> m2_71  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_67 -> m2_75  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_68 -> m2_71  [color=darkseagreen4, key=1, label=token, style=dashed];
m2_68 -> m2_75  [color=darkseagreen4, key=1, label=token, style=dashed];
m2_71 -> m2_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_98 -> m2_103  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_99 -> m2_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_110 -> m2_115  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_111 -> m2_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_115 -> m2_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_127 -> m2_133  [color=darkseagreen4, key=1, label=createdAt, style=dashed];
m2_127 -> m2_142  [color=darkseagreen4, key=1, label=createdAt, style=dashed];
m2_127 -> m2_143  [color=darkseagreen4, key=1, label=createdAt, style=dashed];
m2_128 -> m2_160  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_128 -> m2_130  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_128 -> m2_132  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_131 -> m2_133  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m2_131 -> m2_134  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m2_131 -> m2_135  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m2_131 -> m2_142  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m2_131 -> m2_143  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m2_144 -> m2_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_144 -> m2_166  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_144 -> m2_146  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m2_138 -> m2_140  [color=darkseagreen4, key=1, label=job, style=dashed];
m2_138 -> m2_141  [color=darkseagreen4, key=1, label=job, style=dashed];
m2_172 -> m2_176  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_173 -> m2_175  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_192 -> m2_206  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_194 -> m2_196  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_194 -> m2_197  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_194 -> m2_198  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_194 -> m2_199  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_194 -> m2_200  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_194 -> m2_201  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_212 -> m2_216  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_213 -> m2_215  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_233 -> m2_235  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_233 -> m2_236  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_233 -> m2_237  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_246 -> m2_248  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_263 -> m2_268  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_264 -> m2_267  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_274 -> m2_279  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_275 -> m2_278  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_285 -> m2_288  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_296 -> m2_299  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_296 -> m2_300  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_298 -> m2_300  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_308 -> m2_311  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_318 -> m2_323  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_319 -> m2_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_329 -> m2_334  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_330 -> m2_333  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_356 -> m2_361  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_357 -> m2_360  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_367 -> m2_371  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_368 -> m2_370  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_393 -> m2_398  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_394 -> m2_397  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_405 -> m2_410  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_406 -> m2_409  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_415 -> m2_417  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_415 -> m2_423  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_418 -> m2_420  [color=darkseagreen4, key=1, label=server, style=dashed];
m2_418 -> m2_421  [color=darkseagreen4, key=1, label=server, style=dashed];
m2_424 -> m2_426  [color=darkseagreen4, key=1, label=sameServer, style=dashed];
m2_433 -> m2_437  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_434 -> m2_436  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_444 -> m2_446  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_454 -> m2_458  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_455 -> m2_457  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_465 -> m2_467  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_468 -> m2_472  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_468 -> m2_475  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_468 -> m2_470  [color=darkseagreen4, key=1, label=servers, style=dashed];
m2_481 -> m2_485  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_482 -> m2_484  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_493 -> m2_495  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_504 -> m2_508  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_505 -> m2_507  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_515 -> m2_517  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_525 -> m2_527  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_525 -> m2_528  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_533 -> m2_538  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_534 -> m2_537  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_544 -> m2_549  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_545 -> m2_548  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_556 -> m2_560  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_556 -> m2_563  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_556 -> m2_558  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_569 -> m2_573  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_570 -> m2_572  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_589 -> m2_591  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_589 -> m2_592  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_589 -> m2_593  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_598 -> m2_602  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_599 -> m2_601  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_625 -> m2_629  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_626 -> m2_628  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_644 -> m2_648  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_645 -> m2_647  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_679 -> m2_683  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_680 -> m2_682  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_705 -> m2_709  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_706 -> m2_708  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_725 -> m2_727  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_732 -> m2_736  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_733 -> m2_735  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_758 -> m2_762  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_759 -> m2_761  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_778 -> m2_780  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_785 -> m2_790  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_786 -> m2_789  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_796 -> m2_801  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_797 -> m2_800  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_822 -> m2_827  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_823 -> m2_826  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_850 -> m2_854  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_851 -> m2_853  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_876 -> m2_880  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_877 -> m2_879  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_896 -> m2_898  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_413 -> m2_415  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_695 -> m2_697  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_9 -> m2_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_391 -> m2_393  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_502 -> m2_504  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_900 -> m2_903  [color=darkseagreen4, key=1, label="System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>", style=dashed];
m2_901 -> m2_903  [color=darkseagreen4, key=1, label=sqlConnection, style=dashed];
m2_261 -> m2_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_180 -> m2_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_78 -> m2_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_337 -> m2_339  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_730 -> m2_732  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_531 -> m2_533  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_2 -> m2_4  [color=darkseagreen4, key=1, label=provider, style=dashed];
m2_3 -> m2_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_19 -> m2_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_108 -> m2_110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_614 -> m2_616  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_766 -> m2_768  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_17 -> m2_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_491 -> m2_493  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_756 -> m2_758  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_228 -> m2_230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_804 -> m2_806  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_677 -> m2_679  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_521 -> m2_523  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_542 -> m2_544  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_687 -> m2_689  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_703 -> m2_705  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_49 -> m2_907  [color=darkseagreen4, key=1, label="System.Action<Hangfire.SqlServer.SqlServerConnection>", style=dashed];
m2_642 -> m2_644  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_820 -> m2_822  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_316 -> m2_318  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_840 -> m2_842  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_96 -> m2_98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_652 -> m2_654  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_874 -> m2_876  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_87 -> m2_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_596 -> m2_598  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_381 -> m2_385  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m2_382 -> m2_384  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_634 -> m2_636  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_294 -> m2_296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_462 -> m2_466  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m2_463 -> m2_465  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_831 -> m2_833  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_552 -> m2_554  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_189 -> m2_191  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_452 -> m2_454  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_748 -> m2_750  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_170 -> m2_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_123 -> m2_126  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_41 -> m2_44  [color=darkseagreen4, key=1, label=sqlConnection, style=dashed];
m2_374 -> m2_376  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_43 -> m2_15  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m2_43 -> m2_19  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m2_43 -> m2_23  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m2_43 -> m2_31  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m2_43 -> m2_35  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m2_43 -> m2_36  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m2_43 -> m2_37  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m2_43 -> m2_38  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m2_606 -> m2_608  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_911 -> m2_4  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_22  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_35  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_54  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_70  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_170  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_210  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_365  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_431  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_452  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_479  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_502  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_567  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_596  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_623  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_642  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_677  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_703  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_730  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_756  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_848  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_911 -> m2_874  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m2_912 -> m2_60  [color=darkseagreen4, key=1, label=token, style=dashed];
m2_913 -> m2_60  [color=darkseagreen4, key=1, label=queues, style=dashed];
m2_914 -> m2_75  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_915 -> m2_75  [color=darkseagreen4, key=1, label=token, style=dashed];
m2_916 -> m2_103  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_917 -> m2_115  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_918 -> m2_176  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_920 -> m2_216  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_924 -> m2_268  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_925 -> m2_279  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_929 -> m2_323  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_930 -> m2_334  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_932 -> m2_361  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_933 -> m2_371  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_934 -> m2_385  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m2_935 -> m2_398  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_936 -> m2_410  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_937 -> m2_437  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_938 -> m2_445  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m2_939 -> m2_458  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_940 -> m2_466  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m2_941 -> m2_485  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_943 -> m2_508  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_945 -> m2_538  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_946 -> m2_549  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_947 -> m2_573  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_949 -> m2_602  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_951 -> m2_629  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_953 -> m2_648  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_956 -> m2_683  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_958 -> m2_709  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_960 -> m2_736  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_962 -> m2_762  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_964 -> m2_790  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_965 -> m2_801  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_967 -> m2_827  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_969 -> m2_854  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m2_971 -> m2_880  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m4_248 -> m4_250  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_274 -> m4_352  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_329 -> m4_333  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_328 -> m4_338  [color=darkseagreen4, key=1, label=dates, style=dashed];
m4_328 -> m4_331  [color=darkseagreen4, key=1, label=dates, style=dashed];
m4_328 -> m4_342  [color=darkseagreen4, key=1, label=dates, style=dashed];
m4_333 -> m4_333  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_337 -> m4_340  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_337 -> m4_342  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_337 -> m4_343  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_343 -> m4_343  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_327 -> m4_331  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m4_334 -> m4_351  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_335 -> m4_340  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m4_336 -> m4_344  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_336 -> m4_342  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_122 -> m4_380  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_356 -> m4_359  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m4_356 -> m4_360  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m4_363 -> m4_379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_364 -> m4_369  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m4_365 -> m4_371  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_365 -> m4_373  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_362 -> m4_367  [color=darkseagreen4, key=1, label=stringDates, style=dashed];
m4_362 -> m4_376  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_366 -> m4_369  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_366 -> m4_371  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_366 -> m4_372  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_372 -> m4_372  [color=darkseagreen4, key=1, label=i, style=dashed];
m4_358 -> m4_360  [color=darkseagreen4, key=1, label=dates, style=dashed];
m4_358 -> m4_371  [color=darkseagreen4, key=1, label=dates, style=dashed];
m4_357 -> m4_359  [color=darkseagreen4, key=1, label=startDate, style=dashed];
m4_258 -> m4_260  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_276 -> m4_278  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_434 -> m4_436  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_22 -> m4_26  [color=green, key=1, label=string, style=dashed];
m4_23 -> m4_25  [color=green, key=1, label="lambda expression", style=dashed];
m4_282 -> m4_284  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_428 -> m4_430  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_192 -> m4_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_222 -> m4_409  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_222 -> m4_388  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<string>", style=dashed];
m4_222 -> m4_391  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_222 -> m4_392  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_222 -> m4_419  [color=darkseagreen4, key=1, label="System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", style=dashed];
m4_389 -> m4_409  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_389 -> m4_399  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_389 -> m4_404  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_389 -> m4_405  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_389 -> m4_392  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_389 -> m4_412  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_389 -> m4_413  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_386 -> m4_399  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_386 -> m4_390  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_384 -> m4_390  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m4_384 -> m4_404  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m4_384 -> m4_405  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m4_385 -> m4_392  [color=darkseagreen4, key=1, label=states, style=dashed];
m4_385 -> m4_412  [color=darkseagreen4, key=1, label=states, style=dashed];
m4_385 -> m4_413  [color=darkseagreen4, key=1, label=states, style=dashed];
m4_387 -> m4_390  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m4_387 -> m4_392  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m4_387 -> m4_393  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m4_392 -> m4_408  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_392 -> m4_411  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_394 -> m4_415  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_394 -> m4_418  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_390 -> m4_398  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_390 -> m4_403  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_9 -> m4_513  [color=darkseagreen4, key=1, label="System.Func<IRedisClient, T>", style=dashed];
m4_51 -> m4_58  [color=green, key=1, label="lambda expression", style=dashed];
m4_51 -> m4_64  [color=green, key=1, label="lambda expression", style=dashed];
m4_171 -> m4_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_183 -> m4_186  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_196 -> m4_198  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_217 -> m4_243  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_252 -> m4_254  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_262 -> m4_264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_304 -> m4_317  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_304 -> m4_321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_304 -> m4_324  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_285 -> m4_300  [color=darkseagreen4, key=1, label=job, style=dashed];
m4_285 -> m4_301  [color=darkseagreen4, key=1, label=job, style=dashed];
m4_285 -> m4_302  [color=darkseagreen4, key=1, label=job, style=dashed];
m4_285 -> m4_303  [color=darkseagreen4, key=1, label=job, style=dashed];
m4_65 -> m4_65  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, HangFire.Storage.Monitoring.ProcessingJobDto>", style=dashed];
m4_213 -> m4_225  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_213 -> m4_228  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_288 -> m4_318  [color=darkseagreen4, key=1, label=hiddenProperties, style=dashed];
m4_291 -> m4_299  [color=darkseagreen4, key=1, label=stateHistory, style=dashed];
m4_290 -> m4_292  [color=darkseagreen4, key=1, label=history, style=dashed];
m4_208 -> m4_232  [color=darkseagreen4, key=1, label=queue, style=dashed];
m4_208 -> m4_238  [color=darkseagreen4, key=1, label=queue, style=dashed];
m4_208 -> m4_226  [color=darkseagreen4, key=1, label=queue, style=dashed];
m4_449 -> m4_507  [color=darkseagreen4, key=1, label=queueName, style=dashed];
m4_75 -> m4_80  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m4_75 -> m4_100  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m4_76 -> m4_81  [color=darkseagreen4, key=1, label=states, style=dashed];
m4_76 -> m4_107  [color=darkseagreen4, key=1, label=states, style=dashed];
m4_136 -> m4_141  [color=darkseagreen4, key=1, label=servers, style=dashed];
m4_136 -> m4_151  [color=darkseagreen4, key=1, label=servers, style=dashed];
m4_137 -> m4_142  [color=darkseagreen4, key=1, label=queues, style=dashed];
m4_137 -> m4_158  [color=darkseagreen4, key=1, label=queues, style=dashed];
m4_72 -> m4_78  [color=darkseagreen4, key=1, label=scheduledJobs, style=dashed];
m4_77 -> m4_80  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m4_77 -> m4_81  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m4_77 -> m4_82  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m4_133 -> m4_139  [color=darkseagreen4, key=1, label=serverNames, style=dashed];
m4_138 -> m4_141  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m4_138 -> m4_142  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m4_138 -> m4_143  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m4_206 -> m4_208  [color=darkseagreen4, key=1, label=queues, style=dashed];
m4_212 -> m4_216  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m4_419 -> m4_424  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_214 -> m4_231  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_214 -> m4_234  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_215 -> m4_237  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_215 -> m4_240  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_207 -> m4_219  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_293 -> m4_299  [color=darkseagreen4, key=1, label=dto, style=dashed];
m4_437 -> m4_452  [color=darkseagreen4, key=1, label=stats, style=dashed];
m4_438 -> m4_448  [color=darkseagreen4, key=1, label=queues, style=dashed];
m4_439 -> m4_451  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m4_442 -> m4_468  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_442 -> m4_471  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_443 -> m4_474  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_443 -> m4_477  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_445 -> m4_488  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_445 -> m4_491  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_447 -> m4_500  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_447 -> m4_503  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_450 -> m4_506  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_450 -> m4_509  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_83 -> m4_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_80 -> m4_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_80 -> m4_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_81 -> m4_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_81 -> m4_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_141 -> m4_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_141 -> m4_150  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_144 -> m4_160  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_142 -> m4_153  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_142 -> m4_157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_411 -> m4_413  [color=darkseagreen4, key=1, label="?", style=dashed];
m4_440 -> m4_455  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_440 -> m4_459  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_441 -> m4_462  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_441 -> m4_465  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_444 -> m4_480  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_444 -> m4_484  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_446 -> m4_494  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_446 -> m4_497  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_294 -> m4_296  [color=darkseagreen4, key=1, label=stateData, style=dashed];
m4_294 -> m4_297  [color=darkseagreen4, key=1, label=stateData, style=dashed];
m4_140 -> m4_154  [color=darkseagreen4, key=1, label=name, style=dashed];
m4_140 -> m4_148  [color=darkseagreen4, key=1, label=name, style=dashed];
m4_140 -> m4_151  [color=darkseagreen4, key=1, label=name, style=dashed];
m4_140 -> m4_158  [color=darkseagreen4, key=1, label=name, style=dashed];
m4_140 -> m4_142  [color=darkseagreen4, key=1, label=name, style=dashed];
m4_403 -> m4_405  [color=darkseagreen4, key=1, label="?", style=dashed];
m4_79 -> m4_95  [color=darkseagreen4, key=1, label=job, style=dashed];
m4_79 -> m4_104  [color=darkseagreen4, key=1, label=job, style=dashed];
m4_79 -> m4_100  [color=darkseagreen4, key=1, label=job, style=dashed];
m4_79 -> m4_107  [color=darkseagreen4, key=1, label=job, style=dashed];
m4_79 -> m4_81  [color=darkseagreen4, key=1, label=job, style=dashed];
m4_167 -> m4_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_130 -> m4_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_41 -> m4_43  [color=green, key=1, label="lambda expression", style=dashed];
m4_179 -> m4_181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_117 -> m4_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_29 -> m4_31  [color=green, key=1, label="lambda expression", style=dashed];
m4_47 -> m4_49  [color=green, key=1, label="lambda expression", style=dashed];
m4_35 -> m4_37  [color=green, key=1, label="lambda expression", style=dashed];
m4_269 -> m4_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_124 -> m4_126  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_203 -> m4_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_68 -> m4_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_14 -> m4_18  [color=green, key=1, label=string, style=dashed];
m4_15 -> m4_17  [color=green, key=1, label="lambda expression", style=dashed];
m4_7 -> m4_10  [color=green, key=1, label="lambda expression", style=dashed];
m4_523 -> m4_7  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_15  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_23  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_29  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_35  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_41  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_117  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_120  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_124  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_127  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_269  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_272  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_276  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_279  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_523 -> m4_428  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m4_524 -> m4_18  [color=green, key=1, label=string, style=dashed];
m4_525 -> m4_26  [color=green, key=1, label=string, style=dashed];
m4_554 -> m4_409  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_554 -> m4_399  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_554 -> m4_404  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_554 -> m4_405  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_554 -> m4_412  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_554 -> m4_413  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_556 -> m4_409  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_553 -> m4_399  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_542 -> m4_232  [color=darkseagreen4, key=1, label=queue, style=dashed];
m4_542 -> m4_238  [color=darkseagreen4, key=1, label=queue, style=dashed];
m4_542 -> m4_226  [color=darkseagreen4, key=1, label=queue, style=dashed];
m4_560 -> m4_507  [color=darkseagreen4, key=1, label=queueName, style=dashed];
m4_531 -> m4_100  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m4_532 -> m4_107  [color=darkseagreen4, key=1, label=states, style=dashed];
m4_534 -> m4_151  [color=darkseagreen4, key=1, label=servers, style=dashed];
m4_535 -> m4_158  [color=darkseagreen4, key=1, label=queues, style=dashed];
m4_552 -> m4_380  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_555 -> m4_404  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m4_555 -> m4_405  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m4_557 -> m4_412  [color=darkseagreen4, key=1, label=states, style=dashed];
m4_557 -> m4_413  [color=darkseagreen4, key=1, label=states, style=dashed];
m4_558 -> m4_419  [color=darkseagreen4, key=1, label="System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", style=dashed];
m4_551 -> m4_352  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_550 -> m4_318  [color=darkseagreen4, key=1, label=hiddenProperties, style=dashed];
m4_533 -> m4_154  [color=darkseagreen4, key=1, label=name, style=dashed];
m4_533 -> m4_148  [color=darkseagreen4, key=1, label=name, style=dashed];
m4_533 -> m4_151  [color=darkseagreen4, key=1, label=name, style=dashed];
m4_533 -> m4_158  [color=darkseagreen4, key=1, label=name, style=dashed];
m4_530 -> m4_95  [color=darkseagreen4, key=1, label=job, style=dashed];
m4_530 -> m4_104  [color=darkseagreen4, key=1, label=job, style=dashed];
m4_530 -> m4_100  [color=darkseagreen4, key=1, label=job, style=dashed];
m4_530 -> m4_107  [color=darkseagreen4, key=1, label=job, style=dashed];
m5_15 -> m5_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_42 -> m5_62  [color=green, key=1, label=string, style=dashed];
m5_42 -> m5_59  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_48 -> m5_61  [color=green, key=1, label="lambda expression", style=dashed];
m5_48 -> m5_50  [color=darkseagreen4, key=1, label=lastExecutionTime, style=dashed];
m5_47 -> m5_58  [color=darkseagreen4, key=1, label=instant, style=dashed];
m5_47 -> m5_50  [color=darkseagreen4, key=1, label=instant, style=dashed];
m5_47 -> m5_59  [color=darkseagreen4, key=1, label=instant, style=dashed];
m5_47 -> m5_61  [color=darkseagreen4, key=1, label=instant, style=dashed];
m5_45 -> m5_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_49 -> m5_59  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m5_49 -> m5_60  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m5_49 -> m5_61  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m5_49 -> m5_62  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m5_10 -> m5_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_12 -> m5_27  [color=green, key=1, label="lambda expression", style=dashed];
m5_7 -> m5_10  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m5_7 -> m5_14  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m5_7 -> m5_15  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m5_11 -> m5_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_13 -> m5_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_14 -> m5_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_16 -> m5_18  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m5_16 -> m5_24  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m5_16 -> m5_27  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m5_22 -> m5_24  [color=darkseagreen4, key=1, label=recurringJob, style=dashed];
m5_18 -> m5_20  [color=darkseagreen4, key=1, label=connection, style=dashed];
m5_18 -> m5_24  [color=darkseagreen4, key=1, label=connection, style=dashed];
m5_21 -> m5_24  [color=darkseagreen4, key=1, label=recurringJobId, style=dashed];
m5_21 -> m5_26  [color=darkseagreen4, key=1, label=recurringJobId, style=dashed];
m5_56 -> m5_60  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m5_35 -> m5_52  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m5_35 -> m5_53  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m5_35 -> m5_58  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_35 -> m5_62  [color=darkseagreen4, key=1, label="Hangfire.Storage.IStorageConnection", style=dashed];
m5_35 -> m5_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_4 -> m5_7  [color=darkseagreen4, key=1, label="System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>", style=dashed];
m5_4 -> m5_9  [color=darkseagreen4, key=1, label="Hangfire.Server.IThrottler", style=dashed];
m5_64 -> m5_28  [color=green, key=1, label="HangFire.States.SucceededState", style=dashed];
m5_64 -> m5_10  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m5_64 -> m5_20  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m5_64 -> m5_25  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m5_64 -> m5_31  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m5_65 -> m5_62  [color=green, key=1, label=string, style=dashed];
m5_65 -> m5_59  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_86 -> m5_17  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m5_86 -> m5_24  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m5_86 -> m5_27  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m5_86 -> m5_39  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
}
