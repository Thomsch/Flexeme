digraph  {
n406 [label="Hangfire.SqlServer.SqlServerMonitoringApi", span=""];
n407 [label=int, span=""];
n408 [label=int, span=""];
n409 [label=int, span=""];
n410 [label=int, span=""];
n411 [label=int, span=""];
n412 [label=int, span=""];
n413 [label=int, span=""];
n414 [label=int, span=""];
n415 [label=int, span=""];
n416 [label=int, span=""];
n417 [label=enqueuedJobIds, span=""];
n418 [label=enqueuedJobIds, span=""];
n419 [label=fetchedJobIds, span=""];
n420 [label=string, span=""];
n421 [label=sql, span=""];
n422 [label=string, span=""];
n423 [label=string, span=""];
n424 [label=jobs, span=""];
n0 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="37-37"];
n1 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", label="storage == null", span="39-39"];
n2 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", label="throw new ArgumentNullException(nameof(storage));", span="39-39"];
n3 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", label="_storage = storage", span="41-41"];
n4 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", label="_jobListLimit = jobListLimit", span="42-42"];
n5 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="37-37"];
n6 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n7 [cluster="Unk.nameof", label="Entry Unk.nameof", span=""];
n8 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45"];
n9 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ScheduledState.StateName));", span="47-48"];
n10 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45"];
n11 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434"];
n12 [cluster="lambda expression", label="Entry lambda expression", span="47-48"];
n13 [cluster="lambda expression", label="GetNumberOfJobsByStateName(connection, ScheduledState.StateName)", span="48-48"];
n14 [cluster="lambda expression", label="Exit lambda expression", span="47-48"];
n15 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470"];
n16 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51"];
n17 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="var queueApi = GetQueueApi(queue)", span="53-53"];
n18 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="54-54"];
n21 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426"];
n19 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="return counters.EnqueuedCount ?? 0;", span="56-56"];
n22 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="30-30"];
n20 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51"];
n23 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="59-59"];
n24 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="var queueApi = GetQueueApi(queue)", span="61-61"];
n25 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="62-62"];
n26 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="return counters.FetchedCount ?? 0;", span="64-64"];
n27 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="59-59"];
n28 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="67-67"];
n29 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, FailedState.StateName));", span="69-70"];
n30 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="67-67"];
n31 [cluster="lambda expression", label="Entry lambda expression", span="69-70"];
n32 [cluster="lambda expression", label="GetNumberOfJobsByStateName(connection, FailedState.StateName)", span="70-70"];
n33 [cluster="lambda expression", label="Exit lambda expression", span="69-70"];
n34 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73"];
n35 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="75-76"];
n36 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73"];
n37 [cluster="lambda expression", label="Entry lambda expression", span="75-76"];
n38 [cluster="lambda expression", label="GetNumberOfJobsByStateName(connection, ProcessingState.StateName)", span="76-76"];
n39 [cluster="lambda expression", label="Exit lambda expression", span="75-76"];
n40 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79"];
n41 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }));", span="81-91"];
n44 [cluster="lambda expression", label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                })", span="81-91"];
n42 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79"];
n43 [cluster="lambda expression", label="Entry lambda expression", span="81-91"];
n45 [cluster="lambda expression", label="Exit lambda expression", span="81-91"];
n46 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="499-499"];
n47 [cluster="lambda expression", label="Entry lambda expression", span="85-91"];
n48 [cluster="lambda expression", label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }", span="85-91"];
n49 [cluster="lambda expression", label="Exit lambda expression", span="85-91"];
n50 [cluster="Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", label="Entry Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23"];
n51 [cluster="string.Equals(string, System.StringComparison)", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
n52 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
n53 [cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", label="Entry Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", span="84-84"];
n54 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94"];
n55 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }));", span="96-106"];
n58 [cluster="lambda expression", label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                })", span="96-106"];
n56 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94"];
n57 [cluster="lambda expression", label="Entry lambda expression", span="96-106"];
n59 [cluster="lambda expression", label="Exit lambda expression", span="96-106"];
n60 [cluster="lambda expression", label="Entry lambda expression", span="100-106"];
n61 [cluster="lambda expression", label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }", span="100-106"];
n62 [cluster="lambda expression", label="Exit lambda expression", span="100-106"];
n63 [cluster="Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", label="Entry Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23"];
n64 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109"];
n65 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="111-112"];
n66 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109"];
n67 [cluster="lambda expression", label="Entry lambda expression", span="111-112"];
n68 [cluster="lambda expression", label="GetTimelineStats(connection, ''succeeded'')", span="112-112"];
n69 [cluster="lambda expression", label="Exit lambda expression", span="111-112"];
n70 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382"];
n71 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115"];
n72 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="117-118"];
n73 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115"];
n74 [cluster="lambda expression", label="Entry lambda expression", span="117-118"];
n75 [cluster="lambda expression", label="GetTimelineStats(connection, ''failed'')", span="118-118"];
n76 [cluster="lambda expression", label="Exit lambda expression", span="117-118"];
n77 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="121-121"];
n78 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    $@''select * from [{_storage.SchemaName}].Server with (nolock)'', commandTimeout: _storage.CommandTimeout)\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                // ReSharper disable once LoopCanBeConvertedToQuery\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt ?? DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="123-146"];
n79 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="121-121"];
n80 [cluster="Unk.>", label="Entry Unk.>", span=""];
n81 [cluster="lambda expression", label="Entry lambda expression", span="123-146"];
n82 [cluster="lambda expression", label="var servers = connection.Query<Entities.Server>(\r\n                    $@''select * from [{_storage.SchemaName}].Server with (nolock)'', commandTimeout: _storage.CommandTimeout)\r\n                    .ToList()", span="125-127"];
n83 [cluster="lambda expression", label="var result = new List<ServerDto>()", span="129-129"];
n89 [cluster="Unk.ToList", label="Entry Unk.ToList", span=""];
n84 [cluster="lambda expression", label=servers, span="132-132"];
n90 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n86 [cluster="lambda expression", label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt ?? DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="135-142"];
n87 [cluster="lambda expression", label="return result;", span="145-145"];
n85 [cluster="lambda expression", label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="134-134"];
n91 [cluster="Hangfire.Storage.Monitoring.ServerDto.ServerDto()", label="Entry Hangfire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21"];
n92 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n88 [cluster="lambda expression", label="Exit lambda expression", span="123-146"];
n93 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149"];
n94 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }));", span="151-165"];
n97 [cluster="lambda expression", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                })", span="151-165"];
n95 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149"];
n96 [cluster="lambda expression", label="Entry lambda expression", span="151-165"];
n98 [cluster="lambda expression", label="Exit lambda expression", span="151-165"];
n99 [cluster="lambda expression", label="Entry lambda expression", span="156-165"];
n100 [cluster="lambda expression", label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }", span="156-165"];
n101 [cluster="lambda expression", label="Exit lambda expression", span="156-165"];
n102 [cluster="Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", label="Entry Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23"];
n103 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168"];
n104 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }));", span="170-184"];
n107 [cluster="lambda expression", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                })", span="170-184"];
n105 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168"];
n106 [cluster="lambda expression", label="Entry lambda expression", span="170-184"];
n108 [cluster="lambda expression", label="Exit lambda expression", span="170-184"];
n109 [cluster="lambda expression", label="Entry lambda expression", span="175-184"];
n110 [cluster="lambda expression", label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }", span="175-184"];
n111 [cluster="lambda expression", label="Exit lambda expression", span="175-184"];
n112 [cluster="Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", label="Entry Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23"];
n113 [cluster="long.Parse(string)", label="Entry long.Parse(string)", span="0-0"];
n114 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="187-187"];
n115 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }));", span="189-199"];
n118 [cluster="lambda expression", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                })", span="189-199"];
n116 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="187-187"];
n117 [cluster="lambda expression", label="Entry lambda expression", span="189-199"];
n119 [cluster="lambda expression", label="Exit lambda expression", span="189-199"];
n120 [cluster="lambda expression", label="Entry lambda expression", span="194-199"];
n121 [cluster="lambda expression", label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", span="194-199"];
n122 [cluster="lambda expression", label="Exit lambda expression", span="194-199"];
n123 [cluster="Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", label="Entry Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7"];
n124 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="202-202"];
n125 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="var tuples = _storage.QueueProviders\r\n                .Select(x => x.GetJobQueueMonitoringApi())\r\n                .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                .OrderBy(x => x.Queue)\r\n                .ToArray()", span="204-208"];
n126 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="210-210"];
n134 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n135 [cluster="Unk.SelectMany", label="Entry Unk.SelectMany", span=""];
n136 [cluster="Unk.OrderBy", label="Entry Unk.OrderBy", span=""];
n137 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n143 [cluster="lambda expression", label="Entry lambda expression", span="205-205"];
n147 [cluster="lambda expression", label="Entry lambda expression", span="206-206"];
n151 [cluster="lambda expression", label="Entry lambda expression", span="206-206"];
n154 [cluster="lambda expression", label="Entry lambda expression", span="207-207"];
n127 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label=tuples, span="213-213"];
n138 [cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span=""];
n131 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                {\r\n                    Name = tuple.Queue,\r\n                    Length = counters.EnqueuedCount ?? 0,\r\n                    Fetched = counters.FetchedCount,\r\n                    FirstJobs = firstJobs\r\n                })", span="222-228"];
n132 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="return result;", span="231-231"];
n128 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="215-215"];
n129 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="216-216"];
n139 [cluster="Unk.GetEnqueuedJobIds", label="Entry Unk.GetEnqueuedJobIds", span=""];
n130 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="var firstJobs = UseConnection(connection => \r\n                    EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray()))", span="219-220"];
n158 [cluster="lambda expression", label="EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray())", span="220-220"];
n140 [cluster="Unk.GetEnqueuedAndFetchedCount", label="Entry Unk.GetEnqueuedAndFetchedCount", span=""];
n141 [cluster="Unk.UseConnection", label="Entry Unk.UseConnection", span=""];
n157 [cluster="lambda expression", label="Entry lambda expression", span="219-220"];
n142 [cluster="Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", label="Entry Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18"];
n133 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="202-202"];
n144 [cluster="lambda expression", label="x.GetJobQueueMonitoringApi()", span="205-205"];
n145 [cluster="lambda expression", label="Exit lambda expression", span="205-205"];
n146 [cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", span="21-21"];
n148 [cluster="lambda expression", label="x.GetQueues()", span="206-206"];
n149 [cluster="lambda expression", label="Exit lambda expression", span="206-206"];
n150 [cluster="Unk.GetQueues", label="Entry Unk.GetQueues", span=""];
n152 [cluster="lambda expression", label="new { Monitoring = monitoring, Queue = queue }", span="206-206"];
n153 [cluster="lambda expression", label="Exit lambda expression", span="206-206"];
n155 [cluster="lambda expression", label="x.Queue", span="207-207"];
n156 [cluster="lambda expression", label="Exit lambda expression", span="207-207"];
n159 [cluster="lambda expression", label="Exit lambda expression", span="219-220"];
n160 [cluster="Unk.EnqueuedJobs", label="Entry Unk.EnqueuedJobs", span=""];
n161 [cluster="lambda expression", label="Entry lambda expression", span="220-220"];
n162 [cluster="lambda expression", label="(long)x", span="220-220"];
n163 [cluster="lambda expression", label="Exit lambda expression", span="220-220"];
n164 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234"];
n165 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="var queueApi = GetQueueApi(queue)", span="236-236"];
n166 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="237-237"];
n167 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="return UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray()));", span="240-240"];
n169 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="25-25"];
n171 [cluster="lambda expression", label="EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray())", span="240-240"];
n168 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234"];
n170 [cluster="lambda expression", label="Entry lambda expression", span="240-240"];
n172 [cluster="lambda expression", label="Exit lambda expression", span="240-240"];
n173 [cluster="lambda expression", label="Entry lambda expression", span="240-240"];
n174 [cluster="lambda expression", label="(long)x", span="240-240"];
n175 [cluster="lambda expression", label="Exit lambda expression", span="240-240"];
n176 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="243-243"];
n177 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="var queueApi = GetQueueApi(queue)", span="245-245"];
n178 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="246-246"];
n179 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="return UseConnection(connection => FetchedJobs(connection, fetchedJobIds.Select(x => (long)x).ToArray()));", span="249-249"];
n181 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="28-28"];
n183 [cluster="lambda expression", label="FetchedJobs(connection, fetchedJobIds.Select(x => (long)x).ToArray())", span="249-249"];
n180 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="243-243"];
n182 [cluster="lambda expression", label="Entry lambda expression", span="249-249"];
n184 [cluster="lambda expression", label="Exit lambda expression", span="249-249"];
n185 [cluster="Unk.FetchedJobs", label="Entry Unk.FetchedJobs", span=""];
n186 [cluster="lambda expression", label="Entry lambda expression", span="249-249"];
n187 [cluster="lambda expression", label="(long)x", span="249-249"];
n188 [cluster="lambda expression", label="Exit lambda expression", span="249-249"];
n189 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252"];
n190 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="254-255"];
n191 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252"];
n192 [cluster="lambda expression", label="Entry lambda expression", span="254-255"];
n193 [cluster="lambda expression", label="GetHourlyTimelineStats(connection, ''succeeded'')", span="255-255"];
n194 [cluster="lambda expression", label="Exit lambda expression", span="254-255"];
n195 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", span="367-367"];
n196 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="258-258"];
n197 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''failed''));", span="260-261"];
n198 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="258-258"];
n199 [cluster="lambda expression", label="Entry lambda expression", span="260-261"];
n200 [cluster="lambda expression", label="GetHourlyTimelineStats(connection, ''failed'')", span="261-261"];
n201 [cluster="lambda expression", label="Exit lambda expression", span="260-261"];
n202 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264"];
n203 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", label="return UseConnection(connection =>\r\n            {\r\n                string sql = $@''\r\nselect * from [{_storage.SchemaName}].Job with (nolock) where Id = @id\r\nselect * from [{_storage.SchemaName}].JobParameter with (nolock) where JobId = @id\r\nselect * from [{_storage.SchemaName}].State with (nolock) where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }, commandTimeout: _storage.CommandTimeout))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="266-302"];
n207 [cluster="lambda expression", label="var multi = connection.QueryMultiple(sql, new { id = jobId }, commandTimeout: _storage.CommandTimeout)", span="273-273"];
n204 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264"];
n205 [cluster="lambda expression", label="Entry lambda expression", span="266-302"];
n206 [cluster="lambda expression", label="string sql = $@''\r\nselect * from [{_storage.SchemaName}].Job with (nolock) where Id = @id\r\nselect * from [{_storage.SchemaName}].JobParameter with (nolock) where JobId = @id\r\nselect * from [{_storage.SchemaName}].State with (nolock) where JobId = @id order by Id desc''", span="268-271"];
n208 [cluster="lambda expression", label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="275-275"];
n215 [cluster="Unk.QueryMultiple", label="Entry Unk.QueryMultiple", span=""];
n211 [cluster="lambda expression", label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="278-278"];
n212 [cluster="lambda expression", label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList()", span="279-291"];
n209 [cluster="lambda expression", label="job == null", span="276-276"];
n216 [cluster="Unk.SingleOrDefault", label="Entry Unk.SingleOrDefault", span=""];
n213 [cluster="lambda expression", label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="293-300"];
n210 [cluster="lambda expression", label="return null;", span="276-276"];
n217 [cluster="Unk.ToDictionary", label="Entry Unk.ToDictionary", span=""];
n220 [cluster="lambda expression", label="Entry lambda expression", span="278-278"];
n223 [cluster="lambda expression", label="Entry lambda expression", span="278-278"];
n226 [cluster="lambda expression", label="Entry lambda expression", span="282-290"];
n214 [cluster="lambda expression", label="Exit lambda expression", span="266-302"];
n218 [cluster="Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", label="Entry Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22"];
n219 [cluster="Unk.DeserializeJob", label="Entry Unk.DeserializeJob", span=""];
n221 [cluster="lambda expression", label="x.Name", span="278-278"];
n222 [cluster="lambda expression", label="Exit lambda expression", span="278-278"];
n224 [cluster="lambda expression", label="x.Value", span="278-278"];
n225 [cluster="lambda expression", label="Exit lambda expression", span="278-278"];
n227 [cluster="lambda expression", label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            }", span="282-290"];
n228 [cluster="lambda expression", label="Exit lambda expression", span="282-290"];
n229 [cluster="Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", label="Entry Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21"];
n230 [cluster="SafeDictionary<string, string>.cstr", label="Entry SafeDictionary<string, string>.cstr", span=""];
n231 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305"];
n232 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", span="307-308"];
n233 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305"];
n234 [cluster="lambda expression", label="Entry lambda expression", span="307-308"];
n235 [cluster="lambda expression", label="GetNumberOfJobsByStateName(connection, SucceededState.StateName)", span="308-308"];
n236 [cluster="lambda expression", label="Exit lambda expression", span="307-308"];
n237 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="311-311"];
n238 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, DeletedState.StateName));", span="313-314"];
n239 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="311-311"];
n240 [cluster="lambda expression", label="Entry lambda expression", span="313-314"];
n241 [cluster="lambda expression", label="GetNumberOfJobsByStateName(connection, DeletedState.StateName)", span="314-314"];
n242 [cluster="lambda expression", label="Exit lambda expression", span="313-314"];
n243 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="317-317"];
n244 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="string sql = String.Format(@''\r\nset transaction isolation level read committed;\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Enqueued';\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Failed';\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Processing';\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Scheduled';\r\nselect count(Id) from [{0}].Server with (nolock);\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter with (readpast) where [Key] = N'stats:succeeded'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter with (nolock) where [Key] = N'stats:succeeded'\r\n) as s;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter with (readpast) where [Key] = N'stats:deleted'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter with (nolock) where [Key] = N'stats:deleted'\r\n) as s;\r\n\r\nselect count(*) from [{0}].[Set] with (nolock) where [Key] = N'recurring-jobs';\r\n                '', _storage.SchemaName)", span="319-338"];
n245 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="var statistics = UseConnection(connection =>\r\n            {\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql, commandTimeout: _storage.CommandTimeout))\r\n                {\r\n                    stats.Enqueued = multi.ReadSingle<int>();\r\n                    stats.Failed = multi.ReadSingle<int>();\r\n                    stats.Processing = multi.ReadSingle<int>();\r\n                    stats.Scheduled = multi.ReadSingle<int>();\r\n\r\n                    stats.Servers = multi.ReadSingle<int>();\r\n\r\n                    stats.Succeeded = multi.ReadSingleOrDefault<long?>() ?? 0;\r\n                    stats.Deleted = multi.ReadSingleOrDefault<long?>() ?? 0;\r\n\r\n                    stats.Recurring = multi.ReadSingle<int>();\r\n                }\r\n                return stats;\r\n            })", span="340-358"];
n249 [cluster="string.Format(string, object)", label="Entry string.Format(string, object)", span="0-0"];
n254 [cluster="lambda expression", label="var multi = connection.QueryMultiple(sql, commandTimeout: _storage.CommandTimeout)", span="343-343"];
n246 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="statistics.Queues = _storage.QueueProviders\r\n                .SelectMany(x => x.GetJobQueueMonitoringApi().GetQueues())\r\n                .Count()", span="360-362"];
n252 [cluster="lambda expression", label="Entry lambda expression", span="340-358"];
n247 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="return statistics;", span="364-364"];
n250 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
n251 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
n266 [cluster="lambda expression", label="Entry lambda expression", span="361-361"];
n248 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="317-317"];
n253 [cluster="lambda expression", label="var stats = new StatisticsDto()", span="342-342"];
n265 [cluster="Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", label="Entry Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18"];
n255 [cluster="lambda expression", label="stats.Enqueued = multi.ReadSingle<int>()", span="345-345"];
n256 [cluster="lambda expression", label="stats.Failed = multi.ReadSingle<int>()", span="346-346"];
n257 [cluster="lambda expression", label="stats.Processing = multi.ReadSingle<int>()", span="347-347"];
n258 [cluster="lambda expression", label="stats.Scheduled = multi.ReadSingle<int>()", span="348-348"];
n259 [cluster="lambda expression", label="stats.Servers = multi.ReadSingle<int>()", span="350-350"];
n260 [cluster="lambda expression", label="stats.Succeeded = multi.ReadSingleOrDefault<long?>() ?? 0", span="352-352"];
n261 [cluster="lambda expression", label="stats.Deleted = multi.ReadSingleOrDefault<long?>() ?? 0", span="353-353"];
n262 [cluster="lambda expression", label="stats.Recurring = multi.ReadSingle<int>()", span="355-355"];
n263 [cluster="lambda expression", label="return stats;", span="357-357"];
n264 [cluster="lambda expression", label="Exit lambda expression", span="340-358"];
n267 [cluster="lambda expression", label="x.GetJobQueueMonitoringApi().GetQueues()", span="361-361"];
n268 [cluster="lambda expression", label="Exit lambda expression", span="361-361"];
n269 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22"];
n270 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", label="var endDate = DateTime.UtcNow", span="369-369"];
n277 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd-HH'')}'', x => x)", span="377-377"];
n283 [cluster="lambda expression", label="$''stats:{type}:{x.ToString(''yyyy-MM-dd-HH'')}''", span="377-377"];
n278 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", label="return GetTimelineStats(connection, keyMaps);", span="379-379"];
n271 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", label="var dates = new List<DateTime>()", span="370-370"];
n274 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", label="dates.Add(endDate)", span="373-373"];
n275 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", label="endDate = endDate.AddHours(-1)", span="374-374"];
n272 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", label="var i = 0", span="371-371"];
n273 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", label="i < 24", span="371-371"];
n276 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", label="i++", span="371-371"];
n280 [cluster="System.DateTime.AddHours(double)", label="Entry System.DateTime.AddHours(double)", span="0-0"];
n282 [cluster="lambda expression", label="Entry lambda expression", span="377-377"];
n286 [cluster="lambda expression", label="Entry lambda expression", span="377-377"];
n279 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", span="367-367"];
n281 [cluster="Unk.GetTimelineStats", label="Entry Unk.GetTimelineStats", span=""];
n284 [cluster="lambda expression", label="Exit lambda expression", span="377-377"];
n285 [cluster="System.DateTime.ToString(string)", label="Entry System.DateTime.ToString(string)", span="0-0"];
n287 [cluster="lambda expression", label=x, span="377-377"];
n288 [cluster="lambda expression", label="Exit lambda expression", span="377-377"];
n289 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", label="var endDate = DateTime.UtcNow.Date", span="384-384"];
n296 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd'')}'', x => x)", span="392-392"];
n301 [cluster="lambda expression", label="$''stats:{type}:{x.ToString(''yyyy-MM-dd'')}''", span="392-392"];
n297 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", label="return GetTimelineStats(connection, keyMaps);", span="394-394"];
n290 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", label="var dates = new List<DateTime>()", span="385-385"];
n293 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", label="dates.Add(endDate)", span="388-388"];
n294 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", label="endDate = endDate.AddDays(-1)", span="389-389"];
n291 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", label="var i = 0", span="386-386"];
n292 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", label="i < 7", span="386-386"];
n295 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", label="i++", span="386-386"];
n299 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
n300 [cluster="lambda expression", label="Entry lambda expression", span="392-392"];
n303 [cluster="lambda expression", label="Entry lambda expression", span="392-392"];
n298 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382"];
n302 [cluster="lambda expression", label="Exit lambda expression", span="392-392"];
n304 [cluster="lambda expression", label=x, span="392-392"];
n305 [cluster="lambda expression", label="Exit lambda expression", span="392-392"];
n306 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397"];
n307 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="string sqlQuery =\r\n$@''select [Key], [Value] as [Count] from [{_storage.SchemaName}].AggregatedCounter with (nolock)\r\nwhere [Key] in @keys''", span="401-403"];
n308 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keyMaps.Keys },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="405-409"];
n309 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="keyMaps.Keys", span="411-411"];
n314 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="i < keyMaps.Count", span="417-417"];
n315 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="var value = valuesMap[keyMaps.ElementAt(i).Key]", span="419-419"];
n316 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="result.Add(keyMaps.ElementAt(i).Value, value)", span="420-420"];
n320 [cluster="Unk.Query", label="Entry Unk.Query", span=""];
n325 [cluster="lambda expression", label="Entry lambda expression", span="409-409"];
n328 [cluster="lambda expression", label="Entry lambda expression", span="409-409"];
n310 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="!valuesMap.ContainsKey(key)", span="413-413"];
n311 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="valuesMap.Add(key, 0)", span="413-413"];
n312 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="var result = new Dictionary<DateTime, long>()", span="416-416"];
n321 [cluster="Unk.ContainsKey", label="Entry Unk.ContainsKey", span=""];
n322 [cluster="Unk.Add", label="Entry Unk.Add", span=""];
n313 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="var i = 0", span="417-417"];
n323 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n318 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="return result;", span="423-423"];
n317 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="i++", span="417-417"];
n324 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
n319 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397"];
n326 [cluster="lambda expression", label="(string)x.Key", span="409-409"];
n327 [cluster="lambda expression", label="Exit lambda expression", span="409-409"];
n329 [cluster="lambda expression", label="(long)x.Count", span="409-409"];
n330 [cluster="lambda expression", label="Exit lambda expression", span="409-409"];
n331 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", label="var provider = _storage.QueueProviders.GetProvider(queueName)", span="428-428"];
n332 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", label="var monitoringApi = provider.GetJobQueueMonitoringApi()", span="429-429"];
n335 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
n333 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", label="return monitoringApi;", span="431-431"];
n334 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426"];
n336 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", label="return _storage.UseConnection(action);", span="436-436"];
n337 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434"];
n338 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", span="179-179"];
n339 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439"];
n340 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", label="string enqueuedJobsSql = \r\n$@''select j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\nleft join [{_storage.SchemaName}].State s with (nolock) on s.Id = j.StateId\r\nwhere j.Id in @jobIds''", span="441-445"];
n341 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => x.Id, x => x)", span="447-451"];
n342 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", label="var sortedSqlJobs = jobIds\r\n                .Select(jobId => jobs.ContainsKey(jobId) ? jobs[jobId] : new SqlJob { Id = jobId })\r\n                .ToList()", span="453-455"];
n346 [cluster="lambda expression", label="Entry lambda expression", span="451-451"];
n349 [cluster="lambda expression", label="Entry lambda expression", span="451-451"];
n353 [cluster="lambda expression", label="jobs.ContainsKey(jobId) ? jobs[jobId] : new SqlJob { Id = jobId }", span="454-454"];
n343 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", label="return DeserializeJobs(\r\n                sortedSqlJobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", span="457-467"];
n352 [cluster="lambda expression", label="Entry lambda expression", span="454-454"];
n344 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439"];
n345 [cluster="Unk.DeserializeJobs", label="Entry Unk.DeserializeJobs", span=""];
n356 [cluster="lambda expression", label="Entry lambda expression", span="459-467"];
n347 [cluster="lambda expression", label="x.Id", span="451-451"];
n348 [cluster="lambda expression", label="Exit lambda expression", span="451-451"];
n350 [cluster="lambda expression", label=x, span="451-451"];
n351 [cluster="lambda expression", label="Exit lambda expression", span="451-451"];
n354 [cluster="lambda expression", label="Exit lambda expression", span="454-454"];
n355 [cluster="Hangfire.SqlServer.Entities.SqlJob.SqlJob()", label="Entry Hangfire.SqlServer.Entities.SqlJob.SqlJob()", span="20-20"];
n357 [cluster="lambda expression", label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", span="459-467"];
n358 [cluster="lambda expression", label="Exit lambda expression", span="459-467"];
n359 [cluster="Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", label="Entry Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23"];
n360 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", label="var sqlQuery = _jobListLimit.HasValue\r\n                ? $@''select count(j.Id) from (select top (@limit) Id from [{_storage.SchemaName}].Job with (nolock) where StateName = @state) as j''\r\n                : $@''select count(Id) from [{_storage.SchemaName}].Job with (nolock) where StateName = @state''", span="472-474"];
n361 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", label="var count = connection.ExecuteScalar<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName, limit = _jobListLimit },\r\n                 commandTimeout: _storage.CommandTimeout)", span="476-479"];
n362 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", label="return count;", span="481-481"];
n363 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470"];
n364 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484"];
n365 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="486-486"];
n366 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="data.Arguments = arguments", span="487-487"];
n371 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
n367 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="return data.Deserialize();", span="491-491"];
n368 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label=JobLoadException, span="493-493"];
n369 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="return null;", span="495-495"];
n370 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484"];
n372 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="45-45"];
n373 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="string jobsSql = \r\n$@'';with cte as \r\n(\r\n  select j.Id, row_number() over (order by j.Id desc) as row_num\r\n  from [{_storage.SchemaName}].Job j with (nolock, forceseek)\r\n  where j.StateName = @stateName\r\n)\r\nselect j.*, s.Reason as StateReason, s.Data as StateData\r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\ninner join cte on cte.Id = j.Id \r\nleft join [{_storage.SchemaName}].State s with (nolock) on j.StateId = s.Id\r\nwhere cte.row_num between @start and @end\r\norder by j.Id desc''", span="506-518"];
n374 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count },\r\n                        commandTimeout: _storage.CommandTimeout)\r\n                        .ToList()", span="520-524"];
n375 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="return DeserializeJobs(jobs, selector);", span="526-526"];
n376 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="499-499"];
n377 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="529-529"];
n378 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="533-533"];
n379 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label=jobs, span="536-536"];
n384 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="547-547"];
n388 [cluster="System.Collections.Generic.List<T>.List(int)", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
n385 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="550-551"];
n386 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="return new JobList<TDto>(result);", span="554-554"];
n380 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="var dto = default(TDto)", span="538-538"];
n381 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="job.InvocationData != null", span="540-540"];
n382 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="var deserializedData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="542-542"];
n383 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="var stateData = deserializedData != null\r\n                        ? new Dictionary<string, string>(deserializedData, StringComparer.OrdinalIgnoreCase)\r\n                        : null", span="543-545"];
n389 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
n390 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
n391 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
n392 [cluster="long.ToString()", label="Entry long.ToString()", span="0-0"];
n387 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="529-529"];
n393 [cluster="Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", label="Entry Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22"];
n394 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", span="557-557"];
n395 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", label="string fetchedJobsSql = \r\n$@''select j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\nleft join [{_storage.SchemaName}].State s with (nolock) on s.Id = j.StateId\r\nwhere j.Id in @jobIds''", span="559-563"];
n396 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToList()", span="565-569"];
n397 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="571-571"];
n398 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", label=jobs, span="574-574"];
n402 [cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span=""];
n399 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                    }))", span="576-582"];
n400 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", label="return new JobList<FetchedJobDto>(result);", span="585-585"];
n403 [cluster="KeyValuePair<string, FetchedJobDto>.cstr", label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span=""];
n404 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
n405 [cluster="Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", label="Entry Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21"];
n401 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", span="557-557"];
m1_5 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", file="RecurringJobManagerFacts.cs", label="Entry HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", span="20-20"];
m1_6 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", file="RecurringJobManagerFacts.cs", label="_fetcher = new JobFetcher(Redis.Client, queue, TimeSpan.FromSeconds(1))", span="22-22"];
m1_7 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", file="RecurringJobManagerFacts.cs", label="Exit HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", span="20-20"];
m1_4 [cluster="Unk.Given", file="RecurringJobManagerFacts.cs", label="Entry Unk.Given", span=""];
m1_13 [cluster="HangFire.Server.JobFetcher.DequeueJobId()", file="RecurringJobManagerFacts.cs", label="Entry HangFire.Server.JobFetcher.DequeueJobId()", span="20-20"];
m1_14 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", file="RecurringJobManagerFacts.cs", label="Entry HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", span="32-32"];
m1_15 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", file="RecurringJobManagerFacts.cs", label="Assert.AreEqual(JobSteps.DefaultJobId, _jobId)", span="34-34"];
m1_16 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", file="RecurringJobManagerFacts.cs", label="Exit HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", span="32-32"];
m1_18 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsNull()", file="RecurringJobManagerFacts.cs", label="Entry HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsNull()", span="38-38"];
m1_19 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsNull()", file="RecurringJobManagerFacts.cs", label="Assert.IsNull(_jobId)", span="40-40"];
m1_20 [cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsNull()", file="RecurringJobManagerFacts.cs", label="Exit HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsNull()", span="38-38"];
m1_0 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", file="RecurringJobManagerFacts.cs", label="Entry HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", span="14-14"];
m1_1 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", file="RecurringJobManagerFacts.cs", label="Given(String.Format(''the fetcher listening the '{0}' queue'', QueueSteps.DefaultQueue))", span="16-16"];
m1_2 [cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", file="RecurringJobManagerFacts.cs", label="Exit HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", span="14-14"];
m1_9 [cluster="System.TimeSpan.FromSeconds(double)", file="RecurringJobManagerFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m1_17 [cluster="Unk.AreEqual", file="RecurringJobManagerFacts.cs", label="Entry Unk.AreEqual", span=""];
m1_21 [cluster="Unk.IsNull", file="RecurringJobManagerFacts.cs", label="Entry Unk.IsNull", span=""];
m1_10 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", file="RecurringJobManagerFacts.cs", label="Entry HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", span="26-26"];
m1_11 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", file="RecurringJobManagerFacts.cs", label="_jobId = _fetcher.DequeueJobId()", span="28-28"];
m1_12 [cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", file="RecurringJobManagerFacts.cs", label="Exit HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", span="26-26"];
m1_8 [cluster="HangFire.Server.JobFetcher.JobFetcher(IRedisClient, string, System.TimeSpan?)", file="RecurringJobManagerFacts.cs", label="Entry HangFire.Server.JobFetcher.JobFetcher(IRedisClient, string, System.TimeSpan?)", span="12-12"];
m1_22 [file="RecurringJobManagerFacts.cs", label="HangFire.Tests.JobFetcherSteps", span=""];
m2_0 [cluster="HangFire.Server.ServerContext.ServerContext(string, string, int)", file="RecurringJobScheduler.cs", label="Entry HangFire.Server.ServerContext.ServerContext(string, string, int)", span="4-4"];
m2_1 [cluster="HangFire.Server.ServerContext.ServerContext(string, string, int)", color=green, community=0, file="RecurringJobScheduler.cs", label="ServerName = serverName", prediction=0, span="6-6"];
m2_2 [cluster="HangFire.Server.ServerContext.ServerContext(string, string, int)", color=green, community=0, file="RecurringJobScheduler.cs", label="Queue = queue", prediction=1, span="7-7"];
m2_3 [cluster="HangFire.Server.ServerContext.ServerContext(string, string, int)", color=green, community=0, file="RecurringJobScheduler.cs", label="WorkersCount = workersCount", prediction=2, span="8-8"];
m2_4 [cluster="HangFire.Server.ServerContext.ServerContext(string, string, int)", file="RecurringJobScheduler.cs", label="Exit HangFire.Server.ServerContext.ServerContext(string, string, int)", span="4-4"];
m2_5 [file="RecurringJobScheduler.cs", label="HangFire.Server.ServerContext", span=""];
n406 -> n9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n29  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n32  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n35  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n38  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n65  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n68  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n72  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n75  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n158  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n167  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n171  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n179  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n183  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n190  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n193  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n197  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n200  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n232  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n235  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n238  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n241  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n278  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n297  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n307  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n336  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n406 -> n375  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n417 -> n158  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
n418 -> n171  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
n419 -> n183  [color=darkseagreen4, key=1, label=fetchedJobIds, style=dashed];
n422 -> n283  [color=darkseagreen4, key=1, label=string, style=dashed];
n423 -> n301  [color=darkseagreen4, key=1, label=string, style=dashed];
n0 -> n2  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
n9 -> n12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n29 -> n31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n35 -> n37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n41 -> n43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n44 -> n47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n46 -> n375  [color=darkseagreen4, key=1, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", style=dashed];
n55 -> n57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n58 -> n60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n65 -> n67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n70 -> n301  [color=darkseagreen4, key=1, label=string, style=dashed];
n70 -> n297  [color=darkseagreen4, key=1, label=DbConnection, style=dashed];
n72 -> n74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n78 -> n81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n82 -> n84  [color=darkseagreen4, key=1, label=servers, style=dashed];
n83 -> n87  [color=darkseagreen4, key=1, label=result, style=dashed];
n94 -> n96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n97 -> n99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n104 -> n106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n107 -> n109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n115 -> n117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n118 -> n120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n125 -> n143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n125 -> n147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n125 -> n151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n125 -> n154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n125 -> n127  [color=darkseagreen4, key=1, label=tuples, style=dashed];
n126 -> n132  [color=darkseagreen4, key=1, label=result, style=dashed];
n128 -> n158  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
n130 -> n157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n158 -> n161  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n166 -> n171  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
n167 -> n170  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n171 -> n173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n178 -> n183  [color=darkseagreen4, key=1, label=fetchedJobIds, style=dashed];
n179 -> n182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n183 -> n186  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n190 -> n192  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n195 -> n283  [color=darkseagreen4, key=1, label=string, style=dashed];
n195 -> n278  [color=darkseagreen4, key=1, label=DbConnection, style=dashed];
n197 -> n199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n203 -> n205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n211 -> n220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n211 -> n223  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n212 -> n226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n232 -> n234  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n238 -> n240  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n245 -> n252  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n245 -> n247  [color=darkseagreen4, key=1, label=statistics, style=dashed];
n246 -> n266  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n253 -> n263  [color=darkseagreen4, key=1, label=stats, style=dashed];
n270 -> n274  [color=darkseagreen4, key=1, label=endDate, style=dashed];
n277 -> n282  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n277 -> n286  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n271 -> n274  [color=darkseagreen4, key=1, label=dates, style=dashed];
n272 -> n276  [color=darkseagreen4, key=1, label=i, style=dashed];
n276 -> n276  [color=darkseagreen4, key=1, label=i, style=dashed];
n289 -> n293  [color=darkseagreen4, key=1, label=endDate, style=dashed];
n296 -> n300  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n296 -> n303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n290 -> n293  [color=darkseagreen4, key=1, label=dates, style=dashed];
n291 -> n295  [color=darkseagreen4, key=1, label=i, style=dashed];
n295 -> n295  [color=darkseagreen4, key=1, label=i, style=dashed];
n306 -> n309  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
n306 -> n314  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
n306 -> n316  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
n308 -> n325  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n308 -> n328  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n308 -> n310  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
n308 -> n311  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
n309 -> n311  [color=darkseagreen4, key=1, label=key, style=dashed];
n312 -> n316  [color=darkseagreen4, key=1, label=result, style=dashed];
n312 -> n318  [color=darkseagreen4, key=1, label=result, style=dashed];
n313 -> n316  [color=darkseagreen4, key=1, label=i, style=dashed];
n313 -> n317  [color=darkseagreen4, key=1, label=i, style=dashed];
n317 -> n317  [color=darkseagreen4, key=1, label=i, style=dashed];
n341 -> n346  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n341 -> n349  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n342 -> n352  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n343 -> n356  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n365 -> n367  [color=darkseagreen4, key=1, label=data, style=dashed];
n377 -> n379  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>", style=dashed];
n378 -> n385  [color=darkseagreen4, key=1, label=result, style=dashed];
n378 -> n386  [color=darkseagreen4, key=1, label=result, style=dashed];
n379 -> n381  [color=darkseagreen4, key=1, label=job, style=dashed];
n379 -> n385  [color=darkseagreen4, key=1, label=job, style=dashed];
n380 -> n385  [color=darkseagreen4, key=1, label=dto, style=dashed];
n396 -> n398  [color=darkseagreen4, key=1, label=jobs, style=dashed];
n397 -> n400  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_22 -> m1_15  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherSteps", style=dashed];
m1_22 -> m1_19  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherSteps", style=dashed];
}
