digraph  {
n406 [label="Hangfire.SqlServer.SqlServerMonitoringApi", span=""];
n407 [label=int, span=""];
n408 [label=int, span=""];
n409 [label=int, span=""];
n410 [label=int, span=""];
n411 [label=int, span=""];
n412 [label=int, span=""];
n413 [label=int, span=""];
n414 [label=int, span=""];
n415 [label=int, span=""];
n416 [label=int, span=""];
n417 [label=enqueuedJobIds, span=""];
n418 [label=enqueuedJobIds, span=""];
n419 [label=fetchedJobIds, span=""];
n420 [label=string, span=""];
n421 [label=sql, span=""];
n422 [label=string, span=""];
n423 [label=string, span=""];
n424 [label=jobs, span=""];
n0 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="37-37", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)"];
n1 [label="storage == null", span="39-39", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)"];
n2 [label="throw new ArgumentNullException(nameof(storage));", span="39-39", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)"];
n3 [label="_storage = storage", span="41-41", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)"];
n4 [label="_jobListLimit = jobListLimit", span="42-42", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)"];
n5 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="37-37", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)"];
n6 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n7 [label="Entry Unk.nameof", span="", cluster="Unk.nameof"];
n8 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()"];
n9 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ScheduledState.StateName));", span="47-48", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()"];
n10 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()"];
n11 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)"];
n12 [label="Entry lambda expression", span="47-48", cluster="lambda expression"];
n13 [label="GetNumberOfJobsByStateName(connection, ScheduledState.StateName)", span="48-48", cluster="lambda expression"];
n14 [label="Exit lambda expression", span="47-48", cluster="lambda expression"];
n15 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)"];
n16 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)"];
n17 [label="var queueApi = GetQueueApi(queue)", span="53-53", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)"];
n18 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="54-54", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)"];
n21 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)"];
n19 [label="return counters.EnqueuedCount ?? 0;", span="56-56", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)"];
n22 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="30-30", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)"];
n20 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)"];
n23 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="59-59", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)"];
n24 [label="var queueApi = GetQueueApi(queue)", span="61-61", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)"];
n25 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="62-62", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)"];
n26 [label="return counters.FetchedCount ?? 0;", span="64-64", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)"];
n27 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="59-59", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)"];
n28 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="67-67", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()"];
n29 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, FailedState.StateName));", span="69-70", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()"];
n30 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="67-67", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()"];
n31 [label="Entry lambda expression", span="69-70", cluster="lambda expression"];
n32 [label="GetNumberOfJobsByStateName(connection, FailedState.StateName)", span="70-70", cluster="lambda expression"];
n33 [label="Exit lambda expression", span="69-70", cluster="lambda expression"];
n34 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()"];
n35 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="75-76", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()"];
n36 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()"];
n37 [label="Entry lambda expression", span="75-76", cluster="lambda expression"];
n38 [label="GetNumberOfJobsByStateName(connection, ProcessingState.StateName)", span="76-76", cluster="lambda expression"];
n39 [label="Exit lambda expression", span="75-76", cluster="lambda expression"];
n40 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)"];
n41 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }));", span="81-91", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)"];
n44 [label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                })", span="81-91", cluster="lambda expression"];
n42 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)"];
n43 [label="Entry lambda expression", span="81-91", cluster="lambda expression"];
n45 [label="Exit lambda expression", span="81-91", cluster="lambda expression"];
n46 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="499-499", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n47 [label="Entry lambda expression", span="85-91", cluster="lambda expression"];
n48 [label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }", span="85-91", cluster="lambda expression"];
n49 [label="Exit lambda expression", span="85-91", cluster="lambda expression"];
n50 [label="Entry Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()"];
n51 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)"];
n52 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)"];
n53 [label="Entry Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", span="84-84", cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)"];
n54 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)"];
n55 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }));", span="96-106", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)"];
n58 [label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                })", span="96-106", cluster="lambda expression"];
n56 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)"];
n57 [label="Entry lambda expression", span="96-106", cluster="lambda expression"];
n59 [label="Exit lambda expression", span="96-106", cluster="lambda expression"];
n60 [label="Entry lambda expression", span="100-106", cluster="lambda expression"];
n61 [label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }", span="100-106", cluster="lambda expression"];
n62 [label="Exit lambda expression", span="100-106", cluster="lambda expression"];
n63 [label="Entry Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()"];
n64 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()"];
n65 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="111-112", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()"];
n66 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()"];
n67 [label="Entry lambda expression", span="111-112", cluster="lambda expression"];
n68 [label="GetTimelineStats(connection, ''succeeded'')", span="112-112", cluster="lambda expression"];
n69 [label="Exit lambda expression", span="111-112", cluster="lambda expression"];
n70 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)"];
n71 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()"];
n72 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="117-118", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()"];
n73 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()"];
n74 [label="Entry lambda expression", span="117-118", cluster="lambda expression"];
n75 [label="GetTimelineStats(connection, ''failed'')", span="118-118", cluster="lambda expression"];
n76 [label="Exit lambda expression", span="117-118", cluster="lambda expression"];
n77 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="121-121", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()"];
n78 [label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    $@''select * from [{_storage.SchemaName}].Server with (nolock)'', commandTimeout: _storage.CommandTimeout)\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                // ReSharper disable once LoopCanBeConvertedToQuery\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt ?? DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="123-146", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()"];
n79 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="121-121", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()"];
n80 [label="Entry Unk.>", span="", cluster="Unk.>"];
n81 [label="Entry lambda expression", span="123-146", cluster="lambda expression"];
n82 [label="var servers = connection.Query<Entities.Server>(\r\n                    $@''select * from [{_storage.SchemaName}].Server with (nolock)'', commandTimeout: _storage.CommandTimeout)\r\n                    .ToList()", span="125-127", cluster="lambda expression"];
n83 [label="var result = new List<ServerDto>()", span="129-129", cluster="lambda expression"];
n89 [label="Entry Unk.ToList", span="", cluster="Unk.ToList"];
n84 [label=servers, span="132-132", cluster="lambda expression"];
n90 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n86 [label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt ?? DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="135-142", cluster="lambda expression"];
n87 [label="return result;", span="145-145", cluster="lambda expression"];
n85 [label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="134-134", cluster="lambda expression"];
n91 [label="Entry Hangfire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.ServerDto.ServerDto()"];
n92 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
n88 [label="Exit lambda expression", span="123-146", cluster="lambda expression"];
n93 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)"];
n94 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }));", span="151-165", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)"];
n97 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                })", span="151-165", cluster="lambda expression"];
n95 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)"];
n96 [label="Entry lambda expression", span="151-165", cluster="lambda expression"];
n98 [label="Exit lambda expression", span="151-165", cluster="lambda expression"];
n99 [label="Entry lambda expression", span="156-165", cluster="lambda expression"];
n100 [label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }", span="156-165", cluster="lambda expression"];
n101 [label="Exit lambda expression", span="156-165", cluster="lambda expression"];
n102 [label="Entry Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()"];
n103 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)"];
n104 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }));", span="170-184", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)"];
n107 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                })", span="170-184", cluster="lambda expression"];
n105 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)"];
n106 [label="Entry lambda expression", span="170-184", cluster="lambda expression"];
n108 [label="Exit lambda expression", span="170-184", cluster="lambda expression"];
n109 [label="Entry lambda expression", span="175-184", cluster="lambda expression"];
n110 [label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }", span="175-184", cluster="lambda expression"];
n111 [label="Exit lambda expression", span="175-184", cluster="lambda expression"];
n112 [label="Entry Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()"];
n113 [label="Entry long.Parse(string)", span="0-0", cluster="long.Parse(string)"];
n114 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="187-187", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)"];
n115 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }));", span="189-199", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)"];
n118 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                })", span="189-199", cluster="lambda expression"];
n116 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="187-187", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)"];
n117 [label="Entry lambda expression", span="189-199", cluster="lambda expression"];
n119 [label="Exit lambda expression", span="189-199", cluster="lambda expression"];
n120 [label="Entry lambda expression", span="194-199", cluster="lambda expression"];
n121 [label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", span="194-199", cluster="lambda expression"];
n122 [label="Exit lambda expression", span="194-199", cluster="lambda expression"];
n123 [label="Entry Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7", cluster="Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()"];
n124 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="202-202", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n125 [label="var tuples = _storage.QueueProviders\r\n                .Select(x => x.GetJobQueueMonitoringApi())\r\n                .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                .OrderBy(x => x.Queue)\r\n                .ToArray()", span="204-208", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n126 [label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="210-210", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n134 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n135 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany"];
n136 [label="Entry Unk.OrderBy", span="", cluster="Unk.OrderBy"];
n137 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
n143 [label="Entry lambda expression", span="205-205", cluster="lambda expression"];
n147 [label="Entry lambda expression", span="206-206", cluster="lambda expression"];
n151 [label="Entry lambda expression", span="206-206", cluster="lambda expression"];
n154 [label="Entry lambda expression", span="207-207", cluster="lambda expression"];
n127 [label=tuples, span="213-213", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n138 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr"];
n131 [label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                {\r\n                    Name = tuple.Queue,\r\n                    Length = counters.EnqueuedCount ?? 0,\r\n                    Fetched = counters.FetchedCount,\r\n                    FirstJobs = firstJobs\r\n                })", span="222-228", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n132 [label="return result;", span="231-231", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n128 [label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="215-215", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n129 [label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="216-216", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n139 [label="Entry Unk.GetEnqueuedJobIds", span="", cluster="Unk.GetEnqueuedJobIds"];
n130 [label="var firstJobs = UseConnection(connection => \r\n                    EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray()))", span="219-220", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n158 [label="EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray())", span="220-220", cluster="lambda expression"];
n140 [label="Entry Unk.GetEnqueuedAndFetchedCount", span="", cluster="Unk.GetEnqueuedAndFetchedCount"];
n141 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection"];
n157 [label="Entry lambda expression", span="219-220", cluster="lambda expression"];
n142 [label="Entry Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18", cluster="Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()"];
n133 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="202-202", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n144 [label="x.GetJobQueueMonitoringApi()", span="205-205", cluster="lambda expression"];
n145 [label="Exit lambda expression", span="205-205", cluster="lambda expression"];
n146 [label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", span="21-21", cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()"];
n148 [label="x.GetQueues()", span="206-206", cluster="lambda expression"];
n149 [label="Exit lambda expression", span="206-206", cluster="lambda expression"];
n150 [label="Entry Unk.GetQueues", span="", cluster="Unk.GetQueues"];
n152 [label="new { Monitoring = monitoring, Queue = queue }", span="206-206", cluster="lambda expression"];
n153 [label="Exit lambda expression", span="206-206", cluster="lambda expression"];
n155 [label="x.Queue", span="207-207", cluster="lambda expression"];
n156 [label="Exit lambda expression", span="207-207", cluster="lambda expression"];
n159 [label="Exit lambda expression", span="219-220", cluster="lambda expression"];
n160 [label="Entry Unk.EnqueuedJobs", span="", cluster="Unk.EnqueuedJobs"];
n161 [label="Entry lambda expression", span="220-220", cluster="lambda expression"];
n162 [label="(long)x", span="220-220", cluster="lambda expression"];
n163 [label="Exit lambda expression", span="220-220", cluster="lambda expression"];
n164 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)"];
n165 [label="var queueApi = GetQueueApi(queue)", span="236-236", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)"];
n166 [label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="237-237", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)"];
n167 [label="return UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray()));", span="240-240", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)"];
n169 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="25-25", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)"];
n171 [label="EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray())", span="240-240", cluster="lambda expression"];
n168 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)"];
n170 [label="Entry lambda expression", span="240-240", cluster="lambda expression"];
n172 [label="Exit lambda expression", span="240-240", cluster="lambda expression"];
n173 [label="Entry lambda expression", span="240-240", cluster="lambda expression"];
n174 [label="(long)x", span="240-240", cluster="lambda expression"];
n175 [label="Exit lambda expression", span="240-240", cluster="lambda expression"];
n176 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="243-243", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)"];
n177 [label="var queueApi = GetQueueApi(queue)", span="245-245", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)"];
n178 [label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="246-246", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)"];
n179 [label="return UseConnection(connection => FetchedJobs(connection, fetchedJobIds.Select(x => (long)x).ToArray()));", span="249-249", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)"];
n181 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="28-28", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)"];
n183 [label="FetchedJobs(connection, fetchedJobIds.Select(x => (long)x).ToArray())", span="249-249", cluster="lambda expression"];
n180 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="243-243", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)"];
n182 [label="Entry lambda expression", span="249-249", cluster="lambda expression"];
n184 [label="Exit lambda expression", span="249-249", cluster="lambda expression"];
n185 [label="Entry Unk.FetchedJobs", span="", cluster="Unk.FetchedJobs"];
n186 [label="Entry lambda expression", span="249-249", cluster="lambda expression"];
n187 [label="(long)x", span="249-249", cluster="lambda expression"];
n188 [label="Exit lambda expression", span="249-249", cluster="lambda expression"];
n189 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()"];
n190 [label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="254-255", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()"];
n191 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()"];
n192 [label="Entry lambda expression", span="254-255", cluster="lambda expression"];
n193 [label="GetHourlyTimelineStats(connection, ''succeeded'')", span="255-255", cluster="lambda expression"];
n194 [label="Exit lambda expression", span="254-255", cluster="lambda expression"];
n195 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", span="367-367", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)"];
n196 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="258-258", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()"];
n197 [label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''failed''));", span="260-261", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()"];
n198 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="258-258", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()"];
n199 [label="Entry lambda expression", span="260-261", cluster="lambda expression"];
n200 [label="GetHourlyTimelineStats(connection, ''failed'')", span="261-261", cluster="lambda expression"];
n201 [label="Exit lambda expression", span="260-261", cluster="lambda expression"];
n202 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)"];
n203 [label="return UseConnection(connection =>\r\n            {\r\n                string sql = $@''\r\nselect * from [{_storage.SchemaName}].Job with (nolock) where Id = @id\r\nselect * from [{_storage.SchemaName}].JobParameter with (nolock) where JobId = @id\r\nselect * from [{_storage.SchemaName}].State with (nolock) where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }, commandTimeout: _storage.CommandTimeout))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="266-302", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)"];
n207 [label="var multi = connection.QueryMultiple(sql, new { id = jobId }, commandTimeout: _storage.CommandTimeout)", span="273-273", cluster="lambda expression"];
n204 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)"];
n205 [label="Entry lambda expression", span="266-302", cluster="lambda expression"];
n206 [label="string sql = $@''\r\nselect * from [{_storage.SchemaName}].Job with (nolock) where Id = @id\r\nselect * from [{_storage.SchemaName}].JobParameter with (nolock) where JobId = @id\r\nselect * from [{_storage.SchemaName}].State with (nolock) where JobId = @id order by Id desc''", span="268-271", cluster="lambda expression"];
n208 [label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="275-275", cluster="lambda expression"];
n215 [label="Entry Unk.QueryMultiple", span="", cluster="Unk.QueryMultiple"];
n211 [label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="278-278", cluster="lambda expression"];
n212 [label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList()", span="279-291", cluster="lambda expression"];
n209 [label="job == null", span="276-276", cluster="lambda expression"];
n216 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault"];
n213 [label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="293-300", cluster="lambda expression"];
n210 [label="return null;", span="276-276", cluster="lambda expression"];
n217 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary"];
n220 [label="Entry lambda expression", span="278-278", cluster="lambda expression"];
n223 [label="Entry lambda expression", span="278-278", cluster="lambda expression"];
n226 [label="Entry lambda expression", span="282-290", cluster="lambda expression"];
n214 [label="Exit lambda expression", span="266-302", cluster="lambda expression"];
n218 [label="Entry Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22", cluster="Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()"];
n219 [label="Entry Unk.DeserializeJob", span="", cluster="Unk.DeserializeJob"];
n221 [label="x.Name", span="278-278", cluster="lambda expression"];
n222 [label="Exit lambda expression", span="278-278", cluster="lambda expression"];
n224 [label="x.Value", span="278-278", cluster="lambda expression"];
n225 [label="Exit lambda expression", span="278-278", cluster="lambda expression"];
n227 [label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            }", span="282-290", cluster="lambda expression"];
n228 [label="Exit lambda expression", span="282-290", cluster="lambda expression"];
n229 [label="Entry Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()"];
n230 [label="Entry SafeDictionary<string, string>.cstr", span="", cluster="SafeDictionary<string, string>.cstr"];
n231 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()"];
n232 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", span="307-308", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()"];
n233 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()"];
n234 [label="Entry lambda expression", span="307-308", cluster="lambda expression"];
n235 [label="GetNumberOfJobsByStateName(connection, SucceededState.StateName)", span="308-308", cluster="lambda expression"];
n236 [label="Exit lambda expression", span="307-308", cluster="lambda expression"];
n237 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="311-311", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()"];
n238 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, DeletedState.StateName));", span="313-314", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()"];
n239 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="311-311", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()"];
n240 [label="Entry lambda expression", span="313-314", cluster="lambda expression"];
n241 [label="GetNumberOfJobsByStateName(connection, DeletedState.StateName)", span="314-314", cluster="lambda expression"];
n242 [label="Exit lambda expression", span="313-314", cluster="lambda expression"];
n243 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="317-317", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n244 [label="string sql = String.Format(@''\r\nset transaction isolation level read committed;\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Enqueued';\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Failed';\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Processing';\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Scheduled';\r\nselect count(Id) from [{0}].Server with (nolock);\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter with (readpast) where [Key] = N'stats:succeeded'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter with (nolock) where [Key] = N'stats:succeeded'\r\n) as s;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter with (readpast) where [Key] = N'stats:deleted'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter with (nolock) where [Key] = N'stats:deleted'\r\n) as s;\r\n\r\nselect count(*) from [{0}].[Set] with (nolock) where [Key] = N'recurring-jobs';\r\n                '', _storage.SchemaName)", span="319-338", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n245 [label="var statistics = UseConnection(connection =>\r\n            {\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql, commandTimeout: _storage.CommandTimeout))\r\n                {\r\n                    stats.Enqueued = multi.ReadSingle<int>();\r\n                    stats.Failed = multi.ReadSingle<int>();\r\n                    stats.Processing = multi.ReadSingle<int>();\r\n                    stats.Scheduled = multi.ReadSingle<int>();\r\n\r\n                    stats.Servers = multi.ReadSingle<int>();\r\n\r\n                    stats.Succeeded = multi.ReadSingleOrDefault<long?>() ?? 0;\r\n                    stats.Deleted = multi.ReadSingleOrDefault<long?>() ?? 0;\r\n\r\n                    stats.Recurring = multi.ReadSingle<int>();\r\n                }\r\n                return stats;\r\n            })", span="340-358", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n249 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)"];
n254 [label="var multi = connection.QueryMultiple(sql, commandTimeout: _storage.CommandTimeout)", span="343-343", cluster="lambda expression"];
n246 [label="statistics.Queues = _storage.QueueProviders\r\n                .SelectMany(x => x.GetJobQueueMonitoringApi().GetQueues())\r\n                .Count()", span="360-362", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n252 [label="Entry lambda expression", span="340-358", cluster="lambda expression"];
n247 [label="return statistics;", span="364-364", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n250 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)"];
n251 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()"];
n266 [label="Entry lambda expression", span="361-361", cluster="lambda expression"];
n248 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="317-317", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n253 [label="var stats = new StatisticsDto()", span="342-342", cluster="lambda expression"];
n265 [label="Entry Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18", cluster="Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()"];
n255 [label="stats.Enqueued = multi.ReadSingle<int>()", span="345-345", cluster="lambda expression"];
n256 [label="stats.Failed = multi.ReadSingle<int>()", span="346-346", cluster="lambda expression"];
n257 [label="stats.Processing = multi.ReadSingle<int>()", span="347-347", cluster="lambda expression"];
n258 [label="stats.Scheduled = multi.ReadSingle<int>()", span="348-348", cluster="lambda expression"];
n259 [label="stats.Servers = multi.ReadSingle<int>()", span="350-350", cluster="lambda expression"];
n260 [label="stats.Succeeded = multi.ReadSingleOrDefault<long?>() ?? 0", span="352-352", cluster="lambda expression"];
n261 [label="stats.Deleted = multi.ReadSingleOrDefault<long?>() ?? 0", span="353-353", cluster="lambda expression"];
n262 [label="stats.Recurring = multi.ReadSingle<int>()", span="355-355", cluster="lambda expression"];
n263 [label="return stats;", span="357-357", cluster="lambda expression"];
n264 [label="Exit lambda expression", span="340-358", cluster="lambda expression"];
n267 [label="x.GetJobQueueMonitoringApi().GetQueues()", span="361-361", cluster="lambda expression"];
n268 [label="Exit lambda expression", span="361-361", cluster="lambda expression"];
n269 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()"];
n270 [label="var endDate = DateTime.UtcNow", span="369-369", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)"];
n277 [label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd-HH'')}'', x => x)", span="377-377", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)"];
n283 [label="$''stats:{type}:{x.ToString(''yyyy-MM-dd-HH'')}''", span="377-377", cluster="lambda expression"];
n278 [label="return GetTimelineStats(connection, keyMaps);", span="379-379", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)"];
n271 [label="var dates = new List<DateTime>()", span="370-370", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)"];
n274 [label="dates.Add(endDate)", span="373-373", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)"];
n275 [label="endDate = endDate.AddHours(-1)", span="374-374", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)"];
n272 [label="var i = 0", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)"];
n273 [label="i < 24", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)"];
n276 [label="i++", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)"];
n280 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)"];
n282 [label="Entry lambda expression", span="377-377", cluster="lambda expression"];
n286 [label="Entry lambda expression", span="377-377", cluster="lambda expression"];
n279 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", span="367-367", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)"];
n281 [label="Entry Unk.GetTimelineStats", span="", cluster="Unk.GetTimelineStats"];
n284 [label="Exit lambda expression", span="377-377", cluster="lambda expression"];
n285 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)"];
n287 [label=x, span="377-377", cluster="lambda expression"];
n288 [label="Exit lambda expression", span="377-377", cluster="lambda expression"];
n289 [label="var endDate = DateTime.UtcNow.Date", span="384-384", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)"];
n296 [label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd'')}'', x => x)", span="392-392", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)"];
n301 [label="$''stats:{type}:{x.ToString(''yyyy-MM-dd'')}''", span="392-392", cluster="lambda expression"];
n297 [label="return GetTimelineStats(connection, keyMaps);", span="394-394", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)"];
n290 [label="var dates = new List<DateTime>()", span="385-385", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)"];
n293 [label="dates.Add(endDate)", span="388-388", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)"];
n294 [label="endDate = endDate.AddDays(-1)", span="389-389", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)"];
n291 [label="var i = 0", span="386-386", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)"];
n292 [label="i < 7", span="386-386", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)"];
n295 [label="i++", span="386-386", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)"];
n299 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)"];
n300 [label="Entry lambda expression", span="392-392", cluster="lambda expression"];
n303 [label="Entry lambda expression", span="392-392", cluster="lambda expression"];
n298 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)"];
n302 [label="Exit lambda expression", span="392-392", cluster="lambda expression"];
n304 [label=x, span="392-392", cluster="lambda expression"];
n305 [label="Exit lambda expression", span="392-392", cluster="lambda expression"];
n306 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n307 [label="string sqlQuery =\r\n$@''select [Key], [Value] as [Count] from [{_storage.SchemaName}].AggregatedCounter with (nolock)\r\nwhere [Key] in @keys''", span="401-403", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n308 [label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keyMaps.Keys },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="405-409", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n309 [label="keyMaps.Keys", span="411-411", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n314 [label="i < keyMaps.Count", span="417-417", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n315 [label="var value = valuesMap[keyMaps.ElementAt(i).Key]", span="419-419", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n316 [label="result.Add(keyMaps.ElementAt(i).Value, value)", span="420-420", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n320 [label="Entry Unk.Query", span="", cluster="Unk.Query"];
n325 [label="Entry lambda expression", span="409-409", cluster="lambda expression"];
n328 [label="Entry lambda expression", span="409-409", cluster="lambda expression"];
n310 [label="!valuesMap.ContainsKey(key)", span="413-413", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n311 [label="valuesMap.Add(key, 0)", span="413-413", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n312 [label="var result = new Dictionary<DateTime, long>()", span="416-416", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n321 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey"];
n322 [label="Entry Unk.Add", span="", cluster="Unk.Add"];
n313 [label="var i = 0", span="417-417", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n323 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
n318 [label="return result;", span="423-423", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n317 [label="i++", span="417-417", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n324 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)"];
n319 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n326 [label="(string)x.Key", span="409-409", cluster="lambda expression"];
n327 [label="Exit lambda expression", span="409-409", cluster="lambda expression"];
n329 [label="(long)x.Count", span="409-409", cluster="lambda expression"];
n330 [label="Exit lambda expression", span="409-409", cluster="lambda expression"];
n331 [label="var provider = _storage.QueueProviders.GetProvider(queueName)", span="428-428", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)"];
n332 [label="var monitoringApi = provider.GetJobQueueMonitoringApi()", span="429-429", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)"];
n335 [label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53", cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)"];
n333 [label="return monitoringApi;", span="431-431", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)"];
n334 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)"];
n336 [label="return _storage.UseConnection(action);", span="436-436", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)"];
n337 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)"];
n338 [label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", span="179-179", cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)"];
n339 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])"];
n340 [label="string enqueuedJobsSql = \r\n$@''select j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\nleft join [{_storage.SchemaName}].State s with (nolock) on s.Id = j.StateId\r\nwhere j.Id in @jobIds''", span="441-445", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])"];
n341 [label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => x.Id, x => x)", span="447-451", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])"];
n342 [label="var sortedSqlJobs = jobIds\r\n                .Select(jobId => jobs.ContainsKey(jobId) ? jobs[jobId] : new SqlJob { Id = jobId })\r\n                .ToList()", span="453-455", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])"];
n346 [label="Entry lambda expression", span="451-451", cluster="lambda expression"];
n349 [label="Entry lambda expression", span="451-451", cluster="lambda expression"];
n353 [label="jobs.ContainsKey(jobId) ? jobs[jobId] : new SqlJob { Id = jobId }", span="454-454", cluster="lambda expression"];
n343 [label="return DeserializeJobs(\r\n                sortedSqlJobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", span="457-467", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])"];
n352 [label="Entry lambda expression", span="454-454", cluster="lambda expression"];
n344 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])"];
n345 [label="Entry Unk.DeserializeJobs", span="", cluster="Unk.DeserializeJobs"];
n356 [label="Entry lambda expression", span="459-467", cluster="lambda expression"];
n347 [label="x.Id", span="451-451", cluster="lambda expression"];
n348 [label="Exit lambda expression", span="451-451", cluster="lambda expression"];
n350 [label=x, span="451-451", cluster="lambda expression"];
n351 [label="Exit lambda expression", span="451-451", cluster="lambda expression"];
n354 [label="Exit lambda expression", span="454-454", cluster="lambda expression"];
n355 [label="Entry Hangfire.SqlServer.Entities.SqlJob.SqlJob()", span="20-20", cluster="Hangfire.SqlServer.Entities.SqlJob.SqlJob()"];
n357 [label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", span="459-467", cluster="lambda expression"];
n358 [label="Exit lambda expression", span="459-467", cluster="lambda expression"];
n359 [label="Entry Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()"];
n360 [label="var sqlQuery = _jobListLimit.HasValue\r\n                ? $@''select count(j.Id) from (select top (@limit) Id from [{_storage.SchemaName}].Job with (nolock) where StateName = @state) as j''\r\n                : $@''select count(Id) from [{_storage.SchemaName}].Job with (nolock) where StateName = @state''", span="472-474", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)"];
n361 [label="var count = connection.ExecuteScalar<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName, limit = _jobListLimit },\r\n                 commandTimeout: _storage.CommandTimeout)", span="476-479", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)"];
n362 [label="return count;", span="481-481", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)"];
n363 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)"];
n364 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n365 [label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="486-486", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n366 [label="data.Arguments = arguments", span="487-487", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n371 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)"];
n367 [label="return data.Deserialize();", span="491-491", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n368 [label=JobLoadException, span="493-493", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n369 [label="return null;", span="495-495", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n370 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n372 [label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="45-45", cluster="Hangfire.Storage.InvocationData.Deserialize()"];
n373 [label="string jobsSql = \r\n$@'';with cte as \r\n(\r\n  select j.Id, row_number() over (order by j.Id desc) as row_num\r\n  from [{_storage.SchemaName}].Job j with (nolock, forceseek)\r\n  where j.StateName = @stateName\r\n)\r\nselect j.*, s.Reason as StateReason, s.Data as StateData\r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\ninner join cte on cte.Id = j.Id \r\nleft join [{_storage.SchemaName}].State s with (nolock) on j.StateId = s.Id\r\nwhere cte.row_num between @start and @end\r\norder by j.Id desc''", span="506-518", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n374 [label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count },\r\n                        commandTimeout: _storage.CommandTimeout)\r\n                        .ToList()", span="520-524", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n375 [label="return DeserializeJobs(jobs, selector);", span="526-526", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n376 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="499-499", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n377 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="529-529", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n378 [label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="533-533", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n379 [label=jobs, span="536-536", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n384 [label="dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="547-547", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n388 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)"];
n385 [label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="550-551", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n386 [label="return new JobList<TDto>(result);", span="554-554", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n380 [label="var dto = default(TDto)", span="538-538", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n381 [label="job.InvocationData != null", span="540-540", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n382 [label="var deserializedData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="542-542", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n383 [label="var stateData = deserializedData != null\r\n                        ? new Dictionary<string, string>(deserializedData, StringComparer.OrdinalIgnoreCase)\r\n                        : null", span="543-545", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n389 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)"];
n390 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)"];
n391 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)"];
n392 [label="Entry long.ToString()", span="0-0", cluster="long.ToString()"];
n387 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="529-529", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n393 [label="Entry Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22", cluster="Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)"];
n394 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", span="557-557", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)"];
n395 [label="string fetchedJobsSql = \r\n$@''select j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\nleft join [{_storage.SchemaName}].State s with (nolock) on s.Id = j.StateId\r\nwhere j.Id in @jobIds''", span="559-563", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)"];
n396 [label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToList()", span="565-569", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)"];
n397 [label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="571-571", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)"];
n398 [label=jobs, span="574-574", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)"];
n402 [label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span="", cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr"];
n399 [label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                    }))", span="576-582", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)"];
n400 [label="return new JobList<FetchedJobDto>(result);", span="585-585", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)"];
n403 [label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span="", cluster="KeyValuePair<string, FetchedJobDto>.cstr"];
n404 [label="Entry Unk.ToString", span="", cluster="Unk.ToString"];
n405 [label="Entry Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()"];
n401 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", span="557-557", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)"];
m1_5 [label="Entry HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", span="20-20", cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", file="RecurringJobManagerFacts.cs"];
m1_6 [label="_fetcher = new JobFetcher(Redis.Client, queue, TimeSpan.FromSeconds(1))", span="22-22", cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", file="RecurringJobManagerFacts.cs"];
m1_7 [label="Exit HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", span="20-20", cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue(string)", file="RecurringJobManagerFacts.cs"];
m1_4 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="RecurringJobManagerFacts.cs"];
m1_13 [label="Entry HangFire.Server.JobFetcher.DequeueJobId()", span="20-20", cluster="HangFire.Server.JobFetcher.DequeueJobId()", file="RecurringJobManagerFacts.cs"];
m1_14 [label="Entry HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", span="32-32", cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", file="RecurringJobManagerFacts.cs"];
m1_15 [label="Assert.AreEqual(JobSteps.DefaultJobId, _jobId)", span="34-34", cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", file="RecurringJobManagerFacts.cs"];
m1_16 [label="Exit HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", span="32-32", cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsTheJob()", file="RecurringJobManagerFacts.cs"];
m1_18 [label="Entry HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsNull()", span="38-38", cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsNull()", file="RecurringJobManagerFacts.cs"];
m1_19 [label="Assert.IsNull(_jobId)", span="40-40", cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsNull()", file="RecurringJobManagerFacts.cs"];
m1_20 [label="Exit HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsNull()", span="38-38", cluster="HangFire.Tests.JobFetcherSteps.ThenTheFetcherReturnsNull()", file="RecurringJobManagerFacts.cs"];
m1_0 [label="Entry HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", span="14-14", cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", file="RecurringJobManagerFacts.cs"];
m1_1 [label="Given(String.Format(''the fetcher listening the '{0}' queue'', QueueSteps.DefaultQueue))", span="16-16", cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", file="RecurringJobManagerFacts.cs"];
m1_2 [label="Exit HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", span="14-14", cluster="HangFire.Tests.JobFetcherSteps.GivenTheFetcherListeningTheQueue()", file="RecurringJobManagerFacts.cs"];
m1_9 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="RecurringJobManagerFacts.cs"];
m1_17 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="RecurringJobManagerFacts.cs"];
m1_21 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="RecurringJobManagerFacts.cs"];
m1_10 [label="Entry HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", span="26-26", cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", file="RecurringJobManagerFacts.cs"];
m1_11 [label="_jobId = _fetcher.DequeueJobId()", span="28-28", cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", file="RecurringJobManagerFacts.cs"];
m1_12 [label="Exit HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", span="26-26", cluster="HangFire.Tests.JobFetcherSteps.WhenItDequeuesAJob()", file="RecurringJobManagerFacts.cs"];
m1_8 [label="Entry HangFire.Server.JobFetcher.JobFetcher(IRedisClient, string, System.TimeSpan?)", span="12-12", cluster="HangFire.Server.JobFetcher.JobFetcher(IRedisClient, string, System.TimeSpan?)", file="RecurringJobManagerFacts.cs"];
m1_22 [label="HangFire.Tests.JobFetcherSteps", span="", file="RecurringJobManagerFacts.cs"];
m2_0 [label="Entry HangFire.Server.ServerContext.ServerContext(string, string, int)", span="4-4", cluster="HangFire.Server.ServerContext.ServerContext(string, string, int)", file="RecurringJobScheduler.cs"];
m2_1 [label="ServerName = serverName", span="6-6", cluster="HangFire.Server.ServerContext.ServerContext(string, string, int)", color=green, community=0, file="RecurringJobScheduler.cs"];
m2_2 [label="Queue = queue", span="7-7", cluster="HangFire.Server.ServerContext.ServerContext(string, string, int)", color=green, community=0, file="RecurringJobScheduler.cs"];
m2_3 [label="WorkersCount = workersCount", span="8-8", cluster="HangFire.Server.ServerContext.ServerContext(string, string, int)", color=green, community=0, file="RecurringJobScheduler.cs"];
m2_4 [label="Exit HangFire.Server.ServerContext.ServerContext(string, string, int)", span="4-4", cluster="HangFire.Server.ServerContext.ServerContext(string, string, int)", file="RecurringJobScheduler.cs"];
m2_5 [label="HangFire.Server.ServerContext", span="", file="RecurringJobScheduler.cs"];
n406 -> n3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n38  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n44  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n58  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n65  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n68  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n72  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n78  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n82  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n94  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n97  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n104  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n107  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n115  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n118  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n125  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n130  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n158  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n165  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n167  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n171  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n177  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n179  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n183  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n190  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n193  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n197  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n200  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n203  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n206  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n207  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n213  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n232  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n235  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n238  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n241  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n244  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n245  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n254  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n246  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n278  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n297  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n307  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n308  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n331  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n336  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n340  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n341  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n343  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n360  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n361  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n373  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n374  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n375  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n395  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n396  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n406 -> n399  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n407 -> n44  [key=1, style=dashed, color=darkseagreen4, label=int];
n408 -> n44  [key=1, style=dashed, color=darkseagreen4, label=int];
n409 -> n58  [key=1, style=dashed, color=darkseagreen4, label=int];
n410 -> n58  [key=1, style=dashed, color=darkseagreen4, label=int];
n411 -> n97  [key=1, style=dashed, color=darkseagreen4, label=int];
n412 -> n97  [key=1, style=dashed, color=darkseagreen4, label=int];
n413 -> n107  [key=1, style=dashed, color=darkseagreen4, label=int];
n414 -> n107  [key=1, style=dashed, color=darkseagreen4, label=int];
n415 -> n118  [key=1, style=dashed, color=darkseagreen4, label=int];
n416 -> n118  [key=1, style=dashed, color=darkseagreen4, label=int];
n417 -> n158  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
n418 -> n171  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
n419 -> n183  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobIds];
n420 -> n207  [key=1, style=dashed, color=darkseagreen4, label=string];
n421 -> n254  [key=1, style=dashed, color=darkseagreen4, label=sql];
n422 -> n283  [key=1, style=dashed, color=darkseagreen4, label=string];
n423 -> n301  [key=1, style=dashed, color=darkseagreen4, label=string];
n424 -> n353  [key=1, style=dashed, color=darkseagreen4, label=jobs];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
n0 -> n3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
n0 -> n4  [key=1, style=dashed, color=darkseagreen4, label="int?"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=0, style=solid];
n2 -> n5  [key=0, style=solid];
n2 -> n6  [key=2, style=dotted];
n2 -> n7  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n5 -> n0  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n11  [key=2, style=dotted];
n9 -> n12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n10 -> n8  [key=0, style=bold, color=blue];
n11 -> n336  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n13 -> n15  [key=2, style=dotted];
n14 -> n12  [key=0, style=bold, color=blue];
n15 -> n360  [key=0, style=solid];
n15 -> n361  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
n16 -> n17  [key=0, style=solid];
n16 -> n18  [key=1, style=dashed, color=darkseagreen4, label=string];
n17 -> n18  [key=0, style=solid];
n17 -> n21  [key=2, style=dotted];
n18 -> n19  [key=0, style=solid];
n18 -> n22  [key=2, style=dotted];
n21 -> n331  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n20 -> n16  [key=0, style=bold, color=blue];
n23 -> n24  [key=0, style=solid];
n23 -> n25  [key=1, style=dashed, color=darkseagreen4, label=string];
n24 -> n25  [key=0, style=solid];
n24 -> n21  [key=2, style=dotted];
n25 -> n26  [key=0, style=solid];
n25 -> n22  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n27 -> n23  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid];
n29 -> n30  [key=0, style=solid];
n29 -> n11  [key=2, style=dotted];
n29 -> n31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n30 -> n28  [key=0, style=bold, color=blue];
n31 -> n32  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n32 -> n15  [key=2, style=dotted];
n33 -> n31  [key=0, style=bold, color=blue];
n34 -> n35  [key=0, style=solid];
n35 -> n36  [key=0, style=solid];
n35 -> n11  [key=2, style=dotted];
n35 -> n37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n36 -> n34  [key=0, style=bold, color=blue];
n37 -> n38  [key=0, style=solid];
n38 -> n39  [key=0, style=solid];
n38 -> n15  [key=2, style=dotted];
n39 -> n37  [key=0, style=bold, color=blue];
n40 -> n41  [key=0, style=solid];
n40 -> n44  [key=1, style=dashed, color=darkseagreen4, label=int];
n41 -> n42  [key=0, style=solid];
n41 -> n11  [key=2, style=dotted];
n41 -> n43  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n44 -> n45  [key=0, style=solid];
n44 -> n46  [key=2, style=dotted];
n44 -> n47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n42 -> n40  [key=0, style=bold, color=blue];
n43 -> n44  [key=0, style=solid];
n45 -> n43  [key=0, style=bold, color=blue];
n46 -> n373  [key=0, style=solid];
n46 -> n374  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
n46 -> n375  [key=1, style=dashed, color=darkseagreen4, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
n47 -> n48  [key=0, style=solid];
n48 -> n49  [key=0, style=solid];
n48 -> n50  [key=2, style=dotted];
n48 -> n51  [key=2, style=dotted];
n48 -> n52  [key=2, style=dotted];
n48 -> n53  [key=2, style=dotted];
n49 -> n47  [key=0, style=bold, color=blue];
n54 -> n55  [key=0, style=solid];
n54 -> n58  [key=1, style=dashed, color=darkseagreen4, label=int];
n55 -> n56  [key=0, style=solid];
n55 -> n11  [key=2, style=dotted];
n55 -> n57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n58 -> n59  [key=0, style=solid];
n58 -> n46  [key=2, style=dotted];
n58 -> n60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n56 -> n54  [key=0, style=bold, color=blue];
n57 -> n58  [key=0, style=solid];
n59 -> n57  [key=0, style=bold, color=blue];
n60 -> n61  [key=0, style=solid];
n61 -> n62  [key=0, style=solid];
n61 -> n63  [key=2, style=dotted];
n61 -> n51  [key=2, style=dotted];
n61 -> n53  [key=2, style=dotted];
n62 -> n60  [key=0, style=bold, color=blue];
n64 -> n65  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n65 -> n11  [key=2, style=dotted];
n65 -> n67  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n66 -> n64  [key=0, style=bold, color=blue];
n67 -> n68  [key=0, style=solid];
n68 -> n69  [key=0, style=solid];
n68 -> n70  [key=2, style=dotted];
n69 -> n67  [key=0, style=bold, color=blue];
n70 -> n289  [key=0, style=solid];
n70 -> n296  [key=1, style=dashed, color=darkseagreen4, label=string];
n70 -> n301  [key=1, style=dashed, color=darkseagreen4, label=string];
n70 -> n297  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
n71 -> n72  [key=0, style=solid];
n72 -> n73  [key=0, style=solid];
n72 -> n11  [key=2, style=dotted];
n72 -> n74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n73 -> n71  [key=0, style=bold, color=blue];
n74 -> n75  [key=0, style=solid];
n75 -> n76  [key=0, style=solid];
n75 -> n70  [key=2, style=dotted];
n76 -> n74  [key=0, style=bold, color=blue];
n77 -> n78  [key=0, style=solid];
n78 -> n79  [key=0, style=solid];
n78 -> n80  [key=2, style=dotted];
n78 -> n81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n79 -> n77  [key=0, style=bold, color=blue];
n81 -> n82  [key=0, style=solid];
n82 -> n83  [key=0, style=solid];
n82 -> n80  [key=2, style=dotted];
n82 -> n89  [key=2, style=dotted];
n82 -> n84  [key=1, style=dashed, color=darkseagreen4, label=servers];
n83 -> n84  [key=0, style=solid];
n83 -> n90  [key=2, style=dotted];
n83 -> n86  [key=1, style=dashed, color=darkseagreen4, label=result];
n83 -> n87  [key=1, style=dashed, color=darkseagreen4, label=result];
n84 -> n85  [key=0, style=solid];
n84 -> n87  [key=0, style=solid];
n84 -> n86  [key=1, style=dashed, color=darkseagreen4, label=server];
n86 -> n84  [key=0, style=solid];
n86 -> n91  [key=2, style=dotted];
n86 -> n92  [key=2, style=dotted];
n87 -> n88  [key=0, style=solid];
n85 -> n86  [key=0, style=solid];
n85 -> n80  [key=2, style=dotted];
n88 -> n81  [key=0, style=bold, color=blue];
n93 -> n94  [key=0, style=solid];
n93 -> n97  [key=1, style=dashed, color=darkseagreen4, label=int];
n94 -> n95  [key=0, style=solid];
n94 -> n11  [key=2, style=dotted];
n94 -> n96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n97 -> n98  [key=0, style=solid];
n97 -> n46  [key=2, style=dotted];
n97 -> n99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n95 -> n93  [key=0, style=bold, color=blue];
n96 -> n97  [key=0, style=solid];
n98 -> n96  [key=0, style=bold, color=blue];
n99 -> n100  [key=0, style=solid];
n100 -> n101  [key=0, style=solid];
n100 -> n102  [key=2, style=dotted];
n100 -> n51  [key=2, style=dotted];
n100 -> n53  [key=2, style=dotted];
n101 -> n99  [key=0, style=bold, color=blue];
n103 -> n104  [key=0, style=solid];
n103 -> n107  [key=1, style=dashed, color=darkseagreen4, label=int];
n104 -> n105  [key=0, style=solid];
n104 -> n11  [key=2, style=dotted];
n104 -> n106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n107 -> n108  [key=0, style=solid];
n107 -> n46  [key=2, style=dotted];
n107 -> n109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n105 -> n103  [key=0, style=bold, color=blue];
n106 -> n107  [key=0, style=solid];
n108 -> n106  [key=0, style=bold, color=blue];
n109 -> n110  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n110 -> n112  [key=2, style=dotted];
n110 -> n51  [key=2, style=dotted];
n110 -> n52  [key=2, style=dotted];
n110 -> n113  [key=2, style=dotted];
n110 -> n53  [key=2, style=dotted];
n111 -> n109  [key=0, style=bold, color=blue];
n114 -> n115  [key=0, style=solid];
n114 -> n118  [key=1, style=dashed, color=darkseagreen4, label=int];
n115 -> n116  [key=0, style=solid];
n115 -> n11  [key=2, style=dotted];
n115 -> n117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n118 -> n119  [key=0, style=solid];
n118 -> n46  [key=2, style=dotted];
n118 -> n120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n116 -> n114  [key=0, style=bold, color=blue];
n117 -> n118  [key=0, style=solid];
n119 -> n117  [key=0, style=bold, color=blue];
n120 -> n121  [key=0, style=solid];
n121 -> n122  [key=0, style=solid];
n121 -> n123  [key=2, style=dotted];
n121 -> n51  [key=2, style=dotted];
n121 -> n53  [key=2, style=dotted];
n122 -> n120  [key=0, style=bold, color=blue];
n124 -> n125  [key=0, style=solid];
n125 -> n126  [key=0, style=solid];
n125 -> n134  [key=2, style=dotted];
n125 -> n135  [key=2, style=dotted];
n125 -> n136  [key=2, style=dotted];
n125 -> n137  [key=2, style=dotted];
n125 -> n143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n125 -> n147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n125 -> n151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n125 -> n154  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n125 -> n127  [key=1, style=dashed, color=darkseagreen4, label=tuples];
n126 -> n127  [key=0, style=solid];
n126 -> n138  [key=2, style=dotted];
n126 -> n131  [key=1, style=dashed, color=darkseagreen4, label=result];
n126 -> n132  [key=1, style=dashed, color=darkseagreen4, label=result];
n143 -> n144  [key=0, style=solid];
n147 -> n148  [key=0, style=solid];
n151 -> n152  [key=0, style=solid];
n154 -> n155  [key=0, style=solid];
n127 -> n128  [key=0, style=solid];
n127 -> n132  [key=0, style=solid];
n127 -> n129  [key=1, style=dashed, color=darkseagreen4, label=tuple];
n127 -> n131  [key=1, style=dashed, color=darkseagreen4, label=tuple];
n131 -> n127  [key=0, style=solid];
n131 -> n142  [key=2, style=dotted];
n131 -> n92  [key=2, style=dotted];
n132 -> n133  [key=0, style=solid];
n128 -> n129  [key=0, style=solid];
n128 -> n139  [key=2, style=dotted];
n128 -> n130  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
n128 -> n158  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
n129 -> n130  [key=0, style=solid];
n129 -> n140  [key=2, style=dotted];
n129 -> n131  [key=1, style=dashed, color=darkseagreen4, label=counters];
n130 -> n131  [key=0, style=solid];
n130 -> n141  [key=2, style=dotted];
n130 -> n157  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n158 -> n159  [key=0, style=solid];
n158 -> n134  [key=2, style=dotted];
n158 -> n137  [key=2, style=dotted];
n158 -> n160  [key=2, style=dotted];
n158 -> n161  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n157 -> n158  [key=0, style=solid];
n133 -> n124  [key=0, style=bold, color=blue];
n144 -> n145  [key=0, style=solid];
n144 -> n146  [key=2, style=dotted];
n145 -> n143  [key=0, style=bold, color=blue];
n148 -> n149  [key=0, style=solid];
n148 -> n150  [key=2, style=dotted];
n149 -> n147  [key=0, style=bold, color=blue];
n152 -> n153  [key=0, style=solid];
n153 -> n151  [key=0, style=bold, color=blue];
n155 -> n156  [key=0, style=solid];
n156 -> n154  [key=0, style=bold, color=blue];
n159 -> n157  [key=0, style=bold, color=blue];
n161 -> n162  [key=0, style=solid];
n162 -> n163  [key=0, style=solid];
n163 -> n161  [key=0, style=bold, color=blue];
n164 -> n165  [key=0, style=solid];
n164 -> n166  [key=1, style=dashed, color=darkseagreen4, label=string];
n165 -> n166  [key=0, style=solid];
n165 -> n21  [key=2, style=dotted];
n166 -> n167  [key=0, style=solid];
n166 -> n169  [key=2, style=dotted];
n166 -> n171  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
n167 -> n168  [key=0, style=solid];
n167 -> n141  [key=2, style=dotted];
n167 -> n170  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n171 -> n172  [key=0, style=solid];
n171 -> n134  [key=2, style=dotted];
n171 -> n137  [key=2, style=dotted];
n171 -> n160  [key=2, style=dotted];
n171 -> n173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n168 -> n164  [key=0, style=bold, color=blue];
n170 -> n171  [key=0, style=solid];
n172 -> n170  [key=0, style=bold, color=blue];
n173 -> n174  [key=0, style=solid];
n174 -> n175  [key=0, style=solid];
n175 -> n173  [key=0, style=bold, color=blue];
n176 -> n177  [key=0, style=solid];
n176 -> n178  [key=1, style=dashed, color=darkseagreen4, label=string];
n177 -> n178  [key=0, style=solid];
n177 -> n21  [key=2, style=dotted];
n178 -> n179  [key=0, style=solid];
n178 -> n181  [key=2, style=dotted];
n178 -> n183  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobIds];
n179 -> n180  [key=0, style=solid];
n179 -> n141  [key=2, style=dotted];
n179 -> n182  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n183 -> n184  [key=0, style=solid];
n183 -> n134  [key=2, style=dotted];
n183 -> n137  [key=2, style=dotted];
n183 -> n185  [key=2, style=dotted];
n183 -> n186  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n180 -> n176  [key=0, style=bold, color=blue];
n182 -> n183  [key=0, style=solid];
n184 -> n182  [key=0, style=bold, color=blue];
n186 -> n187  [key=0, style=solid];
n187 -> n188  [key=0, style=solid];
n188 -> n186  [key=0, style=bold, color=blue];
n189 -> n190  [key=0, style=solid];
n190 -> n191  [key=0, style=solid];
n190 -> n11  [key=2, style=dotted];
n190 -> n192  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n191 -> n189  [key=0, style=bold, color=blue];
n192 -> n193  [key=0, style=solid];
n193 -> n194  [key=0, style=solid];
n193 -> n195  [key=2, style=dotted];
n194 -> n192  [key=0, style=bold, color=blue];
n195 -> n270  [key=0, style=solid];
n195 -> n277  [key=1, style=dashed, color=darkseagreen4, label=string];
n195 -> n283  [key=1, style=dashed, color=darkseagreen4, label=string];
n195 -> n278  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
n196 -> n197  [key=0, style=solid];
n197 -> n198  [key=0, style=solid];
n197 -> n11  [key=2, style=dotted];
n197 -> n199  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n198 -> n196  [key=0, style=bold, color=blue];
n199 -> n200  [key=0, style=solid];
n200 -> n201  [key=0, style=solid];
n200 -> n195  [key=2, style=dotted];
n201 -> n199  [key=0, style=bold, color=blue];
n202 -> n203  [key=0, style=solid];
n202 -> n207  [key=1, style=dashed, color=darkseagreen4, label=string];
n203 -> n204  [key=0, style=solid];
n203 -> n11  [key=2, style=dotted];
n203 -> n205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n207 -> n208  [key=0, style=solid];
n207 -> n215  [key=2, style=dotted];
n207 -> n211  [key=1, style=dashed, color=darkseagreen4, label=multi];
n207 -> n212  [key=1, style=dashed, color=darkseagreen4, label=multi];
n204 -> n202  [key=0, style=bold, color=blue];
n205 -> n206  [key=0, style=solid];
n205 -> n207  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
n206 -> n207  [key=0, style=solid];
n208 -> n209  [key=0, style=solid];
n208 -> n80  [key=2, style=dotted];
n208 -> n216  [key=2, style=dotted];
n208 -> n213  [key=1, style=dashed, color=darkseagreen4, label=job];
n211 -> n212  [key=0, style=solid];
n211 -> n80  [key=2, style=dotted];
n211 -> n217  [key=2, style=dotted];
n211 -> n220  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n211 -> n223  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n211 -> n213  [key=1, style=dashed, color=darkseagreen4, label=parameters];
n212 -> n213  [key=0, style=solid];
n212 -> n80  [key=2, style=dotted];
n212 -> n89  [key=2, style=dotted];
n212 -> n134  [key=2, style=dotted];
n212 -> n226  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n209 -> n210  [key=0, style=solid];
n209 -> n211  [key=0, style=solid];
n213 -> n214  [key=0, style=solid];
n213 -> n218  [key=2, style=dotted];
n213 -> n219  [key=2, style=dotted];
n210 -> n214  [key=0, style=solid];
n220 -> n221  [key=0, style=solid];
n223 -> n224  [key=0, style=solid];
n226 -> n227  [key=0, style=solid];
n214 -> n205  [key=0, style=bold, color=blue];
n221 -> n222  [key=0, style=solid];
n222 -> n220  [key=0, style=bold, color=blue];
n224 -> n225  [key=0, style=solid];
n225 -> n223  [key=0, style=bold, color=blue];
n227 -> n228  [key=0, style=solid];
n227 -> n229  [key=2, style=dotted];
n227 -> n230  [key=2, style=dotted];
n227 -> n80  [key=2, style=dotted];
n228 -> n226  [key=0, style=bold, color=blue];
n231 -> n232  [key=0, style=solid];
n232 -> n233  [key=0, style=solid];
n232 -> n11  [key=2, style=dotted];
n232 -> n234  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n233 -> n231  [key=0, style=bold, color=blue];
n234 -> n235  [key=0, style=solid];
n235 -> n236  [key=0, style=solid];
n235 -> n15  [key=2, style=dotted];
n236 -> n234  [key=0, style=bold, color=blue];
n237 -> n238  [key=0, style=solid];
n238 -> n239  [key=0, style=solid];
n238 -> n11  [key=2, style=dotted];
n238 -> n240  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n239 -> n237  [key=0, style=bold, color=blue];
n240 -> n241  [key=0, style=solid];
n241 -> n242  [key=0, style=solid];
n241 -> n15  [key=2, style=dotted];
n242 -> n240  [key=0, style=bold, color=blue];
n243 -> n244  [key=0, style=solid];
n244 -> n245  [key=0, style=solid];
n244 -> n249  [key=2, style=dotted];
n244 -> n254  [key=1, style=dashed, color=darkseagreen4, label=sql];
n245 -> n246  [key=0, style=solid];
n245 -> n11  [key=2, style=dotted];
n245 -> n252  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n245 -> n247  [key=1, style=dashed, color=darkseagreen4, label=statistics];
n254 -> n255  [key=0, style=solid];
n254 -> n215  [key=2, style=dotted];
n254 -> n256  [key=1, style=dashed, color=darkseagreen4, label=multi];
n254 -> n257  [key=1, style=dashed, color=darkseagreen4, label=multi];
n254 -> n258  [key=1, style=dashed, color=darkseagreen4, label=multi];
n254 -> n259  [key=1, style=dashed, color=darkseagreen4, label=multi];
n254 -> n260  [key=1, style=dashed, color=darkseagreen4, label=multi];
n254 -> n261  [key=1, style=dashed, color=darkseagreen4, label=multi];
n254 -> n262  [key=1, style=dashed, color=darkseagreen4, label=multi];
n246 -> n247  [key=0, style=solid];
n246 -> n250  [key=2, style=dotted];
n246 -> n251  [key=2, style=dotted];
n246 -> n266  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n252 -> n253  [key=0, style=solid];
n252 -> n254  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
n247 -> n248  [key=0, style=solid];
n266 -> n267  [key=0, style=solid];
n248 -> n243  [key=0, style=bold, color=blue];
n253 -> n254  [key=0, style=solid];
n253 -> n265  [key=2, style=dotted];
n253 -> n255  [key=1, style=dashed, color=darkseagreen4, label=stats];
n253 -> n256  [key=1, style=dashed, color=darkseagreen4, label=stats];
n253 -> n257  [key=1, style=dashed, color=darkseagreen4, label=stats];
n253 -> n258  [key=1, style=dashed, color=darkseagreen4, label=stats];
n253 -> n259  [key=1, style=dashed, color=darkseagreen4, label=stats];
n253 -> n260  [key=1, style=dashed, color=darkseagreen4, label=stats];
n253 -> n261  [key=1, style=dashed, color=darkseagreen4, label=stats];
n253 -> n262  [key=1, style=dashed, color=darkseagreen4, label=stats];
n253 -> n263  [key=1, style=dashed, color=darkseagreen4, label=stats];
n255 -> n256  [key=0, style=solid];
n255 -> n80  [key=2, style=dotted];
n256 -> n257  [key=0, style=solid];
n256 -> n80  [key=2, style=dotted];
n257 -> n258  [key=0, style=solid];
n257 -> n80  [key=2, style=dotted];
n258 -> n259  [key=0, style=solid];
n258 -> n80  [key=2, style=dotted];
n259 -> n260  [key=0, style=solid];
n259 -> n80  [key=2, style=dotted];
n260 -> n261  [key=0, style=solid];
n260 -> n80  [key=2, style=dotted];
n261 -> n262  [key=0, style=solid];
n261 -> n80  [key=2, style=dotted];
n262 -> n263  [key=0, style=solid];
n262 -> n80  [key=2, style=dotted];
n263 -> n264  [key=0, style=solid];
n264 -> n252  [key=0, style=bold, color=blue];
n267 -> n268  [key=0, style=solid];
n267 -> n146  [key=2, style=dotted];
n267 -> n269  [key=2, style=dotted];
n268 -> n266  [key=0, style=bold, color=blue];
n270 -> n271  [key=0, style=solid];
n270 -> n274  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n270 -> n275  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n277 -> n278  [key=0, style=solid];
n277 -> n217  [key=2, style=dotted];
n277 -> n282  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n277 -> n286  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n283 -> n284  [key=0, style=solid];
n283 -> n285  [key=2, style=dotted];
n278 -> n279  [key=0, style=solid];
n278 -> n281  [key=2, style=dotted];
n271 -> n272  [key=0, style=solid];
n271 -> n90  [key=2, style=dotted];
n271 -> n274  [key=1, style=dashed, color=darkseagreen4, label=dates];
n271 -> n277  [key=1, style=dashed, color=darkseagreen4, label=dates];
n274 -> n275  [key=0, style=solid];
n274 -> n92  [key=2, style=dotted];
n275 -> n276  [key=0, style=solid];
n275 -> n280  [key=2, style=dotted];
n275 -> n275  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n272 -> n273  [key=0, style=solid];
n272 -> n276  [key=1, style=dashed, color=darkseagreen4, label=i];
n273 -> n274  [key=0, style=solid];
n273 -> n277  [key=0, style=solid];
n276 -> n273  [key=0, style=solid];
n276 -> n276  [key=1, style=dashed, color=darkseagreen4, label=i];
n282 -> n283  [key=0, style=solid];
n286 -> n287  [key=0, style=solid];
n279 -> n195  [key=0, style=bold, color=blue];
n284 -> n282  [key=0, style=bold, color=blue];
n287 -> n288  [key=0, style=solid];
n288 -> n286  [key=0, style=bold, color=blue];
n289 -> n290  [key=0, style=solid];
n289 -> n293  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n289 -> n294  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n296 -> n297  [key=0, style=solid];
n296 -> n217  [key=2, style=dotted];
n296 -> n300  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n296 -> n303  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n301 -> n302  [key=0, style=solid];
n301 -> n285  [key=2, style=dotted];
n297 -> n298  [key=0, style=solid];
n297 -> n281  [key=2, style=dotted];
n290 -> n291  [key=0, style=solid];
n290 -> n90  [key=2, style=dotted];
n290 -> n293  [key=1, style=dashed, color=darkseagreen4, label=dates];
n290 -> n296  [key=1, style=dashed, color=darkseagreen4, label=dates];
n293 -> n294  [key=0, style=solid];
n293 -> n92  [key=2, style=dotted];
n294 -> n295  [key=0, style=solid];
n294 -> n299  [key=2, style=dotted];
n294 -> n294  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n291 -> n292  [key=0, style=solid];
n291 -> n295  [key=1, style=dashed, color=darkseagreen4, label=i];
n292 -> n293  [key=0, style=solid];
n292 -> n296  [key=0, style=solid];
n295 -> n292  [key=0, style=solid];
n295 -> n295  [key=1, style=dashed, color=darkseagreen4, label=i];
n300 -> n301  [key=0, style=solid];
n303 -> n304  [key=0, style=solid];
n298 -> n70  [key=0, style=bold, color=blue];
n302 -> n300  [key=0, style=bold, color=blue];
n304 -> n305  [key=0, style=solid];
n305 -> n303  [key=0, style=bold, color=blue];
n306 -> n307  [key=0, style=solid];
n306 -> n308  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
n306 -> n309  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
n306 -> n314  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
n306 -> n315  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
n306 -> n316  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
n307 -> n308  [key=0, style=solid];
n308 -> n309  [key=0, style=solid];
n308 -> n320  [key=2, style=dotted];
n308 -> n217  [key=2, style=dotted];
n308 -> n325  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n308 -> n328  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n308 -> n310  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
n308 -> n311  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
n308 -> n315  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
n309 -> n310  [key=0, style=solid];
n309 -> n312  [key=0, style=solid];
n309 -> n311  [key=1, style=dashed, color=darkseagreen4, label=key];
n314 -> n315  [key=0, style=solid];
n314 -> n318  [key=0, style=solid];
n315 -> n316  [key=0, style=solid];
n315 -> n324  [key=2, style=dotted];
n316 -> n317  [key=0, style=solid];
n316 -> n324  [key=2, style=dotted];
n316 -> n322  [key=2, style=dotted];
n325 -> n326  [key=0, style=solid];
n328 -> n329  [key=0, style=solid];
n310 -> n311  [key=0, style=solid];
n310 -> n309  [key=0, style=solid];
n310 -> n321  [key=2, style=dotted];
n311 -> n309  [key=0, style=solid];
n311 -> n322  [key=2, style=dotted];
n312 -> n313  [key=0, style=solid];
n312 -> n323  [key=2, style=dotted];
n312 -> n316  [key=1, style=dashed, color=darkseagreen4, label=result];
n312 -> n318  [key=1, style=dashed, color=darkseagreen4, label=result];
n313 -> n314  [key=0, style=solid];
n313 -> n315  [key=1, style=dashed, color=darkseagreen4, label=i];
n313 -> n316  [key=1, style=dashed, color=darkseagreen4, label=i];
n313 -> n317  [key=1, style=dashed, color=darkseagreen4, label=i];
n318 -> n319  [key=0, style=solid];
n317 -> n314  [key=0, style=solid];
n317 -> n317  [key=1, style=dashed, color=darkseagreen4, label=i];
n319 -> n306  [key=0, style=bold, color=blue];
n326 -> n327  [key=0, style=solid];
n327 -> n325  [key=0, style=bold, color=blue];
n329 -> n330  [key=0, style=solid];
n330 -> n328  [key=0, style=bold, color=blue];
n331 -> n332  [key=0, style=solid];
n331 -> n335  [key=2, style=dotted];
n332 -> n333  [key=0, style=solid];
n332 -> n146  [key=2, style=dotted];
n333 -> n334  [key=0, style=solid];
n334 -> n21  [key=0, style=bold, color=blue];
n336 -> n337  [key=0, style=solid];
n336 -> n338  [key=2, style=dotted];
n337 -> n11  [key=0, style=bold, color=blue];
n339 -> n340  [key=0, style=solid];
n339 -> n341  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
n339 -> n342  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
n340 -> n341  [key=0, style=solid];
n341 -> n342  [key=0, style=solid];
n341 -> n80  [key=2, style=dotted];
n341 -> n217  [key=2, style=dotted];
n341 -> n346  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n341 -> n349  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n341 -> n353  [key=1, style=dashed, color=darkseagreen4, label=jobs];
n342 -> n343  [key=0, style=solid];
n342 -> n134  [key=2, style=dotted];
n342 -> n89  [key=2, style=dotted];
n342 -> n352  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n346 -> n347  [key=0, style=solid];
n349 -> n350  [key=0, style=solid];
n353 -> n354  [key=0, style=solid];
n353 -> n321  [key=2, style=dotted];
n353 -> n355  [key=2, style=dotted];
n343 -> n344  [key=0, style=solid];
n343 -> n345  [key=2, style=dotted];
n343 -> n356  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n352 -> n353  [key=0, style=solid];
n344 -> n339  [key=0, style=bold, color=blue];
n356 -> n357  [key=0, style=solid];
n347 -> n348  [key=0, style=solid];
n348 -> n346  [key=0, style=bold, color=blue];
n350 -> n351  [key=0, style=solid];
n351 -> n349  [key=0, style=bold, color=blue];
n354 -> n352  [key=0, style=bold, color=blue];
n357 -> n358  [key=0, style=solid];
n357 -> n359  [key=2, style=dotted];
n357 -> n51  [key=2, style=dotted];
n357 -> n53  [key=2, style=dotted];
n358 -> n356  [key=0, style=bold, color=blue];
n360 -> n361  [key=0, style=solid];
n361 -> n362  [key=0, style=solid];
n361 -> n80  [key=2, style=dotted];
n362 -> n363  [key=0, style=solid];
n363 -> n15  [key=0, style=bold, color=blue];
n364 -> n365  [key=0, style=solid];
n364 -> n366  [key=1, style=dashed, color=darkseagreen4, label=string];
n365 -> n366  [key=0, style=solid];
n365 -> n371  [key=2, style=dotted];
n365 -> n367  [key=1, style=dashed, color=darkseagreen4, label=data];
n366 -> n367  [key=0, style=solid];
n367 -> n370  [key=0, style=solid];
n367 -> n372  [key=2, style=dotted];
n368 -> n369  [key=0, style=solid];
n369 -> n370  [key=0, style=solid];
n370 -> n364  [key=0, style=bold, color=blue];
n373 -> n374  [key=0, style=solid];
n374 -> n375  [key=0, style=solid];
n374 -> n80  [key=2, style=dotted];
n374 -> n89  [key=2, style=dotted];
n375 -> n376  [key=0, style=solid];
n375 -> n345  [key=2, style=dotted];
n376 -> n46  [key=0, style=bold, color=blue];
n377 -> n378  [key=0, style=solid];
n377 -> n379  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>"];
n377 -> n384  [key=1, style=dashed, color=darkseagreen4, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
n378 -> n379  [key=0, style=solid];
n378 -> n388  [key=2, style=dotted];
n378 -> n385  [key=1, style=dashed, color=darkseagreen4, label=result];
n378 -> n386  [key=1, style=dashed, color=darkseagreen4, label=result];
n379 -> n380  [key=0, style=solid];
n379 -> n386  [key=0, style=solid];
n379 -> n381  [key=1, style=dashed, color=darkseagreen4, label=job];
n379 -> n382  [key=1, style=dashed, color=darkseagreen4, label=job];
n379 -> n384  [key=1, style=dashed, color=darkseagreen4, label=job];
n379 -> n385  [key=1, style=dashed, color=darkseagreen4, label=job];
n384 -> n385  [key=0, style=solid];
n384 -> n364  [key=2, style=dotted];
n384 -> n390  [key=2, style=dotted];
n385 -> n379  [key=0, style=solid];
n385 -> n391  [key=2, style=dotted];
n385 -> n392  [key=2, style=dotted];
n385 -> n92  [key=2, style=dotted];
n386 -> n387  [key=0, style=solid];
n386 -> n393  [key=2, style=dotted];
n380 -> n381  [key=0, style=solid];
n380 -> n385  [key=1, style=dashed, color=darkseagreen4, label=dto];
n381 -> n382  [key=0, style=solid];
n381 -> n385  [key=0, style=solid];
n382 -> n383  [key=0, style=solid];
n382 -> n371  [key=2, style=dotted];
n383 -> n384  [key=0, style=solid];
n383 -> n389  [key=2, style=dotted];
n387 -> n377  [key=0, style=bold, color=blue];
n394 -> n395  [key=0, style=solid];
n394 -> n396  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
n395 -> n396  [key=0, style=solid];
n396 -> n397  [key=0, style=solid];
n396 -> n80  [key=2, style=dotted];
n396 -> n89  [key=2, style=dotted];
n396 -> n398  [key=1, style=dashed, color=darkseagreen4, label=jobs];
n397 -> n398  [key=0, style=solid];
n397 -> n402  [key=2, style=dotted];
n397 -> n399  [key=1, style=dashed, color=darkseagreen4, label=result];
n397 -> n400  [key=1, style=dashed, color=darkseagreen4, label=result];
n398 -> n399  [key=0, style=solid];
n398 -> n400  [key=0, style=solid];
n399 -> n398  [key=0, style=solid];
n399 -> n403  [key=2, style=dotted];
n399 -> n404  [key=2, style=dotted];
n399 -> n405  [key=2, style=dotted];
n399 -> n219  [key=2, style=dotted];
n399 -> n92  [key=2, style=dotted];
n400 -> n401  [key=0, style=solid];
n400 -> n393  [key=2, style=dotted];
n401 -> n394  [key=0, style=bold, color=blue];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_8  [key=2, style=dotted];
m1_6 -> m1_9  [key=2, style=dotted];
m1_7 -> m1_5  [key=0, style=bold, color=blue];
m1_14 -> m1_15  [key=0, style=solid];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_17  [key=2, style=dotted];
m1_16 -> m1_14  [key=0, style=bold, color=blue];
m1_18 -> m1_19  [key=0, style=solid];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_21  [key=2, style=dotted];
m1_20 -> m1_18  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> n249  [key=2, style=dotted];
m1_1 -> m1_4  [key=2, style=dotted];
m1_2 -> m1_0  [key=0, style=bold, color=blue];
m1_10 -> m1_11  [key=0, style=solid];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_13  [key=2, style=dotted];
m1_12 -> m1_10  [key=0, style=bold, color=blue];
m1_22 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherSteps"];
m1_22 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherSteps"];
m1_22 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherSteps"];
m1_22 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.JobFetcherSteps"];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_0 -> m2_2  [key=1, style=dashed, color=green, label=string];
m2_0 -> m2_3  [key=1, style=dashed, color=green, label=int];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_2 -> m2_3  [key=0, style=solid, color=green];
m2_3 -> m2_4  [key=0, style=solid, color=green];
m2_4 -> m2_0  [key=0, style=bold, color=blue];
m2_5 -> m2_1  [key=1, style=dashed, color=green, label="HangFire.Server.ServerContext"];
m2_5 -> m2_2  [key=1, style=dashed, color=green, label="HangFire.Server.ServerContext"];
m2_5 -> m2_3  [key=1, style=dashed, color=green, label="HangFire.Server.ServerContext"];
}
