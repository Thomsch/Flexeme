digraph  {
m0_12 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="RedisConnection.cs"];
m0_0 [label="Entry Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", span="30-30", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="RedisConnection.cs"];
m0_1 [label="connection == null", span="38-38", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="RedisConnection.cs"];
m0_3 [label="stateMachine == null", span="39-39", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="RedisConnection.cs"];
m0_5 [label="candidateState == null", span="40-40", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="RedisConnection.cs"];
m0_7 [label="_candidateState = candidateState", span="42-42", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="RedisConnection.cs"];
m0_8 [label="Connection = connection", span="44-44", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="RedisConnection.cs"];
m0_9 [label="StateMachine = stateMachine", span="45-45", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="RedisConnection.cs"];
m0_10 [label="CurrentState = currentState", span="46-46", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="RedisConnection.cs"];
m0_2 [label="throw new ArgumentNullException(''connection'');", span="38-38", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="RedisConnection.cs"];
m0_4 [label="throw new ArgumentNullException(''stateMachine'');", span="39-39", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="RedisConnection.cs"];
m0_6 [label="throw new ArgumentNullException(''candidateState'');", span="40-40", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="RedisConnection.cs"];
m0_11 [label="Exit Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", span="30-30", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="RedisConnection.cs"];
m0_22 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="RedisConnection.cs"];
m0_21 [label="Entry Hangfire.Storage.IStorageConnection.GetJobParameter(string, string)", span="39-39", cluster="Hangfire.Storage.IStorageConnection.GetJobParameter(string, string)", file="RedisConnection.cs"];
m0_18 [label="Entry Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", span="85-85", cluster="Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", file="RedisConnection.cs"];
m0_19 [label="return JobHelper.FromJson<T>(Connection.GetJobParameter(\r\n                JobId, name));", span="87-88", cluster="Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", file="RedisConnection.cs"];
m0_20 [label="Exit Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", span="85-85", cluster="Hangfire.States.ElectStateContext.GetJobParameter<T>(string)", file="RedisConnection.cs"];
m0_16 [label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32", cluster="Hangfire.Common.JobHelper.ToJson(object)", file="RedisConnection.cs"];
m0_13 [label="Entry Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", span="80-80", cluster="Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="RedisConnection.cs"];
m0_14 [label="Connection.SetJobParameter(JobId, name, JobHelper.ToJson(value))", span="82-82", cluster="Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="RedisConnection.cs"];
m0_15 [label="Exit Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", span="80-80", cluster="Hangfire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="RedisConnection.cs"];
m0_17 [label="Entry Hangfire.Storage.IStorageConnection.SetJobParameter(string, string, string)", span="38-38", cluster="Hangfire.Storage.IStorageConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs"];
m0_23 [label="Hangfire.States.ElectStateContext", span="", file="RedisConnection.cs"];
m1_11 [label="Entry Unk.EnqueueItemOnList", span="", cluster="Unk.EnqueueItemOnList", file="RedisProcessingJob.cs"];
m1_22 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="RedisProcessingJob.cs"];
m1_23 [label="Entry HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", span="57-57", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="RedisProcessingJob.cs"];
m1_24 [label="Given(String.Format(''the '{0}' job'', jobId))", span="59-59", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="RedisProcessingJob.cs"];
m1_25 [label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', queue),\r\n                jobId)", span="61-63", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="RedisProcessingJob.cs"];
m1_26 [label="Exit HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", span="57-57", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="RedisProcessingJob.cs"];
m1_7 [label="Entry HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", span="23-23", cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", file="RedisProcessingJob.cs"];
m1_8 [label="Given(String.Format(''a job of the '{0}' type'', typeof(BrokenJob).AssemblyQualifiedName))", span="25-25", cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", file="RedisProcessingJob.cs"];
m1_9 [label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', DefaultQueue),\r\n                JobSteps.DefaultJobId)", span="27-29", cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", file="RedisProcessingJob.cs"];
m1_10 [label="Exit HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", span="23-23", cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", file="RedisProcessingJob.cs"];
m1_2 [label="Entry HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", span="17-17", cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="RedisProcessingJob.cs"];
m1_3 [label="Given(String.Format(''a job in the '{0}' queue'', DefaultQueue))", span="19-19", cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="RedisProcessingJob.cs"];
m1_4 [label="Exit HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", span="17-17", cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="RedisProcessingJob.cs"];
m1_5 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="RedisProcessingJob.cs"];
m1_50 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="RedisProcessingJob.cs"];
m1_49 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount", file="RedisProcessingJob.cs"];
m1_40 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", span="89-89", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="RedisProcessingJob.cs"];
m1_41 [label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="91-92", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="RedisProcessingJob.cs"];
m1_42 [label="CollectionAssert.DoesNotContain(jobIds, JobSteps.DefaultJobId)", span="94-94", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="RedisProcessingJob.cs"];
m1_43 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", span="89-89", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="RedisProcessingJob.cs"];
m1_15 [label="Entry HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", span="41-41", cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="RedisProcessingJob.cs"];
m1_16 [label="Given(''a job'')", span="43-43", cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="RedisProcessingJob.cs"];
m1_17 [label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', queue),\r\n                JobSteps.DefaultJobId)", span="45-47", cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="RedisProcessingJob.cs"];
m1_18 [label="Exit HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", span="41-41", cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="RedisProcessingJob.cs"];
m1_37 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", span="83-83", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="RedisProcessingJob.cs"];
m1_38 [label="Then(String.Format(''the '{0}' queue should not contain the job'', DefaultQueue))", span="85-85", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="RedisProcessingJob.cs"];
m1_39 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", span="83-83", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="RedisProcessingJob.cs"];
m1_12 [label="Entry HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", span="33-33", cluster="HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", file="RedisProcessingJob.cs"];
m1_13 [label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', DefaultQueue),\r\n                jobId)", span="35-37", cluster="HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", file="RedisProcessingJob.cs"];
m1_14 [label="Exit HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", span="33-33", cluster="HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", file="RedisProcessingJob.cs"];
m1_31 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", span="73-73", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="RedisProcessingJob.cs"];
m1_32 [label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="75-76", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="RedisProcessingJob.cs"];
m1_33 [label="CollectionAssert.Contains(jobIds, JobSteps.DefaultJobId)", span="78-78", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="RedisProcessingJob.cs"];
m1_34 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", span="73-73", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="RedisProcessingJob.cs"];
m1_35 [label="Entry Unk.GetAllItemsFromList", span="", cluster="Unk.GetAllItemsFromList", file="RedisProcessingJob.cs"];
m1_36 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="RedisProcessingJob.cs"];
m1_30 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="RedisProcessingJob.cs"];
m1_6 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="RedisProcessingJob.cs"];
m1_44 [label="Entry Unk.DoesNotContain", span="", cluster="Unk.DoesNotContain", file="RedisProcessingJob.cs"];
m1_19 [label="Entry HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", span="51-51", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="RedisProcessingJob.cs"];
m1_20 [label="Given(String.Format(''the '{0}' job in the '{1}' queue'', jobId, DefaultQueue))", span="53-53", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="RedisProcessingJob.cs"];
m1_21 [label="Exit HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", span="51-51", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="RedisProcessingJob.cs"];
m1_51 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="106-106", cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="RedisProcessingJob.cs"];
m1_52 [label="var actualLength = Redis.Client.GetListCount(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="108-109", cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="RedisProcessingJob.cs"];
m1_53 [label="Assert.AreEqual(length, actualLength)", span="110-110", cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="RedisProcessingJob.cs"];
m1_54 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="106-106", cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="RedisProcessingJob.cs"];
m1_27 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", span="67-67", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="RedisProcessingJob.cs"];
m1_28 [label="Then(String.Format(''the '{0}' queue should contain the job'', DefaultQueue))", span="69-69", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="RedisProcessingJob.cs"];
m1_29 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", span="67-67", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="RedisProcessingJob.cs"];
m1_45 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", span="98-98", cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="RedisProcessingJob.cs"];
m1_46 [label="var length = Redis.Client.GetListCount(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="100-101", cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="RedisProcessingJob.cs"];
m1_47 [label="Assert.AreEqual(0, length)", span="102-102", cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="RedisProcessingJob.cs"];
m1_48 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", span="98-98", cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="RedisProcessingJob.cs"];
m1_0 [label="Entry HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", span="12-12", cluster="HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", file="RedisProcessingJob.cs"];
m1_1 [label="Exit HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", span="12-12", cluster="HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", file="RedisProcessingJob.cs"];
m2_0 [label="Entry HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", span="10-10", cluster="HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", file="RedisProcessingJobFacts.cs"];
m2_1 [label="EnqueueAt = enqueueAt", span="13-13", cluster="HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", file="RedisProcessingJobFacts.cs", color=green, community=0];
m2_2 [label="Exit HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", span="10-10", cluster="HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", file="RedisProcessingJobFacts.cs"];
m2_15 [label="Entry HangFire.JobHelper.ToTimestamp(System.DateTime)", span="51-51", cluster="HangFire.JobHelper.ToTimestamp(System.DateTime)", file="RedisProcessingJobFacts.cs"];
m2_6 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisProcessingJobFacts.cs"];
m2_14 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="RedisProcessingJobFacts.cs"];
m2_16 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="RedisProcessingJobFacts.cs"];
m2_20 [label="Entry Unk.AddItemToSortedSet", span="", cluster="Unk.AddItemToSortedSet", file="RedisProcessingJobFacts.cs"];
m2_26 [label="Entry lambda expression", span="45-45", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m2_18 [label="x.AddItemToSortedSet(\r\n                ''hangfire:schedule'', jobId, timestamp)", span="35-36", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m2_17 [label="Entry lambda expression", span="35-36", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m2_19 [label="Exit lambda expression", span="35-36", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m2_27 [label="x.RemoveItemFromSortedSet(''hangfire:schedule'', jobId)", span="45-45", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m2_28 [label="Exit lambda expression", span="45-45", cluster="lambda expression", file="RedisProcessingJobFacts.cs"];
m2_3 [label="Entry HangFire.States.ScheduledState.GetProperties()", span="20-20", cluster="HangFire.States.ScheduledState.GetProperties()", file="RedisProcessingJobFacts.cs"];
m2_4 [label="return new Dictionary<string, string>\r\n                {\r\n                    { ''ScheduledAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''EnqueueAt'', JobHelper.ToStringTimestamp(EnqueueAt) }\r\n                };", span="22-26", cluster="HangFire.States.ScheduledState.GetProperties()", color=green, community=0, file="RedisProcessingJobFacts.cs"];
m2_5 [label="Exit HangFire.States.ScheduledState.GetProperties()", span="20-20", cluster="HangFire.States.ScheduledState.GetProperties()", file="RedisProcessingJobFacts.cs"];
m2_8 [label="Entry HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", span="29-29", cluster="HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", file="RedisProcessingJobFacts.cs"];
m2_9 [label="transaction == null", span="31-31", cluster="HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", color=green, community=0, file="RedisProcessingJobFacts.cs"];
m2_12 [label="transaction.QueueCommand(x => x.AddItemToSortedSet(\r\n                ''hangfire:schedule'', jobId, timestamp))", span="35-36", cluster="HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", file="RedisProcessingJobFacts.cs"];
m2_10 [label="throw new ArgumentNullException(''transaction'');", span="31-31", cluster="HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", color=green, community=0, file="RedisProcessingJobFacts.cs"];
m2_11 [label="var timestamp = JobHelper.ToTimestamp(EnqueueAt)", span="33-33", cluster="HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", file="RedisProcessingJobFacts.cs", color=green, community=0];
m2_13 [label="Exit HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", span="29-29", cluster="HangFire.States.ScheduledState.Apply(IRedisTransaction, string)", file="RedisProcessingJobFacts.cs"];
m2_29 [label="Entry Unk.RemoveItemFromSortedSet", span="", cluster="Unk.RemoveItemFromSortedSet", file="RedisProcessingJobFacts.cs"];
m2_7 [label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="62-62", cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="RedisProcessingJobFacts.cs"];
m2_21 [label="Entry HangFire.States.ScheduledState.Descriptor.Unapply(IRedisTransaction, string)", span="41-41", cluster="HangFire.States.ScheduledState.Descriptor.Unapply(IRedisTransaction, string)", file="RedisProcessingJobFacts.cs"];
m2_22 [label="transaction == null", span="43-43", cluster="HangFire.States.ScheduledState.Descriptor.Unapply(IRedisTransaction, string)", file="RedisProcessingJobFacts.cs"];
m2_24 [label="transaction.QueueCommand(x => x.RemoveItemFromSortedSet(''hangfire:schedule'', jobId))", span="45-45", cluster="HangFire.States.ScheduledState.Descriptor.Unapply(IRedisTransaction, string)", file="RedisProcessingJobFacts.cs"];
m2_23 [label="throw new ArgumentNullException(''transaction'');", span="43-43", cluster="HangFire.States.ScheduledState.Descriptor.Unapply(IRedisTransaction, string)", file="RedisProcessingJobFacts.cs"];
m2_25 [label="Exit HangFire.States.ScheduledState.Descriptor.Unapply(IRedisTransaction, string)", span="41-41", cluster="HangFire.States.ScheduledState.Descriptor.Unapply(IRedisTransaction, string)", file="RedisProcessingJobFacts.cs"];
m2_30 [label="HangFire.States.ScheduledState", span="", file="RedisProcessingJobFacts.cs"];
m2_31 [label=string, span="", file="RedisProcessingJobFacts.cs"];
m2_32 [label=timestamp, span="", file="RedisProcessingJobFacts.cs"];
m2_33 [label=string, span="", file="RedisProcessingJobFacts.cs"];
m3_8 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerConnection.cs"];
m3_119 [label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_120 [label="serverId == null", span="238-238", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_122 [label="context == null", span="239-239", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_124 [label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="241-246", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_125 [label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                + @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", span="248-254", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_121 [label="throw new ArgumentNullException(''serverId'');", span="238-238", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_123 [label="throw new ArgumentNullException(''context'');", span="239-239", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_126 [label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs"];
m3_97 [label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_98 [label="id == null", span="207-207", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_100 [label="name == null", span="208-208", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_102 [label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="210-213", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_99 [label="throw new ArgumentNullException(''id'');", span="207-207", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_101 [label="throw new ArgumentNullException(''name'');", span="208-208", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_103 [label="Exit HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs"];
m3_127 [label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="20-20", cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerConnection.cs"];
m3_49 [label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_50 [label="job == null", span="111-111", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_52 [label="parameters == null", span="112-112", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_55 [label="var invocationData = InvocationData.Serialize(job)", span="119-119", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_56 [label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = DateTime.UtcNow,\r\n                    expireAt = DateTime.UtcNow.Add(expireIn)\r\n                }).Single().ToString()", span="121-129", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_57 [label="parameters.Count > 0", span="131-131", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_58 [label="var parameterArray = new object[parameters.Count]", span="133-133", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_60 [label=parameters, span="135-135", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_51 [label="throw new ArgumentNullException(''job'');", span="111-111", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_53 [label="throw new ArgumentNullException(''parameters'');", span="112-112", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_54 [label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="114-117", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_61 [label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", span="137-142", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_64 [label="return jobId;", span="152-152", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_59 [label="int parameterIndex = 0", span="134-134", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_63 [label="_connection.Execute(insertParameterSql, parameterArray)", span="149-149", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_62 [label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="145-147", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_65 [label="Exit HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs"];
m3_21 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SqlServerConnection.cs"];
m3_0 [label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", span="35-35", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs"];
m3_1 [label="connection == null", span="37-37", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs"];
m3_3 [label="options == null", span="38-38", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs"];
m3_5 [label="_connection = connection", span="40-40", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs"];
m3_6 [label="_options = options", span="41-41", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs"];
m3_2 [label="throw new ArgumentNullException(''connection'');", span="37-37", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs"];
m3_4 [label="throw new ArgumentNullException(''options'');", span="38-38", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs"];
m3_7 [label="Exit HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", span="35-35", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs"];
m3_43 [label="Entry System.TimeSpan.Negate()", span="0-0", cluster="System.TimeSpan.Negate()", file="SqlServerConnection.cs"];
m3_69 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerConnection.cs"];
m3_72 [label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_73 [label="id == null", span="157-157", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_76 [label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="162-163", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_74 [label="throw new ArgumentNullException(''id'');", span="157-157", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_75 [label="string sql = \r\n                @''select InvocationData, StateName, Arguments from HangFire.Job where id = @id''", span="159-160", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_77 [label="jobData == null", span="165-165", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_79 [label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", span="168-168", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_80 [label="invocationData.Arguments = jobData.Arguments", span="169-169", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_86 [label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = jobData.StateName,\r\n                LoadException = loadException\r\n            };", span="183-188", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_78 [label="return null;", span="165-165", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_83 [label="job = invocationData.Deserialize()", span="176-176", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_81 [label="Job job = null", span="171-171", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_82 [label="JobLoadException loadException = null", span="172-172", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_84 [label=JobLoadException, span="178-178", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_85 [label="loadException = ex", span="180-180", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_87 [label="Exit HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs"];
m3_13 [label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="49-49", cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs"];
m3_14 [label="return new SqlServerWriteOnlyTransaction(_connection);", span="51-51", cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs"];
m3_15 [label="Exit HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="49-49", cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs"];
m3_118 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)", file="SqlServerConnection.cs"];
m3_44 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="SqlServerConnection.cs"];
m3_48 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="SqlServerConnection.cs"];
m3_20 [label="Entry SqlServerDistributedLock.cstr", span="", cluster="SqlServerDistributedLock.cstr", file="SqlServerConnection.cs"];
m3_42 [label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0", cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="SqlServerConnection.cs"];
m3_68 [label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0", cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerConnection.cs"];
m3_22 [label="Entry HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="61-61", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_23 [label="queues == null", span="63-63", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_25 [label="queues.Length == 0", span="64-64", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_31 [label="cancellationToken.ThrowIfCancellationRequested()", span="82-82", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_32 [label="idAndQueue = _connection.Query(\r\n                    String.Format(fetchJobSqlTemplate, fetchConditions[currentQueryIndex]),\r\n                    new { queues = queues, timeout = _options.InvisibilityTimeout.Negate().TotalSeconds })\r\n                    .SingleOrDefault()", span="84-87", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_24 [label="throw new ArgumentNullException(''queues'');", span="63-63", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_26 [label="throw new ArgumentException(''Queue array must be non-empty.'', ''queues'');", span="64-64", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_27 [label="dynamic idAndQueue", span="66-66", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_28 [label="string fetchJobSqlTemplate = @''\r\nset transaction isolation level read committed\r\nupdate top (1) HangFire.JobQueue set FetchedAt = GETUTCDATE()\r\noutput INSERTED.JobId, INSERTED.Queue\r\nwhere FetchedAt {0}\r\nand Queue in @queues''", span="68-73", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_29 [label="var fetchConditions = new[] { ''is null'', ''< DATEADD(second, @timeout, GETUTCDATE())'' }", span="77-77", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_30 [label="var currentQueryIndex = 0", span="78-78", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_34 [label="currentQueryIndex == fetchConditions.Length - 1", span="91-91", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_37 [label="currentQueryIndex = (currentQueryIndex + 1) % fetchConditions.Length", span="98-98", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_35 [label="cancellationToken.WaitHandle.WaitOne(_options.QueuePollInterval)", span="93-93", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_33 [label="idAndQueue == null", span="89-89", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_38 [label="idAndQueue == null", span="99-99", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_39 [label="return new SqlServerProcessingJob(\r\n                idAndQueue.JobId.ToString(CultureInfo.InvariantCulture),\r\n                idAndQueue.Queue);", span="101-103", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_36 [label="cancellationToken.ThrowIfCancellationRequested()", span="94-94", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_40 [label="Exit HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="61-61", cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs"];
m3_138 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="275-275", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m3_139 [label="timeOut.Duration() != timeOut", span="277-277", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m3_140 [label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="279-279", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m3_141 [label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="282-284", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m3_142 [label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="275-275", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs"];
m3_12 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="SqlServerConnection.cs"];
m3_143 [label="Entry System.TimeSpan.Duration()", span="0-0", cluster="System.TimeSpan.Duration()", file="SqlServerConnection.cs"];
m3_9 [label="Entry HangFire.SqlServer.SqlServerConnection.Dispose()", span="44-44", cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs"];
m3_10 [label="_connection.Dispose()", span="46-46", cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs"];
m3_11 [label="Exit HangFire.SqlServer.SqlServerConnection.Dispose()", span="44-44", cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs"];
m3_104 [label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216", cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs"];
m3_105 [label="id == null", span="218-218", cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", color=red, community=0, file="SqlServerConnection.cs"];
m3_107 [label="queue == null", span="219-219", cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", color=red, community=0, file="SqlServerConnection.cs"];
m3_109 [label="_connection.Execute(''delete from HangFire.JobQueue where JobId = @id and Queue = @queueName'',\r\n                new { id = id, queueName = queue })", span="221-222", cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", color=red, community=1, file="SqlServerConnection.cs"];
m3_106 [label="throw new ArgumentNullException(''id'');", span="218-218", cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", color=red, community=0, file="SqlServerConnection.cs"];
m3_108 [label="throw new ArgumentNullException(''queue'');", span="219-219", cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", color=red, community=0, file="SqlServerConnection.cs"];
m3_110 [label="Exit HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216", cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs"];
m3_90 [label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_91 [label="id == null", span="193-193", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_93 [label="name == null", span="194-194", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_95 [label="_connection.Execute(\r\n                @''merge HangFire.JobParameter as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="196-202", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_92 [label="throw new ArgumentNullException(''id'');", span="193-193", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_94 [label="throw new ArgumentNullException(''name'');", span="194-194", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_96 [label="Exit HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs"];
m3_16 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", span="34-34", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="SqlServerConnection.cs"];
m3_111 [label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_112 [label="key == null", span="227-227", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_114 [label="toScore < fromScore", span="228-228", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_116 [label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="230-233", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_113 [label="throw new ArgumentNullException(''key'');", span="227-227", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_115 [label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="228-228", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_117 [label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs"];
m3_67 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerConnection.cs"];
m3_17 [label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="54-54", cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs"];
m3_18 [label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:Job:{0}'', jobId), \r\n                _connection);", span="56-58", cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs"];
m3_19 [label="Exit HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="54-54", cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs"];
m3_41 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerConnection.cs"];
m3_70 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SqlServerConnection.cs"];
m3_46 [label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0", cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="SqlServerConnection.cs"];
m3_89 [label="Entry HangFire.Storage.JobData.JobData()", span="20-20", cluster="HangFire.Storage.JobData.JobData()", file="SqlServerConnection.cs"];
m3_71 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerConnection.cs"];
m3_88 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()", file="SqlServerConnection.cs"];
m3_128 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="257-257", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m3_129 [label="serverId == null", span="259-259", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m3_131 [label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="261-263", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m3_130 [label="throw new ArgumentNullException(''serverId'');", span="259-259", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m3_132 [label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="257-257", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs"];
m3_133 [label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="266-266", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m3_134 [label="serverId == null", span="268-268", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m3_136 [label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="270-272", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m3_135 [label="throw new ArgumentNullException(''serverId'');", span="268-268", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m3_137 [label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="266-266", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs"];
m3_47 [label="Entry HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", span="23-23", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerConnection.cs"];
m3_45 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="SqlServerConnection.cs"];
m3_66 [label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65", cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="SqlServerConnection.cs"];
m3_144 [label="HangFire.SqlServer.SqlServerConnection", span="", file="SqlServerConnection.cs"];
m4_8 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerProcessingJob.cs"];
m4_0 [label="Entry HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", span="23-23", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs"];
m4_1 [label="jobId == null", span="25-25", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs", color=green, community=0];
m4_3 [label="queue == null", span="26-26", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs", color=green, community=0];
m4_5 [label="JobId = jobId", span="28-28", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs"];
m4_6 [label="Queue = queue", span="29-29", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs", color=green, community=0];
m4_2 [label="throw new ArgumentNullException(''jobId'');", span="25-25", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs", color=green, community=0];
m4_4 [label="throw new ArgumentNullException(''queue'');", span="26-26", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs", color=green, community=0];
m4_7 [label="Exit HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", span="23-23", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="SqlServerProcessingJob.cs"];
m4_9 [label="HangFire.SqlServer.SqlServerProcessingJob", span="", file="SqlServerProcessingJob.cs"];
m5_0 [label="Entry HangFire.Core.Tests.States.StateFacts.ShouldNotExpireJobOnApplyByDefault()", span="9-9", cluster="HangFire.Core.Tests.States.StateFacts.ShouldNotExpireJobOnApplyByDefault()", file="SqlServerProcessingJobFacts.cs"];
m5_1 [label="var stateMock = new Mock<State>()", span="11-11", cluster="HangFire.Core.Tests.States.StateFacts.ShouldNotExpireJobOnApplyByDefault()", color=red, community=0, file="SqlServerProcessingJobFacts.cs"];
m5_2 [label="stateMock.CallBase = true", span="12-12", cluster="HangFire.Core.Tests.States.StateFacts.ShouldNotExpireJobOnApplyByDefault()", file="SqlServerProcessingJobFacts.cs"];
m5_3 [label="Assert.False(stateMock.Object.ExpireJobOnApply)", span="14-14", cluster="HangFire.Core.Tests.States.StateFacts.ShouldNotExpireJobOnApplyByDefault()", file="SqlServerProcessingJobFacts.cs", color=green, community=0];
m5_7 [label="new SqlServerProcessingJob(null, Queue)", span="14-14", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", color=red, community=0];
m5_8 [label="Exit lambda expression", span="14-14", cluster="lambda expression", color=green, community=0, file="SqlServerProcessingJobFacts.cs"];
m5_9 [label="Entry HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", span="23-23", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", color=green, community=0, file="SqlServerProcessingJobFacts.cs"];
m5_10 [label="Entry HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="20-20", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", color=green, community=0, file="SqlServerProcessingJobFacts.cs"];
m5_11 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerProcessingJob(JobId, null))", span="22-23", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerProcessingJobFacts.cs", color=red, community=0];
m5_4 [label="Exit HangFire.Core.Tests.States.StateFacts.ShouldNotExpireJobOnApplyByDefault()", span="9-9", cluster="HangFire.Core.Tests.States.StateFacts.ShouldNotExpireJobOnApplyByDefault()", file="SqlServerProcessingJobFacts.cs"];
m5_17 [label="Entry HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="29-29", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerProcessingJobFacts.cs"];
m5_18 [label="var processingJob = new SqlServerProcessingJob(JobId, Queue)", span="31-31", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", color=red, community=0, file="SqlServerProcessingJobFacts.cs"];
m5_19 [label="Assert.Equal(JobId, processingJob.JobId)", span="33-33", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerProcessingJobFacts.cs"];
m5_20 [label="Assert.Equal(Queue, processingJob.Queue)", span="34-34", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerProcessingJobFacts.cs"];
m5_21 [label="Exit HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="29-29", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerProcessingJobFacts.cs"];
m5_5 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SqlServerProcessingJobFacts.cs"];
m5_6 [label="Entry lambda expression", span="14-14", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m5_13 [label="Exit HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="20-20", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerProcessingJobFacts.cs"];
m5_14 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m5_15 [label="new SqlServerProcessingJob(JobId, null)", span="23-23", cluster="lambda expression", color=red, community=0, file="SqlServerProcessingJobFacts.cs"];
m5_16 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="SqlServerProcessingJobFacts.cs"];
m5_12 [label="Assert.Equal(''queue'', exception.ParamName)", span="25-25", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerProcessingJobFacts.cs"];
m6_26 [label="Entry Hangfire.Core.Tests.Client.CreatingContextFacts.TestMethod()", span="34-34", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.TestMethod()", file="Worker.cs"];
m6_27 [label="Exit Hangfire.Core.Tests.Client.CreatingContextFacts.TestMethod()", span="34-34", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.TestMethod()", file="Worker.cs"];
m6_3 [label="Entry Unk.>", span="", cluster="Unk.>", file="Worker.cs"];
m6_0 [label="Entry Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="13-13", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="Worker.cs"];
m6_1 [label="Assert.Throws<NullReferenceException>(\r\n                () => new CreatingContext(null))", span="15-16", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="Worker.cs"];
m6_2 [label="Exit Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="13-13", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="Worker.cs"];
m6_19 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="Worker.cs"];
m6_20 [label="Entry Mock<IStateMachineFactory>.cstr", span="", cluster="Mock<IStateMachineFactory>.cstr", file="Worker.cs"];
m6_22 [label="Entry Unk.False", span="", cluster="Unk.False", file="Worker.cs"];
m6_7 [label="Entry Hangfire.Client.CreatingContext.CreatingContext(Hangfire.Client.CreateContext)", span="24-24", cluster="Hangfire.Client.CreatingContext.CreatingContext(Hangfire.Client.CreateContext)", file="Worker.cs"];
m6_17 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="Worker.cs"];
m6_23 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="Worker.cs"];
m6_4 [label="Entry lambda expression", span="16-16", cluster="lambda expression", file="Worker.cs"];
m6_5 [label="new CreatingContext(null)", span="16-16", cluster="lambda expression", file="Worker.cs"];
m6_6 [label="Exit lambda expression", span="16-16", cluster="lambda expression", file="Worker.cs"];
m6_24 [label="TestMethod()", span="23-23", cluster="lambda expression", file="Worker.cs"];
m6_25 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="Worker.cs"];
m6_21 [label="Entry CreateContext.cstr", span="", cluster="CreateContext.cstr", file="Worker.cs"];
m6_8 [label="Entry Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", span="20-20", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="Worker.cs"];
m6_9 [label="var connection = new Mock<IStorageConnection>()", span="22-22", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="Worker.cs"];
m6_10 [label="var job = Job.FromExpression(() => TestMethod())", span="23-23", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="Worker.cs"];
m6_13 [label="var createContext = new CreateContext(\r\n                connection.Object, stateMachineFactory.Object, job, state.Object)", span="27-28", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="Worker.cs"];
m6_11 [label="var state = new Mock<IState>()", span="24-24", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="Worker.cs"];
m6_12 [label="var stateMachineFactory = new Mock<IStateMachineFactory>()", span="25-25", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="Worker.cs"];
m6_14 [label="var context = new CreatingContext(createContext)", span="29-29", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="Worker.cs"];
m6_15 [label="Assert.False(context.Canceled)", span="31-31", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="Worker.cs"];
m6_16 [label="Exit Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", span="20-20", cluster="Hangfire.Core.Tests.Client.CreatingContextFacts.Ctor_CanceledProperty_IsFalseByDefault()", file="Worker.cs"];
m6_18 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Worker.cs"];
m7_36 [label="Entry HangFire.JobHelper.FromJson<T>(string)", span="44-44", cluster="HangFire.JobHelper.FromJson<T>(string)", file="WorkerFacts.cs"];
m7_113 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="WorkerFacts.cs"];
m7_296 [label="Entry Unk.TryParse", span="", cluster="Unk.TryParse", file="WorkerFacts.cs"];
m7_30 [label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="WorkerFacts.cs"];
m7_133 [label="Entry int.Parse(string)", span="0-0", cluster="int.Parse(string)", file="WorkerFacts.cs"];
m7_43 [label="Entry HangFire.Web.JobStorage.ScheduledJobs(int, int)", span="80-80", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="WorkerFacts.cs"];
m7_44 [label=Redis, span="82-82", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="WorkerFacts.cs"];
m7_45 [label="var scheduledJobs = Redis.GetRangeWithScoresFromSortedSet(\r\n                    ''hangfire:schedule'',\r\n                    from,\r\n                    from + count - 1)", span="84-87", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", color=red, community=0, file="WorkerFacts.cs"];
m7_46 [label="scheduledJobs.Count == 0", span="89-89", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="WorkerFacts.cs"];
m7_51 [label=scheduledJobs, span="99-99", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="WorkerFacts.cs"];
m7_56 [label="return scheduledJobs.ToDictionary(\r\n                    job => job.Key,\r\n                    job => new ScheduleDto\r\n                    {\r\n                        ScheduledAt = JobHelper.FromTimestamp((long) job.Value),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(jobs[job.Key][1]),\r\n                        Queue = JobHelper.TryToGetQueue(jobs[job.Key][0]),\r\n                        Type = jobs[job.Key][0],\r\n                        InScheduledState =\r\n                            ScheduledState.Name.Equals(states[job.Key], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="119-129", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="WorkerFacts.cs"];
m7_47 [label="return new Dictionary<string, ScheduleDto>();", span="91-91", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="WorkerFacts.cs"];
m7_48 [label="var jobs = new Dictionary<string, List<string>>()", span="94-94", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", color=red, community=0, file="WorkerFacts.cs"];
m7_49 [label="var states = new Dictionary<string, string>()", span="95-95", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="WorkerFacts.cs"];
m7_53 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Args'' }),\r\n                            x => jobs.Add(job.Key, x))", span="103-107", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="WorkerFacts.cs"];
m7_50 [label="var pipeline = Redis.CreatePipeline()", span="97-97", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="WorkerFacts.cs"];
m7_54 [label="pipeline.QueueCommand(\r\n                            x => x.GetValueFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                ''State''),\r\n                            x => states.Add(job.Key, x))", span="109-113", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="WorkerFacts.cs"];
m7_55 [label="pipeline.Flush()", span="116-116", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="WorkerFacts.cs"];
m7_52 [label="var job = scheduledJob", span="101-101", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="WorkerFacts.cs"];
m7_57 [label="Exit HangFire.Web.JobStorage.ScheduledJobs(int, int)", span="80-80", cluster="HangFire.Web.JobStorage.ScheduledJobs(int, int)", file="WorkerFacts.cs"];
m7_38 [label="Entry HangFire.JobHelper.FromNullableStringTimestamp(string)", span="72-72", cluster="HangFire.JobHelper.FromNullableStringTimestamp(string)", file="WorkerFacts.cs"];
m7_214 [label="Entry HangFire.Web.DequeuedJobDto.DequeuedJobDto()", span="5-5", cluster="HangFire.Web.DequeuedJobDto.DequeuedJobDto()", file="WorkerFacts.cs"];
m7_391 [label="Entry HangFire.Web.StatisticsDto.StatisticsDto()", span="2-2", cluster="HangFire.Web.StatisticsDto.StatisticsDto()", file="WorkerFacts.cs"];
m7_29 [label="Entry Unk.GetJobsWithProperties", span="", cluster="Unk.GetJobsWithProperties", file="WorkerFacts.cs"];
m7_31 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="WorkerFacts.cs"];
m7_364 [label="Entry KeyValuePair<string, T>.cstr", span="", cluster="KeyValuePair<string, T>.cstr", file="WorkerFacts.cs"];
m7_197 [label="Entry HangFire.Web.EnqueuedJobDto.EnqueuedJobDto()", span="5-5", cluster="HangFire.Web.EnqueuedJobDto.EnqueuedJobDto()", file="WorkerFacts.cs"];
m7_60 [label="Entry Unk.CreatePipeline", span="", cluster="Unk.CreatePipeline", file="WorkerFacts.cs"];
m7_76 [label="Entry Unk.GetValueFromHash", span="", cluster="Unk.GetValueFromHash", file="WorkerFacts.cs"];
m7_23 [label="Entry HangFire.Web.JobStorage.ProcessingJobs(int, int)", span="52-52", cluster="HangFire.Web.JobStorage.ProcessingJobs(int, int)", file="WorkerFacts.cs"];
m7_24 [label=Redis, span="55-55", cluster="HangFire.Web.JobStorage.ProcessingJobs(int, int)", file="WorkerFacts.cs"];
m7_25 [label="var jobIds = Redis.GetRangeFromSortedSet(\r\n                    ''hangfire:processing'',\r\n                    from,\r\n                    from + count - 1)", span="57-60", cluster="HangFire.Web.JobStorage.ProcessingJobs(int, int)", file="WorkerFacts.cs"];
m7_26 [label="return GetJobsWithProperties(Redis,\r\n                    jobIds,\r\n                    new[] { ''Type'', ''Args'' },\r\n                    new[] { ''StartedAt'', ''ServerName'', ''State'' },\r\n                    (job, state) => new ProcessingJobDto\r\n                    {\r\n                        ServerName = state[1],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.Name.Equals(\r\n                            state[2], StringComparison.OrdinalIgnoreCase),\r\n                        State = state[2]\r\n                    }).OrderBy(x => x.Value.StartedAt).ToList();", span="62-76", cluster="HangFire.Web.JobStorage.ProcessingJobs(int, int)", file="WorkerFacts.cs"];
m7_27 [label="Exit HangFire.Web.JobStorage.ProcessingJobs(int, int)", span="52-52", cluster="HangFire.Web.JobStorage.ProcessingJobs(int, int)", file="WorkerFacts.cs"];
m7_134 [label="Entry HangFire.JobHelper.FromStringTimestamp(string)", span="67-67", cluster="HangFire.JobHelper.FromStringTimestamp(string)", file="WorkerFacts.cs"];
m7_262 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="WorkerFacts.cs"];
m7_173 [label="Entry HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="500-500", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_329 [label="jobIds.Count == 0", span="507-507", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_331 [label="var jobs = new Dictionary<string, List<string>>(jobIds.Count)", span="509-509", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_332 [label="var states = new Dictionary<string, List<string>>(jobIds.Count)", span="510-510", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_333 [label="var pipeline = redis.CreatePipeline()", span="512-512", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_334 [label=jobIds, span="514-514", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_336 [label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(String.Format(''hangfire:job:{0}'', id), properties),\r\n                        x => { if (!jobs.ContainsKey(id)) jobs.Add(id, x); })", span="518-520", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_337 [label="stateProperties != null", span="522-522", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_338 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties),\r\n                            x => { if (!states.ContainsKey(id)) states.Add(id, x); })", span="524-526", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_340 [label="return jobIds\r\n                .Select(x => new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                })\r\n                .Select(x => new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null) ? default(T) : selector(x.Job, x.State)))\r\n                .ToList();", span="533-543", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_330 [label="return new List<KeyValuePair<string, T>>();", span="507-507", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_339 [label="pipeline.Flush()", span="530-530", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_335 [label="var id = jobId", span="516-516", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_341 [label="Exit HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="500-500", cluster="HangFire.Web.JobStorage.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="WorkerFacts.cs"];
m7_366 [label="Entry Unk.selector", span="", cluster="Unk.selector", file="WorkerFacts.cs"];
m7_238 [label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", span="86-86", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="WorkerFacts.cs"];
m7_236 [label="Entry HangFire.States.StateMachine.StateMachine(IRedisClient)", span="32-32", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient)", file="WorkerFacts.cs"];
m7_350 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="WorkerFacts.cs"];
m7_11 [label="Entry HangFire.Web.JobStorage.DequeuedCount(string)", span="28-28", cluster="HangFire.Web.JobStorage.DequeuedCount(string)", file="WorkerFacts.cs"];
m7_12 [label=Redis, span="30-30", cluster="HangFire.Web.JobStorage.DequeuedCount(string)", file="WorkerFacts.cs"];
m7_13 [label="return Redis.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue));", span="32-32", cluster="HangFire.Web.JobStorage.DequeuedCount(string)", file="WorkerFacts.cs"];
m7_14 [label="Exit HangFire.Web.JobStorage.DequeuedCount(string)", span="28-28", cluster="HangFire.Web.JobStorage.DequeuedCount(string)", file="WorkerFacts.cs"];
m7_219 [label="Entry HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", span="439-439", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_274 [label="var endDate = DateTime.UtcNow", span="442-442", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_281 [label="var keys = dates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="450-450", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_282 [label="var valuesMap = redis.GetValuesMap(keys)", span="451-451", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_275 [label="var dates = new List<DateTime>()", span="443-443", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_278 [label="dates.Add(endDate)", span="446-446", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_279 [label="endDate = endDate.AddHours(-1)", span="447-447", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_276 [label="var i = 0", span="444-444", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_285 [label="i < dates.Count", span="454-454", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_289 [label="result.Add(dates[i], value)", span="462-462", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_277 [label="i < 24", span="444-444", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_280 [label="i++", span="444-444", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_283 [label="var result = new Dictionary<DateTime, long>()", span="453-453", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_287 [label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="457-457", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_284 [label="var i = 0", span="454-454", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_291 [label="return result;", span="465-465", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_290 [label="i++", span="454-454", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_286 [label="long value", span="456-456", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_288 [label="value = 0", span="459-459", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_292 [label="Exit HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", span="439-439", cluster="HangFire.Web.JobStorage.GetHourlyTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_234 [label="Entry Unk.TryToGetQueue", span="", cluster="Unk.TryToGetQueue", file="WorkerFacts.cs"];
m7_58 [label="Entry Unk.GetRangeWithScoresFromSortedSet", span="", cluster="Unk.GetRangeWithScoresFromSortedSet", file="WorkerFacts.cs"];
m7_132 [label="Entry HangFire.Web.ServerDto.ServerDto()", span="5-5", cluster="HangFire.Web.ServerDto.ServerDto()", file="WorkerFacts.cs"];
m7_237 [label="Entry HangFire.States.EnqueuedState.EnqueuedState(string, string)", span="10-10", cluster="HangFire.States.EnqueuedState.EnqueuedState(string, string)", file="WorkerFacts.cs"];
m7_263 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="WorkerFacts.cs"];
m7_239 [label="Entry HangFire.Web.JobStorage.EnqueueScheduled(string)", span="393-393", cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="WorkerFacts.cs"];
m7_240 [label=Redis, span="395-395", cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="WorkerFacts.cs"];
m7_241 [label="var jobType = Redis.GetValueFromHash(String.Format(''hangfire:job:{0}'', jobId), ''Type'')", span="397-397", cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="WorkerFacts.cs"];
m7_247 [label="return stateMachine.ChangeState(jobId, state, ScheduledState.Name);", span="408-408", cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="WorkerFacts.cs"];
m7_242 [label="var queue = JobHelper.TryToGetQueue(jobType)", span="398-398", cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="WorkerFacts.cs"];
m7_243 [label="String.IsNullOrEmpty(queue)", span="400-400", cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="WorkerFacts.cs"];
m7_246 [label="var state = new EnqueuedState(''The job has been enqueued by a user.'', queue)", span="406-406", cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="WorkerFacts.cs"];
m7_244 [label="return false;", span="402-402", cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="WorkerFacts.cs"];
m7_245 [label="var stateMachine = new StateMachine(Redis)", span="405-405", cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="WorkerFacts.cs"];
m7_248 [label="Exit HangFire.Web.JobStorage.EnqueueScheduled(string)", span="393-393", cluster="HangFire.Web.JobStorage.EnqueueScheduled(string)", file="WorkerFacts.cs"];
m7_174 [label="Entry HangFire.Web.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="4-4", cluster="HangFire.Web.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="WorkerFacts.cs"];
m7_322 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="WorkerFacts.cs"];
m7_365 [label="Entry Unk.TrueForAll", span="", cluster="Unk.TrueForAll", file="WorkerFacts.cs"];
m7_434 [label="Entry lambda expression", span="593-593", cluster="lambda expression", file="WorkerFacts.cs"];
m7_32 [label="Entry lambda expression", span="66-76", cluster="lambda expression", file="WorkerFacts.cs"];
m7_40 [label="Entry lambda expression", span="76-76", cluster="lambda expression", file="WorkerFacts.cs"];
m7_33 [label="new ProcessingJobDto\r\n                    {\r\n                        ServerName = state[1],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.Name.Equals(\r\n                            state[2], StringComparison.OrdinalIgnoreCase),\r\n                        State = state[2]\r\n                    }", span="66-76", cluster="lambda expression", file="WorkerFacts.cs"];
m7_34 [label="Exit lambda expression", span="66-76", cluster="lambda expression", file="WorkerFacts.cs"];
m7_41 [label="x.Value.StartedAt", span="76-76", cluster="lambda expression", file="WorkerFacts.cs"];
m7_42 [label="Exit lambda expression", span="76-76", cluster="lambda expression", file="WorkerFacts.cs"];
m7_70 [label="jobs.Add(job.Key, x)", span="107-107", cluster="lambda expression", file="WorkerFacts.cs"];
m7_84 [label="new ScheduleDto\r\n                    {\r\n                        ScheduledAt = JobHelper.FromTimestamp((long) job.Value),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(jobs[job.Key][1]),\r\n                        Queue = JobHelper.TryToGetQueue(jobs[job.Key][0]),\r\n                        Type = jobs[job.Key][0],\r\n                        InScheduledState =\r\n                            ScheduledState.Name.Equals(states[job.Key], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="121-129", cluster="lambda expression", file="WorkerFacts.cs"];
m7_78 [label="states.Add(job.Key, x)", span="113-113", cluster="lambda expression", file="WorkerFacts.cs"];
m7_65 [label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Args'' })", span="104-106", cluster="lambda expression", file="WorkerFacts.cs"];
m7_74 [label="x.GetValueFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                ''State'')", span="110-112", cluster="lambda expression", file="WorkerFacts.cs"];
m7_64 [label="Entry lambda expression", span="104-106", cluster="lambda expression", file="WorkerFacts.cs"];
m7_69 [label="Entry lambda expression", span="107-107", cluster="lambda expression", file="WorkerFacts.cs"];
m7_73 [label="Entry lambda expression", span="110-112", cluster="lambda expression", file="WorkerFacts.cs"];
m7_77 [label="Entry lambda expression", span="113-113", cluster="lambda expression", file="WorkerFacts.cs"];
m7_80 [label="Entry lambda expression", span="120-120", cluster="lambda expression", file="WorkerFacts.cs"];
m7_83 [label="Entry lambda expression", span="121-129", cluster="lambda expression", file="WorkerFacts.cs"];
m7_66 [label="Exit lambda expression", span="104-106", cluster="lambda expression", file="WorkerFacts.cs"];
m7_71 [label="Exit lambda expression", span="107-107", cluster="lambda expression", file="WorkerFacts.cs"];
m7_75 [label="Exit lambda expression", span="110-112", cluster="lambda expression", file="WorkerFacts.cs"];
m7_79 [label="Exit lambda expression", span="113-113", cluster="lambda expression", file="WorkerFacts.cs"];
m7_81 [label="job.Key", span="120-120", cluster="lambda expression", file="WorkerFacts.cs"];
m7_82 [label="Exit lambda expression", span="120-120", cluster="lambda expression", file="WorkerFacts.cs"];
m7_85 [label="Exit lambda expression", span="121-129", cluster="lambda expression", file="WorkerFacts.cs"];
m7_120 [label="servers.Add(name, x)", span="173-173", cluster="lambda expression", file="WorkerFacts.cs"];
m7_130 [label="new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }", span="184-191", cluster="lambda expression", file="WorkerFacts.cs"];
m7_127 [label="queues.Add(name, x)", span="178-178", cluster="lambda expression", file="WorkerFacts.cs"];
m7_117 [label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat'')", span="170-172", cluster="lambda expression", file="WorkerFacts.cs"];
m7_123 [label="x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name))", span="176-177", cluster="lambda expression", file="WorkerFacts.cs"];
m7_116 [label="Entry lambda expression", span="170-172", cluster="lambda expression", file="WorkerFacts.cs"];
m7_119 [label="Entry lambda expression", span="173-173", cluster="lambda expression", file="WorkerFacts.cs"];
m7_122 [label="Entry lambda expression", span="176-177", cluster="lambda expression", file="WorkerFacts.cs"];
m7_126 [label="Entry lambda expression", span="178-178", cluster="lambda expression", file="WorkerFacts.cs"];
m7_129 [label="Entry lambda expression", span="184-191", cluster="lambda expression", file="WorkerFacts.cs"];
m7_118 [label="Exit lambda expression", span="170-172", cluster="lambda expression", file="WorkerFacts.cs"];
m7_121 [label="Exit lambda expression", span="173-173", cluster="lambda expression", file="WorkerFacts.cs"];
m7_124 [label="Exit lambda expression", span="176-177", cluster="lambda expression", file="WorkerFacts.cs"];
m7_128 [label="Exit lambda expression", span="178-178", cluster="lambda expression", file="WorkerFacts.cs"];
m7_131 [label="Exit lambda expression", span="184-191", cluster="lambda expression", file="WorkerFacts.cs"];
m7_141 [label="Entry lambda expression", span="209-219", cluster="lambda expression", file="WorkerFacts.cs"];
m7_142 [label="new FailedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.Name.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="209-219", cluster="lambda expression", file="WorkerFacts.cs"];
m7_143 [label="Exit lambda expression", span="209-219", cluster="lambda expression", file="WorkerFacts.cs"];
m7_151 [label="Entry lambda expression", span="237-244", cluster="lambda expression", file="WorkerFacts.cs"];
m7_152 [label="new SucceededJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InSucceededState = SucceededState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="237-244", cluster="lambda expression", file="WorkerFacts.cs"];
m7_153 [label="Exit lambda expression", span="237-244", cluster="lambda expression", file="WorkerFacts.cs"];
m7_177 [label="x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1)", span="264-265", cluster="lambda expression", file="WorkerFacts.cs"];
m7_183 [label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queue))", span="269-269", cluster="lambda expression", file="WorkerFacts.cs"];
m7_189 [label="x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue))", span="273-273", cluster="lambda expression", file="WorkerFacts.cs"];
m7_176 [label="Entry lambda expression", span="264-265", cluster="lambda expression", file="WorkerFacts.cs"];
m7_179 [label="Entry lambda expression", span="266-266", cluster="lambda expression", file="WorkerFacts.cs"];
m7_182 [label="Entry lambda expression", span="269-269", cluster="lambda expression", file="WorkerFacts.cs"];
m7_185 [label="Entry lambda expression", span="270-270", cluster="lambda expression", file="WorkerFacts.cs"];
m7_188 [label="Entry lambda expression", span="273-273", cluster="lambda expression", file="WorkerFacts.cs"];
m7_191 [label="Entry lambda expression", span="274-274", cluster="lambda expression", file="WorkerFacts.cs"];
m7_194 [label="Entry lambda expression", span="284-290", cluster="lambda expression", file="WorkerFacts.cs"];
m7_178 [label="Exit lambda expression", span="264-265", cluster="lambda expression", file="WorkerFacts.cs"];
m7_180 [label="firstJobIds = x", span="266-266", cluster="lambda expression", file="WorkerFacts.cs"];
m7_181 [label="Exit lambda expression", span="266-266", cluster="lambda expression", file="WorkerFacts.cs"];
m7_184 [label="Exit lambda expression", span="269-269", cluster="lambda expression", file="WorkerFacts.cs"];
m7_186 [label="length = x", span="270-270", cluster="lambda expression", file="WorkerFacts.cs"];
m7_187 [label="Exit lambda expression", span="270-270", cluster="lambda expression", file="WorkerFacts.cs"];
m7_190 [label="Exit lambda expression", span="273-273", cluster="lambda expression", file="WorkerFacts.cs"];
m7_192 [label="dequeued = x", span="274-274", cluster="lambda expression", file="WorkerFacts.cs"];
m7_193 [label="Exit lambda expression", span="274-274", cluster="lambda expression", file="WorkerFacts.cs"];
m7_195 [label="new EnqueuedJobDto\r\n                        {\r\n                            Type = job[0],\r\n                            Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        }", span="284-290", cluster="lambda expression", file="WorkerFacts.cs"];
m7_196 [label="Exit lambda expression", span="284-290", cluster="lambda expression", file="WorkerFacts.cs"];
m7_203 [label="Entry lambda expression", span="320-326", cluster="lambda expression", file="WorkerFacts.cs"];
m7_204 [label="new EnqueuedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="320-326", cluster="lambda expression", file="WorkerFacts.cs"];
m7_205 [label="Exit lambda expression", span="320-326", cluster="lambda expression", file="WorkerFacts.cs"];
m7_211 [label="Entry lambda expression", span="344-352", cluster="lambda expression", file="WorkerFacts.cs"];
m7_212 [label="new DequeuedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        State = job[2],\r\n                        CreatedAt = JobHelper.FromNullableStringTimestamp(job[3]),\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(job[4]),\r\n                        CheckedAt = JobHelper.FromNullableStringTimestamp(job[5])\r\n                    }", span="344-352", cluster="lambda expression", file="WorkerFacts.cs"];
m7_213 [label="Exit lambda expression", span="344-352", cluster="lambda expression", file="WorkerFacts.cs"];
m7_265 [label="!hiddenProperties.Contains(x.Key)", span="433-433", cluster="lambda expression", file="WorkerFacts.cs"];
m7_264 [label="Entry lambda expression", span="433-433", cluster="lambda expression", file="WorkerFacts.cs"];
m7_268 [label="Entry lambda expression", span="433-433", cluster="lambda expression", file="WorkerFacts.cs"];
m7_271 [label="Entry lambda expression", span="433-433", cluster="lambda expression", file="WorkerFacts.cs"];
m7_266 [label="Exit lambda expression", span="433-433", cluster="lambda expression", file="WorkerFacts.cs"];
m7_269 [label="x.Key", span="433-433", cluster="lambda expression", file="WorkerFacts.cs"];
m7_270 [label="Exit lambda expression", span="433-433", cluster="lambda expression", file="WorkerFacts.cs"];
m7_272 [label="x.Value", span="433-433", cluster="lambda expression", file="WorkerFacts.cs"];
m7_273 [label="Exit lambda expression", span="433-433", cluster="lambda expression", file="WorkerFacts.cs"];
m7_299 [label="String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="450-450", cluster="lambda expression", file="WorkerFacts.cs"];
m7_298 [label="Entry lambda expression", span="450-450", cluster="lambda expression", file="WorkerFacts.cs"];
m7_300 [label="Exit lambda expression", span="450-450", cluster="lambda expression", file="WorkerFacts.cs"];
m7_327 [label="String.Format(''hangfire:stats:{0}:{1}'', type, x)", span="482-482", cluster="lambda expression", file="WorkerFacts.cs"];
m7_323 [label="Entry lambda expression", span="481-481", cluster="lambda expression", file="WorkerFacts.cs"];
m7_326 [label="Entry lambda expression", span="482-482", cluster="lambda expression", file="WorkerFacts.cs"];
m7_324 [label="x.ToString(''yyyy-MM-dd'')", span="481-481", cluster="lambda expression", file="WorkerFacts.cs"];
m7_325 [label="Exit lambda expression", span="481-481", cluster="lambda expression", file="WorkerFacts.cs"];
m7_328 [label="Exit lambda expression", span="482-482", cluster="lambda expression", file="WorkerFacts.cs"];
m7_344 [label="x.GetValuesFromHash(String.Format(''hangfire:job:{0}'', id), properties)", span="519-519", cluster="lambda expression", file="WorkerFacts.cs"];
m7_352 [label="x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties)", span="525-525", cluster="lambda expression", file="WorkerFacts.cs"];
m7_362 [label="new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null) ? default(T) : selector(x.Job, x.State))", span="540-542", cluster="lambda expression", file="WorkerFacts.cs"];
m7_347 [label="!jobs.ContainsKey(id)", span="520-520", cluster="lambda expression", file="WorkerFacts.cs"];
m7_348 [label="jobs.Add(id, x)", span="520-520", cluster="lambda expression", file="WorkerFacts.cs"];
m7_359 [label="new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                }", span="534-539", cluster="lambda expression", file="WorkerFacts.cs"];
m7_355 [label="!states.ContainsKey(id)", span="526-526", cluster="lambda expression", file="WorkerFacts.cs"];
m7_356 [label="states.Add(id, x)", span="526-526", cluster="lambda expression", file="WorkerFacts.cs"];
m7_343 [label="Entry lambda expression", span="519-519", cluster="lambda expression", file="WorkerFacts.cs"];
m7_346 [label="Entry lambda expression", span="520-520", cluster="lambda expression", file="WorkerFacts.cs"];
m7_351 [label="Entry lambda expression", span="525-525", cluster="lambda expression", file="WorkerFacts.cs"];
m7_354 [label="Entry lambda expression", span="526-526", cluster="lambda expression", file="WorkerFacts.cs"];
m7_358 [label="Entry lambda expression", span="534-539", cluster="lambda expression", file="WorkerFacts.cs"];
m7_361 [label="Entry lambda expression", span="540-542", cluster="lambda expression", file="WorkerFacts.cs"];
m7_345 [label="Exit lambda expression", span="519-519", cluster="lambda expression", file="WorkerFacts.cs"];
m7_349 [label="Exit lambda expression", span="520-520", cluster="lambda expression", file="WorkerFacts.cs"];
m7_353 [label="Exit lambda expression", span="525-525", cluster="lambda expression", file="WorkerFacts.cs"];
m7_357 [label="Exit lambda expression", span="526-526", cluster="lambda expression", file="WorkerFacts.cs"];
m7_360 [label="Exit lambda expression", span="534-539", cluster="lambda expression", file="WorkerFacts.cs"];
m7_363 [label="Exit lambda expression", span="540-542", cluster="lambda expression", file="WorkerFacts.cs"];
m7_367 [label="Entry lambda expression", span="542-542", cluster="lambda expression", file="WorkerFacts.cs"];
m7_368 [label="y == null", span="542-542", cluster="lambda expression", file="WorkerFacts.cs"];
m7_369 [label="Exit lambda expression", span="542-542", cluster="lambda expression", file="WorkerFacts.cs"];
m7_397 [label="stats.Servers = x", span="566-566", cluster="lambda expression", file="WorkerFacts.cs"];
m7_403 [label="stats.Queues = x", span="570-570", cluster="lambda expression", file="WorkerFacts.cs"];
m7_409 [label="stats.Scheduled = x", span="574-574", cluster="lambda expression", file="WorkerFacts.cs"];
m7_415 [label="stats.Processing = x", span="578-578", cluster="lambda expression", file="WorkerFacts.cs"];
m7_422 [label="stats.Succeeded = long.Parse(x ?? ''0'')", span="582-582", cluster="lambda expression", file="WorkerFacts.cs"];
m7_429 [label="stats.Failed = x", span="586-586", cluster="lambda expression", file="WorkerFacts.cs"];
m7_435 [label="stats.Enqueued += x", span="593-593", cluster="lambda expression", file="WorkerFacts.cs"];
m7_392 [label="Entry lambda expression", span="565-565", cluster="lambda expression", file="WorkerFacts.cs"];
m7_396 [label="Entry lambda expression", span="566-566", cluster="lambda expression", file="WorkerFacts.cs"];
m7_399 [label="Entry lambda expression", span="569-569", cluster="lambda expression", file="WorkerFacts.cs"];
m7_402 [label="Entry lambda expression", span="570-570", cluster="lambda expression", file="WorkerFacts.cs"];
m7_405 [label="Entry lambda expression", span="573-573", cluster="lambda expression", file="WorkerFacts.cs"];
m7_408 [label="Entry lambda expression", span="574-574", cluster="lambda expression", file="WorkerFacts.cs"];
m7_411 [label="Entry lambda expression", span="577-577", cluster="lambda expression", file="WorkerFacts.cs"];
m7_414 [label="Entry lambda expression", span="578-578", cluster="lambda expression", file="WorkerFacts.cs"];
m7_417 [label="Entry lambda expression", span="581-581", cluster="lambda expression", file="WorkerFacts.cs"];
m7_421 [label="Entry lambda expression", span="582-582", cluster="lambda expression", file="WorkerFacts.cs"];
m7_425 [label="Entry lambda expression", span="585-585", cluster="lambda expression", file="WorkerFacts.cs"];
m7_428 [label="Entry lambda expression", span="586-586", cluster="lambda expression", file="WorkerFacts.cs"];
m7_432 [label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName))", span="592-592", cluster="lambda expression", file="WorkerFacts.cs"];
m7_431 [label="Entry lambda expression", span="592-592", cluster="lambda expression", file="WorkerFacts.cs"];
m7_393 [label="x.GetSetCount(''hangfire:servers'')", span="565-565", cluster="lambda expression", file="WorkerFacts.cs"];
m7_394 [label="Exit lambda expression", span="565-565", cluster="lambda expression", file="WorkerFacts.cs"];
m7_398 [label="Exit lambda expression", span="566-566", cluster="lambda expression", file="WorkerFacts.cs"];
m7_400 [label="x.GetSetCount(''hangfire:queues'')", span="569-569", cluster="lambda expression", file="WorkerFacts.cs"];
m7_401 [label="Exit lambda expression", span="569-569", cluster="lambda expression", file="WorkerFacts.cs"];
m7_404 [label="Exit lambda expression", span="570-570", cluster="lambda expression", file="WorkerFacts.cs"];
m7_406 [label="x.GetSortedSetCount(''hangfire:schedule'')", span="573-573", cluster="lambda expression", file="WorkerFacts.cs"];
m7_407 [label="Exit lambda expression", span="573-573", cluster="lambda expression", file="WorkerFacts.cs"];
m7_410 [label="Exit lambda expression", span="574-574", cluster="lambda expression", file="WorkerFacts.cs"];
m7_412 [label="x.GetSortedSetCount(''hangfire:processing'')", span="577-577", cluster="lambda expression", file="WorkerFacts.cs"];
m7_413 [label="Exit lambda expression", span="577-577", cluster="lambda expression", file="WorkerFacts.cs"];
m7_416 [label="Exit lambda expression", span="578-578", cluster="lambda expression", file="WorkerFacts.cs"];
m7_418 [label="x.GetValue(''hangfire:stats:succeeded'')", span="581-581", cluster="lambda expression", file="WorkerFacts.cs"];
m7_419 [label="Exit lambda expression", span="581-581", cluster="lambda expression", file="WorkerFacts.cs"];
m7_423 [label="Exit lambda expression", span="582-582", cluster="lambda expression", file="WorkerFacts.cs"];
m7_426 [label="x.GetSortedSetCount(''hangfire:failed'')", span="585-585", cluster="lambda expression", file="WorkerFacts.cs"];
m7_427 [label="Exit lambda expression", span="585-585", cluster="lambda expression", file="WorkerFacts.cs"];
m7_430 [label="Exit lambda expression", span="586-586", cluster="lambda expression", file="WorkerFacts.cs"];
m7_433 [label="Exit lambda expression", span="592-592", cluster="lambda expression", file="WorkerFacts.cs"];
m7_436 [label="Exit lambda expression", span="593-593", cluster="lambda expression", file="WorkerFacts.cs"];
m7_28 [label="Entry Unk.GetRangeFromSortedSet", span="", cluster="Unk.GetRangeFromSortedSet", file="WorkerFacts.cs"];
m7_175 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="WorkerFacts.cs"];
m7_115 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="WorkerFacts.cs"];
m7_67 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="WorkerFacts.cs"];
m7_220 [label="Entry HangFire.Web.JobStorage.HourlyFailedJobs()", span="364-364", cluster="HangFire.Web.JobStorage.HourlyFailedJobs()", file="WorkerFacts.cs"];
m7_221 [label=Redis, span="366-366", cluster="HangFire.Web.JobStorage.HourlyFailedJobs()", file="WorkerFacts.cs"];
m7_222 [label="return GetHourlyTimelineStats(Redis, ''failed'');", span="368-368", cluster="HangFire.Web.JobStorage.HourlyFailedJobs()", file="WorkerFacts.cs"];
m7_223 [label="Exit HangFire.Web.JobStorage.HourlyFailedJobs()", span="364-364", cluster="HangFire.Web.JobStorage.HourlyFailedJobs()", file="WorkerFacts.cs"];
m7_35 [label="Entry HangFire.Web.ProcessingJobDto.ProcessingJobDto()", span="5-5", cluster="HangFire.Web.ProcessingJobDto.ProcessingJobDto()", file="WorkerFacts.cs"];
m7_61 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="WorkerFacts.cs"];
m7_135 [label="Entry HangFire.Web.JobStorage.FailedJobs(int, int)", span="195-195", cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="WorkerFacts.cs"];
m7_136 [label=Redis, span="197-197", cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="WorkerFacts.cs"];
m7_137 [label="var failedJobIds = Redis.GetRangeFromSortedSetDesc(\r\n                    ''hangfire:failed'',\r\n                    from,\r\n                    from + count - 1)", span="199-202", cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="WorkerFacts.cs"];
m7_138 [label="return GetJobsWithProperties(\r\n                    Redis,\r\n                    failedJobIds,\r\n                    new[] { ''Type'', ''Args'' },\r\n                    new[] { ''FailedAt'', ''ExceptionType'', ''ExceptionMessage'', ''ExceptionDetails'', ''State'' },\r\n                    (job, state) => new FailedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.Name.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="204-219", cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="WorkerFacts.cs"];
m7_139 [label="Exit HangFire.Web.JobStorage.FailedJobs(int, int)", span="195-195", cluster="HangFire.Web.JobStorage.FailedJobs(int, int)", file="WorkerFacts.cs"];
m7_0 [label="Entry HangFire.Web.JobStorage.ScheduledCount()", span="12-12", cluster="HangFire.Web.JobStorage.ScheduledCount()", file="WorkerFacts.cs"];
m7_1 [label=Redis, span="14-14", cluster="HangFire.Web.JobStorage.ScheduledCount()", file="WorkerFacts.cs"];
m7_2 [label="return Redis.GetSortedSetCount(''hangfire:schedule'');", span="16-16", cluster="HangFire.Web.JobStorage.ScheduledCount()", file="WorkerFacts.cs"];
m7_3 [label="Exit HangFire.Web.JobStorage.ScheduledCount()", span="12-12", cluster="HangFire.Web.JobStorage.ScheduledCount()", file="WorkerFacts.cs"];
m7_37 [label="Entry HangFire.JobHelper.TryToGetQueue(string)", span="11-11", cluster="HangFire.JobHelper.TryToGetQueue(string)", file="WorkerFacts.cs"];
m7_144 [label="Entry HangFire.Web.FailedJobDto.FailedJobDto()", span="5-5", cluster="HangFire.Web.FailedJobDto.FailedJobDto()", file="WorkerFacts.cs"];
m7_87 [label="Entry HangFire.JobHelper.FromTimestamp(long)", span="57-57", cluster="HangFire.JobHelper.FromTimestamp(long)", file="WorkerFacts.cs"];
m7_301 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)", file="WorkerFacts.cs"];
m7_145 [label="Entry HangFire.Web.JobStorage.SucceededJobs(int, int)", span="223-223", cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="WorkerFacts.cs"];
m7_146 [label=Redis, span="225-225", cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="WorkerFacts.cs"];
m7_147 [label="var succeededJobIds = Redis.GetRangeFromList(\r\n                    ''hangfire:succeeded'',\r\n                    from,\r\n                    from + count - 1)", span="227-230", cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="WorkerFacts.cs"];
m7_148 [label="return GetJobsWithProperties(\r\n                    Redis,\r\n                    succeededJobIds,\r\n                    new[] { ''Type'', ''Args'' },\r\n                    new[] { ''SucceededAt'', ''State'' },\r\n                    (job, state) => new SucceededJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Queue = JobHelper.TryToGetQueue(job[0]),\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InSucceededState = SucceededState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="232-244", cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="WorkerFacts.cs"];
m7_149 [label="Exit HangFire.Web.JobStorage.SucceededJobs(int, int)", span="223-223", cluster="HangFire.Web.JobStorage.SucceededJobs(int, int)", file="WorkerFacts.cs"];
m7_172 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="WorkerFacts.cs"];
m7_295 [label="Entry Unk.ElementAt", span="", cluster="Unk.ElementAt", file="WorkerFacts.cs"];
m7_150 [label="Entry Unk.GetRangeFromList", span="", cluster="Unk.GetRangeFromList", file="WorkerFacts.cs"];
m7_155 [label="Entry HangFire.Web.JobStorage.Queues()", span="248-248", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_156 [label=Redis, span="250-250", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_157 [label="var queues = Redis.GetAllItemsFromSet(''hangfire:queues'')", span="252-252", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_158 [label="var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count)", span="253-253", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_159 [label=queues, span="255-255", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_169 [label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = queue,\r\n                        FirstJobs = jobs,\r\n                        Length = length,\r\n                        Dequeued = dequeued\r\n                    })", span="292-298", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_170 [label="return result;", span="301-301", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_160 [label="IList<string> firstJobIds = null", span="257-257", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_164 [label="pipeline.QueueCommand(\r\n                            x => x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1),\r\n                            x => firstJobIds = x)", span="263-266", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_165 [label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queue)),\r\n                            x => length = x)", span="268-270", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_166 [label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue)),\r\n                            x => dequeued = x)", span="272-274", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_161 [label="long length = 0", span="258-258", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_162 [label="long dequeued = 0", span="259-259", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_163 [label="var pipeline = Redis.CreatePipeline()", span="261-261", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_167 [label="pipeline.Flush()", span="276-276", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_168 [label="var jobs = GetJobsWithProperties(\r\n                        Redis,\r\n                        firstJobIds,\r\n                        new[] { ''Type'', ''Args'' },\r\n                        new[] { ''EnqueuedAt'', ''State'' },\r\n                        (job, state) => new EnqueuedJobDto\r\n                        {\r\n                            Type = job[0],\r\n                            Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        })", span="279-290", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_171 [label="Exit HangFire.Web.JobStorage.Queues()", span="248-248", cluster="HangFire.Web.JobStorage.Queues()", file="WorkerFacts.cs"];
m7_88 [label="Entry HangFire.Web.JobStorage.SucceededByDatesCount()", span="133-133", cluster="HangFire.Web.JobStorage.SucceededByDatesCount()", file="WorkerFacts.cs"];
m7_89 [label=Redis, span="135-135", cluster="HangFire.Web.JobStorage.SucceededByDatesCount()", file="WorkerFacts.cs"];
m7_90 [label="return GetTimelineStats(Redis, ''succeeded'');", span="137-137", cluster="HangFire.Web.JobStorage.SucceededByDatesCount()", file="WorkerFacts.cs"];
m7_91 [label="Exit HangFire.Web.JobStorage.SucceededByDatesCount()", span="133-133", cluster="HangFire.Web.JobStorage.SucceededByDatesCount()", file="WorkerFacts.cs"];
m7_62 [label="Entry Unk.Flush", span="", cluster="Unk.Flush", file="WorkerFacts.cs"];
m7_154 [label="Entry HangFire.Web.SucceededJobDto.SucceededJobDto()", span="5-5", cluster="HangFire.Web.SucceededJobDto.SucceededJobDto()", file="WorkerFacts.cs"];
m7_424 [label="Entry Unk.Parse", span="", cluster="Unk.Parse", file="WorkerFacts.cs"];
m7_72 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="WorkerFacts.cs"];
m7_97 [label="Entry HangFire.Web.JobStorage.Servers()", span="149-149", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_98 [label=Redis, span="151-151", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_99 [label="var serverNames = Redis.GetAllItemsFromSet(''hangfire:servers'')", span="153-153", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_100 [label="serverNames.Count == 0", span="155-155", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_105 [label=serverNames, span="165-165", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_110 [label="return serverNames.Select(x => new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }).ToList();", span="184-191", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_101 [label="return new List<ServerDto>();", span="157-157", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_102 [label="var servers = new Dictionary<string, List<string>>()", span="160-160", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_103 [label="var queues = new Dictionary<string, List<string>>()", span="161-161", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_107 [label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat''),\r\n                            x => servers.Add(name, x))", span="169-173", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_104 [label="var pipeline = Redis.CreatePipeline()", span="163-163", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_108 [label="pipeline.QueueCommand(\r\n                            x => x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name)),\r\n                            x => queues.Add(name, x))", span="175-178", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_109 [label="pipeline.Flush()", span="181-181", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_106 [label="var name = serverName", span="167-167", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_111 [label="Exit HangFire.Web.JobStorage.Servers()", span="149-149", cluster="HangFire.Web.JobStorage.Servers()", file="WorkerFacts.cs"];
m7_374 [label="Entry HangFire.Web.JobStorage.GetStatistics()", span="554-554", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_375 [label=Redis, span="556-556", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_376 [label="var stats = new StatisticsDto()", span="558-558", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_377 [label="var queues = Redis.GetAllItemsFromSet(''hangfire:queues'')", span="560-560", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_379 [label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:servers''),\r\n                        x => stats.Servers = x)", span="564-566", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_380 [label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:queues''),\r\n                        x => stats.Queues = x)", span="568-570", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_381 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:schedule''),\r\n                        x => stats.Scheduled = x)", span="572-574", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_382 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:processing''),\r\n                        x => stats.Processing = x)", span="576-578", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_383 [label="pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:succeeded''),\r\n                        x => stats.Succeeded = long.Parse(x ?? ''0''))", span="580-582", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_384 [label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:failed''),\r\n                        x => stats.Failed = x)", span="584-586", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_387 [label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName)),\r\n                            x => stats.Enqueued += x)", span="591-593", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_389 [label="return stats;", span="599-599", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_378 [label="var pipeline = Redis.CreatePipeline()", span="562-562", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_385 [label=queues, span="588-588", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_388 [label="pipeline.Flush()", span="596-596", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_386 [label="var queueName = queue", span="590-590", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_390 [label="Exit HangFire.Web.JobStorage.GetStatistics()", span="554-554", cluster="HangFire.Web.JobStorage.GetStatistics()", file="WorkerFacts.cs"];
m7_370 [label="Entry HangFire.Web.JobStorage.SucceededListCount()", span="546-546", cluster="HangFire.Web.JobStorage.SucceededListCount()", file="WorkerFacts.cs"];
m7_371 [label=Redis, span="548-548", cluster="HangFire.Web.JobStorage.SucceededListCount()", file="WorkerFacts.cs"];
m7_372 [label="return Redis.GetListCount(''hangfire:succeeded'');", span="550-550", cluster="HangFire.Web.JobStorage.SucceededListCount()", file="WorkerFacts.cs"];
m7_373 [label="Exit HangFire.Web.JobStorage.SucceededListCount()", span="546-546", cluster="HangFire.Web.JobStorage.SucceededListCount()", file="WorkerFacts.cs"];
m7_215 [label="Entry HangFire.Web.JobStorage.HourlySucceededJobs()", span="356-356", cluster="HangFire.Web.JobStorage.HourlySucceededJobs()", file="WorkerFacts.cs"];
m7_216 [label=Redis, span="358-358", cluster="HangFire.Web.JobStorage.HourlySucceededJobs()", file="WorkerFacts.cs"];
m7_217 [label="return GetHourlyTimelineStats(Redis, ''succeeded'');", span="360-360", cluster="HangFire.Web.JobStorage.HourlySucceededJobs()", file="WorkerFacts.cs"];
m7_218 [label="Exit HangFire.Web.JobStorage.HourlySucceededJobs()", span="356-356", cluster="HangFire.Web.JobStorage.HourlySucceededJobs()", file="WorkerFacts.cs"];
m7_39 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="WorkerFacts.cs"];
m7_293 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="WorkerFacts.cs"];
m7_92 [label="Entry HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", span="468-468", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_303 [label="var endDate = DateTime.UtcNow.Date", span="471-471", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_310 [label="var keys = stringDates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x)).ToList()", span="482-482", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_311 [label="var valuesMap = redis.GetValuesMap(keys)", span="484-484", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_304 [label="var startDate = endDate.AddDays(-7)", span="472-472", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_306 [label="startDate <= endDate", span="475-475", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_307 [label="dates.Add(endDate)", span="477-477", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_308 [label="endDate = endDate.AddDays(-1)", span="478-478", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_305 [label="var dates = new List<DateTime>()", span="473-473", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_309 [label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="481-481", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_318 [label="result.Add(dates[i], value)", span="494-494", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_314 [label="i < stringDates.Count", span="487-487", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_312 [label="var result = new Dictionary<DateTime, long>()", span="486-486", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_316 [label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="490-490", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_313 [label="var i = 0", span="487-487", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_320 [label="return result;", span="497-497", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_319 [label="i++", span="487-487", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_315 [label="long value", span="489-489", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_317 [label="value = 0", span="492-492", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_321 [label="Exit HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", span="468-468", cluster="HangFire.Web.JobStorage.GetTimelineStats(IRedisClient, string)", file="WorkerFacts.cs"];
m7_4 [label="Entry Unk.GetSortedSetCount", span="", cluster="Unk.GetSortedSetCount", file="WorkerFacts.cs"];
m7_15 [label="Entry HangFire.Web.JobStorage.FailedCount()", span="36-36", cluster="HangFire.Web.JobStorage.FailedCount()", file="WorkerFacts.cs"];
m7_16 [label=Redis, span="38-38", cluster="HangFire.Web.JobStorage.FailedCount()", file="WorkerFacts.cs"];
m7_17 [label="return Redis.GetSortedSetCount(''hangfire:failed'');", span="40-40", cluster="HangFire.Web.JobStorage.FailedCount()", file="WorkerFacts.cs"];
m7_18 [label="Exit HangFire.Web.JobStorage.FailedCount()", span="36-36", cluster="HangFire.Web.JobStorage.FailedCount()", file="WorkerFacts.cs"];
m7_260 [label="Entry HangFire.Web.JobDetailsDto.JobDetailsDto()", span="4-4", cluster="HangFire.Web.JobDetailsDto.JobDetailsDto()", file="WorkerFacts.cs"];
m7_249 [label="Entry HangFire.Web.JobStorage.JobDetails(string)", span="412-412", cluster="HangFire.Web.JobStorage.JobDetails(string)", file="WorkerFacts.cs"];
m7_250 [label=Redis, span="414-414", cluster="HangFire.Web.JobStorage.JobDetails(string)", file="WorkerFacts.cs"];
m7_251 [label="var job = Redis.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', jobId))", span="416-416", cluster="HangFire.Web.JobStorage.JobDetails(string)", file="WorkerFacts.cs"];
m7_255 [label="var historyList = Redis.GetAllItemsFromList(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId))", span="421-422", cluster="HangFire.Web.JobStorage.JobDetails(string)", file="WorkerFacts.cs"];
m7_252 [label="job.Count == 0", span="417-417", cluster="HangFire.Web.JobStorage.JobDetails(string)", file="WorkerFacts.cs"];
m7_257 [label="return new JobDetailsDto\r\n                {\r\n                    Type = job[''Type''],\r\n                    Arguments = JobHelper.FromJson<Dictionary<string, string>>(job[''Args'']),\r\n                    State = job.ContainsKey(''State'') ? job[''State''] : null,\r\n                    Properties = job.Where(x => !hiddenProperties.Contains(x.Key)).ToDictionary(x => x.Key, x => x.Value),\r\n                    History = history\r\n                };", span="428-435", cluster="HangFire.Web.JobStorage.JobDetails(string)", file="WorkerFacts.cs"];
m7_253 [label="return null;", span="417-417", cluster="HangFire.Web.JobStorage.JobDetails(string)", file="WorkerFacts.cs"];
m7_254 [label="var hiddenProperties = new[] { ''Type'', ''Args'', ''State'' }", span="419-419", cluster="HangFire.Web.JobStorage.JobDetails(string)", file="WorkerFacts.cs"];
m7_256 [label="var history = historyList\r\n                    .Select(JobHelper.FromJson<Dictionary<string, string>>)\r\n                    .ToList()", span="424-426", cluster="HangFire.Web.JobStorage.JobDetails(string)", file="WorkerFacts.cs"];
m7_258 [label="Exit HangFire.Web.JobStorage.JobDetails(string)", span="412-412", cluster="HangFire.Web.JobStorage.JobDetails(string)", file="WorkerFacts.cs"];
m7_297 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="WorkerFacts.cs"];
m7_5 [label="Entry HangFire.Web.JobStorage.EnqueuedCount(string)", span="20-20", cluster="HangFire.Web.JobStorage.EnqueuedCount(string)", file="WorkerFacts.cs"];
m7_6 [label=Redis, span="22-22", cluster="HangFire.Web.JobStorage.EnqueuedCount(string)", file="WorkerFacts.cs"];
m7_7 [label="return Redis.GetListCount(String.Format(''hangfire:queue:{0}'', queue));", span="24-24", cluster="HangFire.Web.JobStorage.EnqueuedCount(string)", file="WorkerFacts.cs"];
m7_8 [label="Exit HangFire.Web.JobStorage.EnqueuedCount(string)", span="20-20", cluster="HangFire.Web.JobStorage.EnqueuedCount(string)", file="WorkerFacts.cs"];
m7_302 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="WorkerFacts.cs"];
m7_259 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="WorkerFacts.cs"];
m7_63 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="WorkerFacts.cs"];
m7_342 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", file="WorkerFacts.cs"];
m7_395 [label="Entry Unk.GetSetCount", span="", cluster="Unk.GetSetCount", file="WorkerFacts.cs"];
m7_206 [label="Entry HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", span="330-330", cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="WorkerFacts.cs"];
m7_207 [label=Redis, span="333-333", cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="WorkerFacts.cs"];
m7_208 [label="var jobIds = Redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    from, from + perPage - 1)", span="335-337", cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="WorkerFacts.cs"];
m7_209 [label="return GetJobsWithProperties(\r\n                    Redis,\r\n                    jobIds,\r\n                    new[] { ''Type'', ''Args'', ''State'', ''CreatedAt'', ''Fetched'', ''Checked'' },\r\n                    null,\r\n                    (job, state) => new DequeuedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        State = job[2],\r\n                        CreatedAt = JobHelper.FromNullableStringTimestamp(job[3]),\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(job[4]),\r\n                        CheckedAt = JobHelper.FromNullableStringTimestamp(job[5])\r\n                    });", span="339-352", cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="WorkerFacts.cs"];
m7_210 [label="Exit HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", span="330-330", cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="WorkerFacts.cs"];
m7_9 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="WorkerFacts.cs"];
m7_93 [label="Entry HangFire.Web.JobStorage.FailedByDatesCount()", span="141-141", cluster="HangFire.Web.JobStorage.FailedByDatesCount()", file="WorkerFacts.cs"];
m7_94 [label=Redis, span="143-143", cluster="HangFire.Web.JobStorage.FailedByDatesCount()", file="WorkerFacts.cs"];
m7_95 [label="return GetTimelineStats(Redis, ''failed'');", span="145-145", cluster="HangFire.Web.JobStorage.FailedByDatesCount()", file="WorkerFacts.cs"];
m7_96 [label="Exit HangFire.Web.JobStorage.FailedByDatesCount()", span="141-141", cluster="HangFire.Web.JobStorage.FailedByDatesCount()", file="WorkerFacts.cs"];
m7_261 [label="Entry Unk.>", span="", cluster="Unk.>", file="WorkerFacts.cs"];
m7_10 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount", file="WorkerFacts.cs"];
m7_86 [label="Entry HangFire.Web.ScheduleDto.ScheduleDto()", span="5-5", cluster="HangFire.Web.ScheduleDto.ScheduleDto()", file="WorkerFacts.cs"];
m7_59 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="WorkerFacts.cs"];
m7_235 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="WorkerFacts.cs"];
m7_294 [label="Entry Unk.GetValuesMap", span="", cluster="Unk.GetValuesMap", file="WorkerFacts.cs"];
m7_19 [label="Entry HangFire.Web.JobStorage.ProcessingCount()", span="44-44", cluster="HangFire.Web.JobStorage.ProcessingCount()", file="WorkerFacts.cs"];
m7_20 [label=Redis, span="46-46", cluster="HangFire.Web.JobStorage.ProcessingCount()", file="WorkerFacts.cs"];
m7_21 [label="return Redis.GetSortedSetCount(''hangfire:processing'');", span="48-48", cluster="HangFire.Web.JobStorage.ProcessingCount()", file="WorkerFacts.cs"];
m7_22 [label="Exit HangFire.Web.JobStorage.ProcessingCount()", span="44-44", cluster="HangFire.Web.JobStorage.ProcessingCount()", file="WorkerFacts.cs"];
m7_125 [label="Entry Unk.GetAllItemsFromList", span="", cluster="Unk.GetAllItemsFromList", file="WorkerFacts.cs"];
m7_267 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="WorkerFacts.cs"];
m7_114 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="WorkerFacts.cs"];
m7_112 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="WorkerFacts.cs"];
m7_140 [label="Entry Unk.GetRangeFromSortedSetDesc", span="", cluster="Unk.GetRangeFromSortedSetDesc", file="WorkerFacts.cs"];
m7_420 [label="Entry Unk.GetValue", span="", cluster="Unk.GetValue", file="WorkerFacts.cs"];
m7_68 [label="Entry Unk.GetValuesFromHash", span="", cluster="Unk.GetValuesFromHash", file="WorkerFacts.cs"];
m7_224 [label="Entry HangFire.Web.JobStorage.RetryJob(string)", span="372-372", cluster="HangFire.Web.JobStorage.RetryJob(string)", file="WorkerFacts.cs"];
m7_225 [label=Redis, span="374-374", cluster="HangFire.Web.JobStorage.RetryJob(string)", file="WorkerFacts.cs"];
m7_226 [label="var jobType = Redis.GetValueFromHash(String.Format(''hangfire:job:{0}'', jobId), ''Type'')", span="376-376", cluster="HangFire.Web.JobStorage.RetryJob(string)", file="WorkerFacts.cs"];
m7_232 [label="return stateMachine.ChangeState(jobId, state, FailedState.Name);", span="389-389", cluster="HangFire.Web.JobStorage.RetryJob(string)", file="WorkerFacts.cs"];
m7_227 [label="var queue = JobHelper.TryToGetQueue(jobType)", span="378-378", cluster="HangFire.Web.JobStorage.RetryJob(string)", file="WorkerFacts.cs"];
m7_228 [label="String.IsNullOrEmpty(queue)", span="379-379", cluster="HangFire.Web.JobStorage.RetryJob(string)", file="WorkerFacts.cs"];
m7_231 [label="var state = new EnqueuedState(''The job has been retried by a user.'', queue)", span="387-387", cluster="HangFire.Web.JobStorage.RetryJob(string)", file="WorkerFacts.cs"];
m7_229 [label="return false;", span="381-381", cluster="HangFire.Web.JobStorage.RetryJob(string)", file="WorkerFacts.cs"];
m7_230 [label="var stateMachine = new StateMachine(Redis)", span="386-386", cluster="HangFire.Web.JobStorage.RetryJob(string)", file="WorkerFacts.cs"];
m7_233 [label="Exit HangFire.Web.JobStorage.RetryJob(string)", span="372-372", cluster="HangFire.Web.JobStorage.RetryJob(string)", file="WorkerFacts.cs"];
m7_198 [label="Entry HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", span="305-305", cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="WorkerFacts.cs"];
m7_199 [label=Redis, span="308-308", cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="WorkerFacts.cs"];
m7_200 [label="var jobIds = Redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}'', queue),\r\n                    from,\r\n                    from + perPage - 1)", span="310-313", cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="WorkerFacts.cs"];
m7_201 [label="return GetJobsWithProperties(\r\n                    Redis,\r\n                    jobIds,\r\n                    new[] { ''Type'', ''Args'' },\r\n                    new[] { ''EnqueuedAt'', ''State'' },\r\n                    (job, state) => new EnqueuedJobDto\r\n                    {\r\n                        Type = job[0],\r\n                        Args = JobHelper.FromJson<Dictionary<string, string>>(job[1]),\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = EnqueuedState.Name.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", span="315-326", cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="WorkerFacts.cs"];
m7_202 [label="Exit HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", span="305-305", cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="WorkerFacts.cs"];
m7_437 [label=job, span="", file="WorkerFacts.cs"];
m7_438 [label=jobs, span="", file="WorkerFacts.cs"];
m7_439 [label=states, span="", file="WorkerFacts.cs"];
m7_440 [label=name, span="", file="WorkerFacts.cs"];
m7_441 [label=servers, span="", file="WorkerFacts.cs"];
m7_442 [label=queues, span="", file="WorkerFacts.cs"];
m7_443 [label=queue, span="", file="WorkerFacts.cs"];
m7_444 [label=hiddenProperties, span="", file="WorkerFacts.cs"];
m7_445 [label=string, span="", file="WorkerFacts.cs"];
m7_446 [label=string, span="", file="WorkerFacts.cs"];
m7_447 [label="string[]", span="", file="WorkerFacts.cs"];
m7_448 [label=id, span="", file="WorkerFacts.cs"];
m7_449 [label=jobs, span="", file="WorkerFacts.cs"];
m7_450 [label="string[]", span="", file="WorkerFacts.cs"];
m7_451 [label=states, span="", file="WorkerFacts.cs"];
m7_452 [label="System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", span="", file="WorkerFacts.cs"];
m7_453 [label=stats, span="", file="WorkerFacts.cs"];
m7_454 [label=queueName, span="", file="WorkerFacts.cs"];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IStateMachine"];
m0_0 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m0_0 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m0_0 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Storage.IStorageConnection"];
m0_0 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IStateMachine"];
m0_0 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=0, style=solid];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_5  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_7  [key=0, style=solid];
m0_7 -> m0_8  [key=0, style=solid];
m0_8 -> m0_9  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_2 -> m0_11  [key=0, style=solid];
m0_2 -> m0_12  [key=2, style=dotted];
m0_4 -> m0_11  [key=0, style=solid];
m0_4 -> m0_12  [key=2, style=dotted];
m0_6 -> m0_11  [key=0, style=solid];
m0_6 -> m0_12  [key=2, style=dotted];
m0_11 -> m0_0  [key=0, style=bold, color=blue];
m0_18 -> m0_19  [key=0, style=solid];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_21  [key=2, style=dotted];
m0_19 -> m0_22  [key=2, style=dotted];
m0_20 -> m0_18  [key=0, style=bold, color=blue];
m0_13 -> m0_14  [key=0, style=solid];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_16  [key=2, style=dotted];
m0_14 -> m0_17  [key=2, style=dotted];
m0_15 -> m0_13  [key=0, style=bold, color=blue];
m0_23 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
m0_23 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
m0_23 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
m0_23 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
m0_23 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
m0_23 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ElectStateContext"];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_5  [key=2, style=dotted];
m1_24 -> m1_6  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_5  [key=2, style=dotted];
m1_25 -> m1_11  [key=2, style=dotted];
m1_26 -> m1_23  [key=0, style=bold, color=blue];
m1_7 -> m1_8  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_5  [key=2, style=dotted];
m1_8 -> m1_6  [key=2, style=dotted];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_5  [key=2, style=dotted];
m1_9 -> m1_11  [key=2, style=dotted];
m1_10 -> m1_7  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_5  [key=2, style=dotted];
m1_3 -> m1_6  [key=2, style=dotted];
m1_4 -> m1_2  [key=0, style=bold, color=blue];
m1_40 -> m1_41  [key=0, style=solid];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_5  [key=2, style=dotted];
m1_41 -> m1_35  [key=2, style=dotted];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_44  [key=2, style=dotted];
m1_43 -> m1_40  [key=0, style=bold, color=blue];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_6  [key=2, style=dotted];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_5  [key=2, style=dotted];
m1_17 -> m1_11  [key=2, style=dotted];
m1_18 -> m1_15  [key=0, style=bold, color=blue];
m1_37 -> m1_38  [key=0, style=solid];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_5  [key=2, style=dotted];
m1_38 -> m1_30  [key=2, style=dotted];
m1_39 -> m1_37  [key=0, style=bold, color=blue];
m1_12 -> m1_13  [key=0, style=solid];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_5  [key=2, style=dotted];
m1_13 -> m1_11  [key=2, style=dotted];
m1_14 -> m1_12  [key=0, style=bold, color=blue];
m1_31 -> m1_32  [key=0, style=solid];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_5  [key=2, style=dotted];
m1_32 -> m1_35  [key=2, style=dotted];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_36  [key=2, style=dotted];
m1_34 -> m1_31  [key=0, style=bold, color=blue];
m1_19 -> m1_20  [key=0, style=solid];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_22  [key=2, style=dotted];
m1_20 -> m1_6  [key=2, style=dotted];
m1_21 -> m1_19  [key=0, style=bold, color=blue];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_5  [key=2, style=dotted];
m1_52 -> m1_49  [key=2, style=dotted];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_50  [key=2, style=dotted];
m1_54 -> m1_51  [key=0, style=bold, color=blue];
m1_27 -> m1_28  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_5  [key=2, style=dotted];
m1_28 -> m1_30  [key=2, style=dotted];
m1_29 -> m1_27  [key=0, style=bold, color=blue];
m1_45 -> m1_46  [key=0, style=solid];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_5  [key=2, style=dotted];
m1_46 -> m1_49  [key=2, style=dotted];
m1_47 -> m1_48  [key=0, style=solid];
m1_47 -> m1_50  [key=2, style=dotted];
m1_48 -> m1_45  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_0  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_26 -> m2_27  [key=0, style=solid];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_20  [key=2, style=dotted];
m2_17 -> m2_18  [key=0, style=solid];
m2_19 -> m2_17  [key=0, style=bold, color=blue];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_29  [key=2, style=dotted];
m2_28 -> m2_26  [key=0, style=bold, color=blue];
m2_3 -> m2_4  [key=0, style=solid, color=green];
m2_4 -> m2_5  [key=0, style=solid, color=green];
m2_4 -> m2_6  [key=2, style=dotted, color=green];
m2_4 -> m2_7  [key=2, style=dotted, color=green];
m2_5 -> m2_3  [key=0, style=bold, color=blue];
m2_8 -> m2_9  [key=0, style=solid, color=green];
m2_8 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label=IRedisTransaction];
m2_8 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_9 -> m2_10  [key=0, style=solid, color=green];
m2_9 -> m2_11  [key=0, style=solid, color=green];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_16  [key=2, style=dotted];
m2_12 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_10 -> m2_13  [key=0, style=solid, color=green];
m2_10 -> m2_14  [key=2, style=dotted, color=green];
m2_11 -> m2_12  [key=0, style=solid, color=green];
m2_11 -> m2_15  [key=2, style=dotted, color=green];
m2_11 -> m2_18  [key=1, style=dashed, color=green, label=timestamp];
m2_13 -> m2_8  [key=0, style=bold, color=blue];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label=IRedisTransaction];
m2_21 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> m2_24  [key=0, style=solid];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_16  [key=2, style=dotted];
m2_24 -> m2_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_23 -> m2_25  [key=0, style=solid];
m2_23 -> m2_14  [key=2, style=dotted];
m2_25 -> m2_21  [key=0, style=bold, color=blue];
m2_30 -> m2_1  [key=1, style=dashed, color=green, label="HangFire.States.ScheduledState"];
m2_30 -> m2_4  [key=1, style=dashed, color=green, label="HangFire.States.ScheduledState"];
m2_30 -> m2_11  [key=1, style=dashed, color=green, label="HangFire.States.ScheduledState"];
m2_31 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_32 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label=timestamp];
m2_33 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_119 -> m3_120  [key=0, style=solid];
m3_119 -> m3_122  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerContext"];
m3_119 -> m3_124  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerContext"];
m3_119 -> m3_125  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_120 -> m3_121  [key=0, style=solid];
m3_120 -> m3_122  [key=0, style=solid];
m3_122 -> m3_123  [key=0, style=solid];
m3_122 -> m3_124  [key=0, style=solid];
m3_124 -> m3_125  [key=0, style=solid];
m3_124 -> m3_127  [key=2, style=dotted];
m3_125 -> m3_126  [key=0, style=solid];
m3_125 -> m3_67  [key=2, style=dotted];
m3_125 -> m3_71  [key=2, style=dotted];
m3_121 -> m3_126  [key=0, style=solid];
m3_121 -> m3_8  [key=2, style=dotted];
m3_123 -> m3_126  [key=0, style=solid];
m3_123 -> m3_8  [key=2, style=dotted];
m3_126 -> m3_119  [key=0, style=bold, color=blue];
m3_97 -> m3_98  [key=0, style=solid];
m3_97 -> m3_100  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_97 -> m3_102  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_98 -> m3_99  [key=0, style=solid];
m3_98 -> m3_100  [key=0, style=solid];
m3_100 -> m3_101  [key=0, style=solid];
m3_100 -> m3_102  [key=0, style=solid];
m3_102 -> m3_103  [key=0, style=solid];
m3_102 -> m3_69  [key=2, style=dotted];
m3_102 -> m3_45  [key=2, style=dotted];
m3_99 -> m3_103  [key=0, style=solid];
m3_99 -> m3_8  [key=2, style=dotted];
m3_101 -> m3_103  [key=0, style=solid];
m3_101 -> m3_8  [key=2, style=dotted];
m3_103 -> m3_97  [key=0, style=bold, color=blue];
m3_49 -> m3_50  [key=0, style=solid];
m3_49 -> m3_52  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m3_49 -> m3_55  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.Job"];
m3_49 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m3_49 -> m3_57  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m3_49 -> m3_58  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m3_49 -> m3_60  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m3_50 -> m3_51  [key=0, style=solid];
m3_50 -> m3_52  [key=0, style=solid];
m3_52 -> m3_53  [key=0, style=solid];
m3_52 -> m3_54  [key=0, style=solid];
m3_55 -> m3_56  [key=0, style=solid];
m3_55 -> m3_66  [key=2, style=dotted];
m3_56 -> m3_57  [key=0, style=solid];
m3_56 -> m3_67  [key=2, style=dotted];
m3_56 -> m3_68  [key=2, style=dotted];
m3_56 -> m3_69  [key=2, style=dotted];
m3_56 -> m3_70  [key=2, style=dotted];
m3_56 -> m3_48  [key=2, style=dotted];
m3_56 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m3_56 -> m3_64  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m3_57 -> m3_58  [key=0, style=solid];
m3_57 -> m3_64  [key=0, style=solid];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label=parameterArray];
m3_58 -> m3_63  [key=1, style=dashed, color=darkseagreen4, label=parameterArray];
m3_60 -> m3_61  [key=0, style=solid];
m3_60 -> m3_62  [key=0, style=solid];
m3_51 -> m3_65  [key=0, style=solid];
m3_51 -> m3_8  [key=2, style=dotted];
m3_53 -> m3_65  [key=0, style=solid];
m3_53 -> m3_8  [key=2, style=dotted];
m3_54 -> m3_55  [key=0, style=solid];
m3_54 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label=createJobSql];
m3_54 -> m3_54  [key=3, color=darkorchid, style=bold, label="Local variable string createJobSql"];
m3_61 -> m3_60  [key=0, style=solid];
m3_61 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label=parameterIndex];
m3_64 -> m3_65  [key=0, style=solid];
m3_59 -> m3_60  [key=0, style=solid];
m3_59 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label=parameterIndex];
m3_59 -> m3_30  [key=3, color=darkorchid, style=bold, label="Local variable int parameterIndex"];
m3_63 -> m3_64  [key=0, style=solid];
m3_63 -> m3_71  [key=2, style=dotted];
m3_62 -> m3_63  [key=0, style=solid];
m3_62 -> m3_62  [key=3, color=darkorchid, style=bold, label="Local variable string insertParameterSql"];
m3_65 -> m3_49  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m3_0 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m3_0 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=0, style=solid];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_5  [key=0, style=solid];
m3_5 -> m3_6  [key=0, style=solid];
m3_6 -> m3_7  [key=0, style=solid];
m3_2 -> m3_7  [key=0, style=solid];
m3_2 -> m3_8  [key=2, style=dotted];
m3_4 -> m3_7  [key=0, style=solid];
m3_4 -> m3_8  [key=2, style=dotted];
m3_7 -> m3_0  [key=0, style=bold, color=blue];
m3_72 -> m3_73  [key=0, style=solid];
m3_72 -> m3_76  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_72 -> m3_77  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Storage.JobData GetJobData"];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_75  [key=0, style=solid];
m3_76 -> m3_77  [key=0, style=solid];
m3_76 -> m3_69  [key=2, style=dotted];
m3_76 -> m3_45  [key=2, style=dotted];
m3_76 -> m3_79  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m3_76 -> m3_80  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m3_76 -> m3_86  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m3_74 -> m3_87  [key=0, style=solid];
m3_74 -> m3_8  [key=2, style=dotted];
m3_75 -> m3_76  [key=0, style=solid];
m3_75 -> m3_75  [key=3, color=darkorchid, style=bold, label="Local variable string sql"];
m3_77 -> m3_78  [key=0, style=solid];
m3_77 -> m3_79  [key=0, style=solid];
m3_79 -> m3_80  [key=0, style=solid];
m3_79 -> m3_69  [key=2, style=dotted];
m3_79 -> m3_83  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m3_80 -> m3_81  [key=0, style=solid];
m3_86 -> m3_87  [key=0, style=solid];
m3_86 -> m3_89  [key=2, style=dotted];
m3_78 -> m3_87  [key=0, style=solid];
m3_83 -> m3_84  [key=0, style=solid];
m3_83 -> m3_86  [key=0, style=solid];
m3_83 -> m3_88  [key=2, style=dotted];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_77  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.Job job"];
m3_82 -> m3_83  [key=0, style=solid];
m3_82 -> m3_77  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.JobLoadException loadException"];
m3_82 -> m3_84  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.JobLoadException loadException"];
m3_84 -> m3_85  [key=0, style=solid];
m3_85 -> m3_86  [key=0, style=solid];
m3_87 -> m3_72  [key=0, style=bold, color=blue];
m3_13 -> m3_14  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_16  [key=2, style=dotted];
m3_15 -> m3_13  [key=0, style=bold, color=blue];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_25  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m3_22 -> m3_31  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m3_22 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m3_23 -> m3_24  [key=0, style=solid];
m3_23 -> m3_25  [key=0, style=solid];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_27  [key=0, style=solid];
m3_31 -> m3_32  [key=0, style=solid];
m3_31 -> m3_42  [key=2, style=dotted];
m3_31 -> m3_31  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m3_31 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m3_32 -> m3_33  [key=0, style=solid];
m3_32 -> m3_21  [key=2, style=dotted];
m3_32 -> m3_43  [key=2, style=dotted];
m3_32 -> m3_44  [key=2, style=dotted];
m3_32 -> m3_45  [key=2, style=dotted];
m3_32 -> m3_38  [key=1, style=dashed, color=darkseagreen4, label=idAndQueue];
m3_32 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label=idAndQueue];
m3_24 -> m3_40  [key=0, style=solid];
m3_24 -> m3_8  [key=2, style=dotted];
m3_26 -> m3_40  [key=0, style=solid];
m3_26 -> m3_41  [key=2, style=dotted];
m3_27 -> m3_28  [key=0, style=solid];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label=fetchJobSqlTemplate];
m3_28 -> m3_28  [key=3, color=darkorchid, style=bold, label="Local variable string fetchJobSqlTemplate"];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label=fetchConditions];
m3_29 -> m3_34  [key=1, style=dashed, color=darkseagreen4, label=fetchConditions];
m3_29 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label=fetchConditions];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label=currentQueryIndex];
m3_30 -> m3_34  [key=1, style=dashed, color=darkseagreen4, label=currentQueryIndex];
m3_30 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label=currentQueryIndex];
m3_30 -> m3_30  [key=3, color=darkorchid, style=bold, label="Local variable int currentQueryIndex"];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_37  [key=0, style=solid];
m3_37 -> m3_38  [key=0, style=solid];
m3_37 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label=currentQueryIndex];
m3_35 -> m3_36  [key=0, style=solid];
m3_35 -> m3_46  [key=2, style=dotted];
m3_35 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m3_33 -> m3_34  [key=0, style=solid];
m3_33 -> m3_37  [key=0, style=solid];
m3_38 -> m3_30  [key=0, style=solid];
m3_38 -> m3_39  [key=0, style=solid];
m3_39 -> m3_40  [key=0, style=solid];
m3_39 -> m3_47  [key=2, style=dotted];
m3_39 -> m3_48  [key=2, style=dotted];
m3_36 -> m3_37  [key=0, style=solid];
m3_36 -> m3_42  [key=2, style=dotted];
m3_36 -> m3_36  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m3_40 -> m3_22  [key=0, style=bold, color=blue];
m3_138 -> m3_139  [key=0, style=solid];
m3_139 -> m3_140  [key=0, style=solid];
m3_139 -> m3_141  [key=0, style=solid];
m3_139 -> m3_143  [key=2, style=dotted];
m3_139 -> m3_139  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m3_140 -> m3_142  [key=0, style=solid];
m3_140 -> m3_41  [key=2, style=dotted];
m3_141 -> m3_142  [key=0, style=solid];
m3_141 -> m3_43  [key=2, style=dotted];
m3_141 -> m3_68  [key=2, style=dotted];
m3_141 -> m3_71  [key=2, style=dotted];
m3_141 -> m3_141  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m3_142 -> m3_138  [key=0, style=bold, color=blue];
m3_9 -> m3_10  [key=0, style=solid];
m3_10 -> m3_11  [key=0, style=solid];
m3_10 -> m3_12  [key=2, style=dotted];
m3_11 -> m3_9  [key=0, style=bold, color=blue];
m3_104 -> m3_105  [key=0, style=solid, color=red];
m3_104 -> m3_107  [key=1, style=dashed, color=red, label=string];
m3_104 -> m3_109  [key=1, style=dashed, color=red, label=string];
m3_105 -> m3_106  [key=0, style=solid, color=red];
m3_105 -> m3_107  [key=0, style=solid, color=red];
m3_107 -> m3_108  [key=0, style=solid, color=red];
m3_107 -> m3_109  [key=0, style=solid, color=red];
m3_109 -> m3_110  [key=0, style=solid, color=red];
m3_109 -> m3_71  [key=2, style=dotted, color=red];
m3_106 -> m3_110  [key=0, style=solid, color=red];
m3_106 -> m3_8  [key=2, style=dotted, color=red];
m3_108 -> m3_110  [key=0, style=solid, color=red];
m3_108 -> m3_8  [key=2, style=dotted, color=red];
m3_110 -> m3_104  [key=0, style=bold, color=blue];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_93  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_90 -> m3_95  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_91 -> m3_92  [key=0, style=solid];
m3_91 -> m3_93  [key=0, style=solid];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_95  [key=0, style=solid];
m3_95 -> m3_96  [key=0, style=solid];
m3_95 -> m3_71  [key=2, style=dotted];
m3_92 -> m3_96  [key=0, style=solid];
m3_92 -> m3_8  [key=2, style=dotted];
m3_94 -> m3_96  [key=0, style=solid];
m3_94 -> m3_8  [key=2, style=dotted];
m3_96 -> m3_90  [key=0, style=bold, color=blue];
m3_111 -> m3_112  [key=0, style=solid];
m3_111 -> m3_114  [key=1, style=dashed, color=darkseagreen4, label=double];
m3_111 -> m3_116  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_112 -> m3_113  [key=0, style=solid];
m3_112 -> m3_114  [key=0, style=solid];
m3_114 -> m3_115  [key=0, style=solid];
m3_114 -> m3_116  [key=0, style=solid];
m3_116 -> m3_117  [key=0, style=solid];
m3_116 -> m3_69  [key=2, style=dotted];
m3_116 -> m3_45  [key=2, style=dotted];
m3_113 -> m3_117  [key=0, style=solid];
m3_113 -> m3_8  [key=2, style=dotted];
m3_115 -> m3_117  [key=0, style=solid];
m3_115 -> m3_118  [key=2, style=dotted];
m3_117 -> m3_111  [key=0, style=bold, color=blue];
m3_17 -> m3_18  [key=0, style=solid];
m3_18 -> m3_19  [key=0, style=solid];
m3_18 -> m3_20  [key=2, style=dotted];
m3_18 -> m3_21  [key=2, style=dotted];
m3_19 -> m3_17  [key=0, style=bold, color=blue];
m3_128 -> m3_129  [key=0, style=solid];
m3_128 -> m3_131  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_129 -> m3_130  [key=0, style=solid];
m3_129 -> m3_131  [key=0, style=solid];
m3_131 -> m3_132  [key=0, style=solid];
m3_131 -> m3_71  [key=2, style=dotted];
m3_130 -> m3_132  [key=0, style=solid];
m3_130 -> m3_8  [key=2, style=dotted];
m3_132 -> m3_128  [key=0, style=bold, color=blue];
m3_133 -> m3_134  [key=0, style=solid];
m3_133 -> m3_136  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_134 -> m3_135  [key=0, style=solid];
m3_134 -> m3_136  [key=0, style=solid];
m3_136 -> m3_137  [key=0, style=solid];
m3_136 -> m3_71  [key=2, style=dotted];
m3_135 -> m3_137  [key=0, style=solid];
m3_135 -> m3_8  [key=2, style=dotted];
m3_137 -> m3_133  [key=0, style=bold, color=blue];
m3_144 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_18  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_63  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_76  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_95  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_102  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_109  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_116  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_125  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_131  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_136  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m3_144 -> m3_141  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
m4_0 -> m4_1  [key=0, style=solid, color=green];
m4_0 -> m4_3  [key=1, style=dashed, color=green, label=string];
m4_0 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_0 -> m4_6  [key=1, style=dashed, color=green, label=string];
m4_1 -> m4_2  [key=0, style=solid, color=green];
m4_1 -> m4_3  [key=0, style=solid, color=green];
m4_3 -> m4_4  [key=0, style=solid, color=green];
m4_3 -> m4_5  [key=0, style=solid, color=green];
m4_5 -> m4_6  [key=0, style=solid, color=green];
m4_6 -> m4_7  [key=0, style=solid, color=green];
m4_2 -> m4_7  [key=0, style=solid, color=green];
m4_2 -> m4_8  [key=2, style=dotted, color=green];
m4_4 -> m4_7  [key=0, style=solid, color=green];
m4_4 -> m4_8  [key=2, style=dotted, color=green];
m4_7 -> m4_0  [key=0, style=bold, color=blue];
m4_9 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerProcessingJob"];
m4_9 -> m4_6  [key=1, style=dashed, color=green, label="HangFire.SqlServer.SqlServerProcessingJob"];
m5_0 -> m5_1  [key=0, style=solid, color=red];
m5_1 -> m5_2  [key=0, style=solid, color=red];
m5_1 -> m5_4  [key=2, style=dotted, color=red];
m5_1 -> m5_6  [key=1, style=dashed, color=red, label="lambda expression"];
m5_1 -> m5_5  [key=2, style=dotted];
m5_2 -> m5_3  [key=0, style=solid, color=green];
m5_2 -> m5_5  [key=2, style=dotted];
m5_2 -> m5_2  [key=1, style=dashed, color=darkseagreen4, label=stateMock];
m5_3 -> m5_0  [key=0, style=bold, color=blue];
m5_3 -> m5_4  [key=0, style=solid, color=green];
m5_3 -> m5_6  [key=2, style=dotted, color=green];
m5_7 -> m5_8  [key=0, style=solid, color=red];
m5_7 -> m5_9  [key=2, style=dotted, color=red];
m5_8 -> m5_9  [key=0, style=solid, color=green];
m5_8 -> m5_5  [key=2, style=dotted, color=green];
m5_8 -> m5_6  [key=0, style=bold, color=blue];
m5_9 -> m5_9  [key=1, style=dashed, color=green, label=stateMock];
m5_9 -> m5_10  [key=0, style=solid, color=green];
m5_10 -> m5_11  [key=0, style=solid, color=red];
m5_10 -> m5_12  [key=2, style=dotted, color=green];
m5_10 -> m5_13  [key=2, style=dotted, color=green];
m5_11 -> m5_7  [key=0, style=bold, color=blue];
m5_11 -> m5_12  [key=0, style=solid, color=red];
m5_11 -> m5_4  [key=2, style=dotted, color=red];
m5_11 -> m5_14  [key=1, style=dashed, color=red, label="lambda expression"];
m5_4 -> m5_0  [key=0, style=bold, color=blue];
m5_17 -> m5_18  [key=0, style=solid, color=red];
m5_18 -> m5_19  [key=0, style=solid, color=red];
m5_18 -> m5_9  [key=2, style=dotted, color=red];
m5_18 -> m5_20  [key=1, style=dashed, color=red, label=processingJob];
m5_19 -> m5_20  [key=0, style=solid];
m5_19 -> m5_5  [key=2, style=dotted];
m5_20 -> m5_21  [key=0, style=solid];
m5_20 -> m5_5  [key=2, style=dotted];
m5_21 -> m5_17  [key=0, style=bold, color=blue];
m5_6 -> m5_7  [key=0, style=solid, color=red];
m5_13 -> m5_10  [key=0, style=bold, color=blue];
m5_14 -> m5_15  [key=0, style=solid, color=red];
m5_15 -> m5_16  [key=0, style=solid, color=red];
m5_15 -> m5_9  [key=2, style=dotted, color=red];
m5_16 -> m5_14  [key=0, style=bold, color=blue];
m5_12 -> m5_13  [key=0, style=solid];
m5_12 -> m5_5  [key=2, style=dotted];
m6_26 -> m6_27  [key=0, style=solid];
m6_27 -> m6_26  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_3  [key=2, style=dotted];
m6_1 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_2 -> m6_0  [key=0, style=bold, color=blue];
m6_23 -> m6_24  [key=0, style=solid];
m6_4 -> m6_5  [key=0, style=solid];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_7  [key=2, style=dotted];
m6_6 -> m6_4  [key=0, style=bold, color=blue];
m6_24 -> m6_25  [key=0, style=solid];
m6_24 -> m6_26  [key=2, style=dotted];
m6_25 -> m6_23  [key=0, style=bold, color=blue];
m6_8 -> m6_9  [key=0, style=solid];
m6_9 -> m6_10  [key=0, style=solid];
m6_9 -> m6_17  [key=2, style=dotted];
m6_9 -> m6_13  [key=1, style=dashed, color=darkseagreen4, label=connection];
m6_10 -> m6_11  [key=0, style=solid];
m6_10 -> m6_18  [key=2, style=dotted];
m6_10 -> m6_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_10 -> m6_13  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_21  [key=2, style=dotted];
m6_11 -> m6_12  [key=0, style=solid];
m6_11 -> m6_19  [key=2, style=dotted];
m6_11 -> m6_13  [key=1, style=dashed, color=darkseagreen4, label=state];
m6_12 -> m6_13  [key=0, style=solid];
m6_12 -> m6_20  [key=2, style=dotted];
m6_14 -> m6_15  [key=0, style=solid];
m6_14 -> m6_7  [key=2, style=dotted];
m6_15 -> m6_16  [key=0, style=solid];
m6_15 -> m6_22  [key=2, style=dotted];
m6_16 -> m6_8  [key=0, style=bold, color=blue];
m7_43 -> m7_44  [key=0, style=solid];
m7_43 -> m7_45  [key=1, style=dashed, color=red, label=int];
m7_44 -> m7_45  [key=0, style=solid, color=red];
m7_45 -> m7_46  [key=0, style=solid, color=red];
m7_45 -> m7_58  [key=2, style=dotted, color=red];
m7_45 -> m7_51  [key=1, style=dashed, color=red, label=scheduledJobs];
m7_45 -> m7_56  [key=1, style=dashed, color=red, label=scheduledJobs];
m7_46 -> m7_47  [key=0, style=solid];
m7_46 -> m7_48  [key=0, style=solid, color=red];
m7_51 -> m7_52  [key=0, style=solid];
m7_51 -> m7_55  [key=0, style=solid];
m7_56 -> m7_57  [key=0, style=solid];
m7_56 -> m7_63  [key=2, style=dotted];
m7_56 -> m7_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_56 -> m7_83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_47 -> m7_57  [key=0, style=solid];
m7_47 -> m7_59  [key=2, style=dotted];
m7_48 -> m7_49  [key=0, style=solid, color=red];
m7_48 -> m7_59  [key=2, style=dotted, color=red];
m7_48 -> m7_53  [key=1, style=dashed, color=red, label=jobs];
m7_48 -> m7_70  [key=1, style=dashed, color=red, label=jobs];
m7_48 -> m7_56  [key=1, style=dashed, color=red, label=jobs];
m7_48 -> m7_84  [key=1, style=dashed, color=red, label=jobs];
m7_49 -> m7_50  [key=0, style=solid];
m7_49 -> m7_59  [key=2, style=dotted];
m7_49 -> m7_54  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_49 -> m7_78  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_49 -> m7_56  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_49 -> m7_84  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_53 -> m7_54  [key=0, style=solid];
m7_53 -> m7_61  [key=2, style=dotted];
m7_53 -> m7_64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_53 -> m7_69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_50 -> m7_51  [key=0, style=solid];
m7_50 -> m7_60  [key=2, style=dotted];
m7_50 -> m7_53  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_50 -> m7_54  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_50 -> m7_55  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_54 -> m7_51  [key=0, style=solid];
m7_54 -> m7_61  [key=2, style=dotted];
m7_54 -> m7_73  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_54 -> m7_77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_55 -> m7_56  [key=0, style=solid];
m7_55 -> m7_62  [key=2, style=dotted];
m7_52 -> m7_53  [key=0, style=solid];
m7_52 -> m7_65  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_52 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_52 -> m7_54  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_52 -> m7_74  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_52 -> m7_78  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_57 -> m7_43  [key=0, style=bold, color=blue];
m7_23 -> m7_24  [key=0, style=solid];
m7_23 -> m7_25  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_24 -> m7_25  [key=0, style=solid];
m7_25 -> m7_26  [key=0, style=solid];
m7_25 -> m7_28  [key=2, style=dotted];
m7_26 -> m7_27  [key=0, style=solid];
m7_26 -> m7_29  [key=2, style=dotted];
m7_26 -> m7_30  [key=2, style=dotted];
m7_26 -> m7_31  [key=2, style=dotted];
m7_26 -> m7_32  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_26 -> m7_40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_27 -> m7_23  [key=0, style=bold, color=blue];
m7_173 -> m7_329  [key=0, style=solid];
m7_173 -> m7_331  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m7_173 -> m7_332  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m7_173 -> m7_333  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m7_173 -> m7_334  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m7_173 -> m7_336  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_173 -> m7_344  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_173 -> m7_337  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_173 -> m7_338  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_173 -> m7_352  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_173 -> m7_340  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m7_173 -> m7_362  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>"];
m7_329 -> m7_330  [key=0, style=solid];
m7_329 -> m7_331  [key=0, style=solid];
m7_331 -> m7_332  [key=0, style=solid];
m7_331 -> m7_342  [key=2, style=dotted];
m7_331 -> m7_336  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m7_331 -> m7_347  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m7_331 -> m7_348  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m7_331 -> m7_340  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m7_331 -> m7_359  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m7_332 -> m7_333  [key=0, style=solid];
m7_332 -> m7_342  [key=2, style=dotted];
m7_332 -> m7_338  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_332 -> m7_355  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_332 -> m7_356  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_332 -> m7_340  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_332 -> m7_359  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_333 -> m7_334  [key=0, style=solid];
m7_333 -> m7_60  [key=2, style=dotted];
m7_333 -> m7_336  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_333 -> m7_338  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_333 -> m7_339  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_334 -> m7_335  [key=0, style=solid];
m7_334 -> m7_339  [key=0, style=solid];
m7_336 -> m7_337  [key=0, style=solid];
m7_336 -> m7_61  [key=2, style=dotted];
m7_336 -> m7_343  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_336 -> m7_346  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_337 -> m7_338  [key=0, style=solid];
m7_337 -> m7_334  [key=0, style=solid];
m7_338 -> m7_334  [key=0, style=solid];
m7_338 -> m7_61  [key=2, style=dotted];
m7_338 -> m7_351  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_338 -> m7_354  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_340 -> m7_341  [key=0, style=solid];
m7_340 -> m7_114  [key=2, style=dotted];
m7_340 -> m7_115  [key=2, style=dotted];
m7_340 -> m7_358  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_340 -> m7_361  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_330 -> m7_341  [key=0, style=solid];
m7_330 -> m7_113  [key=2, style=dotted];
m7_339 -> m7_340  [key=0, style=solid];
m7_339 -> m7_62  [key=2, style=dotted];
m7_335 -> m7_336  [key=0, style=solid];
m7_335 -> m7_344  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_335 -> m7_347  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_335 -> m7_348  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_335 -> m7_338  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_335 -> m7_352  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_335 -> m7_355  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_335 -> m7_356  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_341 -> m7_173  [key=0, style=bold, color=blue];
m7_11 -> m7_12  [key=0, style=solid];
m7_11 -> m7_13  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_12 -> m7_13  [key=0, style=solid];
m7_13 -> m7_14  [key=0, style=solid];
m7_13 -> m7_9  [key=2, style=dotted];
m7_13 -> m7_10  [key=2, style=dotted];
m7_14 -> m7_11  [key=0, style=bold, color=blue];
m7_219 -> m7_274  [key=0, style=solid];
m7_219 -> m7_281  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_219 -> m7_299  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_219 -> m7_282  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m7_274 -> m7_275  [key=0, style=solid];
m7_274 -> m7_278  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m7_274 -> m7_279  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m7_281 -> m7_282  [key=0, style=solid];
m7_281 -> m7_114  [key=2, style=dotted];
m7_281 -> m7_115  [key=2, style=dotted];
m7_281 -> m7_298  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_282 -> m7_283  [key=0, style=solid];
m7_282 -> m7_294  [key=2, style=dotted];
m7_282 -> m7_287  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m7_275 -> m7_276  [key=0, style=solid];
m7_275 -> m7_113  [key=2, style=dotted];
m7_275 -> m7_278  [key=1, style=dashed, color=darkseagreen4, label=dates];
m7_275 -> m7_281  [key=1, style=dashed, color=darkseagreen4, label=dates];
m7_275 -> m7_285  [key=1, style=dashed, color=darkseagreen4, label=dates];
m7_275 -> m7_289  [key=1, style=dashed, color=darkseagreen4, label=dates];
m7_278 -> m7_279  [key=0, style=solid];
m7_278 -> m7_175  [key=2, style=dotted];
m7_279 -> m7_280  [key=0, style=solid];
m7_279 -> m7_293  [key=2, style=dotted];
m7_279 -> m7_279  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m7_276 -> m7_277  [key=0, style=solid];
m7_276 -> m7_280  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_285 -> m7_286  [key=0, style=solid];
m7_285 -> m7_291  [key=0, style=solid];
m7_289 -> m7_290  [key=0, style=solid];
m7_289 -> m7_297  [key=2, style=dotted];
m7_277 -> m7_278  [key=0, style=solid];
m7_277 -> m7_281  [key=0, style=solid];
m7_280 -> m7_277  [key=0, style=solid];
m7_280 -> m7_280  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_283 -> m7_284  [key=0, style=solid];
m7_283 -> m7_59  [key=2, style=dotted];
m7_283 -> m7_289  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_283 -> m7_291  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_287 -> m7_288  [key=0, style=solid];
m7_287 -> m7_289  [key=0, style=solid];
m7_287 -> m7_295  [key=2, style=dotted];
m7_287 -> m7_296  [key=2, style=dotted];
m7_284 -> m7_285  [key=0, style=solid];
m7_284 -> m7_287  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_284 -> m7_289  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_284 -> m7_290  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_291 -> m7_292  [key=0, style=solid];
m7_290 -> m7_285  [key=0, style=solid];
m7_290 -> m7_290  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_286 -> m7_287  [key=0, style=solid];
m7_288 -> m7_289  [key=0, style=solid];
m7_292 -> m7_219  [key=0, style=bold, color=blue];
m7_239 -> m7_240  [key=0, style=solid];
m7_239 -> m7_241  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_239 -> m7_247  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_240 -> m7_241  [key=0, style=solid];
m7_241 -> m7_242  [key=0, style=solid];
m7_241 -> m7_9  [key=2, style=dotted];
m7_241 -> m7_76  [key=2, style=dotted];
m7_247 -> m7_248  [key=0, style=solid];
m7_247 -> m7_238  [key=2, style=dotted];
m7_242 -> m7_243  [key=0, style=solid];
m7_242 -> m7_234  [key=2, style=dotted];
m7_242 -> m7_246  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_243 -> m7_244  [key=0, style=solid];
m7_243 -> m7_245  [key=0, style=solid];
m7_243 -> m7_235  [key=2, style=dotted];
m7_246 -> m7_247  [key=0, style=solid];
m7_246 -> m7_237  [key=2, style=dotted];
m7_244 -> m7_248  [key=0, style=solid];
m7_245 -> m7_246  [key=0, style=solid];
m7_245 -> m7_236  [key=2, style=dotted];
m7_245 -> m7_247  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m7_248 -> m7_239  [key=0, style=bold, color=blue];
m7_434 -> m7_435  [key=0, style=solid];
m7_32 -> m7_33  [key=0, style=solid];
m7_40 -> m7_41  [key=0, style=solid];
m7_33 -> m7_34  [key=0, style=solid];
m7_33 -> m7_35  [key=2, style=dotted];
m7_33 -> m7_36  [key=2, style=dotted];
m7_33 -> m7_37  [key=2, style=dotted];
m7_33 -> m7_38  [key=2, style=dotted];
m7_33 -> m7_39  [key=2, style=dotted];
m7_34 -> m7_32  [key=0, style=bold, color=blue];
m7_41 -> m7_42  [key=0, style=solid];
m7_41 -> m7_41  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, HangFire.Web.ProcessingJobDto>"];
m7_42 -> m7_40  [key=0, style=bold, color=blue];
m7_70 -> m7_71  [key=0, style=solid];
m7_70 -> m7_72  [key=2, style=dotted];
m7_84 -> m7_85  [key=0, style=solid];
m7_84 -> m7_86  [key=2, style=dotted];
m7_84 -> m7_87  [key=2, style=dotted];
m7_84 -> m7_36  [key=2, style=dotted];
m7_84 -> m7_37  [key=2, style=dotted];
m7_84 -> m7_39  [key=2, style=dotted];
m7_78 -> m7_79  [key=0, style=solid];
m7_78 -> m7_72  [key=2, style=dotted];
m7_65 -> m7_66  [key=0, style=solid];
m7_65 -> m7_67  [key=2, style=dotted];
m7_65 -> m7_68  [key=2, style=dotted];
m7_74 -> m7_75  [key=0, style=solid];
m7_74 -> m7_67  [key=2, style=dotted];
m7_74 -> m7_76  [key=2, style=dotted];
m7_64 -> m7_65  [key=0, style=solid];
m7_69 -> m7_70  [key=0, style=solid];
m7_73 -> m7_74  [key=0, style=solid];
m7_77 -> m7_78  [key=0, style=solid];
m7_80 -> m7_81  [key=0, style=solid];
m7_83 -> m7_84  [key=0, style=solid];
m7_66 -> m7_64  [key=0, style=bold, color=blue];
m7_71 -> m7_69  [key=0, style=bold, color=blue];
m7_75 -> m7_73  [key=0, style=bold, color=blue];
m7_79 -> m7_77  [key=0, style=bold, color=blue];
m7_81 -> m7_82  [key=0, style=solid];
m7_82 -> m7_80  [key=0, style=bold, color=blue];
m7_85 -> m7_83  [key=0, style=bold, color=blue];
m7_120 -> m7_121  [key=0, style=solid];
m7_120 -> m7_72  [key=2, style=dotted];
m7_130 -> m7_131  [key=0, style=solid];
m7_130 -> m7_132  [key=2, style=dotted];
m7_130 -> m7_133  [key=2, style=dotted];
m7_130 -> m7_134  [key=2, style=dotted];
m7_130 -> m7_38  [key=2, style=dotted];
m7_127 -> m7_128  [key=0, style=solid];
m7_127 -> m7_72  [key=2, style=dotted];
m7_117 -> m7_118  [key=0, style=solid];
m7_117 -> m7_67  [key=2, style=dotted];
m7_117 -> m7_68  [key=2, style=dotted];
m7_123 -> m7_124  [key=0, style=solid];
m7_123 -> m7_67  [key=2, style=dotted];
m7_123 -> m7_125  [key=2, style=dotted];
m7_116 -> m7_117  [key=0, style=solid];
m7_119 -> m7_120  [key=0, style=solid];
m7_122 -> m7_123  [key=0, style=solid];
m7_126 -> m7_127  [key=0, style=solid];
m7_129 -> m7_130  [key=0, style=solid];
m7_118 -> m7_116  [key=0, style=bold, color=blue];
m7_121 -> m7_119  [key=0, style=bold, color=blue];
m7_124 -> m7_122  [key=0, style=bold, color=blue];
m7_128 -> m7_126  [key=0, style=bold, color=blue];
m7_131 -> m7_129  [key=0, style=bold, color=blue];
m7_141 -> m7_142  [key=0, style=solid];
m7_142 -> m7_143  [key=0, style=solid];
m7_142 -> m7_144  [key=2, style=dotted];
m7_142 -> m7_37  [key=2, style=dotted];
m7_142 -> m7_36  [key=2, style=dotted];
m7_142 -> m7_38  [key=2, style=dotted];
m7_142 -> m7_39  [key=2, style=dotted];
m7_143 -> m7_141  [key=0, style=bold, color=blue];
m7_151 -> m7_152  [key=0, style=solid];
m7_152 -> m7_153  [key=0, style=solid];
m7_152 -> m7_154  [key=2, style=dotted];
m7_152 -> m7_37  [key=2, style=dotted];
m7_152 -> m7_36  [key=2, style=dotted];
m7_152 -> m7_38  [key=2, style=dotted];
m7_152 -> m7_39  [key=2, style=dotted];
m7_153 -> m7_151  [key=0, style=bold, color=blue];
m7_177 -> m7_178  [key=0, style=solid];
m7_177 -> m7_67  [key=2, style=dotted];
m7_177 -> m7_150  [key=2, style=dotted];
m7_183 -> m7_184  [key=0, style=solid];
m7_183 -> m7_67  [key=2, style=dotted];
m7_183 -> m7_10  [key=2, style=dotted];
m7_189 -> m7_190  [key=0, style=solid];
m7_189 -> m7_67  [key=2, style=dotted];
m7_189 -> m7_10  [key=2, style=dotted];
m7_176 -> m7_177  [key=0, style=solid];
m7_179 -> m7_180  [key=0, style=solid];
m7_182 -> m7_183  [key=0, style=solid];
m7_185 -> m7_186  [key=0, style=solid];
m7_188 -> m7_189  [key=0, style=solid];
m7_191 -> m7_192  [key=0, style=solid];
m7_194 -> m7_195  [key=0, style=solid];
m7_178 -> m7_176  [key=0, style=bold, color=blue];
m7_180 -> m7_181  [key=0, style=solid];
m7_181 -> m7_179  [key=0, style=bold, color=blue];
m7_184 -> m7_182  [key=0, style=bold, color=blue];
m7_186 -> m7_187  [key=0, style=solid];
m7_187 -> m7_185  [key=0, style=bold, color=blue];
m7_190 -> m7_188  [key=0, style=bold, color=blue];
m7_192 -> m7_193  [key=0, style=solid];
m7_193 -> m7_191  [key=0, style=bold, color=blue];
m7_195 -> m7_196  [key=0, style=solid];
m7_195 -> m7_197  [key=2, style=dotted];
m7_195 -> m7_36  [key=2, style=dotted];
m7_195 -> m7_38  [key=2, style=dotted];
m7_195 -> m7_39  [key=2, style=dotted];
m7_196 -> m7_194  [key=0, style=bold, color=blue];
m7_203 -> m7_204  [key=0, style=solid];
m7_204 -> m7_205  [key=0, style=solid];
m7_204 -> m7_197  [key=2, style=dotted];
m7_204 -> m7_36  [key=2, style=dotted];
m7_204 -> m7_38  [key=2, style=dotted];
m7_204 -> m7_39  [key=2, style=dotted];
m7_205 -> m7_203  [key=0, style=bold, color=blue];
m7_211 -> m7_212  [key=0, style=solid];
m7_212 -> m7_213  [key=0, style=solid];
m7_212 -> m7_214  [key=2, style=dotted];
m7_212 -> m7_36  [key=2, style=dotted];
m7_212 -> m7_38  [key=2, style=dotted];
m7_213 -> m7_211  [key=0, style=bold, color=blue];
m7_265 -> m7_266  [key=0, style=solid];
m7_265 -> m7_267  [key=2, style=dotted];
m7_264 -> m7_265  [key=0, style=solid];
m7_268 -> m7_269  [key=0, style=solid];
m7_271 -> m7_272  [key=0, style=solid];
m7_266 -> m7_264  [key=0, style=bold, color=blue];
m7_269 -> m7_270  [key=0, style=solid];
m7_270 -> m7_268  [key=0, style=bold, color=blue];
m7_272 -> m7_273  [key=0, style=solid];
m7_273 -> m7_271  [key=0, style=bold, color=blue];
m7_299 -> m7_300  [key=0, style=solid];
m7_299 -> m7_301  [key=2, style=dotted];
m7_299 -> m7_302  [key=2, style=dotted];
m7_298 -> m7_299  [key=0, style=solid];
m7_300 -> m7_298  [key=0, style=bold, color=blue];
m7_327 -> m7_328  [key=0, style=solid];
m7_327 -> m7_67  [key=2, style=dotted];
m7_323 -> m7_324  [key=0, style=solid];
m7_326 -> m7_327  [key=0, style=solid];
m7_324 -> m7_325  [key=0, style=solid];
m7_324 -> m7_301  [key=2, style=dotted];
m7_325 -> m7_323  [key=0, style=bold, color=blue];
m7_328 -> m7_326  [key=0, style=bold, color=blue];
m7_344 -> m7_345  [key=0, style=solid];
m7_344 -> m7_9  [key=2, style=dotted];
m7_344 -> m7_68  [key=2, style=dotted];
m7_352 -> m7_353  [key=0, style=solid];
m7_352 -> m7_9  [key=2, style=dotted];
m7_352 -> m7_68  [key=2, style=dotted];
m7_362 -> m7_363  [key=0, style=solid];
m7_362 -> m7_364  [key=2, style=dotted];
m7_362 -> m7_365  [key=2, style=dotted];
m7_362 -> m7_366  [key=2, style=dotted];
m7_362 -> m7_367  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_347 -> m7_348  [key=0, style=solid];
m7_347 -> m7_349  [key=0, style=solid];
m7_347 -> m7_350  [key=2, style=dotted];
m7_348 -> m7_349  [key=0, style=solid];
m7_348 -> m7_72  [key=2, style=dotted];
m7_359 -> m7_360  [key=0, style=solid];
m7_359 -> m7_350  [key=2, style=dotted];
m7_355 -> m7_356  [key=0, style=solid];
m7_355 -> m7_357  [key=0, style=solid];
m7_355 -> m7_350  [key=2, style=dotted];
m7_356 -> m7_357  [key=0, style=solid];
m7_356 -> m7_72  [key=2, style=dotted];
m7_343 -> m7_344  [key=0, style=solid];
m7_346 -> m7_347  [key=0, style=solid];
m7_346 -> m7_348  [key=1, style=dashed, color=darkseagreen4, label="?"];
m7_351 -> m7_352  [key=0, style=solid];
m7_354 -> m7_355  [key=0, style=solid];
m7_354 -> m7_356  [key=1, style=dashed, color=darkseagreen4, label="?"];
m7_358 -> m7_359  [key=0, style=solid];
m7_361 -> m7_362  [key=0, style=solid];
m7_345 -> m7_343  [key=0, style=bold, color=blue];
m7_349 -> m7_346  [key=0, style=bold, color=blue];
m7_353 -> m7_351  [key=0, style=bold, color=blue];
m7_357 -> m7_354  [key=0, style=bold, color=blue];
m7_360 -> m7_358  [key=0, style=bold, color=blue];
m7_363 -> m7_361  [key=0, style=bold, color=blue];
m7_367 -> m7_368  [key=0, style=solid];
m7_368 -> m7_369  [key=0, style=solid];
m7_369 -> m7_367  [key=0, style=bold, color=blue];
m7_397 -> m7_398  [key=0, style=solid];
m7_403 -> m7_404  [key=0, style=solid];
m7_409 -> m7_410  [key=0, style=solid];
m7_415 -> m7_416  [key=0, style=solid];
m7_422 -> m7_423  [key=0, style=solid];
m7_422 -> m7_424  [key=2, style=dotted];
m7_429 -> m7_430  [key=0, style=solid];
m7_435 -> m7_436  [key=0, style=solid];
m7_392 -> m7_393  [key=0, style=solid];
m7_396 -> m7_397  [key=0, style=solid];
m7_399 -> m7_400  [key=0, style=solid];
m7_402 -> m7_403  [key=0, style=solid];
m7_405 -> m7_406  [key=0, style=solid];
m7_408 -> m7_409  [key=0, style=solid];
m7_411 -> m7_412  [key=0, style=solid];
m7_414 -> m7_415  [key=0, style=solid];
m7_417 -> m7_418  [key=0, style=solid];
m7_421 -> m7_422  [key=0, style=solid];
m7_425 -> m7_426  [key=0, style=solid];
m7_428 -> m7_429  [key=0, style=solid];
m7_432 -> m7_433  [key=0, style=solid];
m7_432 -> m7_67  [key=2, style=dotted];
m7_432 -> m7_10  [key=2, style=dotted];
m7_431 -> m7_432  [key=0, style=solid];
m7_393 -> m7_394  [key=0, style=solid];
m7_393 -> m7_395  [key=2, style=dotted];
m7_394 -> m7_392  [key=0, style=bold, color=blue];
m7_398 -> m7_396  [key=0, style=bold, color=blue];
m7_400 -> m7_401  [key=0, style=solid];
m7_400 -> m7_395  [key=2, style=dotted];
m7_401 -> m7_399  [key=0, style=bold, color=blue];
m7_404 -> m7_402  [key=0, style=bold, color=blue];
m7_406 -> m7_407  [key=0, style=solid];
m7_406 -> m7_4  [key=2, style=dotted];
m7_407 -> m7_405  [key=0, style=bold, color=blue];
m7_410 -> m7_408  [key=0, style=bold, color=blue];
m7_412 -> m7_413  [key=0, style=solid];
m7_412 -> m7_4  [key=2, style=dotted];
m7_413 -> m7_411  [key=0, style=bold, color=blue];
m7_416 -> m7_414  [key=0, style=bold, color=blue];
m7_418 -> m7_419  [key=0, style=solid];
m7_418 -> m7_420  [key=2, style=dotted];
m7_419 -> m7_417  [key=0, style=bold, color=blue];
m7_423 -> m7_421  [key=0, style=bold, color=blue];
m7_426 -> m7_427  [key=0, style=solid];
m7_426 -> m7_4  [key=2, style=dotted];
m7_427 -> m7_425  [key=0, style=bold, color=blue];
m7_430 -> m7_428  [key=0, style=bold, color=blue];
m7_433 -> m7_431  [key=0, style=bold, color=blue];
m7_436 -> m7_434  [key=0, style=bold, color=blue];
m7_220 -> m7_221  [key=0, style=solid];
m7_221 -> m7_222  [key=0, style=solid];
m7_222 -> m7_223  [key=0, style=solid];
m7_222 -> m7_219  [key=2, style=dotted];
m7_223 -> m7_220  [key=0, style=bold, color=blue];
m7_135 -> m7_136  [key=0, style=solid];
m7_135 -> m7_137  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_136 -> m7_137  [key=0, style=solid];
m7_137 -> m7_138  [key=0, style=solid];
m7_137 -> m7_140  [key=2, style=dotted];
m7_138 -> m7_139  [key=0, style=solid];
m7_138 -> m7_29  [key=2, style=dotted];
m7_138 -> m7_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_139 -> m7_135  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_1  [key=3, color=darkorchid, style=bold, label="Field variable string JobId"];
m7_2 -> m7_3  [key=0, style=solid];
m7_2 -> m7_4  [key=2, style=dotted];
m7_3 -> m7_0  [key=0, style=bold, color=blue];
m7_145 -> m7_146  [key=0, style=solid];
m7_145 -> m7_147  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_146 -> m7_147  [key=0, style=solid];
m7_147 -> m7_148  [key=0, style=solid];
m7_147 -> m7_150  [key=2, style=dotted];
m7_148 -> m7_149  [key=0, style=solid];
m7_148 -> m7_29  [key=2, style=dotted];
m7_148 -> m7_151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_149 -> m7_145  [key=0, style=bold, color=blue];
m7_155 -> m7_156  [key=0, style=solid];
m7_156 -> m7_157  [key=0, style=solid];
m7_157 -> m7_158  [key=0, style=solid];
m7_157 -> m7_112  [key=2, style=dotted];
m7_157 -> m7_159  [key=1, style=dashed, color=darkseagreen4, label=queues];
m7_158 -> m7_159  [key=0, style=solid];
m7_158 -> m7_172  [key=2, style=dotted];
m7_158 -> m7_169  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_158 -> m7_170  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_159 -> m7_160  [key=0, style=solid];
m7_159 -> m7_170  [key=0, style=solid];
m7_159 -> m7_164  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_159 -> m7_177  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_159 -> m7_165  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_159 -> m7_183  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_159 -> m7_166  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_159 -> m7_189  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_159 -> m7_169  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_169 -> m7_159  [key=0, style=solid];
m7_169 -> m7_174  [key=2, style=dotted];
m7_169 -> m7_175  [key=2, style=dotted];
m7_170 -> m7_171  [key=0, style=solid];
m7_160 -> m7_161  [key=0, style=solid];
m7_164 -> m7_165  [key=0, style=solid];
m7_164 -> m7_61  [key=2, style=dotted];
m7_164 -> m7_176  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_164 -> m7_179  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_164 -> m7_168  [key=1, style=dashed, color=darkseagreen4, label=firstJobIds];
m7_165 -> m7_166  [key=0, style=solid];
m7_165 -> m7_61  [key=2, style=dotted];
m7_165 -> m7_182  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_165 -> m7_185  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_165 -> m7_169  [key=1, style=dashed, color=darkseagreen4, label=length];
m7_166 -> m7_167  [key=0, style=solid];
m7_166 -> m7_61  [key=2, style=dotted];
m7_166 -> m7_188  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_166 -> m7_191  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_166 -> m7_169  [key=1, style=dashed, color=darkseagreen4, label=dequeued];
m7_161 -> m7_162  [key=0, style=solid];
m7_162 -> m7_163  [key=0, style=solid];
m7_163 -> m7_164  [key=0, style=solid];
m7_163 -> m7_60  [key=2, style=dotted];
m7_163 -> m7_165  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_163 -> m7_166  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_163 -> m7_167  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_167 -> m7_168  [key=0, style=solid];
m7_167 -> m7_62  [key=2, style=dotted];
m7_168 -> m7_169  [key=0, style=solid];
m7_168 -> m7_173  [key=2, style=dotted];
m7_168 -> m7_194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_171 -> m7_155  [key=0, style=bold, color=blue];
m7_88 -> m7_89  [key=0, style=solid];
m7_89 -> m7_90  [key=0, style=solid];
m7_90 -> m7_91  [key=0, style=solid];
m7_90 -> m7_92  [key=2, style=dotted];
m7_91 -> m7_88  [key=0, style=bold, color=blue];
m7_97 -> m7_98  [key=0, style=solid];
m7_98 -> m7_99  [key=0, style=solid];
m7_99 -> m7_100  [key=0, style=solid];
m7_99 -> m7_112  [key=2, style=dotted];
m7_99 -> m7_105  [key=1, style=dashed, color=darkseagreen4, label=serverNames];
m7_99 -> m7_110  [key=1, style=dashed, color=darkseagreen4, label=serverNames];
m7_100 -> m7_101  [key=0, style=solid];
m7_100 -> m7_102  [key=0, style=solid];
m7_105 -> m7_106  [key=0, style=solid];
m7_105 -> m7_109  [key=0, style=solid];
m7_110 -> m7_111  [key=0, style=solid];
m7_110 -> m7_114  [key=2, style=dotted];
m7_110 -> m7_115  [key=2, style=dotted];
m7_110 -> m7_129  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_101 -> m7_111  [key=0, style=solid];
m7_101 -> m7_113  [key=2, style=dotted];
m7_102 -> m7_103  [key=0, style=solid];
m7_102 -> m7_59  [key=2, style=dotted];
m7_102 -> m7_107  [key=1, style=dashed, color=darkseagreen4, label=servers];
m7_102 -> m7_120  [key=1, style=dashed, color=darkseagreen4, label=servers];
m7_102 -> m7_110  [key=1, style=dashed, color=darkseagreen4, label=servers];
m7_102 -> m7_130  [key=1, style=dashed, color=darkseagreen4, label=servers];
m7_103 -> m7_104  [key=0, style=solid];
m7_103 -> m7_59  [key=2, style=dotted];
m7_103 -> m7_108  [key=1, style=dashed, color=darkseagreen4, label=queues];
m7_103 -> m7_127  [key=1, style=dashed, color=darkseagreen4, label=queues];
m7_103 -> m7_110  [key=1, style=dashed, color=darkseagreen4, label=queues];
m7_103 -> m7_130  [key=1, style=dashed, color=darkseagreen4, label=queues];
m7_107 -> m7_108  [key=0, style=solid];
m7_107 -> m7_61  [key=2, style=dotted];
m7_107 -> m7_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_107 -> m7_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_104 -> m7_105  [key=0, style=solid];
m7_104 -> m7_60  [key=2, style=dotted];
m7_104 -> m7_107  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_104 -> m7_108  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_104 -> m7_109  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_108 -> m7_105  [key=0, style=solid];
m7_108 -> m7_61  [key=2, style=dotted];
m7_108 -> m7_122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_108 -> m7_126  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_109 -> m7_110  [key=0, style=solid];
m7_109 -> m7_62  [key=2, style=dotted];
m7_106 -> m7_107  [key=0, style=solid];
m7_106 -> m7_117  [key=1, style=dashed, color=darkseagreen4, label=name];
m7_106 -> m7_120  [key=1, style=dashed, color=darkseagreen4, label=name];
m7_106 -> m7_108  [key=1, style=dashed, color=darkseagreen4, label=name];
m7_106 -> m7_123  [key=1, style=dashed, color=darkseagreen4, label=name];
m7_106 -> m7_127  [key=1, style=dashed, color=darkseagreen4, label=name];
m7_111 -> m7_97  [key=0, style=bold, color=blue];
m7_374 -> m7_375  [key=0, style=solid];
m7_375 -> m7_376  [key=0, style=solid];
m7_376 -> m7_377  [key=0, style=solid];
m7_376 -> m7_391  [key=2, style=dotted];
m7_376 -> m7_379  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_397  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_380  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_403  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_381  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_409  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_382  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_415  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_383  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_422  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_384  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_429  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_387  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_435  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_376 -> m7_389  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_377 -> m7_378  [key=0, style=solid];
m7_377 -> m7_112  [key=2, style=dotted];
m7_377 -> m7_385  [key=1, style=dashed, color=darkseagreen4, label=queues];
m7_379 -> m7_380  [key=0, style=solid];
m7_379 -> m7_61  [key=2, style=dotted];
m7_379 -> m7_392  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_379 -> m7_396  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_380 -> m7_381  [key=0, style=solid];
m7_380 -> m7_61  [key=2, style=dotted];
m7_380 -> m7_399  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_380 -> m7_402  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_381 -> m7_382  [key=0, style=solid];
m7_381 -> m7_61  [key=2, style=dotted];
m7_381 -> m7_405  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_381 -> m7_408  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_382 -> m7_383  [key=0, style=solid];
m7_382 -> m7_61  [key=2, style=dotted];
m7_382 -> m7_411  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_382 -> m7_414  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_383 -> m7_384  [key=0, style=solid];
m7_383 -> m7_61  [key=2, style=dotted];
m7_383 -> m7_417  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_383 -> m7_421  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_384 -> m7_385  [key=0, style=solid];
m7_384 -> m7_61  [key=2, style=dotted];
m7_384 -> m7_425  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_384 -> m7_428  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_387 -> m7_385  [key=0, style=solid];
m7_387 -> m7_61  [key=2, style=dotted];
m7_387 -> m7_431  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_387 -> m7_434  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_389 -> m7_390  [key=0, style=solid];
m7_378 -> m7_379  [key=0, style=solid];
m7_378 -> m7_60  [key=2, style=dotted];
m7_378 -> m7_380  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_378 -> m7_381  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_378 -> m7_382  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_378 -> m7_383  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_378 -> m7_384  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_378 -> m7_387  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_378 -> m7_388  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m7_385 -> m7_386  [key=0, style=solid];
m7_385 -> m7_388  [key=0, style=solid];
m7_388 -> m7_389  [key=0, style=solid];
m7_388 -> m7_62  [key=2, style=dotted];
m7_386 -> m7_387  [key=0, style=solid];
m7_386 -> m7_432  [key=1, style=dashed, color=darkseagreen4, label=queueName];
m7_390 -> m7_374  [key=0, style=bold, color=blue];
m7_370 -> m7_371  [key=0, style=solid];
m7_371 -> m7_372  [key=0, style=solid];
m7_372 -> m7_373  [key=0, style=solid];
m7_372 -> m7_10  [key=2, style=dotted];
m7_373 -> m7_370  [key=0, style=bold, color=blue];
m7_215 -> m7_216  [key=0, style=solid];
m7_216 -> m7_217  [key=0, style=solid];
m7_217 -> m7_218  [key=0, style=solid];
m7_217 -> m7_219  [key=2, style=dotted];
m7_218 -> m7_215  [key=0, style=bold, color=blue];
m7_92 -> m7_303  [key=0, style=solid];
m7_92 -> m7_310  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_92 -> m7_327  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_92 -> m7_311  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m7_303 -> m7_304  [key=0, style=solid];
m7_303 -> m7_306  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m7_303 -> m7_307  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m7_303 -> m7_308  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m7_310 -> m7_311  [key=0, style=solid];
m7_310 -> m7_114  [key=2, style=dotted];
m7_310 -> m7_115  [key=2, style=dotted];
m7_310 -> m7_326  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_311 -> m7_312  [key=0, style=solid];
m7_311 -> m7_294  [key=2, style=dotted];
m7_311 -> m7_316  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m7_304 -> m7_305  [key=0, style=solid];
m7_304 -> m7_322  [key=2, style=dotted];
m7_304 -> m7_306  [key=1, style=dashed, color=darkseagreen4, label=startDate];
m7_306 -> m7_307  [key=0, style=solid];
m7_306 -> m7_309  [key=0, style=solid];
m7_307 -> m7_308  [key=0, style=solid];
m7_307 -> m7_175  [key=2, style=dotted];
m7_308 -> m7_306  [key=0, style=solid];
m7_308 -> m7_322  [key=2, style=dotted];
m7_308 -> m7_308  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m7_305 -> m7_306  [key=0, style=solid];
m7_305 -> m7_113  [key=2, style=dotted];
m7_305 -> m7_307  [key=1, style=dashed, color=darkseagreen4, label=dates];
m7_305 -> m7_309  [key=1, style=dashed, color=darkseagreen4, label=dates];
m7_305 -> m7_318  [key=1, style=dashed, color=darkseagreen4, label=dates];
m7_309 -> m7_310  [key=0, style=solid];
m7_309 -> m7_114  [key=2, style=dotted];
m7_309 -> m7_115  [key=2, style=dotted];
m7_309 -> m7_323  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_309 -> m7_314  [key=1, style=dashed, color=darkseagreen4, label=stringDates];
m7_318 -> m7_319  [key=0, style=solid];
m7_318 -> m7_297  [key=2, style=dotted];
m7_314 -> m7_315  [key=0, style=solid];
m7_314 -> m7_320  [key=0, style=solid];
m7_312 -> m7_313  [key=0, style=solid];
m7_312 -> m7_59  [key=2, style=dotted];
m7_312 -> m7_318  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_312 -> m7_320  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_316 -> m7_317  [key=0, style=solid];
m7_316 -> m7_318  [key=0, style=solid];
m7_316 -> m7_295  [key=2, style=dotted];
m7_316 -> m7_296  [key=2, style=dotted];
m7_313 -> m7_314  [key=0, style=solid];
m7_313 -> m7_316  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_313 -> m7_318  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_313 -> m7_319  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_320 -> m7_321  [key=0, style=solid];
m7_319 -> m7_314  [key=0, style=solid];
m7_319 -> m7_319  [key=1, style=dashed, color=darkseagreen4, label=i];
m7_315 -> m7_316  [key=0, style=solid];
m7_317 -> m7_318  [key=0, style=solid];
m7_321 -> m7_92  [key=0, style=bold, color=blue];
m7_15 -> m7_16  [key=0, style=solid];
m7_16 -> m7_17  [key=0, style=solid];
m7_17 -> m7_18  [key=0, style=solid];
m7_17 -> m7_4  [key=2, style=dotted];
m7_18 -> m7_15  [key=0, style=bold, color=blue];
m7_249 -> m7_250  [key=0, style=solid];
m7_249 -> m7_251  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_249 -> m7_255  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_250 -> m7_251  [key=0, style=solid];
m7_251 -> m7_252  [key=0, style=solid];
m7_251 -> m7_9  [key=2, style=dotted];
m7_251 -> m7_259  [key=2, style=dotted];
m7_251 -> m7_257  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_255 -> m7_256  [key=0, style=solid];
m7_255 -> m7_9  [key=2, style=dotted];
m7_255 -> m7_125  [key=2, style=dotted];
m7_252 -> m7_253  [key=0, style=solid];
m7_252 -> m7_254  [key=0, style=solid];
m7_257 -> m7_258  [key=0, style=solid];
m7_257 -> m7_260  [key=2, style=dotted];
m7_257 -> m7_261  [key=2, style=dotted];
m7_257 -> m7_262  [key=2, style=dotted];
m7_257 -> m7_263  [key=2, style=dotted];
m7_257 -> m7_63  [key=2, style=dotted];
m7_257 -> m7_264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_257 -> m7_268  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_257 -> m7_271  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_253 -> m7_258  [key=0, style=solid];
m7_254 -> m7_255  [key=0, style=solid];
m7_254 -> m7_257  [key=1, style=dashed, color=darkseagreen4, label=hiddenProperties];
m7_254 -> m7_265  [key=1, style=dashed, color=darkseagreen4, label=hiddenProperties];
m7_256 -> m7_257  [key=0, style=solid];
m7_256 -> m7_114  [key=2, style=dotted];
m7_256 -> m7_115  [key=2, style=dotted];
m7_258 -> m7_249  [key=0, style=bold, color=blue];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_7  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_6 -> m7_7  [key=0, style=solid];
m7_7 -> m7_8  [key=0, style=solid];
m7_7 -> m7_9  [key=2, style=dotted];
m7_7 -> m7_10  [key=2, style=dotted];
m7_8 -> m7_5  [key=0, style=bold, color=blue];
m7_206 -> m7_207  [key=0, style=solid];
m7_206 -> m7_208  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_207 -> m7_208  [key=0, style=solid];
m7_208 -> m7_209  [key=0, style=solid];
m7_208 -> m7_9  [key=2, style=dotted];
m7_208 -> m7_150  [key=2, style=dotted];
m7_209 -> m7_210  [key=0, style=solid];
m7_209 -> m7_29  [key=2, style=dotted];
m7_209 -> m7_211  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_210 -> m7_206  [key=0, style=bold, color=blue];
m7_93 -> m7_94  [key=0, style=solid];
m7_94 -> m7_95  [key=0, style=solid];
m7_95 -> m7_96  [key=0, style=solid];
m7_95 -> m7_92  [key=2, style=dotted];
m7_96 -> m7_93  [key=0, style=bold, color=blue];
m7_19 -> m7_20  [key=0, style=solid];
m7_20 -> m7_21  [key=0, style=solid];
m7_21 -> m7_22  [key=0, style=solid];
m7_21 -> m7_4  [key=2, style=dotted];
m7_22 -> m7_19  [key=0, style=bold, color=blue];
m7_224 -> m7_225  [key=0, style=solid];
m7_224 -> m7_226  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_224 -> m7_232  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_225 -> m7_226  [key=0, style=solid];
m7_226 -> m7_227  [key=0, style=solid];
m7_226 -> m7_9  [key=2, style=dotted];
m7_226 -> m7_76  [key=2, style=dotted];
m7_232 -> m7_233  [key=0, style=solid];
m7_232 -> m7_238  [key=2, style=dotted];
m7_227 -> m7_228  [key=0, style=solid];
m7_227 -> m7_234  [key=2, style=dotted];
m7_227 -> m7_231  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_228 -> m7_229  [key=0, style=solid];
m7_228 -> m7_230  [key=0, style=solid];
m7_228 -> m7_235  [key=2, style=dotted];
m7_231 -> m7_232  [key=0, style=solid];
m7_231 -> m7_237  [key=2, style=dotted];
m7_229 -> m7_233  [key=0, style=solid];
m7_230 -> m7_231  [key=0, style=solid];
m7_230 -> m7_236  [key=2, style=dotted];
m7_230 -> m7_232  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m7_233 -> m7_224  [key=0, style=bold, color=blue];
m7_198 -> m7_199  [key=0, style=solid];
m7_198 -> m7_200  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_199 -> m7_200  [key=0, style=solid];
m7_200 -> m7_201  [key=0, style=solid];
m7_200 -> m7_9  [key=2, style=dotted];
m7_200 -> m7_150  [key=2, style=dotted];
m7_201 -> m7_202  [key=0, style=solid];
m7_201 -> m7_29  [key=2, style=dotted];
m7_201 -> m7_203  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_202 -> m7_198  [key=0, style=bold, color=blue];
m7_437 -> m7_65  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_437 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_437 -> m7_74  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_437 -> m7_78  [key=1, style=dashed, color=darkseagreen4, label=job];
m7_438 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m7_438 -> m7_84  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m7_439 -> m7_78  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_439 -> m7_84  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_440 -> m7_117  [key=1, style=dashed, color=darkseagreen4, label=name];
m7_440 -> m7_120  [key=1, style=dashed, color=darkseagreen4, label=name];
m7_440 -> m7_123  [key=1, style=dashed, color=darkseagreen4, label=name];
m7_440 -> m7_127  [key=1, style=dashed, color=darkseagreen4, label=name];
m7_441 -> m7_120  [key=1, style=dashed, color=darkseagreen4, label=servers];
m7_441 -> m7_130  [key=1, style=dashed, color=darkseagreen4, label=servers];
m7_442 -> m7_127  [key=1, style=dashed, color=darkseagreen4, label=queues];
m7_442 -> m7_130  [key=1, style=dashed, color=darkseagreen4, label=queues];
m7_443 -> m7_177  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_443 -> m7_183  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_443 -> m7_189  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_444 -> m7_265  [key=1, style=dashed, color=darkseagreen4, label=hiddenProperties];
m7_445 -> m7_299  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_446 -> m7_327  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_447 -> m7_344  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_448 -> m7_344  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_448 -> m7_347  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_448 -> m7_348  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_448 -> m7_352  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_448 -> m7_355  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_448 -> m7_356  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_449 -> m7_347  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m7_449 -> m7_348  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m7_449 -> m7_359  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m7_450 -> m7_352  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_451 -> m7_355  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_451 -> m7_356  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_451 -> m7_359  [key=1, style=dashed, color=darkseagreen4, label=states];
m7_452 -> m7_362  [key=1, style=dashed, color=darkseagreen4, label="System.Func<System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>"];
m7_453 -> m7_397  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_453 -> m7_403  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_453 -> m7_409  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_453 -> m7_415  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_453 -> m7_422  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_453 -> m7_429  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_453 -> m7_435  [key=1, style=dashed, color=darkseagreen4, label=stats];
m7_454 -> m7_432  [key=1, style=dashed, color=darkseagreen4, label=queueName];
}
