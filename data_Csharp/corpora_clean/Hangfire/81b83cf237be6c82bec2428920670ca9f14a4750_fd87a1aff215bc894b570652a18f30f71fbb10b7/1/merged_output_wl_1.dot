digraph  {
d23 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", color=green, community=0, label="0: return UseConnection<long>(connection =>\r\n            {\r\n                const string sqlQuery = @''\r\nselect count(Id) from HangFire.Job where StateName = @state'';\r\n\r\n                var count = connection.Query<int>(\r\n                     sqlQuery,\r\n                     new { state = stateName })\r\n                     .Single();\r\n\r\n                return count;\r\n            });", span="71-82"];
d380 [label="HangFire.SqlServer.SqlServerMonitoringApi", span=""];
d7 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", span="69-69"];
d24 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", span="69-69"];
d25 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="564-564"];
d26 [cluster="lambda expression", label="Entry lambda expression", span="71-82"];
d1 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", label="_connectionString = connectionString", span="39-39"];
d2 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", label="_queueProviders = queueProviders", span="40-40"];
d5 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", label="return GetNumberOfJobsByStateName(ScheduledState.StateName);", span="45-45"];
d9 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="var queueApi = GetQueueApi(queue)", span="50-50"];
d16 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="var queueApi = GetQueueApi(queue)", span="58-58"];
d21 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", label="return GetNumberOfJobsByStateName(FailedState.StateName);", span="66-66"];
d34 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", label="return GetNumberOfJobsByStateName(ProcessingState.StateName);", span="87-87"];
d37 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", label="return GetJobs(\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.FromStringTimestamp(stateData[''StartedAt'']),\r\n                });", span="92-100"];
d46 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="return UseConnection<JobList<TDto>>(connection =>\r\n            {\r\n                const string jobsSql = @''\r\nselect * from (\r\n  select j.*, s.Reason as StateReason, s.Data as StateData, row_number() over (order by j.Id desc) as row_num\r\n  from HangFire.Job j\r\n  left join HangFire.State s on j.StateId = s.Id\r\n  where j.StateName = @stateName\r\n) as j where j.row_num between @start and @end\r\n'';\r\n\r\n                var jobs = connection.Query<SqlJob>(\r\n                            jobsSql,\r\n                            new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                            .ToList();\r\n\r\n                return DeserializeJobs(jobs, selector);\r\n            });", span="109-126"];
d51 [cluster="lambda expression", label="return DeserializeJobs(jobs, selector);", span="125-125"];
d79 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", label="return GetJobs(\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.FromStringTimestamp(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.FromStringTimestamp(stateData[''ScheduledAt''])\r\n                });", span="164-172"];
d86 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", label="return GetTimelineStats(''succeeded'');", span="177-177"];
d90 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", label="return GetTimelineStats(''failed'');", span="182-182"];
d93 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="187-209"];
d106 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", label="return GetJobs(\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.FromNullableStringTimestamp(stateData[''FailedAt''])\r\n                });", span="214-226"];
d114 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", label="return GetJobs(\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.FromNullableStringTimestamp(stateData[''SucceededAt''])\r\n                });", span="231-242"];
d122 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", label="return GetJobs(\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.FromNullableStringTimestamp(stateData[''DeletedAt''])\r\n                });", span="247-255"];
d129 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", label="return UseConnection<IList<QueueWithTopEnqueuedJobsDto>>(connection =>\r\n            {\r\n                var tuples = _queueProviders\r\n                    .Select(x => x.GetJobQueueMonitoringApi(connection))\r\n                    .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                    .OrderBy(x => x.Queue)\r\n                    .ToArray();\r\n\r\n                var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length);\r\n\r\n                foreach (var tuple in tuples)\r\n                {\r\n                    var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5);\r\n                    var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue);\r\n\r\n                    result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = tuple.Queue,\r\n                        Length = counters.EnqueuedCount ?? 0,\r\n                        Fetched = counters.FetchedCount,\r\n                        FirstJobs = EnqueuedJobs(enqueuedJobIds)\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="260-285"];
d132 [cluster="lambda expression", label="var tuples = _queueProviders\r\n                    .Select(x => x.GetJobQueueMonitoringApi(connection))\r\n                    .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                    .OrderBy(x => x.Queue)\r\n                    .ToArray()", span="262-266"];
d137 [cluster="lambda expression", label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = tuple.Queue,\r\n                        Length = counters.EnqueuedCount ?? 0,\r\n                        Fetched = counters.FetchedCount,\r\n                        FirstJobs = EnqueuedJobs(enqueuedJobIds)\r\n                    })", span="275-281"];
d164 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="var queueApi = GetQueueApi(queue)", span="290-290"];
d166 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="return EnqueuedJobs(enqueuedJobIds);", span="293-293"];
d170 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", label="return UseConnection<JobList<EnqueuedJobDto>>(connection =>\r\n            {\r\n\r\n                const string enqueuedJobsSql = @''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is null'';\r\n\r\n                var jobs = connection.Query<SqlJob>(\r\n                    enqueuedJobsSql,\r\n                    new { jobIds = jobIds })\r\n                    .ToList();\r\n\r\n                return DeserializeJobs(\r\n                    jobs,\r\n                    (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = sqlJob.StateName,\r\n                        EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                            ? JobHelper.FromNullableStringTimestamp(stateData[''EnqueuedAt''])\r\n                            : null\r\n                    });\r\n            });", span="298-323"];
d175 [cluster="lambda expression", label="return DeserializeJobs(\r\n                    jobs,\r\n                    (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = sqlJob.StateName,\r\n                        EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                            ? JobHelper.FromNullableStringTimestamp(stateData[''EnqueuedAt''])\r\n                            : null\r\n                    });", span="313-322"];
d182 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="var queueApi = GetQueueApi(queue)", span="328-328"];
d184 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="return FetchedJobs(fetchedJobIds);", span="331-331"];
d188 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", label="return UseConnection<JobList<FetchedJobDto>>(connection =>\r\n            {\r\n\r\n                const string fetchedJobsSql = @''\r\nselect j.*, jq.FetchedAt, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is not null'';\r\n\r\n                var jobs = connection.Query<SqlJob>(\r\n                    fetchedJobsSql,\r\n                    new { jobIds = jobIds })\r\n                    .ToList();\r\n\r\n                var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count);\r\n\r\n                foreach (var job in jobs)\r\n                {\r\n                    result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                        job.Id.ToString(),\r\n                        new FetchedJobDto\r\n                        {\r\n                            Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                            State = job.StateName,\r\n                            FetchedAt = job.FetchedAt\r\n                        }));\r\n                }\r\n\r\n                return new JobList<FetchedJobDto>(result);\r\n            });", span="336-366"];
d195 [cluster="lambda expression", label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                        job.Id.ToString(),\r\n                        new FetchedJobDto\r\n                        {\r\n                            Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                            State = job.StateName,\r\n                            FetchedAt = job.FetchedAt\r\n                        }))", span="355-362"];
d204 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", label="return GetHourlyTimelineStats(''succeeded'');", span="371-371"];
d208 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", label="return GetHourlyTimelineStats(''failed'');", span="376-376"];
d211 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", label="return UseConnection<JobDetailsDto>(connection =>\r\n            {\r\n\r\n                const string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="381-415"];
d221 [cluster="lambda expression", label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="407-413"];
d238 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", label="return GetNumberOfJobsByStateName(SucceededState.StateName);", span="420-420"];
d241 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", label="return GetNumberOfJobsByStateName(DeletedState.StateName);", span="425-425"];
d244 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="return UseConnection<StatisticsDto>(connection =>\r\n            {\r\n                const string sql = @''\r\nselect StateName as [State], count(id) as [Count] From HangFire.Job \r\ngroup by StateName\r\nhaving StateName is not null;\r\nselect count(Id) from HangFire.Server;\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:succeeded';\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:deleted';\r\nselect count(*) from HangFire.[Set] where [Key] = N'recurring-jobs';\r\n'';\r\n\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql))\r\n                {\r\n                    var countByStates = multi.Read().ToDictionary(x => x.State, x => x.Count);\r\n\r\n                    Func<string, int> getCountIfExists = name => countByStates.ContainsKey(name) ? countByStates[name] : 0;\r\n\r\n                    stats.Enqueued = getCountIfExists(EnqueuedState.StateName);\r\n                    stats.Failed = getCountIfExists(FailedState.StateName);\r\n                    stats.Processing = getCountIfExists(ProcessingState.StateName);\r\n                    stats.Scheduled = getCountIfExists(ScheduledState.StateName);\r\n\r\n                    stats.Servers = multi.Read<int>().Single();\r\n\r\n                    stats.Succeeded = multi.Read<int?>().SingleOrDefault() ?? 0;\r\n                    stats.Deleted = multi.Read<int?>().SingleOrDefault() ?? 0;\r\n\r\n                    stats.Recurring = multi.Read<int>().Single();\r\n                }\r\n\r\n                stats.Queues = _queueProviders\r\n                    .SelectMany(x => x.GetJobQueueMonitoringApi(connection).GetQueues())\r\n                    .Count();\r\n\r\n                return stats;\r\n            });", span="430-467"];
d260 [cluster="lambda expression", label="stats.Queues = _queueProviders\r\n                    .SelectMany(x => x.GetJobQueueMonitoringApi(connection).GetQueues())\r\n                    .Count()", span="462-464"];
d282 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", label="return UseConnection<Dictionary<DateTime, long>>(connection =>\r\n            {\r\n                var endDate = DateTime.UtcNow;\r\n                var dates = new List<DateTime>();\r\n                for (var i = 0; i < 24; i++)\r\n                {\r\n                    dates.Add(endDate);\r\n                    endDate = endDate.AddHours(-1);\r\n                }\r\n\r\n                var keys = dates.Select(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList();\r\n\r\n                const string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys'';\r\n\r\n                var valuesMap = connection.Query(\r\n                    sqlQuery,\r\n                    new { keys = keys })\r\n                    .ToDictionary(x => (string)x.Key, x => (long)x.Count);\r\n\r\n                foreach (var key in keys)\r\n                {\r\n                    if (!valuesMap.ContainsKey(key)) valuesMap.Add(key, 0);\r\n                }\r\n\r\n                var result = new Dictionary<DateTime, long>();\r\n                for (var i = 0; i < dates.Count; i++)\r\n                {\r\n                    var value = valuesMap[valuesMap.Keys.ElementAt(i)];\r\n                    result.Add(dates[i], value);\r\n                }\r\n\r\n                return result;\r\n            });", span="472-507"];
d322 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", label="return UseConnection<Dictionary<DateTime, long>>(connection =>\r\n            {\r\n                var endDate = DateTime.UtcNow.Date;\r\n                var startDate = endDate.AddDays(-7);\r\n                var dates = new List<DateTime>();\r\n\r\n                while (startDate <= endDate)\r\n                {\r\n                    dates.Add(endDate);\r\n                    endDate = endDate.AddDays(-1);\r\n                }\r\n\r\n                var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList();\r\n                var keys = stringDates.Select(x => String.Format(''stats:{0}:{1}'', type, x)).ToList();\r\n\r\n                const string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys'';\r\n\r\n                var valuesMap = connection.Query(\r\n                    sqlQuery,\r\n                    new { keys = keys })\r\n                    .ToDictionary(x => (string)x.Key, x => (long)x.Count);\r\n\r\n                foreach (var key in keys)\r\n                {\r\n                    if (!valuesMap.ContainsKey(key)) valuesMap.Add(key, 0);\r\n                }\r\n\r\n                var result = new Dictionary<DateTime, long>();\r\n                for (var i = 0; i < stringDates.Count; i++)\r\n                {\r\n                    var value = valuesMap[valuesMap.Keys.ElementAt(i)];\r\n                    result.Add(dates[i], value);\r\n                }\r\n\r\n                return result;\r\n            });", span="512-550"];
d360 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", label="return UseConnection<IPersistentJobQueueMonitoringApi>(connection =>\r\n            {\r\n                var provider = _queueProviders.GetProvider(queueName);\r\n                var monitoringApi = provider.GetJobQueueMonitoringApi(connection);\r\n\r\n                return monitoringApi;\r\n            });", span="555-561"];
d363 [cluster="lambda expression", label="var provider = _queueProviders.GetProvider(queueName)", span="557-557"];
d369 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", label="var connection = new SqlConnection(_connectionString)", span="567-567"];
d28 [cluster="lambda expression", label="var count = connection.Query<int>(\r\n                     sqlQuery,\r\n                     new { state = stateName })\r\n                     .Single()", span="76-79"];
d374 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="564-564"];
d368 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", label="var transaction = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted })", span="566-566"];
d371 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", label="var result = action(connection)", span="571-571"];
d30 [cluster="lambda expression", label="Exit lambda expression", span="71-82"];
d27 [cluster="lambda expression", label="string sqlQuery = @''\r\nselect count(Id) from HangFire.Job where StateName = @state''", span="73-74"];
d0 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35"];
d3 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35"];
d4 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="43-43"];
d6 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="43-43"];
d8 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="48-48"];
d10 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="51-51"];
d13 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="553-553"];
d15 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="56-56"];
d17 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="59-59"];
d20 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="64-64"];
d22 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="64-64"];
d33 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="85-85"];
d35 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="85-85"];
d36 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="90-90"];
d38 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="90-90"];
d39 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="103-103"];
d40 [cluster="lambda expression", label="Entry lambda expression", span="95-100"];
d47 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="103-103"];
d48 [cluster="lambda expression", label="Entry lambda expression", span="109-126"];
d385 [label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", span=""];
d50 [cluster="lambda expression", label="var jobs = connection.Query<SqlJob>(\r\n                            jobsSql,\r\n                            new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                            .ToList()", span="120-123"];
d52 [cluster="lambda expression", label="Exit lambda expression", span="109-126"];
d54 [cluster="Unk.DeserializeJobs", label="Entry Unk.DeserializeJobs", span=""];
d78 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="162-162"];
d80 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="162-162"];
d81 [cluster="lambda expression", label="Entry lambda expression", span="167-172"];
d85 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="175-175"];
d87 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="175-175"];
d88 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", span="510-510"];
d89 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="180-180"];
d91 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="180-180"];
d92 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Servers()", span="185-185"];
d94 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Servers()", span="185-185"];
d31 [cluster="Unk.>", label="Entry Unk.>", span=""];
d95 [cluster="lambda expression", label="Entry lambda expression", span="187-209"];
d105 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="212-212"];
d107 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="212-212"];
d108 [cluster="lambda expression", label="Entry lambda expression", span="218-226"];
d113 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="229-229"];
d115 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="229-229"];
d116 [cluster="lambda expression", label="Entry lambda expression", span="235-242"];
d121 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="245-245"];
d123 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="245-245"];
d124 [cluster="lambda expression", label="Entry lambda expression", span="251-255"];
d128 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="258-258"];
d130 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="258-258"];
d131 [cluster="lambda expression", label="Entry lambda expression", span="260-285"];
d133 [cluster="lambda expression", label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="268-268"];
d140 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d141 [cluster="Unk.SelectMany", label="Entry Unk.SelectMany", span=""];
d142 [cluster="Unk.OrderBy", label="Entry Unk.OrderBy", span=""];
d143 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
d149 [cluster="lambda expression", label="Entry lambda expression", span="263-263"];
d153 [cluster="lambda expression", label="Entry lambda expression", span="264-264"];
d157 [cluster="lambda expression", label="Entry lambda expression", span="264-264"];
d160 [cluster="lambda expression", label="Entry lambda expression", span="265-265"];
d134 [cluster="lambda expression", label=tuples, span="270-270"];
d135 [cluster="lambda expression", label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="272-272"];
d136 [cluster="lambda expression", label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="273-273"];
d147 [cluster="HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", label="Entry HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18"];
d148 [cluster="Unk.EnqueuedJobs", label="Entry Unk.EnqueuedJobs", span=""];
d69 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
d163 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="288-288"];
d165 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="291-291"];
d167 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="288-288"];
d169 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", span="296-296"];
d171 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", span="296-296"];
d172 [cluster="lambda expression", label="Entry lambda expression", span="298-323"];
d174 [cluster="lambda expression", label="var jobs = connection.Query<SqlJob>(\r\n                    enqueuedJobsSql,\r\n                    new { jobIds = jobIds })\r\n                    .ToList()", span="308-311"];
d176 [cluster="lambda expression", label="Exit lambda expression", span="298-323"];
d177 [cluster="lambda expression", label="Entry lambda expression", span="315-322"];
d181 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="326-326"];
d183 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="329-329"];
d185 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="326-326"];
d187 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", span="334-334"];
d189 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", span="334-334"];
d190 [cluster="lambda expression", label="Entry lambda expression", span="336-366"];
d193 [cluster="lambda expression", label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="351-351"];
d194 [cluster="lambda expression", label=jobs, span="353-353"];
d199 [cluster="KeyValuePair<string, FetchedJobDto>.cstr", label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span=""];
d200 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
d201 [cluster="HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", label="Entry HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21"];
d202 [cluster="Unk.DeserializeJob", label="Entry Unk.DeserializeJob", span=""];
d203 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="369-369"];
d205 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="369-369"];
d206 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", span="470-470"];
d207 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="374-374"];
d209 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="374-374"];
d210 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="379-379"];
d212 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="379-379"];
d213 [cluster="lambda expression", label="Entry lambda expression", span="381-415"];
d216 [cluster="lambda expression", label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="391-391"];
d219 [cluster="lambda expression", label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="394-394"];
d220 [cluster="lambda expression", label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            })\r\n                            .ToList()", span="395-405"];
d222 [cluster="lambda expression", label="Exit lambda expression", span="381-415"];
d226 [cluster="HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", label="Entry HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22"];
d237 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="418-418"];
d239 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="418-418"];
d240 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="423-423"];
d242 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="423-423"];
d243 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="428-428"];
d245 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="428-428"];
d246 [cluster="lambda expression", label="Entry lambda expression", span="430-467"];
d248 [cluster="lambda expression", label="var stats = new StatisticsDto()", span="442-442"];
d259 [cluster="lambda expression", label="stats.Recurring = multi.Read<int>().Single()", span="459-459"];
d261 [cluster="lambda expression", label="return stats;", span="466-466"];
d266 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
d267 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
d278 [cluster="lambda expression", label="Entry lambda expression", span="463-463"];
d283 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", span="470-470"];
d284 [cluster="lambda expression", label="Entry lambda expression", span="472-507"];
d323 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", span="510-510"];
d324 [cluster="lambda expression", label="Entry lambda expression", span="512-550"];
d361 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="553-553"];
d362 [cluster="lambda expression", label="Entry lambda expression", span="555-561"];
d394 [label=string, span=""];
d364 [cluster="lambda expression", label="var monitoringApi = provider.GetJobQueueMonitoringApi(connection)", span="558-558"];
d367 [cluster="HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", label="Entry HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
d370 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", label="connection.Open()", span="569-569"];
d377 [cluster="SqlConnection.cstr", label="Entry SqlConnection.cstr", span=""];
d381 [label=string, span=""];
d29 [cluster="lambda expression", label="return count;", span="81-81"];
d32 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
d373 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", label="return result;", span="575-575"];
d375 [cluster="TransactionScope.cstr", label="Entry TransactionScope.cstr", span=""];
d376 [cluster="TransactionOptions.cstr", label="Entry TransactionOptions.cstr", span=""];
d372 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", label="transaction.Complete()", span="573-573"];
d265 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
d12 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="48-48"];
d11 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="return counters.EnqueuedCount ?? 0;", span="53-53"];
d14 [cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="25-25"];
d19 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="56-56"];
d18 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="return counters.FetchedCount ?? 0;", span="61-61"];
d42 [cluster="lambda expression", label="Exit lambda expression", span="95-100"];
d41 [cluster="lambda expression", label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.FromStringTimestamp(stateData[''StartedAt'']),\r\n                }", span="95-100"];
d49 [cluster="lambda expression", label="string jobsSql = @''\r\nselect * from (\r\n  select j.*, s.Reason as StateReason, s.Data as StateData, row_number() over (order by j.Id desc) as row_num\r\n  from HangFire.Job j\r\n  left join HangFire.State s on j.StateId = s.Id\r\n  where j.StateName = @stateName\r\n) as j where j.row_num between @start and @end\r\n''", span="111-118"];
d382 [label=int, span=""];
d383 [label=int, span=""];
d384 [label=string, span=""];
d53 [cluster="Unk.ToList", label="Entry Unk.ToList", span=""];
d83 [cluster="lambda expression", label="Exit lambda expression", span="167-172"];
d82 [cluster="lambda expression", label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.FromStringTimestamp(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.FromStringTimestamp(stateData[''ScheduledAt''])\r\n                }", span="167-172"];
d332 [cluster="lambda expression", label="var keys = stringDates.Select(x => String.Format(''stats:{0}:{1}'', type, x)).ToList()", span="525-525"];
d351 [cluster="lambda expression", label="String.Format(''stats:{0}:{1}'', type, x)", span="525-525"];
d96 [cluster="lambda expression", label="var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList()", span="189-191"];
d99 [cluster="lambda expression", label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="197-197"];
d192 [cluster="lambda expression", label="var jobs = connection.Query<SqlJob>(\r\n                    fetchedJobsSql,\r\n                    new { jobIds = jobIds })\r\n                    .ToList()", span="346-349"];
d234 [cluster="lambda expression", label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            }", span="398-404"];
d256 [cluster="lambda expression", label="stats.Servers = multi.Read<int>().Single()", span="454-454"];
d257 [cluster="lambda expression", label="stats.Succeeded = multi.Read<int?>().SingleOrDefault() ?? 0", span="456-456"];
d258 [cluster="lambda expression", label="stats.Deleted = multi.Read<int?>().SingleOrDefault() ?? 0", span="457-457"];
d102 [cluster="lambda expression", label="Exit lambda expression", span="187-209"];
d110 [cluster="lambda expression", label="Exit lambda expression", span="218-226"];
d109 [cluster="lambda expression", label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.FromNullableStringTimestamp(stateData[''FailedAt''])\r\n                }", span="218-226"];
d118 [cluster="lambda expression", label="Exit lambda expression", span="235-242"];
d117 [cluster="lambda expression", label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.FromNullableStringTimestamp(stateData[''SucceededAt''])\r\n                }", span="235-242"];
d126 [cluster="lambda expression", label="Exit lambda expression", span="251-255"];
d125 [cluster="lambda expression", label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.FromNullableStringTimestamp(stateData[''DeletedAt''])\r\n                }", span="251-255"];
d139 [cluster="lambda expression", label="Exit lambda expression", span="260-285"];
d150 [cluster="lambda expression", label="x.GetJobQueueMonitoringApi(connection)", span="263-263"];
d144 [cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span=""];
d138 [cluster="lambda expression", label="return result;", span="284-284"];
d292 [cluster="lambda expression", label="var keys = dates.Select(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="482-482"];
d331 [cluster="lambda expression", label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="524-524"];
d151 [cluster="lambda expression", label="Exit lambda expression", span="263-263"];
d155 [cluster="lambda expression", label="Exit lambda expression", span="264-264"];
d154 [cluster="lambda expression", label="x.GetQueues()", span="264-264"];
d159 [cluster="lambda expression", label="Exit lambda expression", span="264-264"];
d158 [cluster="lambda expression", label="new { Monitoring = monitoring, Queue = queue }", span="264-264"];
d162 [cluster="lambda expression", label="Exit lambda expression", span="265-265"];
d161 [cluster="lambda expression", label="x.Queue", span="265-265"];
d145 [cluster="Unk.GetEnqueuedJobIds", label="Entry Unk.GetEnqueuedJobIds", span=""];
d146 [cluster="Unk.GetEnqueuedAndFetchedCount", label="Entry Unk.GetEnqueuedAndFetchedCount", span=""];
d60 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="140-141"];
d100 [cluster="lambda expression", label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="198-205"];
d289 [cluster="lambda expression", label="dates.Add(endDate)", span="478-478"];
d329 [cluster="lambda expression", label="dates.Add(endDate)", span="520-520"];
d168 [cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="23-23"];
d173 [cluster="lambda expression", label="string enqueuedJobsSql = @''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is null''", span="301-306"];
d387 [label="System.Collections.Generic.IEnumerable<int>", span=""];
d179 [cluster="lambda expression", label="Exit lambda expression", span="315-322"];
d178 [cluster="lambda expression", label="new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = sqlJob.StateName,\r\n                        EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                            ? JobHelper.FromNullableStringTimestamp(stateData[''EnqueuedAt''])\r\n                            : null\r\n                    }", span="315-322"];
d186 [cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="24-24"];
d197 [cluster="lambda expression", label="Exit lambda expression", span="336-366"];
d191 [cluster="lambda expression", label="string fetchedJobsSql = @''\r\nselect j.*, jq.FetchedAt, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is not null''", span="339-344"];
d198 [cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span=""];
d196 [cluster="lambda expression", label="return new JobList<FetchedJobDto>(result);", span="365-365"];
d312 [cluster="lambda expression", label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="482-482"];
d215 [cluster="lambda expression", label="var multi = connection.QueryMultiple(sql, new { id = jobId })", span="389-389"];
d214 [cluster="lambda expression", label="string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc''", span="384-387"];
d217 [cluster="lambda expression", label="job == null", span="392-392"];
d224 [cluster="Unk.SingleOrDefault", label="Entry Unk.SingleOrDefault", span=""];
d225 [cluster="Unk.ToDictionary", label="Entry Unk.ToDictionary", span=""];
d227 [cluster="lambda expression", label="Entry lambda expression", span="394-394"];
d230 [cluster="lambda expression", label="Entry lambda expression", span="394-394"];
d233 [cluster="lambda expression", label="Entry lambda expression", span="398-404"];
d218 [cluster="lambda expression", label="return null;", span="392-392"];
d262 [cluster="lambda expression", label="Exit lambda expression", span="430-467"];
d247 [cluster="lambda expression", label="string sql = @''\r\nselect StateName as [State], count(id) as [Count] From HangFire.Job \r\ngroup by StateName\r\nhaving StateName is not null;\r\nselect count(Id) from HangFire.Server;\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:succeeded';\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:deleted';\r\nselect count(*) from HangFire.[Set] where [Key] = N'recurring-jobs';\r\n''", span="432-440"];
d249 [cluster="lambda expression", label="var multi = connection.QueryMultiple(sql)", span="443-443"];
d279 [cluster="lambda expression", label="x.GetJobQueueMonitoringApi(connection).GetQueues()", span="463-463"];
d263 [cluster="HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", label="Entry HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18"];
d252 [cluster="lambda expression", label="stats.Enqueued = getCountIfExists(EnqueuedState.StateName)", span="449-449"];
d253 [cluster="lambda expression", label="stats.Failed = getCountIfExists(FailedState.StateName)", span="450-450"];
d254 [cluster="lambda expression", label="stats.Processing = getCountIfExists(ProcessingState.StateName)", span="451-451"];
d255 [cluster="lambda expression", label="stats.Scheduled = getCountIfExists(ScheduledState.StateName)", span="452-452"];
d280 [cluster="lambda expression", label="Exit lambda expression", span="463-463"];
d305 [cluster="lambda expression", label="Exit lambda expression", span="472-507"];
d285 [cluster="lambda expression", label="var endDate = DateTime.UtcNow", span="474-474"];
d294 [cluster="lambda expression", label="var valuesMap = connection.Query(\r\n                    sqlQuery,\r\n                    new { keys = keys })\r\n                    .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="489-492"];
d345 [cluster="lambda expression", label="Exit lambda expression", span="512-550"];
d325 [cluster="lambda expression", label="var endDate = DateTime.UtcNow.Date", span="514-514"];
d334 [cluster="lambda expression", label="var valuesMap = connection.Query(\r\n                    sqlQuery,\r\n                    new { keys = keys })\r\n                    .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="532-535"];
d366 [cluster="lambda expression", label="Exit lambda expression", span="555-561"];
d365 [cluster="lambda expression", label="return monitoringApi;", span="560-560"];
d152 [cluster="Unk.GetJobQueueMonitoringApi", label="Entry Unk.GetJobQueueMonitoringApi", span=""];
d378 [cluster="Unk.Open", label="Entry Unk.Open", span=""];
d379 [cluster="Unk.Complete", label="Entry Unk.Complete", span=""];
d43 [cluster="HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", label="Entry HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23"];
d44 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
d45 [cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55"];
d84 [cluster="HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", label="Entry HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23"];
d393 [label=string, span=""];
d333 [cluster="lambda expression", label="string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys''", span="527-530"];
d350 [cluster="lambda expression", label="Entry lambda expression", span="525-525"];
d335 [cluster="lambda expression", label=keys, span="537-537"];
d352 [cluster="lambda expression", label="Exit lambda expression", span="525-525"];
d353 [cluster="Unk.Format", label="Entry Unk.Format", span=""];
d97 [cluster="lambda expression", label="var result = new List<ServerDto>()", span="193-193"];
d98 [cluster="lambda expression", label=servers, span="195-195"];
d388 [label="System.Collections.Generic.IEnumerable<int>", span=""];
d235 [cluster="lambda expression", label="Exit lambda expression", span="398-404"];
d236 [cluster="HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", label="Entry HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21"];
d101 [cluster="lambda expression", label="return result;", span="208-208"];
d111 [cluster="HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", label="Entry HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23"];
d112 [cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", label="Entry HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="60-60"];
d119 [cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23"];
d120 [cluster="long.Parse(string)", label="Entry long.Parse(string)", span="0-0"];
d127 [cluster="HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", label="Entry HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7"];
d386 [label=SqlConnection, span=""];
d392 [label=string, span=""];
d286 [cluster="lambda expression", label="var dates = new List<DateTime>()", span="475-475"];
d288 [cluster="lambda expression", label="i < 24", span="476-476"];
d293 [cluster="lambda expression", label="string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys''", span="484-487"];
d311 [cluster="lambda expression", label="Entry lambda expression", span="482-482"];
d295 [cluster="lambda expression", label=keys, span="494-494"];
d328 [cluster="lambda expression", label="startDate <= endDate", span="518-518"];
d327 [cluster="lambda expression", label="var dates = new List<DateTime>()", span="516-516"];
d347 [cluster="lambda expression", label="Entry lambda expression", span="524-524"];
d340 [cluster="lambda expression", label="i < stringDates.Count", span="543-543"];
d156 [cluster="Unk.GetQueues", label="Entry Unk.GetQueues", span=""];
d56 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="133-133"];
d57 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label=jobs, span="135-135"];
d59 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="var dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="138-138"];
d67 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
d68 [cluster="int.ToString()", label="Entry int.ToString()", span="0-0"];
d104 [cluster="HangFire.Storage.Monitoring.ServerDto.ServerDto()", label="Entry HangFire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21"];
d290 [cluster="lambda expression", label="endDate = endDate.AddHours(-1)", span="479-479"];
d330 [cluster="lambda expression", label="endDate = endDate.AddDays(-1)", span="521-521"];
d180 [cluster="HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", label="Entry HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23"];
d70 [cluster="HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", label="Entry HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22"];
d313 [cluster="lambda expression", label="Exit lambda expression", span="482-482"];
d314 [cluster="System.DateTime.ToString(string)", label="Entry System.DateTime.ToString(string)", span="0-0"];
d315 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
d389 [label=string, span=""];
d223 [cluster="Unk.QueryMultiple", label="Entry Unk.QueryMultiple", span=""];
d250 [cluster="lambda expression", label="var countByStates = multi.Read().ToDictionary(x => x.State, x => x.Count)", span="445-445"];
d229 [cluster="lambda expression", label="Exit lambda expression", span="394-394"];
d228 [cluster="lambda expression", label="x.Name", span="394-394"];
d232 [cluster="lambda expression", label="Exit lambda expression", span="394-394"];
d231 [cluster="lambda expression", label="x.Value", span="394-394"];
d391 [label=SqlConnection, span=""];
d281 [cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22"];
d251 [cluster="lambda expression", label="Func<string, int> getCountIfExists = name => countByStates.ContainsKey(name) ? countByStates[name] : 0", span="447-447"];
d304 [cluster="lambda expression", label="return result;", span="506-506"];
d307 [cluster="Unk.Query", label="Entry Unk.Query", span=""];
d316 [cluster="lambda expression", label="Entry lambda expression", span="492-492"];
d319 [cluster="lambda expression", label="Entry lambda expression", span="492-492"];
d296 [cluster="lambda expression", label="!valuesMap.ContainsKey(key)", span="496-496"];
d297 [cluster="lambda expression", label="valuesMap.Add(key, 0)", span="496-496"];
d301 [cluster="lambda expression", label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="502-502"];
d344 [cluster="lambda expression", label="return result;", span="549-549"];
d326 [cluster="lambda expression", label="var startDate = endDate.AddDays(-7)", span="515-515"];
d354 [cluster="lambda expression", label="Entry lambda expression", span="535-535"];
d357 [cluster="lambda expression", label="Entry lambda expression", span="535-535"];
d336 [cluster="lambda expression", label="!valuesMap.ContainsKey(key)", span="539-539"];
d337 [cluster="lambda expression", label="valuesMap.Add(key, 0)", span="539-539"];
d341 [cluster="lambda expression", label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="545-545"];
d338 [cluster="lambda expression", label="var result = new Dictionary<DateTime, long>()", span="542-542"];
d103 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
d287 [cluster="lambda expression", label="var i = 0", span="476-476"];
d300 [cluster="lambda expression", label="i < dates.Count", span="500-500"];
d302 [cluster="lambda expression", label="result.Add(dates[i], value)", span="503-503"];
d291 [cluster="lambda expression", label="i++", span="476-476"];
d298 [cluster="lambda expression", label="var result = new Dictionary<DateTime, long>()", span="499-499"];
d342 [cluster="lambda expression", label="result.Add(dates[i], value)", span="546-546"];
d349 [cluster="lambda expression", label="Exit lambda expression", span="524-524"];
d348 [cluster="lambda expression", label="x.ToString(''yyyy-MM-dd'')", span="524-524"];
d339 [cluster="lambda expression", label="var i = 0", span="543-543"];
d343 [cluster="lambda expression", label="i++", span="543-543"];
d55 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="129-129"];
d63 [cluster="System.Collections.Generic.List<T>.List(int)", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
d61 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="return new JobList<TDto>(result);", span="144-144"];
d58 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="var stateData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="137-137"];
d65 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="147-147"];
d66 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
d306 [cluster="System.DateTime.AddHours(double)", label="Entry System.DateTime.AddHours(double)", span="0-0"];
d346 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
d264 [cluster="Unk.Read", label="Entry Unk.Read", span=""];
d268 [cluster="lambda expression", label="Entry lambda expression", span="445-445"];
d271 [cluster="lambda expression", label="Entry lambda expression", span="445-445"];
d275 [cluster="lambda expression", label="countByStates.ContainsKey(name) ? countByStates[name] : 0", span="447-447"];
d318 [cluster="lambda expression", label="Exit lambda expression", span="492-492"];
d317 [cluster="lambda expression", label="(string)x.Key", span="492-492"];
d321 [cluster="lambda expression", label="Exit lambda expression", span="492-492"];
d320 [cluster="lambda expression", label="(long)x.Count", span="492-492"];
d277 [cluster="Unk.ContainsKey", label="Entry Unk.ContainsKey", span=""];
d308 [cluster="Unk.Add", label="Entry Unk.Add", span=""];
d299 [cluster="lambda expression", label="var i = 0", span="500-500"];
d310 [cluster="Unk.ElementAt", label="Entry Unk.ElementAt", span=""];
d356 [cluster="lambda expression", label="Exit lambda expression", span="535-535"];
d355 [cluster="lambda expression", label="(string)x.Key", span="535-535"];
d359 [cluster="lambda expression", label="Exit lambda expression", span="535-535"];
d358 [cluster="lambda expression", label="(long)x.Count", span="535-535"];
d309 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
d303 [cluster="lambda expression", label="i++", span="500-500"];
d62 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="129-129"];
d64 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30"];
d76 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="147-147"];
d71 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="149-149"];
d72 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="data.Arguments = arguments", span="150-150"];
d270 [cluster="lambda expression", label="Exit lambda expression", span="445-445"];
d269 [cluster="lambda expression", label="x.State", span="445-445"];
d273 [cluster="lambda expression", label="Exit lambda expression", span="445-445"];
d272 [cluster="lambda expression", label="x.Count", span="445-445"];
d390 [label=countByStates, span=""];
d274 [cluster="lambda expression", label="Entry lambda expression", span="447-447"];
d276 [cluster="lambda expression", label="Exit lambda expression", span="447-447"];
d73 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="return data.Deserialize();", span="154-154"];
d75 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="return null;", span="158-158"];
d77 [cluster="HangFire.Storage.InvocationData.Deserialize()", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
d74 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label=JobLoadException, span="156-156"];
m0_0 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="BackgroundJobServer.cs", label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="27-27"];
m0_1 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="BackgroundJobServer.cs", label="ServerName = serverName", span="29-29"];
m0_2 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="BackgroundJobServer.cs", label="Exit HangFire.States.ProcessingState.ProcessingState(string)", span="27-27"];
m0_7 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="BackgroundJobServer.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
m0_3 [cluster="HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", file="BackgroundJobServer.cs", label="Entry HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", span="35-35"];
m0_4 [cluster="HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", file="BackgroundJobServer.cs", label="return new Dictionary<string, string>\r\n                {\r\n                    { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''ServerName'', ServerName }\r\n                };", span="37-41"];
m0_5 [cluster="HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", file="BackgroundJobServer.cs", label="Exit HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", span="35-35"];
m0_8 [file="BackgroundJobServer.cs", label="HangFire.States.ProcessingState", span=""];
m1_8 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int)", span="42-42"];
m1_9 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int)", file="BootstrapperConfigurationExtensions.cs", label="var options = new BackgroundJobServerOptions\r\n            {\r\n                WorkerCount = workerCount\r\n            }", span="46-49"];
m1_10 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int)", file="BootstrapperConfigurationExtensions.cs", label="configuration.UseServer(() => new BackgroundJobServer(options))", span="51-51"];
m1_11 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int)", file="BootstrapperConfigurationExtensions.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int)", span="42-42"];
m1_44 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", span="140-140"];
m1_45 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", file="BootstrapperConfigurationExtensions.cs", label="configuration.UseServer(() => new BackgroundJobServer(options, storage))", span="145-145"];
m1_46 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", file="BootstrapperConfigurationExtensions.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", span="140-140"];
m1_16 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", span="63-63"];
m1_7 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer()", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer()", span="43-43"];
m1_17 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, params string[])", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, params string[])", span="62-62"];
m1_18 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, params string[])", file="BootstrapperConfigurationExtensions.cs", label="var options = new BackgroundJobServerOptions\r\n            {\r\n                Queues = queues\r\n            }", span="66-69"];
m1_19 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, params string[])", file="BootstrapperConfigurationExtensions.cs", label="configuration.UseServer(() => new BackgroundJobServer(options))", span="71-71"];
m1_20 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, params string[])", file="BootstrapperConfigurationExtensions.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, params string[])", span="62-62"];
m1_43 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", span="74-74"];
m1_47 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Entry lambda expression", span="145-145"];
m1_4 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Entry lambda expression", span="31-31"];
m1_5 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="new BackgroundJobServer()", span="31-31"];
m1_6 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Exit lambda expression", span="31-31"];
m1_14 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="new BackgroundJobServer(options)", span="51-51"];
m1_13 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Entry lambda expression", span="51-51"];
m1_15 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Exit lambda expression", span="51-51"];
m1_22 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="new BackgroundJobServer(options)", span="71-71"];
m1_21 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Entry lambda expression", span="71-71"];
m1_23 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Exit lambda expression", span="71-71"];
m1_29 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="new BackgroundJobServer(options)", span="95-95"];
m1_28 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Entry lambda expression", span="95-95"];
m1_30 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Exit lambda expression", span="95-95"];
m1_35 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="new BackgroundJobServer(options)", span="110-110"];
m1_34 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Entry lambda expression", span="110-110"];
m1_36 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Exit lambda expression", span="110-110"];
m1_41 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="new BackgroundJobServer(\r\n                new BackgroundJobServerOptions(),\r\n                storage)", span="125-127"];
m1_40 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Entry lambda expression", span="125-127"];
m1_42 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Exit lambda expression", span="125-127"];
m1_48 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="new BackgroundJobServer(options, storage)", span="145-145"];
m1_49 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Exit lambda expression", span="145-145"];
m1_3 [cluster="Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", span="81-81"];
m1_12 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="33-33"];
m1_24 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", span="84-84"];
m1_25 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", file="BootstrapperConfigurationExtensions.cs", label="var options = new BackgroundJobServerOptions\r\n            {\r\n                WorkerCount = workerCount,\r\n                Queues = queues\r\n            }", span="89-93"];
m1_26 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", file="BootstrapperConfigurationExtensions.cs", label="configuration.UseServer(() => new BackgroundJobServer(options))", span="95-95"];
m1_27 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", file="BootstrapperConfigurationExtensions.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", span="84-84"];
m1_31 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.BackgroundJobServerOptions)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.BackgroundJobServerOptions)", span="106-106"];
m1_32 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.BackgroundJobServerOptions)", file="BootstrapperConfigurationExtensions.cs", label="configuration.UseServer(() => new BackgroundJobServer(options))", span="110-110"];
m1_33 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.BackgroundJobServerOptions)", file="BootstrapperConfigurationExtensions.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.BackgroundJobServerOptions)", span="106-106"];
m1_0 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", span="29-29"];
m1_1 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", file="BootstrapperConfigurationExtensions.cs", label="configuration.UseServer(() => new BackgroundJobServer())", span="31-31"];
m1_2 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", file="BootstrapperConfigurationExtensions.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", span="29-29"];
m1_37 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage)", span="121-121"];
m1_38 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage)", file="BootstrapperConfigurationExtensions.cs", label="configuration.UseServer(() => new BackgroundJobServer(\r\n                new BackgroundJobServerOptions(),\r\n                storage))", span="125-127"];
m1_39 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage)", file="BootstrapperConfigurationExtensions.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage)", span="121-121"];
m1_50 [file="BootstrapperConfigurationExtensions.cs", label=options, span=""];
m1_51 [file="BootstrapperConfigurationExtensions.cs", label=options, span=""];
m1_52 [file="BootstrapperConfigurationExtensions.cs", label=options, span=""];
m1_53 [file="BootstrapperConfigurationExtensions.cs", label="Hangfire.BackgroundJobServerOptions", span=""];
m1_54 [file="BootstrapperConfigurationExtensions.cs", label="Hangfire.JobStorage", span=""];
m1_55 [file="BootstrapperConfigurationExtensions.cs", label="Hangfire.JobStorage", span=""];
m1_56 [file="BootstrapperConfigurationExtensions.cs", label="Hangfire.BackgroundJobServerOptions", span=""];
m2_0 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder)", file="DashboardOwinExtensions.cs", label="Entry Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder)", span="41-41"];
m2_1 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder)", file="DashboardOwinExtensions.cs", label="MapHangfireDashboard(app, DefaultDashboardPath, DefaultAppPath)", span="43-43"];
m2_2 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder)", file="DashboardOwinExtensions.cs", label="Exit Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder)", span="41-41"];
m2_18 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="DashboardOwinExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m2_7 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>)", file="DashboardOwinExtensions.cs", label="Entry Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>)", span="88-88"];
m2_10 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>)", file="DashboardOwinExtensions.cs", label="MapHangfireDashboard(app, dashboardPath, appPath, authorizationFilters, JobStorage.Current)", span="94-94"];
m2_11 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>)", file="DashboardOwinExtensions.cs", label="Exit Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>)", span="88-88"];
m2_20 [cluster="Unk.Map", file="DashboardOwinExtensions.cs", label="Entry Unk.Map", span=""];
m2_12 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>, Hangfire.JobStorage)", file="DashboardOwinExtensions.cs", label="Entry Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>, Hangfire.JobStorage)", span="108-108"];
m2_13 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>, Hangfire.JobStorage)", file="DashboardOwinExtensions.cs", label="app == null", span="115-115"];
m2_15 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>, Hangfire.JobStorage)", file="DashboardOwinExtensions.cs", label="SignatureConversions.AddConversions(app)", span="117-117"];
m2_16 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>, Hangfire.JobStorage)", file="DashboardOwinExtensions.cs", label="app.Map(dashboardPath, subApp => subApp.Use<DashboardMiddleware>(\r\n                appPath,\r\n                storage,\r\n                DashboardRoutes.Routes,\r\n                authorizationFilters))", span="119-123"];
m2_14 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>, Hangfire.JobStorage)", file="DashboardOwinExtensions.cs", label="throw new ArgumentNullException(''app'');", span="115-115"];
m2_17 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>, Hangfire.JobStorage)", file="DashboardOwinExtensions.cs", label="Exit Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>, Hangfire.JobStorage)", span="108-108"];
m2_4 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string)", file="DashboardOwinExtensions.cs", label="Entry Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string)", span="54-54"];
m2_5 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string)", file="DashboardOwinExtensions.cs", label="MapHangfireDashboard(app, dashboardPath, DefaultAppPath, DefaultAuthorizationFilters)", span="58-58"];
m2_6 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string)", file="DashboardOwinExtensions.cs", label="Exit Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string)", span="54-54"];
m2_3 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string)", file="DashboardOwinExtensions.cs", label="Entry Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string)", span="70-70"];
m2_8 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string)", file="DashboardOwinExtensions.cs", label="MapHangfireDashboard(app, dashboardPath, appPath, DefaultAuthorizationFilters)", span="75-75"];
m2_9 [cluster="Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string)", file="DashboardOwinExtensions.cs", label="Exit Hangfire.Dashboard.DashboardOwinExtensions.MapHangfireDashboard(IAppBuilder, string, string)", span="70-70"];
m2_19 [cluster="Unk.AddConversions", file="DashboardOwinExtensions.cs", label="Entry Unk.AddConversions", span=""];
m2_21 [cluster="lambda expression", file="DashboardOwinExtensions.cs", label="Entry lambda expression", span="119-123"];
m2_22 [cluster="lambda expression", file="DashboardOwinExtensions.cs", label="subApp.Use<DashboardMiddleware>(\r\n                appPath,\r\n                storage,\r\n                DashboardRoutes.Routes,\r\n                authorizationFilters)", span="119-123"];
m2_23 [cluster="lambda expression", file="DashboardOwinExtensions.cs", label="Exit lambda expression", span="119-123"];
m2_25 [file="DashboardOwinExtensions.cs", label=string, span=""];
m2_26 [file="DashboardOwinExtensions.cs", label="System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>", span=""];
m2_27 [file="DashboardOwinExtensions.cs", label="Hangfire.JobStorage", span=""];
m3_0 [cluster="Hangfire.Dashboard.Pages.LayoutPage.LayoutPage(string)", file="DefaultJobPerformanceProcess.cs", label="Entry Hangfire.Dashboard.Pages.LayoutPage.LayoutPage(string)", span="4-4"];
m3_1 [cluster="Hangfire.Dashboard.Pages.LayoutPage.LayoutPage(string)", file="DefaultJobPerformanceProcess.cs", label="Title = title", span="6-6"];
m3_2 [cluster="Hangfire.Dashboard.Pages.LayoutPage.LayoutPage(string)", file="DefaultJobPerformanceProcess.cs", label="Exit Hangfire.Dashboard.Pages.LayoutPage.LayoutPage(string)", span="4-4"];
m3_3 [file="DefaultJobPerformanceProcess.cs", label="Hangfire.Dashboard.Pages.LayoutPage", span=""];
m4_8 [cluster="Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", file="IBootstrapperConfiguration.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", span="65-65"];
m4_9 [cluster="Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", file="IBootstrapperConfiguration.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", span="65-65"];
m4_0 [cluster="Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", file="IBootstrapperConfiguration.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", span="35-35"];
m4_1 [cluster="Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", file="IBootstrapperConfiguration.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", span="35-35"];
m4_10 [cluster="Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", file="IBootstrapperConfiguration.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", span="73-73"];
m4_11 [cluster="Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", file="IBootstrapperConfiguration.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", span="73-73"];
m4_4 [cluster="Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", file="IBootstrapperConfiguration.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", span="50-50"];
m4_5 [cluster="Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", file="IBootstrapperConfiguration.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", span="50-50"];
m4_2 [cluster="Hangfire.IBootstrapperConfiguration.UseFilter(object)", file="IBootstrapperConfiguration.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseFilter(object)", span="42-42"];
m4_3 [cluster="Hangfire.IBootstrapperConfiguration.UseFilter(object)", file="IBootstrapperConfiguration.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseFilter(object)", span="42-42"];
m4_12 [cluster="Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="IBootstrapperConfiguration.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", span="81-81"];
m4_13 [cluster="Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="IBootstrapperConfiguration.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", span="81-81"];
m4_6 [cluster="Hangfire.IBootstrapperConfiguration.UseAppPath(string)", file="IBootstrapperConfiguration.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseAppPath(string)", span="57-57"];
m4_7 [cluster="Hangfire.IBootstrapperConfiguration.UseAppPath(string)", file="IBootstrapperConfiguration.cs", label="Exit Hangfire.IBootstrapperConfiguration.UseAppPath(string)", span="57-57"];
m5_0 [cluster="Hangfire.Server.IScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", file="IScheduleInstantFactory.cs", label="Entry Hangfire.Server.IScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", span="25-25"];
m5_1 [cluster="Hangfire.Server.IScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", file="IScheduleInstantFactory.cs", label="Exit Hangfire.Server.IScheduleInstantFactory.GetInstant(CrontabSchedule, System.TimeZoneInfo)", span="25-25"];
m6_17 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="OwinBootstrapper.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m6_20 [cluster="Hangfire.Common.GlobalJobFilterCollection.Add(object)", file="OwinBootstrapper.cs", label="Entry Hangfire.Common.GlobalJobFilterCollection.Add(object)", span="56-56"];
m6_23 [cluster="IAppBuilder.MapHangfireDashboard(string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>)", file="OwinBootstrapper.cs", label="Entry IAppBuilder.MapHangfireDashboard(string, string, System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>)", span="88-88"];
m6_18 [cluster="Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", file="OwinBootstrapper.cs", label="Entry Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", span="24-24"];
m6_0 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="Entry Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", span="34-34"];
m6_1 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="app == null", span="38-38"];
m6_3 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="configurationAction == null", span="39-39"];
m6_6 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="configurationAction(configuration)", span="42-42"];
m6_14 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="app.RunHangfireServer(server())", span="61-61"];
m6_15 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="app.MapHangfireDashboard(configuration.DashboardPath, configuration.AppPath, configuration.AuthorizationFilters)", span="64-64"];
m6_2 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="throw new ArgumentNullException(''app'');", span="38-38"];
m6_4 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="throw new ArgumentNullException(''configurationAction'');", span="39-39"];
m6_5 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="var configuration = new BootstrapperConfiguration()", span="41-41"];
m6_7 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="configuration.Activator != null", span="44-44"];
m6_8 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="JobActivator.Current = configuration.Activator", span="46-46"];
m6_9 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="configuration.Storage != null", span="49-49"];
m6_10 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="JobStorage.Current = configuration.Storage", span="51-51"];
m6_11 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="configuration.Filters", span="54-54"];
m6_13 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="configuration.Servers", span="59-59"];
m6_12 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="GlobalJobFilters.Filters.Add(filter)", span="56-56"];
m6_16 [cluster="Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", file="OwinBootstrapper.cs", label="Exit Hangfire.OwinBootstrapper.UseHangfire(IAppBuilder, System.Action<Hangfire.IBootstrapperConfiguration>)", span="34-34"];
m6_22 [cluster="IAppBuilder.RunHangfireServer(Hangfire.BackgroundJobServer)", file="OwinBootstrapper.cs", label="Entry IAppBuilder.RunHangfireServer(Hangfire.BackgroundJobServer)", span="38-38"];
m6_19 [cluster="System.Action<T>.Invoke(T)", file="OwinBootstrapper.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m6_21 [cluster="System.Func<TResult>.Invoke()", file="OwinBootstrapper.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m7_7 [cluster="Unk.True", file="Program.cs", label="Entry Unk.True", span=""];
m7_6 [cluster="Unk.NotEqual", file="Program.cs", label="Entry Unk.NotEqual", span=""];
m7_5 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="Program.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m7_23 [cluster="System.TimeSpan.FromSeconds(double)", file="Program.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m7_29 [cluster="Unk.Equal", file="Program.cs", label="Entry Unk.Equal", span=""];
m7_16 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="Program.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", span="24-24"];
m7_17 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="Program.cs", label="var options = new SqlServerStorageOptions()", span="26-26"];
m7_18 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", color=red, community=0, file="Program.cs", label="0: Assert.Throws<ArgumentException>(\r\n                () => options.QueuePollInterval = TimeSpan.FromSeconds(-1))", span="27-28"];
m7_19 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="Program.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", span="24-24"];
m7_24 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="Program.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", span="32-32"];
m7_25 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="Program.cs", label="var options = new SqlServerStorageOptions()", span="34-34"];
m7_26 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="Program.cs", label="options.QueuePollInterval = TimeSpan.FromSeconds(1)", span="35-35"];
m7_27 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="Program.cs", label="Assert.Equal(TimeSpan.FromSeconds(1), options.QueuePollInterval)", span="36-36"];
m7_28 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="Program.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", span="32-32"];
m7_8 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="Program.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", span="16-16"];
m7_9 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="Program.cs", label="var options = new SqlServerStorageOptions()", span="18-18"];
m7_10 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="Program.cs", label="Assert.Throws<ArgumentException>(\r\n                () => options.QueuePollInterval = TimeSpan.Zero)", span="19-20"];
m7_11 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="Program.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", span="16-16"];
m7_20 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="28-28"];
m7_14 [cluster="lambda expression", file="Program.cs", label="options.QueuePollInterval = TimeSpan.Zero", span="20-20"];
m7_13 [cluster="lambda expression", file="Program.cs", label="Entry lambda expression", span="20-20"];
m7_15 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="20-20"];
m7_21 [cluster="lambda expression", color=red, community=0, file="Program.cs", label="0: options.QueuePollInterval = TimeSpan.FromSeconds(-1)", span="28-28"];
m7_22 [cluster="lambda expression", file="Program.cs", label="Exit lambda expression", span="28-28"];
m7_0 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="Program.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", span="8-8"];
m7_1 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="Program.cs", label="var options = new SqlServerStorageOptions()", span="10-10"];
m7_2 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="Program.cs", label="Assert.NotEqual(0, options.QueuePollInterval.TotalSeconds)", span="11-11"];
m7_3 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="Program.cs", label="Assert.True(options.PrepareSchemaIfNecessary)", span="12-12"];
m7_4 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="Program.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", span="8-8"];
m7_30 [file="Program.cs", label=options, span=""];
m7_31 [file="Program.cs", label=options, span=""];
m8_11 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="RecurringJobScheduler.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m8_27 [cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", span="28-28"];
m8_58 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="RecurringJobScheduler.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="40-40"];
m8_72 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m8_26 [cluster="Hangfire.JobStorage.GetConnection()", file="RecurringJobScheduler.cs", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
m8_34 [cluster="Hangfire.Server.RecurringJobScheduler.ToString()", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.ToString()", span="88-88"];
m8_35 [cluster="Hangfire.Server.RecurringJobScheduler.ToString()", file="RecurringJobScheduler.cs", label="return ''Recurring Job Scheduler'';", span="90-90"];
m8_36 [cluster="Hangfire.Server.RecurringJobScheduler.ToString()", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.ToString()", span="88-88"];
m8_67 [cluster="Hangfire.States.EnqueuedState.EnqueuedState()", file="RecurringJobScheduler.cs", label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="31-31"];
m8_65 [cluster="Hangfire.Server.IScheduleInstant.GetNextInstants(System.DateTime?)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.IScheduleInstant.GetNextInstants(System.DateTime?)", span="25-25"];
m8_73 [cluster="Hangfire.Storage.IStorageConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="61-61"];
m8_29 [cluster="string.Format(string, object)", file="RecurringJobScheduler.cs", label="Entry string.Format(string, object)", span="0-0"];
m8_60 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m8_31 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", span="93-93"];
m8_37 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var serializedJob = JobHelper.FromJson<InvocationData>(recurringJob[''Job''])", span="95-95"];
m8_39 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var cron = recurringJob[''Cron'']", span="97-97"];
m8_41 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var timeZone = recurringJob.ContainsKey(''TimeZoneId'')\r\n                ? TimeZoneInfo.FindSystemTimeZoneById(recurringJob[''TimeZoneId''])\r\n                : TimeZoneInfo.Utc", span="102-104"];
m8_43 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var lastExecutionTime = recurringJob.ContainsKey(''LastExecution'')\r\n                    ? JobHelper.DeserializeDateTime(recurringJob[''LastExecution''])\r\n                    : (DateTime?)null", span="108-110"];
m8_49 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="Logger.DebugFormat(\r\n                            ''Recurring job '{0}' execution at '{1}' has been canceled.'',\r\n                            recurringJobId,\r\n                            instant.NowInstant)", span="121-124"];
m8_53 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="connection.SetRangeInHash(\r\n                    String.Format(''recurring-job:{0}'', recurringJobId),\r\n                    changedFields)", span="133-135"];
m8_55 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="Logger.ErrorException(\r\n                    String.Format(''Recurring job '{0}' was not triggered: {1}.'', recurringJobId, ex.Message),\r\n                    ex)", span="139-141"];
m8_38 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var job = serializedJob.Deserialize()", span="96-96"];
m8_47 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=red, community=0, file="RecurringJobScheduler.cs", label="0: var jobId = _client.Create(job, state)", span="117-117"];
m8_40 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var cronSchedule = CrontabSchedule.Parse(cron)", span="98-98"];
m8_42 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=red, community=0, file="RecurringJobScheduler.cs", label="0: var instant = _instantFactory.GetInstant(cronSchedule, timeZone)", span="106-106"];
m8_45 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="instant.GetNextInstants(lastExecutionTime).Any()", span="114-114"];
m8_50 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="changedFields.Add(''LastExecution'', JobHelper.SerializeDateTime(instant.NowInstant))", span="127-127"];
m8_52 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="changedFields.Add(''NextExecution'', JobHelper.SerializeDateTime(instant.NextInstant))", span="131-131"];
m8_44 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var changedFields = new Dictionary<string, string>()", span="112-112"];
m8_51 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="changedFields.Add(''LastJobId'', jobId ?? String.Empty)", span="128-128"];
m8_46 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var state = new EnqueuedState { Reason = ''Triggered by recurring job scheduler'' }", span="116-116"];
m8_48 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="String.IsNullOrEmpty(jobId)", span="119-119"];
m8_54 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label=TimeZoneNotFoundException, span="137-137"];
m8_56 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", span="93-93"];
m8_32 [cluster="Hangfire.Logging.ILog.WarnException(string, System.Exception)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Logging.ILog.WarnException(string, System.Exception)", span="278-278"];
m8_68 [cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="RecurringJobScheduler.cs", label="Entry Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="41-41"];
m8_61 [cluster="System.TimeZoneInfo.FindSystemTimeZoneById(string)", file="RecurringJobScheduler.cs", label="Entry System.TimeZoneInfo.FindSystemTimeZoneById(string)", span="0-0"];
m8_66 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m8_59 [cluster="Unk.Parse", file="RecurringJobScheduler.cs", label="Entry Unk.Parse", span=""];
m8_25 [cluster="Hangfire.Server.IThrottler.Throttle(System.Threading.CancellationToken)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.IThrottler.Throttle(System.Threading.CancellationToken)", span="22-22"];
m8_64 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m8_71 [cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68"];
m8_57 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
m8_69 [cluster="string.IsNullOrEmpty(string)", file="RecurringJobScheduler.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m8_63 [cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73"];
m8_62 [cluster="Unk.GetInstant", file="RecurringJobScheduler.cs", label="Entry Unk.GetInstant", span=""];
m8_12 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="51-51"];
m8_13 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="_throttler.Throttle(context.CancellationToken)", span="53-53"];
m8_14 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="var connection = context.Storage.GetConnection()", span="55-55"];
m8_23 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="_throttler.Delay(context.CancellationToken)", span="84-84"];
m8_15 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="connection.AcquireDistributedLock(''recurring-jobs:lock'', LockTimeout)", span="56-56"];
m8_16 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="var recurringJobIds = connection.GetAllItemsFromSet(''recurring-jobs'')", span="58-58"];
m8_18 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="var recurringJob = connection.GetAllEntriesFromHash(\r\n                        String.Format(''recurring-job:{0}'', recurringJobId))", span="62-63"];
m8_20 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=red, community=0, file="RecurringJobScheduler.cs", label="0: TryScheduleJob(connection, recurringJobId, recurringJob)", span="72-72"];
m8_17 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label=recurringJobIds, span="60-60"];
m8_22 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="Logger.WarnException(\r\n                            String.Format(\r\n                                ''Recurring job '{0}' can not be scheduled due to job load exception.'',\r\n                                recurringJobId),\r\n                            ex)", span="76-80"];
m8_19 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="recurringJob == null", span="65-65"];
m8_21 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label=JobLoadException, span="74-74"];
m8_24 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="51-51"];
m8_33 [cluster="Hangfire.Server.IThrottler.Delay(System.Threading.CancellationToken)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.IThrottler.Delay(System.Threading.CancellationToken)", span="23-23"];
m8_0 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.IBackgroundJobClient, Hangfire.Server.IScheduleInstantFactory, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.IBackgroundJobClient, Hangfire.Server.IScheduleInstantFactory, Hangfire.Server.IThrottler)", span="37-37"];
m8_1 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.IBackgroundJobClient, Hangfire.Server.IScheduleInstantFactory, Hangfire.Server.IThrottler)", color=red, community=0, file="RecurringJobScheduler.cs", label="0: client == null", span="42-42"];
m8_3 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.IBackgroundJobClient, Hangfire.Server.IScheduleInstantFactory, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="instantFactory == null", span="43-43"];
m8_5 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.IBackgroundJobClient, Hangfire.Server.IScheduleInstantFactory, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="throttler == null", span="44-44"];
m8_7 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.IBackgroundJobClient, Hangfire.Server.IScheduleInstantFactory, Hangfire.Server.IThrottler)", color=red, community=0, file="RecurringJobScheduler.cs", label="0: _client = client", span="46-46"];
m8_8 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.IBackgroundJobClient, Hangfire.Server.IScheduleInstantFactory, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="_instantFactory = instantFactory", span="47-47"];
m8_9 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.IBackgroundJobClient, Hangfire.Server.IScheduleInstantFactory, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="_throttler = throttler", span="48-48"];
m8_2 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.IBackgroundJobClient, Hangfire.Server.IScheduleInstantFactory, Hangfire.Server.IThrottler)", color=red, community=0, file="RecurringJobScheduler.cs", label="0: throw new ArgumentNullException(''client'');", span="42-42"];
m8_4 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.IBackgroundJobClient, Hangfire.Server.IScheduleInstantFactory, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="throw new ArgumentNullException(''instantFactory'');", span="43-43"];
m8_6 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.IBackgroundJobClient, Hangfire.Server.IScheduleInstantFactory, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="throw new ArgumentNullException(''throttler'');", span="44-44"];
m8_10 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.IBackgroundJobClient, Hangfire.Server.IScheduleInstantFactory, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.IBackgroundJobClient, Hangfire.Server.IScheduleInstantFactory, Hangfire.Server.IThrottler)", span="37-37"];
m8_28 [cluster="Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55"];
m8_30 [cluster="Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64"];
m8_70 [cluster="Hangfire.Logging.ILog.DebugFormat(string, params object[])", file="RecurringJobScheduler.cs", label="Entry Hangfire.Logging.ILog.DebugFormat(string, params object[])", span="122-122"];
m8_75 [cluster="Hangfire.Logging.ILog.ErrorException(string, System.Exception)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Logging.ILog.ErrorException(string, System.Exception)", span="159-159"];
m8_76 [file="RecurringJobScheduler.cs", label="Hangfire.Server.RecurringJobScheduler", span=""];
m10_21 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ScheduleInstantFactory.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m10_27 [cluster="HangFire.JobHelper.FromJson<T>(string)", file="ScheduleInstantFactory.cs", label="Entry HangFire.JobHelper.FromJson<T>(string)", span="37-37"];
m10_23 [cluster="HangFire.JobActivator.ActivateJob(System.Type)", file="ScheduleInstantFactory.cs", label="Entry HangFire.JobActivator.ActivateJob(System.Type)", span="6-6"];
m10_38 [cluster="Unk.SetEntryInHash", file="ScheduleInstantFactory.cs", label="Entry Unk.SetEntryInHash", span=""];
m10_25 [cluster="object.GetType()", file="ScheduleInstantFactory.cs", label="Entry object.GetType()", span="0-0"];
m10_37 [cluster="HangFire.JobHelper.ToJson(object)", file="ScheduleInstantFactory.cs", label="Entry HangFire.JobHelper.ToJson(object)", span="32-32"];
m10_36 [cluster="string.Format(string, object)", file="ScheduleInstantFactory.cs", label="Entry string.Format(string, object)", span="0-0"];
m10_31 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="ScheduleInstantFactory.cs", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
m10_45 [cluster="HangFire.Server.ServerJobDescriptor.Perform()", file="ScheduleInstantFactory.cs", label="Entry HangFire.Server.ServerJobDescriptor.Perform()", span="79-79"];
m10_46 [cluster="HangFire.Server.ServerJobDescriptor.Perform()", file="ScheduleInstantFactory.cs", label="_jobInstance.Perform()", span="81-81"];
m10_47 [cluster="HangFire.Server.ServerJobDescriptor.Perform()", file="ScheduleInstantFactory.cs", label="Exit HangFire.Server.ServerJobDescriptor.Perform()", span="79-79"];
m10_44 [cluster="Unk.>", file="ScheduleInstantFactory.cs", label="Entry Unk.>", span=""];
m10_22 [cluster="System.Type.GetType(string, bool, bool)", file="ScheduleInstantFactory.cs", label="Entry System.Type.GetType(string, bool, bool)", span="0-0"];
m10_0 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", file="ScheduleInstantFactory.cs", label="Entry HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", span="12-12"];
m10_1 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", color=red, community=0, file="ScheduleInstantFactory.cs", label="0: _redis = redis", span="17-17"];
m10_2 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", color=red, community=0, file="ScheduleInstantFactory.cs", label="0: activator == null", span="18-18"];
m10_4 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", color=red, community=0, file="ScheduleInstantFactory.cs", label="0: payload == null", span="19-19"];
m10_6 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", color=red, community=0, file="ScheduleInstantFactory.cs", label="0: JobId = payload.Id", span="21-21"];
m10_7 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", color=red, community=0, file="ScheduleInstantFactory.cs", label="0: var type = Type.GetType(payload.Type, true, true)", span="23-23"];
m10_8 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", color=red, community=0, file="ScheduleInstantFactory.cs", label="0: _jobInstance = activator.ActivateJob(type)", span="24-24"];
m10_10 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", color=red, community=0, file="ScheduleInstantFactory.cs", label="0: throw new InvalidOperationException(String.Format(\r\n                    ''{0} returned NULL instance of the '{1}' type.'',\r\n                    activator.GetType().FullName,\r\n                    type.FullName));", span="28-31"];
m10_11 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", file="ScheduleInstantFactory.cs", label="var args = JobHelper.FromJson<Dictionary<string, string>>(payload.Args)", span="34-34"];
m10_3 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", color=red, community=0, file="ScheduleInstantFactory.cs", label="0: throw new ArgumentNullException(''activator'');", span="18-18"];
m10_5 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", color=red, community=0, file="ScheduleInstantFactory.cs", label="0: throw new ArgumentNullException(''payload'');", span="19-19"];
m10_9 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", color=red, community=0, file="ScheduleInstantFactory.cs", label="0: _jobInstance == null", span="26-26"];
m10_12 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", file="ScheduleInstantFactory.cs", label=args, span="36-36"];
m10_13 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", file="ScheduleInstantFactory.cs", label="var propertyInfo = _jobInstance.GetType().GetProperty(arg.Key)", span="38-38"];
m10_14 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", file="ScheduleInstantFactory.cs", label="propertyInfo != null", span="39-39"];
m10_15 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", file="ScheduleInstantFactory.cs", label="var converter = TypeDescriptor.GetConverter(propertyInfo.PropertyType)", span="41-41"];
m10_16 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", file="ScheduleInstantFactory.cs", label="var value = converter.ConvertFromInvariantString(arg.Value)", span="45-45"];
m10_17 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", file="ScheduleInstantFactory.cs", label="propertyInfo.SetValue(_jobInstance, value, null)", span="46-46"];
m10_19 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", file="ScheduleInstantFactory.cs", label="throw new InvalidOperationException(\r\n                            String.Format(\r\n                                ''Could not set the property '{0}' of the instance of class '{1}'. See the inner exception for details.'',\r\n                                propertyInfo.Name, _jobInstance.GetType().Name),\r\n                            ex);", span="50-54"];
m10_18 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", file="ScheduleInstantFactory.cs", label=Exception, span="48-48"];
m10_20 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", file="ScheduleInstantFactory.cs", label="Exit HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", span="12-12"];
m10_28 [cluster="System.Type.GetProperty(string)", file="ScheduleInstantFactory.cs", label="Entry System.Type.GetProperty(string)", span="0-0"];
m10_39 [cluster="HangFire.Server.ServerJobDescriptor.GetParameter<T>(string)", file="ScheduleInstantFactory.cs", label="Entry HangFire.Server.ServerJobDescriptor.GetParameter<T>(string)", span="70-70"];
m10_40 [cluster="HangFire.Server.ServerJobDescriptor.GetParameter<T>(string)", file="ScheduleInstantFactory.cs", label="var value = _redis.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                name)", span="72-74"];
m10_41 [cluster="HangFire.Server.ServerJobDescriptor.GetParameter<T>(string)", file="ScheduleInstantFactory.cs", label="return JobHelper.FromJson<T>(value);", span="76-76"];
m10_42 [cluster="HangFire.Server.ServerJobDescriptor.GetParameter<T>(string)", file="ScheduleInstantFactory.cs", label="Exit HangFire.Server.ServerJobDescriptor.GetParameter<T>(string)", span="70-70"];
m10_24 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="ScheduleInstantFactory.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m10_29 [cluster="System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", file="ScheduleInstantFactory.cs", label="Entry System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", span="0-0"];
m10_48 [cluster="HangFire.BackgroundJob.Perform()", file="ScheduleInstantFactory.cs", label="Entry HangFire.BackgroundJob.Perform()", span="4-4"];
m10_32 [cluster="System.InvalidOperationException.InvalidOperationException(string, System.Exception)", file="ScheduleInstantFactory.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string, System.Exception)", span="0-0"];
m10_49 [cluster="HangFire.Server.ServerJobDescriptor.Dispose()", file="ScheduleInstantFactory.cs", label="Entry HangFire.Server.ServerJobDescriptor.Dispose()", span="84-84"];
m10_50 [cluster="HangFire.Server.ServerJobDescriptor.Dispose()", file="ScheduleInstantFactory.cs", label="var disposable = _jobInstance as IDisposable", span="86-86"];
m10_51 [cluster="HangFire.Server.ServerJobDescriptor.Dispose()", file="ScheduleInstantFactory.cs", label="disposable != null", span="87-87"];
m10_52 [cluster="HangFire.Server.ServerJobDescriptor.Dispose()", file="ScheduleInstantFactory.cs", label="disposable.Dispose()", span="89-89"];
m10_53 [cluster="HangFire.Server.ServerJobDescriptor.Dispose()", file="ScheduleInstantFactory.cs", label="Exit HangFire.Server.ServerJobDescriptor.Dispose()", span="84-84"];
m10_43 [cluster="Unk.GetValueFromHash", file="ScheduleInstantFactory.cs", label="Entry Unk.GetValueFromHash", span=""];
m10_55 [cluster="HangFire.Server.ServerJobDescriptor.System.IDisposable.Dispose()", file="ScheduleInstantFactory.cs", label="Entry HangFire.Server.ServerJobDescriptor.System.IDisposable.Dispose()", span="93-93"];
m10_56 [cluster="HangFire.Server.ServerJobDescriptor.System.IDisposable.Dispose()", file="ScheduleInstantFactory.cs", label="Dispose()", span="95-95"];
m10_57 [cluster="HangFire.Server.ServerJobDescriptor.System.IDisposable.Dispose()", file="ScheduleInstantFactory.cs", label="Exit HangFire.Server.ServerJobDescriptor.System.IDisposable.Dispose()", span="93-93"];
m10_34 [cluster="HangFire.Server.ServerJobDescriptor.SetParameter(string, object)", file="ScheduleInstantFactory.cs", label="_redis.SetEntryInHash(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                name,\r\n                JobHelper.ToJson(value))", span="64-67"];
m10_33 [cluster="HangFire.Server.ServerJobDescriptor.SetParameter(string, object)", file="ScheduleInstantFactory.cs", label="Entry HangFire.Server.ServerJobDescriptor.SetParameter(string, object)", span="62-62"];
m10_35 [cluster="HangFire.Server.ServerJobDescriptor.SetParameter(string, object)", file="ScheduleInstantFactory.cs", label="Exit HangFire.Server.ServerJobDescriptor.SetParameter(string, object)", span="62-62"];
m10_30 [cluster="System.ComponentModel.TypeConverter.ConvertFromInvariantString(string)", file="ScheduleInstantFactory.cs", label="Entry System.ComponentModel.TypeConverter.ConvertFromInvariantString(string)", span="0-0"];
m10_54 [cluster="System.IDisposable.Dispose()", file="ScheduleInstantFactory.cs", label="Entry System.IDisposable.Dispose()", span="0-0"];
m10_58 [file="ScheduleInstantFactory.cs", label="HangFire.Server.ServerJobDescriptor", span=""];
m11_32 [cluster="Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", file="SchedulePoller.cs", label="Entry Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", span="57-57"];
m11_6 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SchedulePoller.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m11_0 [cluster="Hangfire.Server.SchedulePoller.SchedulePoller(Hangfire.States.IStateMachineFactory, System.TimeSpan)", file="SchedulePoller.cs", label="Entry Hangfire.Server.SchedulePoller.SchedulePoller(Hangfire.States.IStateMachineFactory, System.TimeSpan)", span="32-32"];
m11_1 [cluster="Hangfire.Server.SchedulePoller.SchedulePoller(Hangfire.States.IStateMachineFactory, System.TimeSpan)", file="SchedulePoller.cs", label="stateMachineFactory == null", span="34-34"];
m11_3 [cluster="Hangfire.Server.SchedulePoller.SchedulePoller(Hangfire.States.IStateMachineFactory, System.TimeSpan)", file="SchedulePoller.cs", label="_stateMachineFactory = stateMachineFactory", span="36-36"];
m11_4 [cluster="Hangfire.Server.SchedulePoller.SchedulePoller(Hangfire.States.IStateMachineFactory, System.TimeSpan)", file="SchedulePoller.cs", label="_pollInterval = pollInterval", span="37-37"];
m11_2 [cluster="Hangfire.Server.SchedulePoller.SchedulePoller(Hangfire.States.IStateMachineFactory, System.TimeSpan)", file="SchedulePoller.cs", label="throw new ArgumentNullException(''stateMachineFactory'');", span="34-34"];
m11_5 [cluster="Hangfire.Server.SchedulePoller.SchedulePoller(Hangfire.States.IStateMachineFactory, System.TimeSpan)", file="SchedulePoller.cs", label="Exit Hangfire.Server.SchedulePoller.SchedulePoller(Hangfire.States.IStateMachineFactory, System.TimeSpan)", span="32-32"];
m11_31 [cluster="Hangfire.JobStorage.GetConnection()", file="SchedulePoller.cs", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
m11_17 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="SchedulePoller.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m11_18 [cluster="Hangfire.Server.SchedulePoller.ToString()", file="SchedulePoller.cs", label="Entry Hangfire.Server.SchedulePoller.ToString()", span="59-59"];
m11_19 [cluster="Hangfire.Server.SchedulePoller.ToString()", file="SchedulePoller.cs", label="return ''Schedule Poller'';", span="61-61"];
m11_20 [cluster="Hangfire.Server.SchedulePoller.ToString()", file="SchedulePoller.cs", label="Exit Hangfire.Server.SchedulePoller.ToString()", span="59-59"];
m11_34 [cluster="string.IsNullOrEmpty(string)", file="SchedulePoller.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m11_33 [cluster="Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SchedulePoller.cs", label="Entry Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="57-57"];
m11_36 [cluster="Hangfire.States.EnqueuedState.EnqueuedState()", file="SchedulePoller.cs", label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="31-31"];
m11_16 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="SchedulePoller.cs", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210"];
m11_7 [cluster="Hangfire.Server.SchedulePoller.Execute(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="Entry Hangfire.Server.SchedulePoller.Execute(Hangfire.Server.BackgroundProcessContext)", span="40-40"];
m11_8 [cluster="Hangfire.Server.SchedulePoller.Execute(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="!EnqueueNextScheduledJob(context)", span="42-42"];
m11_12 [cluster="Hangfire.Server.SchedulePoller.Execute(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="context.CancellationToken.WaitHandle.WaitOne(_pollInterval)", span="50-50"];
m11_9 [cluster="Hangfire.Server.SchedulePoller.Execute(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="_enqueuedCount != 0", span="44-44"];
m11_13 [cluster="Hangfire.Server.SchedulePoller.Execute(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="_enqueuedCount++", span="55-55"];
m11_10 [cluster="Hangfire.Server.SchedulePoller.Execute(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="Logger.InfoFormat(''{0} scheduled jobs were enqueued.'', _enqueuedCount)", span="46-46"];
m11_11 [cluster="Hangfire.Server.SchedulePoller.Execute(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="_enqueuedCount = 0", span="47-47"];
m11_14 [cluster="Hangfire.Server.SchedulePoller.Execute(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="Exit Hangfire.Server.SchedulePoller.Execute(Hangfire.Server.BackgroundProcessContext)", span="40-40"];
m11_37 [cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePoller.cs", label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="31-31"];
m11_35 [cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="SchedulePoller.cs", label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22"];
m11_15 [cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="Entry Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", span="64-64"];
m11_21 [cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="var connection = context.Storage.GetConnection()", span="66-66"];
m11_22 [cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="var timestamp = JobHelper.ToTimestamp(DateTime.UtcNow)", span="68-68"];
m11_23 [cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="var jobId = connection\r\n                    .GetFirstByLowestScoreFromSet(''schedule'', 0, timestamp)", span="71-72"];
m11_26 [cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=red, community=0, file="SchedulePoller.cs", label="1: var stateMachine = _stateMachineFactory.Create(connection)", span="79-79"];
m11_24 [cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="String.IsNullOrEmpty(jobId)", span="74-74"];
m11_28 [cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="SchedulePoller.cs", label="0: var stateMachine = _stateMachineFactory(context.Storage).Create(connection)", span="84-84"];
m11_25 [cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="return false;", span="76-76"];
m11_27 [cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="var enqueuedState = new EnqueuedState\r\n                {\r\n                    Reason = ''Enqueued as a scheduled job''\r\n                }", span="80-83"];
m11_29 [cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="return true;", span="87-87"];
m11_30 [cluster="Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="SchedulePoller.cs", label="Exit Hangfire.Server.SchedulePoller.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", span="64-64"];
m11_38 [file="SchedulePoller.cs", label="Hangfire.Server.SchedulePoller", span=""];
m13_18 [cluster="HangFire.Perform.In<TJob>(System.TimeSpan, object)", file="ServerOwinExtensions.cs", label="Entry HangFire.Perform.In<TJob>(System.TimeSpan, object)", span="43-43"];
m13_19 [cluster="HangFire.Perform.In<TJob>(System.TimeSpan, object)", file="ServerOwinExtensions.cs", label="return In(interval, typeof(TJob), args);", span="46-46"];
m13_20 [cluster="HangFire.Perform.In<TJob>(System.TimeSpan, object)", file="ServerOwinExtensions.cs", label="Exit HangFire.Perform.In<TJob>(System.TimeSpan, object)", span="43-43"];
m13_3 [cluster="HangFire.Perform.Async<TJob>(object)", file="ServerOwinExtensions.cs", label="Entry HangFire.Perform.Async<TJob>(object)", span="16-16"];
m13_4 [cluster="HangFire.Perform.Async<TJob>(object)", file="ServerOwinExtensions.cs", label="return Async(typeof(TJob), args);", span="19-19"];
m13_5 [cluster="HangFire.Perform.Async<TJob>(object)", file="ServerOwinExtensions.cs", label="Exit HangFire.Perform.Async<TJob>(object)", span="16-16"];
m13_28 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="ServerOwinExtensions.cs", label="Entry HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", span="45-45"];
m13_6 [cluster="HangFire.Perform.Async(System.Type, object)", file="ServerOwinExtensions.cs", label="Entry HangFire.Perform.Async(System.Type, object)", span="27-27"];
m13_10 [cluster="HangFire.Perform.Async(System.Type, object)", file="ServerOwinExtensions.cs", label="var client = new JobClient(RedisFactory.PooledManager)", span="29-29"];
m13_11 [cluster="HangFire.Perform.Async(System.Type, object)", file="ServerOwinExtensions.cs", label="return client.Async(jobType, args);", span="31-31"];
m13_12 [cluster="HangFire.Perform.Async(System.Type, object)", file="ServerOwinExtensions.cs", label="Exit HangFire.Perform.Async(System.Type, object)", span="27-27"];
m13_22 [cluster="HangFire.Perform.In(System.TimeSpan, System.Type)", file="ServerOwinExtensions.cs", label="Entry HangFire.Perform.In(System.TimeSpan, System.Type)", span="49-49"];
m13_23 [cluster="HangFire.Perform.In(System.TimeSpan, System.Type)", file="ServerOwinExtensions.cs", label="return In(interval, jobType, null);", span="51-51"];
m13_24 [cluster="HangFire.Perform.In(System.TimeSpan, System.Type)", file="ServerOwinExtensions.cs", label="Exit HangFire.Perform.In(System.TimeSpan, System.Type)", span="49-49"];
m13_14 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="ServerOwinExtensions.cs", label="Entry HangFire.Client.JobClient.Async(System.Type, object)", span="17-17"];
m13_0 [cluster="HangFire.Perform.Async<TJob>()", file="ServerOwinExtensions.cs", label="Entry HangFire.Perform.Async<TJob>()", span="9-9"];
m13_1 [cluster="HangFire.Perform.Async<TJob>()", file="ServerOwinExtensions.cs", label="return Async<TJob>(null);", span="12-12"];
m13_2 [cluster="HangFire.Perform.Async<TJob>()", file="ServerOwinExtensions.cs", label="Exit HangFire.Perform.Async<TJob>()", span="9-9"];
m13_7 [cluster="HangFire.Perform.Async(System.Type)", file="ServerOwinExtensions.cs", label="Entry HangFire.Perform.Async(System.Type)", span="22-22"];
m13_8 [cluster="HangFire.Perform.Async(System.Type)", file="ServerOwinExtensions.cs", label="return Async(jobType, null);", span="24-24"];
m13_9 [cluster="HangFire.Perform.Async(System.Type)", file="ServerOwinExtensions.cs", label="Exit HangFire.Perform.Async(System.Type)", span="22-22"];
m13_13 [cluster="HangFire.Client.JobClient.JobClient(IRedisClientsManager)", file="ServerOwinExtensions.cs", label="Entry HangFire.Client.JobClient.JobClient(IRedisClientsManager)", span="12-12"];
m13_21 [cluster="HangFire.Perform.In(System.TimeSpan, System.Type, object)", file="ServerOwinExtensions.cs", label="Entry HangFire.Perform.In(System.TimeSpan, System.Type, object)", span="54-54"];
m13_25 [cluster="HangFire.Perform.In(System.TimeSpan, System.Type, object)", file="ServerOwinExtensions.cs", label="var client = new JobClient(RedisFactory.PooledManager)", span="56-56"];
m13_26 [cluster="HangFire.Perform.In(System.TimeSpan, System.Type, object)", file="ServerOwinExtensions.cs", label="return client.In(interval, jobType, args);", span="58-58"];
m13_27 [cluster="HangFire.Perform.In(System.TimeSpan, System.Type, object)", file="ServerOwinExtensions.cs", label="Exit HangFire.Perform.In(System.TimeSpan, System.Type, object)", span="54-54"];
m13_15 [cluster="HangFire.Perform.In<TJob>(System.TimeSpan)", file="ServerOwinExtensions.cs", label="Entry HangFire.Perform.In<TJob>(System.TimeSpan)", span="36-36"];
m13_16 [cluster="HangFire.Perform.In<TJob>(System.TimeSpan)", file="ServerOwinExtensions.cs", label="return In<TJob>(interval, null);", span="39-39"];
m13_17 [cluster="HangFire.Perform.In<TJob>(System.TimeSpan)", file="ServerOwinExtensions.cs", label="Exit HangFire.Perform.In<TJob>(System.TimeSpan)", span="36-36"];
m14_34 [cluster="Unk.NotNull", file="StateMachineFactory.cs", label="Entry Unk.NotNull", span=""];
m14_12 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", file="StateMachineFactory.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", span="18-18"];
m14_13 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", file="StateMachineFactory.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetStateData(''random-id'');\r\n                Assert.Null(result);\r\n            })", span="20-24"];
m14_14 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", file="StateMachineFactory.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", span="18-18"];
m14_7 [cluster="Unk.>", file="StateMachineFactory.cs", label="Entry Unk.>", span=""];
m14_23 [cluster="Unk.UseConnections", file="StateMachineFactory.cs", label="Entry Unk.UseConnections", span=""];
m14_36 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="StateMachineFactory.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", span="50-50"];
m14_37 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="StateMachineFactory.cs", label="var redis = RedisUtils.CreateClient()", span="52-52"];
m14_39 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="StateMachineFactory.cs", label="action(redis, connection)", span="55-55"];
m14_38 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="StateMachineFactory.cs", label="var connection = new RedisConnection(redis)", span="53-53"];
m14_40 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="StateMachineFactory.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", span="50-50"];
m14_43 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="StateMachineFactory.cs", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
m14_33 [cluster="Unk.SetRangeInHash", file="StateMachineFactory.cs", label="Entry Unk.SetRangeInHash", span=""];
m14_3 [cluster="Unk.UseConnection", file="StateMachineFactory.cs", label="Entry Unk.UseConnection", span=""];
m14_19 [cluster="Unk.Null", file="StateMachineFactory.cs", label="Entry Unk.Null", span=""];
m14_48 [cluster="System.Action<T>.Invoke(T)", file="StateMachineFactory.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m14_11 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="StateMachineFactory.cs", label="Entry HangFire.Redis.RedisConnection.GetStateData(string)", span="205-205"];
m14_0 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="StateMachineFactory.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="10-10"];
m14_1 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="StateMachineFactory.cs", label="UseConnection(\r\n                connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null)))", span="12-14"];
m14_2 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="StateMachineFactory.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="10-10"];
m14_35 [cluster="Unk.Equal", file="StateMachineFactory.cs", label="Entry Unk.Equal", span=""];
m14_44 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", file="StateMachineFactory.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", span="59-59"];
m14_45 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", file="StateMachineFactory.cs", label="var connection = new RedisConnection(RedisUtils.CreateClient())", span="61-61"];
m14_46 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", file="StateMachineFactory.cs", label="action(connection)", span="63-63"];
m14_47 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", file="StateMachineFactory.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", span="59-59"];
m14_24 [cluster="lambda expression", file="StateMachineFactory.cs", label="Entry lambda expression", span="30-47"];
m14_4 [cluster="lambda expression", file="StateMachineFactory.cs", label="Entry lambda expression", span="13-14"];
m14_5 [cluster="lambda expression", file="StateMachineFactory.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null))", span="13-14"];
m14_9 [cluster="lambda expression", file="StateMachineFactory.cs", label="connection.GetStateData(null)", span="14-14"];
m14_6 [cluster="lambda expression", file="StateMachineFactory.cs", label="Exit lambda expression", span="13-14"];
m14_8 [cluster="lambda expression", file="StateMachineFactory.cs", label="Entry lambda expression", span="14-14"];
m14_10 [cluster="lambda expression", file="StateMachineFactory.cs", label="Exit lambda expression", span="14-14"];
m14_15 [cluster="lambda expression", file="StateMachineFactory.cs", label="Entry lambda expression", span="20-24"];
m14_16 [cluster="lambda expression", file="StateMachineFactory.cs", label="var result = connection.GetStateData(''random-id'')", span="22-22"];
m14_17 [cluster="lambda expression", file="StateMachineFactory.cs", label="Assert.Null(result)", span="23-23"];
m14_18 [cluster="lambda expression", file="StateMachineFactory.cs", label="Exit lambda expression", span="20-24"];
m14_25 [cluster="lambda expression", file="StateMachineFactory.cs", label="redis.SetRangeInHash(\r\n                    ''hangfire:job:my-job:state'',\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''State'', ''Name'' },\r\n                        { ''Reason'', ''Reason'' },\r\n                        { ''Key'', ''Value'' }\r\n                    })", span="32-39"];
m14_26 [cluster="lambda expression", file="StateMachineFactory.cs", label="var result = connection.GetStateData(''my-job'')", span="41-41"];
m14_27 [cluster="lambda expression", file="StateMachineFactory.cs", label="Assert.NotNull(result)", span="43-43"];
m14_28 [cluster="lambda expression", file="StateMachineFactory.cs", label="Assert.Equal(''Name'', result.Name)", span="44-44"];
m14_29 [cluster="lambda expression", file="StateMachineFactory.cs", label="Assert.Equal(''Reason'', result.Reason)", span="45-45"];
m14_30 [cluster="lambda expression", file="StateMachineFactory.cs", label="Assert.Equal(''Value'', result.Data[''Key''])", span="46-46"];
m14_31 [cluster="lambda expression", file="StateMachineFactory.cs", label="Exit lambda expression", span="30-47"];
m14_20 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", file="StateMachineFactory.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", span="28-28"];
m14_21 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", file="StateMachineFactory.cs", label="UseConnections((redis, connection) =>\r\n            {\r\n                redis.SetRangeInHash(\r\n                    ''hangfire:job:my-job:state'',\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''State'', ''Name'' },\r\n                        { ''Reason'', ''Reason'' },\r\n                        { ''Key'', ''Value'' }\r\n                    });\r\n\r\n                var result = connection.GetStateData(''my-job'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(''Name'', result.Name);\r\n                Assert.Equal(''Reason'', result.Reason);\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="30-47"];
m14_22 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", file="StateMachineFactory.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", span="28-28"];
m14_41 [cluster="HangFire.Redis.Tests.RedisUtils.CreateClient()", file="StateMachineFactory.cs", label="Entry HangFire.Redis.Tests.RedisUtils.CreateClient()", span="15-15"];
m14_42 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="StateMachineFactory.cs", label="Entry HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="33-33"];
m14_49 [file="StateMachineFactory.cs", label="HangFire.Redis.Tests.RedisConnectionFacts", span=""];
m14_50 [file="StateMachineFactory.cs", label="HangFire.Redis.RedisConnection", span=""];
d23 -> d24  [color=green, key=0, style=solid];
d23 -> d25  [color=green, key=2, style=dotted];
d23 -> d26  [color=green, key=1, label="lambda expression", style=dashed];
d380 -> d23  [color=green, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d1  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d2  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d5  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d9  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d16  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d21  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d34  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d37  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d46  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d51  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d79  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d86  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d90  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d93  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d106  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d114  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d122  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d129  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d132  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d137  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d164  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d166  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d170  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d175  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d182  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d184  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d188  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d195  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d204  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d208  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d211  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d221  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d238  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d241  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d244  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d260  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d282  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d322  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d360  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d363  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d380 -> d369  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
d7 -> d23  [color=green, key=0, style=solid];
d7 -> d28  [color=darkseagreen4, key=1, label=string, style=dashed];
d24 -> d7  [color=blue, key=0, style=bold];
d25 -> d368  [key=0, style=solid];
d25 -> d371  [color=darkseagreen4, key=1, label="System.Func<SqlConnection, T>", style=dashed];
d26 -> d27  [key=0, style=solid];
d26 -> d28  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d1 -> d2  [key=0, style=solid];
d2 -> d3  [key=0, style=solid];
d5 -> d7  [key=2, style=dotted];
d5 -> d6  [key=0, style=solid];
d9 -> d10  [key=0, style=solid];
d9 -> d13  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d16 -> d13  [key=2, style=dotted];
d21 -> d7  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d34 -> d7  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d37 -> d38  [key=0, style=solid];
d37 -> d39  [key=2, style=dotted];
d37 -> d40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d46 -> d25  [key=2, style=dotted];
d46 -> d47  [key=0, style=solid];
d46 -> d48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d51 -> d52  [key=0, style=solid];
d51 -> d54  [key=2, style=dotted];
d79 -> d80  [key=0, style=solid];
d79 -> d39  [key=2, style=dotted];
d79 -> d81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d86 -> d87  [key=0, style=solid];
d86 -> d88  [key=2, style=dotted];
d90 -> d91  [key=0, style=solid];
d90 -> d88  [key=2, style=dotted];
d93 -> d94  [key=0, style=solid];
d93 -> d31  [key=2, style=dotted];
d93 -> d95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d106 -> d107  [key=0, style=solid];
d106 -> d39  [key=2, style=dotted];
d106 -> d108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d114 -> d115  [key=0, style=solid];
d114 -> d39  [key=2, style=dotted];
d114 -> d116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d122 -> d123  [key=0, style=solid];
d122 -> d39  [key=2, style=dotted];
d122 -> d124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d129 -> d130  [key=0, style=solid];
d129 -> d31  [key=2, style=dotted];
d129 -> d131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d132 -> d133  [key=0, style=solid];
d132 -> d140  [key=2, style=dotted];
d132 -> d141  [key=2, style=dotted];
d132 -> d142  [key=2, style=dotted];
d132 -> d143  [key=2, style=dotted];
d132 -> d149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d132 -> d153  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d132 -> d157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d132 -> d160  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d132 -> d134  [color=darkseagreen4, key=1, label=tuples, style=dashed];
d137 -> d134  [key=0, style=solid];
d137 -> d147  [key=2, style=dotted];
d137 -> d148  [key=2, style=dotted];
d137 -> d69  [key=2, style=dotted];
d164 -> d165  [key=0, style=solid];
d164 -> d13  [key=2, style=dotted];
d166 -> d167  [key=0, style=solid];
d166 -> d169  [key=2, style=dotted];
d170 -> d25  [key=2, style=dotted];
d170 -> d171  [key=0, style=solid];
d170 -> d172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d175 -> d176  [key=0, style=solid];
d175 -> d54  [key=2, style=dotted];
d175 -> d177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d182 -> d183  [key=0, style=solid];
d182 -> d13  [key=2, style=dotted];
d184 -> d185  [key=0, style=solid];
d184 -> d187  [key=2, style=dotted];
d188 -> d189  [key=0, style=solid];
d188 -> d31  [key=2, style=dotted];
d188 -> d190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d195 -> d194  [key=0, style=solid];
d195 -> d199  [key=2, style=dotted];
d195 -> d200  [key=2, style=dotted];
d195 -> d201  [key=2, style=dotted];
d195 -> d202  [key=2, style=dotted];
d195 -> d69  [key=2, style=dotted];
d204 -> d205  [key=0, style=solid];
d204 -> d206  [key=2, style=dotted];
d208 -> d209  [key=0, style=solid];
d208 -> d206  [key=2, style=dotted];
d211 -> d25  [key=2, style=dotted];
d211 -> d212  [key=0, style=solid];
d211 -> d213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d221 -> d222  [key=0, style=solid];
d221 -> d226  [key=2, style=dotted];
d221 -> d202  [key=2, style=dotted];
d238 -> d7  [key=2, style=dotted];
d238 -> d239  [key=0, style=solid];
d241 -> d7  [key=2, style=dotted];
d241 -> d242  [key=0, style=solid];
d244 -> d25  [key=2, style=dotted];
d244 -> d245  [key=0, style=solid];
d244 -> d246  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d260 -> d261  [key=0, style=solid];
d260 -> d266  [key=2, style=dotted];
d260 -> d267  [key=2, style=dotted];
d260 -> d278  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d282 -> d283  [key=0, style=solid];
d282 -> d31  [key=2, style=dotted];
d282 -> d284  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d322 -> d323  [key=0, style=solid];
d322 -> d31  [key=2, style=dotted];
d322 -> d324  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d360 -> d25  [key=2, style=dotted];
d360 -> d361  [key=0, style=solid];
d360 -> d362  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d363 -> d364  [key=0, style=solid];
d363 -> d367  [key=2, style=dotted];
d369 -> d370  [key=0, style=solid];
d369 -> d377  [key=2, style=dotted];
d369 -> d371  [color=darkseagreen4, key=1, label=connection, style=dashed];
d28 -> d29  [key=0, style=solid];
d28 -> d31  [key=2, style=dotted];
d28 -> d32  [key=2, style=dotted];
d374 -> d25  [color=blue, key=0, style=bold];
d368 -> d369  [key=0, style=solid];
d368 -> d375  [key=2, style=dotted];
d368 -> d376  [key=2, style=dotted];
d368 -> d372  [color=darkseagreen4, key=1, label=transaction, style=dashed];
d371 -> d372  [key=0, style=solid];
d371 -> d265  [key=2, style=dotted];
d371 -> d373  [color=darkseagreen4, key=1, label=result, style=dashed];
d30 -> d26  [color=blue, key=0, style=bold];
d27 -> d28  [key=0, style=solid];
d0 -> d1  [key=0, style=solid];
d0 -> d2  [color=darkseagreen4, key=1, label="HangFire.SqlServer.PersistentJobQueueProviderCollection", style=dashed];
d3 -> d0  [color=blue, key=0, style=bold];
d4 -> d5  [key=0, style=solid];
d6 -> d4  [color=blue, key=0, style=bold];
d8 -> d9  [key=0, style=solid];
d8 -> d10  [color=darkseagreen4, key=1, label=string, style=dashed];
d10 -> d11  [key=0, style=solid];
d10 -> d14  [key=2, style=dotted];
d13 -> d360  [key=0, style=solid];
d13 -> d363  [color=darkseagreen4, key=1, label=string, style=dashed];
d15 -> d16  [key=0, style=solid];
d15 -> d17  [color=darkseagreen4, key=1, label=string, style=dashed];
d17 -> d18  [key=0, style=solid];
d17 -> d14  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d22 -> d20  [color=blue, key=0, style=bold];
d33 -> d34  [key=0, style=solid];
d35 -> d33  [color=blue, key=0, style=bold];
d36 -> d37  [key=0, style=solid];
d38 -> d36  [color=blue, key=0, style=bold];
d39 -> d46  [key=0, style=solid];
d39 -> d51  [color=darkseagreen4, key=1, label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", style=dashed];
d39 -> d50  [color=darkseagreen4, key=1, label=int, style=dashed];
d40 -> d41  [key=0, style=solid];
d47 -> d39  [color=blue, key=0, style=bold];
d48 -> d49  [key=0, style=solid];
d48 -> d50  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d385 -> d51  [color=darkseagreen4, key=1, label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", style=dashed];
d50 -> d51  [key=0, style=solid];
d50 -> d31  [key=2, style=dotted];
d50 -> d53  [key=2, style=dotted];
d52 -> d48  [color=blue, key=0, style=bold];
d78 -> d79  [key=0, style=solid];
d80 -> d78  [color=blue, key=0, style=bold];
d81 -> d82  [key=0, style=solid];
d85 -> d86  [key=0, style=solid];
d87 -> d85  [color=blue, key=0, style=bold];
d88 -> d322  [key=0, style=solid];
d88 -> d332  [color=darkseagreen4, key=1, label=string, style=dashed];
d88 -> d351  [color=darkseagreen4, key=1, label=string, style=dashed];
d89 -> d90  [key=0, style=solid];
d91 -> d89  [color=blue, key=0, style=bold];
d92 -> d93  [key=0, style=solid];
d94 -> d92  [color=blue, key=0, style=bold];
d95 -> d96  [key=0, style=solid];
d105 -> d106  [key=0, style=solid];
d107 -> d105  [color=blue, key=0, style=bold];
d108 -> d109  [key=0, style=solid];
d113 -> d114  [key=0, style=solid];
d115 -> d113  [color=blue, key=0, style=bold];
d116 -> d117  [key=0, style=solid];
d121 -> d122  [key=0, style=solid];
d123 -> d121  [color=blue, key=0, style=bold];
d124 -> d125  [key=0, style=solid];
d128 -> d129  [key=0, style=solid];
d130 -> d128  [color=blue, key=0, style=bold];
d131 -> d132  [key=0, style=solid];
d131 -> d150  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d133 -> d137  [color=darkseagreen4, key=1, label=result, style=dashed];
d133 -> d134  [key=0, style=solid];
d133 -> d144  [key=2, style=dotted];
d133 -> d138  [color=darkseagreen4, key=1, label=result, style=dashed];
d149 -> d150  [key=0, style=solid];
d153 -> d154  [key=0, style=solid];
d157 -> d158  [key=0, style=solid];
d160 -> d161  [key=0, style=solid];
d134 -> d137  [color=darkseagreen4, key=1, label=tuple, style=dashed];
d134 -> d135  [key=0, style=solid];
d134 -> d138  [key=0, style=solid];
d134 -> d136  [color=darkseagreen4, key=1, label=tuple, style=dashed];
d135 -> d137  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
d135 -> d136  [key=0, style=solid];
d135 -> d145  [key=2, style=dotted];
d136 -> d137  [key=0, style=solid];
d136 -> d146  [key=2, style=dotted];
d163 -> d164  [key=0, style=solid];
d163 -> d165  [color=darkseagreen4, key=1, label=string, style=dashed];
d165 -> d166  [key=0, style=solid];
d165 -> d168  [key=2, style=dotted];
d167 -> d163  [color=blue, key=0, style=bold];
d169 -> d170  [key=0, style=solid];
d169 -> d174  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<int>", style=dashed];
d171 -> d169  [color=blue, key=0, style=bold];
d172 -> d173  [key=0, style=solid];
d172 -> d174  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d174 -> d175  [key=0, style=solid];
d174 -> d31  [key=2, style=dotted];
d174 -> d53  [key=2, style=dotted];
d176 -> d172  [color=blue, key=0, style=bold];
d177 -> d178  [key=0, style=solid];
d181 -> d182  [key=0, style=solid];
d181 -> d183  [color=darkseagreen4, key=1, label=string, style=dashed];
d183 -> d184  [key=0, style=solid];
d183 -> d186  [key=2, style=dotted];
d185 -> d181  [color=blue, key=0, style=bold];
d187 -> d188  [key=0, style=solid];
d187 -> d192  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<int>", style=dashed];
d189 -> d187  [color=blue, key=0, style=bold];
d190 -> d191  [key=0, style=solid];
d190 -> d192  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d193 -> d195  [color=darkseagreen4, key=1, label=result, style=dashed];
d193 -> d194  [key=0, style=solid];
d193 -> d198  [key=2, style=dotted];
d193 -> d196  [color=darkseagreen4, key=1, label=result, style=dashed];
d194 -> d195  [key=0, style=solid];
d194 -> d196  [key=0, style=solid];
d203 -> d204  [key=0, style=solid];
d205 -> d203  [color=blue, key=0, style=bold];
d206 -> d282  [key=0, style=solid];
d206 -> d292  [color=darkseagreen4, key=1, label=string, style=dashed];
d206 -> d312  [color=darkseagreen4, key=1, label=string, style=dashed];
d207 -> d208  [key=0, style=solid];
d209 -> d207  [color=blue, key=0, style=bold];
d210 -> d211  [key=0, style=solid];
d210 -> d215  [color=darkseagreen4, key=1, label=string, style=dashed];
d212 -> d210  [color=blue, key=0, style=bold];
d213 -> d214  [key=0, style=solid];
d213 -> d215  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d216 -> d221  [color=darkseagreen4, key=1, label=job, style=dashed];
d216 -> d31  [key=2, style=dotted];
d216 -> d217  [key=0, style=solid];
d216 -> d224  [key=2, style=dotted];
d219 -> d221  [color=darkseagreen4, key=1, label=parameters, style=dashed];
d219 -> d31  [key=2, style=dotted];
d219 -> d220  [key=0, style=solid];
d219 -> d225  [key=2, style=dotted];
d219 -> d227  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d219 -> d230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d220 -> d221  [key=0, style=solid];
d220 -> d31  [key=2, style=dotted];
d220 -> d140  [key=2, style=dotted];
d220 -> d53  [key=2, style=dotted];
d220 -> d233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d222 -> d213  [color=blue, key=0, style=bold];
d237 -> d238  [key=0, style=solid];
d239 -> d237  [color=blue, key=0, style=bold];
d240 -> d241  [key=0, style=solid];
d242 -> d240  [color=blue, key=0, style=bold];
d243 -> d244  [key=0, style=solid];
d245 -> d243  [color=blue, key=0, style=bold];
d246 -> d260  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d246 -> d247  [key=0, style=solid];
d246 -> d249  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d246 -> d279  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d248 -> d260  [color=darkseagreen4, key=1, label=stats, style=dashed];
d248 -> d249  [key=0, style=solid];
d248 -> d263  [key=2, style=dotted];
d248 -> d252  [color=darkseagreen4, key=1, label=stats, style=dashed];
d248 -> d253  [color=darkseagreen4, key=1, label=stats, style=dashed];
d248 -> d254  [color=darkseagreen4, key=1, label=stats, style=dashed];
d248 -> d255  [color=darkseagreen4, key=1, label=stats, style=dashed];
d248 -> d256  [color=darkseagreen4, key=1, label=stats, style=dashed];
d248 -> d257  [color=darkseagreen4, key=1, label=stats, style=dashed];
d248 -> d258  [color=darkseagreen4, key=1, label=stats, style=dashed];
d248 -> d259  [color=darkseagreen4, key=1, label=stats, style=dashed];
d248 -> d261  [color=darkseagreen4, key=1, label=stats, style=dashed];
d259 -> d260  [key=0, style=solid];
d259 -> d31  [key=2, style=dotted];
d259 -> d32  [key=2, style=dotted];
d261 -> d262  [key=0, style=solid];
d278 -> d279  [key=0, style=solid];
d283 -> d206  [color=blue, key=0, style=bold];
d284 -> d285  [key=0, style=solid];
d284 -> d294  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d323 -> d88  [color=blue, key=0, style=bold];
d324 -> d325  [key=0, style=solid];
d324 -> d334  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d361 -> d13  [color=blue, key=0, style=bold];
d362 -> d363  [key=0, style=solid];
d362 -> d364  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d394 -> d363  [color=darkseagreen4, key=1, label=string, style=dashed];
d364 -> d365  [key=0, style=solid];
d364 -> d152  [key=2, style=dotted];
d370 -> d371  [key=0, style=solid];
d370 -> d378  [key=2, style=dotted];
d381 -> d28  [color=darkseagreen4, key=1, label=string, style=dashed];
d29 -> d30  [key=0, style=solid];
d373 -> d374  [key=0, style=solid];
d372 -> d373  [key=0, style=solid];
d372 -> d379  [key=2, style=dotted];
d12 -> d8  [color=blue, key=0, style=bold];
d11 -> d12  [key=0, style=solid];
d19 -> d15  [color=blue, key=0, style=bold];
d18 -> d19  [key=0, style=solid];
d42 -> d40  [color=blue, key=0, style=bold];
d41 -> d42  [key=0, style=solid];
d41 -> d43  [key=2, style=dotted];
d41 -> d44  [key=2, style=dotted];
d41 -> d45  [key=2, style=dotted];
d49 -> d50  [key=0, style=solid];
d382 -> d50  [color=darkseagreen4, key=1, label=int, style=dashed];
d383 -> d50  [color=darkseagreen4, key=1, label=int, style=dashed];
d384 -> d50  [color=darkseagreen4, key=1, label=string, style=dashed];
d83 -> d81  [color=blue, key=0, style=bold];
d82 -> d83  [key=0, style=solid];
d82 -> d84  [key=2, style=dotted];
d82 -> d45  [key=2, style=dotted];
d332 -> d140  [key=2, style=dotted];
d332 -> d53  [key=2, style=dotted];
d332 -> d333  [key=0, style=solid];
d332 -> d350  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d332 -> d334  [color=darkseagreen4, key=1, label=keys, style=dashed];
d332 -> d335  [color=darkseagreen4, key=1, label=keys, style=dashed];
d351 -> d352  [key=0, style=solid];
d351 -> d353  [key=2, style=dotted];
d96 -> d31  [key=2, style=dotted];
d96 -> d53  [key=2, style=dotted];
d96 -> d97  [key=0, style=solid];
d96 -> d98  [color=darkseagreen4, key=1, label=servers, style=dashed];
d99 -> d31  [key=2, style=dotted];
d99 -> d100  [key=0, style=solid];
d192 -> d31  [key=2, style=dotted];
d192 -> d193  [key=0, style=solid];
d192 -> d194  [color=darkseagreen4, key=1, label=jobs, style=dashed];
d192 -> d53  [key=2, style=dotted];
d234 -> d31  [key=2, style=dotted];
d234 -> d235  [key=0, style=solid];
d234 -> d236  [key=2, style=dotted];
d256 -> d31  [key=2, style=dotted];
d256 -> d32  [key=2, style=dotted];
d256 -> d257  [key=0, style=solid];
d257 -> d31  [key=2, style=dotted];
d257 -> d258  [key=0, style=solid];
d257 -> d224  [key=2, style=dotted];
d258 -> d31  [key=2, style=dotted];
d258 -> d259  [key=0, style=solid];
d258 -> d224  [key=2, style=dotted];
d102 -> d95  [color=blue, key=0, style=bold];
d110 -> d108  [color=blue, key=0, style=bold];
d109 -> d110  [key=0, style=solid];
d109 -> d111  [key=2, style=dotted];
d109 -> d112  [key=2, style=dotted];
d118 -> d116  [color=blue, key=0, style=bold];
d117 -> d118  [key=0, style=solid];
d117 -> d119  [key=2, style=dotted];
d117 -> d44  [key=2, style=dotted];
d117 -> d120  [key=2, style=dotted];
d117 -> d112  [key=2, style=dotted];
d126 -> d124  [color=blue, key=0, style=bold];
d125 -> d126  [key=0, style=solid];
d125 -> d127  [key=2, style=dotted];
d125 -> d112  [key=2, style=dotted];
d139 -> d131  [color=blue, key=0, style=bold];
d150 -> d151  [key=0, style=solid];
d150 -> d152  [key=2, style=dotted];
d138 -> d139  [key=0, style=solid];
d292 -> d140  [key=2, style=dotted];
d292 -> d53  [key=2, style=dotted];
d292 -> d293  [key=0, style=solid];
d292 -> d311  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d292 -> d294  [color=darkseagreen4, key=1, label=keys, style=dashed];
d292 -> d295  [color=darkseagreen4, key=1, label=keys, style=dashed];
d331 -> d140  [key=2, style=dotted];
d331 -> d53  [key=2, style=dotted];
d331 -> d332  [key=0, style=solid];
d331 -> d347  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d331 -> d340  [color=darkseagreen4, key=1, label=stringDates, style=dashed];
d151 -> d149  [color=blue, key=0, style=bold];
d155 -> d153  [color=blue, key=0, style=bold];
d154 -> d155  [key=0, style=solid];
d154 -> d156  [key=2, style=dotted];
d159 -> d157  [color=blue, key=0, style=bold];
d158 -> d159  [key=0, style=solid];
d162 -> d160  [color=blue, key=0, style=bold];
d161 -> d162  [key=0, style=solid];
d60 -> d69  [key=2, style=dotted];
d60 -> d57  [key=0, style=solid];
d60 -> d67  [key=2, style=dotted];
d60 -> d68  [key=2, style=dotted];
d100 -> d69  [key=2, style=dotted];
d100 -> d98  [key=0, style=solid];
d100 -> d104  [key=2, style=dotted];
d289 -> d69  [key=2, style=dotted];
d289 -> d290  [key=0, style=solid];
d329 -> d69  [key=2, style=dotted];
d329 -> d330  [key=0, style=solid];
d173 -> d174  [key=0, style=solid];
d387 -> d174  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<int>", style=dashed];
d179 -> d177  [color=blue, key=0, style=bold];
d178 -> d179  [key=0, style=solid];
d178 -> d180  [key=2, style=dotted];
d178 -> d112  [key=2, style=dotted];
d197 -> d190  [color=blue, key=0, style=bold];
d191 -> d192  [key=0, style=solid];
d196 -> d197  [key=0, style=solid];
d196 -> d70  [key=2, style=dotted];
d312 -> d313  [key=0, style=solid];
d312 -> d314  [key=2, style=dotted];
d312 -> d315  [key=2, style=dotted];
d215 -> d216  [key=0, style=solid];
d215 -> d219  [color=darkseagreen4, key=1, label=multi, style=dashed];
d215 -> d220  [color=darkseagreen4, key=1, label=multi, style=dashed];
d215 -> d223  [key=2, style=dotted];
d214 -> d215  [key=0, style=solid];
d217 -> d219  [key=0, style=solid];
d217 -> d218  [key=0, style=solid];
d227 -> d228  [key=0, style=solid];
d230 -> d231  [key=0, style=solid];
d233 -> d234  [key=0, style=solid];
d218 -> d222  [key=0, style=solid];
d262 -> d246  [color=blue, key=0, style=bold];
d247 -> d248  [key=0, style=solid];
d247 -> d249  [color=darkseagreen4, key=1, label=sql, style=dashed];
d249 -> d259  [color=darkseagreen4, key=1, label=multi, style=dashed];
d249 -> d256  [color=darkseagreen4, key=1, label=multi, style=dashed];
d249 -> d257  [color=darkseagreen4, key=1, label=multi, style=dashed];
d249 -> d258  [color=darkseagreen4, key=1, label=multi, style=dashed];
d249 -> d250  [key=0, style=solid];
d249 -> d223  [key=2, style=dotted];
d279 -> d280  [key=0, style=solid];
d279 -> d152  [key=2, style=dotted];
d279 -> d281  [key=2, style=dotted];
d252 -> d265  [key=2, style=dotted];
d252 -> d253  [key=0, style=solid];
d253 -> d265  [key=2, style=dotted];
d253 -> d254  [key=0, style=solid];
d254 -> d265  [key=2, style=dotted];
d254 -> d255  [key=0, style=solid];
d255 -> d265  [key=2, style=dotted];
d255 -> d256  [key=0, style=solid];
d280 -> d278  [color=blue, key=0, style=bold];
d305 -> d284  [color=blue, key=0, style=bold];
d285 -> d289  [color=darkseagreen4, key=1, label=endDate, style=dashed];
d285 -> d286  [key=0, style=solid];
d285 -> d290  [color=darkseagreen4, key=1, label=endDate, style=dashed];
d294 -> d225  [key=2, style=dotted];
d294 -> d295  [key=0, style=solid];
d294 -> d307  [key=2, style=dotted];
d294 -> d316  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d294 -> d319  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d294 -> d296  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
d294 -> d297  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
d294 -> d301  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
d345 -> d324  [color=blue, key=0, style=bold];
d325 -> d329  [color=darkseagreen4, key=1, label=endDate, style=dashed];
d325 -> d326  [key=0, style=solid];
d325 -> d328  [color=darkseagreen4, key=1, label=endDate, style=dashed];
d325 -> d330  [color=darkseagreen4, key=1, label=endDate, style=dashed];
d334 -> d225  [key=2, style=dotted];
d334 -> d335  [key=0, style=solid];
d334 -> d307  [key=2, style=dotted];
d334 -> d354  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d334 -> d357  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d334 -> d336  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
d334 -> d337  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
d334 -> d341  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
d366 -> d362  [color=blue, key=0, style=bold];
d365 -> d366  [key=0, style=solid];
d393 -> d332  [color=darkseagreen4, key=1, label=string, style=dashed];
d393 -> d351  [color=darkseagreen4, key=1, label=string, style=dashed];
d333 -> d334  [key=0, style=solid];
d350 -> d351  [key=0, style=solid];
d335 -> d336  [key=0, style=solid];
d335 -> d338  [key=0, style=solid];
d335 -> d337  [color=darkseagreen4, key=1, label=key, style=dashed];
d352 -> d350  [color=blue, key=0, style=bold];
d97 -> d100  [color=darkseagreen4, key=1, label=result, style=dashed];
d97 -> d98  [key=0, style=solid];
d97 -> d103  [key=2, style=dotted];
d97 -> d101  [color=darkseagreen4, key=1, label=result, style=dashed];
d98 -> d99  [key=0, style=solid];
d98 -> d100  [color=darkseagreen4, key=1, label=server, style=dashed];
d98 -> d101  [key=0, style=solid];
d388 -> d192  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<int>", style=dashed];
d235 -> d233  [color=blue, key=0, style=bold];
d101 -> d102  [key=0, style=solid];
d386 -> d150  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d392 -> d292  [color=darkseagreen4, key=1, label=string, style=dashed];
d392 -> d312  [color=darkseagreen4, key=1, label=string, style=dashed];
d286 -> d292  [color=darkseagreen4, key=1, label=dates, style=dashed];
d286 -> d289  [color=darkseagreen4, key=1, label=dates, style=dashed];
d286 -> d287  [key=0, style=solid];
d286 -> d103  [key=2, style=dotted];
d286 -> d300  [color=darkseagreen4, key=1, label=dates, style=dashed];
d286 -> d302  [color=darkseagreen4, key=1, label=dates, style=dashed];
d288 -> d292  [key=0, style=solid];
d288 -> d289  [key=0, style=solid];
d293 -> d294  [key=0, style=solid];
d311 -> d312  [key=0, style=solid];
d295 -> d296  [key=0, style=solid];
d295 -> d298  [key=0, style=solid];
d295 -> d297  [color=darkseagreen4, key=1, label=key, style=dashed];
d328 -> d331  [key=0, style=solid];
d328 -> d329  [key=0, style=solid];
d327 -> d331  [color=darkseagreen4, key=1, label=dates, style=dashed];
d327 -> d329  [color=darkseagreen4, key=1, label=dates, style=dashed];
d327 -> d328  [key=0, style=solid];
d327 -> d103  [key=2, style=dotted];
d327 -> d342  [color=darkseagreen4, key=1, label=dates, style=dashed];
d347 -> d348  [key=0, style=solid];
d340 -> d341  [key=0, style=solid];
d340 -> d344  [key=0, style=solid];
d56 -> d60  [color=darkseagreen4, key=1, label=result, style=dashed];
d56 -> d57  [key=0, style=solid];
d56 -> d63  [key=2, style=dotted];
d56 -> d61  [color=darkseagreen4, key=1, label=result, style=dashed];
d57 -> d60  [color=darkseagreen4, key=1, label=job, style=dashed];
d57 -> d58  [key=0, style=solid];
d57 -> d61  [key=0, style=solid];
d57 -> d59  [color=darkseagreen4, key=1, label=job, style=dashed];
d59 -> d60  [key=0, style=solid];
d59 -> d65  [key=2, style=dotted];
d59 -> d66  [key=2, style=dotted];
d290 -> d290  [color=darkseagreen4, key=1, label=endDate, style=dashed];
d290 -> d291  [key=0, style=solid];
d290 -> d306  [key=2, style=dotted];
d330 -> d328  [key=0, style=solid];
d330 -> d330  [color=darkseagreen4, key=1, label=endDate, style=dashed];
d330 -> d346  [key=2, style=dotted];
d313 -> d311  [color=blue, key=0, style=bold];
d389 -> d215  [color=darkseagreen4, key=1, label=string, style=dashed];
d250 -> d225  [key=2, style=dotted];
d250 -> d251  [key=0, style=solid];
d250 -> d264  [key=2, style=dotted];
d250 -> d268  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d250 -> d271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d250 -> d275  [color=darkseagreen4, key=1, label=countByStates, style=dashed];
d229 -> d227  [color=blue, key=0, style=bold];
d228 -> d229  [key=0, style=solid];
d232 -> d230  [color=blue, key=0, style=bold];
d231 -> d232  [key=0, style=solid];
d391 -> d279  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
d251 -> d252  [key=0, style=solid];
d251 -> d253  [color=darkseagreen4, key=1, label=getCountIfExists, style=dashed];
d251 -> d254  [color=darkseagreen4, key=1, label=getCountIfExists, style=dashed];
d251 -> d255  [color=darkseagreen4, key=1, label=getCountIfExists, style=dashed];
d251 -> d275  [color=darkseagreen4, key=1, label=string, style=dashed];
d304 -> d305  [key=0, style=solid];
d316 -> d317  [key=0, style=solid];
d319 -> d320  [key=0, style=solid];
d296 -> d295  [key=0, style=solid];
d296 -> d297  [key=0, style=solid];
d296 -> d277  [key=2, style=dotted];
d297 -> d295  [key=0, style=solid];
d297 -> d308  [key=2, style=dotted];
d301 -> d302  [key=0, style=solid];
d301 -> d310  [key=2, style=dotted];
d344 -> d345  [key=0, style=solid];
d326 -> d328  [color=darkseagreen4, key=1, label=startDate, style=dashed];
d326 -> d327  [key=0, style=solid];
d326 -> d346  [key=2, style=dotted];
d354 -> d355  [key=0, style=solid];
d357 -> d358  [key=0, style=solid];
d336 -> d335  [key=0, style=solid];
d336 -> d337  [key=0, style=solid];
d336 -> d277  [key=2, style=dotted];
d337 -> d335  [key=0, style=solid];
d337 -> d308  [key=2, style=dotted];
d341 -> d342  [key=0, style=solid];
d341 -> d310  [key=2, style=dotted];
d338 -> d344  [color=darkseagreen4, key=1, label=result, style=dashed];
d338 -> d339  [key=0, style=solid];
d338 -> d309  [key=2, style=dotted];
d338 -> d342  [color=darkseagreen4, key=1, label=result, style=dashed];
d287 -> d288  [key=0, style=solid];
d287 -> d291  [color=darkseagreen4, key=1, label=i, style=dashed];
d300 -> d304  [key=0, style=solid];
d300 -> d301  [key=0, style=solid];
d302 -> d303  [key=0, style=solid];
d302 -> d308  [key=2, style=dotted];
d291 -> d288  [key=0, style=solid];
d291 -> d291  [color=darkseagreen4, key=1, label=i, style=dashed];
d298 -> d304  [color=darkseagreen4, key=1, label=result, style=dashed];
d298 -> d302  [color=darkseagreen4, key=1, label=result, style=dashed];
d298 -> d299  [key=0, style=solid];
d298 -> d309  [key=2, style=dotted];
d342 -> d343  [key=0, style=solid];
d342 -> d308  [key=2, style=dotted];
d349 -> d347  [color=blue, key=0, style=bold];
d348 -> d314  [key=2, style=dotted];
d348 -> d349  [key=0, style=solid];
d339 -> d340  [key=0, style=solid];
d339 -> d341  [color=darkseagreen4, key=1, label=i, style=dashed];
d339 -> d342  [color=darkseagreen4, key=1, label=i, style=dashed];
d339 -> d343  [color=darkseagreen4, key=1, label=i, style=dashed];
d343 -> d340  [key=0, style=solid];
d343 -> d343  [color=darkseagreen4, key=1, label=i, style=dashed];
d55 -> d56  [key=0, style=solid];
d55 -> d57  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>", style=dashed];
d55 -> d59  [color=darkseagreen4, key=1, label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", style=dashed];
d61 -> d70  [key=2, style=dotted];
d61 -> d62  [key=0, style=solid];
d58 -> d59  [key=0, style=solid];
d58 -> d64  [key=2, style=dotted];
d65 -> d71  [key=0, style=solid];
d65 -> d72  [color=darkseagreen4, key=1, label=string, style=dashed];
d268 -> d269  [key=0, style=solid];
d271 -> d272  [key=0, style=solid];
d275 -> d276  [key=0, style=solid];
d275 -> d277  [key=2, style=dotted];
d318 -> d316  [color=blue, key=0, style=bold];
d317 -> d318  [key=0, style=solid];
d321 -> d319  [color=blue, key=0, style=bold];
d320 -> d321  [key=0, style=solid];
d299 -> d301  [color=darkseagreen4, key=1, label=i, style=dashed];
d299 -> d300  [key=0, style=solid];
d299 -> d302  [color=darkseagreen4, key=1, label=i, style=dashed];
d299 -> d303  [color=darkseagreen4, key=1, label=i, style=dashed];
d356 -> d354  [color=blue, key=0, style=bold];
d355 -> d356  [key=0, style=solid];
d359 -> d357  [color=blue, key=0, style=bold];
d358 -> d359  [key=0, style=solid];
d303 -> d300  [key=0, style=solid];
d303 -> d303  [color=darkseagreen4, key=1, label=i, style=dashed];
d62 -> d55  [color=blue, key=0, style=bold];
d76 -> d65  [color=blue, key=0, style=bold];
d71 -> d64  [key=2, style=dotted];
d71 -> d72  [key=0, style=solid];
d71 -> d73  [color=darkseagreen4, key=1, label=data, style=dashed];
d72 -> d73  [key=0, style=solid];
d270 -> d268  [color=blue, key=0, style=bold];
d269 -> d270  [key=0, style=solid];
d273 -> d271  [color=blue, key=0, style=bold];
d272 -> d273  [key=0, style=solid];
d390 -> d275  [color=darkseagreen4, key=1, label=countByStates, style=dashed];
d274 -> d275  [key=0, style=solid];
d276 -> d274  [color=blue, key=0, style=bold];
d73 -> d76  [key=0, style=solid];
d73 -> d77  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d74 -> d75  [key=0, style=solid];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_3 -> m0_4  [key=0, style=solid];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> d309  [key=2, style=dotted];
m0_4 -> m0_7  [key=2, style=dotted];
m0_5 -> m0_3  [color=blue, key=0, style=bold];
m0_8 -> m0_1  [color=darkseagreen4, key=1, label="HangFire.States.ProcessingState", style=dashed];
m0_8 -> m0_4  [color=darkseagreen4, key=1, label="HangFire.States.ProcessingState", style=dashed];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_10  [color=darkseagreen4, key=1, label="Hangfire.IBootstrapperConfiguration", style=dashed];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_12  [key=2, style=dotted];
m1_9 -> m1_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_3  [key=2, style=dotted];
m1_10 -> m1_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_11 -> m1_8  [color=blue, key=0, style=bold];
m1_44 -> m1_45  [key=0, style=solid];
m1_44 -> m1_48  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_3  [key=2, style=dotted];
m1_45 -> m1_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_44  [color=blue, key=0, style=bold];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [color=darkseagreen4, key=1, label="Hangfire.IBootstrapperConfiguration", style=dashed];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_12  [key=2, style=dotted];
m1_18 -> m1_22  [color=darkseagreen4, key=1, label=options, style=dashed];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_3  [key=2, style=dotted];
m1_19 -> m1_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_20 -> m1_17  [color=blue, key=0, style=bold];
m1_47 -> m1_48  [key=0, style=solid];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_7  [key=2, style=dotted];
m1_6 -> m1_4  [color=blue, key=0, style=bold];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_16  [key=2, style=dotted];
m1_13 -> m1_14  [key=0, style=solid];
m1_15 -> m1_13  [color=blue, key=0, style=bold];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_16  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_23 -> m1_21  [color=blue, key=0, style=bold];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_16  [key=2, style=dotted];
m1_28 -> m1_29  [key=0, style=solid];
m1_30 -> m1_28  [color=blue, key=0, style=bold];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_16  [key=2, style=dotted];
m1_34 -> m1_35  [key=0, style=solid];
m1_36 -> m1_34  [color=blue, key=0, style=bold];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_43  [key=2, style=dotted];
m1_41 -> m1_12  [key=2, style=dotted];
m1_40 -> m1_41  [key=0, style=solid];
m1_42 -> m1_40  [color=blue, key=0, style=bold];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_43  [key=2, style=dotted];
m1_49 -> m1_47  [color=blue, key=0, style=bold];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_26  [color=darkseagreen4, key=1, label="Hangfire.IBootstrapperConfiguration", style=dashed];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_12  [key=2, style=dotted];
m1_25 -> m1_29  [color=darkseagreen4, key=1, label=options, style=dashed];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_3  [key=2, style=dotted];
m1_26 -> m1_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_27 -> m1_24  [color=blue, key=0, style=bold];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_35  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_3  [key=2, style=dotted];
m1_32 -> m1_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_33 -> m1_31  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_41  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_3  [key=2, style=dotted];
m1_38 -> m1_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_39 -> m1_37  [color=blue, key=0, style=bold];
m1_50 -> m1_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m1_51 -> m1_22  [color=darkseagreen4, key=1, label=options, style=dashed];
m1_52 -> m1_29  [color=darkseagreen4, key=1, label=options, style=dashed];
m1_53 -> m1_35  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m1_54 -> m1_41  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m1_55 -> m1_48  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m1_56 -> m1_48  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=2, style=dotted];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m2_7 -> m2_10  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_12  [key=2, style=dotted];
m2_11 -> m2_7  [color=blue, key=0, style=bold];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_15  [color=darkseagreen4, key=1, label=IAppBuilder, style=dashed];
m2_12 -> m2_16  [color=darkseagreen4, key=1, label=IAppBuilder, style=dashed];
m2_12 -> m2_22  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_15  [key=0, style=solid];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_19  [key=2, style=dotted];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_20  [key=2, style=dotted];
m2_16 -> m2_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_14 -> m2_17  [key=0, style=solid];
m2_14 -> m2_18  [key=2, style=dotted];
m2_17 -> m2_12  [color=blue, key=0, style=bold];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_7  [key=2, style=dotted];
m2_6 -> m2_4  [color=blue, key=0, style=bold];
m2_3 -> m2_8  [key=0, style=solid];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_7  [key=2, style=dotted];
m2_9 -> m2_3  [color=blue, key=0, style=bold];
m2_21 -> m2_22  [key=0, style=solid];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> d31  [key=2, style=dotted];
m2_23 -> m2_21  [color=blue, key=0, style=bold];
m2_25 -> m2_22  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_26 -> m2_22  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<Hangfire.Dashboard.IAuthorizationFilter>", style=dashed];
m2_27 -> m2_22  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_2 -> m3_0  [color=blue, key=0, style=bold];
m3_3 -> m3_1  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m4_8 -> m4_9  [key=0, style=solid];
m4_9 -> m4_8  [color=blue, key=0, style=bold];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_0  [color=blue, key=0, style=bold];
m4_10 -> m4_11  [key=0, style=solid];
m4_11 -> m4_10  [color=blue, key=0, style=bold];
m4_4 -> m4_5  [key=0, style=solid];
m4_5 -> m4_4  [color=blue, key=0, style=bold];
m4_2 -> m4_3  [key=0, style=solid];
m4_3 -> m4_2  [color=blue, key=0, style=bold];
m4_12 -> m4_13  [key=0, style=solid];
m4_13 -> m4_12  [color=blue, key=0, style=bold];
m4_6 -> m4_7  [key=0, style=solid];
m4_7 -> m4_6  [color=blue, key=0, style=bold];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_0  [color=blue, key=0, style=bold];
m6_0 -> m6_1  [key=0, style=solid];
m6_0 -> m6_3  [color=darkseagreen4, key=1, label="System.Action<Hangfire.IBootstrapperConfiguration>", style=dashed];
m6_0 -> m6_6  [color=darkseagreen4, key=1, label="System.Action<Hangfire.IBootstrapperConfiguration>", style=dashed];
m6_0 -> m6_14  [color=darkseagreen4, key=1, label=IAppBuilder, style=dashed];
m6_0 -> m6_15  [color=darkseagreen4, key=1, label=IAppBuilder, style=dashed];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_3  [key=0, style=solid];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_5  [key=0, style=solid];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> m6_19  [key=2, style=dotted];
m6_14 -> m6_13  [key=0, style=solid];
m6_14 -> m6_21  [key=2, style=dotted];
m6_14 -> m6_22  [key=2, style=dotted];
m6_15 -> m6_16  [key=0, style=solid];
m6_15 -> m6_23  [key=2, style=dotted];
m6_2 -> m6_16  [key=0, style=solid];
m6_2 -> m6_17  [key=2, style=dotted];
m6_4 -> m6_16  [key=0, style=solid];
m6_4 -> m6_17  [key=2, style=dotted];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_18  [key=2, style=dotted];
m6_5 -> m6_7  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m6_5 -> m6_8  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m6_5 -> m6_9  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m6_5 -> m6_10  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m6_5 -> m6_11  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m6_5 -> m6_13  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m6_5 -> m6_15  [color=darkseagreen4, key=1, label=configuration, style=dashed];
m6_7 -> m6_8  [key=0, style=solid];
m6_7 -> m6_9  [key=0, style=solid];
m6_8 -> m6_9  [key=0, style=solid];
m6_9 -> m6_10  [key=0, style=solid];
m6_9 -> m6_11  [key=0, style=solid];
m6_10 -> m6_11  [key=0, style=solid];
m6_11 -> m6_12  [key=0, style=solid];
m6_11 -> m6_13  [key=0, style=solid];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_15  [key=0, style=solid];
m6_12 -> m6_11  [key=0, style=solid];
m6_12 -> m6_20  [key=2, style=dotted];
m6_16 -> m6_0  [color=blue, key=0, style=bold];
m7_16 -> m7_17  [key=0, style=solid];
m7_17 -> m7_18  [color=red, key=0, style=solid];
m7_17 -> m7_5  [key=2, style=dotted];
m7_17 -> m7_21  [color=red, key=1, label=options, style=dashed];
m7_18 -> m7_19  [color=red, key=0, style=solid];
m7_18 -> d31  [color=red, key=2, style=dotted];
m7_18 -> m7_20  [color=red, key=1, label="lambda expression", style=dashed];
m7_19 -> m7_16  [color=blue, key=0, style=bold];
m7_24 -> m7_25  [key=0, style=solid];
m7_25 -> m7_26  [key=0, style=solid];
m7_25 -> m7_5  [key=2, style=dotted];
m7_25 -> m7_27  [color=darkseagreen4, key=1, label=options, style=dashed];
m7_26 -> m7_27  [key=0, style=solid];
m7_26 -> m7_23  [key=2, style=dotted];
m7_27 -> m7_28  [key=0, style=solid];
m7_27 -> m7_23  [key=2, style=dotted];
m7_27 -> m7_29  [key=2, style=dotted];
m7_28 -> m7_24  [color=blue, key=0, style=bold];
m7_8 -> m7_9  [key=0, style=solid];
m7_9 -> m7_10  [key=0, style=solid];
m7_9 -> m7_5  [key=2, style=dotted];
m7_9 -> m7_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m7_10 -> m7_11  [key=0, style=solid];
m7_10 -> d31  [key=2, style=dotted];
m7_10 -> m7_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_11 -> m7_8  [color=blue, key=0, style=bold];
m7_20 -> m7_21  [color=red, key=0, style=solid];
m7_14 -> m7_15  [key=0, style=solid];
m7_13 -> m7_14  [key=0, style=solid];
m7_15 -> m7_13  [color=blue, key=0, style=bold];
m7_21 -> m7_22  [color=red, key=0, style=solid];
m7_21 -> m7_23  [color=red, key=2, style=dotted];
m7_22 -> m7_20  [color=blue, key=0, style=bold];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_5  [key=2, style=dotted];
m7_1 -> m7_3  [color=darkseagreen4, key=1, label=options, style=dashed];
m7_2 -> m7_3  [key=0, style=solid];
m7_2 -> m7_6  [key=2, style=dotted];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_7  [key=2, style=dotted];
m7_4 -> m7_0  [color=blue, key=0, style=bold];
m7_30 -> m7_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m7_31 -> m7_21  [color=red, key=1, label=options, style=dashed];
m8_34 -> m8_35  [key=0, style=solid];
m8_35 -> m8_36  [key=0, style=solid];
m8_36 -> m8_34  [color=blue, key=0, style=bold];
m8_31 -> m8_37  [key=0, style=solid];
m8_31 -> m8_39  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m8_31 -> m8_41  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m8_31 -> m8_43  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m8_31 -> m8_49  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_31 -> m8_53  [color=darkseagreen4, key=1, label="Hangfire.Storage.IStorageConnection", style=dashed];
m8_31 -> m8_55  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_31 -> m8_14  [color=darkorchid, key=3, label="Parameter variable Hangfire.Storage.IStorageConnection connection", style=bold];
m8_31 -> m8_17  [color=darkorchid, key=3, label="Parameter variable string recurringJobId", style=bold];
m8_31 -> m8_18  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.Dictionary<string, string> recurringJob", style=bold];
m8_37 -> m8_38  [key=0, style=solid];
m8_37 -> m8_57  [key=2, style=dotted];
m8_39 -> m8_40  [key=0, style=solid];
m8_41 -> m8_42  [color=red, key=0, style=solid];
m8_41 -> m8_60  [key=2, style=dotted];
m8_41 -> m8_61  [key=2, style=dotted];
m8_43 -> m8_44  [key=0, style=solid];
m8_43 -> m8_60  [key=2, style=dotted];
m8_43 -> m8_63  [key=2, style=dotted];
m8_43 -> m8_45  [color=darkseagreen4, key=1, label=lastExecutionTime, style=dashed];
m8_49 -> m8_50  [key=0, style=solid];
m8_49 -> m8_70  [key=2, style=dotted];
m8_53 -> m8_54  [key=0, style=solid];
m8_53 -> m8_56  [key=0, style=solid];
m8_53 -> m8_29  [key=2, style=dotted];
m8_53 -> m8_73  [key=2, style=dotted];
m8_55 -> m8_56  [key=0, style=solid];
m8_55 -> d315  [key=2, style=dotted];
m8_55 -> m8_75  [key=2, style=dotted];
m8_38 -> m8_39  [key=0, style=solid];
m8_38 -> m8_58  [key=2, style=dotted];
m8_38 -> m8_47  [color=red, key=1, label=job, style=dashed];
m8_47 -> m8_48  [color=red, key=0, style=solid];
m8_47 -> m8_68  [color=red, key=2, style=dotted];
m8_47 -> m8_51  [color=red, key=1, label=jobId, style=dashed];
m8_40 -> m8_41  [key=0, style=solid];
m8_40 -> m8_59  [key=2, style=dotted];
m8_40 -> m8_42  [color=red, key=1, label=cronSchedule, style=dashed];
m8_42 -> m8_43  [color=red, key=0, style=solid];
m8_42 -> m8_62  [color=red, key=2, style=dotted];
m8_42 -> m8_45  [color=red, key=1, label=instant, style=dashed];
m8_42 -> m8_49  [color=red, key=1, label=instant, style=dashed];
m8_42 -> m8_50  [color=red, key=1, label=instant, style=dashed];
m8_42 -> m8_52  [color=red, key=1, label=instant, style=dashed];
m8_45 -> m8_46  [key=0, style=solid];
m8_45 -> m8_52  [key=0, style=solid];
m8_45 -> m8_65  [key=2, style=dotted];
m8_45 -> m8_66  [key=2, style=dotted];
m8_50 -> m8_51  [key=0, style=solid];
m8_50 -> m8_71  [key=2, style=dotted];
m8_50 -> m8_72  [key=2, style=dotted];
m8_52 -> m8_53  [key=0, style=solid];
m8_52 -> m8_71  [key=2, style=dotted];
m8_52 -> m8_72  [key=2, style=dotted];
m8_44 -> m8_45  [key=0, style=solid];
m8_44 -> m8_64  [key=2, style=dotted];
m8_44 -> m8_50  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m8_44 -> m8_51  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m8_44 -> m8_52  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m8_44 -> m8_53  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m8_51 -> m8_52  [key=0, style=solid];
m8_51 -> m8_72  [key=2, style=dotted];
m8_46 -> m8_47  [color=red, key=0, style=solid];
m8_46 -> m8_67  [key=2, style=dotted];
m8_48 -> m8_49  [key=0, style=solid];
m8_48 -> m8_50  [key=0, style=solid];
m8_48 -> m8_69  [key=2, style=dotted];
m8_54 -> m8_55  [key=0, style=solid];
m8_56 -> m8_31  [color=blue, key=0, style=bold];
m8_12 -> m8_13  [key=0, style=solid];
m8_12 -> m8_14  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m8_12 -> m8_23  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m8_13 -> m8_14  [key=0, style=solid];
m8_13 -> m8_25  [key=2, style=dotted];
m8_14 -> m8_15  [key=0, style=solid];
m8_14 -> m8_26  [key=2, style=dotted];
m8_14 -> m8_16  [color=darkseagreen4, key=1, label=connection, style=dashed];
m8_14 -> m8_18  [color=darkseagreen4, key=1, label=connection, style=dashed];
m8_14 -> m8_20  [color=red, key=1, label=connection, style=dashed];
m8_23 -> m8_24  [key=0, style=solid];
m8_23 -> m8_33  [key=2, style=dotted];
m8_15 -> m8_16  [key=0, style=solid];
m8_15 -> m8_27  [key=2, style=dotted];
m8_16 -> m8_17  [key=0, style=solid];
m8_16 -> m8_28  [key=2, style=dotted];
m8_18 -> m8_19  [key=0, style=solid];
m8_18 -> m8_29  [key=2, style=dotted];
m8_18 -> m8_30  [key=2, style=dotted];
m8_18 -> m8_20  [color=red, key=1, label=recurringJob, style=dashed];
m8_20 -> m8_21  [color=red, key=0, style=solid];
m8_20 -> m8_17  [color=red, key=0, style=solid];
m8_20 -> m8_31  [color=red, key=2, style=dotted];
m8_17 -> m8_18  [key=0, style=solid];
m8_17 -> m8_23  [key=0, style=solid];
m8_17 -> m8_20  [color=red, key=1, label=recurringJobId, style=dashed];
m8_17 -> m8_22  [color=darkseagreen4, key=1, label=recurringJobId, style=dashed];
m8_22 -> m8_17  [key=0, style=solid];
m8_22 -> m8_29  [key=2, style=dotted];
m8_22 -> m8_32  [key=2, style=dotted];
m8_19 -> m8_20  [color=red, key=0, style=solid];
m8_19 -> m8_17  [key=0, style=solid];
m8_21 -> m8_22  [key=0, style=solid];
m8_24 -> m8_12  [color=blue, key=0, style=bold];
m8_0 -> m8_1  [color=red, key=0, style=solid];
m8_0 -> m8_3  [color=darkseagreen4, key=1, label="Hangfire.Server.IScheduleInstantFactory", style=dashed];
m8_0 -> m8_5  [color=darkseagreen4, key=1, label="Hangfire.Server.IThrottler", style=dashed];
m8_0 -> m8_7  [color=red, key=1, label="Hangfire.IBackgroundJobClient", style=dashed];
m8_0 -> m8_8  [color=darkseagreen4, key=1, label="Hangfire.Server.IScheduleInstantFactory", style=dashed];
m8_0 -> m8_9  [color=darkseagreen4, key=1, label="Hangfire.Server.IThrottler", style=dashed];
m8_1 -> m8_2  [color=red, key=0, style=solid];
m8_1 -> m8_3  [color=red, key=0, style=solid];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_5  [key=0, style=solid];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_7  [color=red, key=0, style=solid];
m8_7 -> m8_8  [color=red, key=0, style=solid];
m8_8 -> m8_9  [key=0, style=solid];
m8_9 -> m8_10  [key=0, style=solid];
m8_2 -> m8_10  [color=red, key=0, style=solid];
m8_2 -> m8_11  [color=red, key=2, style=dotted];
m8_4 -> m8_10  [key=0, style=solid];
m8_4 -> m8_11  [key=2, style=dotted];
m8_6 -> m8_10  [key=0, style=solid];
m8_6 -> m8_11  [key=2, style=dotted];
m8_10 -> m8_0  [color=blue, key=0, style=bold];
m8_76 -> m8_7  [color=red, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m8_76 -> m8_8  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m8_76 -> m8_9  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m8_76 -> m8_13  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m8_76 -> m8_20  [color=red, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m8_76 -> m8_23  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m8_76 -> m8_42  [color=red, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m8_76 -> m8_47  [color=red, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m10_45 -> m10_46  [key=0, style=solid];
m10_46 -> m10_47  [key=0, style=solid];
m10_46 -> m10_48  [key=2, style=dotted];
m10_47 -> m10_45  [color=blue, key=0, style=bold];
m10_0 -> m10_1  [color=red, key=0, style=solid];
m10_0 -> m10_2  [color=red, key=1, label="HangFire.JobActivator", style=dashed];
m10_0 -> m10_4  [color=red, key=1, label="HangFire.Server.JobPayload", style=dashed];
m10_0 -> m10_6  [color=red, key=1, label="HangFire.Server.JobPayload", style=dashed];
m10_0 -> m10_7  [color=red, key=1, label="HangFire.Server.JobPayload", style=dashed];
m10_0 -> m10_8  [color=red, key=1, label="HangFire.JobActivator", style=dashed];
m10_0 -> m10_10  [color=red, key=1, label="HangFire.JobActivator", style=dashed];
m10_0 -> m10_11  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m10_1 -> m10_2  [color=red, key=0, style=solid];
m10_2 -> m10_3  [color=red, key=0, style=solid];
m10_2 -> m10_4  [color=red, key=0, style=solid];
m10_4 -> m10_5  [color=red, key=0, style=solid];
m10_4 -> m10_6  [color=red, key=0, style=solid];
m10_6 -> m10_7  [color=red, key=0, style=solid];
m10_7 -> m10_8  [color=red, key=0, style=solid];
m10_7 -> m10_22  [color=red, key=2, style=dotted];
m10_7 -> m10_10  [color=red, key=1, label=type, style=dashed];
m10_8 -> m10_9  [color=red, key=0, style=solid];
m10_8 -> m10_23  [color=red, key=2, style=dotted];
m10_10 -> m10_20  [color=red, key=0, style=solid];
m10_10 -> m10_24  [color=red, key=2, style=dotted];
m10_10 -> m10_25  [color=red, key=2, style=dotted];
m10_10 -> d315  [color=red, key=2, style=dotted];
m10_11 -> m10_12  [key=0, style=solid];
m10_11 -> m10_27  [key=2, style=dotted];
m10_3 -> m10_20  [color=red, key=0, style=solid];
m10_3 -> m10_21  [color=red, key=2, style=dotted];
m10_5 -> m10_20  [color=red, key=0, style=solid];
m10_5 -> m10_21  [color=red, key=2, style=dotted];
m10_9 -> m10_10  [color=red, key=0, style=solid];
m10_9 -> m10_11  [color=red, key=0, style=solid];
m10_12 -> m10_13  [key=0, style=solid];
m10_12 -> m10_20  [key=0, style=solid];
m10_13 -> m10_14  [key=0, style=solid];
m10_13 -> m10_25  [key=2, style=dotted];
m10_13 -> m10_28  [key=2, style=dotted];
m10_13 -> m10_13  [color=darkseagreen4, key=1, label=arg, style=dashed];
m10_13 -> m10_15  [color=darkseagreen4, key=1, label=propertyInfo, style=dashed];
m10_13 -> m10_16  [color=darkseagreen4, key=1, label=arg, style=dashed];
m10_13 -> m10_17  [color=darkseagreen4, key=1, label=propertyInfo, style=dashed];
m10_13 -> m10_19  [color=darkseagreen4, key=1, label=propertyInfo, style=dashed];
m10_14 -> m10_15  [key=0, style=solid];
m10_14 -> m10_12  [key=0, style=solid];
m10_15 -> m10_16  [key=0, style=solid];
m10_15 -> m10_29  [key=2, style=dotted];
m10_16 -> m10_17  [key=0, style=solid];
m10_16 -> m10_30  [key=2, style=dotted];
m10_16 -> m10_16  [color=darkseagreen4, key=1, label=arg, style=dashed];
m10_17 -> m10_18  [key=0, style=solid];
m10_17 -> m10_12  [key=0, style=solid];
m10_17 -> m10_31  [key=2, style=dotted];
m10_19 -> m10_20  [key=0, style=solid];
m10_19 -> m10_32  [key=2, style=dotted];
m10_19 -> m10_25  [key=2, style=dotted];
m10_19 -> d315  [key=2, style=dotted];
m10_18 -> m10_19  [key=0, style=solid];
m10_20 -> m10_0  [color=blue, key=0, style=bold];
m10_39 -> m10_40  [key=0, style=solid];
m10_40 -> m10_41  [key=0, style=solid];
m10_40 -> m10_36  [key=2, style=dotted];
m10_40 -> m10_43  [key=2, style=dotted];
m10_41 -> m10_42  [key=0, style=solid];
m10_41 -> m10_44  [key=2, style=dotted];
m10_42 -> m10_39  [color=blue, key=0, style=bold];
m10_49 -> m10_50  [key=0, style=solid];
m10_50 -> m10_51  [key=0, style=solid];
m10_50 -> m10_52  [color=darkseagreen4, key=1, label=disposable, style=dashed];
m10_51 -> m10_52  [key=0, style=solid];
m10_51 -> m10_53  [key=0, style=solid];
m10_52 -> m10_53  [key=0, style=solid];
m10_52 -> m10_54  [key=2, style=dotted];
m10_53 -> m10_49  [color=blue, key=0, style=bold];
m10_55 -> m10_56  [key=0, style=solid];
m10_56 -> m10_57  [key=0, style=solid];
m10_56 -> m10_49  [key=2, style=dotted];
m10_57 -> m10_55  [color=blue, key=0, style=bold];
m10_34 -> m10_35  [key=0, style=solid];
m10_34 -> m10_36  [key=2, style=dotted];
m10_34 -> m10_37  [key=2, style=dotted];
m10_34 -> m10_38  [key=2, style=dotted];
m10_33 -> m10_34  [key=0, style=solid];
m10_35 -> m10_33  [color=blue, key=0, style=bold];
m10_58 -> m10_1  [color=red, key=1, label="HangFire.Server.ServerJobDescriptor", style=dashed];
m10_58 -> m10_6  [color=red, key=1, label="HangFire.Server.ServerJobDescriptor", style=dashed];
m10_58 -> m10_8  [color=red, key=1, label="HangFire.Server.ServerJobDescriptor", style=dashed];
m10_58 -> m10_9  [color=red, key=1, label="HangFire.Server.ServerJobDescriptor", style=dashed];
m10_58 -> m10_13  [color=darkseagreen4, key=1, label="HangFire.Server.ServerJobDescriptor", style=dashed];
m10_58 -> m10_17  [color=darkseagreen4, key=1, label="HangFire.Server.ServerJobDescriptor", style=dashed];
m10_58 -> m10_19  [color=darkseagreen4, key=1, label="HangFire.Server.ServerJobDescriptor", style=dashed];
m10_58 -> m10_34  [color=darkseagreen4, key=1, label="HangFire.Server.ServerJobDescriptor", style=dashed];
m10_58 -> m10_40  [color=darkseagreen4, key=1, label="HangFire.Server.ServerJobDescriptor", style=dashed];
m10_58 -> m10_46  [color=darkseagreen4, key=1, label="HangFire.Server.ServerJobDescriptor", style=dashed];
m10_58 -> m10_50  [color=darkseagreen4, key=1, label="HangFire.Server.ServerJobDescriptor", style=dashed];
m10_58 -> m10_56  [color=darkseagreen4, key=1, label="HangFire.Server.ServerJobDescriptor", style=dashed];
m11_0 -> m11_1  [key=0, style=solid];
m11_0 -> m11_3  [color=darkseagreen4, key=1, label="Hangfire.States.IStateMachineFactory", style=dashed];
m11_0 -> m11_4  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_3  [key=0, style=solid];
m11_3 -> m11_4  [key=0, style=solid];
m11_4 -> m11_5  [key=0, style=solid];
m11_2 -> m11_5  [key=0, style=solid];
m11_2 -> m11_6  [key=2, style=dotted];
m11_5 -> m11_0  [color=blue, key=0, style=bold];
m11_18 -> m11_19  [key=0, style=solid];
m11_19 -> m11_20  [key=0, style=solid];
m11_20 -> m11_18  [color=blue, key=0, style=bold];
m11_7 -> m11_8  [key=0, style=solid];
m11_7 -> m11_12  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m11_8 -> m11_9  [key=0, style=solid];
m11_8 -> m11_13  [key=0, style=solid];
m11_8 -> m11_15  [key=2, style=dotted];
m11_12 -> m11_14  [key=0, style=solid];
m11_12 -> m11_17  [key=2, style=dotted];
m11_9 -> m11_10  [key=0, style=solid];
m11_9 -> m11_12  [key=0, style=solid];
m11_13 -> m11_14  [key=0, style=solid];
m11_10 -> m11_11  [key=0, style=solid];
m11_10 -> m11_16  [key=2, style=dotted];
m11_11 -> m11_12  [key=0, style=solid];
m11_14 -> m11_7  [color=blue, key=0, style=bold];
m11_15 -> m11_21  [key=0, style=solid];
m11_15 -> m11_7  [color=darkorchid, key=3, label="Parameter variable Hangfire.Server.BackgroundProcessContext context", style=bold];
m11_15 -> m11_25  [color=darkorchid, key=3, label="method methodReturn bool EnqueueNextScheduledJob", style=bold];
m11_15 -> m11_29  [color=darkorchid, key=3, label="method methodReturn bool EnqueueNextScheduledJob", style=bold];
m11_15 -> m11_28  [color=green, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m11_21 -> m11_22  [key=0, style=solid];
m11_21 -> m11_31  [key=2, style=dotted];
m11_21 -> m11_23  [color=darkseagreen4, key=1, label=connection, style=dashed];
m11_21 -> m11_26  [color=red, key=1, label=connection, style=dashed];
m11_21 -> m11_28  [color=green, key=1, label=connection, style=dashed];
m11_22 -> m11_23  [key=0, style=solid];
m11_22 -> m11_32  [key=2, style=dotted];
m11_23 -> m11_24  [key=0, style=solid];
m11_23 -> m11_33  [key=2, style=dotted];
m11_23 -> m11_28  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m11_26 -> m11_27  [color=red, key=0, style=solid];
m11_26 -> m11_35  [color=red, key=2, style=dotted];
m11_26 -> m11_28  [color=red, key=1, label=stateMachine, style=dashed];
m11_24 -> m11_25  [key=0, style=solid];
m11_24 -> m11_26  [color=red, key=0, style=solid];
m11_24 -> m11_34  [key=2, style=dotted];
m11_24 -> m11_28  [color=green, key=0, style=solid];
m11_28 -> m11_29  [key=0, style=solid];
m11_28 -> m11_37  [key=2, style=dotted];
m11_28 -> m11_27  [color=green, key=0, style=solid];
m11_28 -> d265  [color=green, key=2, style=dotted];
m11_28 -> m11_35  [color=green, key=2, style=dotted];
m11_28 -> m11_28  [color=green, key=1, label=stateMachine, style=dashed];
m11_25 -> m11_30  [key=0, style=solid];
m11_27 -> m11_28  [key=0, style=solid];
m11_27 -> m11_36  [key=2, style=dotted];
m11_29 -> m11_30  [key=0, style=solid];
m11_30 -> m11_15  [color=blue, key=0, style=bold];
m11_38 -> m11_3  [color=darkseagreen4, key=1, label="Hangfire.Server.SchedulePoller", style=dashed];
m11_38 -> m11_4  [color=darkseagreen4, key=1, label="Hangfire.Server.SchedulePoller", style=dashed];
m11_38 -> m11_8  [color=darkseagreen4, key=1, label="Hangfire.Server.SchedulePoller", style=dashed];
m11_38 -> m11_9  [color=darkseagreen4, key=1, label="Hangfire.Server.SchedulePoller", style=dashed];
m11_38 -> m11_10  [color=darkseagreen4, key=1, label="Hangfire.Server.SchedulePoller", style=dashed];
m11_38 -> m11_11  [color=darkseagreen4, key=1, label="Hangfire.Server.SchedulePoller", style=dashed];
m11_38 -> m11_12  [color=darkseagreen4, key=1, label="Hangfire.Server.SchedulePoller", style=dashed];
m11_38 -> m11_13  [color=darkseagreen4, key=1, label="Hangfire.Server.SchedulePoller", style=dashed];
m11_38 -> m11_26  [color=red, key=1, label="Hangfire.Server.SchedulePoller", style=dashed];
m11_38 -> m11_28  [color=green, key=1, label="Hangfire.Server.SchedulePoller", style=dashed];
m13_18 -> m13_19  [key=0, style=solid];
m13_19 -> m13_20  [key=0, style=solid];
m13_19 -> m13_21  [key=2, style=dotted];
m13_20 -> m13_18  [color=blue, key=0, style=bold];
m13_3 -> m13_4  [key=0, style=solid];
m13_4 -> m13_5  [key=0, style=solid];
m13_4 -> m13_6  [key=2, style=dotted];
m13_5 -> m13_3  [color=blue, key=0, style=bold];
m13_6 -> m13_10  [key=0, style=solid];
m13_6 -> m13_11  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m13_10 -> m13_11  [key=0, style=solid];
m13_10 -> m13_13  [key=2, style=dotted];
m13_11 -> m13_12  [key=0, style=solid];
m13_11 -> m13_14  [key=2, style=dotted];
m13_12 -> m13_6  [color=blue, key=0, style=bold];
m13_22 -> m13_23  [key=0, style=solid];
m13_23 -> m13_24  [key=0, style=solid];
m13_23 -> m13_21  [key=2, style=dotted];
m13_24 -> m13_22  [color=blue, key=0, style=bold];
m13_0 -> m13_1  [key=0, style=solid];
m13_1 -> m13_2  [key=0, style=solid];
m13_1 -> m13_3  [key=2, style=dotted];
m13_2 -> m13_0  [color=blue, key=0, style=bold];
m13_7 -> m13_8  [key=0, style=solid];
m13_8 -> m13_9  [key=0, style=solid];
m13_8 -> m13_6  [key=2, style=dotted];
m13_9 -> m13_7  [color=blue, key=0, style=bold];
m13_21 -> m13_25  [key=0, style=solid];
m13_21 -> m13_26  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m13_25 -> m13_26  [key=0, style=solid];
m13_25 -> m13_13  [key=2, style=dotted];
m13_26 -> m13_27  [key=0, style=solid];
m13_26 -> m13_28  [key=2, style=dotted];
m13_27 -> m13_21  [color=blue, key=0, style=bold];
m13_15 -> m13_16  [key=0, style=solid];
m13_16 -> m13_17  [key=0, style=solid];
m13_16 -> m13_18  [key=2, style=dotted];
m13_17 -> m13_15  [color=blue, key=0, style=bold];
m14_12 -> m14_13  [key=0, style=solid];
m14_13 -> m14_14  [key=0, style=solid];
m14_13 -> m14_3  [key=2, style=dotted];
m14_13 -> m14_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m14_14 -> m14_12  [color=blue, key=0, style=bold];
m14_36 -> m14_37  [key=0, style=solid];
m14_36 -> m14_39  [color=darkseagreen4, key=1, label="System.Action<IRedisClient, HangFire.Redis.RedisConnection>", style=dashed];
m14_37 -> m14_38  [key=0, style=solid];
m14_37 -> m14_41  [key=2, style=dotted];
m14_37 -> m14_39  [color=darkseagreen4, key=1, label=redis, style=dashed];
m14_39 -> m14_40  [key=0, style=solid];
m14_39 -> m14_43  [key=2, style=dotted];
m14_38 -> m14_39  [key=0, style=solid];
m14_38 -> m14_42  [key=2, style=dotted];
m14_40 -> m14_36  [color=blue, key=0, style=bold];
m14_0 -> m14_1  [key=0, style=solid];
m14_1 -> m14_2  [key=0, style=solid];
m14_1 -> m14_3  [key=2, style=dotted];
m14_1 -> m14_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m14_2 -> m14_0  [color=blue, key=0, style=bold];
m14_44 -> m14_45  [key=0, style=solid];
m14_44 -> m14_46  [color=darkseagreen4, key=1, label="System.Action<HangFire.Redis.RedisConnection>", style=dashed];
m14_45 -> m14_46  [key=0, style=solid];
m14_45 -> m14_42  [key=2, style=dotted];
m14_45 -> m14_41  [key=2, style=dotted];
m14_46 -> m14_47  [key=0, style=solid];
m14_46 -> m14_48  [key=2, style=dotted];
m14_47 -> m14_44  [color=blue, key=0, style=bold];
m14_24 -> m14_25  [key=0, style=solid];
m14_24 -> m14_26  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m14_4 -> m14_5  [key=0, style=solid];
m14_4 -> m14_9  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m14_5 -> m14_6  [key=0, style=solid];
m14_5 -> m14_7  [key=2, style=dotted];
m14_5 -> m14_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m14_9 -> m14_10  [key=0, style=solid];
m14_9 -> m14_11  [key=2, style=dotted];
m14_6 -> m14_4  [color=blue, key=0, style=bold];
m14_8 -> m14_9  [key=0, style=solid];
m14_10 -> m14_8  [color=blue, key=0, style=bold];
m14_15 -> m14_16  [key=0, style=solid];
m14_16 -> m14_17  [key=0, style=solid];
m14_16 -> m14_11  [key=2, style=dotted];
m14_17 -> m14_18  [key=0, style=solid];
m14_17 -> m14_19  [key=2, style=dotted];
m14_18 -> m14_15  [color=blue, key=0, style=bold];
m14_25 -> m14_26  [key=0, style=solid];
m14_25 -> d309  [key=2, style=dotted];
m14_25 -> m14_33  [key=2, style=dotted];
m14_26 -> m14_27  [key=0, style=solid];
m14_26 -> m14_11  [key=2, style=dotted];
m14_26 -> m14_28  [color=darkseagreen4, key=1, label=result, style=dashed];
m14_26 -> m14_29  [color=darkseagreen4, key=1, label=result, style=dashed];
m14_26 -> m14_30  [color=darkseagreen4, key=1, label=result, style=dashed];
m14_27 -> m14_28  [key=0, style=solid];
m14_27 -> m14_34  [key=2, style=dotted];
m14_28 -> m14_29  [key=0, style=solid];
m14_28 -> m14_35  [key=2, style=dotted];
m14_29 -> m14_30  [key=0, style=solid];
m14_29 -> m14_35  [key=2, style=dotted];
m14_30 -> m14_31  [key=0, style=solid];
m14_30 -> m14_35  [key=2, style=dotted];
m14_31 -> m14_24  [color=blue, key=0, style=bold];
m14_20 -> m14_21  [key=0, style=solid];
m14_21 -> m14_22  [key=0, style=solid];
m14_21 -> m14_23  [key=2, style=dotted];
m14_21 -> m14_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m14_22 -> m14_20  [color=blue, key=0, style=bold];
m14_49 -> m14_1  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m14_49 -> m14_13  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m14_49 -> m14_21  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m14_50 -> m14_9  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
}
