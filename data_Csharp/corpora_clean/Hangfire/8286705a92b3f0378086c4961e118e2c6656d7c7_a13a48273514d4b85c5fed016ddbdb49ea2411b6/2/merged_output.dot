digraph  {
n12 [label="Hangfire.Server.BackgroundProcessContext", span=""];
n0 [cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", label="Entry Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", span="25-25"];
n1 [cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", label="serverId == null", span="30-30"];
n3 [cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", label="storage == null", span="31-31"];
n6 [cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", label="ServerId = serverId", span="35-35"];
n7 [cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", label="Storage = storage", span="36-36"];
n8 [cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", label="CancellationToken = cancellationToken", span="37-37"];
n2 [cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", label="throw new ArgumentNullException(''serverId'');", span="30-30"];
n4 [cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", label="throw new ArgumentNullException(''storage'');", span="31-31"];
n5 [cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", color=red, community=0, label="0: Properties = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase)", span="33-33"];
n11 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IEqualityComparer<TKey>)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
n9 [cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", label="Exit Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", span="25-25"];
n10 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
d7 [cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", color=green, community=0, label="0: factory == null", span="49-49"];
d4 [cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", label="Entry Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", span="46-46"];
d5 [cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", label="storage == null", span="48-48"];
d8 [cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", color=green, community=0, label="0: throw new ArgumentNullException(nameof(factory));", span="49-49"];
d9 [cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", label="_storage = storage", span="51-51"];
d11 [cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", label="Exit Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", span="46-46"];
d12 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
d13 [cluster="Unk.nameof", label="Entry Unk.nameof", span=""];
d6 [cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", label="throw new ArgumentNullException(nameof(storage));", span="48-48"];
d10 [cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", label="_factory = factory", span="52-52"];
d90 [label="Hangfire.RecurringJobManager", span=""];
d16 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="throw new ArgumentNullException(nameof(recurringJobId));", span="57-57"];
d18 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="throw new ArgumentNullException(nameof(job));", span="58-58"];
d20 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="throw new ArgumentNullException(nameof(cronExpression));", span="59-59"];
d22 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="throw new ArgumentNullException(nameof(options));", span="60-60"];
d52 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="throw new ArgumentNullException(nameof(recurringJobId));", span="95-95"];
d73 [cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", label="throw new ArgumentNullException(nameof(recurringJobId));", span="121-121"];
d85 [cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)", label="throw new ArgumentException(''CRON expression is invalid. Please see the inner exception for details.'', nameof(cronExpression), ex);", span="142-142"];
d24 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="var connection = _storage.GetConnection()", span="64-64"];
d53 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="var connection = _storage.GetConnection()", span="97-97"];
d61 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="var context = new CreateContext(_storage, connection, job, state)", span="113-113"];
d63 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="_factory.Create(context)", span="115-115"];
d74 [cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", label="var connection = _storage.GetConnection()", span="123-123"];
d14 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="Entry Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", span="55-55"];
d15 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="recurringJobId == null", span="57-57"];
d38 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="Exit Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", span="55-55"];
d17 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="job == null", span="58-58"];
d19 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="cronExpression == null", span="59-59"];
d21 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="options == null", span="60-60"];
d50 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="Entry Hangfire.RecurringJobManager.Trigger(string)", span="93-93"];
d51 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="recurringJobId == null", span="95-95"];
d64 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="Exit Hangfire.RecurringJobManager.Trigger(string)", span="93-93"];
d71 [cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", label="Entry Hangfire.RecurringJobManager.RemoveIfExists(string)", span="119-119"];
d72 [cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", label="recurringJobId == null", span="121-121"];
d79 [cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", label="Exit Hangfire.RecurringJobManager.RemoveIfExists(string)", span="119-119"];
d39 [cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)", label="Entry Hangfire.RecurringJobManager.ValidateCronExpression(string)", span="133-133"];
d84 [cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)", label=Exception, span="140-140"];
d86 [cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)", label="Exit Hangfire.RecurringJobManager.ValidateCronExpression(string)", span="133-133"];
d89 [cluster="System.ArgumentException.ArgumentException(string, string, System.Exception)", label="Entry System.ArgumentException.ArgumentException(string, string, System.Exception)", span="0-0"];
d23 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="ValidateCronExpression(cronExpression)", span="62-62"];
d25 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="var recurringJob = new Dictionary<string, string>()", span="66-66"];
d40 [cluster="Hangfire.JobStorage.GetConnection()", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
d31 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="var existingJob = connection.GetAllEntriesFromHash($''recurring-job:{recurringJobId}'')", span="74-74"];
d34 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="var transaction = connection.CreateWriteTransaction()", span="80-80"];
d54 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="var hash = connection.GetAllEntriesFromHash($''recurring-job:{recurringJobId}'')", span="99-99"];
d57 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="var job = JobHelper.FromJson<InvocationData>(hash[''Job'']).Deserialize()", span="105-105"];
d59 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="hash.ContainsKey(''Queue'')", span="108-108"];
d60 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="state.Queue = hash[''Queue'']", span="110-110"];
d58 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="var state = new EnqueuedState { Reason = ''Triggered using recurring job manager'' }", span="106-106"];
d62 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="context.Parameters[''RecurringJobId''] = recurringJobId", span="114-114"];
d69 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="37-37"];
d70 [cluster="Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", label="Entry Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", span="31-31"];
d75 [cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", label="var transaction = connection.CreateWriteTransaction()", span="124-124"];
d26 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="var invocationData = InvocationData.Serialize(job)", span="67-67"];
d28 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="recurringJob[''Cron''] = cronExpression", span="70-70"];
d29 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="recurringJob[''TimeZoneId''] = options.TimeZone.Id", span="71-71"];
d30 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="recurringJob[''Queue''] = options.QueueName", span="72-72"];
d35 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="transaction.SetRangeInHash(\r\n                        $''recurring-job:{recurringJobId}'',\r\n                        recurringJob)", span="82-84"];
d36 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="transaction.AddToSet(''recurring-jobs'', recurringJobId)", span="86-86"];
d37 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="transaction.Commit()", span="88-88"];
d56 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="return;", span="102-102"];
d76 [cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", label="transaction.RemoveHash($''recurring-job:{recurringJobId}'')", span="126-126"];
d77 [cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", label="transaction.RemoveFromSet(''recurring-jobs'', recurringJobId)", span="127-127"];
d78 [cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", label="transaction.Commit()", span="129-129"];
d82 [cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)", label="var schedule = CrontabSchedule.Parse(cronExpression)", span="137-137"];
d83 [cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)", label="schedule.GetNextOccurrence(DateTime.UtcNow)", span="138-138"];
d41 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
d27 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="recurringJob[''Job''] = JobHelper.ToJson(invocationData)", span="69-69"];
d33 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="recurringJob[''CreatedAt''] = JobHelper.SerializeDateTime(DateTime.UtcNow)", span="77-77"];
d32 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="existingJob == null", span="75-75"];
d44 [cluster="Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", label="Entry Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64"];
d46 [cluster="Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", label="Entry Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27"];
d55 [cluster="Hangfire.RecurringJobManager.Trigger(string)", label="hash == null", span="100-100"];
d65 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
d66 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="44-44"];
d68 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
d67 [cluster="Hangfire.States.EnqueuedState.EnqueuedState()", label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="87-87"];
d42 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="69-69"];
d47 [cluster="Hangfire.Storage.IWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", label="Entry Hangfire.Storage.IWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="51-51"];
d48 [cluster="Hangfire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", label="Entry Hangfire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", span="41-41"];
d49 [cluster="Hangfire.Storage.IWriteOnlyTransaction.Commit()", label="Entry Hangfire.Storage.IWriteOnlyTransaction.Commit()", span="54-54"];
d80 [cluster="Hangfire.Storage.IWriteOnlyTransaction.RemoveHash(string)", label="Entry Hangfire.Storage.IWriteOnlyTransaction.RemoveHash(string)", span="52-52"];
d81 [cluster="Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", label="Entry Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="43-43"];
d87 [cluster="NCrontab.CrontabSchedule.Parse(string)", label="Entry NCrontab.CrontabSchedule.Parse(string)", span="93-93"];
d88 [cluster="NCrontab.CrontabSchedule.GetNextOccurrence(System.DateTime)", label="Entry NCrontab.CrontabSchedule.GetNextOccurrence(System.DateTime)", span="193-193"];
d43 [cluster="Hangfire.Common.JobHelper.ToJson(object)", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
d45 [cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68"];
m0_31 [cluster="lambda expression", color=green, community=0, file="BackgroundProcessContextFacts.cs", label="0: new BackgroundProcessContext(_serverId, _storage.Object, null, _cts.Token)", span="46-46"];
m0_40 [cluster="Unk.SequenceEqual", file="BackgroundProcessContextFacts.cs", label="Entry Unk.SequenceEqual", span=""];
m0_24 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", file="BackgroundProcessContextFacts.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", span="39-39"];
m0_25 [cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Threading.CancellationToken)", color=red, community=0, file="BackgroundProcessContextFacts.cs", label="0: Entry Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Threading.CancellationToken)", span="25-25"];
m0_26 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", file="BackgroundProcessContextFacts.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", span="43-43"];
m0_27 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", color=green, community=1, file="BackgroundProcessContextFacts.cs", label="0: var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundProcessContext(_serverId, _storage.Object, null, _cts.Token))", span="45-46"];
m0_28 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", color=green, community=0, file="BackgroundProcessContextFacts.cs", label="0: Assert.Equal(''properties'', exception.ParamName)", span="48-48"];
m0_29 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", file="BackgroundProcessContextFacts.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", span="43-43"];
m0_34 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", color=green, community=0, file="BackgroundProcessContextFacts.cs", label="0: var context = new BackgroundProcessContext(_serverId, _storage.Object, _properties, _cts.Token)", span="54-54"];
m0_36 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", color=green, community=0, file="BackgroundProcessContextFacts.cs", label="0: Assert.True(_properties.SequenceEqual(context.Properties))", span="57-57"];
m0_30 [cluster="lambda expression", file="BackgroundProcessContextFacts.cs", label="Entry lambda expression", span="46-46"];
m0_10 [cluster="Unk.>", file="BackgroundProcessContextFacts.cs", label="Entry Unk.>", span=""];
m0_16 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundProcessContextFacts.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="30-30"];
m0_17 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=red, community=0, file="BackgroundProcessContextFacts.cs", label="0: var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundProcessContext(_serverId, null, _cts.Token))", span="32-33"];
m0_18 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundProcessContextFacts.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="35-35"];
m0_19 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="BackgroundProcessContextFacts.cs", label="0: Exit Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="30-30"];
m0_23 [cluster="lambda expression", color=green, community=0, file="BackgroundProcessContextFacts.cs", label="0: new BackgroundProcessContext(_serverId, null, _properties, _cts.Token)", span="37-37"];
m0_32 [cluster="lambda expression", file="BackgroundProcessContextFacts.cs", label="Exit lambda expression", span="46-46"];
m0_41 [cluster="Unk.True", file="BackgroundProcessContextFacts.cs", label="Entry Unk.True", span=""];
m0_0 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", file="BackgroundProcessContextFacts.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", span="14-14"];
m0_1 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", file="BackgroundProcessContextFacts.cs", label="_storage = new Mock<JobStorage>()", span="19-19"];
m0_2 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", color=green, community=0, file="BackgroundProcessContextFacts.cs", label="1: _properties = new Dictionary<string, object> {{''key'', ''value''}}", span="20-20"];
m0_3 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", file="BackgroundProcessContextFacts.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", span="14-14"];
m0_11 [cluster="Unk.Equal", file="BackgroundProcessContextFacts.cs", label="Entry Unk.Equal", span=""];
m0_15 [cluster="lambda expression", color=green, community=0, file="BackgroundProcessContextFacts.cs", label="0: new BackgroundProcessContext(null, _storage.Object, _properties, _cts.Token)", span="28-28"];
m0_5 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="BackgroundProcessContextFacts.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m0_4 [cluster="Mock<JobStorage>.cstr", file="BackgroundProcessContextFacts.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m0_12 [cluster="lambda expression", file="BackgroundProcessContextFacts.cs", label="Entry lambda expression", span="24-24"];
m0_13 [cluster="lambda expression", color=red, community=0, file="BackgroundProcessContextFacts.cs", label="0: new BackgroundProcessContext(null, _storage.Object, _cts.Token)", span="24-24"];
m0_14 [cluster="lambda expression", file="BackgroundProcessContextFacts.cs", label="Exit lambda expression", span="24-24"];
m0_20 [cluster="lambda expression", file="BackgroundProcessContextFacts.cs", label="Entry lambda expression", span="33-33"];
m0_21 [cluster="lambda expression", color=red, community=0, file="BackgroundProcessContextFacts.cs", label="0: new BackgroundProcessContext(_serverId, null, _cts.Token)", span="33-33"];
m0_22 [cluster="lambda expression", file="BackgroundProcessContextFacts.cs", label="Exit lambda expression", span="33-33"];
m0_6 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="BackgroundProcessContextFacts.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", span="21-21"];
m0_7 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", color=red, community=0, file="BackgroundProcessContextFacts.cs", label="0: var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundProcessContext(null, _storage.Object, _cts.Token))", span="23-24"];
m0_8 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="BackgroundProcessContextFacts.cs", label="Assert.Equal(''serverId'', exception.ParamName)", span="26-26"];
m0_9 [cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", color=green, community=0, file="BackgroundProcessContextFacts.cs", label="0: Exit Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", span="21-21"];
m0_33 [file="BackgroundProcessContextFacts.cs", label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", span=""];
m1_23 [cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", file="BackgroundProcessContextMock.cs", label="Entry HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", span="43-43"];
m1_24 [cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", file="BackgroundProcessContextMock.cs", label="new JobClient(_connectionMock.Object, null)", span="46-46"];
m1_25 [cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", file="BackgroundProcessContextMock.cs", label="Exit HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", span="43-43"];
m1_36 [cluster="HangFire.Client.JobClient.CreateJob(HangFire.Common.JobMethod, string[], HangFire.Common.States.JobState)", file="BackgroundProcessContextMock.cs", label="Entry HangFire.Client.JobClient.CreateJob(HangFire.Common.JobMethod, string[], HangFire.Common.States.JobState)", span="75-75"];
m1_15 [cluster="HangFire.Common.JobMethod.JobMethod(System.Type, System.Reflection.MethodInfo)", file="BackgroundProcessContextMock.cs", label="Entry HangFire.Common.JobMethod.JobMethod(System.Type, System.Reflection.MethodInfo)", span="48-48"];
m1_9 [cluster="Unk.Setup", file="BackgroundProcessContextMock.cs", label="Entry Unk.Setup", span=""];
m1_13 [cluster="JobClient.cstr", file="BackgroundProcessContextMock.cs", label="Entry JobClient.cstr", span=""];
m1_16 [cluster="System.Type.GetMethod(string)", file="BackgroundProcessContextMock.cs", label="Entry System.Type.GetMethod(string)", span="0-0"];
m1_37 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", file="BackgroundProcessContextMock.cs", label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", span="72-72"];
m1_38 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", file="BackgroundProcessContextMock.cs", label="_client.CreateJob(_method, new[] { ''hello'', ''3'' }, _stateMock.Object)", span="74-74"];
m1_39 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", file="BackgroundProcessContextMock.cs", label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", span="72-72"];
m1_11 [cluster="Unk.Returns", file="BackgroundProcessContextMock.cs", label="Entry Unk.Returns", span=""];
m1_8 [cluster="Mock<IStorageConnection>.cstr", file="BackgroundProcessContextMock.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m1_29 [cluster="Unk.CreateJob", file="BackgroundProcessContextMock.cs", label="Entry Unk.CreateJob", span=""];
m1_20 [cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", file="BackgroundProcessContextMock.cs", label="Entry HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", span="34-34"];
m1_21 [cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", file="BackgroundProcessContextMock.cs", label="new JobClient(null, _creatorMock.Object)", span="37-37"];
m1_22 [cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", file="BackgroundProcessContextMock.cs", label="Exit HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", span="34-34"];
m1_30 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", file="BackgroundProcessContextMock.cs", label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", span="59-59"];
m1_31 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", file="BackgroundProcessContextMock.cs", label="_client.CreateJob(_method, null, _stateMock.Object)", span="61-61"];
m1_32 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", file="BackgroundProcessContextMock.cs", label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", span="59-59"];
m1_0 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs", label="Entry HangFire.Tests.Client.JobClientTests.Initialize()", span="21-21"];
m1_4 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", color=green, community=0, file="BackgroundProcessContextMock.cs", label="0: _client = new JobClient(_connectionMock.Object, _creatorMock.Object)", span="27-27"];
m1_3 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs", label="_creatorMock = new Mock<JobCreator>()", span="26-26"];
m1_5 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs", label="_stateMock = new Mock<JobState>()", span="28-28"];
m1_1 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs", label="_connectionMock = new Mock<IStorageConnection>()", span="23-23"];
m1_2 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs", label="_connectionMock.Setup(x => x.Storage).Returns(new Mock<JobStorage>().Object)", span="24-24"];
m1_6 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs", label="_method = new JobMethod(typeof(JobClientTests), typeof(JobClientTests).GetMethod(''Method''))", span="29-29"];
m1_7 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs", label="Exit HangFire.Tests.Client.JobClientTests.Initialize()", span="21-21"];
m1_33 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", file="BackgroundProcessContextMock.cs", label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", span="66-66"];
m1_34 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", file="BackgroundProcessContextMock.cs", label="_client.CreateJob(_method, new string[0], null)", span="68-68"];
m1_35 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", file="BackgroundProcessContextMock.cs", label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", span="66-66"];
m1_17 [cluster="lambda expression", file="BackgroundProcessContextMock.cs", label="Entry lambda expression", span="24-24"];
m1_18 [cluster="lambda expression", file="BackgroundProcessContextMock.cs", label="x.Storage", span="24-24"];
m1_19 [cluster="lambda expression", file="BackgroundProcessContextMock.cs", label="Exit lambda expression", span="24-24"];
m1_14 [cluster="Mock<JobState>.cstr", file="BackgroundProcessContextMock.cs", label="Entry Mock<JobState>.cstr", span=""];
m1_12 [cluster="Mock<JobCreator>.cstr", file="BackgroundProcessContextMock.cs", label="Entry Mock<JobCreator>.cstr", span=""];
m1_10 [cluster="Mock<JobStorage>.cstr", file="BackgroundProcessContextMock.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m1_26 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", file="BackgroundProcessContextMock.cs", label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", span="52-52"];
m1_27 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", file="BackgroundProcessContextMock.cs", label="_client.CreateJob(null, new string[0], _stateMock.Object)", span="54-54"];
m1_28 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", file="BackgroundProcessContextMock.cs", label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", span="52-52"];
m1_47 [file="BackgroundProcessContextMock.cs", label="HangFire.Tests.Client.JobClientTests", span=""];
m3_0 [cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs", label="Entry Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", span="23-23"];
m3_1 [cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs", label="innerProcess == null", span="25-25"];
m3_3 [cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs", label="InnerProcess = innerProcess", span="26-26"];
m3_2 [cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs", label="throw new ArgumentNullException(''innerProcess'');", span="25-25"];
m3_4 [cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs", label="Exit Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", span="23-23"];
m3_13 [cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopProcess.cs", label="Entry Hangfire.Server.InfiniteLoopProcess.ToString()", span="40-40"];
m3_14 [cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopProcess.cs", label="return InnerProcess.ToString();", span="42-42"];
m3_15 [cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopProcess.cs", label="Exit Hangfire.Server.InfiniteLoopProcess.ToString()", span="40-40"];
m3_6 [cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs", label="Entry Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="31-31"];
m3_7 [cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="InfiniteLoopProcess.cs", label="0: true", span="33-33"];
m3_8 [cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", color=red, community=0, file="InfiniteLoopProcess.cs", label="1: context.CancellationToken.ThrowIfCancellationRequested()", span="35-35"];
m3_9 [cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs", label="InnerProcess.Execute(context)", span="36-36"];
m3_10 [cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs", label="Exit Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="31-31"];
m3_12 [cluster="Hangfire.Server.IServerProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs", label="Entry Hangfire.Server.IServerProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="26-26"];
m3_16 [cluster="object.ToString()", file="InfiniteLoopProcess.cs", label="Entry object.ToString()", span="0-0"];
m3_11 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="InfiniteLoopProcess.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m3_17 [file="InfiniteLoopProcess.cs", label="Hangfire.Server.InfiniteLoopProcess", span=""];
m4_31 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Exit lambda expression", span="42-42"];
m4_67 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheServerComponentRunner()", file="RecurringJobScheduler.cs", label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheServerComponentRunner()", span="80-80"];
m4_82 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", file="RecurringJobScheduler.cs", label="_serverMock.Object.Dispose()", span="98-98"];
m4_30 [cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs", label="0: new BackgroundJobServer(WorkerCount, null, _storage.Object)", span="42-42"];
m4_98 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs", label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", span="115-115"];
m4_99 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs", label="var server = CreateServer()", span="118-118"];
m4_102 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs", label="var componentTypes = runners.OfType<ServerComponentRunner>()\r\n                .Select(x => x.Component)\r\n                .Select(x => x.GetType())\r\n                .ToArray()", span="126-129"];
m4_101 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs", label="Assert.True(runners.Select(x => x.GetType()).Contains(typeof(WorkerManager)))", span="124-124"];
m4_100 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs", label="var runners = server.GetServerComponentsRunner()", span="121-121"];
m4_103 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs", label="Assert.Contains(typeof(ServerHeartbeat), componentTypes)", span="131-131"];
m4_104 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs", label="Assert.Contains(typeof(ServerWatchdog), componentTypes)", span="132-132"];
m4_105 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs", label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", span="115-115"];
m4_84 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", file="RecurringJobScheduler.cs", label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", span="96-96"];
m4_38 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Exit lambda expression", span="51-51"];
m4_39 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobScheduler.cs", label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="57-57"];
m4_40 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="RecurringJobScheduler.cs", label="1: var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobServer(WorkerCount, Queues, null))", span="59-60"];
m4_76 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheServerComponentRunner()", file="RecurringJobScheduler.cs", label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheServerComponentRunner()", span="88-88"];
m4_46 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var timeZone = recurringJob.ContainsKey(''TimeZoneId'')\r\n                    ? TimeZoneInfo.FindSystemTimeZoneById(recurringJob[''TimeZoneId''])\r\n                    : TimeZoneInfo.Utc", span="117-119"];
m4_20 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="var recurringJobIds = connection.GetAllItemsFromSet(''recurring-jobs'')", span="69-69"];
m4_95 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", file="RecurringJobScheduler.cs", label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", span="155-155"];
m4_139 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", file="RecurringJobScheduler.cs", label="return new BackgroundJobServer(WorkerCount, Queues, _storage.Object);", span="157-157"];
m4_140 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", file="RecurringJobScheduler.cs", label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", span="155-155"];
m4_25 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label=JobLoadException, span="85-85"];
m4_26 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: Logger.WarnException(\r\n                            String.Format(\r\n                                ''Recurring job '{0}' can not be scheduled due to job load exception.'',\r\n                                recurringJobId),\r\n                            ex)", span="87-91"];
m4_27 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: _throttler.Delay(context.CancellationToken)", span="95-95"];
m4_28 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="62-62"];
m4_71 [cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs", label="0: x.Start()", span="84-84"];
m4_77 [cluster="string.IsNullOrEmpty(string)", file="RecurringJobScheduler.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m4_74 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheServerComponentRunner()", file="RecurringJobScheduler.cs", label="_serverMock.Object.Stop()", span="90-90"];
m4_83 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", file="RecurringJobScheduler.cs", label="_runner.Verify(x => x.Dispose())", span="100-100"];
m4_115 [cluster="object.GetType()", file="RecurringJobScheduler.cs", label="Entry object.GetType()", span="0-0"];
m4_41 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="RecurringJobScheduler.cs", label="0: Assert.Equal(''storage'', exception.ParamName)", span="62-62"];
m4_73 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m4_75 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="RecurringJobScheduler.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m4_33 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsEmpty()", color=green, community=0, file="RecurringJobScheduler.cs", label="0: var exception = Assert.Throws<ArgumentException>(\r\n                () => new BackgroundJobServer(WorkerCount, new string[0], _storage.Object))", span="50-51"];
m4_51 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var state = new EnqueuedState { Reason = ''Triggered by recurring job scheduler'' }", span="131-131"];
m4_81 [cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68"];
m4_7 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="instantFactory == null", span="54-54"];
m4_69 [cluster="Unk.Verify", file="RecurringJobScheduler.cs", label="Entry Unk.Verify", span=""];
m4_0 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="RecurringJobScheduler.cs", label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", span="17-17"];
m4_1 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="RecurringJobScheduler.cs", label="_storage = new Mock<JobStorage>()", span="19-19"];
m4_19 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="connection.AcquireDistributedLock(''recurring-jobs:lock'', LockTimeout)", span="67-67"];
m4_36 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Entry lambda expression", span="51-51"];
m4_15 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenWorkerCountIsEqualToZeroOrNegative()", file="RecurringJobScheduler.cs", label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenWorkerCountIsEqualToZeroOrNegative()", span="30-30"];
m4_16 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RecurringJobScheduler.cs", label="1: Entry Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="62-62"];
m4_17 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: _throttler.Throttle(context.CancellationToken)", span="64-64"];
m4_18 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs", label="var connection = context.Storage.GetConnection()", span="66-66"];
m4_123 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs", label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", span="136-136"];
m4_128 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", color=green, community=0, file="RecurringJobScheduler.cs", label="1: var components = runners.OfType<ServerComponentRunner>()\r\n                .Select(x => x.Component)\r\n                .ToArray()", span="148-150"];
m4_127 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs", label="var runners = server.GetServerComponentsRunner()", span="145-145"];
m4_129 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs", label="Assert.Contains(storageComponent.Object, components)", span="152-152"];
m4_125 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs", label="_storage.Setup(x => x.GetComponents()).Returns(new[] { storageComponent.Object })", span="140-140"];
m4_126 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs", label="var server = CreateServer()", span="142-142"];
m4_124 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs", label="var storageComponent = new Mock<IServerComponent>()", span="139-139"];
m4_130 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs", label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", span="136-136"];
m4_70 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Entry lambda expression", span="84-84"];
m4_32 [cluster="Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55"];
m4_34 [cluster="Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: Entry Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64"];
m4_35 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", span="104-104"];
m4_47 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var instant = _instantFactory(cronSchedule, timeZone)", span="121-121"];
m4_48 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var lastExecutionTime = recurringJob.ContainsKey(''LastExecution'')\r\n                    ? JobHelper.DeserializeDateTime(recurringJob[''LastExecution''])\r\n                    : (DateTime?)null", span="123-125"];
m4_49 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var changedFields = new Dictionary<string, string>()", span="127-127"];
m4_50 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="instant.GetNextInstants(lastExecutionTime).Any()", span="129-129"];
m4_2 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", span="43-43"];
m4_3 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", span="43-43"];
m4_4 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="48-48"];
m4_5 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="factory == null", span="53-53"];
m4_135 [cluster="Unk.GetComponents", file="RecurringJobScheduler.cs", label="Entry Unk.GetComponents", span=""];
m4_55 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=red, community=0, file="RecurringJobScheduler.cs", label="0: var backgroundJob = _factory.Create(context)", span="138-138"];
m4_78 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Entry lambda expression", span="92-92"];
m4_63 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label=TimeZoneNotFoundException, span="159-159"];
m4_56 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var jobId = backgroundJob != null ? backgroundJob.Id : null", span="139-139"];
m4_57 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: String.IsNullOrEmpty(jobId)", span="141-141"];
m4_58 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: Logger.DebugFormat(\r\n                            ''Recurring job '{0}' execution at '{1}' has been canceled.'',\r\n                            recurringJobId,\r\n                            instant.NowInstant)", span="143-146"];
m4_59 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="changedFields.Add(''LastExecution'', JobHelper.SerializeDateTime(instant.NowInstant))", span="149-149"];
m4_68 [cluster="Unk.Start", file="RecurringJobScheduler.cs", label="Entry Unk.Start", span=""];
m4_29 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Entry lambda expression", span="42-42"];
m4_111 [cluster="Unk.ToArray", file="RecurringJobScheduler.cs", label="Entry Unk.ToArray", span=""];
m4_89 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="RecurringJobScheduler.cs", label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", span="104-104"];
m4_90 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="RecurringJobScheduler.cs", label="var server = CreateServer()", span="106-106"];
m4_93 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="RecurringJobScheduler.cs", label="Assert.IsType<ServerCore>(((ServerComponentRunner) runner).Component)", span="111-111"];
m4_91 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="RecurringJobScheduler.cs", label="var runner = server.GetServerRunner()", span="108-108"];
m4_92 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="RecurringJobScheduler.cs", label="Assert.NotNull(runner)", span="110-110"];
m4_94 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="RecurringJobScheduler.cs", label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", span="104-104"];
m4_97 [cluster="Unk.NotNull", file="RecurringJobScheduler.cs", label="Entry Unk.NotNull", span=""];
m4_66 [cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheServerComponentRunner()", color=green, community=0, file="RecurringJobScheduler.cs", label="0: _runner.Verify(x => x.Start())", span="84-84"];
m4_9 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="throttler == null", span="55-55"];
m4_85 [cluster="Hangfire.Logging.ILog.ErrorException(string, System.Exception)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Logging.ILog.ErrorException(string, System.Exception)", span="159-159"];
m4_72 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Exit lambda expression", span="84-84"];
m4_8 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="throw new ArgumentNullException(''instantFactory'');", span="54-54"];
m4_131 [cluster="Mock<IServerComponent>.cstr", file="RecurringJobScheduler.cs", label="Entry Mock<IServerComponent>.cstr", span=""];
m4_64 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="Logger.ErrorException(\r\n                    String.Format(''Recurring job '{0}' was not triggered: {1}.'', recurringJobId, ex.Message),\r\n                    ex)", span="161-163"];
m4_65 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", span="104-104"];
m4_24 [cluster="BackgroundJobServer.cstr", file="RecurringJobScheduler.cs", label="Entry BackgroundJobServer.cstr", span=""];
m4_22 [cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs", label="0: new BackgroundJobServer(0, Queues, _storage.Object)", span="33-33"];
m4_21 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Entry lambda expression", span="33-33"];
m4_23 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Exit lambda expression", span="33-33"];
m4_37 [cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs", label="0: new BackgroundJobServer(WorkerCount, new string[0], _storage.Object)", span="51-51"];
m4_112 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Entry lambda expression", span="124-124"];
m4_43 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var job = serializedJob.Deserialize()", span="111-111"];
m4_44 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: var cron = recurringJob[''Cron'']", span="112-112"];
m4_45 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var cronSchedule = CrontabSchedule.Parse(cron)", span="113-113"];
m4_60 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="changedFields.Add(''LastJobId'', jobId ?? String.Empty)", span="150-150"];
m4_61 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=green, community=0, file="RecurringJobScheduler.cs", label="0: changedFields.Add(''NextExecution'', JobHelper.SerializeDateTime(instant.NextInstant))", span="153-153"];
m4_62 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="connection.SetRangeInHash(\r\n                    String.Format(''recurring-job:{0}'', recurringJobId),\r\n                    changedFields)", span="155-157"];
m4_136 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Entry lambda expression", span="149-149"];
m4_137 [cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs", label="1: x.Component", span="149-149"];
m4_138 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Exit lambda expression", span="149-149"];
m4_11 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="_factory = factory", span="57-57"];
m4_86 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Hangfire.Server.RecurringJobScheduler", span=""];
m4_132 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Entry lambda expression", span="140-140"];
m4_52 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="recurringJob.ContainsKey(''Queue'') && !String.IsNullOrEmpty(recurringJob[''Queue''])", span="132-132"];
m4_116 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Entry lambda expression", span="127-127"];
m4_119 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Entry lambda expression", span="128-128"];
m4_13 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="_throttler = throttler", span="59-59"];
m4_12 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="_instantFactory = instantFactory", span="58-58"];
m4_79 [cluster="Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", span="31-31"];
m4_80 [cluster="Hangfire.Logging.ILog.DebugFormat(string, params object[])", file="RecurringJobScheduler.cs", label="Entry Hangfire.Logging.ILog.DebugFormat(string, params object[])", span="122-122"];
m4_87 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="x.Dispose()", span="100-100"];
m4_88 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Exit lambda expression", span="100-100"];
m4_134 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Exit lambda expression", span="140-140"];
m4_133 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="x.GetComponents()", span="140-140"];
m4_54 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=red, community=0, file="RecurringJobScheduler.cs", label="0: var context = new CreateContext(storage, connection, job, state)", span="137-137"];
m4_53 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="state.Queue = recurringJob[''Queue'']", span="134-134"];
m4_118 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Exit lambda expression", span="127-127"];
m4_117 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="x.Component", span="127-127"];
m4_121 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Exit lambda expression", span="128-128"];
m4_120 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="x.GetType()", span="128-128"];
m4_113 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="x.GetType()", span="124-124"];
m4_114 [cluster="lambda expression", file="RecurringJobScheduler.cs", label="Exit lambda expression", span="124-124"];
m4_110 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="RecurringJobScheduler.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m4_106 [cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", file="RecurringJobScheduler.cs", label="Entry HangFire.BackgroundJobServer.GetServerComponentsRunner()", span="105-105"];
m4_108 [cluster="Unk.Contains", file="RecurringJobScheduler.cs", label="Entry Unk.Contains", span=""];
m4_107 [cluster="Unk.Select", file="RecurringJobScheduler.cs", label="Entry Unk.Select", span=""];
m4_14 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="48-48"];
m4_122 [cluster="Unk.GetType", file="RecurringJobScheduler.cs", label="Entry Unk.GetType", span=""];
m4_42 [cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", label="var serializedJob = JobHelper.FromJson<InvocationData>(recurringJob[''Job''])", span="110-110"];
m4_6 [cluster="Mock<JobStorage>.cstr", file="RecurringJobScheduler.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m4_10 [cluster="Unk.Returns", file="RecurringJobScheduler.cs", label="Entry Unk.Returns", span=""];
m4_109 [cluster="Unk.True", file="RecurringJobScheduler.cs", label="Entry Unk.True", span=""];
m4_96 [cluster="HangFire.BackgroundJobServer.GetServerRunner()", file="RecurringJobScheduler.cs", label="Entry HangFire.BackgroundJobServer.GetServerRunner()", span="83-83"];
m4_141 [file="RecurringJobScheduler.cs", label="HangFire.Core.Tests.BackgroundJobServerFacts", span=""];
n12 -> n5  [color=red, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
n12 -> n6  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
n12 -> n7  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
n12 -> n8  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
n0 -> n1  [key=0, style=solid];
n0 -> n3  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
n0 -> n6  [color=darkseagreen4, key=1, label=string, style=dashed];
n0 -> n7  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
n0 -> n8  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n3 -> n5  [color=red, key=0, style=solid];
n6 -> n7  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n2 -> n9  [key=0, style=solid];
n2 -> n10  [key=2, style=dotted];
n4 -> n9  [key=0, style=solid];
n4 -> n10  [key=2, style=dotted];
n5 -> n6  [color=red, key=0, style=solid];
n5 -> n11  [color=red, key=2, style=dotted];
n9 -> n0  [color=blue, key=0, style=bold];
d7 -> d8  [color=green, key=0, style=solid];
d7 -> d9  [color=green, key=0, style=solid];
d4 -> d7  [color=green, key=1, label="Hangfire.Client.IBackgroundJobFactory", style=dashed];
d4 -> d8  [color=green, key=1, label="Hangfire.Client.IBackgroundJobFactory", style=dashed];
d4 -> d5  [key=0, style=solid];
d4 -> d6  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
d4 -> d9  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
d4 -> d10  [color=darkseagreen4, key=1, label="Hangfire.Client.IBackgroundJobFactory", style=dashed];
d5 -> d7  [color=green, key=0, style=solid];
d5 -> d6  [key=0, style=solid];
d8 -> d11  [color=green, key=0, style=solid];
d8 -> d12  [color=green, key=2, style=dotted];
d8 -> d13  [color=green, key=2, style=dotted];
d9 -> d10  [key=0, style=solid];
d11 -> d4  [color=blue, key=0, style=bold];
d6 -> d11  [key=0, style=solid];
d6 -> d12  [key=2, style=dotted];
d6 -> d13  [key=2, style=dotted];
d10 -> d11  [key=0, style=solid];
d90 -> d9  [color=darkseagreen4, key=1, label="Hangfire.RecurringJobManager", style=dashed];
d90 -> d10  [color=darkseagreen4, key=1, label="Hangfire.RecurringJobManager", style=dashed];
d90 -> d24  [color=darkseagreen4, key=1, label="Hangfire.RecurringJobManager", style=dashed];
d90 -> d53  [color=darkseagreen4, key=1, label="Hangfire.RecurringJobManager", style=dashed];
d90 -> d61  [color=darkseagreen4, key=1, label="Hangfire.RecurringJobManager", style=dashed];
d90 -> d63  [color=darkseagreen4, key=1, label="Hangfire.RecurringJobManager", style=dashed];
d90 -> d74  [color=darkseagreen4, key=1, label="Hangfire.RecurringJobManager", style=dashed];
d16 -> d12  [key=2, style=dotted];
d16 -> d13  [key=2, style=dotted];
d16 -> d38  [key=0, style=solid];
d18 -> d12  [key=2, style=dotted];
d18 -> d13  [key=2, style=dotted];
d18 -> d38  [key=0, style=solid];
d20 -> d12  [key=2, style=dotted];
d20 -> d13  [key=2, style=dotted];
d20 -> d38  [key=0, style=solid];
d22 -> d12  [key=2, style=dotted];
d22 -> d13  [key=2, style=dotted];
d22 -> d38  [key=0, style=solid];
d52 -> d12  [key=2, style=dotted];
d52 -> d13  [key=2, style=dotted];
d52 -> d64  [key=0, style=solid];
d73 -> d12  [key=2, style=dotted];
d73 -> d13  [key=2, style=dotted];
d73 -> d79  [key=0, style=solid];
d85 -> d13  [key=2, style=dotted];
d85 -> d86  [key=0, style=solid];
d85 -> d89  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d24 -> d40  [key=2, style=dotted];
d24 -> d31  [color=darkseagreen4, key=1, label=connection, style=dashed];
d24 -> d34  [color=darkseagreen4, key=1, label=connection, style=dashed];
d53 -> d54  [key=0, style=solid];
d53 -> d40  [key=2, style=dotted];
d53 -> d61  [color=darkseagreen4, key=1, label=connection, style=dashed];
d61 -> d62  [key=0, style=solid];
d61 -> d69  [key=2, style=dotted];
d61 -> d63  [color=darkseagreen4, key=1, label=context, style=dashed];
d63 -> d64  [key=0, style=solid];
d63 -> d70  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d74 -> d40  [key=2, style=dotted];
d14 -> d16  [color=darkseagreen4, key=1, label=string, style=dashed];
d14 -> d18  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
d14 -> d20  [color=darkseagreen4, key=1, label=string, style=dashed];
d14 -> d22  [color=darkseagreen4, key=1, label="Hangfire.RecurringJobOptions", style=dashed];
d14 -> d15  [key=0, style=solid];
d14 -> d17  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
d14 -> d19  [color=darkseagreen4, key=1, label=string, style=dashed];
d14 -> d21  [color=darkseagreen4, key=1, label="Hangfire.RecurringJobOptions", style=dashed];
d14 -> d23  [color=darkseagreen4, key=1, label=string, style=dashed];
d14 -> d26  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
d14 -> d28  [color=darkseagreen4, key=1, label=string, style=dashed];
d14 -> d29  [color=darkseagreen4, key=1, label="Hangfire.RecurringJobOptions", style=dashed];
d14 -> d30  [color=darkseagreen4, key=1, label="Hangfire.RecurringJobOptions", style=dashed];
d14 -> d31  [color=darkseagreen4, key=1, label=string, style=dashed];
d14 -> d35  [color=darkseagreen4, key=1, label=string, style=dashed];
d14 -> d36  [color=darkseagreen4, key=1, label=string, style=dashed];
d15 -> d16  [key=0, style=solid];
d15 -> d17  [key=0, style=solid];
d38 -> d14  [color=blue, key=0, style=bold];
d17 -> d18  [key=0, style=solid];
d17 -> d19  [key=0, style=solid];
d19 -> d20  [key=0, style=solid];
d19 -> d21  [key=0, style=solid];
d21 -> d22  [key=0, style=solid];
d21 -> d23  [key=0, style=solid];
d50 -> d52  [color=darkseagreen4, key=1, label=string, style=dashed];
d50 -> d51  [key=0, style=solid];
d50 -> d54  [color=darkseagreen4, key=1, label=string, style=dashed];
d50 -> d62  [color=darkseagreen4, key=1, label=string, style=dashed];
d51 -> d52  [key=0, style=solid];
d51 -> d53  [key=0, style=solid];
d64 -> d50  [color=blue, key=0, style=bold];
d71 -> d73  [color=darkseagreen4, key=1, label=string, style=dashed];
d71 -> d72  [key=0, style=solid];
d71 -> d76  [color=darkseagreen4, key=1, label=string, style=dashed];
d71 -> d77  [color=darkseagreen4, key=1, label=string, style=dashed];
d72 -> d73  [key=0, style=solid];
d72 -> d74  [key=0, style=solid];
d79 -> d71  [color=blue, key=0, style=bold];
d39 -> d85  [color=darkseagreen4, key=1, label=string, style=dashed];
d39 -> d82  [key=0, style=solid];
d84 -> d85  [key=0, style=solid];
d86 -> d39  [color=blue, key=0, style=bold];
d23 -> d24  [key=0, style=solid];
d23 -> d39  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d25 -> d41  [key=2, style=dotted];
d25 -> d27  [color=darkseagreen4, key=1, label=recurringJob, style=dashed];
d25 -> d28  [color=darkseagreen4, key=1, label=recurringJob, style=dashed];
d25 -> d29  [color=darkseagreen4, key=1, label=recurringJob, style=dashed];
d25 -> d30  [color=darkseagreen4, key=1, label=recurringJob, style=dashed];
d25 -> d33  [color=darkseagreen4, key=1, label=recurringJob, style=dashed];
d25 -> d35  [color=darkseagreen4, key=1, label=recurringJob, style=dashed];
d31 -> d32  [key=0, style=solid];
d31 -> d44  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d34 -> d46  [key=2, style=dotted];
d34 -> d36  [color=darkseagreen4, key=1, label=transaction, style=dashed];
d34 -> d37  [color=darkseagreen4, key=1, label=transaction, style=dashed];
d54 -> d55  [key=0, style=solid];
d54 -> d44  [key=2, style=dotted];
d54 -> d57  [color=darkseagreen4, key=1, label=hash, style=dashed];
d54 -> d59  [color=darkseagreen4, key=1, label=hash, style=dashed];
d54 -> d60  [color=darkseagreen4, key=1, label=hash, style=dashed];
d57 -> d61  [color=darkseagreen4, key=1, label=job, style=dashed];
d57 -> d58  [key=0, style=solid];
d57 -> d65  [key=2, style=dotted];
d57 -> d66  [key=2, style=dotted];
d59 -> d61  [key=0, style=solid];
d59 -> d60  [key=0, style=solid];
d59 -> d68  [key=2, style=dotted];
d60 -> d61  [key=0, style=solid];
d58 -> d61  [color=darkseagreen4, key=1, label=state, style=dashed];
d58 -> d59  [key=0, style=solid];
d58 -> d60  [color=darkseagreen4, key=1, label=state, style=dashed];
d58 -> d67  [key=2, style=dotted];
d62 -> d63  [key=0, style=solid];
d75 -> d76  [key=0, style=solid];
d75 -> d46  [key=2, style=dotted];
d75 -> d77  [color=darkseagreen4, key=1, label=transaction, style=dashed];
d75 -> d78  [color=darkseagreen4, key=1, label=transaction, style=dashed];
d26 -> d27  [key=0, style=solid];
d26 -> d42  [key=2, style=dotted];
d28 -> d29  [key=0, style=solid];
d29 -> d30  [key=0, style=solid];
d30 -> d31  [key=0, style=solid];
d35 -> d36  [key=0, style=solid];
d35 -> d47  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d36 -> d48  [key=2, style=dotted];
d37 -> d38  [key=0, style=solid];
d37 -> d49  [key=2, style=dotted];
d56 -> d64  [key=0, style=solid];
d76 -> d77  [key=0, style=solid];
d76 -> d80  [key=2, style=dotted];
d77 -> d78  [key=0, style=solid];
d77 -> d81  [key=2, style=dotted];
d78 -> d79  [key=0, style=solid];
d78 -> d49  [key=2, style=dotted];
d82 -> d83  [key=0, style=solid];
d82 -> d87  [key=2, style=dotted];
d83 -> d84  [key=0, style=solid];
d83 -> d86  [key=0, style=solid];
d83 -> d88  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d27 -> d43  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d33 -> d45  [key=2, style=dotted];
d32 -> d34  [key=0, style=solid];
d32 -> d33  [key=0, style=solid];
d55 -> d57  [key=0, style=solid];
d55 -> d56  [key=0, style=solid];
m0_31 -> m0_32  [color=green, key=0, style=solid];
m0_31 -> m0_15  [color=green, key=2, style=dotted];
m0_24 -> m0_25  [color=red, key=0, style=solid];
m0_24 -> m0_34  [color=green, key=0, style=solid];
m0_25 -> m0_26  [color=red, key=0, style=solid];
m0_25 -> m0_15  [color=red, key=2, style=dotted];
m0_25 -> m0_27  [color=red, key=1, label=context, style=dashed];
m0_25 -> m0_28  [color=red, key=1, label=context, style=dashed];
m0_25 -> m0_29  [color=red, key=1, label=context, style=dashed];
m0_26 -> m0_27  [color=green, key=0, style=solid];
m0_26 -> m0_11  [key=2, style=dotted];
m0_26 -> m0_36  [color=green, key=0, style=solid];
m0_27 -> m0_28  [color=green, key=0, style=solid];
m0_27 -> m0_31  [color=red, key=2, style=dotted];
m0_27 -> m0_10  [color=green, key=2, style=dotted];
m0_27 -> m0_30  [color=green, key=1, label="lambda expression", style=dashed];
m0_28 -> m0_29  [color=green, key=0, style=solid];
m0_28 -> m0_32  [key=2, style=dotted];
m0_28 -> m0_11  [color=green, key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_11  [key=2, style=dotted];
m0_29 -> m0_26  [color=blue, key=0, style=bold];
m0_34 -> m0_26  [color=green, key=0, style=solid];
m0_34 -> m0_15  [color=green, key=2, style=dotted];
m0_34 -> m0_36  [color=green, key=1, label=context, style=dashed];
m0_34 -> m0_28  [color=green, key=1, label=context, style=dashed];
m0_34 -> m0_29  [color=green, key=1, label=context, style=dashed];
m0_36 -> m0_28  [color=green, key=0, style=solid];
m0_36 -> m0_40  [color=green, key=2, style=dotted];
m0_36 -> m0_41  [color=green, key=2, style=dotted];
m0_30 -> m0_24  [color=blue, key=0, style=bold];
m0_30 -> m0_31  [color=green, key=0, style=solid];
m0_16 -> m0_17  [color=red, key=0, style=solid];
m0_16 -> m0_19  [color=green, key=0, style=solid];
m0_17 -> m0_18  [color=red, key=0, style=solid];
m0_17 -> m0_10  [color=red, key=2, style=dotted];
m0_17 -> m0_20  [color=red, key=1, label="lambda expression", style=dashed];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_11  [key=2, style=dotted];
m0_19 -> m0_18  [color=green, key=0, style=solid];
m0_19 -> m0_10  [color=green, key=2, style=dotted];
m0_19 -> m0_20  [color=green, key=1, label="lambda expression", style=dashed];
m0_19 -> m0_16  [color=blue, key=0, style=bold];
m0_23 -> m0_22  [color=green, key=0, style=solid];
m0_23 -> m0_25  [color=green, key=2, style=dotted];
m0_32 -> m0_30  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_4  [key=2, style=dotted];
m0_2 -> m0_3  [color=green, key=0, style=solid];
m0_2 -> m0_5  [key=2, style=dotted];
m0_2 -> d41  [color=green, key=2, style=dotted];
m0_3 -> m0_3  [key=0, style=solid];
m0_3 -> m0_5  [key=2, style=dotted];
m0_3 -> m0_0  [color=blue, key=0, style=bold];
m0_15 -> m0_14  [color=green, key=0, style=solid];
m0_15 -> m0_15  [color=green, key=2, style=dotted];
m0_12 -> m0_13  [color=red, key=0, style=solid];
m0_12 -> m0_15  [color=green, key=0, style=solid];
m0_13 -> m0_14  [color=red, key=0, style=solid];
m0_13 -> m0_15  [color=red, key=2, style=dotted];
m0_14 -> m0_12  [color=blue, key=0, style=bold];
m0_20 -> m0_21  [color=red, key=0, style=solid];
m0_20 -> m0_23  [color=green, key=0, style=solid];
m0_21 -> m0_22  [color=red, key=0, style=solid];
m0_21 -> m0_23  [color=red, key=2, style=dotted];
m0_22 -> m0_20  [color=blue, key=0, style=bold];
m0_6 -> m0_7  [color=red, key=0, style=solid];
m0_6 -> m0_9  [color=green, key=0, style=solid];
m0_7 -> m0_8  [color=red, key=0, style=solid];
m0_7 -> m0_10  [color=red, key=2, style=dotted];
m0_7 -> m0_12  [color=red, key=1, label="lambda expression", style=dashed];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_11  [key=2, style=dotted];
m0_9 -> m0_8  [color=green, key=0, style=solid];
m0_9 -> m0_10  [color=green, key=2, style=dotted];
m0_9 -> m0_12  [color=green, key=1, label="lambda expression", style=dashed];
m0_9 -> m0_6  [color=blue, key=0, style=bold];
m0_33 -> m0_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_2  [color=green, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_7  [color=red, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_13  [color=red, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_17  [color=red, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_21  [color=red, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_25  [color=red, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_26  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_28  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_29  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_9  [color=green, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_15  [color=green, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_19  [color=green, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_23  [color=green, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_27  [color=green, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_31  [color=green, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_34  [color=green, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_36  [color=green, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m0_33 -> m0_3  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", style=dashed];
m1_23 -> m1_24  [key=0, style=solid];
m1_24 -> m1_13  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid];
m1_25 -> m1_23  [color=blue, key=0, style=bold];
m1_37 -> m1_38  [key=0, style=solid];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_29  [key=2, style=dotted];
m1_39 -> m1_37  [color=blue, key=0, style=bold];
m1_20 -> m1_21  [key=0, style=solid];
m1_21 -> m1_13  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_22 -> m1_20  [color=blue, key=0, style=bold];
m1_30 -> m1_31  [key=0, style=solid];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_29  [key=2, style=dotted];
m1_32 -> m1_30  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_4 -> m1_5  [color=green, key=0, style=solid];
m1_4 -> m1_13  [color=green, key=2, style=dotted];
m1_3 -> m1_4  [color=green, key=0, style=solid];
m1_3 -> m1_12  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_14  [key=2, style=dotted];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_9  [key=2, style=dotted];
m1_2 -> m1_10  [key=2, style=dotted];
m1_2 -> m1_11  [key=2, style=dotted];
m1_2 -> m1_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_15  [key=2, style=dotted];
m1_6 -> m1_16  [key=2, style=dotted];
m1_7 -> m1_0  [color=blue, key=0, style=bold];
m1_33 -> m1_34  [key=0, style=solid];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_36  [key=2, style=dotted];
m1_35 -> m1_33  [color=blue, key=0, style=bold];
m1_17 -> m1_18  [key=0, style=solid];
m1_18 -> m1_19  [key=0, style=solid];
m1_19 -> m1_17  [color=blue, key=0, style=bold];
m1_26 -> m1_27  [key=0, style=solid];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_29  [key=2, style=dotted];
m1_28 -> m1_26  [color=blue, key=0, style=bold];
m1_47 -> m1_4  [color=green, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m1_47 -> m1_1  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m1_47 -> m1_2  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m1_47 -> m1_3  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m1_47 -> m1_5  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m1_47 -> m1_6  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m1_47 -> m1_21  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m1_47 -> m1_24  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m1_47 -> m1_27  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m1_47 -> m1_31  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m1_47 -> m1_34  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m1_47 -> m1_38  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label="Hangfire.Server.IServerProcess", style=dashed];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=0, style=solid];
m3_3 -> m3_4  [key=0, style=solid];
m3_2 -> m3_4  [key=0, style=solid];
m3_2 -> d12  [key=2, style=dotted];
m3_4 -> m3_0  [color=blue, key=0, style=bold];
m3_13 -> m3_14  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_16  [key=2, style=dotted];
m3_15 -> m3_13  [color=blue, key=0, style=bold];
m3_6 -> m3_7  [color=green, key=0, style=solid];
m3_6 -> m3_8  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m3_6 -> m3_9  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m3_7 -> m3_8  [color=green, key=0, style=solid];
m3_7 -> m3_10  [color=green, key=0, style=solid];
m3_8 -> m3_9  [color=red, key=0, style=solid];
m3_8 -> m3_11  [color=red, key=2, style=dotted];
m3_9 -> m3_7  [color=green, key=0, style=solid];
m3_9 -> m3_12  [key=2, style=dotted];
m3_10 -> m3_6  [color=blue, key=0, style=bold];
m3_17 -> m3_3  [color=darkseagreen4, key=1, label="Hangfire.Server.InfiniteLoopProcess", style=dashed];
m3_17 -> m3_9  [color=darkseagreen4, key=1, label="Hangfire.Server.InfiniteLoopProcess", style=dashed];
m3_17 -> m3_14  [color=darkseagreen4, key=1, label="Hangfire.Server.InfiniteLoopProcess", style=dashed];
m4_31 -> m4_29  [color=blue, key=0, style=bold];
m4_67 -> m4_64  [color=blue, key=0, style=bold];
m4_82 -> m4_83  [key=0, style=solid];
m4_82 -> m4_85  [key=2, style=dotted];
m4_30 -> m4_31  [color=green, key=0, style=solid];
m4_30 -> m4_24  [color=green, key=2, style=dotted];
m4_98 -> m4_99  [key=0, style=solid];
m4_99 -> m4_100  [key=0, style=solid];
m4_99 -> m4_95  [key=2, style=dotted];
m4_102 -> m4_110  [key=2, style=dotted];
m4_102 -> m4_107  [key=2, style=dotted];
m4_102 -> m4_111  [key=2, style=dotted];
m4_102 -> m4_103  [key=0, style=solid];
m4_102 -> m4_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_102 -> m4_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_102 -> m4_104  [color=darkseagreen4, key=1, label=componentTypes, style=dashed];
m4_101 -> m4_107  [key=2, style=dotted];
m4_101 -> m4_108  [key=2, style=dotted];
m4_101 -> m4_102  [key=0, style=solid];
m4_101 -> m4_109  [key=2, style=dotted];
m4_101 -> m4_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_100 -> m4_106  [key=2, style=dotted];
m4_100 -> m4_102  [color=darkseagreen4, key=1, label=runners, style=dashed];
m4_100 -> m4_101  [key=0, style=solid];
m4_103 -> m4_108  [key=2, style=dotted];
m4_103 -> m4_104  [key=0, style=solid];
m4_104 -> m4_108  [key=2, style=dotted];
m4_104 -> m4_105  [key=0, style=solid];
m4_105 -> m4_98  [color=blue, key=0, style=bold];
m4_84 -> m4_81  [color=blue, key=0, style=bold];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_36  [color=blue, key=0, style=bold];
m4_39 -> m4_40  [color=green, key=0, style=solid];
m4_39 -> m4_41  [key=2, style=dotted];
m4_40 -> m4_38  [color=blue, key=0, style=bold];
m4_40 -> m4_41  [color=green, key=0, style=solid];
m4_40 -> m4_19  [color=green, key=2, style=dotted];
m4_40 -> m4_43  [color=green, key=1, label="lambda expression", style=dashed];
m4_76 -> m4_73  [color=blue, key=0, style=bold];
m4_46 -> m4_47  [key=0, style=solid];
m4_46 -> m4_69  [key=2, style=dotted];
m4_46 -> m4_70  [key=2, style=dotted];
m4_20 -> m4_21  [key=0, style=solid];
m4_20 -> m4_32  [key=2, style=dotted];
m4_95 -> m4_139  [key=0, style=solid];
m4_139 -> m4_24  [key=2, style=dotted];
m4_139 -> m4_140  [key=0, style=solid];
m4_140 -> m4_95  [color=blue, key=0, style=bold];
m4_25 -> m4_26  [color=green, key=0, style=solid];
m4_26 -> m4_27  [color=green, key=0, style=solid];
m4_26 -> m4_19  [color=green, key=2, style=dotted];
m4_26 -> m4_29  [color=green, key=1, label="lambda expression", style=dashed];
m4_26 -> m4_21  [key=0, style=solid];
m4_26 -> m4_33  [key=2, style=dotted];
m4_26 -> m4_36  [key=2, style=dotted];
m4_27 -> m4_28  [color=green, key=0, style=solid];
m4_27 -> m4_20  [color=green, key=2, style=dotted];
m4_27 -> m4_37  [key=2, style=dotted];
m4_28 -> m4_25  [color=blue, key=0, style=bold];
m4_28 -> m4_16  [color=blue, key=0, style=bold];
m4_71 -> m4_72  [color=green, key=0, style=solid];
m4_71 -> m4_68  [color=green, key=2, style=dotted];
m4_74 -> m4_75  [key=0, style=solid];
m4_74 -> m4_77  [key=2, style=dotted];
m4_83 -> m4_69  [key=2, style=dotted];
m4_83 -> m4_84  [key=0, style=solid];
m4_83 -> m4_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_41 -> m4_42  [color=green, key=0, style=solid];
m4_41 -> m4_20  [color=green, key=2, style=dotted];
m4_73 -> m4_74  [key=0, style=solid];
m4_75 -> m4_69  [key=2, style=dotted];
m4_75 -> m4_76  [key=0, style=solid];
m4_75 -> m4_78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_33 -> m4_34  [color=green, key=0, style=solid];
m4_33 -> m4_19  [color=green, key=2, style=dotted];
m4_33 -> m4_36  [color=green, key=1, label="lambda expression", style=dashed];
m4_51 -> m4_52  [key=0, style=solid];
m4_51 -> m4_76  [key=2, style=dotted];
m4_51 -> m4_53  [color=darkseagreen4, key=1, label=state, style=dashed];
m4_51 -> m4_54  [color=red, key=1, label=state, style=dashed];
m4_81 -> m4_82  [key=0, style=solid];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_9  [key=0, style=solid];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_0  [color=blue, key=0, style=bold];
m4_1 -> m4_6  [key=2, style=dotted];
m4_1 -> m4_2  [key=0, style=solid];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_31  [key=2, style=dotted];
m4_36 -> m4_37  [color=green, key=0, style=solid];
m4_15 -> m4_16  [color=green, key=0, style=solid];
m4_16 -> m4_17  [color=green, key=0, style=solid];
m4_16 -> m4_19  [color=green, key=2, style=dotted];
m4_16 -> m4_21  [color=green, key=1, label="lambda expression", style=dashed];
m4_16 -> m4_18  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m4_16 -> m4_24  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m4_16 -> m4_27  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m4_17 -> m4_18  [color=green, key=0, style=solid];
m4_17 -> m4_20  [color=green, key=2, style=dotted];
m4_17 -> m4_29  [key=2, style=dotted];
m4_18 -> m4_15  [color=blue, key=0, style=bold];
m4_18 -> m4_19  [key=0, style=solid];
m4_18 -> m4_30  [key=2, style=dotted];
m4_18 -> m4_20  [color=darkseagreen4, key=1, label=connection, style=dashed];
m4_18 -> m4_22  [color=darkseagreen4, key=1, label=connection, style=dashed];
m4_18 -> m4_24  [color=darkseagreen4, key=1, label=connection, style=dashed];
m4_123 -> m4_124  [key=0, style=solid];
m4_128 -> m4_129  [color=green, key=0, style=solid];
m4_128 -> m4_110  [color=green, key=2, style=dotted];
m4_128 -> m4_107  [color=green, key=2, style=dotted];
m4_128 -> m4_111  [color=green, key=2, style=dotted];
m4_128 -> m4_136  [color=green, key=1, label="lambda expression", style=dashed];
m4_127 -> m4_128  [color=green, key=0, style=solid];
m4_127 -> m4_106  [key=2, style=dotted];
m4_129 -> m4_130  [key=0, style=solid];
m4_129 -> m4_108  [key=2, style=dotted];
m4_125 -> m4_126  [key=0, style=solid];
m4_125 -> m4_9  [key=2, style=dotted];
m4_125 -> m4_10  [key=2, style=dotted];
m4_125 -> m4_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_126 -> m4_127  [key=0, style=solid];
m4_126 -> m4_95  [key=2, style=dotted];
m4_124 -> m4_129  [color=darkseagreen4, key=1, label=storageComponent, style=dashed];
m4_124 -> m4_125  [key=0, style=solid];
m4_124 -> m4_131  [key=2, style=dotted];
m4_130 -> m4_123  [color=blue, key=0, style=bold];
m4_70 -> m4_71  [color=green, key=0, style=solid];
m4_32 -> m4_33  [color=green, key=0, style=solid];
m4_34 -> m4_35  [color=green, key=0, style=solid];
m4_34 -> m4_20  [color=green, key=2, style=dotted];
m4_35 -> m4_32  [color=blue, key=0, style=bold];
m4_35 -> m4_42  [key=0, style=solid];
m4_35 -> m4_44  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m4_35 -> m4_46  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m4_35 -> m4_48  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m4_35 -> m4_52  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m4_35 -> m4_53  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m4_35 -> m4_54  [color=red, key=1, label="Hangfire.JobStorage", style=dashed];
m4_35 -> m4_58  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_35 -> m4_62  [color=darkseagreen4, key=1, label="Hangfire.Storage.IStorageConnection", style=dashed];
m4_35 -> m4_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_47 -> m4_48  [key=0, style=solid];
m4_47 -> m4_71  [key=2, style=dotted];
m4_47 -> m4_50  [color=darkseagreen4, key=1, label=instant, style=dashed];
m4_47 -> m4_58  [color=darkseagreen4, key=1, label=instant, style=dashed];
m4_47 -> m4_59  [color=darkseagreen4, key=1, label=instant, style=dashed];
m4_47 -> m4_61  [color=darkseagreen4, key=1, label=instant, style=dashed];
m4_48 -> m4_6  [key=2, style=dotted];
m4_48 -> m4_49  [key=0, style=solid];
m4_48 -> m4_69  [key=2, style=dotted];
m4_48 -> m4_72  [key=2, style=dotted];
m4_48 -> m4_50  [color=darkseagreen4, key=1, label=lastExecutionTime, style=dashed];
m4_49 -> m4_51  [key=2, style=dotted];
m4_49 -> m4_50  [key=0, style=solid];
m4_49 -> m4_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_49 -> m4_73  [key=2, style=dotted];
m4_49 -> m4_59  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m4_49 -> m4_60  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m4_49 -> m4_61  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m4_49 -> m4_62  [color=darkseagreen4, key=1, label=changedFields, style=dashed];
m4_50 -> m4_47  [color=blue, key=0, style=bold];
m4_50 -> m4_51  [key=0, style=solid];
m4_50 -> m4_61  [key=0, style=solid];
m4_50 -> m4_74  [key=2, style=dotted];
m4_50 -> m4_75  [key=2, style=dotted];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_7  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_8  [key=2, style=dotted];
m4_3 -> m4_2  [color=blue, key=0, style=bold];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_9  [key=2, style=dotted];
m4_4 -> m4_10  [key=2, style=dotted];
m4_4 -> m4_11  [color=darkseagreen4, key=1, label="Hangfire.Client.IBackgroundJobFactory", style=dashed];
m4_4 -> m4_7  [color=darkseagreen4, key=1, label="System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>", style=dashed];
m4_4 -> m4_12  [color=darkseagreen4, key=1, label="System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>", style=dashed];
m4_4 -> m4_13  [color=darkseagreen4, key=1, label="Hangfire.Server.IThrottler", style=dashed];
m4_5 -> m4_0  [color=blue, key=0, style=bold];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_7  [key=0, style=solid];
m4_55 -> m4_56  [color=red, key=0, style=solid];
m4_55 -> m4_79  [color=red, key=2, style=dotted];
m4_78 -> m4_79  [key=0, style=solid];
m4_63 -> m4_64  [key=0, style=solid];
m4_56 -> m4_57  [color=green, key=0, style=solid];
m4_56 -> m4_60  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m4_57 -> m4_58  [color=green, key=0, style=solid];
m4_57 -> m4_6  [color=green, key=2, style=dotted];
m4_57 -> m4_59  [key=0, style=solid];
m4_57 -> m4_77  [key=2, style=dotted];
m4_58 -> m4_59  [color=green, key=0, style=solid];
m4_58 -> m4_51  [color=green, key=2, style=dotted];
m4_58 -> m4_60  [color=green, key=1, label="lambda expression", style=dashed];
m4_58 -> m4_80  [key=2, style=dotted];
m4_59 -> m4_56  [color=blue, key=0, style=bold];
m4_59 -> m4_60  [key=0, style=solid];
m4_59 -> m4_81  [key=2, style=dotted];
m4_59 -> m4_82  [key=2, style=dotted];
m4_29 -> m4_30  [color=green, key=0, style=solid];
m4_89 -> m4_90  [key=0, style=solid];
m4_90 -> m4_91  [key=0, style=solid];
m4_90 -> m4_95  [key=2, style=dotted];
m4_93 -> m4_19  [key=2, style=dotted];
m4_93 -> m4_94  [key=0, style=solid];
m4_91 -> m4_93  [color=darkseagreen4, key=1, label=runner, style=dashed];
m4_91 -> m4_92  [key=0, style=solid];
m4_91 -> m4_96  [key=2, style=dotted];
m4_92 -> m4_93  [key=0, style=solid];
m4_92 -> m4_97  [key=2, style=dotted];
m4_94 -> m4_89  [color=blue, key=0, style=bold];
m4_66 -> m4_67  [color=green, key=0, style=solid];
m4_66 -> m4_69  [color=green, key=2, style=dotted];
m4_66 -> m4_70  [color=green, key=1, label="lambda expression", style=dashed];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_11  [key=0, style=solid];
m4_72 -> m4_70  [color=blue, key=0, style=bold];
m4_8 -> m4_14  [key=0, style=solid];
m4_8 -> d12  [key=2, style=dotted];
m4_64 -> m4_65  [key=0, style=solid];
m4_64 -> m4_84  [key=2, style=dotted];
m4_64 -> m4_85  [key=2, style=dotted];
m4_65 -> m4_66  [color=green, key=0, style=solid];
m4_65 -> m4_68  [key=2, style=dotted];
m4_65 -> m4_35  [color=blue, key=0, style=bold];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_21  [key=0, style=solid];
m4_24 -> m4_35  [key=2, style=dotted];
m4_22 -> m4_23  [color=green, key=0, style=solid];
m4_22 -> m4_33  [key=2, style=dotted];
m4_22 -> m4_34  [key=2, style=dotted];
m4_22 -> m4_24  [color=darkseagreen4, key=1, label=recurringJob, style=dashed];
m4_21 -> m4_22  [color=green, key=0, style=solid];
m4_21 -> m4_27  [key=0, style=solid];
m4_21 -> m4_24  [color=darkseagreen4, key=1, label=recurringJobId, style=dashed];
m4_21 -> m4_26  [color=darkseagreen4, key=1, label=recurringJobId, style=dashed];
m4_23 -> m4_24  [key=0, style=solid];
m4_23 -> m4_21  [color=blue, key=0, style=bold];
m4_37 -> m4_38  [color=green, key=0, style=solid];
m4_37 -> m4_24  [color=green, key=2, style=dotted];
m4_112 -> m4_113  [key=0, style=solid];
m4_43 -> m4_44  [color=green, key=0, style=solid];
m4_43 -> m4_67  [key=2, style=dotted];
m4_43 -> m4_54  [color=red, key=1, label=job, style=dashed];
m4_44 -> m4_45  [color=green, key=0, style=solid];
m4_44 -> m4_46  [color=green, key=2, style=dotted];
m4_45 -> m4_43  [color=blue, key=0, style=bold];
m4_45 -> m4_46  [key=0, style=solid];
m4_45 -> m4_68  [key=2, style=dotted];
m4_45 -> m4_47  [color=darkseagreen4, key=1, label=cronSchedule, style=dashed];
m4_60 -> m4_61  [color=green, key=0, style=solid];
m4_60 -> m4_82  [key=2, style=dotted];
m4_61 -> m4_62  [color=green, key=0, style=solid];
m4_61 -> m4_63  [color=green, key=2, style=dotted];
m4_61 -> m4_81  [key=2, style=dotted];
m4_61 -> m4_82  [key=2, style=dotted];
m4_62 -> m4_60  [color=blue, key=0, style=bold];
m4_62 -> m4_63  [key=0, style=solid];
m4_62 -> m4_65  [key=0, style=solid];
m4_62 -> m4_33  [key=2, style=dotted];
m4_62 -> m4_83  [key=2, style=dotted];
m4_136 -> m4_137  [color=green, key=0, style=solid];
m4_137 -> m4_138  [color=green, key=0, style=solid];
m4_138 -> m4_136  [color=blue, key=0, style=bold];
m4_11 -> m4_12  [key=0, style=solid];
m4_86 -> m4_87  [key=0, style=solid];
m4_86 -> m4_11  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m4_86 -> m4_12  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m4_86 -> m4_13  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m4_86 -> m4_17  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m4_86 -> m4_24  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m4_86 -> m4_27  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m4_86 -> m4_39  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m4_86 -> m4_47  [color=darkseagreen4, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m4_86 -> m4_55  [color=red, key=1, label="Hangfire.Server.RecurringJobScheduler", style=dashed];
m4_132 -> m4_133  [key=0, style=solid];
m4_52 -> m4_53  [key=0, style=solid];
m4_52 -> m4_54  [color=red, key=0, style=solid];
m4_52 -> m4_69  [key=2, style=dotted];
m4_52 -> m4_77  [key=2, style=dotted];
m4_116 -> m4_117  [key=0, style=solid];
m4_119 -> m4_120  [key=0, style=solid];
m4_13 -> m4_11  [color=blue, key=0, style=bold];
m4_13 -> m4_14  [key=0, style=solid];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_14  [key=2, style=dotted];
m4_79 -> m4_77  [key=2, style=dotted];
m4_79 -> m4_80  [key=0, style=solid];
m4_80 -> m4_78  [color=blue, key=0, style=bold];
m4_87 -> m4_85  [key=2, style=dotted];
m4_87 -> m4_88  [key=0, style=solid];
m4_88 -> m4_86  [color=blue, key=0, style=bold];
m4_134 -> m4_132  [color=blue, key=0, style=bold];
m4_133 -> m4_134  [key=0, style=solid];
m4_133 -> m4_135  [key=2, style=dotted];
m4_54 -> m4_52  [color=blue, key=0, style=bold];
m4_54 -> m4_55  [color=red, key=0, style=solid];
m4_54 -> m4_78  [color=red, key=2, style=dotted];
m4_53 -> m4_54  [color=red, key=0, style=solid];
m4_53 -> m4_55  [key=2, style=dotted];
m4_118 -> m4_116  [color=blue, key=0, style=bold];
m4_117 -> m4_118  [key=0, style=solid];
m4_121 -> m4_119  [color=blue, key=0, style=bold];
m4_120 -> m4_121  [key=0, style=solid];
m4_120 -> m4_122  [key=2, style=dotted];
m4_113 -> m4_114  [key=0, style=solid];
m4_113 -> m4_115  [key=2, style=dotted];
m4_114 -> m4_112  [color=blue, key=0, style=bold];
m4_14 -> m4_4  [color=blue, key=0, style=bold];
m4_42 -> m4_39  [color=blue, key=0, style=bold];
m4_42 -> m4_43  [key=0, style=solid];
m4_42 -> m4_66  [key=2, style=dotted];
m4_6 -> m4_14  [key=0, style=solid];
m4_6 -> d12  [key=2, style=dotted];
m4_10 -> m4_14  [key=0, style=solid];
m4_10 -> d12  [key=2, style=dotted];
m4_141 -> m4_16  [color=green, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_22  [color=green, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_26  [color=green, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_30  [color=green, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_33  [color=green, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_37  [color=green, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_66  [color=green, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_1  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_2  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_3  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_4  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_65  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_74  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_75  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_82  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_83  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_90  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_99  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_125  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_126  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
m4_141 -> m4_139  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobServerFacts", style=dashed];
}
