digraph  {
n12 [label="Hangfire.Server.BackgroundProcessContext", span=""];
n0 [label="Entry Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", span="25-25", cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)"];
n1 [label="serverId == null", span="30-30", cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)"];
n3 [label="storage == null", span="31-31", cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)"];
n6 [label="ServerId = serverId", span="35-35", cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)"];
n7 [label="Storage = storage", span="36-36", cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)"];
n8 [label="CancellationToken = cancellationToken", span="37-37", cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)"];
n2 [label="throw new ArgumentNullException(''serverId'');", span="30-30", cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)"];
n4 [label="throw new ArgumentNullException(''storage'');", span="31-31", cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)"];
n5 [label="Properties = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase)", span="33-33", cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", color=red, community=0];
n11 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IEqualityComparer<TKey>)"];
n9 [label="Exit Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)", span="25-25", cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Threading.CancellationToken)"];
n10 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
d7 [label="factory == null", span="49-49", cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", color=green, community=0];
d4 [label="Entry Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", span="46-46", cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)"];
d5 [label="storage == null", span="48-48", cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)"];
d8 [label="throw new ArgumentNullException(nameof(factory));", span="49-49", cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", color=green, community=0];
d9 [label="_storage = storage", span="51-51", cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)"];
d11 [label="Exit Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)", span="46-46", cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)"];
d12 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
d13 [label="Entry Unk.nameof", span="", cluster="Unk.nameof"];
d6 [label="throw new ArgumentNullException(nameof(storage));", span="48-48", cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)"];
d10 [label="_factory = factory", span="52-52", cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory)"];
d90 [label="Hangfire.RecurringJobManager", span=""];
d16 [label="throw new ArgumentNullException(nameof(recurringJobId));", span="57-57", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d18 [label="throw new ArgumentNullException(nameof(job));", span="58-58", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d20 [label="throw new ArgumentNullException(nameof(cronExpression));", span="59-59", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d22 [label="throw new ArgumentNullException(nameof(options));", span="60-60", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d52 [label="throw new ArgumentNullException(nameof(recurringJobId));", span="95-95", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d73 [label="throw new ArgumentNullException(nameof(recurringJobId));", span="121-121", cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)"];
d85 [label="throw new ArgumentException(''CRON expression is invalid. Please see the inner exception for details.'', nameof(cronExpression), ex);", span="142-142", cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)"];
d24 [label="var connection = _storage.GetConnection()", span="64-64", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d53 [label="var connection = _storage.GetConnection()", span="97-97", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d61 [label="var context = new CreateContext(_storage, connection, job, state)", span="113-113", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d63 [label="_factory.Create(context)", span="115-115", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d74 [label="var connection = _storage.GetConnection()", span="123-123", cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)"];
d14 [label="Entry Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", span="55-55", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d15 [label="recurringJobId == null", span="57-57", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d38 [label="Exit Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", span="55-55", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d17 [label="job == null", span="58-58", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d19 [label="cronExpression == null", span="59-59", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d21 [label="options == null", span="60-60", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d50 [label="Entry Hangfire.RecurringJobManager.Trigger(string)", span="93-93", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d51 [label="recurringJobId == null", span="95-95", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d64 [label="Exit Hangfire.RecurringJobManager.Trigger(string)", span="93-93", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d71 [label="Entry Hangfire.RecurringJobManager.RemoveIfExists(string)", span="119-119", cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)"];
d72 [label="recurringJobId == null", span="121-121", cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)"];
d79 [label="Exit Hangfire.RecurringJobManager.RemoveIfExists(string)", span="119-119", cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)"];
d39 [label="Entry Hangfire.RecurringJobManager.ValidateCronExpression(string)", span="133-133", cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)"];
d84 [label=Exception, span="140-140", cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)"];
d86 [label="Exit Hangfire.RecurringJobManager.ValidateCronExpression(string)", span="133-133", cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)"];
d89 [label="Entry System.ArgumentException.ArgumentException(string, string, System.Exception)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string, System.Exception)"];
d23 [label="ValidateCronExpression(cronExpression)", span="62-62", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d25 [label="var recurringJob = new Dictionary<string, string>()", span="66-66", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d40 [label="Entry Hangfire.JobStorage.GetConnection()", span="56-56", cluster="Hangfire.JobStorage.GetConnection()"];
d31 [label="var existingJob = connection.GetAllEntriesFromHash($''recurring-job:{recurringJobId}'')", span="74-74", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d34 [label="var transaction = connection.CreateWriteTransaction()", span="80-80", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d54 [label="var hash = connection.GetAllEntriesFromHash($''recurring-job:{recurringJobId}'')", span="99-99", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d57 [label="var job = JobHelper.FromJson<InvocationData>(hash[''Job'']).Deserialize()", span="105-105", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d59 [label="hash.ContainsKey(''Queue'')", span="108-108", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d60 [label="state.Queue = hash[''Queue'']", span="110-110", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d58 [label="var state = new EnqueuedState { Reason = ''Triggered using recurring job manager'' }", span="106-106", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d62 [label="context.Parameters[''RecurringJobId''] = recurringJobId", span="114-114", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d69 [label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="37-37", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)"];
d70 [label="Entry Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", span="31-31", cluster="Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)"];
d75 [label="var transaction = connection.CreateWriteTransaction()", span="124-124", cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)"];
d26 [label="var invocationData = InvocationData.Serialize(job)", span="67-67", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d28 [label="recurringJob[''Cron''] = cronExpression", span="70-70", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d29 [label="recurringJob[''TimeZoneId''] = options.TimeZone.Id", span="71-71", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d30 [label="recurringJob[''Queue''] = options.QueueName", span="72-72", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d35 [label="transaction.SetRangeInHash(\r\n                        $''recurring-job:{recurringJobId}'',\r\n                        recurringJob)", span="82-84", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d36 [label="transaction.AddToSet(''recurring-jobs'', recurringJobId)", span="86-86", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d37 [label="transaction.Commit()", span="88-88", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d56 [label="return;", span="102-102", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d76 [label="transaction.RemoveHash($''recurring-job:{recurringJobId}'')", span="126-126", cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)"];
d77 [label="transaction.RemoveFromSet(''recurring-jobs'', recurringJobId)", span="127-127", cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)"];
d78 [label="transaction.Commit()", span="129-129", cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)"];
d82 [label="var schedule = CrontabSchedule.Parse(cronExpression)", span="137-137", cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)"];
d83 [label="schedule.GetNextOccurrence(DateTime.UtcNow)", span="138-138", cluster="Hangfire.RecurringJobManager.ValidateCronExpression(string)"];
d41 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
d27 [label="recurringJob[''Job''] = JobHelper.ToJson(invocationData)", span="69-69", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d33 [label="recurringJob[''CreatedAt''] = JobHelper.SerializeDateTime(DateTime.UtcNow)", span="77-77", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d32 [label="existingJob == null", span="75-75", cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)"];
d44 [label="Entry Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64", cluster="Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)"];
d46 [label="Entry Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27", cluster="Hangfire.Storage.IStorageConnection.CreateWriteTransaction()"];
d55 [label="hash == null", span="100-100", cluster="Hangfire.RecurringJobManager.Trigger(string)"];
d65 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)"];
d66 [label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="44-44", cluster="Hangfire.Storage.InvocationData.Deserialize()"];
d68 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)"];
d67 [label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="87-87", cluster="Hangfire.States.EnqueuedState.EnqueuedState()"];
d42 [label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="69-69", cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)"];
d47 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="51-51", cluster="Hangfire.Storage.IWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)"];
d48 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", span="41-41", cluster="Hangfire.Storage.IWriteOnlyTransaction.AddToSet(string, string)"];
d49 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.Commit()", span="54-54", cluster="Hangfire.Storage.IWriteOnlyTransaction.Commit()"];
d80 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.RemoveHash(string)", span="52-52", cluster="Hangfire.Storage.IWriteOnlyTransaction.RemoveHash(string)"];
d81 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="43-43", cluster="Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)"];
d87 [label="Entry NCrontab.CrontabSchedule.Parse(string)", span="93-93", cluster="NCrontab.CrontabSchedule.Parse(string)"];
d88 [label="Entry NCrontab.CrontabSchedule.GetNextOccurrence(System.DateTime)", span="193-193", cluster="NCrontab.CrontabSchedule.GetNextOccurrence(System.DateTime)"];
d43 [label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32", cluster="Hangfire.Common.JobHelper.ToJson(object)"];
d45 [label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68", cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)"];
m0_31 [label="new BackgroundProcessContext(_serverId, _storage.Object, null, _cts.Token)", span="46-46", cluster="lambda expression", file="BackgroundProcessContextFacts.cs", color=green, community=0];
m0_40 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="BackgroundProcessContextFacts.cs"];
m0_24 [label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", span="39-39", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", file="BackgroundProcessContextFacts.cs"];
m0_25 [label="Entry Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Threading.CancellationToken)", span="25-25", cluster="Hangfire.Server.BackgroundProcessContext.BackgroundProcessContext(string, Hangfire.JobStorage, System.Collections.Generic.IDictionary<string, object>, System.Threading.CancellationToken)", color=red, community=0, file="BackgroundProcessContextFacts.cs"];
m0_26 [label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", span="43-43", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", file="BackgroundProcessContextFacts.cs"];
m0_27 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundProcessContext(_serverId, _storage.Object, null, _cts.Token))", span="45-46", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", color=green, community=1, file="BackgroundProcessContextFacts.cs"];
m0_28 [label="Assert.Equal(''properties'', exception.ParamName)", span="48-48", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", file="BackgroundProcessContextFacts.cs", color=green, community=0];
m0_29 [label="Exit Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", span="43-43", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenPropertiesArgumentIsNull()", file="BackgroundProcessContextFacts.cs"];
m0_34 [label="var context = new BackgroundProcessContext(_serverId, _storage.Object, _properties, _cts.Token)", span="54-54", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", color=green, community=0, file="BackgroundProcessContextFacts.cs"];
m0_36 [label="Assert.True(_properties.SequenceEqual(context.Properties))", span="57-57", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_CorrectlyInitializes_AllTheProperties()", color=green, community=0, file="BackgroundProcessContextFacts.cs"];
m0_30 [label="Entry lambda expression", span="46-46", cluster="lambda expression", file="BackgroundProcessContextFacts.cs"];
m0_10 [label="Entry Unk.>", span="", cluster="Unk.>", file="BackgroundProcessContextFacts.cs"];
m0_16 [label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="30-30", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundProcessContextFacts.cs"];
m0_17 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundProcessContext(_serverId, null, _cts.Token))", span="32-33", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=red, community=0, file="BackgroundProcessContextFacts.cs"];
m0_18 [label="Assert.Equal(''storage'', exception.ParamName)", span="35-35", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundProcessContextFacts.cs"];
m0_19 [label="Exit Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="30-30", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="BackgroundProcessContextFacts.cs"];
m0_23 [label="new BackgroundProcessContext(_serverId, null, _properties, _cts.Token)", span="37-37", cluster="lambda expression", file="BackgroundProcessContextFacts.cs", color=green, community=0];
m0_32 [label="Exit lambda expression", span="46-46", cluster="lambda expression", file="BackgroundProcessContextFacts.cs"];
m0_41 [label="Entry Unk.True", span="", cluster="Unk.True", file="BackgroundProcessContextFacts.cs"];
m0_0 [label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", span="14-14", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", file="BackgroundProcessContextFacts.cs"];
m0_1 [label="_storage = new Mock<JobStorage>()", span="19-19", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", file="BackgroundProcessContextFacts.cs"];
m0_2 [label="_properties = new Dictionary<string, object> {{''key'', ''value''}}", span="20-20", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", file="BackgroundProcessContextFacts.cs", color=green, community=0];
m0_3 [label="Exit Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", span="14-14", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.BackgroundProcessContextFacts()", file="BackgroundProcessContextFacts.cs"];
m0_11 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="BackgroundProcessContextFacts.cs"];
m0_15 [label="new BackgroundProcessContext(null, _storage.Object, _properties, _cts.Token)", span="28-28", cluster="lambda expression", file="BackgroundProcessContextFacts.cs", color=green, community=0];
m0_5 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="BackgroundProcessContextFacts.cs"];
m0_4 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="BackgroundProcessContextFacts.cs"];
m0_12 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="BackgroundProcessContextFacts.cs"];
m0_13 [label="new BackgroundProcessContext(null, _storage.Object, _cts.Token)", span="24-24", cluster="lambda expression", color=red, community=0, file="BackgroundProcessContextFacts.cs"];
m0_14 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="BackgroundProcessContextFacts.cs"];
m0_20 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="BackgroundProcessContextFacts.cs"];
m0_21 [label="new BackgroundProcessContext(_serverId, null, _cts.Token)", span="33-33", cluster="lambda expression", color=red, community=0, file="BackgroundProcessContextFacts.cs"];
m0_22 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="BackgroundProcessContextFacts.cs"];
m0_6 [label="Entry Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", span="21-21", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="BackgroundProcessContextFacts.cs"];
m0_7 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundProcessContext(null, _storage.Object, _cts.Token))", span="23-24", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", color=red, community=0, file="BackgroundProcessContextFacts.cs"];
m0_8 [label="Assert.Equal(''serverId'', exception.ParamName)", span="26-26", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="BackgroundProcessContextFacts.cs"];
m0_9 [label="Exit Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", span="21-21", cluster="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", color=green, community=0, file="BackgroundProcessContextFacts.cs"];
m0_33 [label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts", span="", file="BackgroundProcessContextFacts.cs"];
m1_23 [label="Entry HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", span="43-43", cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", file="BackgroundProcessContextMock.cs"];
m1_24 [label="new JobClient(_connectionMock.Object, null)", span="46-46", cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", file="BackgroundProcessContextMock.cs"];
m1_25 [label="Exit HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", span="43-43", cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", file="BackgroundProcessContextMock.cs"];
m1_36 [label="Entry HangFire.Client.JobClient.CreateJob(HangFire.Common.JobMethod, string[], HangFire.Common.States.JobState)", span="75-75", cluster="HangFire.Client.JobClient.CreateJob(HangFire.Common.JobMethod, string[], HangFire.Common.States.JobState)", file="BackgroundProcessContextMock.cs"];
m1_15 [label="Entry HangFire.Common.JobMethod.JobMethod(System.Type, System.Reflection.MethodInfo)", span="48-48", cluster="HangFire.Common.JobMethod.JobMethod(System.Type, System.Reflection.MethodInfo)", file="BackgroundProcessContextMock.cs"];
m1_9 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="BackgroundProcessContextMock.cs"];
m1_13 [label="Entry JobClient.cstr", span="", cluster="JobClient.cstr", file="BackgroundProcessContextMock.cs"];
m1_16 [label="Entry System.Type.GetMethod(string)", span="0-0", cluster="System.Type.GetMethod(string)", file="BackgroundProcessContextMock.cs"];
m1_37 [label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", span="72-72", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", file="BackgroundProcessContextMock.cs"];
m1_38 [label="_client.CreateJob(_method, new[] { ''hello'', ''3'' }, _stateMock.Object)", span="74-74", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", file="BackgroundProcessContextMock.cs"];
m1_39 [label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", span="72-72", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", file="BackgroundProcessContextMock.cs"];
m1_11 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="BackgroundProcessContextMock.cs"];
m1_8 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="BackgroundProcessContextMock.cs"];
m1_29 [label="Entry Unk.CreateJob", span="", cluster="Unk.CreateJob", file="BackgroundProcessContextMock.cs"];
m1_20 [label="Entry HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", span="34-34", cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", file="BackgroundProcessContextMock.cs"];
m1_21 [label="new JobClient(null, _creatorMock.Object)", span="37-37", cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", file="BackgroundProcessContextMock.cs"];
m1_22 [label="Exit HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", span="34-34", cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", file="BackgroundProcessContextMock.cs"];
m1_30 [label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", span="59-59", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", file="BackgroundProcessContextMock.cs"];
m1_31 [label="_client.CreateJob(_method, null, _stateMock.Object)", span="61-61", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", file="BackgroundProcessContextMock.cs"];
m1_32 [label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", span="59-59", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", file="BackgroundProcessContextMock.cs"];
m1_0 [label="Entry HangFire.Tests.Client.JobClientTests.Initialize()", span="21-21", cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs"];
m1_4 [label="_client = new JobClient(_connectionMock.Object, _creatorMock.Object)", span="27-27", cluster="HangFire.Tests.Client.JobClientTests.Initialize()", color=green, community=0, file="BackgroundProcessContextMock.cs"];
m1_3 [label="_creatorMock = new Mock<JobCreator>()", span="26-26", cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs"];
m1_5 [label="_stateMock = new Mock<JobState>()", span="28-28", cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs"];
m1_1 [label="_connectionMock = new Mock<IStorageConnection>()", span="23-23", cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs"];
m1_2 [label="_connectionMock.Setup(x => x.Storage).Returns(new Mock<JobStorage>().Object)", span="24-24", cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs"];
m1_6 [label="_method = new JobMethod(typeof(JobClientTests), typeof(JobClientTests).GetMethod(''Method''))", span="29-29", cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs"];
m1_7 [label="Exit HangFire.Tests.Client.JobClientTests.Initialize()", span="21-21", cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="BackgroundProcessContextMock.cs"];
m1_33 [label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", span="66-66", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", file="BackgroundProcessContextMock.cs"];
m1_34 [label="_client.CreateJob(_method, new string[0], null)", span="68-68", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", file="BackgroundProcessContextMock.cs"];
m1_35 [label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", span="66-66", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", file="BackgroundProcessContextMock.cs"];
m1_17 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="BackgroundProcessContextMock.cs"];
m1_18 [label="x.Storage", span="24-24", cluster="lambda expression", file="BackgroundProcessContextMock.cs"];
m1_19 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="BackgroundProcessContextMock.cs"];
m1_14 [label="Entry Mock<JobState>.cstr", span="", cluster="Mock<JobState>.cstr", file="BackgroundProcessContextMock.cs"];
m1_12 [label="Entry Mock<JobCreator>.cstr", span="", cluster="Mock<JobCreator>.cstr", file="BackgroundProcessContextMock.cs"];
m1_10 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="BackgroundProcessContextMock.cs"];
m1_26 [label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", span="52-52", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", file="BackgroundProcessContextMock.cs"];
m1_27 [label="_client.CreateJob(null, new string[0], _stateMock.Object)", span="54-54", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", file="BackgroundProcessContextMock.cs"];
m1_28 [label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", span="52-52", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", file="BackgroundProcessContextMock.cs"];
m1_47 [label="HangFire.Tests.Client.JobClientTests", span="", file="BackgroundProcessContextMock.cs"];
m3_0 [label="Entry Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", span="23-23", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs"];
m3_1 [label="innerProcess == null", span="25-25", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs"];
m3_3 [label="InnerProcess = innerProcess", span="26-26", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs"];
m3_2 [label="throw new ArgumentNullException(''innerProcess'');", span="25-25", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs"];
m3_4 [label="Exit Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", span="23-23", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs"];
m3_13 [label="Entry Hangfire.Server.InfiniteLoopProcess.ToString()", span="40-40", cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopProcess.cs"];
m3_14 [label="return InnerProcess.ToString();", span="42-42", cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopProcess.cs"];
m3_15 [label="Exit Hangfire.Server.InfiniteLoopProcess.ToString()", span="40-40", cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopProcess.cs"];
m3_6 [label="Entry Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="31-31", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs"];
m3_7 [label=true, span="33-33", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="InfiniteLoopProcess.cs"];
m3_8 [label="context.CancellationToken.ThrowIfCancellationRequested()", span="35-35", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", color=red, community=0, file="InfiniteLoopProcess.cs"];
m3_9 [label="InnerProcess.Execute(context)", span="36-36", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs"];
m3_10 [label="Exit Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="31-31", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs"];
m3_12 [label="Entry Hangfire.Server.IServerProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="26-26", cluster="Hangfire.Server.IServerProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs"];
m3_16 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="InfiniteLoopProcess.cs"];
m3_11 [label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0", cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="InfiniteLoopProcess.cs"];
m3_17 [label="Hangfire.Server.InfiniteLoopProcess", span="", file="InfiniteLoopProcess.cs"];
m4_31 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_67 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheServerComponentRunner()", span="80-80", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheServerComponentRunner()", file="RecurringJobScheduler.cs"];
m4_82 [label="_serverMock.Object.Dispose()", span="98-98", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", file="RecurringJobScheduler.cs"];
m4_30 [label="new BackgroundJobServer(WorkerCount, null, _storage.Object)", span="42-42", cluster="lambda expression", file="RecurringJobScheduler.cs", color=green, community=0];
m4_98 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", span="115-115", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs"];
m4_99 [label="var server = CreateServer()", span="118-118", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs"];
m4_102 [label="var componentTypes = runners.OfType<ServerComponentRunner>()\r\n                .Select(x => x.Component)\r\n                .Select(x => x.GetType())\r\n                .ToArray()", span="126-129", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs"];
m4_101 [label="Assert.True(runners.Select(x => x.GetType()).Contains(typeof(WorkerManager)))", span="124-124", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs"];
m4_100 [label="var runners = server.GetServerComponentsRunner()", span="121-121", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs"];
m4_103 [label="Assert.Contains(typeof(ServerHeartbeat), componentTypes)", span="131-131", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs"];
m4_104 [label="Assert.Contains(typeof(ServerWatchdog), componentTypes)", span="132-132", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs"];
m4_105 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", span="115-115", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="RecurringJobScheduler.cs"];
m4_84 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", span="96-96", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", file="RecurringJobScheduler.cs"];
m4_38 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_39 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="57-57", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobScheduler.cs"];
m4_40 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobServer(WorkerCount, Queues, null))", span="59-60", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobScheduler.cs", color=green, community=0];
m4_76 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheServerComponentRunner()", span="88-88", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheServerComponentRunner()", file="RecurringJobScheduler.cs"];
m4_46 [label="var timeZone = recurringJob.ContainsKey(''TimeZoneId'')\r\n                    ? TimeZoneInfo.FindSystemTimeZoneById(recurringJob[''TimeZoneId''])\r\n                    : TimeZoneInfo.Utc", span="117-119", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_20 [label="var recurringJobIds = connection.GetAllItemsFromSet(''recurring-jobs'')", span="69-69", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs"];
m4_95 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", span="155-155", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", file="RecurringJobScheduler.cs"];
m4_139 [label="return new BackgroundJobServer(WorkerCount, Queues, _storage.Object);", span="157-157", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", file="RecurringJobScheduler.cs"];
m4_140 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", span="155-155", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", file="RecurringJobScheduler.cs"];
m4_25 [label=JobLoadException, span="85-85", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs"];
m4_26 [label="Logger.WarnException(\r\n                            String.Format(\r\n                                ''Recurring job '{0}' can not be scheduled due to job load exception.'',\r\n                                recurringJobId),\r\n                            ex)", span="87-91", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RecurringJobScheduler.cs"];
m4_27 [label="_throttler.Delay(context.CancellationToken)", span="95-95", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RecurringJobScheduler.cs"];
m4_28 [label="Exit Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="62-62", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs"];
m4_71 [label="x.Start()", span="84-84", cluster="lambda expression", file="RecurringJobScheduler.cs", color=green, community=0];
m4_77 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="RecurringJobScheduler.cs"];
m4_74 [label="_serverMock.Object.Stop()", span="90-90", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheServerComponentRunner()", file="RecurringJobScheduler.cs"];
m4_83 [label="_runner.Verify(x => x.Dispose())", span="100-100", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", file="RecurringJobScheduler.cs"];
m4_115 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="RecurringJobScheduler.cs"];
m4_41 [label="Assert.Equal(''storage'', exception.ParamName)", span="62-62", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobScheduler.cs", color=green, community=0];
m4_73 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobScheduler.cs"];
m4_75 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="RecurringJobScheduler.cs"];
m4_33 [label="var exception = Assert.Throws<ArgumentException>(\r\n                () => new BackgroundJobServer(WorkerCount, new string[0], _storage.Object))", span="50-51", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsEmpty()", file="RecurringJobScheduler.cs", color=green, community=0];
m4_51 [label="var state = new EnqueuedState { Reason = ''Triggered by recurring job scheduler'' }", span="131-131", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_81 [label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68", cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="RecurringJobScheduler.cs"];
m4_7 [label="instantFactory == null", span="54-54", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m4_69 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="RecurringJobScheduler.cs"];
m4_0 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", span="17-17", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="RecurringJobScheduler.cs"];
m4_1 [label="_storage = new Mock<JobStorage>()", span="19-19", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="RecurringJobScheduler.cs"];
m4_19 [label="connection.AcquireDistributedLock(''recurring-jobs:lock'', LockTimeout)", span="67-67", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs"];
m4_36 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_15 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenWorkerCountIsEqualToZeroOrNegative()", span="30-30", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenWorkerCountIsEqualToZeroOrNegative()", file="RecurringJobScheduler.cs"];
m4_16 [label="Entry Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="62-62", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RecurringJobScheduler.cs"];
m4_17 [label="_throttler.Throttle(context.CancellationToken)", span="64-64", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RecurringJobScheduler.cs"];
m4_18 [label="var connection = context.Storage.GetConnection()", span="66-66", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJobScheduler.cs"];
m4_123 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", span="136-136", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs"];
m4_128 [label="var components = runners.OfType<ServerComponentRunner>()\r\n                .Select(x => x.Component)\r\n                .ToArray()", span="148-150", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", color=green, community=0, file="RecurringJobScheduler.cs"];
m4_127 [label="var runners = server.GetServerComponentsRunner()", span="145-145", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs"];
m4_129 [label="Assert.Contains(storageComponent.Object, components)", span="152-152", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs"];
m4_125 [label="_storage.Setup(x => x.GetComponents()).Returns(new[] { storageComponent.Object })", span="140-140", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs"];
m4_126 [label="var server = CreateServer()", span="142-142", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs"];
m4_124 [label="var storageComponent = new Mock<IServerComponent>()", span="139-139", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs"];
m4_130 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", span="136-136", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="RecurringJobScheduler.cs"];
m4_70 [label="Entry lambda expression", span="84-84", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_32 [label="Entry Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55", cluster="Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="RecurringJobScheduler.cs"];
m4_34 [label="Entry Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64", cluster="Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", color=green, community=0, file="RecurringJobScheduler.cs"];
m4_35 [label="Entry Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", span="104-104", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_47 [label="var instant = _instantFactory(cronSchedule, timeZone)", span="121-121", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_48 [label="var lastExecutionTime = recurringJob.ContainsKey(''LastExecution'')\r\n                    ? JobHelper.DeserializeDateTime(recurringJob[''LastExecution''])\r\n                    : (DateTime?)null", span="123-125", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_49 [label="var changedFields = new Dictionary<string, string>()", span="127-127", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_50 [label="instant.GetNextInstants(lastExecutionTime).Any()", span="129-129", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_2 [label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", span="43-43", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", file="RecurringJobScheduler.cs"];
m4_3 [label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", span="43-43", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", file="RecurringJobScheduler.cs"];
m4_4 [label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="48-48", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m4_5 [label="factory == null", span="53-53", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m4_135 [label="Entry Unk.GetComponents", span="", cluster="Unk.GetComponents", file="RecurringJobScheduler.cs"];
m4_55 [label="var backgroundJob = _factory.Create(context)", span="138-138", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", color=red, community=0];
m4_78 [label="Entry lambda expression", span="92-92", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_63 [label=TimeZoneNotFoundException, span="159-159", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_56 [label="var jobId = backgroundJob != null ? backgroundJob.Id : null", span="139-139", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_57 [label="String.IsNullOrEmpty(jobId)", span="141-141", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=green, community=0, file="RecurringJobScheduler.cs"];
m4_58 [label="Logger.DebugFormat(\r\n                            ''Recurring job '{0}' execution at '{1}' has been canceled.'',\r\n                            recurringJobId,\r\n                            instant.NowInstant)", span="143-146", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=green, community=0, file="RecurringJobScheduler.cs"];
m4_59 [label="changedFields.Add(''LastExecution'', JobHelper.SerializeDateTime(instant.NowInstant))", span="149-149", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_68 [label="Entry Unk.Start", span="", cluster="Unk.Start", file="RecurringJobScheduler.cs"];
m4_29 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_111 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="RecurringJobScheduler.cs"];
m4_89 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", span="104-104", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="RecurringJobScheduler.cs"];
m4_90 [label="var server = CreateServer()", span="106-106", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="RecurringJobScheduler.cs"];
m4_93 [label="Assert.IsType<ServerCore>(((ServerComponentRunner) runner).Component)", span="111-111", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="RecurringJobScheduler.cs"];
m4_91 [label="var runner = server.GetServerRunner()", span="108-108", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="RecurringJobScheduler.cs"];
m4_92 [label="Assert.NotNull(runner)", span="110-110", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="RecurringJobScheduler.cs"];
m4_94 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", span="104-104", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="RecurringJobScheduler.cs"];
m4_97 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="RecurringJobScheduler.cs"];
m4_66 [label="_runner.Verify(x => x.Start())", span="84-84", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheServerComponentRunner()", file="RecurringJobScheduler.cs", color=green, community=0];
m4_9 [label="throttler == null", span="55-55", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m4_85 [label="Entry Hangfire.Logging.ILog.ErrorException(string, System.Exception)", span="159-159", cluster="Hangfire.Logging.ILog.ErrorException(string, System.Exception)", file="RecurringJobScheduler.cs"];
m4_72 [label="Exit lambda expression", span="84-84", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_8 [label="throw new ArgumentNullException(''instantFactory'');", span="54-54", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m4_131 [label="Entry Mock<IServerComponent>.cstr", span="", cluster="Mock<IServerComponent>.cstr", file="RecurringJobScheduler.cs"];
m4_64 [label="Logger.ErrorException(\r\n                    String.Format(''Recurring job '{0}' was not triggered: {1}.'', recurringJobId, ex.Message),\r\n                    ex)", span="161-163", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_65 [label="Exit Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", span="104-104", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_24 [label="Entry BackgroundJobServer.cstr", span="", cluster="BackgroundJobServer.cstr", file="RecurringJobScheduler.cs"];
m4_22 [label="new BackgroundJobServer(0, Queues, _storage.Object)", span="33-33", cluster="lambda expression", file="RecurringJobScheduler.cs", color=green, community=0];
m4_21 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_23 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_37 [label="new BackgroundJobServer(WorkerCount, new string[0], _storage.Object)", span="51-51", cluster="lambda expression", file="RecurringJobScheduler.cs", color=green, community=0];
m4_112 [label="Entry lambda expression", span="124-124", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_43 [label="var job = serializedJob.Deserialize()", span="111-111", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_44 [label="var cron = recurringJob[''Cron'']", span="112-112", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=green, community=0, file="RecurringJobScheduler.cs"];
m4_45 [label="var cronSchedule = CrontabSchedule.Parse(cron)", span="113-113", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_60 [label="changedFields.Add(''LastJobId'', jobId ?? String.Empty)", span="150-150", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_61 [label="changedFields.Add(''NextExecution'', JobHelper.SerializeDateTime(instant.NextInstant))", span="153-153", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", color=green, community=0, file="RecurringJobScheduler.cs"];
m4_62 [label="connection.SetRangeInHash(\r\n                    String.Format(''recurring-job:{0}'', recurringJobId),\r\n                    changedFields)", span="155-157", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_136 [label="Entry lambda expression", span="149-149", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_137 [label="x.Component", span="149-149", cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs"];
m4_138 [label="Exit lambda expression", span="149-149", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_11 [label="_factory = factory", span="57-57", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m4_86 [label="Hangfire.Server.RecurringJobScheduler", span="", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_132 [label="Entry lambda expression", span="140-140", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_52 [label="recurringJob.ContainsKey(''Queue'') && !String.IsNullOrEmpty(recurringJob[''Queue''])", span="132-132", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_116 [label="Entry lambda expression", span="127-127", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_119 [label="Entry lambda expression", span="128-128", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_13 [label="_throttler = throttler", span="59-59", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m4_12 [label="_instantFactory = instantFactory", span="58-58", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m4_79 [label="Entry Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", span="31-31", cluster="Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", file="RecurringJobScheduler.cs"];
m4_80 [label="Entry Hangfire.Logging.ILog.DebugFormat(string, params object[])", span="122-122", cluster="Hangfire.Logging.ILog.DebugFormat(string, params object[])", file="RecurringJobScheduler.cs"];
m4_87 [label="x.Dispose()", span="100-100", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_88 [label="Exit lambda expression", span="100-100", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_134 [label="Exit lambda expression", span="140-140", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_133 [label="x.GetComponents()", span="140-140", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_54 [label="var context = new CreateContext(storage, connection, job, state)", span="137-137", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs", color=red, community=0];
m4_53 [label="state.Queue = recurringJob[''Queue'']", span="134-134", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_118 [label="Exit lambda expression", span="127-127", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_117 [label="x.Component", span="127-127", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_121 [label="Exit lambda expression", span="128-128", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_120 [label="x.GetType()", span="128-128", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_113 [label="x.GetType()", span="124-124", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_114 [label="Exit lambda expression", span="124-124", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m4_110 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="RecurringJobScheduler.cs"];
m4_106 [label="Entry HangFire.BackgroundJobServer.GetServerComponentsRunner()", span="105-105", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", file="RecurringJobScheduler.cs"];
m4_108 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="RecurringJobScheduler.cs"];
m4_107 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="RecurringJobScheduler.cs"];
m4_14 [label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="48-48", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="RecurringJobScheduler.cs"];
m4_122 [label="Entry Unk.GetType", span="", cluster="Unk.GetType", file="RecurringJobScheduler.cs"];
m4_42 [label="var serializedJob = JobHelper.FromJson<InvocationData>(recurringJob[''Job''])", span="110-110", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.Dictionary<string, string>)", file="RecurringJobScheduler.cs"];
m4_6 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="RecurringJobScheduler.cs"];
m4_10 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="RecurringJobScheduler.cs"];
m4_109 [label="Entry Unk.True", span="", cluster="Unk.True", file="RecurringJobScheduler.cs"];
m4_96 [label="Entry HangFire.BackgroundJobServer.GetServerRunner()", span="83-83", cluster="HangFire.BackgroundJobServer.GetServerRunner()", file="RecurringJobScheduler.cs"];
m4_141 [label="HangFire.Core.Tests.BackgroundJobServerFacts", span="", file="RecurringJobScheduler.cs"];
n12 -> n5  [key=1, style=dashed, color=red, label="Hangfire.Server.BackgroundProcessContext"];
n12 -> n6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
n12 -> n7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
n12 -> n8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
n0 -> n1  [key=0, style=solid];
n0 -> n3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
n0 -> n6  [key=1, style=dashed, color=darkseagreen4, label=string];
n0 -> n7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
n0 -> n8  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n3 -> n5  [key=0, style=solid, color=red];
n6 -> n7  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n2 -> n9  [key=0, style=solid];
n2 -> n10  [key=2, style=dotted];
n4 -> n9  [key=0, style=solid];
n4 -> n10  [key=2, style=dotted];
n5 -> n6  [key=0, style=solid, color=red];
n5 -> n11  [key=2, style=dotted, color=red];
n9 -> n0  [key=0, style=bold, color=blue];
d7 -> d8  [key=0, style=solid, color=green];
d7 -> d9  [key=0, style=solid, color=green];
d4 -> d7  [key=1, style=dashed, color=green, label="Hangfire.Client.IBackgroundJobFactory"];
d4 -> d8  [key=1, style=dashed, color=green, label="Hangfire.Client.IBackgroundJobFactory"];
d4 -> d5  [key=0, style=solid];
d4 -> d6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
d4 -> d9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
d4 -> d10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.IBackgroundJobFactory"];
d5 -> d7  [key=0, style=solid, color=green];
d5 -> d6  [key=0, style=solid];
d8 -> d11  [key=0, style=solid, color=green];
d8 -> d12  [key=2, style=dotted, color=green];
d8 -> d13  [key=2, style=dotted, color=green];
d9 -> d10  [key=0, style=solid];
d11 -> d4  [key=0, style=bold, color=blue];
d6 -> d11  [key=0, style=solid];
d6 -> d12  [key=2, style=dotted];
d6 -> d13  [key=2, style=dotted];
d10 -> d11  [key=0, style=solid];
d90 -> d9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.RecurringJobManager"];
d90 -> d10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.RecurringJobManager"];
d90 -> d24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.RecurringJobManager"];
d90 -> d53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.RecurringJobManager"];
d90 -> d61  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.RecurringJobManager"];
d90 -> d63  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.RecurringJobManager"];
d90 -> d74  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.RecurringJobManager"];
d16 -> d12  [key=2, style=dotted];
d16 -> d13  [key=2, style=dotted];
d16 -> d38  [key=0, style=solid];
d18 -> d12  [key=2, style=dotted];
d18 -> d13  [key=2, style=dotted];
d18 -> d38  [key=0, style=solid];
d20 -> d12  [key=2, style=dotted];
d20 -> d13  [key=2, style=dotted];
d20 -> d38  [key=0, style=solid];
d22 -> d12  [key=2, style=dotted];
d22 -> d13  [key=2, style=dotted];
d22 -> d38  [key=0, style=solid];
d52 -> d12  [key=2, style=dotted];
d52 -> d13  [key=2, style=dotted];
d52 -> d64  [key=0, style=solid];
d73 -> d12  [key=2, style=dotted];
d73 -> d13  [key=2, style=dotted];
d73 -> d79  [key=0, style=solid];
d85 -> d13  [key=2, style=dotted];
d85 -> d86  [key=0, style=solid];
d85 -> d89  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d24 -> d40  [key=2, style=dotted];
d24 -> d31  [key=1, style=dashed, color=darkseagreen4, label=connection];
d24 -> d34  [key=1, style=dashed, color=darkseagreen4, label=connection];
d53 -> d54  [key=0, style=solid];
d53 -> d40  [key=2, style=dotted];
d53 -> d61  [key=1, style=dashed, color=darkseagreen4, label=connection];
d61 -> d62  [key=0, style=solid];
d61 -> d69  [key=2, style=dotted];
d61 -> d63  [key=1, style=dashed, color=darkseagreen4, label=context];
d63 -> d64  [key=0, style=solid];
d63 -> d70  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d74 -> d40  [key=2, style=dotted];
d14 -> d16  [key=1, style=dashed, color=darkseagreen4, label=string];
d14 -> d18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
d14 -> d20  [key=1, style=dashed, color=darkseagreen4, label=string];
d14 -> d22  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.RecurringJobOptions"];
d14 -> d15  [key=0, style=solid];
d14 -> d17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
d14 -> d19  [key=1, style=dashed, color=darkseagreen4, label=string];
d14 -> d21  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.RecurringJobOptions"];
d14 -> d23  [key=1, style=dashed, color=darkseagreen4, label=string];
d14 -> d26  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
d14 -> d28  [key=1, style=dashed, color=darkseagreen4, label=string];
d14 -> d29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.RecurringJobOptions"];
d14 -> d30  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.RecurringJobOptions"];
d14 -> d31  [key=1, style=dashed, color=darkseagreen4, label=string];
d14 -> d35  [key=1, style=dashed, color=darkseagreen4, label=string];
d14 -> d36  [key=1, style=dashed, color=darkseagreen4, label=string];
d15 -> d16  [key=0, style=solid];
d15 -> d17  [key=0, style=solid];
d38 -> d14  [key=0, style=bold, color=blue];
d17 -> d18  [key=0, style=solid];
d17 -> d19  [key=0, style=solid];
d19 -> d20  [key=0, style=solid];
d19 -> d21  [key=0, style=solid];
d21 -> d22  [key=0, style=solid];
d21 -> d23  [key=0, style=solid];
d50 -> d52  [key=1, style=dashed, color=darkseagreen4, label=string];
d50 -> d51  [key=0, style=solid];
d50 -> d54  [key=1, style=dashed, color=darkseagreen4, label=string];
d50 -> d62  [key=1, style=dashed, color=darkseagreen4, label=string];
d51 -> d52  [key=0, style=solid];
d51 -> d53  [key=0, style=solid];
d64 -> d50  [key=0, style=bold, color=blue];
d71 -> d73  [key=1, style=dashed, color=darkseagreen4, label=string];
d71 -> d72  [key=0, style=solid];
d71 -> d76  [key=1, style=dashed, color=darkseagreen4, label=string];
d71 -> d77  [key=1, style=dashed, color=darkseagreen4, label=string];
d72 -> d73  [key=0, style=solid];
d72 -> d74  [key=0, style=solid];
d79 -> d71  [key=0, style=bold, color=blue];
d39 -> d85  [key=1, style=dashed, color=darkseagreen4, label=string];
d39 -> d82  [key=0, style=solid];
d84 -> d85  [key=0, style=solid];
d86 -> d39  [key=0, style=bold, color=blue];
d23 -> d24  [key=0, style=solid];
d23 -> d39  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d25 -> d41  [key=2, style=dotted];
d25 -> d27  [key=1, style=dashed, color=darkseagreen4, label=recurringJob];
d25 -> d28  [key=1, style=dashed, color=darkseagreen4, label=recurringJob];
d25 -> d29  [key=1, style=dashed, color=darkseagreen4, label=recurringJob];
d25 -> d30  [key=1, style=dashed, color=darkseagreen4, label=recurringJob];
d25 -> d33  [key=1, style=dashed, color=darkseagreen4, label=recurringJob];
d25 -> d35  [key=1, style=dashed, color=darkseagreen4, label=recurringJob];
d31 -> d32  [key=0, style=solid];
d31 -> d44  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d34 -> d46  [key=2, style=dotted];
d34 -> d36  [key=1, style=dashed, color=darkseagreen4, label=transaction];
d34 -> d37  [key=1, style=dashed, color=darkseagreen4, label=transaction];
d54 -> d55  [key=0, style=solid];
d54 -> d44  [key=2, style=dotted];
d54 -> d57  [key=1, style=dashed, color=darkseagreen4, label=hash];
d54 -> d59  [key=1, style=dashed, color=darkseagreen4, label=hash];
d54 -> d60  [key=1, style=dashed, color=darkseagreen4, label=hash];
d57 -> d61  [key=1, style=dashed, color=darkseagreen4, label=job];
d57 -> d58  [key=0, style=solid];
d57 -> d65  [key=2, style=dotted];
d57 -> d66  [key=2, style=dotted];
d59 -> d61  [key=0, style=solid];
d59 -> d60  [key=0, style=solid];
d59 -> d68  [key=2, style=dotted];
d60 -> d61  [key=0, style=solid];
d58 -> d61  [key=1, style=dashed, color=darkseagreen4, label=state];
d58 -> d59  [key=0, style=solid];
d58 -> d60  [key=1, style=dashed, color=darkseagreen4, label=state];
d58 -> d67  [key=2, style=dotted];
d62 -> d63  [key=0, style=solid];
d75 -> d76  [key=0, style=solid];
d75 -> d46  [key=2, style=dotted];
d75 -> d77  [key=1, style=dashed, color=darkseagreen4, label=transaction];
d75 -> d78  [key=1, style=dashed, color=darkseagreen4, label=transaction];
d26 -> d27  [key=0, style=solid];
d26 -> d42  [key=2, style=dotted];
d28 -> d29  [key=0, style=solid];
d29 -> d30  [key=0, style=solid];
d30 -> d31  [key=0, style=solid];
d35 -> d36  [key=0, style=solid];
d35 -> d47  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d36 -> d48  [key=2, style=dotted];
d37 -> d38  [key=0, style=solid];
d37 -> d49  [key=2, style=dotted];
d56 -> d64  [key=0, style=solid];
d76 -> d77  [key=0, style=solid];
d76 -> d80  [key=2, style=dotted];
d77 -> d78  [key=0, style=solid];
d77 -> d81  [key=2, style=dotted];
d78 -> d79  [key=0, style=solid];
d78 -> d49  [key=2, style=dotted];
d82 -> d83  [key=0, style=solid];
d82 -> d87  [key=2, style=dotted];
d83 -> d84  [key=0, style=solid];
d83 -> d86  [key=0, style=solid];
d83 -> d88  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d27 -> d43  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d33 -> d45  [key=2, style=dotted];
d32 -> d34  [key=0, style=solid];
d32 -> d33  [key=0, style=solid];
d55 -> d57  [key=0, style=solid];
d55 -> d56  [key=0, style=solid];
m0_31 -> m0_32  [key=0, style=solid, color=green];
m0_31 -> m0_15  [key=2, style=dotted, color=green];
m0_24 -> m0_25  [key=0, style=solid, color=red];
m0_24 -> m0_34  [key=0, style=solid, color=green];
m0_25 -> m0_26  [key=0, style=solid, color=red];
m0_25 -> m0_15  [key=2, style=dotted, color=red];
m0_25 -> m0_27  [key=1, style=dashed, color=red, label=context];
m0_25 -> m0_28  [key=1, style=dashed, color=red, label=context];
m0_25 -> m0_29  [key=1, style=dashed, color=red, label=context];
m0_26 -> m0_27  [key=0, style=solid, color=green];
m0_26 -> m0_11  [key=2, style=dotted];
m0_26 -> m0_36  [key=0, style=solid, color=green];
m0_27 -> m0_28  [key=0, style=solid, color=green];
m0_27 -> m0_31  [key=2, style=dotted, color=red];
m0_27 -> m0_10  [key=2, style=dotted, color=green];
m0_27 -> m0_30  [key=1, style=dashed, color=green, label="lambda expression"];
m0_28 -> m0_29  [key=0, style=solid, color=green];
m0_28 -> m0_32  [key=2, style=dotted];
m0_28 -> m0_11  [key=2, style=dotted, color=green];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_11  [key=2, style=dotted];
m0_29 -> m0_26  [key=0, style=bold, color=blue];
m0_34 -> m0_26  [key=0, style=solid, color=green];
m0_34 -> m0_15  [key=2, style=dotted, color=green];
m0_34 -> m0_36  [key=1, style=dashed, color=green, label=context];
m0_34 -> m0_28  [key=1, style=dashed, color=green, label=context];
m0_34 -> m0_29  [key=1, style=dashed, color=green, label=context];
m0_36 -> m0_28  [key=0, style=solid, color=green];
m0_36 -> m0_40  [key=2, style=dotted, color=green];
m0_36 -> m0_41  [key=2, style=dotted, color=green];
m0_30 -> m0_24  [key=0, style=bold, color=blue];
m0_30 -> m0_31  [key=0, style=solid, color=green];
m0_16 -> m0_17  [key=0, style=solid, color=red];
m0_16 -> m0_19  [key=0, style=solid, color=green];
m0_17 -> m0_18  [key=0, style=solid, color=red];
m0_17 -> m0_10  [key=2, style=dotted, color=red];
m0_17 -> m0_20  [key=1, style=dashed, color=red, label="lambda expression"];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_11  [key=2, style=dotted];
m0_19 -> m0_18  [key=0, style=solid, color=green];
m0_19 -> m0_10  [key=2, style=dotted, color=green];
m0_19 -> m0_20  [key=1, style=dashed, color=green, label="lambda expression"];
m0_19 -> m0_16  [key=0, style=bold, color=blue];
m0_23 -> m0_22  [key=0, style=solid, color=green];
m0_23 -> m0_25  [key=2, style=dotted, color=green];
m0_32 -> m0_30  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> m0_4  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid, color=green];
m0_2 -> m0_5  [key=2, style=dotted];
m0_2 -> d41  [key=2, style=dotted, color=green];
m0_3 -> m0_3  [key=0, style=solid];
m0_3 -> m0_5  [key=2, style=dotted];
m0_3 -> m0_0  [key=0, style=bold, color=blue];
m0_15 -> m0_14  [key=0, style=solid, color=green];
m0_15 -> m0_15  [key=2, style=dotted, color=green];
m0_12 -> m0_13  [key=0, style=solid, color=red];
m0_12 -> m0_15  [key=0, style=solid, color=green];
m0_13 -> m0_14  [key=0, style=solid, color=red];
m0_13 -> m0_15  [key=2, style=dotted, color=red];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_20 -> m0_21  [key=0, style=solid, color=red];
m0_20 -> m0_23  [key=0, style=solid, color=green];
m0_21 -> m0_22  [key=0, style=solid, color=red];
m0_21 -> m0_23  [key=2, style=dotted, color=red];
m0_22 -> m0_20  [key=0, style=bold, color=blue];
m0_6 -> m0_7  [key=0, style=solid, color=red];
m0_6 -> m0_9  [key=0, style=solid, color=green];
m0_7 -> m0_8  [key=0, style=solid, color=red];
m0_7 -> m0_10  [key=2, style=dotted, color=red];
m0_7 -> m0_12  [key=1, style=dashed, color=red, label="lambda expression"];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_11  [key=2, style=dotted];
m0_9 -> m0_8  [key=0, style=solid, color=green];
m0_9 -> m0_10  [key=2, style=dotted, color=green];
m0_9 -> m0_12  [key=1, style=dashed, color=green, label="lambda expression"];
m0_9 -> m0_6  [key=0, style=bold, color=blue];
m0_33 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_2  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_7  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_13  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_17  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_21  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_25  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_9  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_15  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_19  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_23  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_27  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_31  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_34  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_36  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m0_33 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.BackgroundProcessContextFacts"];
m1_23 -> m1_24  [key=0, style=solid];
m1_24 -> m1_13  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid];
m1_25 -> m1_23  [key=0, style=bold, color=blue];
m1_37 -> m1_38  [key=0, style=solid];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_29  [key=2, style=dotted];
m1_39 -> m1_37  [key=0, style=bold, color=blue];
m1_20 -> m1_21  [key=0, style=solid];
m1_21 -> m1_13  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_22 -> m1_20  [key=0, style=bold, color=blue];
m1_30 -> m1_31  [key=0, style=solid];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_29  [key=2, style=dotted];
m1_32 -> m1_30  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_4 -> m1_5  [key=0, style=solid, color=green];
m1_4 -> m1_13  [key=2, style=dotted, color=green];
m1_3 -> m1_4  [key=0, style=solid, color=green];
m1_3 -> m1_12  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_14  [key=2, style=dotted];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_9  [key=2, style=dotted];
m1_2 -> m1_10  [key=2, style=dotted];
m1_2 -> m1_11  [key=2, style=dotted];
m1_2 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_15  [key=2, style=dotted];
m1_6 -> m1_16  [key=2, style=dotted];
m1_7 -> m1_0  [key=0, style=bold, color=blue];
m1_33 -> m1_34  [key=0, style=solid];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_36  [key=2, style=dotted];
m1_35 -> m1_33  [key=0, style=bold, color=blue];
m1_17 -> m1_18  [key=0, style=solid];
m1_18 -> m1_19  [key=0, style=solid];
m1_19 -> m1_17  [key=0, style=bold, color=blue];
m1_26 -> m1_27  [key=0, style=solid];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_29  [key=2, style=dotted];
m1_28 -> m1_26  [key=0, style=bold, color=blue];
m1_47 -> m1_4  [key=1, style=dashed, color=green, label="HangFire.Tests.Client.JobClientTests"];
m1_47 -> m1_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m1_47 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m1_47 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m1_47 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m1_47 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m1_47 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m1_47 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m1_47 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m1_47 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m1_47 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m1_47 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.IServerProcess"];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=0, style=solid];
m3_3 -> m3_4  [key=0, style=solid];
m3_2 -> m3_4  [key=0, style=solid];
m3_2 -> d12  [key=2, style=dotted];
m3_4 -> m3_0  [key=0, style=bold, color=blue];
m3_13 -> m3_14  [key=0, style=solid];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_16  [key=2, style=dotted];
m3_15 -> m3_13  [key=0, style=bold, color=blue];
m3_6 -> m3_7  [key=0, style=solid, color=green];
m3_6 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m3_6 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m3_7 -> m3_8  [key=0, style=solid, color=green];
m3_7 -> m3_10  [key=0, style=solid, color=green];
m3_8 -> m3_9  [key=0, style=solid, color=red];
m3_8 -> m3_11  [key=2, style=dotted, color=red];
m3_9 -> m3_7  [key=0, style=solid, color=green];
m3_9 -> m3_12  [key=2, style=dotted];
m3_10 -> m3_6  [key=0, style=bold, color=blue];
m3_17 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.InfiniteLoopProcess"];
m3_17 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.InfiniteLoopProcess"];
m3_17 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.InfiniteLoopProcess"];
m4_31 -> m4_29  [key=0, style=bold, color=blue];
m4_67 -> m4_64  [key=0, style=bold, color=blue];
m4_82 -> m4_83  [key=0, style=solid];
m4_82 -> m4_85  [key=2, style=dotted];
m4_30 -> m4_31  [key=0, style=solid, color=green];
m4_30 -> m4_24  [key=2, style=dotted, color=green];
m4_98 -> m4_99  [key=0, style=solid];
m4_99 -> m4_100  [key=0, style=solid];
m4_99 -> m4_95  [key=2, style=dotted];
m4_102 -> m4_110  [key=2, style=dotted];
m4_102 -> m4_107  [key=2, style=dotted];
m4_102 -> m4_111  [key=2, style=dotted];
m4_102 -> m4_103  [key=0, style=solid];
m4_102 -> m4_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_102 -> m4_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_102 -> m4_104  [key=1, style=dashed, color=darkseagreen4, label=componentTypes];
m4_101 -> m4_107  [key=2, style=dotted];
m4_101 -> m4_108  [key=2, style=dotted];
m4_101 -> m4_102  [key=0, style=solid];
m4_101 -> m4_109  [key=2, style=dotted];
m4_101 -> m4_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_100 -> m4_106  [key=2, style=dotted];
m4_100 -> m4_102  [key=1, style=dashed, color=darkseagreen4, label=runners];
m4_100 -> m4_101  [key=0, style=solid];
m4_103 -> m4_108  [key=2, style=dotted];
m4_103 -> m4_104  [key=0, style=solid];
m4_104 -> m4_108  [key=2, style=dotted];
m4_104 -> m4_105  [key=0, style=solid];
m4_105 -> m4_98  [key=0, style=bold, color=blue];
m4_84 -> m4_81  [key=0, style=bold, color=blue];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_36  [key=0, style=bold, color=blue];
m4_39 -> m4_40  [key=0, style=solid, color=green];
m4_39 -> m4_41  [key=2, style=dotted];
m4_40 -> m4_38  [key=0, style=bold, color=blue];
m4_40 -> m4_41  [key=0, style=solid, color=green];
m4_40 -> m4_19  [key=2, style=dotted, color=green];
m4_40 -> m4_43  [key=1, style=dashed, color=green, label="lambda expression"];
m4_76 -> m4_73  [key=0, style=bold, color=blue];
m4_46 -> m4_47  [key=0, style=solid];
m4_46 -> m4_69  [key=2, style=dotted];
m4_46 -> m4_70  [key=2, style=dotted];
m4_20 -> m4_21  [key=0, style=solid];
m4_20 -> m4_32  [key=2, style=dotted];
m4_95 -> m4_139  [key=0, style=solid];
m4_139 -> m4_24  [key=2, style=dotted];
m4_139 -> m4_140  [key=0, style=solid];
m4_140 -> m4_95  [key=0, style=bold, color=blue];
m4_25 -> m4_26  [key=0, style=solid, color=green];
m4_26 -> m4_27  [key=0, style=solid, color=green];
m4_26 -> m4_19  [key=2, style=dotted, color=green];
m4_26 -> m4_29  [key=1, style=dashed, color=green, label="lambda expression"];
m4_26 -> m4_21  [key=0, style=solid];
m4_26 -> m4_33  [key=2, style=dotted];
m4_26 -> m4_36  [key=2, style=dotted];
m4_27 -> m4_28  [key=0, style=solid, color=green];
m4_27 -> m4_20  [key=2, style=dotted, color=green];
m4_27 -> m4_37  [key=2, style=dotted];
m4_28 -> m4_25  [key=0, style=bold, color=blue];
m4_28 -> m4_16  [key=0, style=bold, color=blue];
m4_71 -> m4_72  [key=0, style=solid, color=green];
m4_71 -> m4_68  [key=2, style=dotted, color=green];
m4_74 -> m4_75  [key=0, style=solid];
m4_74 -> m4_77  [key=2, style=dotted];
m4_83 -> m4_69  [key=2, style=dotted];
m4_83 -> m4_84  [key=0, style=solid];
m4_83 -> m4_86  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_41 -> m4_42  [key=0, style=solid, color=green];
m4_41 -> m4_20  [key=2, style=dotted, color=green];
m4_73 -> m4_74  [key=0, style=solid];
m4_75 -> m4_69  [key=2, style=dotted];
m4_75 -> m4_76  [key=0, style=solid];
m4_75 -> m4_78  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_33 -> m4_34  [key=0, style=solid, color=green];
m4_33 -> m4_19  [key=2, style=dotted, color=green];
m4_33 -> m4_36  [key=1, style=dashed, color=green, label="lambda expression"];
m4_51 -> m4_52  [key=0, style=solid];
m4_51 -> m4_76  [key=2, style=dotted];
m4_51 -> m4_53  [key=1, style=dashed, color=darkseagreen4, label=state];
m4_51 -> m4_54  [key=1, style=dashed, color=red, label=state];
m4_81 -> m4_82  [key=0, style=solid];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_9  [key=0, style=solid];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_0  [key=0, style=bold, color=blue];
m4_1 -> m4_6  [key=2, style=dotted];
m4_1 -> m4_2  [key=0, style=solid];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_31  [key=2, style=dotted];
m4_36 -> m4_37  [key=0, style=solid, color=green];
m4_15 -> m4_16  [key=0, style=solid, color=green];
m4_16 -> m4_17  [key=0, style=solid, color=green];
m4_16 -> m4_19  [key=2, style=dotted, color=green];
m4_16 -> m4_21  [key=1, style=dashed, color=green, label="lambda expression"];
m4_16 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m4_16 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m4_16 -> m4_27  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m4_17 -> m4_18  [key=0, style=solid, color=green];
m4_17 -> m4_20  [key=2, style=dotted, color=green];
m4_17 -> m4_29  [key=2, style=dotted];
m4_18 -> m4_15  [key=0, style=bold, color=blue];
m4_18 -> m4_19  [key=0, style=solid];
m4_18 -> m4_30  [key=2, style=dotted];
m4_18 -> m4_20  [key=1, style=dashed, color=darkseagreen4, label=connection];
m4_18 -> m4_22  [key=1, style=dashed, color=darkseagreen4, label=connection];
m4_18 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label=connection];
m4_123 -> m4_124  [key=0, style=solid];
m4_128 -> m4_129  [key=0, style=solid, color=green];
m4_128 -> m4_110  [key=2, style=dotted, color=green];
m4_128 -> m4_107  [key=2, style=dotted, color=green];
m4_128 -> m4_111  [key=2, style=dotted, color=green];
m4_128 -> m4_136  [key=1, style=dashed, color=green, label="lambda expression"];
m4_127 -> m4_128  [key=0, style=solid, color=green];
m4_127 -> m4_106  [key=2, style=dotted];
m4_129 -> m4_130  [key=0, style=solid];
m4_129 -> m4_108  [key=2, style=dotted];
m4_125 -> m4_126  [key=0, style=solid];
m4_125 -> m4_9  [key=2, style=dotted];
m4_125 -> m4_10  [key=2, style=dotted];
m4_125 -> m4_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_126 -> m4_127  [key=0, style=solid];
m4_126 -> m4_95  [key=2, style=dotted];
m4_124 -> m4_129  [key=1, style=dashed, color=darkseagreen4, label=storageComponent];
m4_124 -> m4_125  [key=0, style=solid];
m4_124 -> m4_131  [key=2, style=dotted];
m4_130 -> m4_123  [key=0, style=bold, color=blue];
m4_70 -> m4_71  [key=0, style=solid, color=green];
m4_32 -> m4_33  [key=0, style=solid, color=green];
m4_34 -> m4_35  [key=0, style=solid, color=green];
m4_34 -> m4_20  [key=2, style=dotted, color=green];
m4_35 -> m4_32  [key=0, style=bold, color=blue];
m4_35 -> m4_42  [key=0, style=solid];
m4_35 -> m4_44  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.Dictionary<string, string>"];
m4_35 -> m4_46  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.Dictionary<string, string>"];
m4_35 -> m4_48  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.Dictionary<string, string>"];
m4_35 -> m4_52  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.Dictionary<string, string>"];
m4_35 -> m4_53  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.Dictionary<string, string>"];
m4_35 -> m4_54  [key=1, style=dashed, color=red, label="Hangfire.JobStorage"];
m4_35 -> m4_58  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_35 -> m4_62  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Storage.IStorageConnection"];
m4_35 -> m4_64  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_47 -> m4_48  [key=0, style=solid];
m4_47 -> m4_71  [key=2, style=dotted];
m4_47 -> m4_50  [key=1, style=dashed, color=darkseagreen4, label=instant];
m4_47 -> m4_58  [key=1, style=dashed, color=darkseagreen4, label=instant];
m4_47 -> m4_59  [key=1, style=dashed, color=darkseagreen4, label=instant];
m4_47 -> m4_61  [key=1, style=dashed, color=darkseagreen4, label=instant];
m4_48 -> m4_6  [key=2, style=dotted];
m4_48 -> m4_49  [key=0, style=solid];
m4_48 -> m4_69  [key=2, style=dotted];
m4_48 -> m4_72  [key=2, style=dotted];
m4_48 -> m4_50  [key=1, style=dashed, color=darkseagreen4, label=lastExecutionTime];
m4_49 -> m4_51  [key=2, style=dotted];
m4_49 -> m4_50  [key=0, style=solid];
m4_49 -> m4_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_49 -> m4_73  [key=2, style=dotted];
m4_49 -> m4_59  [key=1, style=dashed, color=darkseagreen4, label=changedFields];
m4_49 -> m4_60  [key=1, style=dashed, color=darkseagreen4, label=changedFields];
m4_49 -> m4_61  [key=1, style=dashed, color=darkseagreen4, label=changedFields];
m4_49 -> m4_62  [key=1, style=dashed, color=darkseagreen4, label=changedFields];
m4_50 -> m4_47  [key=0, style=bold, color=blue];
m4_50 -> m4_51  [key=0, style=solid];
m4_50 -> m4_61  [key=0, style=solid];
m4_50 -> m4_74  [key=2, style=dotted];
m4_50 -> m4_75  [key=2, style=dotted];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_7  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_8  [key=2, style=dotted];
m4_3 -> m4_2  [key=0, style=bold, color=blue];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_9  [key=2, style=dotted];
m4_4 -> m4_10  [key=2, style=dotted];
m4_4 -> m4_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.IBackgroundJobFactory"];
m4_4 -> m4_7  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>"];
m4_4 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="System.Func<CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>"];
m4_4 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.IThrottler"];
m4_5 -> m4_0  [key=0, style=bold, color=blue];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_7  [key=0, style=solid];
m4_55 -> m4_56  [key=0, style=solid, color=red];
m4_55 -> m4_79  [key=2, style=dotted, color=red];
m4_78 -> m4_79  [key=0, style=solid];
m4_63 -> m4_64  [key=0, style=solid];
m4_56 -> m4_57  [key=0, style=solid, color=green];
m4_56 -> m4_60  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m4_57 -> m4_58  [key=0, style=solid, color=green];
m4_57 -> m4_6  [key=2, style=dotted, color=green];
m4_57 -> m4_59  [key=0, style=solid];
m4_57 -> m4_77  [key=2, style=dotted];
m4_58 -> m4_59  [key=0, style=solid, color=green];
m4_58 -> m4_51  [key=2, style=dotted, color=green];
m4_58 -> m4_60  [key=1, style=dashed, color=green, label="lambda expression"];
m4_58 -> m4_80  [key=2, style=dotted];
m4_59 -> m4_56  [key=0, style=bold, color=blue];
m4_59 -> m4_60  [key=0, style=solid];
m4_59 -> m4_81  [key=2, style=dotted];
m4_59 -> m4_82  [key=2, style=dotted];
m4_29 -> m4_30  [key=0, style=solid, color=green];
m4_89 -> m4_90  [key=0, style=solid];
m4_90 -> m4_91  [key=0, style=solid];
m4_90 -> m4_95  [key=2, style=dotted];
m4_93 -> m4_19  [key=2, style=dotted];
m4_93 -> m4_94  [key=0, style=solid];
m4_91 -> m4_93  [key=1, style=dashed, color=darkseagreen4, label=runner];
m4_91 -> m4_92  [key=0, style=solid];
m4_91 -> m4_96  [key=2, style=dotted];
m4_92 -> m4_93  [key=0, style=solid];
m4_92 -> m4_97  [key=2, style=dotted];
m4_94 -> m4_89  [key=0, style=bold, color=blue];
m4_66 -> m4_67  [key=0, style=solid, color=green];
m4_66 -> m4_69  [key=2, style=dotted, color=green];
m4_66 -> m4_70  [key=1, style=dashed, color=green, label="lambda expression"];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_11  [key=0, style=solid];
m4_72 -> m4_70  [key=0, style=bold, color=blue];
m4_8 -> m4_14  [key=0, style=solid];
m4_8 -> d12  [key=2, style=dotted];
m4_64 -> m4_65  [key=0, style=solid];
m4_64 -> m4_84  [key=2, style=dotted];
m4_64 -> m4_85  [key=2, style=dotted];
m4_65 -> m4_66  [key=0, style=solid, color=green];
m4_65 -> m4_68  [key=2, style=dotted];
m4_65 -> m4_35  [key=0, style=bold, color=blue];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_21  [key=0, style=solid];
m4_24 -> m4_35  [key=2, style=dotted];
m4_22 -> m4_23  [key=0, style=solid, color=green];
m4_22 -> m4_33  [key=2, style=dotted];
m4_22 -> m4_34  [key=2, style=dotted];
m4_22 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label=recurringJob];
m4_21 -> m4_22  [key=0, style=solid, color=green];
m4_21 -> m4_27  [key=0, style=solid];
m4_21 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label=recurringJobId];
m4_21 -> m4_26  [key=1, style=dashed, color=darkseagreen4, label=recurringJobId];
m4_23 -> m4_24  [key=0, style=solid];
m4_23 -> m4_21  [key=0, style=bold, color=blue];
m4_37 -> m4_38  [key=0, style=solid, color=green];
m4_37 -> m4_24  [key=2, style=dotted, color=green];
m4_112 -> m4_113  [key=0, style=solid];
m4_43 -> m4_44  [key=0, style=solid, color=green];
m4_43 -> m4_67  [key=2, style=dotted];
m4_43 -> m4_54  [key=1, style=dashed, color=red, label=job];
m4_44 -> m4_45  [key=0, style=solid, color=green];
m4_44 -> m4_46  [key=2, style=dotted, color=green];
m4_45 -> m4_43  [key=0, style=bold, color=blue];
m4_45 -> m4_46  [key=0, style=solid];
m4_45 -> m4_68  [key=2, style=dotted];
m4_45 -> m4_47  [key=1, style=dashed, color=darkseagreen4, label=cronSchedule];
m4_60 -> m4_61  [key=0, style=solid, color=green];
m4_60 -> m4_82  [key=2, style=dotted];
m4_61 -> m4_62  [key=0, style=solid, color=green];
m4_61 -> m4_63  [key=2, style=dotted, color=green];
m4_61 -> m4_81  [key=2, style=dotted];
m4_61 -> m4_82  [key=2, style=dotted];
m4_62 -> m4_60  [key=0, style=bold, color=blue];
m4_62 -> m4_63  [key=0, style=solid];
m4_62 -> m4_65  [key=0, style=solid];
m4_62 -> m4_33  [key=2, style=dotted];
m4_62 -> m4_83  [key=2, style=dotted];
m4_136 -> m4_137  [key=0, style=solid, color=green];
m4_137 -> m4_138  [key=0, style=solid, color=green];
m4_138 -> m4_136  [key=0, style=bold, color=blue];
m4_11 -> m4_12  [key=0, style=solid];
m4_86 -> m4_87  [key=0, style=solid];
m4_86 -> m4_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m4_86 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m4_86 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m4_86 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m4_86 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m4_86 -> m4_27  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m4_86 -> m4_39  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m4_86 -> m4_47  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m4_86 -> m4_55  [key=1, style=dashed, color=red, label="Hangfire.Server.RecurringJobScheduler"];
m4_132 -> m4_133  [key=0, style=solid];
m4_52 -> m4_53  [key=0, style=solid];
m4_52 -> m4_54  [key=0, style=solid, color=red];
m4_52 -> m4_69  [key=2, style=dotted];
m4_52 -> m4_77  [key=2, style=dotted];
m4_116 -> m4_117  [key=0, style=solid];
m4_119 -> m4_120  [key=0, style=solid];
m4_13 -> m4_11  [key=0, style=bold, color=blue];
m4_13 -> m4_14  [key=0, style=solid];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_14  [key=2, style=dotted];
m4_79 -> m4_77  [key=2, style=dotted];
m4_79 -> m4_80  [key=0, style=solid];
m4_80 -> m4_78  [key=0, style=bold, color=blue];
m4_87 -> m4_85  [key=2, style=dotted];
m4_87 -> m4_88  [key=0, style=solid];
m4_88 -> m4_86  [key=0, style=bold, color=blue];
m4_134 -> m4_132  [key=0, style=bold, color=blue];
m4_133 -> m4_134  [key=0, style=solid];
m4_133 -> m4_135  [key=2, style=dotted];
m4_54 -> m4_52  [key=0, style=bold, color=blue];
m4_54 -> m4_55  [key=0, style=solid, color=red];
m4_54 -> m4_78  [key=2, style=dotted, color=red];
m4_53 -> m4_54  [key=0, style=solid, color=red];
m4_53 -> m4_55  [key=2, style=dotted];
m4_118 -> m4_116  [key=0, style=bold, color=blue];
m4_117 -> m4_118  [key=0, style=solid];
m4_121 -> m4_119  [key=0, style=bold, color=blue];
m4_120 -> m4_121  [key=0, style=solid];
m4_120 -> m4_122  [key=2, style=dotted];
m4_113 -> m4_114  [key=0, style=solid];
m4_113 -> m4_115  [key=2, style=dotted];
m4_114 -> m4_112  [key=0, style=bold, color=blue];
m4_14 -> m4_4  [key=0, style=bold, color=blue];
m4_42 -> m4_39  [key=0, style=bold, color=blue];
m4_42 -> m4_43  [key=0, style=solid];
m4_42 -> m4_66  [key=2, style=dotted];
m4_6 -> m4_14  [key=0, style=solid];
m4_6 -> d12  [key=2, style=dotted];
m4_10 -> m4_14  [key=0, style=solid];
m4_10 -> d12  [key=2, style=dotted];
m4_141 -> m4_16  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_22  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_26  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_30  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_33  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_37  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_66  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_65  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_75  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_82  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_90  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_99  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_125  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_126  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m4_141 -> m4_139  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
}
