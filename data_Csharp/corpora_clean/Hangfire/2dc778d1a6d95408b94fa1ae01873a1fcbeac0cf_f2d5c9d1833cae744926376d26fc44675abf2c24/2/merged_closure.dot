digraph  {
d1 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label="LogManager.Adapter = new ConsoleOutLoggerFactoryAdapter(\r\n                LogLevel.Trace, false, false, true, '''')", prediction=0, span="13-14"];
d0 [cluster="ConsoleSample.Program.Main()", label="Entry ConsoleSample.Program.Main()", span="11-11"];
d2 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label="JobStorage.Current = \r\n                new SqlServerStorage(@''Server=.\sqlexpress;Database=HangFire.Sample;Trusted_Connection=True;'')", prediction=1, span="16-17"];
d54 [cluster="ConsoleOutLoggerFactoryAdapter.cstr", label="Entry ConsoleOutLoggerFactoryAdapter.cstr", span=""];
d3 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label="var server = new BackgroundJobServer(''critical'', ''default'')", prediction=2, span="20-20"];
d55 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="30-30"];
d4 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label="var count = 1", prediction=3, span="22-22"];
d56 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(params string[])", label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(params string[])", span="36-36"];
d9 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label="server.Start()", prediction=2, span="35-35"];
d5 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label=true, prediction=5, span="24-24"];
d43 [cluster="ConsoleSample.Program.Main()", label="var number = count++", span="94-94"];
d8 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label="command.Equals(''start'', StringComparison.OrdinalIgnoreCase)", prediction=6, span="33-33"];
d10 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label="command.StartsWith(''add'', StringComparison.OrdinalIgnoreCase)", prediction=6, span="38-38"];
d59 [cluster="HangFire.BackgroundJobServer.Start()", label="Entry HangFire.BackgroundJobServer.Start()", span="63-63"];
d45 [cluster="ConsoleSample.Program.Main()", label="command.StartsWith(''fast'', StringComparison.OrdinalIgnoreCase)", span="98-98"];
d48 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(''Jobs enqueued.'')", span="114-114"];
d50 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(ex.Message)", span="118-118"];
d6 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label="var command = Console.ReadLine()", prediction=6, span="26-26"];
d51 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(''Press Enter to exit...'')", span="124-124"];
d7 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label="command == null || command.Equals(''stop'', StringComparison.OrdinalIgnoreCase)", prediction=9, span="28-28"];
d57 [cluster="System.Console.ReadLine()", label="Entry System.Console.ReadLine()", span="0-0"];
d11 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label="var workCount = int.Parse(command.Substring(4))", prediction=10, span="42-42"];
d20 [cluster="ConsoleSample.Program.Main()", label="command.StartsWith(''static'', StringComparison.OrdinalIgnoreCase)", span="56-56"];
d21 [cluster="ConsoleSample.Program.Main()", label="var workCount = int.Parse(command.Substring(7))", span="60-60"];
d29 [cluster="ConsoleSample.Program.Main()", label="command.StartsWith(''error'', StringComparison.OrdinalIgnoreCase)", span="73-73"];
d30 [cluster="ConsoleSample.Program.Main()", label="var workCount = int.Parse(command.Substring(6))", span="75-75"];
d35 [cluster="ConsoleSample.Program.Main()", label="command.StartsWith(''args'', StringComparison.OrdinalIgnoreCase)", span="82-82"];
d36 [cluster="ConsoleSample.Program.Main()", label="var workCount = int.Parse(command.Substring(5))", span="84-84"];
d41 [cluster="ConsoleSample.Program.Main()", label="command.StartsWith(''in'', StringComparison.OrdinalIgnoreCase)", span="91-91"];
d42 [cluster="ConsoleSample.Program.Main()", label="var seconds = int.Parse(command.Substring(2))", span="93-93"];
d46 [cluster="ConsoleSample.Program.Main()", label="var workCount = int.Parse(command.Substring(5))", span="102-102"];
d58 [cluster="string.Equals(string, System.StringComparison)", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
d60 [cluster="string.StartsWith(string, System.StringComparison)", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
d12 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label="var i = 0", prediction=11, span="43-43"];
d61 [cluster="string.Substring(int)", label="Entry string.Substring(int)", span="0-0"];
d62 [cluster="int.Parse(string)", label="Entry int.Parse(string)", span="0-0"];
d13 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label="i < workCount", prediction=10, span="43-43"];
d14 [cluster="ConsoleSample.Program.Main()", label="var number = i", span="45-45"];
d16 [cluster="ConsoleSample.Program.Main()", color=green, community=0, label="i++", prediction=11, span="43-43"];
d17 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(''Jobs enqueued.'')", span="48-48"];
d15 [cluster="ConsoleSample.Program.Main()", label="BackgroundJob.Enqueue<Services>(x => x.Random(number))", span="46-46"];
d53 [cluster="ConsoleSample.Program.Main()", label="Exit ConsoleSample.Program.Main()", span="11-11"];
d44 [cluster="ConsoleSample.Program.Main()", label="BackgroundJob.Schedule<Services>(x => x.Random(number), TimeSpan.FromSeconds(seconds))", span="95-95"];
d88 [cluster="lambda expression", label="x.Random(number)", span="95-95"];
d47 [cluster="ConsoleSample.Program.Main()", label="Parallel.For(0, workCount, i =>\r\n                            {\r\n                                if (i % 2 == 0)\r\n                                {\r\n                                    BackgroundJob.Enqueue<Services>(x => x.EmptyCritical());\r\n                                }\r\n                                else\r\n                                {\r\n                                    BackgroundJob.Enqueue<Services>(x => x.EmptyDefault());\r\n                                }\r\n                            })", span="103-113"];
d49 [cluster="ConsoleSample.Program.Main()", label=Exception, span="116-116"];
d64 [cluster="System.Console.WriteLine(string)", label="Entry System.Console.WriteLine(string)", span="0-0"];
d52 [cluster="ConsoleSample.Program.Main()", label="Console.ReadLine()", span="125-125"];
d19 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(ex.Message)", span="52-52"];
d22 [cluster="ConsoleSample.Program.Main()", label="var i = 0", span="61-61"];
d23 [cluster="ConsoleSample.Program.Main()", label="i < workCount", span="61-61"];
d26 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(''Jobs enqueued.'')", span="65-65"];
d28 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(ex.Message)", span="69-69"];
d31 [cluster="ConsoleSample.Program.Main()", label="var i = 0", span="76-76"];
d32 [cluster="ConsoleSample.Program.Main()", label="i < workCount", span="76-76"];
d37 [cluster="ConsoleSample.Program.Main()", label="var i = 0", span="85-85"];
d38 [cluster="ConsoleSample.Program.Main()", label="i < workCount", span="85-85"];
d70 [cluster="lambda expression", label="x.Random(number)", span="46-46"];
d18 [cluster="ConsoleSample.Program.Main()", label=Exception, span="50-50"];
d63 [cluster="HangFire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", label="Entry HangFire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", span="77-77"];
d69 [cluster="lambda expression", label="Entry lambda expression", span="46-46"];
d66 [cluster="System.TimeSpan.FromSeconds(double)", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
d67 [cluster="HangFire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", label="Entry HangFire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="147-147"];
d87 [cluster="lambda expression", label="Entry lambda expression", span="95-95"];
d104 [label=number, span=""];
d89 [cluster="lambda expression", label="Exit lambda expression", span="95-95"];
d72 [cluster="ConsoleSample.Services.Random(int)", label="Entry ConsoleSample.Services.Random(int)", span="28-28"];
d68 [cluster="System.Threading.Tasks.Parallel.For(int, int, System.Action<int>)", label="Entry System.Threading.Tasks.Parallel.For(int, int, System.Action<int>)", span="0-0"];
d90 [cluster="lambda expression", label="Entry lambda expression", span="103-113"];
d25 [cluster="ConsoleSample.Program.Main()", label="i++", span="61-61"];
d24 [cluster="ConsoleSample.Program.Main()", label="BackgroundJob.Enqueue(() => Console.WriteLine(''Hello, {0}!'', ''world''))", span="63-63"];
d27 [cluster="ConsoleSample.Program.Main()", label=Exception, span="67-67"];
d34 [cluster="ConsoleSample.Program.Main()", label="i++", span="76-76"];
d33 [cluster="ConsoleSample.Program.Main()", label="BackgroundJob.Enqueue<Services>(x => x.Error())", span="78-78"];
d40 [cluster="ConsoleSample.Program.Main()", label="i++", span="85-85"];
d39 [cluster="ConsoleSample.Program.Main()", label="BackgroundJob.Enqueue<Services>(x => x.Args(Guid.NewGuid().ToString(), 14442, DateTime.UtcNow))", span="87-87"];
d103 [label=number, span=""];
d71 [cluster="lambda expression", label="Exit lambda expression", span="46-46"];
d92 [cluster="lambda expression", label="BackgroundJob.Enqueue<Services>(x => x.EmptyCritical())", span="107-107"];
d93 [cluster="lambda expression", label="BackgroundJob.Enqueue<Services>(x => x.EmptyDefault())", span="111-111"];
d94 [cluster="lambda expression", label="Exit lambda expression", span="103-113"];
d91 [cluster="lambda expression", label="i % 2 == 0", span="105-105"];
d65 [cluster="HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", label="Entry HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", span="59-59"];
d73 [cluster="lambda expression", label="Entry lambda expression", span="63-63"];
d77 [cluster="lambda expression", label="Entry lambda expression", span="78-78"];
d81 [cluster="lambda expression", label="Entry lambda expression", span="87-87"];
d95 [cluster="lambda expression", label="Entry lambda expression", span="107-107"];
d99 [cluster="lambda expression", label="Entry lambda expression", span="111-111"];
d75 [cluster="lambda expression", label="Exit lambda expression", span="63-63"];
d74 [cluster="lambda expression", label="Console.WriteLine(''Hello, {0}!'', ''world'')", span="63-63"];
d79 [cluster="lambda expression", label="Exit lambda expression", span="78-78"];
d78 [cluster="lambda expression", label="x.Error()", span="78-78"];
d83 [cluster="lambda expression", label="Exit lambda expression", span="87-87"];
d82 [cluster="lambda expression", label="x.Args(Guid.NewGuid().ToString(), 14442, DateTime.UtcNow)", span="87-87"];
d97 [cluster="lambda expression", label="Exit lambda expression", span="107-107"];
d96 [cluster="lambda expression", label="x.EmptyCritical()", span="107-107"];
d101 [cluster="lambda expression", label="Exit lambda expression", span="111-111"];
d100 [cluster="lambda expression", label="x.EmptyDefault()", span="111-111"];
d76 [cluster="System.Console.WriteLine(string, object)", label="Entry System.Console.WriteLine(string, object)", span="0-0"];
d80 [cluster="ConsoleSample.Services.Error()", label="Entry ConsoleSample.Services.Error()", span="21-21"];
d84 [cluster="System.Guid.NewGuid()", label="Entry System.Guid.NewGuid()", span="0-0"];
d85 [cluster="System.Guid.ToString()", label="Entry System.Guid.ToString()", span="0-0"];
d86 [cluster="ConsoleSample.Services.Args(string, int, System.DateTime)", label="Entry ConsoleSample.Services.Args(string, int, System.DateTime)", span="45-45"];
d98 [cluster="ConsoleSample.Services.EmptyCritical()", label="Entry ConsoleSample.Services.EmptyCritical()", span="16-16"];
d102 [cluster="ConsoleSample.Services.EmptyDefault()", label="Entry ConsoleSample.Services.EmptyDefault()", span="11-11"];
m1_25 [cluster="Unk.ErrorFormat", file="FailedState.feature.cs", label="Entry Unk.ErrorFormat", span=""];
m1_4 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="FailedState.feature.cs", label="Entry HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", span="35-35"];
m1_5 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs", label="var failedState = context.CandidateState as FailedState", prediction=14, span="37-37"];
m1_6 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs", label="failedState == null", prediction=15, span="38-38"];
m1_14 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs", label="Logger.WarnFormat(\r\n                        ''Failed to process the job '{0}': an exception occurred. Retry attempt {1} of {2} will be performed in {3}.'',\r\n                        failedState.Exception,\r\n                        context.JobId,\r\n                        retryAttempt,\r\n                        Attempts,\r\n                        delay)", prediction=14, span="61-67"];
m1_16 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs", label="Logger.ErrorFormat(\r\n                        ''Failed to process the job '{0}': an exception occurred.'',\r\n                        failedState.Exception,\r\n                        context.JobId)", prediction=14, span="74-77"];
m1_8 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs", label="var retryAttempt = context.GetJobParameter<int>(''RetryCount'') + 1", prediction=14, span="44-44"];
m1_9 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs", label="retryAttempt <= Attempts", prediction=14, span="46-46"];
m1_10 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs", label="var delay = TimeSpan.FromSeconds(SecondsToDelay(retryAttempt))", prediction=14, span="48-48"];
m1_11 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs", label="context.SetJobParameter(''RetryCount'', retryAttempt)", prediction=14, span="50-50"];
m1_12 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs", label="context.CandidateState = new ScheduledState(delay)\r\n                {\r\n                    Reason = String.Format(''Retry attempt {0} of {1}'', retryAttempt, Attempts)\r\n                }", prediction=22, span="54-57"];
m1_13 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs", label=LogEvents, prediction=14, span="59-59"];
m1_15 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs", label=LogEvents, prediction=14, span="72-72"];
m1_7 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", color=green, community=0, file="FailedState.feature.cs", label="return;", prediction=25, span="41-41"];
m1_17 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="FailedState.feature.cs", label="Exit HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", span="35-35"];
m1_23 [cluster="string.Format(string, object, object)", file="FailedState.feature.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m1_0 [cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="FailedState.feature.cs", label="Entry HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", span="14-14"];
m1_1 [cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", color=green, community=0, file="FailedState.feature.cs", label="Attempts = DefaultRetryAttempts", prediction=26, span="16-16"];
m1_2 [cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", color=green, community=0, file="FailedState.feature.cs", label="LogEvents = true", prediction=27, span="17-17"];
m1_3 [cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="FailedState.feature.cs", label="Exit HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", span="14-14"];
m1_22 [cluster="HangFire.States.ScheduledState.ScheduledState(System.TimeSpan)", file="FailedState.feature.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(System.TimeSpan)", span="27-27"];
m1_18 [cluster="HangFire.States.ElectStateContext.GetJobParameter<T>(string)", file="FailedState.feature.cs", label="Entry HangFire.States.ElectStateContext.GetJobParameter<T>(string)", span="54-54"];
m1_29 [cluster="System.Random.Random()", file="FailedState.feature.cs", label="Entry System.Random.Random()", span="0-0"];
m1_19 [cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="FailedState.feature.cs", label="Entry HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", span="83-83"];
m1_26 [cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", color=green, community=0, file="FailedState.feature.cs", label="var random = new Random()", prediction=28, span="85-85"];
m1_27 [cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", color=green, community=0, file="FailedState.feature.cs", label="return (int)Math.Round(\r\n                Math.Pow(retryCount - 1, 4) + 15 + (random.Next(30) * (retryCount)));", prediction=29, span="86-87"];
m1_28 [cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="FailedState.feature.cs", label="Exit HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", span="83-83"];
m1_24 [cluster="Unk.WarnFormat", file="FailedState.feature.cs", label="Entry Unk.WarnFormat", span=""];
m1_31 [cluster="System.Random.Next(int)", file="FailedState.feature.cs", label="Entry System.Random.Next(int)", span="0-0"];
m1_32 [cluster="System.Math.Round(double)", file="FailedState.feature.cs", label="Entry System.Math.Round(double)", span="0-0"];
m1_30 [cluster="System.Math.Pow(double, double)", file="FailedState.feature.cs", label="Entry System.Math.Pow(double, double)", span="0-0"];
m1_21 [cluster="HangFire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="FailedState.feature.cs", label="Entry HangFire.States.ElectStateContext.SetJobParameter<T>(string, T)", span="49-49"];
m1_33 [file="FailedState.feature.cs", label="HangFire.AutomaticRetryAttribute", span=""];
m2_25 [cluster="Unk.OnScenarioStart", file="JobFetcher.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m2_29 [cluster="Unk.CollectScenarioErrors", file="JobFetcher.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m2_21 [cluster="Unk.OnScenarioEnd", file="JobFetcher.feature.cs", label="Entry Unk.OnScenarioEnd", span=""];
m2_55 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119"];
m2_56 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns null when it tries to dequeue a job from an empty queue'', ((string[])(null)))", span="121-121"];
m2_57 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="123-123"];
m2_58 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="125-125"];
m2_62 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="133-133"];
m2_63 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119"];
m2_41 [cluster="Unk.And", file="JobFetcher.feature.cs", label="Entry Unk.And", span=""];
m2_54 [cluster="Unk.But", file="JobFetcher.feature.cs", label="Entry Unk.But", span=""];
m2_5 [cluster="Unk.GetTestRunner", file="JobFetcher.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m2_26 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m2_27 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m2_28 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m2_0 [cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m2_1 [cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m2_2 [cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''JobFetcher'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m2_3 [cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m2_4 [cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m2_76 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167"];
m2_77 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher listens only specified queue'', ((string[])(null)))", span="169-169"];
m2_78 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="171-171"];
m2_79 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="173-173"];
m2_83 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="181-181"];
m2_84 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167"];
m2_9 [cluster="HangFire.Tests.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.JobFetcherFeature.FeatureTearDown()", span="39-39"];
m2_10 [cluster="HangFire.Tests.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m2_11 [cluster="HangFire.Tests.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs", label="testRunner = null", span="42-42"];
m2_12 [cluster="HangFire.Tests.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.JobFetcherFeature.FeatureTearDown()", span="39-39"];
m2_13 [cluster="Unk.OnFeatureEnd", file="JobFetcher.feature.cs", label="Entry Unk.OnFeatureEnd", span=""];
m2_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="JobFetcher.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m2_42 [cluster="Unk.When", file="JobFetcher.feature.cs", label="Entry Unk.When", span=""];
m2_30 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", span="75-75"];
m2_31 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns job id when it dequeues a job'', ((string[])(null)))", span="77-77"];
m2_32 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m2_33 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
m2_37 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="89-89"];
m2_38 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", span="75-75"];
m2_44 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96"];
m2_45 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher removes the dequeued job from the queue and adds it to the dequeued list'', ((string[])(null)))", span="98-98"];
m2_46 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="100-100"];
m2_47 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102"];
m2_52 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="112-112"];
m2_53 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96"];
m2_64 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140"];
m2_65 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher dequeues jobs in the FIFO order'', ((string[])(null)))", span="142-142"];
m2_66 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="144-144"];
m2_67 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="146-146"];
m2_74 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="160-160"];
m2_75 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140"];
m2_39 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="JobFetcher.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m2_43 [cluster="Unk.Then", file="JobFetcher.feature.cs", label="Entry Unk.Then", span=""];
m2_40 [cluster="Unk.Given", file="JobFetcher.feature.cs", label="Entry Unk.Given", span=""];
m2_85 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188"];
m2_86 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher sets the \'fetched\' flag when it dequeues a job'', ((string[])(null)))", span="190-190"];
m2_87 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="192-192"];
m2_88 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="194-194"];
m2_92 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="202-202"];
m2_93 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188"];
m2_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="JobFetcher.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m2_14 [cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.JobFetcherFeature.TestInitialize()", span="46-46"];
m2_15 [cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", span="48-49"];
m2_16 [cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="HangFire.Tests.JobFetcherFeature.FeatureSetup(null)", span="51-51"];
m2_17 [cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.JobFetcherFeature.TestInitialize()", span="46-46"];
m2_18 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", span="56-56"];
m2_19 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m2_20 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", span="56-56"];
m2_22 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m2_23 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m2_24 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m2_8 [cluster="Unk.OnFeatureStart", file="JobFetcher.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m2_94 [file="JobFetcher.feature.cs", label="HangFire.Tests.JobFetcherFeature", span=""];
m3_6 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="JobFetcherSteps.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_24 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", file="JobFetcherSteps.cs", label="Entry Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", span="72-72"];
m3_31 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", color=green, community=0, file="JobFetcherSteps.cs", label="return @''\r\nDECLARE @RecordsToAggregate TABLE\r\n(\r\n	[Key] NVARCHAR(100) NOT NULL,\r\n	[Value] SMALLINT NOT NULL,\r\n	[ExpireAt] DATETIME NULL\r\n)\r\n\r\nSET TRANSACTION ISOLATION LEVEL READ COMMITTED\r\nBEGIN TRAN\r\n\r\nDELETE TOP (@count) [HangFire].[Counter] with (readpast)\r\nOUTPUT DELETED.[Key], DELETED.[Value], DELETED.[ExpireAt] INTO @RecordsToAggregate\r\n\r\nSET NOCOUNT ON\r\n\r\n;MERGE [HangFire].[AggregatedCounter] AS [Target]\r\nUSING (\r\n	SELECT [Key], SUM([Value]) as [Value], MAX([ExpireAt]) AS [ExpireAt] FROM @RecordsToAggregate\r\n	GROUP BY [Key]) AS [Source] ([Key], [Value], [ExpireAt])\r\nON [Target].[Key] = [Source].[Key]\r\nWHEN MATCHED THEN UPDATE SET \r\n	[Target].[Value] = [Target].[Value] + [Source].[Value],\r\n	[Target].[ExpireAt] = (SELECT MAX([ExpireAt]) FROM (VALUES ([Source].ExpireAt), ([Target].[ExpireAt])) AS MaxExpireAt([ExpireAt]))\r\nWHEN NOT MATCHED THEN INSERT ([Key], [Value], [ExpireAt]) VALUES ([Source].[Key], [Source].[Value], [Source].[ExpireAt]);\r\n\r\nCOMMIT TRAN'';", prediction=30, span="74-100"];
m3_32 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", file="JobFetcherSteps.cs", label="Exit Hangfire.SqlServer.CountersAggregator.GetAggregationQuery()", span="72-72"];
m3_0 [cluster="Hangfire.DashboardOptions.DashboardOptions()", file="JobFetcherSteps.cs", label="Entry Hangfire.DashboardOptions.DashboardOptions()", span="23-23"];
m3_3 [cluster="Hangfire.DashboardOptions.DashboardOptions()", file="JobFetcherSteps.cs", label="Exit Hangfire.DashboardOptions.DashboardOptions()", span="23-23"];
m3_4 [cluster="Hangfire.Dashboard.LocalRequestsOnlyAuthorizationFilter.LocalRequestsOnlyAuthorizationFilter()", file="JobFetcherSteps.cs", label="Entry Hangfire.Dashboard.LocalRequestsOnlyAuthorizationFilter.LocalRequestsOnlyAuthorizationFilter()", span="22-22"];
m3_1 [cluster="Hangfire.DashboardOptions.DashboardOptions()", file="JobFetcherSteps.cs", label="AppPath = ''/''", span="25-25"];
m3_2 [cluster="Hangfire.DashboardOptions.DashboardOptions()", file="JobFetcherSteps.cs", label="AuthorizationFilters = new[] { new LocalRequestsOnlyAuthorizationFilter() }", span="26-26"];
m3_5 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="JobFetcherSteps.cs", label="Hangfire.DashboardOptions", span=""];
m3_19 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="JobFetcherSteps.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m3_30 [cluster="System.Type.ToString()", file="JobFetcherSteps.cs", label="Entry System.Type.ToString()", span="0-0"];
m3_25 [cluster="Unk.Execute", file="JobFetcherSteps.cs", label="Entry Unk.Execute", span=""];
m3_7 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="JobFetcherSteps.cs", label="Entry Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", span="42-42"];
m3_12 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=green, community=0, file="JobFetcherSteps.cs", label="cancellationToken.WaitHandle.WaitOne(DelayBetweenPasses)", prediction=31, span="59-59"];
m3_11 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=green, community=0, file="JobFetcherSteps.cs", label="removedCount >= NumberOfRecordsInSinglePass", prediction=32, span="57-57"];
m3_13 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=green, community=0, file="JobFetcherSteps.cs", label="cancellationToken.ThrowIfCancellationRequested()", prediction=31, span="60-60"];
m3_15 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=green, community=0, file="JobFetcherSteps.cs", label="cancellationToken.WaitHandle.WaitOne(_interval)", prediction=31, span="64-64"];
m3_14 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=green, community=0, file="JobFetcherSteps.cs", label="removedCount >= NumberOfRecordsInSinglePass", prediction=35, span="62-62"];
m3_10 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=green, community=0, file="JobFetcherSteps.cs", label="_storage.UseConnection(connection =>\r\n                {\r\n                    removedCount = connection.Execute(\r\n                        GetAggregationQuery(),\r\n                        new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass });\r\n                })", prediction=35, span="50-55"];
m3_9 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="JobFetcherSteps.cs", label="int removedCount = 0", span="46-46"];
m3_8 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="JobFetcherSteps.cs", label="Logger.DebugFormat(''Aggregating records in 'Counter' table...'')", span="44-44"];
m3_16 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="JobFetcherSteps.cs", label="Exit Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", span="42-42"];
m3_26 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="JobFetcherSteps.cs", label="Entry Hangfire.SqlServer.CountersAggregator.ToString()", span="67-67"];
m3_27 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="JobFetcherSteps.cs", label="return GetType().ToString();", span="69-69"];
m3_28 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="JobFetcherSteps.cs", label="Exit Hangfire.SqlServer.CountersAggregator.ToString()", span="67-67"];
m3_17 [cluster="Hangfire.Logging.ILog.DebugFormat(string, params object[])", file="JobFetcherSteps.cs", label="Entry Hangfire.Logging.ILog.DebugFormat(string, params object[])", span="122-122"];
m3_18 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="JobFetcherSteps.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", span="173-173"];
m3_29 [cluster="object.GetType()", file="JobFetcherSteps.cs", label="Entry object.GetType()", span="0-0"];
m3_21 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Entry lambda expression", span="50-55"];
m3_22 [cluster="lambda expression", color=green, community=0, file="JobFetcherSteps.cs", label="removedCount = connection.Execute(\r\n                        GetAggregationQuery(),\r\n                        new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass })", prediction=37, span="52-54"];
m3_23 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Exit lambda expression", span="50-55"];
m3_20 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="JobFetcherSteps.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m3_33 [file="JobFetcherSteps.cs", label="Hangfire.SqlServer.CountersAggregator", span=""];
m4_15 [cluster="Unk.>", file="JobState.cs", label="Entry Unk.>", span=""];
m4_40 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="JobState.cs", label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", span="57-57"];
m4_41 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="JobState.cs", label="var options = CreateOptions()", span="59-59"];
m4_42 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="JobState.cs", label="Assert.Throws<ArgumentException>(\r\n                () => options.Queues = new string[0])", span="61-62"];
m4_43 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="JobState.cs", label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", span="57-57"];
m4_0 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="JobState.cs", label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", span="9-9"];
m4_1 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="JobState.cs", label="var options = CreateOptions()", span="11-11"];
m4_10 [cluster="Unk.True", file="JobState.cs", label="Entry Unk.True", span=""];
m4_33 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", file="JobState.cs", label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", span="48-48"];
m4_34 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", color=green, community=0, file="JobState.cs", label="var options = CreateOptions()", prediction=38, span="50-50"];
m4_35 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", color=green, community=0, file="JobState.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => options.Queues = null)", prediction=39, span="52-53"];
m4_36 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", file="JobState.cs", label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", span="48-48"];
m4_49 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobState.cs", label="Entry HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="11-11"];
m4_2 [cluster="HangFire.RetryAttribute.RetryAttribute(int)", file="JobState.cs", label="Entry HangFire.RetryAttribute.RetryAttribute(int)", span="27-27"];
m4_3 [cluster="HangFire.RetryAttribute.RetryAttribute(int)", file="JobState.cs", label="Attempts = attempts", span="29-29"];
m4_4 [cluster="HangFire.RetryAttribute.RetryAttribute(int)", file="JobState.cs", label="Exit HangFire.RetryAttribute.RetryAttribute(int)", span="27-27"];
m4_5 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="JobState.cs", label="HangFire.RetryAttribute", span=""];
m4_6 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="JobState.cs", label="Assert.True(options.SchedulePollingInterval > TimeSpan.Zero)", span="17-17"];
m4_7 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="JobState.cs", label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", span="9-9"];
m4_8 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", file="JobState.cs", label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", span="65-65"];
m4_47 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", file="JobState.cs", label="return new BackgroundJobServerOptions();", span="67-67"];
m4_48 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", file="JobState.cs", label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", span="65-65"];
m4_9 [cluster="Unk.Equal", file="JobState.cs", label="Entry Unk.Equal", span=""];
m4_19 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="JobState.cs", label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", span="30-30"];
m4_20 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="JobState.cs", label="var options = CreateOptions()", span="32-32"];
m4_21 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="JobState.cs", label="Assert.Throws<ArgumentOutOfRangeException>(\r\n                () => options.WorkerCount = 0)", span="34-35"];
m4_22 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="JobState.cs", label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", span="30-30"];
m4_11 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", file="JobState.cs", label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", span="21-21"];
m4_12 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", file="JobState.cs", label="var options = CreateOptions()", span="23-23"];
m4_13 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", file="JobState.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => options.ServerName = null)", span="25-26"];
m4_14 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", file="JobState.cs", label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", span="21-21"];
m4_30 [cluster="lambda expression", file="JobState.cs", label="Entry lambda expression", span="44-44"];
m4_38 [cluster="lambda expression", file="JobState.cs", label="options.Queues = null", span="53-53"];
m4_37 [cluster="lambda expression", file="JobState.cs", label="Entry lambda expression", span="53-53"];
m4_39 [cluster="lambda expression", file="JobState.cs", label="Exit lambda expression", span="53-53"];
m4_17 [cluster="lambda expression", file="JobState.cs", label="options.ServerName = null", span="26-26"];
m4_24 [cluster="lambda expression", file="JobState.cs", label="options.WorkerCount = 0", span="35-35"];
m4_31 [cluster="lambda expression", file="JobState.cs", label="options.WorkerCount = -1", span="44-44"];
m4_45 [cluster="lambda expression", file="JobState.cs", label="options.Queues = new string[0]", span="62-62"];
m4_44 [cluster="lambda expression", file="JobState.cs", label="Entry lambda expression", span="62-62"];
m4_16 [cluster="lambda expression", file="JobState.cs", label="Entry lambda expression", span="26-26"];
m4_23 [cluster="lambda expression", file="JobState.cs", label="Entry lambda expression", span="35-35"];
m4_18 [cluster="lambda expression", file="JobState.cs", label="Exit lambda expression", span="26-26"];
m4_25 [cluster="lambda expression", file="JobState.cs", label="Exit lambda expression", span="35-35"];
m4_32 [cluster="lambda expression", file="JobState.cs", label="Exit lambda expression", span="44-44"];
m4_46 [cluster="lambda expression", file="JobState.cs", label="Exit lambda expression", span="62-62"];
m4_26 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="JobState.cs", label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", span="39-39"];
m4_27 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="JobState.cs", label="var options = CreateOptions()", span="41-41"];
m4_28 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="JobState.cs", label="Assert.Throws<ArgumentOutOfRangeException>(\r\n                () => options.WorkerCount = -1)", span="43-44"];
m4_29 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="JobState.cs", label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", span="39-39"];
m4_50 [file="JobState.cs", label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts", span=""];
m4_54 [file="JobState.cs", label=options, span=""];
m4_51 [file="JobState.cs", label=options, span=""];
m4_52 [file="JobState.cs", label=options, span=""];
m4_53 [file="JobState.cs", label=options, span=""];
m4_55 [file="JobState.cs", label=options, span=""];
m5_4 [cluster="Unk.Given", file="JobSteps.cs", label="Entry Unk.Given", span=""];
m5_5 [cluster="HangFire.Tests.JobSteps.GivenTheJob(string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenTheJob(string)", span="21-21"];
m5_6 [cluster="HangFire.Tests.JobSteps.GivenTheJob(string)", file="JobSteps.cs", label="Given(String.Format(''the '{0}' job of the '{1}' type'', jobId, DefaultJobType))", span="23-23"];
m5_7 [cluster="HangFire.Tests.JobSteps.GivenTheJob(string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenTheJob(string)", span="21-21"];
m5_0 [cluster="HangFire.Tests.JobSteps.GivenAJob()", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenAJob()", span="15-15"];
m5_1 [cluster="HangFire.Tests.JobSteps.GivenAJob()", file="JobSteps.cs", label="Given(String.Format(''a job of the '{0}' type'', DefaultJobType.AssemblyQualifiedName))", span="17-17"];
m5_2 [cluster="HangFire.Tests.JobSteps.GivenAJob()", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenAJob()", span="15-15"];
m5_15 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JobSteps.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m5_26 [cluster="Unk.GetValueFromHash", file="JobSteps.cs", label="Entry Unk.GetValueFromHash", span=""];
m5_17 [cluster="Unk.SetRangeInHash", file="JobSteps.cs", label="Entry Unk.SetRangeInHash", span=""];
m5_8 [cluster="string.Format(string, object, object)", file="JobSteps.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m5_12 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", span="33-33"];
m5_13 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs", label="Redis.Client.SetRangeInHash(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                new Dictionary<string, string>\r\n                    {\r\n                        { ''Type'', type },\r\n                        { ''Args'', JobHelper.ToJson(new Dictionary<string, string>()) },\r\n                        { ''State'', EnqueuedState.Name },\r\n                    })", span="35-42"];
m5_14 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", span="33-33"];
m5_27 [cluster="Unk.AreEqual", file="JobSteps.cs", label="Entry Unk.AreEqual", span=""];
m5_16 [cluster="HangFire.JobHelper.ToJson(object)", file="JobSteps.cs", label="Entry HangFire.JobHelper.ToJson(object)", span="32-32"];
m5_19 [cluster="HangFire.Tests.JobSteps.GivenItsStateIs(string)", file="JobSteps.cs", label="Redis.Client.SetEntryInHash(\r\n                String.Format(''hangfire:job:{0}'', DefaultJobId),\r\n                ''State'',\r\n                state)", span="48-51"];
m5_18 [cluster="HangFire.Tests.JobSteps.GivenItsStateIs(string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenItsStateIs(string)", span="46-46"];
m5_20 [cluster="HangFire.Tests.JobSteps.GivenItsStateIs(string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenItsStateIs(string)", span="46-46"];
m5_21 [cluster="Unk.SetEntryInHash", file="JobSteps.cs", label="Entry Unk.SetEntryInHash", span=""];
m5_3 [cluster="string.Format(string, object)", file="JobSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m5_9 [cluster="HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", span="27-27"];
m5_10 [cluster="HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", file="JobSteps.cs", label="Given(String.Format(''the '{0}' job of the '{1}' type'', DefaultJobId, type))", span="29-29"];
m5_11 [cluster="HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", span="27-27"];
m5_22 [cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", span="57-57"];
m5_23 [cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs", label="var jobState = Redis.Client.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', DefaultJobId),\r\n                ''State'')", span="59-61"];
m5_24 [cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs", label="Assert.AreEqual(state, jobState)", span="63-63"];
m5_25 [cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", span="57-57"];
m6_45 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102"];
m6_46 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It has the correct properties set'', ((string[])(null)))", prediction=40, span="104-104"];
m6_47 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="ProcessingState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", prediction=41, span="106-106"];
m6_48 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="ProcessingState.feature.cs", label="this.FeatureBackground()", prediction=41, span="108-108"];
m6_49 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=1, file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", prediction=43, span="110-112"];
m6_50 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=1, file="ProcessingState.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''StartedAt'',\r\n                        ''<UtcNow timestamp>''})", prediction=44, span="113-115"];
m6_51 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=1, file="ProcessingState.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''ServerName'',\r\n                        ''TestServer''})", prediction=43, span="116-118"];
m6_52 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.Then(''properties table contains the following items:'', ((string)(null)), table1, ''Then '')", prediction=43, span="120-120"];
m6_53 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="ProcessingState.feature.cs", label="this.ScenarioCleanup()", prediction=41, span="122-122"];
m6_54 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102"];
m6_25 [cluster="Unk.OnScenarioStart", file="ProcessingState.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m6_29 [cluster="Unk.CollectScenarioErrors", file="ProcessingState.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m6_21 [cluster="Unk.OnScenarioEnd", file="ProcessingState.feature.cs", label="Entry Unk.OnScenarioEnd", span=""];
m6_67 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", span="150-150"];
m6_68 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying, it should remove the job from the processing set'', ((string[])(null)))", prediction=48, span="152-152"];
m6_69 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", prediction=41, span="154-154"];
m6_70 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="this.FeatureBackground()", prediction=41, span="156-156"];
m6_71 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", prediction=51, span="158-158"];
m6_72 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=52, span="160-160"];
m6_73 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.Then(''the processing set does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=53, span="162-162"];
m6_74 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="this.ScenarioCleanup()", prediction=41, span="164-164"];
m6_75 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", span="150-150"];
m6_35 [cluster="Unk.And", file="ProcessingState.feature.cs", label="Entry Unk.And", span=""];
m6_5 [cluster="Unk.GetTestRunner", file="ProcessingState.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m6_36 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", span="85-85"];
m6_37 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", color=green, community=0, file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name is \'Processing\''', ((string[])(null)))", prediction=55, span="87-87"];
m6_38 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", color=green, community=0, file="ProcessingState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", prediction=41, span="89-89"];
m6_39 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", color=green, community=0, file="ProcessingState.feature.cs", label="this.FeatureBackground()", prediction=41, span="91-91"];
m6_40 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.Then(''the state name is equal to \'Processing\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=58, span="93-93"];
m6_41 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", color=green, community=0, file="ProcessingState.feature.cs", label="this.ScenarioCleanup()", prediction=41, span="95-95"];
m6_42 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", span="85-85"];
m6_14 [cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", span="46-46"];
m6_15 [cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", color=green, community=0, file="ProcessingState.feature.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Processing state''))", prediction=60, span="48-49"];
m6_16 [cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", color=green, community=0, file="ProcessingState.feature.cs", label="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(null)", prediction=61, span="51-51"];
m6_17 [cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", span="46-46"];
m6_18 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", span="56-56"];
m6_19 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.OnScenarioEnd()", prediction=62, span="58-58"];
m6_20 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioTearDown()", span="56-56"];
m6_0 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m6_1 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", prediction=63, span="32-32"];
m6_2 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=1, file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Processing state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", prediction=64, span="33-34"];
m6_3 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", prediction=65, span="35-35"];
m6_4 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m6_13 [cluster="Unk.OnFeatureEnd", file="ProcessingState.feature.cs", label="Entry Unk.OnFeatureEnd", span=""];
m6_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="ProcessingState.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m6_66 [cluster="Unk.When", file="ProcessingState.feature.cs", label="Entry Unk.When", span=""];
m6_57 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", span="129-129"];
m6_58 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying, it should add the job to the processing set'', ((string[])(null)))", prediction=66, span="131-131"];
m6_59 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", prediction=41, span="133-133"];
m6_60 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="this.FeatureBackground()", prediction=41, span="135-135"];
m6_61 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", prediction=69, span="137-137"];
m6_62 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.Then(''the processing set contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=70, span="139-139"];
m6_63 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.And(''processing timestamp is set to UtcNow'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=71, span="141-141"];
m6_64 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", color=green, community=0, file="ProcessingState.feature.cs", label="this.ScenarioCleanup()", prediction=41, span="143-143"];
m6_65 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", span="129-129"];
m6_56 [cluster="Unk.AddRow", file="ProcessingState.feature.cs", label="Entry Unk.AddRow", span=""];
m6_43 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="ProcessingState.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m6_26 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="66-66"];
m6_27 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.CollectScenarioErrors()", prediction=73, span="68-68"];
m6_28 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="66-66"];
m6_44 [cluster="Unk.Then", file="ProcessingState.feature.cs", label="Entry Unk.Then", span=""];
m6_34 [cluster="Unk.Given", file="ProcessingState.feature.cs", label="Entry Unk.Given", span=""];
m6_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="ProcessingState.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m6_55 [cluster="TechTalk.SpecFlow.Table.cstr", file="ProcessingState.feature.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m6_22 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m6_23 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", prediction=74, span="63-63"];
m6_24 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m6_30 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", span="71-71"];
m6_31 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", prediction=75, span="75-75"];
m6_32 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.And(''the Processing state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=76, span="77-77"];
m6_33 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", span="71-71"];
m6_8 [cluster="Unk.OnFeatureStart", file="ProcessingState.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m6_9 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", span="39-39"];
m6_10 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner.OnFeatureEnd()", prediction=77, span="41-41"];
m6_11 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", color=green, community=0, file="ProcessingState.feature.cs", label="testRunner = null", prediction=78, span="42-42"];
m6_12 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureTearDown()", span="39-39"];
m6_76 [file="ProcessingState.feature.cs", label="HangFire.Tests.States.ProcessingStateFeature", span=""];
m7_31 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
m7_32 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="QueueSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RecurringJobManager(null, _factory.Object))", span="39-40"];
m7_33 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="QueueSteps.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="42-42"];
m7_34 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
m7_67 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", span="77-77"];
m7_68 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="QueueSteps.cs", label="var manager = CreateManager()", span="79-79"];
m7_69 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="QueueSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => manager.AddOrUpdate(_id, _job, null))", span="81-82"];
m7_70 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="QueueSteps.cs", label="Assert.Equal(''cronExpression'', exception.ParamName)", span="84-84"];
m7_71 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", span="77-77"];
m7_40 [cluster="RecurringJobManager.cstr", file="QueueSteps.cs", label="Entry RecurringJobManager.cstr", span=""];
m7_110 [cluster="Unk.SetRangeInHash", file="QueueSteps.cs", label="Entry Unk.SetRangeInHash", span=""];
m7_57 [cluster="Hangfire.Cron.Daily()", file="QueueSteps.cs", label="Entry Hangfire.Cron.Daily()", span="54-54"];
m7_18 [cluster="Mock<IWriteOnlyTransaction>.cstr", file="QueueSteps.cs", label="Entry Mock<IWriteOnlyTransaction>.cstr", span=""];
m7_156 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", span="170-170"];
m7_157 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="QueueSteps.cs", label="_connection.Setup(x => x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', _id)))\r\n                .Returns(new Dictionary<string, string>\r\n                {\r\n                    { ''Job'', JobHelper.ToJson(InvocationData.Serialize(Job.FromExpression(() => Console.WriteLine()))) },\r\n                    { ''Queue'', ''my_queue'' }\r\n                })", span="173-178"];
m7_158 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="QueueSteps.cs", label="var manager = CreateManager()", span="180-180"];
m7_159 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="QueueSteps.cs", label="manager.Trigger(_id)", span="183-183"];
m7_160 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="QueueSteps.cs", label="_factory.Verify(x => x.Create(It.Is<CreateContext>(context =>\r\n                ((EnqueuedState)context.InitialState).Queue == ''my_queue'')))", span="186-187"];
m7_161 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuedJobToTheSpecificQueue_IfSpecified()", span="170-170"];
m7_144 [cluster="Unk.GetAllEntriesFromHash", file="QueueSteps.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m7_36 [cluster="Unk.Equal", file="QueueSteps.cs", label="Entry Unk.Equal", span=""];
m7_131 [cluster="Hangfire.RecurringJobManager.Trigger(string)", file="QueueSteps.cs", label="Entry Hangfire.RecurringJobManager.Trigger(string)", span="109-109"];
m7_193 [cluster="Hangfire.RecurringJobManager.RemoveIfExists(string)", file="QueueSteps.cs", label="Entry Hangfire.RecurringJobManager.RemoveIfExists(string)", span="133-133"];
m7_109 [cluster="string.Format(string, object)", file="QueueSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m7_179 [cluster="Unk.DoesNotThrow", file="QueueSteps.cs", label="Entry Unk.DoesNotThrow", span=""];
m7_194 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", span="209-209"];
m7_195 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs", label="var manager = CreateManager()", span="211-211"];
m7_196 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs", label="manager.RemoveIfExists(_id)", span="213-213"];
m7_197 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs", label="_transaction.Verify(x => x.RemoveFromSet(''recurring-jobs'', _id))", span="215-215"];
m7_198 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs", label="_transaction.Verify(x => x.RemoveHash(String.Format(''recurring-job:{0}'', _id)))", span="216-216"];
m7_199 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs", label="_transaction.Verify(x => x.Commit())", span="217-217"];
m7_200 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_RemovesEntriesAndCommitsTheTransaction()", span="209-209"];
m7_75 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", span="88-88"];
m7_76 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="QueueSteps.cs", label="var manager = CreateManager()", span="90-90"];
m7_77 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="QueueSteps.cs", label="var exception = Assert.Throws<ArgumentException>(\r\n                () => manager.AddOrUpdate(_id, _job, ''* * *''))", span="92-93"];
m7_78 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="QueueSteps.cs", label="Assert.Equal(''cronExpression'', exception.ParamName)", span="95-95"];
m7_79 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsInvalid()", span="88-88"];
m7_91 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", span="110-110"];
m7_92 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="QueueSteps.cs", label="var manager = CreateManager()", span="112-112"];
m7_93 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="QueueSteps.cs", label="manager.AddOrUpdate(_id, _job, _cronExpression)", span="114-114"];
m7_94 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="QueueSteps.cs", label="_transaction.Verify(x => x.AddToSet(''recurring-jobs'', _id))", span="116-116"];
m7_95 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", span="110-110"];
m7_35 [cluster="Unk.>", file="QueueSteps.cs", label="Entry Unk.>", span=""];
m7_58 [cluster="Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string)", file="QueueSteps.cs", label="Entry Hangfire.RecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string)", span="55-55"];
m7_100 [cluster="Unk.AddToSet", file="QueueSteps.cs", label="Entry Unk.AddToSet", span=""];
m7_186 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", span="200-200"];
m7_187 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs", label="var manager = CreateManager()", span="202-202"];
m7_188 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => manager.RemoveIfExists(null))", span="204-205"];
m7_189 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.RemoveIfExists_ThrowsAnException_WhenIdIsNull()", span="200-200"];
m7_174 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", span="191-191"];
m7_175 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="QueueSteps.cs", label="var manager = CreateManager()", span="193-193"];
m7_176 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="QueueSteps.cs", label="Assert.DoesNotThrow(() => manager.Trigger(_id))", span="195-195"];
m7_177 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="QueueSteps.cs", label="_factory.Verify(x => x.Create(It.IsAny<CreateContext>()), Times.Never)", span="196-196"];
m7_178 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_DoesNotThrowIfJobDoesNotExist()", span="191-191"];
m7_139 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="QueueSteps.cs", label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="72-72"];
m7_208 [cluster="Unk.RemoveHash", file="QueueSteps.cs", label="Entry Unk.RemoveHash", span=""];
m7_26 [cluster="Unk.GetConnection", file="QueueSteps.cs", label="Entry Unk.GetConnection", span=""];
m7_148 [cluster="System.Console.WriteLine()", file="QueueSteps.cs", label="Entry System.Console.WriteLine()", span="0-0"];
m7_132 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", span="151-151"];
m7_133 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="QueueSteps.cs", label="_connection.Setup(x => x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', _id)))\r\n                .Returns(new Dictionary<string, string>\r\n                {\r\n                    { ''Job'', JobHelper.ToJson(InvocationData.Serialize(Job.FromExpression(() => Console.WriteLine()))) }\r\n                })", span="154-158"];
m7_134 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="QueueSteps.cs", label="var manager = CreateManager()", span="160-160"];
m7_135 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="QueueSteps.cs", label="manager.Trigger(_id)", span="163-163"];
m7_136 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="QueueSteps.cs", label="_factory.Verify(x => x.Create(It.Is<CreateContext>(context => context.InitialState is EnqueuedState)))", span="166-166"];
m7_137 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_EnqueuesScheduledJob()", span="151-151"];
m7_138 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="QueueSteps.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m7_53 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", span="220-220"];
m7_212 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", file="QueueSteps.cs", label="return new RecurringJobManager(_storage.Object, _factory.Object);", span="222-222"];
m7_213 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.CreateManager()", span="220-220"];
m7_16 [cluster="Unk.Setup", file="QueueSteps.cs", label="Entry Unk.Setup", span=""];
m7_41 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", span="46-46"];
m7_42 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="QueueSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RecurringJobManager(_storage.Object, null))", span="48-49"];
m7_43 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="QueueSteps.cs", label="Assert.Equal(''factory'', exception.ParamName)", span="51-51"];
m7_44 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", span="46-46"];
m7_105 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", span="120-120"];
m7_102 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="QueueSteps.cs", label="var manager = CreateManager()", span="122-122"];
m7_103 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="QueueSteps.cs", label="manager.AddOrUpdate(_id, _job, _cronExpression)", span="124-124"];
m7_104 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="QueueSteps.cs", label="_transaction.Verify(x => x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', _id),\r\n                It.Is<Dictionary<string, string>>(rj => \r\n                    rj[''Cron''] == ''* * * * *'' && !String.IsNullOrEmpty(rj[''Job'']))))", span="126-129"];
m7_101 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", span="120-120"];
m7_140 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="QueueSteps.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m7_12 [cluster="Hangfire.Cron.Minutely()", file="QueueSteps.cs", label="Entry Hangfire.Cron.Minutely()", span="29-29"];
m7_115 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", span="133-133"];
m7_116 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="QueueSteps.cs", label="var manager = CreateManager()", span="135-135"];
m7_117 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="QueueSteps.cs", label="manager.AddOrUpdate(_id, _job, _cronExpression)", span="137-137"];
m7_118 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="QueueSteps.cs", label="_transaction.Verify(x => x.Commit())", span="139-139"];
m7_119 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", span="133-133"];
m7_171 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="186-187"];
m7_55 [cluster="lambda expression", file="QueueSteps.cs", label="manager.AddOrUpdate(null, _job, Cron.Daily())", span="60-60"];
m7_38 [cluster="lambda expression", file="QueueSteps.cs", label="new RecurringJobManager(null, _factory.Object)", span="40-40"];
m7_46 [cluster="lambda expression", file="QueueSteps.cs", label="new RecurringJobManager(_storage.Object, null)", span="49-49"];
m7_65 [cluster="lambda expression", file="QueueSteps.cs", label="manager.AddOrUpdate(_id, null, Cron.Daily())", span="71-71"];
m7_73 [cluster="lambda expression", file="QueueSteps.cs", label="manager.AddOrUpdate(_id, _job, null)", span="82-82"];
m7_81 [cluster="lambda expression", file="QueueSteps.cs", label="manager.AddOrUpdate(_id, _job, ''* * *'')", span="93-93"];
m7_89 [cluster="lambda expression", file="QueueSteps.cs", label="manager.AddOrUpdate(_id, _job, ''* * * * 9999'')", span="104-104"];
m7_98 [cluster="lambda expression", file="QueueSteps.cs", label="x.AddToSet(''recurring-jobs'', _id)", span="116-116"];
m7_107 [cluster="lambda expression", file="QueueSteps.cs", label="x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', _id),\r\n                It.Is<Dictionary<string, string>>(rj => \r\n                    rj[''Cron''] == ''* * * * *'' && !String.IsNullOrEmpty(rj[''Job''])))", span="126-129"];
m7_142 [cluster="lambda expression", file="QueueSteps.cs", label="x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', _id))", span="154-154"];
m7_163 [cluster="lambda expression", file="QueueSteps.cs", label="x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', _id))", span="173-173"];
m7_181 [cluster="lambda expression", file="QueueSteps.cs", label="manager.Trigger(_id)", span="195-195"];
m7_202 [cluster="lambda expression", file="QueueSteps.cs", label="x.RemoveFromSet(''recurring-jobs'', _id)", span="215-215"];
m7_206 [cluster="lambda expression", file="QueueSteps.cs", label="x.RemoveHash(String.Format(''recurring-job:{0}'', _id))", span="216-216"];
m7_54 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="60-60"];
m7_56 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="60-60"];
m7_19 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="24-24"];
m7_23 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="30-30"];
m7_27 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="33-33"];
m7_37 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="40-40"];
m7_39 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="40-40"];
m7_45 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="49-49"];
m7_47 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="49-49"];
m7_64 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="71-71"];
m7_66 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="71-71"];
m7_72 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="82-82"];
m7_74 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="82-82"];
m7_80 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="93-93"];
m7_82 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="93-93"];
m7_88 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="104-104"];
m7_90 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="104-104"];
m7_97 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="116-116"];
m7_99 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="116-116"];
m7_106 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="126-129"];
m7_108 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="126-129"];
m7_111 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="128-129"];
m7_120 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="139-139"];
m7_129 [cluster="lambda expression", file="QueueSteps.cs", label="manager.Trigger(null)", span="147-147"];
m7_141 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="154-154"];
m7_145 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="157-157"];
m7_143 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="154-154"];
m7_149 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="166-166"];
m7_162 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="173-173"];
m7_165 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="176-176"];
m7_164 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="173-173"];
m7_168 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="186-187"];
m7_180 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="195-195"];
m7_182 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="195-195"];
m7_183 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="196-196"];
m7_191 [cluster="lambda expression", file="QueueSteps.cs", label="manager.RemoveIfExists(null)", span="205-205"];
m7_201 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="215-215"];
m7_203 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="215-215"];
m7_205 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="216-216"];
m7_207 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="216-216"];
m7_209 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="217-217"];
m7_150 [cluster="lambda expression", file="QueueSteps.cs", label="x.Create(It.Is<CreateContext>(context => context.InitialState is EnqueuedState))", span="166-166"];
m7_169 [cluster="lambda expression", file="QueueSteps.cs", label="x.Create(It.Is<CreateContext>(context =>\r\n                ((EnqueuedState)context.InitialState).Queue == ''my_queue''))", span="186-187"];
m7_184 [cluster="lambda expression", file="QueueSteps.cs", label="x.Create(It.IsAny<CreateContext>())", span="196-196"];
m7_21 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="24-24"];
m7_20 [cluster="lambda expression", file="QueueSteps.cs", label="Method()", span="24-24"];
m7_25 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="30-30"];
m7_24 [cluster="lambda expression", file="QueueSteps.cs", label="x.GetConnection()", span="30-30"];
m7_29 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="33-33"];
m7_28 [cluster="lambda expression", file="QueueSteps.cs", label="x.CreateWriteTransaction()", span="33-33"];
m7_113 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="128-129"];
m7_112 [cluster="lambda expression", file="QueueSteps.cs", label="rj[''Cron''] == ''* * * * *'' && !String.IsNullOrEmpty(rj[''Job''])", span="129-129"];
m7_122 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="139-139"];
m7_121 [cluster="lambda expression", file="QueueSteps.cs", label="x.Commit()", span="139-139"];
m7_128 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="147-147"];
m7_130 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="147-147"];
m7_147 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="157-157"];
m7_146 [cluster="lambda expression", file="QueueSteps.cs", label="Console.WriteLine()", span="157-157"];
m7_151 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="166-166"];
m7_167 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="176-176"];
m7_166 [cluster="lambda expression", file="QueueSteps.cs", label="Console.WriteLine()", span="176-176"];
m7_170 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="186-187"];
m7_185 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="196-196"];
m7_190 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="205-205"];
m7_192 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="205-205"];
m7_211 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="217-217"];
m7_210 [cluster="lambda expression", file="QueueSteps.cs", label="x.Commit()", span="217-217"];
m7_153 [cluster="lambda expression", file="QueueSteps.cs", label="Entry lambda expression", span="166-166"];
m7_155 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="166-166"];
m7_154 [cluster="lambda expression", file="QueueSteps.cs", label="context.InitialState is EnqueuedState", span="166-166"];
m7_172 [cluster="lambda expression", file="QueueSteps.cs", label="((EnqueuedState)context.InitialState).Queue == ''my_queue''", span="187-187"];
m7_173 [cluster="lambda expression", file="QueueSteps.cs", label="Exit lambda expression", span="186-187"];
m7_59 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", span="66-66"];
m7_60 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="QueueSteps.cs", label="var manager = CreateManager()", span="68-68"];
m7_61 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="QueueSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => manager.AddOrUpdate(_id, null, Cron.Daily()))", span="70-71"];
m7_62 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="QueueSteps.cs", label="Assert.Equal(''job'', exception.ParamName)", span="73-73"];
m7_63 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", span="66-66"];
m7_83 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", span="99-99"];
m7_84 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="QueueSteps.cs", label="var manager = CreateManager()", span="101-101"];
m7_85 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="QueueSteps.cs", label="var exception = Assert.Throws<ArgumentException>(\r\n                () => manager.AddOrUpdate(_id, _job, ''* * * * 9999''))", span="103-104"];
m7_86 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="QueueSteps.cs", label="Assert.Equal(''cronExpression'', exception.ParamName)", span="106-106"];
m7_87 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpression_HaveInvalidParts()", span="99-99"];
m7_96 [cluster="Unk.Verify", file="QueueSteps.cs", label="Entry Unk.Verify", span=""];
m7_48 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", span="55-55"];
m7_49 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", color=green, community=0, file="QueueSteps.cs", label="var manager = CreateManager()", prediction=79, span="57-57"];
m7_50 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => manager.AddOrUpdate(null, _job, Cron.Daily()))", span="59-60"];
m7_51 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs", label="Assert.Equal(''recurringJobId'', exception.ParamName)", span="62-62"];
m7_52 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", span="55-55"];
m7_123 [cluster="Unk.Commit", file="QueueSteps.cs", label="Entry Unk.Commit", span=""];
m7_30 [cluster="Unk.CreateWriteTransaction", file="QueueSteps.cs", label="Entry Unk.CreateWriteTransaction", span=""];
m7_114 [cluster="Unk.IsNullOrEmpty", file="QueueSteps.cs", label="Entry Unk.IsNullOrEmpty", span=""];
m7_22 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Method()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Method()", span="225-225"];
m7_214 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Method()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Method()", span="225-225"];
m7_0 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", span="21-21"];
m7_1 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs", label="_id = ''recurring-job-id''", span="23-23"];
m7_2 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs", label="_job = Job.FromExpression(() => Method())", span="24-24"];
m7_3 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs", label="_cronExpression = Cron.Minutely()", span="25-25"];
m7_4 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs", label="_storage = new Mock<JobStorage>()", span="26-26"];
m7_5 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs", label="_factory = new Mock<IBackgroundJobFactory>()", span="27-27"];
m7_6 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs", label="_connection = new Mock<IStorageConnection>()", span="29-29"];
m7_7 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs", label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="30-30"];
m7_8 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs", label="_transaction = new Mock<IWriteOnlyTransaction>()", span="32-32"];
m7_9 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs", label="_connection.Setup(x => x.CreateWriteTransaction()).Returns(_transaction.Object)", span="33-33"];
m7_10 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", span="21-21"];
m7_204 [cluster="Unk.RemoveFromSet", file="QueueSteps.cs", label="Entry Unk.RemoveFromSet", span=""];
m7_152 [cluster="Unk.Create", file="QueueSteps.cs", label="Entry Unk.Create", span=""];
m7_14 [cluster="Mock<IBackgroundJobFactory>.cstr", file="QueueSteps.cs", label="Entry Mock<IBackgroundJobFactory>.cstr", span=""];
m7_17 [cluster="Unk.Returns", file="QueueSteps.cs", label="Entry Unk.Returns", span=""];
m7_15 [cluster="Mock<IStorageConnection>.cstr", file="QueueSteps.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m7_13 [cluster="Mock<JobStorage>.cstr", file="QueueSteps.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m7_124 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs", label="Entry Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", span="143-143"];
m7_125 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs", label="var manager = CreateManager()", span="145-145"];
m7_126 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs", label="Assert.Throws<ArgumentNullException>(() => manager.Trigger(null))", span="147-147"];
m7_127 [cluster="Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", file="QueueSteps.cs", label="Exit Hangfire.Core.Tests.RecurringJobManagerFacts.Trigger_ThrowsAnException_WhenIdIsNull()", span="143-143"];
m7_11 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="QueueSteps.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="232-232"];
m7_215 [file="QueueSteps.cs", label="Hangfire.Core.Tests.RecurringJobManagerFacts", span=""];
m7_216 [file="QueueSteps.cs", label=manager, span=""];
m7_217 [file="QueueSteps.cs", label=manager, span=""];
m7_218 [file="QueueSteps.cs", label=manager, span=""];
m7_219 [file="QueueSteps.cs", label=manager, span=""];
m7_220 [file="QueueSteps.cs", label=manager, span=""];
m7_222 [file="QueueSteps.cs", label=manager, span=""];
m7_221 [file="QueueSteps.cs", label=manager, span=""];
m7_223 [file="QueueSteps.cs", label=manager, span=""];
m9_44 [cluster="Unk.Then", file="SchedulePoller.feature.cs", label="Entry Unk.Then", span=""];
m9_58 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", span="125-125"];
m9_62 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''it\'s state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=80, span="133-133"];
m9_61 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="testRunner.Given(''a scheduled job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="131-131"];
m9_63 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", prediction=81, span="135-135"];
m9_64 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=82, span="137-137"];
m9_65 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=83, span="139-139"];
m9_66 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="141-141"];
m9_60 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="129-129"];
m9_59 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Poller will enqueue only jobs in the Scheduled state'', ((string[])(null)))", span="127-127"];
m9_67 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", span="125-125"];
m9_12 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="SchedulePoller.feature.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m9_43 [cluster="Unk.When", file="SchedulePoller.feature.cs", label="Entry Unk.When", span=""];
m9_47 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", span="100-100"];
m9_51 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", prediction=84, span="108-108"];
m9_50 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SchedulePoller.feature.cs", label="testRunner.Given(''a future job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="106-106"];
m9_52 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.Then(''the job remains to be in the Scheduled state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=85, span="110-110"];
m9_53 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''the schedule contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=86, span="112-112"];
m9_54 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=87, span="114-114"];
m9_55 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''schedule poller returns \'false\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=88, span="116-116"];
m9_56 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="118-118"];
m9_49 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SchedulePoller.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="104-104"];
m9_48 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SchedulePoller.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Future jobs are not being enqueued'', ((string[])(null)))", span="102-102"];
m9_57 [cluster="HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", span="100-100"];
m9_68 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", span="148-148"];
m9_72 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.Then(''schedule poller returns \'false\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=89, span="156-156"];
m9_71 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="154-154"];
m9_73 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="158-158"];
m9_70 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="152-152"];
m9_69 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Returns false when there are no jobs in the schedule'', ((string[])(null)))", span="150-150"];
m9_74 [cluster="HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", span="148-148"];
m9_42 [cluster="Unk.Given", file="SchedulePoller.feature.cs", label="Entry Unk.Given", span=""];
m9_29 [cluster="Unk.CollectScenarioErrors", file="SchedulePoller.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m9_83 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", span="184-184"];
m9_87 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''it\'s state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=90, span="192-192"];
m9_86 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="testRunner.Given(''a scheduled job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="190-190"];
m9_88 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", prediction=91, span="194-194"];
m9_89 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=92, span="196-196"];
m9_90 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="198-198"];
m9_85 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="188-188"];
m9_84 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Poller will fail only jobs in the Scheduled state'', ((string[])(null)))", span="186-186"];
m9_91 [cluster="HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.SchedulePollerFeature.PollerWillFailOnlyJobsInTheScheduledState()", span="184-184"];
m9_25 [cluster="Unk.OnScenarioStart", file="SchedulePoller.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m9_26 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", span="66-66"];
m9_27 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", file="SchedulePoller.feature.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m9_28 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.SchedulePollerFeature.ScenarioCleanup()", span="66-66"];
m9_45 [cluster="Unk.And", file="SchedulePoller.feature.cs", label="Entry Unk.And", span=""];
m9_41 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SchedulePoller.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m9_5 [cluster="HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", span="21-21"];
m9_6 [cluster="HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="SchedulePoller.feature.cs", label="Assert.IsNotNull(context)", span="23-23"];
m9_9 [cluster="HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="SchedulePoller.feature.cs", label="context.CandidateState = _changeState", span="29-29"];
m9_7 [cluster="HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="SchedulePoller.feature.cs", label="_results.Add(_name)", span="25-25"];
m9_8 [cluster="HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="SchedulePoller.feature.cs", label="_changeState != null", span="27-27"];
m9_10 [cluster="HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.TestStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", span="21-21"];
m9_22 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m9_23 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m9_24 [cluster="HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m9_75 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", span="165-165"];
m9_79 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", prediction=93, span="173-173"];
m9_78 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs", label="testRunner.Given(''a scheduled job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="171-171"];
m9_80 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.Then(''the job moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=94, span="175-175"];
m9_81 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="177-177"];
m9_77 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="169-169"];
m9_76 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Poller move the job to the Failed state when it could not find it\'s type'', ((string[])(null)))", span="167-167"];
m9_82 [cluster="HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", span="165-165"];
m9_11 [cluster="Unk.IsNotNull", file="SchedulePoller.feature.cs", label="Entry Unk.IsNotNull", span=""];
m9_0 [cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", span="14-14"];
m9_1 [cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="SchedulePoller.feature.cs", label="_name = name", span="16-16"];
m9_2 [cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="SchedulePoller.feature.cs", label="_results = results", span="17-17"];
m9_3 [cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="SchedulePoller.feature.cs", label="_changeState = changeState", span="18-18"];
m9_4 [cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", span="14-14"];
m9_46 [cluster="Unk.But", file="SchedulePoller.feature.cs", label="Entry Unk.But", span=""];
m9_30 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", span="75-75"];
m9_34 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", prediction=95, span="83-83"];
m9_33 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="testRunner.Given(''a scheduled job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
m9_35 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.Then(''the job becomes Enqueued'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=96, span="85-85"];
m9_36 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''the schedule does not contain it anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=97, span="87-87"];
m9_37 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.But(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", prediction=98, span="89-89"];
m9_38 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs", label="testRunner.And(''schedule poller returns \'true\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=99, span="91-91"];
m9_39 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="93-93"];
m9_32 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m9_31 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Scheduled jobs are being enqueued on their actual queues'', ((string[])(null)))", span="77-77"];
m9_40 [cluster="HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.SchedulePollerFeature.ScheduledJobsAreBeingEnqueuedOnTheirActualQueues()", span="75-75"];
m9_13 [file="SchedulePoller.feature.cs", label="HangFire.Tests.TestStateChangingFilter", span=""];
m9_92 [file="SchedulePoller.feature.cs", label="HangFire.Tests.SchedulePollerFeature", span=""];
m10_0 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="States.feature.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="46-46"];
m10_1 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="storage == null", prediction=100, span="48-48"];
m10_2 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="throw new ArgumentNullException(''storage'');", prediction=101, span="48-48"];
m10_3 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="String.IsNullOrEmpty(resource)", prediction=102, span="49-49"];
m10_4 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="throw new ArgumentNullException(''resource'');", prediction=103, span="49-49"];
m10_5 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="(timeout.TotalSeconds + CommandTimeoutAdditionSeconds) > Int32.MaxValue", prediction=102, span="50-50"];
m10_6 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="throw new ArgumentException(string.Format(''The timeout specified is too large. Please supply a timeout equal to or less than {0} seconds'', Int32.MaxValue - CommandTimeoutAdditionSeconds), ''timeout'');", prediction=105, span="50-50"];
m10_7 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="_storage = storage", prediction=106, span="52-52"];
m10_10 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="Acquire(_connection, _resource, timeout)", prediction=102, span="56-56"];
m10_8 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="_resource = resource", prediction=108, span="53-53"];
m10_9 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="_connection = storage.CreateAndOpenConnection()", prediction=109, span="54-54"];
m10_11 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="States.feature.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="46-46"];
m10_12 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="States.feature.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m10_43 [cluster="Unk.>", file="States.feature.cs", label="Entry Unk.>", span=""];
m10_14 [cluster="System.ArgumentException.ArgumentException(string, string)", file="States.feature.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m10_16 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="States.feature.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="217-217"];
m10_13 [cluster="string.IsNullOrEmpty(string)", file="States.feature.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m10_42 [cluster="Unk.Execute", file="States.feature.cs", label="Entry Unk.Execute", span=""];
m10_45 [cluster="Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", file="States.feature.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", span="22-22"];
m10_47 [cluster="Unk.Format", file="States.feature.cs", label="Entry Unk.Format", span=""];
m10_48 [cluster="string.Format(string, object, object)", file="States.feature.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m10_24 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="States.feature.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", span="113-113"];
m10_52 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs", label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", prediction=110, span="118-118"];
m10_49 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs", label="var parameters = new DynamicParameters()", prediction=110, span="115-115"];
m10_50 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs", label="parameters.Add(''@Resource'', resource)", prediction=110, span="116-116"];
m10_51 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs", label="parameters.Add(''@LockOwner'', LockOwner)", prediction=110, span="117-117"];
m10_53 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs", label="connection.Execute(\r\n                @''sp_releaseapplock'',\r\n                parameters,\r\n                commandType: CommandType.StoredProcedure)", prediction=110, span="120-123"];
m10_54 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs", label="var releaseResult = parameters.Get<int>(''@Result'')", prediction=110, span="125-125"];
m10_56 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs", label="throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                        ''Could not release a lock on the resource '{0}': Server returned the '{1}' error.'',\r\n                        resource,\r\n                        releaseResult));", prediction=110, span="129-133"];
m10_55 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", color=green, community=0, file="States.feature.cs", label="releaseResult < 0", prediction=117, span="127-127"];
m10_57 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="States.feature.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", span="113-113"];
m10_46 [cluster="Unk.ContainsKey", file="States.feature.cs", label="Entry Unk.ContainsKey", span=""];
m10_17 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="States.feature.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", span="75-75"];
m10_25 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="var parameters = new DynamicParameters()", prediction=118, span="77-77"];
m10_36 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="lockResult == -1", prediction=118, span="98-98"];
m10_26 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="parameters.Add(''@Resource'', resource)", prediction=118, span="78-78"];
m10_27 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="parameters.Add(''@DbPrincipal'', ''public'')", prediction=118, span="79-79"];
m10_28 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="parameters.Add(''@LockMode'', LockMode)", prediction=118, span="80-80"];
m10_29 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="parameters.Add(''@LockOwner'', LockOwner)", prediction=118, span="81-81"];
m10_30 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="parameters.Add(''@LockTimeout'', timeout.TotalMilliseconds)", prediction=118, span="82-82"];
m10_31 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", prediction=118, span="83-83"];
m10_33 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="connection.Execute(\r\n                @''sp_getapplock'',\r\n                parameters,\r\n                commandTimeout: commandTimeout,\r\n                commandType: CommandType.StoredProcedure)", prediction=118, span="88-92"];
m10_34 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="var lockResult = parameters.Get<int>(''@Result'')", prediction=118, span="94-94"];
m10_32 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="var commandTimeout = (int)(timeout.TotalSeconds + CommandTimeoutAdditionSeconds)", prediction=128, span="86-86"];
m10_37 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="throw new DistributedLockTimeoutException(resource);", prediction=118, span="100-100"];
m10_38 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                    ''Could not place a lock on the resource '{0}': {1}.'',\r\n                    resource,\r\n                    LockErrorMessages.ContainsKey(lockResult)\r\n                        ? LockErrorMessages[lockResult]\r\n                        : String.Format(''Server returned the '{0}' error.'', lockResult)));", prediction=118, span="103-109"];
m10_35 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", color=green, community=0, file="States.feature.cs", label="lockResult < 0", prediction=131, span="96-96"];
m10_39 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="States.feature.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", span="75-75"];
m10_15 [cluster="string.Format(string, object)", file="States.feature.cs", label="Entry string.Format(string, object)", span="0-0"];
m10_44 [cluster="Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", file="States.feature.cs", label="Entry Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", span="6-6"];
m10_18 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="States.feature.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="59-59"];
m10_19 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="States.feature.cs", label=_completed, prediction=102, span="61-61"];
m10_20 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="States.feature.cs", label="return;", prediction=133, span="61-61"];
m10_21 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="States.feature.cs", label="_completed = true", prediction=134, span="63-63"];
m10_22 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", color=green, community=0, file="States.feature.cs", label="Release(_connection, _resource)", prediction=102, span="67-67"];
m10_23 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="States.feature.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="59-59"];
m10_40 [cluster="DynamicParameters.cstr", file="States.feature.cs", label="Entry DynamicParameters.cstr", span=""];
m10_41 [cluster="Unk.Add", file="States.feature.cs", label="Entry Unk.Add", span=""];
m10_58 [file="States.feature.cs", label="Hangfire.SqlServer.SqlServerDistributedLock", span=""];
m13_27 [cluster="HangFire.BackgroundJobServer.Start()", color=green, community=0, file="SucceededState.feature.cs", label="Logger.Info(''Starting HangFire Server...'')", prediction=136, span="68-68"];
m13_28 [cluster="HangFire.BackgroundJobServer.Start()", color=green, community=0, file="SucceededState.feature.cs", label="_serverRunner.Start()", prediction=137, span="69-69"];
m13_29 [cluster="HangFire.BackgroundJobServer.Start()", file="SucceededState.feature.cs", label="Exit HangFire.BackgroundJobServer.Start()", span="66-66"];
m13_20 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SucceededState.feature.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m13_56 [cluster="System.Collections.Generic.List<T>.List()", file="SucceededState.feature.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m13_59 [cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()", file="SucceededState.feature.cs", label="Entry HangFire.BackgroundJobServer.GetStorageComponentRunners()", span="130-130"];
m13_73 [cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()", color=green, community=0, file="SucceededState.feature.cs", label="var components = _storage.GetComponents()", prediction=138, span="132-132"];
m13_74 [cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()", color=green, community=0, file="SucceededState.feature.cs", label="return components\r\n                .Select(component => new ServerComponentRunner(component))\r\n                .ToArray();", prediction=139, span="134-136"];
m13_75 [cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()", file="SucceededState.feature.cs", label="Exit HangFire.BackgroundJobServer.GetStorageComponentRunners()", span="130-130"];
m13_24 [cluster="string.Format(string, object, object)", file="SucceededState.feature.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m13_4 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", file="SucceededState.feature.cs", label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", span="49-49"];
m13_5 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs", label="workerCount <= 0", prediction=140, span="51-51"];
m13_6 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs", label="throw new ArgumentOutOfRangeException(''workerCount'', ''Worker count value must be more than zero.'');", prediction=141, span="51-51"];
m13_7 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs", label="queues == null", prediction=142, span="52-52"];
m13_8 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs", label="throw new ArgumentNullException(''queues'');", prediction=143, span="52-52"];
m13_9 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs", label="queues.Length == 0", prediction=142, span="53-53"];
m13_10 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs", label="throw new ArgumentException(''You should specify at least one queue to listen.'', ''queues'');", prediction=145, span="53-53"];
m13_11 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs", label="storage == null", prediction=142, span="54-54"];
m13_12 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs", label="throw new ArgumentNullException(''storage'');", prediction=147, span="54-54"];
m13_13 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs", label="_storage = storage", prediction=148, span="56-56"];
m13_14 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs", label="_workerCount = workerCount", prediction=149, span="57-57"];
m13_15 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs", label="_queues = queues", prediction=150, span="58-58"];
m13_16 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs", label="_serverId = String.Format(''{0}:{1}'', Environment.MachineName.ToLowerInvariant(), Process.GetCurrentProcess().Id)", prediction=151, span="60-60"];
m13_17 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", color=green, community=0, file="SucceededState.feature.cs", label="_serverRunner = GetServerRunner()", prediction=152, span="63-63"];
m13_18 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", file="SucceededState.feature.cs", label="Exit HangFire.BackgroundJobServer.BackgroundJobServer(int, string[], HangFire.JobStorage)", span="49-49"];
m13_30 [cluster="Unk.Info", file="SucceededState.feature.cs", label="Entry Unk.Info", span=""];
m13_76 [cluster="HangFire.JobStorage.GetComponents()", file="SucceededState.feature.cs", label="Entry HangFire.JobStorage.GetComponents()", span="57-57"];
m13_19 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", file="SucceededState.feature.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0"];
m13_47 [cluster="System.Lazy<T>.Lazy(System.Func<T>)", file="SucceededState.feature.cs", label="Entry System.Lazy<T>.Lazy(System.Func<T>)", span="0-0"];
m13_23 [cluster="System.Diagnostics.Process.GetCurrentProcess()", file="SucceededState.feature.cs", label="Entry System.Diagnostics.Process.GetCurrentProcess()", span="0-0"];
m13_31 [cluster="HangFire.Server.IServerComponentRunner.Start()", file="SucceededState.feature.cs", label="Entry HangFire.Server.IServerComponentRunner.Start()", span="22-22"];
m13_72 [cluster="SchedulePoller.cstr", file="SucceededState.feature.cs", label="Entry SchedulePoller.cstr", span=""];
m13_78 [cluster="Unk.ToArray", file="SucceededState.feature.cs", label="Entry Unk.ToArray", span=""];
m13_57 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", file="SucceededState.feature.cs", label="Entry HangFire.BackgroundJobServer.GetCommonComponentRunners()", span="115-115"];
m13_61 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", color=green, community=0, file="SucceededState.feature.cs", label="yield return new ServerComponentRunner(\r\n                new ServerHeartbeat(_storage, _serverId));", prediction=137, span="117-118"];
m13_62 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", color=green, community=0, file="SucceededState.feature.cs", label="yield return new WorkerManager(\r\n                _serverId, _workerCount, _queues, _storage, new JobPerformanceProcess(), new StateMachineFactory(_storage));", prediction=137, span="120-121"];
m13_63 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", color=green, community=0, file="SucceededState.feature.cs", label="yield return new ServerComponentRunner(\r\n                new ServerWatchdog(_storage));", prediction=137, span="123-124"];
m13_64 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", color=green, community=0, file="SucceededState.feature.cs", label="yield return new ServerComponentRunner(\r\n                new SchedulePoller(_storage, new StateMachineFactory(_storage), _options.SchedulePollingInterval));", prediction=137, span="126-127"];
m13_65 [cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()", file="SucceededState.feature.cs", label="Exit HangFire.BackgroundJobServer.GetCommonComponentRunners()", span="115-115"];
m13_67 [cluster="HangFire.Server.ServerHeartbeat.ServerHeartbeat(HangFire.JobStorage, string)", file="SucceededState.feature.cs", label="Entry HangFire.Server.ServerHeartbeat.ServerHeartbeat(HangFire.JobStorage, string)", span="28-28"];
m13_35 [cluster="HangFire.Server.IServerComponentRunner.Stop()", file="SucceededState.feature.cs", label="Entry HangFire.Server.IServerComponentRunner.Stop()", span="23-23"];
m13_69 [cluster="HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()", file="SucceededState.feature.cs", label="Entry HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()", span="28-28"];
m13_32 [cluster="HangFire.BackgroundJobServer.Stop()", file="SucceededState.feature.cs", label="Entry HangFire.BackgroundJobServer.Stop()", span="72-72"];
m13_33 [cluster="HangFire.BackgroundJobServer.Stop()", color=green, community=0, file="SucceededState.feature.cs", label="_serverRunner.Stop()", prediction=137, span="74-74"];
m13_34 [cluster="HangFire.BackgroundJobServer.Stop()", file="SucceededState.feature.cs", label="Exit HangFire.BackgroundJobServer.Stop()", span="72-72"];
m13_45 [cluster="HangFire.Server.ServerContext.ServerContext()", file="SucceededState.feature.cs", label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18"];
m13_48 [cluster="HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent, HangFire.Server.ServerComponentRunnerOptions)", file="SucceededState.feature.cs", label="Entry HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent, HangFire.Server.ServerComponentRunnerOptions)", span="41-41"];
m13_50 [cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", file="SucceededState.feature.cs", label="Entry HangFire.BackgroundJobServer.GetServerComponentsRunner()", span="105-105"];
m13_51 [cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", color=green, community=0, file="SucceededState.feature.cs", label="var componentRunners = new List<IServerComponentRunner>()", prediction=137, span="107-107"];
m13_52 [cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", color=green, community=0, file="SucceededState.feature.cs", label="componentRunners.AddRange(GetCommonComponentRunners())", prediction=137, span="109-109"];
m13_53 [cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", color=green, community=0, file="SucceededState.feature.cs", label="componentRunners.AddRange(GetStorageComponentRunners())", prediction=137, span="110-110"];
m13_54 [cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", color=green, community=0, file="SucceededState.feature.cs", label="return new ServerComponentRunnerCollection(componentRunners);", prediction=137, span="112-112"];
m13_55 [cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", file="SucceededState.feature.cs", label="Exit HangFire.BackgroundJobServer.GetServerComponentsRunner()", span="105-105"];
m13_22 [cluster="string.ToLowerInvariant()", file="SucceededState.feature.cs", label="Entry string.ToLowerInvariant()", span="0-0"];
m13_79 [cluster="lambda expression", file="SucceededState.feature.cs", label="Entry lambda expression", span="135-135"];
m13_80 [cluster="lambda expression", color=green, community=0, file="SucceededState.feature.cs", label="new ServerComponentRunner(component)", prediction=162, span="135-135"];
m13_81 [cluster="lambda expression", file="SucceededState.feature.cs", label="Exit lambda expression", span="135-135"];
m13_60 [cluster="HangFire.Server.ServerComponentRunnerCollection.ServerComponentRunnerCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerComponentRunner>)", file="SucceededState.feature.cs", label="Entry HangFire.Server.ServerComponentRunnerCollection.ServerComponentRunnerCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerComponentRunner>)", span="26-26"];
m13_58 [cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", file="SucceededState.feature.cs", label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0"];
m13_77 [cluster="Unk.Select", file="SucceededState.feature.cs", label="Entry Unk.Select", span=""];
m13_68 [cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", file="SucceededState.feature.cs", label="Entry HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", span="32-32"];
m13_21 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SucceededState.feature.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m13_25 [cluster="HangFire.BackgroundJobServer.GetServerRunner()", file="SucceededState.feature.cs", label="Entry HangFire.BackgroundJobServer.GetServerRunner()", span="83-83"];
m13_41 [cluster="HangFire.BackgroundJobServer.GetServerRunner()", color=green, community=0, file="SucceededState.feature.cs", label="var context = new ServerContext\r\n            {\r\n                Queues = _queues,\r\n                WorkerCount = _workerCount\r\n            }", prediction=163, span="85-89"];
m13_42 [cluster="HangFire.BackgroundJobServer.GetServerRunner()", color=green, community=0, file="SucceededState.feature.cs", label="var server = new ServerCore(\r\n                _serverId, \r\n                context, \r\n                _storage, \r\n                new Lazy<IServerComponentRunner>(GetServerComponentsRunner))", prediction=164, span="91-95"];
m13_43 [cluster="HangFire.BackgroundJobServer.GetServerRunner()", color=green, community=0, file="SucceededState.feature.cs", label="return new ServerComponentRunner(\r\n                server, \r\n                new ServerComponentRunnerOptions\r\n                {\r\n                    ShutdownTimeout = ServerShutdownTimeout\r\n                });", prediction=165, span="97-102"];
m13_44 [cluster="HangFire.BackgroundJobServer.GetServerRunner()", file="SucceededState.feature.cs", label="Exit HangFire.BackgroundJobServer.GetServerRunner()", span="83-83"];
m13_49 [cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="SucceededState.feature.cs", label="Entry HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", span="24-24"];
m13_36 [cluster="HangFire.BackgroundJobServer.Dispose()", file="SucceededState.feature.cs", label="Entry HangFire.BackgroundJobServer.Dispose()", span="77-77"];
m13_37 [cluster="HangFire.BackgroundJobServer.Dispose()", color=green, community=0, file="SucceededState.feature.cs", label="_serverRunner.Dispose()", prediction=137, span="79-79"];
m13_38 [cluster="HangFire.BackgroundJobServer.Dispose()", color=green, community=0, file="SucceededState.feature.cs", label="Logger.Info(''HangFire Server stopped.'')", prediction=167, span="80-80"];
m13_39 [cluster="HangFire.BackgroundJobServer.Dispose()", file="SucceededState.feature.cs", label="Exit HangFire.BackgroundJobServer.Dispose()", span="77-77"];
m13_66 [cluster="HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent)", file="SucceededState.feature.cs", label="Entry HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent)", span="36-36"];
m13_40 [cluster="System.IDisposable.Dispose()", file="SucceededState.feature.cs", label="Entry System.IDisposable.Dispose()", span="0-0"];
m13_71 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", file="SucceededState.feature.cs", label="Entry HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="29-29"];
m13_70 [cluster="HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", file="SucceededState.feature.cs", label="Entry HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", span="16-16"];
m13_46 [cluster="HangFire.Server.ServerCore.ServerCore(string, HangFire.Server.ServerContext, HangFire.JobStorage, System.Lazy<HangFire.Server.IServerComponentRunner>)", file="SucceededState.feature.cs", label="Entry HangFire.Server.ServerCore.ServerCore(string, HangFire.Server.ServerContext, HangFire.JobStorage, System.Lazy<HangFire.Server.IServerComponentRunner>)", span="31-31"];
m13_82 [file="SucceededState.feature.cs", label="HangFire.BackgroundJobServer", span=""];
d3 -> d9  [color=green, key=1, label=server, style=dashed];
d43 -> d88  [color=darkseagreen4, key=1, label=number, style=dashed];
d6 -> d8  [color=green, key=1, label=command, style=dashed];
d6 -> d10  [color=green, key=1, label=command, style=dashed];
d6 -> d20  [color=green, key=1, label=command, style=dashed];
d6 -> d29  [color=green, key=1, label=command, style=dashed];
d6 -> d35  [color=green, key=1, label=command, style=dashed];
d6 -> d41  [color=green, key=1, label=command, style=dashed];
d6 -> d45  [color=green, key=1, label=command, style=dashed];
d11 -> d13  [color=green, key=1, label=workCount, style=dashed];
d21 -> d23  [color=darkseagreen4, key=1, label=workCount, style=dashed];
d30 -> d32  [color=darkseagreen4, key=1, label=workCount, style=dashed];
d36 -> d38  [color=darkseagreen4, key=1, label=workCount, style=dashed];
d42 -> d44  [color=darkseagreen4, key=1, label=seconds, style=dashed];
d12 -> d16  [color=green, key=1, label=i, style=dashed];
d14 -> d70  [color=darkseagreen4, key=1, label=number, style=dashed];
d16 -> d16  [color=green, key=1, label=i, style=dashed];
d15 -> d69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d44 -> d87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d47 -> d90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d22 -> d25  [color=darkseagreen4, key=1, label=i, style=dashed];
d31 -> d34  [color=darkseagreen4, key=1, label=i, style=dashed];
d37 -> d40  [color=darkseagreen4, key=1, label=i, style=dashed];
d104 -> d88  [color=darkseagreen4, key=1, label=number, style=dashed];
d25 -> d25  [color=darkseagreen4, key=1, label=i, style=dashed];
d24 -> d73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d34 -> d34  [color=darkseagreen4, key=1, label=i, style=dashed];
d33 -> d77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d40 -> d40  [color=darkseagreen4, key=1, label=i, style=dashed];
d39 -> d81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d103 -> d70  [color=darkseagreen4, key=1, label=number, style=dashed];
d92 -> d95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d93 -> d99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_4 -> m1_11  [color=green, key=1, label="HangFire.States.ElectStateContext", style=dashed];
m1_4 -> m1_14  [color=green, key=1, label="HangFire.States.ElectStateContext", style=dashed];
m1_4 -> m1_16  [color=green, key=1, label="HangFire.States.ElectStateContext", style=dashed];
m1_5 -> m1_14  [color=green, key=1, label=failedState, style=dashed];
m1_5 -> m1_16  [color=green, key=1, label=failedState, style=dashed];
m1_8 -> m1_11  [color=green, key=1, label=retryAttempt, style=dashed];
m1_8 -> m1_14  [color=green, key=1, label=retryAttempt, style=dashed];
m1_10 -> m1_14  [color=green, key=1, label=delay, style=dashed];
m1_19 -> m1_27  [color=green, key=1, label=long, style=dashed];
m1_33 -> m1_14  [color=green, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m1_33 -> m1_9  [color=green, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m1_33 -> m1_15  [color=green, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m1_33 -> m1_13  [color=green, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m2_94 -> m2_32  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
m2_94 -> m2_37  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
m2_94 -> m2_46  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
m2_94 -> m2_52  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
m2_94 -> m2_57  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
m2_94 -> m2_62  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
m2_94 -> m2_66  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
m2_94 -> m2_74  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
m2_94 -> m2_78  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
m2_94 -> m2_83  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
m2_94 -> m2_87  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
m2_94 -> m2_92  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m3_0 -> m3_4  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m3_7 -> m3_12  [color=green, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_7 -> m3_15  [color=green, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_12 -> m3_12  [color=green, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_13 -> m3_15  [color=green, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_13 -> m3_13  [color=green, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_15 -> m3_15  [color=green, key=1, label="System.Threading.CancellationToken", style=dashed];
m3_10 -> m3_21  [color=green, key=1, label="lambda expression", style=dashed];
m3_10 -> m3_14  [color=green, key=1, label=removedCount, style=dashed];
m3_33 -> m3_15  [color=green, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
m3_33 -> m3_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
m3_33 -> m3_4  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
m3_33 -> m3_27  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
m4_42 -> m4_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_1 -> m4_4  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_1 -> m4_5  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_1 -> m4_6  [color=darkseagreen4, key=1, label=options, style=dashed];
m4_35 -> m4_37  [color=green, key=1, label="lambda expression", style=dashed];
m4_21 -> m4_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_13 -> m4_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_28 -> m4_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_22 -> m5_24  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_49 -> m6_51  [color=green, key=1, label=table1, style=dashed];
m6_49 -> m6_52  [color=green, key=1, label=table1, style=dashed];
m6_76 -> m6_38  [color=green, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m6_76 -> m6_39  [color=green, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m6_76 -> m6_41  [color=green, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m6_76 -> m6_47  [color=green, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m6_76 -> m6_48  [color=green, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m6_76 -> m6_53  [color=green, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m6_76 -> m6_59  [color=green, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m6_76 -> m6_60  [color=green, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m6_76 -> m6_64  [color=green, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m6_76 -> m6_69  [color=green, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m6_76 -> m6_70  [color=green, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m6_76 -> m6_74  [color=green, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m7_32 -> m7_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_68 -> m7_73  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_69 -> m7_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_157 -> m7_162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_157 -> m7_165  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_160 -> m7_168  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_197 -> m7_201  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_198 -> m7_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_199 -> m7_209  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_76 -> m7_81  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_77 -> m7_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_94 -> m7_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_187 -> m7_191  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_188 -> m7_190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_175 -> m7_181  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_176 -> m7_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_177 -> m7_183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_133 -> m7_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_133 -> m7_145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_136 -> m7_149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_42 -> m7_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_104 -> m7_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_118 -> m7_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_107 -> m7_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_150 -> m7_153  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_169 -> m7_171  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_60 -> m7_65  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_61 -> m7_64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_84 -> m7_89  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_85 -> m7_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_49 -> m7_55  [color=green, key=1, label=manager, style=dashed];
m7_50 -> m7_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_2 -> m7_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_7 -> m7_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_9 -> m7_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_125 -> m7_129  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_126 -> m7_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_215 -> m7_7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_9  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_38  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_46  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_55  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_65  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_73  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_81  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_89  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_93  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_94  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_98  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_103  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_104  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_107  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_117  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_118  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_133  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_142  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_135  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_136  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_157  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_163  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_159  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_160  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_176  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_181  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_177  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_196  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_197  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_202  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_198  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_206  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_199  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_215 -> m7_212  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.RecurringJobManagerFacts", style=dashed];
m7_216 -> m7_55  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_217 -> m7_65  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_218 -> m7_73  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_219 -> m7_81  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_220 -> m7_89  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_222 -> m7_181  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_221 -> m7_129  [color=darkseagreen4, key=1, label=manager, style=dashed];
m7_223 -> m7_191  [color=darkseagreen4, key=1, label=manager, style=dashed];
m9_13 -> m9_7  [color=darkseagreen4, key=1, label="HangFire.Tests.TestStateChangingFilter", style=dashed];
m9_13 -> m9_8  [color=darkseagreen4, key=1, label="HangFire.Tests.TestStateChangingFilter", style=dashed];
m9_92 -> m9_39  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m9_92 -> m9_56  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m9_92 -> m9_66  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m9_92 -> m9_73  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m9_92 -> m9_81  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m9_92 -> m9_90  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m9_92 -> m9_32  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m9_92 -> m9_49  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m9_92 -> m9_60  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m9_92 -> m9_70  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m9_92 -> m9_77  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m9_92 -> m9_85  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerFeature", style=dashed];
m10_0 -> m10_3  [color=green, key=1, label=string, style=dashed];
m10_0 -> m10_5  [color=green, key=1, label="System.TimeSpan", style=dashed];
m10_5 -> m10_5  [color=green, key=1, label="System.TimeSpan", style=dashed];
m10_5 -> m10_10  [color=green, key=1, label="System.TimeSpan", style=dashed];
m10_24 -> m10_50  [color=green, key=1, label=string, style=dashed];
m10_24 -> m10_53  [color=green, key=1, label=IDbConnection, style=dashed];
m10_24 -> m10_56  [color=green, key=1, label=string, style=dashed];
m10_49 -> m10_51  [color=green, key=1, label=parameters, style=dashed];
m10_49 -> m10_52  [color=green, key=1, label=parameters, style=dashed];
m10_49 -> m10_53  [color=green, key=1, label=parameters, style=dashed];
m10_54 -> m10_56  [color=green, key=1, label=releaseResult, style=dashed];
m10_17 -> m10_26  [color=green, key=1, label=string, style=dashed];
m10_17 -> m10_30  [color=green, key=1, label="System.TimeSpan", style=dashed];
m10_17 -> m10_33  [color=green, key=1, label=IDbConnection, style=dashed];
m10_17 -> m10_37  [color=green, key=1, label=string, style=dashed];
m10_17 -> m10_38  [color=green, key=1, label=string, style=dashed];
m10_25 -> m10_27  [color=green, key=1, label=parameters, style=dashed];
m10_25 -> m10_28  [color=green, key=1, label=parameters, style=dashed];
m10_25 -> m10_29  [color=green, key=1, label=parameters, style=dashed];
m10_25 -> m10_30  [color=green, key=1, label=parameters, style=dashed];
m10_25 -> m10_31  [color=green, key=1, label=parameters, style=dashed];
m10_25 -> m10_33  [color=green, key=1, label=parameters, style=dashed];
m10_30 -> m10_30  [color=green, key=1, label="System.TimeSpan", style=dashed];
m10_34 -> m10_38  [color=green, key=1, label=lockResult, style=dashed];
m10_34 -> m10_36  [color=green, key=1, label=lockResult, style=dashed];
m10_58 -> m10_10  [color=green, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m10_58 -> m10_19  [color=green, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m10_58 -> m10_22  [color=green, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m13_74 -> m13_79  [color=green, key=1, label="lambda expression", style=dashed];
m13_4 -> m13_7  [color=green, key=1, label="string[]", style=dashed];
m13_4 -> m13_9  [color=green, key=1, label="string[]", style=dashed];
m13_4 -> m13_11  [color=green, key=1, label="HangFire.JobStorage", style=dashed];
m13_51 -> m13_53  [color=green, key=1, label=componentRunners, style=dashed];
m13_51 -> m13_54  [color=green, key=1, label=componentRunners, style=dashed];
m13_82 -> m13_28  [color=green, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m13_82 -> m13_33  [color=green, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m13_82 -> m13_37  [color=green, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m13_82 -> m13_52  [color=green, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m13_82 -> m13_53  [color=green, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m13_82 -> m13_61  [color=green, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m13_82 -> m13_62  [color=green, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m13_82 -> m13_63  [color=green, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m13_82 -> m13_64  [color=green, key=1, label="HangFire.BackgroundJobServer", style=dashed];
}
