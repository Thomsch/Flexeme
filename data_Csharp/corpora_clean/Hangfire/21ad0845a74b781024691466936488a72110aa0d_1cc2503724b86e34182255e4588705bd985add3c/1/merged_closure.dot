digraph  {
n138 [label="HangFire.Redis.Tests.RedisConnectionFacts", span=""];
n139 [label="HangFire.Redis.RedisConnection", span=""];
n140 [label="HangFire.Redis.RedisConnection", span=""];
n141 [label="HangFire.Redis.RedisConnection", span=""];
n142 [label="HangFire.Redis.RedisConnection", span=""];
n143 [label="HangFire.Redis.RedisConnection", span=""];
n0 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="10-10"];
n1 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", label="UseConnection(\r\n                connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null)))", span="12-14"];
n2 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="10-10"];
n3 [cluster="Unk.UseConnection", label="Entry Unk.UseConnection", span=""];
n4 [cluster="lambda expression", label="Entry lambda expression", span="13-14"];
n5 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null))", span="13-14"];
n9 [cluster="lambda expression", label="connection.GetStateData(null)", span="14-14"];
n6 [cluster="lambda expression", label="Exit lambda expression", span="13-14"];
n7 [cluster="Unk.>", label="Entry Unk.>", span=""];
n8 [cluster="lambda expression", label="Entry lambda expression", span="14-14"];
n10 [cluster="lambda expression", label="Exit lambda expression", span="14-14"];
n11 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", label="Entry HangFire.Redis.RedisConnection.GetStateData(string)", span="204-204"];
n12 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", span="18-18"];
n13 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetStateData(''random-id'');\r\n                Assert.Null(result);\r\n            })", span="20-24"];
n14 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", span="18-18"];
n15 [cluster="lambda expression", label="Entry lambda expression", span="20-24"];
n16 [cluster="lambda expression", label="var result = connection.GetStateData(''random-id'')", span="22-22"];
n17 [cluster="lambda expression", label="Assert.Null(result)", span="23-23"];
n18 [cluster="lambda expression", label="Exit lambda expression", span="20-24"];
n19 [cluster="Unk.Null", label="Entry Unk.Null", span=""];
n20 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", span="28-28"];
n21 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", label="UseConnections((redis, connection) =>\r\n            {\r\n                redis.SetRangeInHash(\r\n                    ''hangfire:job:my-job:state'',\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''State'', ''Name'' },\r\n                        { ''Reason'', ''Reason'' },\r\n                        { ''Key'', ''Value'' }\r\n                    });\r\n\r\n                var result = connection.GetStateData(''my-job'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(''Name'', result.Name);\r\n                Assert.Equal(''Reason'', result.Reason);\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="30-47"];
n22 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", span="28-28"];
n23 [cluster="Unk.UseConnections", label="Entry Unk.UseConnections", span=""];
n24 [cluster="lambda expression", label="Entry lambda expression", span="30-47"];
n25 [cluster="lambda expression", label="redis.SetRangeInHash(\r\n                    ''hangfire:job:my-job:state'',\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''State'', ''Name'' },\r\n                        { ''Reason'', ''Reason'' },\r\n                        { ''Key'', ''Value'' }\r\n                    })", span="32-39"];
n26 [cluster="lambda expression", label="var result = connection.GetStateData(''my-job'')", span="41-41"];
n32 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n33 [cluster="Unk.SetRangeInHash", label="Entry Unk.SetRangeInHash", span=""];
n27 [cluster="lambda expression", label="Assert.NotNull(result)", span="43-43"];
n28 [cluster="lambda expression", label="Assert.Equal(''Name'', result.Name)", span="44-44"];
n29 [cluster="lambda expression", label="Assert.Equal(''Reason'', result.Reason)", span="45-45"];
n30 [cluster="lambda expression", label="Assert.Equal(''Value'', result.Data[''Key''])", span="46-46"];
n34 [cluster="Unk.NotNull", label="Entry Unk.NotNull", span=""];
n35 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n31 [cluster="lambda expression", label="Exit lambda expression", span="30-47"];
n36 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="51-51"];
n37 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null)))", span="53-54"];
n38 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="51-51"];
n39 [cluster="lambda expression", label="Entry lambda expression", span="53-54"];
n40 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null))", span="54-54"];
n43 [cluster="lambda expression", label="connection.GetAllItemsFromSet(null)", span="54-54"];
n41 [cluster="lambda expression", label="Exit lambda expression", span="53-54"];
n42 [cluster="lambda expression", label="Entry lambda expression", span="54-54"];
n44 [cluster="lambda expression", label="Exit lambda expression", span="54-54"];
n45 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", label="Entry HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", span="240-240"];
n46 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", span="58-58"];
n47 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(0, result.Count);\r\n            })", span="60-66"];
n48 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", span="58-58"];
n49 [cluster="lambda expression", label="Entry lambda expression", span="60-66"];
n50 [cluster="lambda expression", label="var result = connection.GetAllItemsFromSet(''some-set'')", span="62-62"];
n51 [cluster="lambda expression", label="Assert.NotNull(result)", span="64-64"];
n52 [cluster="lambda expression", label="Assert.Equal(0, result.Count)", span="65-65"];
n53 [cluster="lambda expression", label="Exit lambda expression", span="60-66"];
n54 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="70-70"];
n55 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", label="UseConnections((redis, connection) =>\r\n            {\r\n                // Arrange\r\n                redis.AddItemToSortedSet(''hangfire:some-set'', ''1'');\r\n                redis.AddItemToSortedSet(''hangfire:some-set'', ''2'');\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Contains(''1'', result);\r\n                Assert.Contains(''2'', result);\r\n            })", span="72-85"];
n56 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="70-70"];
n57 [cluster="lambda expression", label="Entry lambda expression", span="72-85"];
n58 [cluster="lambda expression", label="redis.AddItemToSortedSet(''hangfire:some-set'', ''1'')", span="75-75"];
n59 [cluster="lambda expression", label="redis.AddItemToSortedSet(''hangfire:some-set'', ''2'')", span="76-76"];
n60 [cluster="lambda expression", label="var result = connection.GetAllItemsFromSet(''some-set'')", span="79-79"];
n65 [cluster="Unk.AddItemToSortedSet", label="Entry Unk.AddItemToSortedSet", span=""];
n61 [cluster="lambda expression", label="Assert.Equal(2, result.Count)", span="82-82"];
n62 [cluster="lambda expression", label="Assert.Contains(''1'', result)", span="83-83"];
n63 [cluster="lambda expression", label="Assert.Contains(''2'', result)", span="84-84"];
n66 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
n64 [cluster="lambda expression", label="Exit lambda expression", span="72-85"];
n67 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="89-89"];
n68 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="91-97"];
n69 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="89-89"];
n70 [cluster="lambda expression", label="Entry lambda expression", span="91-97"];
n71 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()))", span="93-94"];
n75 [cluster="lambda expression", label="connection.SetRangeInHash(null, new Dictionary<string, string>())", span="94-94"];
n72 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="96-96"];
n74 [cluster="lambda expression", label="Entry lambda expression", span="94-94"];
n73 [cluster="lambda expression", label="Exit lambda expression", span="91-97"];
n76 [cluster="lambda expression", label="Exit lambda expression", span="94-94"];
n77 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", label="Entry HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="255-255"];
n78 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="101-101"];
n79 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="103-109"];
n80 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="101-101"];
n81 [cluster="lambda expression", label="Entry lambda expression", span="103-109"];
n82 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null))", span="105-106"];
n86 [cluster="lambda expression", label="connection.SetRangeInHash(''some-hash'', null)", span="106-106"];
n83 [cluster="lambda expression", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="108-108"];
n85 [cluster="lambda expression", label="Entry lambda expression", span="106-106"];
n84 [cluster="lambda expression", label="Exit lambda expression", span="103-109"];
n87 [cluster="lambda expression", label="Exit lambda expression", span="106-106"];
n88 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", span="113-113"];
n89 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", label="UseConnections((redis, connection) =>\r\n            {\r\n                connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                var hash = redis.GetAllEntriesFromHash(''hangfire:some-hash'');\r\n                Assert.Equal(''Value1'', hash[''Key1'']);\r\n                Assert.Equal(''Value2'', hash[''Key2'']);\r\n            })", span="115-126"];
n90 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", span="113-113"];
n91 [cluster="lambda expression", label="Entry lambda expression", span="115-126"];
n92 [cluster="lambda expression", label="connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="117-121"];
n93 [cluster="lambda expression", label="var hash = redis.GetAllEntriesFromHash(''hangfire:some-hash'')", span="123-123"];
n94 [cluster="lambda expression", label="Assert.Equal(''Value1'', hash[''Key1''])", span="124-124"];
n97 [cluster="Unk.GetAllEntriesFromHash", label="Entry Unk.GetAllEntriesFromHash", span=""];
n95 [cluster="lambda expression", label="Assert.Equal(''Value2'', hash[''Key2''])", span="125-125"];
n96 [cluster="lambda expression", label="Exit lambda expression", span="115-126"];
n98 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="130-130"];
n99 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null)))", span="132-133"];
n100 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="130-130"];
n101 [cluster="lambda expression", label="Entry lambda expression", span="132-133"];
n102 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null))", span="133-133"];
n105 [cluster="lambda expression", label="connection.GetAllEntriesFromHash(null)", span="133-133"];
n103 [cluster="lambda expression", label="Exit lambda expression", span="132-133"];
n104 [cluster="lambda expression", label="Entry lambda expression", span="133-133"];
n106 [cluster="lambda expression", label="Exit lambda expression", span="133-133"];
n107 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", label="Entry HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", span="263-263"];
n108 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", span="137-137"];
n109 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n                Assert.Null(result);\r\n            })", span="139-143"];
n110 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", span="137-137"];
n111 [cluster="lambda expression", label="Entry lambda expression", span="139-143"];
n112 [cluster="lambda expression", label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="141-141"];
n113 [cluster="lambda expression", label="Assert.Null(result)", span="142-142"];
n114 [cluster="lambda expression", label="Exit lambda expression", span="139-143"];
n115 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", span="147-147"];
n116 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", label="UseConnections((redis, connection) =>\r\n            {\r\n                // Arrange\r\n                redis.SetRangeInHash(''hangfire:some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n\r\n                // Assert\r\n                Assert.NotNull(result);\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="149-165"];
n117 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", span="147-147"];
n118 [cluster="lambda expression", label="Entry lambda expression", span="149-165"];
n119 [cluster="lambda expression", label="redis.SetRangeInHash(''hangfire:some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="152-156"];
n120 [cluster="lambda expression", label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="159-159"];
n121 [cluster="lambda expression", label="Assert.NotNull(result)", span="162-162"];
n122 [cluster="lambda expression", label="Assert.Equal(''Value1'', result[''Key1''])", span="163-163"];
n123 [cluster="lambda expression", label="Assert.Equal(''Value2'', result[''Key2''])", span="164-164"];
n124 [cluster="lambda expression", label="Exit lambda expression", span="149-165"];
n125 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", span="168-168"];
n126 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", label="var redis = RedisUtils.CreateClient()", span="170-170"];
n128 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", label="action(redis, connection)", span="173-173"];
n127 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", label="var connection = new RedisConnection(redis)", span="171-171"];
n130 [cluster="HangFire.Redis.Tests.RedisUtils.CreateClient()", label="Entry HangFire.Redis.Tests.RedisUtils.CreateClient()", span="15-15"];
n131 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", label="Entry HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="32-32"];
n129 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", span="168-168"];
n132 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
n133 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", span="177-177"];
n134 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", label="var connection = new RedisConnection(RedisUtils.CreateClient())", span="179-179"];
n135 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", label="action(connection)", span="181-181"];
n136 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", span="177-177"];
n137 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
d38 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", color=green, community=0, label="_component.Setup(x => x.Execute(It.IsAny<CancellationToken>())).Throws<InvalidOperationException>()", prediction=0, span="53-53"];
d114 [label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", span=""];
d37 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", span="51-51"];
d39 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", color=green, community=0, label="var wrapper = CreateWrapper()", prediction=0, span="54-54"];
d43 [cluster="Unk.Setup", label="Entry Unk.Setup", span=""];
d11 [cluster="Unk.>", label="Entry Unk.>", span=""];
d45 [cluster="lambda expression", label="Entry lambda expression", span="53-53"];
d40 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", color=green, community=0, label="Assert.Throws<InvalidOperationException>(() => wrapper.Execute(_cts.Token))", prediction=0, span="56-56"];
d21 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.CreateWrapper()", label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.CreateWrapper()", span="100-100"];
d49 [cluster="lambda expression", color=green, community=0, label="wrapper.Execute(_cts.Token)", prediction=0, span="56-56"];
d41 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", color=green, community=0, label="_component.Verify(x => x.Execute(\r\n                It.IsAny<CancellationToken>()),\r\n                Times.Exactly(_maxRetryAttempts))", prediction=0, span="58-60"];
d48 [cluster="lambda expression", label="Entry lambda expression", span="56-56"];
d115 [label=wrapper, span=""];
d50 [cluster="lambda expression", label="Exit lambda expression", span="56-56"];
d28 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.Execute(System.Threading.CancellationToken)", label="Entry Hangfire.Server.AutomaticRetryServerComponentWrapper.Execute(System.Threading.CancellationToken)", span="52-52"];
d42 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_AutomaticallyRetries_ComponentInvocation_OnException()", span="51-51"];
d44 [cluster="Unk.Exactly", label="Entry Unk.Exactly", span=""];
d29 [cluster="Unk.Verify", label="Entry Unk.Verify", span=""];
d46 [cluster="lambda expression", color=green, community=0, label="x.Execute(It.IsAny<CancellationToken>())", prediction=5, span="53-53"];
d47 [cluster="lambda expression", label="Exit lambda expression", span="53-53"];
d33 [cluster="Unk.Execute", label="Entry Unk.Execute", span=""];
d52 [cluster="lambda expression", color=green, community=0, label="x.Execute(\r\n                It.IsAny<CancellationToken>())", prediction=6, span="58-59"];
d53 [cluster="lambda expression", label="Exit lambda expression", span="58-59"];
d55 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", color=green, community=0, label="_component.Setup(x => x.Execute(It.IsAny<CancellationToken>())).Throws<InvalidOperationException>()", prediction=0, span="66-66"];
d54 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", span="64-64"];
d56 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", color=green, community=0, label="_maxRetryAttempts = 0", prediction=8, span="67-67"];
d61 [cluster="lambda expression", label="Entry lambda expression", span="66-66"];
d57 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", color=green, community=0, label="var wrapper = CreateWrapper()", prediction=9, span="68-68"];
d58 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", label="Assert.Throws<InvalidOperationException>(() => wrapper.Execute(_cts.Token))", span="70-70"];
d65 [cluster="lambda expression", label="wrapper.Execute(_cts.Token)", span="70-70"];
d62 [cluster="lambda expression", color=green, community=0, label="x.Execute(It.IsAny<CancellationToken>())", prediction=10, span="66-66"];
d63 [cluster="lambda expression", label="Exit lambda expression", span="66-66"];
d1 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()", label="_component = new Mock<IServerComponent>()", span="17-17"];
d2 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()", label="_maxRetryAttempts = 3", span="18-18"];
d3 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()", label="_cts = new CancellationTokenSource()", span="19-19"];
d18 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.InnerComponent_ReturnsGivenComponent()", label="var wrapper = CreateWrapper()", span="35-35"];
d19 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.InnerComponent_ReturnsGivenComponent()", label="Assert.Same(_component.Object, wrapper.InnerComponent)", span="37-37"];
d24 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()", label="var wrapper = CreateWrapper()", span="43-43"];
d25 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()", label="wrapper.Execute(_cts.Token)", span="45-45"];
d26 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()", label="_component.Verify(x => x.Execute(It.Is<CancellationToken>(y => y == _cts.Token)))", span="47-47"];
d31 [cluster="lambda expression", label="x.Execute(It.Is<CancellationToken>(y => y == _cts.Token))", span="47-47"];
d35 [cluster="lambda expression", label="y == _cts.Token", span="47-47"];
d59 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", label="_component.Verify(x => x.Execute(\r\n                It.IsAny<CancellationToken>()),\r\n                Times.Once)", span="72-74"];
d71 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()", label="var wrapper = CreateWrapper()", span="80-80"];
d72 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()", label="_component.Setup(x => x.Execute(It.IsAny<CancellationToken>())).Throws<InvalidOperationException>()", span="81-81"];
d73 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()", label="_cts.Cancel()", span="82-82"];
d74 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()", label="Assert.Throws<OperationCanceledException>(() => wrapper.Execute(_cts.Token))", span="84-84"];
d82 [cluster="lambda expression", label="wrapper.Execute(_cts.Token)", span="84-84"];
d75 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()", label="_component.Verify(x => x.Execute(It.IsAny<CancellationToken>()), Times.Once)", span="86-86"];
d88 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()", label="_component.Setup(x => x.Execute(It.IsAny<CancellationToken>())).Throws<OperationCanceledException>()", span="92-92"];
d89 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()", label="var wrapper = CreateWrapper()", span="93-93"];
d90 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()", label="Assert.Throws<OperationCanceledException>(() => wrapper.Execute(_cts.Token))", span="95-95"];
d97 [cluster="lambda expression", label="wrapper.Execute(_cts.Token)", span="95-95"];
d91 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()", label="_component.Verify(x => x.Execute(It.IsAny<CancellationToken>()), Times.Once)", span="97-97"];
d102 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.CreateWrapper()", label="return new AutomaticRetryServerComponentWrapper(_component.Object)\r\n            {\r\n                MaxRetryAttempts = _maxRetryAttempts,\r\n                DelayCallback = x => TimeSpan.Zero\r\n            };", span="102-106"];
d8 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new AutomaticRetryServerComponentWrapper(null))", span="25-27"];
d68 [cluster="lambda expression", label="x.Execute(\r\n                It.IsAny<CancellationToken>())", span="72-73"];
d79 [cluster="lambda expression", label="x.Execute(It.IsAny<CancellationToken>())", span="81-81"];
d85 [cluster="lambda expression", label="x.Execute(It.IsAny<CancellationToken>())", span="86-86"];
d94 [cluster="lambda expression", label="x.Execute(It.IsAny<CancellationToken>())", span="92-92"];
d100 [cluster="lambda expression", label="x.Execute(It.IsAny<CancellationToken>())", span="97-97"];
d103 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.CreateWrapper()", label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.CreateWrapper()", span="100-100"];
d60 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldNotRetry_ComponentInvocation_WhenMaxRetryAttemptsIsZero()", span="64-64"];
d64 [cluster="lambda expression", label="Entry lambda expression", span="70-70"];
d116 [label=wrapper, span=""];
d66 [cluster="lambda expression", label="Exit lambda expression", span="70-70"];
d0 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()", label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()", span="15-15"];
d5 [cluster="Mock<IServerComponent>.cstr", label="Entry Mock<IServerComponent>.cstr", span=""];
d4 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()", label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.AutomaticRetryServerComponentWrapperFacts()", span="15-15"];
d6 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
d17 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.InnerComponent_ReturnsGivenComponent()", label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.InnerComponent_ReturnsGivenComponent()", span="33-33"];
d20 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.InnerComponent_ReturnsGivenComponent()", label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.InnerComponent_ReturnsGivenComponent()", span="33-33"];
d22 [cluster="Unk.Same", label="Entry Unk.Same", span=""];
d23 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()", label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()", span="41-41"];
d27 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()", label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_CallsComponents_ExecuteMethod()", span="41-41"];
d30 [cluster="lambda expression", label="Entry lambda expression", span="47-47"];
d32 [cluster="lambda expression", label="Exit lambda expression", span="47-47"];
d34 [cluster="lambda expression", label="Entry lambda expression", span="47-47"];
d36 [cluster="lambda expression", label="Exit lambda expression", span="47-47"];
d67 [cluster="lambda expression", label="Entry lambda expression", span="72-73"];
d70 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()", label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()", span="78-78"];
d78 [cluster="lambda expression", label="Entry lambda expression", span="81-81"];
d77 [cluster="System.Threading.CancellationTokenSource.Cancel()", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
d81 [cluster="lambda expression", label="Entry lambda expression", span="84-84"];
d117 [label=wrapper, span=""];
d83 [cluster="lambda expression", label="Exit lambda expression", span="84-84"];
d76 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()", label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_ShouldBeInterrupted_ByCancellationToken()", span="78-78"];
d84 [cluster="lambda expression", label="Entry lambda expression", span="86-86"];
d87 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()", label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()", span="90-90"];
d93 [cluster="lambda expression", label="Entry lambda expression", span="92-92"];
d96 [cluster="lambda expression", label="Entry lambda expression", span="95-95"];
d118 [label=wrapper, span=""];
d98 [cluster="lambda expression", label="Exit lambda expression", span="95-95"];
d92 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()", label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Execute_DoesNotCauseAutomaticRetry_OnOperationCanceledException()", span="90-90"];
d99 [cluster="lambda expression", label="Entry lambda expression", span="97-97"];
d104 [cluster="AutomaticRetryServerComponentWrapper.cstr", label="Entry AutomaticRetryServerComponentWrapper.cstr", span=""];
d7 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()", label="Entry Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()", span="23-23"];
d9 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()", label="Assert.Equal(''innerComponent'', exception.ParamName)", span="29-29"];
d13 [cluster="lambda expression", label="Entry lambda expression", span="27-27"];
d69 [cluster="lambda expression", label="Exit lambda expression", span="72-73"];
d80 [cluster="lambda expression", label="Exit lambda expression", span="81-81"];
d86 [cluster="lambda expression", label="Exit lambda expression", span="86-86"];
d95 [cluster="lambda expression", label="Exit lambda expression", span="92-92"];
d101 [cluster="lambda expression", label="Exit lambda expression", span="97-97"];
d10 [cluster="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()", label="Exit Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts.Ctor_ThrowsAnException_WhenInnerComponentIsNull()", span="23-23"];
d12 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
d15 [cluster="lambda expression", label="Exit lambda expression", span="27-27"];
d14 [cluster="lambda expression", label="new AutomaticRetryServerComponentWrapper(null)", span="27-27"];
d16 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.AutomaticRetryServerComponentWrapper(Hangfire.Server.IServerComponent)", label="Entry Hangfire.Server.AutomaticRetryServerComponentWrapper.AutomaticRetryServerComponentWrapper(Hangfire.Server.IServerComponent)", span="31-31"];
m0_86 [cluster="System.Collections.Generic.List<T>.List()", file="RedisMonitoringApi.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_190 [cluster="long.Parse(string)", file="RedisMonitoringApi.cs", label="Entry long.Parse(string)", span="0-0"];
m0_247 [cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", span="343-343"];
m0_248 [cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis =>\r\n            {\r\n                var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}'', queue),\r\n                    from,\r\n                    from + perPage - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'' },\r\n                    new[] { ''EnqueuedAt'', ''State'' },\r\n                    (job, jobData, state) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", prediction=11, span="346-365"];
m0_249 [cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.EnqueuedJobs(string, int, int)", span="343-343"];
m0_311 [cluster="Dictionary<string, string>.cstr", file="RedisMonitoringApi.cs", label="Entry Dictionary<string, string>.cstr", span=""];
m0_15 [cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis => \r\n                redis.GetListCount(String.Format(''hangfire:queue:{0}'', queue)));", prediction=12, span="47-48"];
m0_274 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", span="457-457"];
m0_329 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var i = 0", span="462-462"];
m0_338 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="i < dates.Count", span="472-472"];
m0_334 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var keys = dates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="468-468"];
m0_328 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var dates = new List<DateTime>()", span="461-461"];
m0_336 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var result = new Dictionary<DateTime, long>()", span="471-471"];
m0_330 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="i < 24", span="462-462"];
m0_333 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="i++", span="462-462"];
m0_337 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var i = 0", span="472-472"];
m0_343 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="i++", span="472-472"];
m0_339 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="long value", span="474-474"];
m0_344 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="return result;", span="483-483"];
m0_331 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="dates.Add(endDate)", span="464-464"];
m0_327 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var endDate = DateTime.UtcNow", span="460-460"];
m0_335 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var valuesMap = redis.GetValuesMap(keys)", span="469-469"];
m0_342 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="result.Add(dates[i], value)", span="480-480"];
m0_332 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="endDate = endDate.AddHours(-1)", span="465-465"];
m0_340 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="475-475"];
m0_341 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="value = 0", span="477-477"];
m0_345 [cluster="HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.GetHourlyTimelineStats(IRedisClient, string)", span="457-457"];
m0_122 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", span="486-486"];
m0_367 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="i < stringDates.Count", span="505-505"];
m0_363 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var keys = stringDates.Select(x => String.Format(''hangfire:stats:{0}:{1}'', type, x)).ToList()", span="500-500"];
m0_362 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="499-499"];
m0_358 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var dates = new List<DateTime>()", span="491-491"];
m0_365 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var result = new Dictionary<DateTime, long>()", span="504-504"];
m0_356 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var endDate = DateTime.UtcNow.Date", span="489-489"];
m0_364 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var valuesMap = redis.GetValuesMap(keys)", span="502-502"];
m0_366 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var i = 0", span="505-505"];
m0_372 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="i++", span="505-505"];
m0_368 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="long value", span="507-507"];
m0_373 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="return result;", span="515-515"];
m0_360 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="dates.Add(endDate)", span="495-495"];
m0_359 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="startDate <= endDate", span="493-493"];
m0_357 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="var startDate = endDate.AddDays(-7)", span="490-490"];
m0_371 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="result.Add(dates[i], value)", span="512-512"];
m0_361 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="endDate = endDate.AddDays(-1)", span="496-496"];
m0_369 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="!long.TryParse(valuesMap[valuesMap.Keys.ElementAt(i)], out value)", span="508-508"];
m0_370 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="value = 0", span="510-510"];
m0_374 [cluster="HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.GetTimelineStats(IRedisClient, string)", span="486-486"];
m0_165 [cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="RedisMonitoringApi.cs", label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55"];
m0_257 [cluster="HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", span="368-368"];
m0_258 [cluster="HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis =>\r\n            {\r\n                var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    from, from + perPage - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'', ''Fetched'' },\r\n                    null,\r\n                    (job, jobData, state) => new FetchedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(jobData[1])\r\n                    });\r\n            });", prediction=13, span="371-388"];
m0_259 [cluster="HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.FetchedJobs(string, int, int)", span="368-368"];
m0_349 [cluster="Unk.TryParse", file="RedisMonitoringApi.cs", label="Entry Unk.TryParse", span=""];
m0_61 [cluster="HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23"];
m0_56 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="RedisMonitoringApi.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
m0_62 [cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="RedisMonitoringApi.cs", label="Entry HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="60-60"];
m0_164 [cluster="int.Parse(string)", file="RedisMonitoringApi.cs", label="Entry int.Parse(string)", span="0-0"];
m0_275 [cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", span="396-396"];
m0_276 [cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis => GetHourlyTimelineStats(redis, ''failed''));", prediction=12, span="398-398"];
m0_277 [cluster="HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.HourlyFailedJobs()", span="396-396"];
m0_515 [cluster="Unk.GetClient", file="RedisMonitoringApi.cs", label="Entry Unk.GetClient", span=""];
m0_433 [cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.GetStatistics()", span="580-580"];
m0_434 [cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis =>\r\n            {\r\n                var stats = new StatisticsDto();\r\n\r\n                var queues = redis.GetAllItemsFromSet(''hangfire:queues'');\r\n\r\n                using (var pipeline = redis.CreatePipeline())\r\n                {\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:servers''),\r\n                        x => stats.Servers = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:queues''),\r\n                        x => stats.Queues = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:schedule''),\r\n                        x => stats.Scheduled = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:processing''),\r\n                        x => stats.Processing = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:succeeded''),\r\n                        x => stats.Succeeded = long.Parse(x ?? ''0''));\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:failed''),\r\n                        x => stats.Failed = x);\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:deleted''),\r\n                        x => stats.Deleted = long.Parse(x ?? ''0''));\r\n\r\n                    pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:recurring-jobs''),\r\n                        x => stats.Recurring = x);\r\n\r\n                    foreach (var queue in queues)\r\n                    {\r\n                        var queueName = queue;\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName)),\r\n                            x => stats.Enqueued += x);\r\n                    }\r\n\r\n                    pipeline.Flush();\r\n                }\r\n\r\n                return stats;\r\n            });", prediction=15, span="582-634"];
m0_435 [cluster="HangFire.Redis.RedisMonitoringApi.GetStatistics()", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.GetStatistics()", span="580-580"];
m0_22 [cluster="System.Enum.HasFlag(System.Enum)", file="RedisMonitoringApi.cs", label="Entry System.Enum.HasFlag(System.Enum)", span="0-0"];
m0_23 [cluster="Unk.True", color=green, community=0, file="RedisMonitoringApi.cs", label="Entry Unk.True", prediction=12, span=""];
m0_24 [cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsATask_ThatCallsTheExecuteMethod_OfAGivenComponent()", file="RedisMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsATask_ThatCallsTheExecuteMethod_OfAGivenComponent()", span="39-39"];
m0_55 [cluster="Unk.GetJobsWithProperties", file="RedisMonitoringApi.cs", label="Entry Unk.GetJobsWithProperties", span=""];
m0_57 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="RedisMonitoringApi.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m0_421 [cluster="KeyValuePair<string, T>.cstr", file="RedisMonitoringApi.cs", label="Entry KeyValuePair<string, T>.cstr", span=""];
m0_91 [cluster="JobList<ScheduledJobDto>.cstr", file="RedisMonitoringApi.cs", label="Entry JobList<ScheduledJobDto>.cstr", span=""];
m0_88 [cluster="Unk.CreatePipeline", file="RedisMonitoringApi.cs", label="Entry Unk.CreatePipeline", span=""];
m0_522 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m0_516 [cluster="Unk.action", file="RedisMonitoringApi.cs", label="Entry Unk.action", span=""];
m0_402 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="RedisMonitoringApi.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m0_281 [cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.JobDetails(string)", span="401-401"];
m0_282 [cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis =>\r\n            {\r\n                var job = redis.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', jobId));\r\n                if (job.Count == 0) return null;\r\n\r\n                var hiddenProperties = new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'', ''State'', ''CreatedAt'' };\r\n\r\n                var historyList = redis.GetAllItemsFromList(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId));\r\n\r\n                var history = historyList\r\n                    .Select(JobHelper.FromJson<Dictionary<string, string>>)\r\n                    .ToList();\r\n\r\n                var stateHistory = new List<StateHistoryDto>(history.Count);\r\n                foreach (var entry in history)\r\n                {\r\n                    var dto = new StateHistoryDto\r\n                    {\r\n                        StateName = entry[''State''],\r\n                        Reason = entry.ContainsKey(''Reason'') ? entry[''Reason''] : null,\r\n                        CreatedAt = JobHelper.FromStringTimestamp(entry[''CreatedAt'']),\r\n                    };\r\n\r\n                    // Each history item contains all of the information,\r\n                    // but other code should not know this. We'll remove\r\n                    // unwanted keys.\r\n                    var stateData = new Dictionary<string, string>(entry);\r\n                    stateData.Remove(''State'');\r\n                    stateData.Remove(''Reason'');\r\n                    stateData.Remove(''CreatedAt'');\r\n\r\n                    dto.Data = stateData;\r\n                    stateHistory.Add(dto);\r\n                }\r\n\r\n                // For compatibility\r\n                if (!job.ContainsKey(''Method'')) job.Add(''Method'', null);\r\n                if (!job.ContainsKey(''ParameterTypes'')) job.Add(''ParameterTypes'', null);\r\n\r\n                return new JobDetailsDto\r\n                {\r\n                    Job = TryToGetJob(job[''Type''], job[''Method''], job[''ParameterTypes''], job[''Arguments'']),\r\n                    CreatedAt =\r\n                        job.ContainsKey(''CreatedAt'')\r\n                            ? JobHelper.FromStringTimestamp(job[''CreatedAt''])\r\n                            : (DateTime?) null,\r\n                    Properties =\r\n                        job.Where(x => !hiddenProperties.Contains(x.Key)).ToDictionary(x => x.Key, x => x.Value),\r\n                    History = stateHistory\r\n                };\r\n            });", prediction=17, span="403-454"];
m0_283 [cluster="HangFire.Redis.RedisMonitoringApi.JobDetails(string)", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.JobDetails(string)", span="401-401"];
m0_309 [cluster="Unk.ContainsKey", file="RedisMonitoringApi.cs", label="Entry Unk.ContainsKey", span=""];
m0_5 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="RedisMonitoringApi.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m0_113 [cluster="HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23"];
m0_423 [cluster="Unk.selector", file="RedisMonitoringApi.cs", label="Entry Unk.selector", span=""];
m0_427 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.SucceededListCount()", span="575-575"];
m0_428 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis => redis.GetListCount(''hangfire:succeeded''));", prediction=12, span="577-577"];
m0_429 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededListCount()", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.SucceededListCount()", span="575-575"];
m0_407 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="RedisMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m0_454 [cluster="HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18"];
m0_85 [cluster="Unk.GetRangeWithScoresFromSortedSet", file="RedisMonitoringApi.cs", label="Entry Unk.GetRangeWithScoresFromSortedSet", span=""];
m0_163 [cluster="HangFire.Storage.Monitoring.ServerDto.ServerDto()", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21"];
m0_35 [cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis => redis.GetSortedSetCount(''hangfire:processing''));", prediction=12, span="64-64"];
m0_36 [cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.ProcessingCount()", span="62-62"];
m0_37 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="64-64"];
m0_38 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="redis.GetSortedSetCount(''hangfire:processing'')", prediction=20, span="64-64"];
m0_39 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="64-64"];
m0_307 [cluster="List<StateHistoryDto>.cstr", file="RedisMonitoringApi.cs", label="Entry List<StateHistoryDto>.cstr", span=""];
m0_315 [cluster="Unk.Where", file="RedisMonitoringApi.cs", label="Entry Unk.Where", span=""];
m0_191 [cluster="HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", span="263-263"];
m0_192 [cluster="HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis =>\r\n            {\r\n                var deletedJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:deleted'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    deletedJobIds,\r\n                    null,\r\n                    new[] { ''DeletedAt'', ''State'' },\r\n                    (job, jobData, state) => new DeletedJobDto\r\n                    {\r\n                        Job = job,\r\n                        DeletedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InDeletedState = DeletedState.StateName.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", prediction=21, span="265-283"];
m0_193 [cluster="HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.DeletedJobs(int, int)", span="263-263"];
m0_375 [cluster="System.DateTime.AddDays(double)", file="RedisMonitoringApi.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m0_29 [cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis => redis.GetSortedSetCount(''hangfire:failed''));", prediction=12, span="59-59"];
m0_222 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="518-518"];
m0_394 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", color=green, community=0, file="RedisMonitoringApi.cs", label="return new JobList<T>(jobIds\r\n                .Select(x => new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    Method = TryToGetJob(\r\n                        jobs[x][properties.Length],\r\n                        jobs[x][properties.Length + 1],\r\n                        jobs[x][properties.Length + 2],\r\n                        jobs[x][properties.Length + 3]),\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                })\r\n                .Select(x => new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null)\r\n                        ? default(T)\r\n                        : selector(x.Method, x.Job, x.State)))\r\n                .ToList());", prediction=23, span="555-572"];
m0_384 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs", label="var jobs = new Dictionary<string, List<string>>(jobIds.Count)", span="527-527"];
m0_385 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs", label="var states = new Dictionary<string, List<string>>(jobIds.Count)", span="528-528"];
m0_386 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs", label="properties = properties ?? new string[0]", span="530-530"];
m0_393 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs", label="pipeline.Flush()", span="552-552"];
m0_390 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(''hangfire:job:{0}'', id),\r\n                            properties.Union(new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }).ToArray()),\r\n                        x => { if (!jobs.ContainsKey(id)) jobs.Add(id, x); })", prediction=24, span="538-542"];
m0_387 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs", label="var pipeline = redis.CreatePipeline()", span="532-532"];
m0_389 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs", label="var id = jobId", span="536-536"];
m0_391 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs", label="stateProperties != null", span="544-544"];
m0_383 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs", label="return new JobList<T>(new List<KeyValuePair<string, T>>());", span="525-525"];
m0_392 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties),\r\n                            x => { if (!states.ContainsKey(id)) states.Add(id, x); })", span="546-548"];
m0_382 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs", label="jobIds.Count == 0", span="525-525"];
m0_388 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs", label=jobIds, span="534-534"];
m0_395 [cluster="HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.GetJobsWithProperties<T>(IRedisClient, System.Collections.Generic.IList<string>, string[], string[], System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>)", span="518-518"];
m0_422 [cluster="Unk.TrueForAll", file="RedisMonitoringApi.cs", label="Entry Unk.TrueForAll", span=""];
m0_9 [cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ThrowsAnException_WhenComponentIsNull()", file="RedisMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ThrowsAnException_WhenComponentIsNull()", span="21-21"];
m0_512 [cluster="HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", color=green, community=0, file="RedisMonitoringApi.cs", label="var redis = _connectionPool.GetClient()", prediction=25, span="639-639"];
m0_513 [cluster="HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", color=green, community=0, file="RedisMonitoringApi.cs", label="return action(redis);", prediction=26, span="641-641"];
m0_514 [cluster="HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.UseConnection<T>(System.Func<IRedisClient, T>)", span="637-637"];
m0_313 [cluster="HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22"];
m0_112 [cluster="KeyValuePair<string, ScheduledJobDto>.cstr", file="RedisMonitoringApi.cs", label="Entry KeyValuePair<string, ScheduledJobDto>.cstr", span=""];
m0_0 [cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.ServerComponentExtensionsFacts()", file="RedisMonitoringApi.cs", label="Entry Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.ServerComponentExtensionsFacts()", span="14-14"];
m0_1 [cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.ServerComponentExtensionsFacts()", color=green, community=0, file="RedisMonitoringApi.cs", label="_component = new Mock<IServerComponent>()", prediction=27, span="16-16"];
m0_2 [cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.ServerComponentExtensionsFacts()", color=green, community=0, file="RedisMonitoringApi.cs", label="_cts = new CancellationTokenSource()", prediction=28, span="17-17"];
m0_3 [cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.ServerComponentExtensionsFacts()", color=green, community=0, file="RedisMonitoringApi.cs", label="Exit Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.ServerComponentExtensionsFacts()", prediction=12, span="14-14"];
m0_4 [cluster="Mock<IServerComponent>.cstr", file="RedisMonitoringApi.cs", label="Entry Mock<IServerComponent>.cstr", span=""];
m0_201 [cluster="HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7"];
m0_411 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="548-548"];
m0_12 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="41-42"];
m0_13 [cluster="Unk.GetSortedSetCount", file="RedisMonitoringApi.cs", label="Entry Unk.GetSortedSetCount", span=""];
m0_14 [cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", span="45-45"];
m0_31 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="45-45"];
m0_32 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="redis.GetSortedSetCount(''hangfire:failed'')", prediction=12, span="59-59"];
m0_33 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="45-45"];
m0_42 [cluster="HangFire.Redis.RedisMonitoringApi.DeletedListCount()", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.DeletedListCount()", span="67-67"];
m0_46 [cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", span="72-72"];
m0_45 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="69-69"];
m0_43 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="69-69"];
m0_44 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="redis.GetListCount(''hangfire:deleted'')", prediction=31, span="69-69"];
m0_47 [cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis =>\r\n            {\r\n                var jobIds = redis.GetRangeFromSortedSet(\r\n                    ''hangfire:processing'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return new JobList<ProcessingJobDto>(GetJobsWithProperties(redis,\r\n                    jobIds,\r\n                    null,\r\n                    new[] { ''StartedAt'', ''ServerName'', ''ServerId'', ''State'' },\r\n                    (job, jobData, state) => new ProcessingJobDto\r\n                    {\r\n                        ServerId = state[2] ?? state[1],\r\n                        Job = job,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.StateName.Equals(\r\n                            state[3], StringComparison.OrdinalIgnoreCase),\r\n                    }).OrderBy(x => x.Value.StartedAt).ToList());\r\n            });", prediction=32, span="75-94"];
m0_11 [cluster="Unk.Equal", color=green, community=0, file="RedisMonitoringApi.cs", label="Entry Unk.Equal", prediction=33, span=""];
m0_17 [cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsALongRunning_AttachedToParent_Task()", file="RedisMonitoringApi.cs", label="var task = _component.Object.CreateTask(_cts.Token)", span="32-32"];
m0_19 [cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsALongRunning_AttachedToParent_Task()", file="RedisMonitoringApi.cs", label="Assert.True(task.CreationOptions.HasFlag(TaskCreationOptions.AttachedToParent))", span="35-35"];
m0_25 [cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsATask_ThatCallsTheExecuteMethod_OfAGivenComponent()", file="RedisMonitoringApi.cs", label="var task = _component.Object.CreateTask(_cts.Token)", span="41-41"];
m0_27 [cluster="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts.CreateTask_ReturnsATask_ThatCallsTheExecuteMethod_OfAGivenComponent()", file="RedisMonitoringApi.cs", label="_component.Verify(x => x.Execute(_cts.Token), Times.Once)", span="45-45"];
m0_49 [cluster="lambda expression", file="RedisMonitoringApi.cs", label=task, span=""];
m0_50 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var jobIds = redis.GetRangeFromSortedSet(\r\n                    ''hangfire:processing'',\r\n                    from,\r\n                    from + count - 1)", prediction=34, span="77-80"];
m0_51 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return new JobList<ProcessingJobDto>(GetJobsWithProperties(redis,\r\n                    jobIds,\r\n                    null,\r\n                    new[] { ''StartedAt'', ''ServerName'', ''ServerId'', ''State'' },\r\n                    (job, jobData, state) => new ProcessingJobDto\r\n                    {\r\n                        ServerId = state[2] ?? state[1],\r\n                        Job = job,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.StateName.Equals(\r\n                            state[3], StringComparison.OrdinalIgnoreCase),\r\n                    }).OrderBy(x => x.Value.StartedAt).ToList());", prediction=35, span="82-93"];
m0_52 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="75-94"];
m0_58 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="86-93"];
m0_64 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="93-93"];
m0_59 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="new ProcessingJobDto\r\n                    {\r\n                        ServerId = state[2] ?? state[1],\r\n                        Job = job,\r\n                        StartedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InProcessingState = ProcessingState.StateName.Equals(\r\n                            state[3], StringComparison.OrdinalIgnoreCase),\r\n                    }", prediction=36, span="86-93"];
m0_60 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="86-93"];
m0_65 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.Value.StartedAt", prediction=37, span="93-93"];
m0_66 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="93-93"];
m0_71 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="99-151"];
m0_72 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var scheduledJobs = redis.GetRangeWithScoresFromSortedSet(\r\n                    ''hangfire:schedule'',\r\n                    from,\r\n                    from + count - 1)", prediction=38, span="101-104"];
m0_73 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="scheduledJobs.Count == 0", prediction=39, span="106-106"];
m0_78 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label=scheduledJobs, prediction=38, span="116-116"];
m0_83 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return new JobList<ScheduledJobDto>(scheduledJobs\r\n                    .Select(job => new KeyValuePair<string, ScheduledJobDto>(\r\n                        job.Key,\r\n                        new ScheduledJobDto\r\n                        {\r\n                            EnqueueAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Job = TryToGetJob(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2], jobs[job.Key][3]),\r\n                            ScheduledAt =\r\n                                states[job.Key].Count > 1\r\n                                    ? JobHelper.FromNullableStringTimestamp(states[job.Key][1])\r\n                                    : null,\r\n                            InScheduledState =\r\n                                ScheduledState.StateName.Equals(states[job.Key][0], StringComparison.OrdinalIgnoreCase)\r\n                        }))\r\n                    .ToList());", prediction=41, span="136-150"];
m0_77 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var pipeline = redis.CreatePipeline()", prediction=42, span="114-114"];
m0_76 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var states = new Dictionary<string, List<String>>()", prediction=42, span="112-112"];
m0_80 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }),\r\n                            x => jobs.Add(job.Key, x))", prediction=42, span="120-124"];
m0_81 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                new[] { ''State'', ''ScheduledAt'' }),\r\n                            x => states.Add(job.Key, x))", prediction=42, span="126-130"];
m0_82 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.Flush()", prediction=42, span="133-133"];
m0_74 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return new JobList<ScheduledJobDto>(new List<KeyValuePair<string, ScheduledJobDto>>());", prediction=47, span="108-108"];
m0_75 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var jobs = new Dictionary<string, List<string>>()", prediction=42, span="111-111"];
m0_79 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var job = scheduledJob", prediction=42, span="118-118"];
m0_84 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="99-151"];
m0_109 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="137-149"];
m0_100 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="jobs.Add(job.Key, x)", prediction=42, span="124-124"];
m0_110 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="new KeyValuePair<string, ScheduledJobDto>(\r\n                        job.Key,\r\n                        new ScheduledJobDto\r\n                        {\r\n                            EnqueueAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Job = TryToGetJob(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2], jobs[job.Key][3]),\r\n                            ScheduledAt =\r\n                                states[job.Key].Count > 1\r\n                                    ? JobHelper.FromNullableStringTimestamp(states[job.Key][1])\r\n                                    : null,\r\n                            InScheduledState =\r\n                                ScheduledState.StateName.Equals(states[job.Key][0], StringComparison.OrdinalIgnoreCase)\r\n                        })", prediction=51, span="137-149"];
m0_107 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="states.Add(job.Key, x)", prediction=42, span="130-130"];
m0_94 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="121-123"];
m0_99 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="124-124"];
m0_101 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="124-124"];
m0_111 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="137-149"];
m0_103 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="127-129"];
m0_106 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="130-130"];
m0_108 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="130-130"];
m0_95 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' })", prediction=42, span="121-123"];
m0_104 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                new[] { ''State'', ''ScheduledAt'' })", prediction=42, span="127-129"];
m0_96 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="121-123"];
m0_105 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="127-129"];
m0_119 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="156-156"];
m0_120 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="GetTimelineStats(redis, ''succeeded'')", prediction=12, span="156-156"];
m0_121 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="156-156"];
m0_126 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="161-161"];
m0_127 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="GetTimelineStats(redis, ''failed'')", prediction=12, span="161-161"];
m0_128 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="161-161"];
m0_132 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="166-207"];
m0_133 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var serverNames = redis.GetAllItemsFromSet(''hangfire:servers'')", prediction=57, span="168-168"];
m0_134 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="serverNames.Count == 0", prediction=58, span="170-170"];
m0_139 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label=serverNames, prediction=57, span="180-180"];
m0_144 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return serverNames.Select(x => new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }).ToList();", prediction=60, span="199-206"];
m0_138 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var pipeline = redis.CreatePipeline()", prediction=61, span="178-178"];
m0_137 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var queues = new Dictionary<string, List<string>>()", prediction=61, span="176-176"];
m0_141 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat''),\r\n                            x => servers.Add(name, x))", prediction=61, span="184-188"];
m0_142 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name)),\r\n                            x => queues.Add(name, x))", prediction=61, span="190-193"];
m0_143 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.Flush()", prediction=61, span="196-196"];
m0_135 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return new List<ServerDto>();", prediction=66, span="172-172"];
m0_136 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var servers = new Dictionary<string, List<string>>()", prediction=61, span="175-175"];
m0_140 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var name = serverName", prediction=61, span="182-182"];
m0_145 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="166-207"];
m0_160 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="199-206"];
m0_151 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="servers.Add(name, x)", prediction=61, span="188-188"];
m0_161 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }", prediction=70, span="199-206"];
m0_158 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="queues.Add(name, x)", prediction=61, span="193-193"];
m0_147 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="185-187"];
m0_150 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="188-188"];
m0_152 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="188-188"];
m0_162 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="199-206"];
m0_153 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="191-192"];
m0_157 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="193-193"];
m0_159 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="193-193"];
m0_148 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat'')", prediction=61, span="185-187"];
m0_154 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name))", prediction=61, span="191-192"];
m0_149 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="185-187"];
m0_155 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="191-192"];
m0_169 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="212-234"];
m0_170 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var failedJobIds = redis.GetRangeFromSortedSetDesc(\r\n                    ''hangfire:failed'',\r\n                    from,\r\n                    from + count - 1)", prediction=74, span="214-217"];
m0_171 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return GetJobsWithProperties(\r\n                    redis,\r\n                    failedJobIds,\r\n                    null,\r\n                    new[] { ''FailedAt'', ''ExceptionType'', ''ExceptionMessage'', ''ExceptionDetails'', ''State'', ''Reason'' },\r\n                    (job, jobData, state) => new FailedJobDto\r\n                    {\r\n                        Job = job,\r\n                        Reason = state[5],\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.StateName.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    });", prediction=75, span="219-233"];
m0_172 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="212-234"];
m0_174 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="224-233"];
m0_175 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="new FailedJobDto\r\n                    {\r\n                        Job = job,\r\n                        Reason = state[5],\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.StateName.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    }", prediction=76, span="224-233"];
m0_176 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="224-233"];
m0_181 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="239-260"];
m0_182 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var succeededJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:succeeded'',\r\n                    from,\r\n                    from + count - 1)", prediction=77, span="241-244"];
m0_183 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return GetJobsWithProperties(\r\n                    redis,\r\n                    succeededJobIds,\r\n                    null,\r\n                    new[] { ''SucceededAt'', ''PerformanceDuration'', ''Latency'', ''State'' },\r\n                    (job, jobData, state) => new SucceededJobDto\r\n                    {\r\n                        Job = job,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        TotalDuration = state[1] != null && state[2] != null\r\n                            ? (long?) long.Parse(state[1]) + (long?) long.Parse(state[2])\r\n                            : null,\r\n                        InSucceededState = SucceededState.StateName.Equals(state[3], StringComparison.OrdinalIgnoreCase)\r\n                    });", prediction=78, span="246-259"];
m0_184 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="239-260"];
m0_186 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="251-259"];
m0_187 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="new SucceededJobDto\r\n                    {\r\n                        Job = job,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        TotalDuration = state[1] != null && state[2] != null\r\n                            ? (long?) long.Parse(state[1]) + (long?) long.Parse(state[2])\r\n                            : null,\r\n                        InSucceededState = SucceededState.StateName.Equals(state[3], StringComparison.OrdinalIgnoreCase)\r\n                    }", prediction=79, span="251-259"];
m0_188 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="251-259"];
m0_194 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="265-283"];
m0_195 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var deletedJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:deleted'',\r\n                    from,\r\n                    from + count - 1)", prediction=80, span="267-270"];
m0_196 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return GetJobsWithProperties(\r\n                    redis,\r\n                    deletedJobIds,\r\n                    null,\r\n                    new[] { ''DeletedAt'', ''State'' },\r\n                    (job, jobData, state) => new DeletedJobDto\r\n                    {\r\n                        Job = job,\r\n                        DeletedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InDeletedState = DeletedState.StateName.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", prediction=81, span="272-282"];
m0_197 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="265-283"];
m0_198 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="277-282"];
m0_199 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="new DeletedJobDto\r\n                    {\r\n                        Job = job,\r\n                        DeletedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InDeletedState = DeletedState.StateName.Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", prediction=82, span="277-282"];
m0_200 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="277-282"];
m0_205 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="288-340"];
m0_206 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var queues = redis.GetAllItemsFromSet(''hangfire:queues'')", prediction=83, span="290-290"];
m0_207 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count)", prediction=84, span="291-291"];
m0_208 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label=queues, prediction=83, span="293-293"];
m0_212 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var pipeline = redis.CreatePipeline()", prediction=86, span="299-299"];
m0_211 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="long fetched = 0", prediction=87, span="297-297"];
m0_213 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1),\r\n                            x => firstJobIds = x)", prediction=88, span="301-304"];
m0_214 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queue)),\r\n                            x => length = x)", prediction=89, span="306-308"];
m0_215 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue)),\r\n                            x => fetched = x)", prediction=90, span="310-312"];
m0_216 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.Flush()", prediction=86, span="314-314"];
m0_217 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var jobs = GetJobsWithProperties(\r\n                        redis,\r\n                        firstJobIds,\r\n                        new[] { ''State'' },\r\n                        new[] { ''EnqueuedAt'', ''State'' },\r\n                        (job, jobData, state) => new EnqueuedJobDto\r\n                        {\r\n                            Job = job,\r\n                            State = jobData[0],\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        })", prediction=92, span="317-328"];
m0_218 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = queue,\r\n                        FirstJobs = jobs,\r\n                        Length = length,\r\n                        Fetched = fetched\r\n                    })", prediction=93, span="330-336"];
m0_243 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="322-328"];
m0_219 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return result;", prediction=84, span="339-339"];
m0_209 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="IList<string> firstJobIds = null", prediction=95, span="295-295"];
m0_226 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1)", prediction=83, span="302-303"];
m0_232 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queue))", prediction=83, span="307-307"];
m0_238 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue))", prediction=83, span="311-311"];
m0_220 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="288-340"];
m0_210 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="long length = 0", prediction=99, span="296-296"];
m0_225 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="302-303"];
m0_228 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="304-304"];
m0_227 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="302-303"];
m0_231 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="307-307"];
m0_234 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="308-308"];
m0_233 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="307-307"];
m0_237 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="311-311"];
m0_240 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="312-312"];
m0_239 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="311-311"];
m0_229 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="firstJobIds = x", prediction=100, span="304-304"];
m0_230 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="304-304"];
m0_235 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="length = x", prediction=101, span="308-308"];
m0_236 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="308-308"];
m0_241 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="fetched = x", prediction=102, span="312-312"];
m0_242 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="312-312"];
m0_244 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="new EnqueuedJobDto\r\n                        {\r\n                            Job = job,\r\n                            State = jobData[0],\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        }", prediction=103, span="322-328"];
m0_245 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="322-328"];
m0_250 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="346-365"];
m0_251 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}'', queue),\r\n                    from,\r\n                    from + perPage - 1)", prediction=104, span="348-351"];
m0_252 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'' },\r\n                    new[] { ''EnqueuedAt'', ''State'' },\r\n                    (job, jobData, state) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    });", prediction=105, span="353-364"];
m0_253 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="346-365"];
m0_254 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="358-364"];
m0_260 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="371-388"];
m0_261 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var jobIds = redis.GetRangeFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    from, from + perPage - 1)", prediction=106, span="373-375"];
m0_262 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return GetJobsWithProperties(\r\n                    redis,\r\n                    jobIds,\r\n                    new[] { ''State'', ''Fetched'' },\r\n                    null,\r\n                    (job, jobData, state) => new FetchedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(jobData[1])\r\n                    });", prediction=107, span="377-387"];
m0_263 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="371-388"];
m0_264 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="382-387"];
m0_265 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="new FetchedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        FetchedAt = JobHelper.FromNullableStringTimestamp(jobData[1])\r\n                    }", prediction=108, span="382-387"];
m0_266 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="382-387"];
m0_271 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="393-393"];
m0_272 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="GetHourlyTimelineStats(redis, ''succeeded'')", prediction=12, span="393-393"];
m0_273 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="393-393"];
m0_278 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="398-398"];
m0_279 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="GetHourlyTimelineStats(redis, ''failed'')", prediction=12, span="398-398"];
m0_280 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="398-398"];
m0_284 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="403-454"];
m0_285 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var job = redis.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', jobId))", prediction=111, span="405-405"];
m0_286 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="job.Count == 0", prediction=112, span="406-406"];
m0_300 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="!job.ContainsKey(''Method'')", prediction=111, span="440-440"];
m0_301 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="job.Add(''Method'', null)", prediction=111, span="440-440"];
m0_302 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="!job.ContainsKey(''ParameterTypes'')", prediction=111, span="441-441"];
m0_303 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="job.Add(''ParameterTypes'', null)", prediction=111, span="441-441"];
m0_304 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return new JobDetailsDto\r\n                {\r\n                    Job = TryToGetJob(job[''Type''], job[''Method''], job[''ParameterTypes''], job[''Arguments'']),\r\n                    CreatedAt =\r\n                        job.ContainsKey(''CreatedAt'')\r\n                            ? JobHelper.FromStringTimestamp(job[''CreatedAt''])\r\n                            : (DateTime?) null,\r\n                    Properties =\r\n                        job.Where(x => !hiddenProperties.Contains(x.Key)).ToDictionary(x => x.Key, x => x.Value),\r\n                    History = stateHistory\r\n                };", prediction=117, span="443-453"];
m0_289 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var historyList = redis.GetAllItemsFromList(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId))", prediction=118, span="410-411"];
m0_288 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var hiddenProperties = new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'', ''State'', ''CreatedAt'' }", prediction=119, span="408-408"];
m0_290 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var history = historyList\r\n                    .Select(JobHelper.FromJson<Dictionary<string, string>>)\r\n                    .ToList()", prediction=120, span="413-415"];
m0_287 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return null;", prediction=121, span="406-406"];
m0_292 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label=history, prediction=120, span="418-418"];
m0_291 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var stateHistory = new List<StateHistoryDto>(history.Count)", prediction=123, span="417-417"];
m0_305 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="403-454"];
m0_317 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="451-451"];
m0_321 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="451-451"];
m0_324 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="451-451"];
m0_318 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="!hiddenProperties.Contains(x.Key)", prediction=119, span="451-451"];
m0_319 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="451-451"];
m0_299 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="stateHistory.Add(dto)", prediction=123, span="436-436"];
m0_293 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var dto = new StateHistoryDto\r\n                    {\r\n                        StateName = entry[''State''],\r\n                        Reason = entry.ContainsKey(''Reason'') ? entry[''Reason''] : null,\r\n                        CreatedAt = JobHelper.FromStringTimestamp(entry[''CreatedAt'']),\r\n                    }", prediction=123, span="420-425"];
m0_294 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var stateData = new Dictionary<string, string>(entry)", prediction=127, span="430-430"];
m0_298 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="dto.Data = stateData", prediction=128, span="435-435"];
m0_295 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="stateData.Remove(''State'')", prediction=129, span="431-431"];
m0_296 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="stateData.Remove(''Reason'')", prediction=127, span="432-432"];
m0_297 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="stateData.Remove(''CreatedAt'')", prediction=127, span="433-433"];
m0_322 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.Key", prediction=132, span="451-451"];
m0_323 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="451-451"];
m0_325 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.Value", prediction=133, span="451-451"];
m0_326 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="451-451"];
m0_415 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="556-566"];
m0_418 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="567-571"];
m0_419 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="new KeyValuePair<string, T>(\r\n                    x.JobId,\r\n                    x.Job.TrueForAll(y => y == null)\r\n                        ? default(T)\r\n                        : selector(x.Method, x.Job, x.State))", prediction=134, span="567-571"];
m0_420 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="567-571"];
m0_424 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="569-569"];
m0_398 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="539-541"];
m0_403 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="542-542"];
m0_399 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetValuesFromHash(\r\n                            String.Format(''hangfire:job:{0}'', id),\r\n                            properties.Union(new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }).ToArray())", prediction=24, span="539-541"];
m0_400 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="539-541"];
m0_425 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="y == null", prediction=136, span="569-569"];
m0_426 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="569-569"];
m0_430 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="577-577"];
m0_431 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="redis.GetListCount(''hangfire:succeeded'')", prediction=137, span="577-577"];
m0_432 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="577-577"];
m0_436 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="582-634"];
m0_437 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var stats = new StatisticsDto()", prediction=138, span="584-584"];
m0_438 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var queues = redis.GetAllItemsFromSet(''hangfire:queues'')", prediction=139, span="586-586"];
m0_440 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:servers''),\r\n                        x => stats.Servers = x)", prediction=140, span="590-592"];
m0_460 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="stats.Servers = x", prediction=141, span="592-592"];
m0_441 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSetCount(''hangfire:queues''),\r\n                        x => stats.Queues = x)", prediction=142, span="594-596"];
m0_466 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="stats.Queues = x", prediction=143, span="596-596"];
m0_442 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:schedule''),\r\n                        x => stats.Scheduled = x)", prediction=144, span="598-600"];
m0_472 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="stats.Scheduled = x", prediction=145, span="600-600"];
m0_443 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:processing''),\r\n                        x => stats.Processing = x)", prediction=146, span="602-604"];
m0_478 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="stats.Processing = x", prediction=147, span="604-604"];
m0_444 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:succeeded''),\r\n                        x => stats.Succeeded = long.Parse(x ?? ''0''))", prediction=148, span="606-608"];
m0_485 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="stats.Succeeded = long.Parse(x ?? ''0'')", prediction=149, span="608-608"];
m0_445 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:failed''),\r\n                        x => stats.Failed = x)", prediction=150, span="610-612"];
m0_492 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="stats.Failed = x", prediction=151, span="612-612"];
m0_446 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValue(''hangfire:stats:deleted''),\r\n                        x => stats.Deleted = long.Parse(x ?? ''0''))", prediction=152, span="614-616"];
m0_498 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="stats.Deleted = long.Parse(x ?? ''0'')", prediction=153, span="616-616"];
m0_447 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetSortedSetCount(''hangfire:recurring-jobs''),\r\n                        x => stats.Recurring = x)", prediction=154, span="618-620"];
m0_504 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="stats.Recurring = x", prediction=155, span="620-620"];
m0_450 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName)),\r\n                            x => stats.Enqueued += x)", prediction=156, span="625-627"];
m0_510 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="stats.Enqueued += x", prediction=157, span="627-627"];
m0_452 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="return stats;", prediction=138, span="633-633"];
m0_439 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var pipeline = redis.CreatePipeline()", prediction=159, span="588-588"];
m0_448 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label=queues, prediction=139, span="622-622"];
m0_451 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="pipeline.Flush()", prediction=159, span="630-630"];
m0_455 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="591-591"];
m0_459 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="592-592"];
m0_461 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="592-592"];
m0_462 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="595-595"];
m0_465 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="596-596"];
m0_467 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="596-596"];
m0_468 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="599-599"];
m0_471 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="600-600"];
m0_473 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="600-600"];
m0_474 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="603-603"];
m0_477 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="604-604"];
m0_479 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="604-604"];
m0_480 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="607-607"];
m0_484 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="608-608"];
m0_486 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="608-608"];
m0_488 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="611-611"];
m0_491 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="612-612"];
m0_493 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="612-612"];
m0_494 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="615-615"];
m0_497 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="616-616"];
m0_499 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="616-616"];
m0_500 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="619-619"];
m0_503 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="620-620"];
m0_505 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="620-620"];
m0_449 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="var queueName = queue", prediction=162, span="624-624"];
m0_506 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="626-626"];
m0_509 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="627-627"];
m0_511 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="627-627"];
m0_453 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="582-634"];
m0_507 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetListCount(String.Format(''hangfire:queue:{0}'', queueName))", prediction=162, span="626-626"];
m0_508 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="626-626"];
m0_456 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetSetCount(''hangfire:servers'')", prediction=164, span="591-591"];
m0_457 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="591-591"];
m0_463 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetSetCount(''hangfire:queues'')", prediction=165, span="595-595"];
m0_464 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="595-595"];
m0_469 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetSortedSetCount(''hangfire:schedule'')", prediction=166, span="599-599"];
m0_470 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="599-599"];
m0_475 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetSortedSetCount(''hangfire:processing'')", prediction=167, span="603-603"];
m0_476 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="603-603"];
m0_481 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetValue(''hangfire:stats:succeeded'')", prediction=168, span="607-607"];
m0_482 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="607-607"];
m0_489 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetSortedSetCount(''hangfire:failed'')", prediction=169, span="611-611"];
m0_490 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="611-611"];
m0_495 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetValue(''hangfire:stats:deleted'')", prediction=170, span="615-615"];
m0_496 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="615-615"];
m0_501 [cluster="lambda expression", color=green, community=0, file="RedisMonitoringApi.cs", label="x.GetSortedSetCount(''hangfire:recurring-jobs'')", prediction=171, span="619-619"];
m0_502 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="619-619"];
m0_409 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="x.GetValuesFromHash(String.Format(''hangfire:job:{0}:state'', id), stateProperties)", span="547-547"];
m0_255 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = jobData[0],\r\n                        EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                    }", span="358-364"];
m0_405 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="jobs.Add(id, x)", span="542-542"];
m0_413 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="states.Add(id, x)", span="548-548"];
m0_416 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="new\r\n                {\r\n                    JobId = x,\r\n                    Job = jobs[x],\r\n                    Method = TryToGetJob(\r\n                        jobs[x][properties.Length],\r\n                        jobs[x][properties.Length + 1],\r\n                        jobs[x][properties.Length + 2],\r\n                        jobs[x][properties.Length + 3]),\r\n                    State = states.ContainsKey(x) ? states[x] : null\r\n                }", span="556-566"];
m0_380 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="String.Format(''hangfire:stats:{0}:{1}'', type, x)", span="500-500"];
m0_256 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="358-364"];
m0_352 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="String.Format(''hangfire:stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="468-468"];
m0_404 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="!jobs.ContainsKey(id)", span="542-542"];
m0_412 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="!states.ContainsKey(id)", span="548-548"];
m0_417 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="556-566"];
m0_406 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="542-542"];
m0_408 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="547-547"];
m0_410 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="547-547"];
m0_351 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="468-468"];
m0_379 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="500-500"];
m0_376 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Entry lambda expression", span="499-499"];
m0_414 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="548-548"];
m0_381 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="500-500"];
m0_353 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="468-468"];
m0_377 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="x.ToString(''yyyy-MM-dd'')", span="499-499"];
m0_378 [cluster="lambda expression", file="RedisMonitoringApi.cs", label="Exit lambda expression", span="499-499"];
m0_53 [cluster="Unk.GetRangeFromSortedSet", file="RedisMonitoringApi.cs", label="Entry Unk.GetRangeFromSortedSet", span=""];
m0_28 [cluster="HangFire.Redis.RedisMonitoringApi.FailedCount()", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.FailedCount()", span="57-57"];
m0_223 [cluster="HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18"];
m0_224 [cluster="System.Collections.Generic.List<T>.Add(T)", file="RedisMonitoringApi.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m0_93 [cluster="Unk.ToList", file="RedisMonitoringApi.cs", label="Entry Unk.ToList", span=""];
m0_97 [cluster="Unk.Format", file="RedisMonitoringApi.cs", label="Entry Unk.Format", span=""];
m0_89 [cluster="Unk.QueueCommand", file="RedisMonitoringApi.cs", label="Entry Unk.QueueCommand", span=""];
m0_115 [cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", span="645-645"];
m0_517 [cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="RedisMonitoringApi.cs", label="return new InvocationData(\r\n                    type,\r\n                    method,\r\n                    parameterTypes,\r\n                    arguments).Deserialize();", span="650-654"];
m0_519 [cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="RedisMonitoringApi.cs", label="return null;", span="658-658"];
m0_518 [cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="RedisMonitoringApi.cs", label=Exception, span="656-656"];
m0_520 [cluster="HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.TryToGetJob(string, string, string, string)", span="645-645"];
m0_166 [cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", span="210-210"];
m0_167 [cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis =>\r\n            {\r\n                var failedJobIds = redis.GetRangeFromSortedSetDesc(\r\n                    ''hangfire:failed'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    failedJobIds,\r\n                    null,\r\n                    new[] { ''FailedAt'', ''ExceptionType'', ''ExceptionMessage'', ''ExceptionDetails'', ''State'', ''Reason'' },\r\n                    (job, jobData, state) => new FailedJobDto\r\n                    {\r\n                        Job = job,\r\n                        Reason = state[5],\r\n                        FailedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        ExceptionType = state[1],\r\n                        ExceptionMessage = state[2],\r\n                        ExceptionDetails = state[3],\r\n                        InFailedState = FailedState.StateName.Equals(state[4], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", prediction=172, span="212-234"];
m0_168 [cluster="HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.FailedJobs(int, int)", span="210-210"];
m0_267 [cluster="HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21"];
m0_354 [cluster="System.DateTime.ToString(string)", file="RedisMonitoringApi.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m0_70 [cluster="Unk.UseConnection", file="RedisMonitoringApi.cs", label="Entry Unk.UseConnection", span=""];
m0_221 [cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="RedisMonitoringApi.cs", label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span=""];
m0_348 [cluster="Unk.ElementAt", file="RedisMonitoringApi.cs", label="Entry Unk.ElementAt", span=""];
m0_129 [cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.Servers()", span="164-164"];
m0_130 [cluster="HangFire.Redis.RedisMonitoringApi.Servers()", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis =>\r\n            {\r\n                var serverNames = redis.GetAllItemsFromSet(''hangfire:servers'');\r\n\r\n                if (serverNames.Count == 0)\r\n                {\r\n                    return new List<ServerDto>();\r\n                }\r\n\r\n                var servers = new Dictionary<string, List<string>>();\r\n                var queues = new Dictionary<string, List<string>>();\r\n\r\n                using (var pipeline = redis.CreatePipeline())\r\n                {\r\n                    foreach (var serverName in serverNames)\r\n                    {\r\n                        var name = serverName;\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:server:{0}'', name),\r\n                                ''WorkerCount'', ''StartedAt'', ''Heartbeat''),\r\n                            x => servers.Add(name, x));\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetAllItemsFromList(\r\n                                String.Format(''hangfire:server:{0}:queues'', name)),\r\n                            x => queues.Add(name, x));\r\n                    }\r\n\r\n                    pipeline.Flush();\r\n                }\r\n\r\n                return serverNames.Select(x => new ServerDto\r\n                {\r\n                    Name = x,\r\n                    WorkersCount = int.Parse(servers[x][0]),\r\n                    Queues = queues[x],\r\n                    StartedAt = JobHelper.FromStringTimestamp(servers[x][1]),\r\n                    Heartbeat = JobHelper.FromNullableStringTimestamp(servers[x][2])\r\n                }).ToList();\r\n            });", prediction=173, span="166-207"];
m0_131 [cluster="HangFire.Redis.RedisMonitoringApi.Servers()", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.Servers()", span="164-164"];
m0_40 [cluster="Unk.Setup", file="RedisMonitoringApi.cs", label="Entry Unk.Setup", span=""];
m0_41 [cluster="Unk.DoesNotThrow", color=green, community=0, file="RedisMonitoringApi.cs", label="Entry Unk.DoesNotThrow", prediction=12, span=""];
m0_185 [cluster="Unk.GetRangeFromList", file="RedisMonitoringApi.cs", label="Entry Unk.GetRangeFromList", span=""];
m0_178 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", span="237-237"];
m0_179 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis =>\r\n            {\r\n                var succeededJobIds = redis.GetRangeFromList(\r\n                    ''hangfire:succeeded'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                return GetJobsWithProperties(\r\n                    redis,\r\n                    succeededJobIds,\r\n                    null,\r\n                    new[] { ''SucceededAt'', ''PerformanceDuration'', ''Latency'', ''State'' },\r\n                    (job, jobData, state) => new SucceededJobDto\r\n                    {\r\n                        Job = job,\r\n                        SucceededAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                        TotalDuration = state[1] != null && state[2] != null\r\n                            ? (long?) long.Parse(state[1]) + (long?) long.Parse(state[2])\r\n                            : null,\r\n                        InSucceededState = SucceededState.StateName.Equals(state[3], StringComparison.OrdinalIgnoreCase)\r\n                    });\r\n            });", prediction=175, span="239-260"];
m0_180 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.SucceededJobs(int, int)", span="237-237"];
m0_116 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", span="154-154"];
m0_117 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis => GetTimelineStats(redis, ''succeeded''));", prediction=12, span="156-156"];
m0_118 [cluster="HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.SucceededByDatesCount()", span="154-154"];
m0_21 [cluster="Unk.GetListCount", file="RedisMonitoringApi.cs", label="Entry Unk.GetListCount", span=""];
m0_90 [cluster="Unk.Flush", file="RedisMonitoringApi.cs", label="Entry Unk.Flush", span=""];
m0_487 [cluster="Unk.Parse", file="RedisMonitoringApi.cs", label="Entry Unk.Parse", span=""];
m0_102 [cluster="Unk.Add", file="RedisMonitoringApi.cs", label="Entry Unk.Add", span=""];
m0_6 [cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.ScheduledCount()", span="39-39"];
m0_7 [cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis => \r\n                redis.GetSortedSetCount(''hangfire:schedule''));", prediction=12, span="41-42"];
m0_8 [cluster="HangFire.Redis.RedisMonitoringApi.ScheduledCount()", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.ScheduledCount()", span="39-39"];
m0_63 [cluster="string.Equals(string, System.StringComparison)", file="RedisMonitoringApi.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m0_30 [cluster="Unk.Verify", file="RedisMonitoringApi.cs", label="Entry Unk.Verify", span=""];
m0_346 [cluster="System.DateTime.AddHours(double)", file="RedisMonitoringApi.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m0_48 [cluster="HangFire.Redis.RedisMonitoringApi.ProcessingJobs(int, int)", file="RedisMonitoringApi.cs", label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts", span=""];
m0_189 [cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23"];
m0_34 [cluster="HangFire.Redis.RedisMonitoringApi.ProcessingCount()", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.ProcessingCount()", span="62-62"];
m0_401 [cluster="System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="RedisMonitoringApi.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m0_312 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", file="RedisMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0"];
m0_397 [cluster="JobList<T>.cstr", file="RedisMonitoringApi.cs", label="Entry JobList<T>.cstr", span=""];
m0_16 [cluster="HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.EnqueuedCount(string)", span="45-45"];
m0_20 [cluster="string.Format(string, object)", file="RedisMonitoringApi.cs", label="Entry string.Format(string, object)", span="0-0"];
m0_350 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="RedisMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m0_521 [cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24"];
m0_268 [cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", span="391-391"];
m0_269 [cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis => GetHourlyTimelineStats(redis, ''succeeded''));", prediction=12, span="393-393"];
m0_270 [cluster="HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.HourlySucceededJobs()", span="391-391"];
m0_355 [cluster="string.Format(string, object, object)", file="RedisMonitoringApi.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m0_306 [cluster="Unk.GetAllEntriesFromHash", file="RedisMonitoringApi.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m0_316 [cluster="Unk.ToDictionary", file="RedisMonitoringApi.cs", label="Entry Unk.ToDictionary", span=""];
m0_310 [cluster="Unk.FromStringTimestamp", file="RedisMonitoringApi.cs", label="Entry Unk.FromStringTimestamp", span=""];
m0_396 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", file="RedisMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int)", span="0-0"];
m0_458 [cluster="Unk.GetSetCount", file="RedisMonitoringApi.cs", label="Entry Unk.GetSetCount", span=""];
m0_114 [cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="RedisMonitoringApi.cs", label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="45-45"];
m0_123 [cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", span="159-159"];
m0_124 [cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis => GetTimelineStats(redis, ''failed''));", prediction=12, span="161-161"];
m0_125 [cluster="HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.FailedByDatesCount()", span="159-159"];
m0_246 [cluster="HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23"];
m0_177 [cluster="HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23"];
m0_10 [cluster="Unk.>", file="RedisMonitoringApi.cs", label="Entry Unk.>", span=""];
m0_202 [cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.Queues()", span="286-286"];
m0_203 [cluster="HangFire.Redis.RedisMonitoringApi.Queues()", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis =>\r\n            {\r\n                var queues = redis.GetAllItemsFromSet(''hangfire:queues'');\r\n                var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count);\r\n\r\n                foreach (var queue in queues)\r\n                {\r\n                    IList<string> firstJobIds = null;\r\n                    long length = 0;\r\n                    long fetched = 0;\r\n\r\n                    using (var pipeline = redis.CreatePipeline())\r\n                    {\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetRangeFromList(\r\n                                String.Format(''hangfire:queue:{0}'', queue), -5, -1),\r\n                            x => firstJobIds = x);\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}'', queue)),\r\n                            x => length = x);\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetListCount(String.Format(''hangfire:queue:{0}:dequeued'', queue)),\r\n                            x => fetched = x);\r\n\r\n                        pipeline.Flush();\r\n                    }\r\n\r\n                    var jobs = GetJobsWithProperties(\r\n                        redis,\r\n                        firstJobIds,\r\n                        new[] { ''State'' },\r\n                        new[] { ''EnqueuedAt'', ''State'' },\r\n                        (job, jobData, state) => new EnqueuedJobDto\r\n                        {\r\n                            Job = job,\r\n                            State = jobData[0],\r\n                            EnqueuedAt = JobHelper.FromNullableStringTimestamp(state[0]),\r\n                            InEnqueuedState = jobData[0].Equals(state[1], StringComparison.OrdinalIgnoreCase)\r\n                        });\r\n\r\n                    result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = queue,\r\n                        FirstJobs = jobs,\r\n                        Length = length,\r\n                        Fetched = fetched\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", prediction=180, span="288-340"];
m0_204 [cluster="HangFire.Redis.RedisMonitoringApi.Queues()", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.Queues()", span="286-286"];
m0_314 [cluster="Unk.TryToGetJob", file="RedisMonitoringApi.cs", label="Entry Unk.TryToGetJob", span=""];
m0_67 [cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="RedisMonitoringApi.cs", label="Entry HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", span="97-97"];
m0_68 [cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", color=green, community=0, file="RedisMonitoringApi.cs", label="return UseConnection(redis =>\r\n            {\r\n                var scheduledJobs = redis.GetRangeWithScoresFromSortedSet(\r\n                    ''hangfire:schedule'',\r\n                    from,\r\n                    from + count - 1);\r\n\r\n                if (scheduledJobs.Count == 0)\r\n                {\r\n                    return new JobList<ScheduledJobDto>(new List<KeyValuePair<string, ScheduledJobDto>>());\r\n                }\r\n\r\n                var jobs = new Dictionary<string, List<string>>();\r\n                var states = new Dictionary<string, List<String>>();\r\n\r\n                using (var pipeline = redis.CreatePipeline())\r\n                {\r\n                    foreach (var scheduledJob in scheduledJobs)\r\n                    {\r\n                        var job = scheduledJob;\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}'', job.Key),\r\n                                new[] { ''Type'', ''Method'', ''ParameterTypes'', ''Arguments'' }),\r\n                            x => jobs.Add(job.Key, x));\r\n\r\n                        pipeline.QueueCommand(\r\n                            x => x.GetValuesFromHash(\r\n                                String.Format(''hangfire:job:{0}:state'', job.Key),\r\n                                new[] { ''State'', ''ScheduledAt'' }),\r\n                            x => states.Add(job.Key, x));\r\n                    }\r\n\r\n                    pipeline.Flush();\r\n                }\r\n\r\n                return new JobList<ScheduledJobDto>(scheduledJobs\r\n                    .Select(job => new KeyValuePair<string, ScheduledJobDto>(\r\n                        job.Key,\r\n                        new ScheduledJobDto\r\n                        {\r\n                            EnqueueAt = JobHelper.FromTimestamp((long) job.Value),\r\n                            Job = TryToGetJob(jobs[job.Key][0], jobs[job.Key][1], jobs[job.Key][2], jobs[job.Key][3]),\r\n                            ScheduledAt =\r\n                                states[job.Key].Count > 1\r\n                                    ? JobHelper.FromNullableStringTimestamp(states[job.Key][1])\r\n                                    : null,\r\n                            InScheduledState =\r\n                                ScheduledState.StateName.Equals(states[job.Key][0], StringComparison.OrdinalIgnoreCase)\r\n                        }))\r\n                    .ToList());\r\n            });", prediction=181, span="99-151"];
m0_69 [cluster="HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", file="RedisMonitoringApi.cs", label="Exit HangFire.Redis.RedisMonitoringApi.ScheduledJobs(int, int)", span="97-97"];
m0_87 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_54 [cluster="HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22"];
m0_347 [cluster="Unk.GetValuesMap", file="RedisMonitoringApi.cs", label="Entry Unk.GetValuesMap", span=""];
m0_156 [cluster="Unk.GetAllItemsFromList", file="RedisMonitoringApi.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m0_320 [cluster="Unk.Contains", file="RedisMonitoringApi.cs", label="Entry Unk.Contains", span=""];
m0_92 [cluster="Unk.Select", file="RedisMonitoringApi.cs", label="Entry Unk.Select", span=""];
m0_308 [cluster="HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", file="RedisMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21"];
m0_146 [cluster="Unk.GetAllItemsFromSet", file="RedisMonitoringApi.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m0_173 [cluster="Unk.GetRangeFromSortedSetDesc", file="RedisMonitoringApi.cs", label="Entry Unk.GetRangeFromSortedSetDesc", span=""];
m0_483 [cluster="Unk.GetValue", file="RedisMonitoringApi.cs", label="Entry Unk.GetValue", span=""];
m0_98 [cluster="Unk.GetValuesFromHash", file="RedisMonitoringApi.cs", label="Entry Unk.GetValuesFromHash", span=""];
m0_523 [file="RedisMonitoringApi.cs", label="HangFire.Redis.RedisMonitoringApi", span=""];
m0_524 [file="RedisMonitoringApi.cs", label=string, span=""];
m0_525 [file="RedisMonitoringApi.cs", label=string, span=""];
m0_526 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_527 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_528 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_529 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_530 [file="RedisMonitoringApi.cs", label=job, span=""];
m0_531 [file="RedisMonitoringApi.cs", label=jobs, span=""];
m0_532 [file="RedisMonitoringApi.cs", label=states, span=""];
m0_533 [file="RedisMonitoringApi.cs", label=name, span=""];
m0_534 [file="RedisMonitoringApi.cs", label=servers, span=""];
m0_535 [file="RedisMonitoringApi.cs", label=queues, span=""];
m0_536 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_537 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_538 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_539 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_540 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_541 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_542 [file="RedisMonitoringApi.cs", label=queue, span=""];
m0_543 [file="RedisMonitoringApi.cs", label=string, span=""];
m0_544 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_545 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_546 [file="RedisMonitoringApi.cs", label=string, span=""];
m0_547 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_548 [file="RedisMonitoringApi.cs", label=int, span=""];
m0_549 [file="RedisMonitoringApi.cs", label=string, span=""];
m0_550 [file="RedisMonitoringApi.cs", label=hiddenProperties, span=""];
m0_558 [file="RedisMonitoringApi.cs", label="System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", span=""];
m0_553 [file="RedisMonitoringApi.cs", label="string[]", span=""];
m0_554 [file="RedisMonitoringApi.cs", label=id, span=""];
m0_559 [file="RedisMonitoringApi.cs", label=stats, span=""];
m0_560 [file="RedisMonitoringApi.cs", label=queueName, span=""];
m0_556 [file="RedisMonitoringApi.cs", label="string[]", span=""];
m0_555 [file="RedisMonitoringApi.cs", label=jobs, span=""];
m0_557 [file="RedisMonitoringApi.cs", label=states, span=""];
m0_552 [file="RedisMonitoringApi.cs", label=string, span=""];
m0_551 [file="RedisMonitoringApi.cs", label=string, span=""];
n138 -> n1  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
n138 -> n37  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
n138 -> n99  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
n139 -> n9  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
n140 -> n43  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
n141 -> n75  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
n142 -> n86  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
n143 -> n105  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n4 -> n9  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
n5 -> n8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n13 -> n15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n21 -> n24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n26 -> n28  [color=darkseagreen4, key=1, label=result, style=dashed];
n26 -> n29  [color=darkseagreen4, key=1, label=result, style=dashed];
n26 -> n30  [color=darkseagreen4, key=1, label=result, style=dashed];
n37 -> n39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n39 -> n43  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
n40 -> n42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n47 -> n49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n50 -> n52  [color=darkseagreen4, key=1, label=result, style=dashed];
n55 -> n57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n57 -> n59  [color=darkseagreen4, key=1, label=IRedisClient, style=dashed];
n60 -> n62  [color=darkseagreen4, key=1, label=result, style=dashed];
n60 -> n63  [color=darkseagreen4, key=1, label=result, style=dashed];
n68 -> n70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n70 -> n75  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
n71 -> n74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n79 -> n81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n81 -> n86  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
n82 -> n85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n89 -> n91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n93 -> n95  [color=darkseagreen4, key=1, label=hash, style=dashed];
n99 -> n101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n101 -> n105  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
n102 -> n104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n109 -> n111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n116 -> n118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n120 -> n122  [color=darkseagreen4, key=1, label=result, style=dashed];
n120 -> n123  [color=darkseagreen4, key=1, label=result, style=dashed];
n125 -> n128  [color=darkseagreen4, key=1, label="System.Action<IRedisClient, HangFire.Redis.RedisConnection>", style=dashed];
n126 -> n128  [color=darkseagreen4, key=1, label=redis, style=dashed];
n133 -> n135  [color=darkseagreen4, key=1, label="System.Action<HangFire.Redis.RedisConnection>", style=dashed];
d38 -> d45  [color=green, key=1, label="lambda expression", style=dashed];
d114 -> d38  [color=green, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d40  [color=green, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d49  [color=green, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d41  [color=green, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d55  [color=green, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d19  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d25  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d26  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d31  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d35  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d58  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d65  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d59  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d72  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d73  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d74  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d82  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d75  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d88  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d90  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d97  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d114 -> d91  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.AutomaticRetryServerComponentWrapperFacts", style=dashed];
d39 -> d49  [color=green, key=1, label=wrapper, style=dashed];
d40 -> d48  [color=green, key=1, label="lambda expression", style=dashed];
d41 -> n49  [color=green, key=1, label="lambda expression", style=dashed];
d115 -> d49  [color=green, key=1, label=wrapper, style=dashed];
d55 -> d61  [color=green, key=1, label="lambda expression", style=dashed];
d57 -> d65  [color=green, key=1, label=wrapper, style=dashed];
d58 -> d64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d26 -> d30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d31 -> d34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d59 -> d67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d71 -> d74  [color=darkseagreen4, key=1, label=wrapper, style=dashed];
d71 -> d82  [color=darkseagreen4, key=1, label=wrapper, style=dashed];
d72 -> d78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d74 -> d81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d75 -> d84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d88 -> d93  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d89 -> d97  [color=darkseagreen4, key=1, label=wrapper, style=dashed];
d90 -> d96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d91 -> d99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d8 -> d13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d116 -> d65  [color=darkseagreen4, key=1, label=wrapper, style=dashed];
d117 -> d82  [color=darkseagreen4, key=1, label=wrapper, style=dashed];
d118 -> d97  [color=darkseagreen4, key=1, label=wrapper, style=dashed];
m0_248 -> m0_250  [color=green, key=1, label="lambda expression", style=dashed];
m0_274 -> m0_352  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_329 -> m0_333  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_334 -> m0_351  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_328 -> m0_338  [color=darkseagreen4, key=1, label=dates, style=dashed];
m0_328 -> m0_331  [color=darkseagreen4, key=1, label=dates, style=dashed];
m0_328 -> m0_342  [color=darkseagreen4, key=1, label=dates, style=dashed];
m0_336 -> m0_342  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_336 -> m0_344  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_333 -> m0_333  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_337 -> m0_340  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_337 -> m0_342  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_337 -> m0_343  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_343 -> m0_343  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_327 -> m0_331  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m0_335 -> m0_340  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m0_122 -> m0_380  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_363 -> m0_379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_362 -> m0_367  [color=darkseagreen4, key=1, label=stringDates, style=dashed];
m0_362 -> m0_376  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_358 -> m0_360  [color=darkseagreen4, key=1, label=dates, style=dashed];
m0_358 -> m0_371  [color=darkseagreen4, key=1, label=dates, style=dashed];
m0_365 -> m0_371  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_365 -> m0_373  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_356 -> m0_359  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m0_356 -> m0_360  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m0_364 -> m0_369  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m0_366 -> m0_369  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_366 -> m0_371  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_366 -> m0_372  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_372 -> m0_372  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_357 -> m0_359  [color=darkseagreen4, key=1, label=startDate, style=dashed];
m0_258 -> m0_260  [color=green, key=1, label="lambda expression", style=dashed];
m0_276 -> m0_278  [color=green, key=1, label="lambda expression", style=dashed];
m0_434 -> m0_436  [color=green, key=1, label="lambda expression", style=dashed];
m0_282 -> m0_284  [color=green, key=1, label="lambda expression", style=dashed];
m0_428 -> m0_430  [color=green, key=1, label="lambda expression", style=dashed];
m0_35 -> m0_37  [color=green, key=1, label="lambda expression", style=dashed];
m0_36 -> m0_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_37 -> m0_46  [color=darkseagreen4, key=1, label=task, style=dashed];
m0_38 -> m0_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_192 -> m0_194  [color=green, key=1, label="lambda expression", style=dashed];
m0_29 -> m0_31  [color=green, key=1, label="lambda expression", style=dashed];
m0_222 -> m0_419  [color=green, key=1, label="System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", style=dashed];
m0_222 -> m0_388  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<string>", style=dashed];
m0_222 -> m0_391  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_222 -> m0_392  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_222 -> m0_409  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_394 -> m0_415  [color=green, key=1, label="lambda expression", style=dashed];
m0_394 -> m0_418  [color=green, key=1, label="lambda expression", style=dashed];
m0_384 -> m0_390  [color=green, key=1, label=jobs, style=dashed];
m0_384 -> m0_404  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m0_384 -> m0_405  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m0_385 -> m0_392  [color=darkseagreen4, key=1, label=states, style=dashed];
m0_385 -> m0_412  [color=darkseagreen4, key=1, label=states, style=dashed];
m0_385 -> m0_413  [color=darkseagreen4, key=1, label=states, style=dashed];
m0_386 -> m0_390  [color=green, key=1, label="string[]", style=dashed];
m0_386 -> m0_399  [color=green, key=1, label="string[]", style=dashed];
m0_390 -> m0_398  [color=green, key=1, label="lambda expression", style=dashed];
m0_390 -> m0_403  [color=green, key=1, label="lambda expression", style=dashed];
m0_387 -> m0_390  [color=green, key=1, label=pipeline, style=dashed];
m0_387 -> m0_393  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m0_387 -> m0_392  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m0_389 -> m0_399  [color=green, key=1, label=id, style=dashed];
m0_389 -> m0_404  [color=darkseagreen4, key=1, label=id, style=dashed];
m0_389 -> m0_405  [color=darkseagreen4, key=1, label=id, style=dashed];
m0_389 -> m0_392  [color=darkseagreen4, key=1, label=id, style=dashed];
m0_389 -> m0_409  [color=darkseagreen4, key=1, label=id, style=dashed];
m0_389 -> m0_412  [color=darkseagreen4, key=1, label=id, style=dashed];
m0_389 -> m0_413  [color=darkseagreen4, key=1, label=id, style=dashed];
m0_392 -> m0_408  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_392 -> m0_411  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_9 -> m0_513  [color=green, key=1, label="System.Func<IRedisClient, T>", style=dashed];
m0_0 -> m0_3  [color=green, key=1, label=PooledRedisClientManager, style=dashed];
m0_411 -> m0_413  [color=darkseagreen4, key=1, label="?", style=dashed];
m0_47 -> m0_49  [color=green, key=1, label="lambda expression", style=dashed];
m0_17 -> m0_19  [color=darkseagreen4, key=1, label=task, style=dashed];
m0_27 -> m0_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_49 -> m0_46  [color=darkseagreen4, key=1, label=task, style=dashed];
m0_51 -> m0_58  [color=green, key=1, label="lambda expression", style=dashed];
m0_51 -> m0_64  [color=green, key=1, label="lambda expression", style=dashed];
m0_65 -> m0_65  [color=green, key=1, label="System.Collections.Generic.KeyValuePair<string, HangFire.Storage.Monitoring.ProcessingJobDto>", style=dashed];
m0_72 -> m0_78  [color=green, key=1, label=scheduledJobs, style=dashed];
m0_83 -> m0_109  [color=green, key=1, label="lambda expression", style=dashed];
m0_77 -> m0_80  [color=green, key=1, label=pipeline, style=dashed];
m0_77 -> m0_81  [color=green, key=1, label=pipeline, style=dashed];
m0_77 -> m0_82  [color=green, key=1, label=pipeline, style=dashed];
m0_76 -> m0_81  [color=green, key=1, label=states, style=dashed];
m0_76 -> m0_107  [color=green, key=1, label=states, style=dashed];
m0_80 -> m0_94  [color=green, key=1, label="lambda expression", style=dashed];
m0_80 -> m0_99  [color=green, key=1, label="lambda expression", style=dashed];
m0_81 -> m0_103  [color=green, key=1, label="lambda expression", style=dashed];
m0_81 -> m0_106  [color=green, key=1, label="lambda expression", style=dashed];
m0_75 -> m0_80  [color=green, key=1, label=jobs, style=dashed];
m0_75 -> m0_100  [color=green, key=1, label=jobs, style=dashed];
m0_79 -> m0_100  [color=green, key=1, label=job, style=dashed];
m0_79 -> m0_81  [color=green, key=1, label=job, style=dashed];
m0_79 -> m0_107  [color=green, key=1, label=job, style=dashed];
m0_79 -> m0_95  [color=green, key=1, label=job, style=dashed];
m0_79 -> m0_104  [color=green, key=1, label=job, style=dashed];
m0_133 -> m0_139  [color=green, key=1, label=serverNames, style=dashed];
m0_144 -> m0_160  [color=green, key=1, label="lambda expression", style=dashed];
m0_138 -> m0_141  [color=green, key=1, label=pipeline, style=dashed];
m0_138 -> m0_142  [color=green, key=1, label=pipeline, style=dashed];
m0_138 -> m0_143  [color=green, key=1, label=pipeline, style=dashed];
m0_137 -> m0_142  [color=green, key=1, label=queues, style=dashed];
m0_137 -> m0_158  [color=green, key=1, label=queues, style=dashed];
m0_141 -> m0_147  [color=green, key=1, label="lambda expression", style=dashed];
m0_141 -> m0_150  [color=green, key=1, label="lambda expression", style=dashed];
m0_142 -> m0_153  [color=green, key=1, label="lambda expression", style=dashed];
m0_142 -> m0_157  [color=green, key=1, label="lambda expression", style=dashed];
m0_136 -> m0_141  [color=green, key=1, label=servers, style=dashed];
m0_136 -> m0_151  [color=green, key=1, label=servers, style=dashed];
m0_140 -> m0_151  [color=green, key=1, label=name, style=dashed];
m0_140 -> m0_142  [color=green, key=1, label=name, style=dashed];
m0_140 -> m0_158  [color=green, key=1, label=name, style=dashed];
m0_140 -> m0_148  [color=green, key=1, label=name, style=dashed];
m0_140 -> m0_154  [color=green, key=1, label=name, style=dashed];
m0_171 -> m0_174  [color=green, key=1, label="lambda expression", style=dashed];
m0_183 -> m0_186  [color=green, key=1, label="lambda expression", style=dashed];
m0_196 -> m0_198  [color=green, key=1, label="lambda expression", style=dashed];
m0_206 -> m0_208  [color=green, key=1, label=queues, style=dashed];
m0_207 -> m0_219  [color=green, key=1, label=result, style=dashed];
m0_208 -> m0_226  [color=green, key=1, label=queue, style=dashed];
m0_208 -> m0_232  [color=green, key=1, label=queue, style=dashed];
m0_208 -> m0_238  [color=green, key=1, label=queue, style=dashed];
m0_212 -> m0_216  [color=green, key=1, label=pipeline, style=dashed];
m0_213 -> m0_225  [color=green, key=1, label="lambda expression", style=dashed];
m0_213 -> m0_228  [color=green, key=1, label="lambda expression", style=dashed];
m0_214 -> m0_231  [color=green, key=1, label="lambda expression", style=dashed];
m0_214 -> m0_234  [color=green, key=1, label="lambda expression", style=dashed];
m0_215 -> m0_237  [color=green, key=1, label="lambda expression", style=dashed];
m0_215 -> m0_240  [color=green, key=1, label="lambda expression", style=dashed];
m0_217 -> m0_243  [color=green, key=1, label="lambda expression", style=dashed];
m0_252 -> m0_254  [color=green, key=1, label="lambda expression", style=dashed];
m0_262 -> m0_264  [color=green, key=1, label="lambda expression", style=dashed];
m0_285 -> m0_300  [color=green, key=1, label=job, style=dashed];
m0_285 -> m0_301  [color=green, key=1, label=job, style=dashed];
m0_285 -> m0_302  [color=green, key=1, label=job, style=dashed];
m0_285 -> m0_303  [color=green, key=1, label=job, style=dashed];
m0_304 -> m0_317  [color=green, key=1, label="lambda expression", style=dashed];
m0_304 -> m0_321  [color=green, key=1, label="lambda expression", style=dashed];
m0_304 -> m0_324  [color=green, key=1, label="lambda expression", style=dashed];
m0_288 -> m0_318  [color=green, key=1, label=hiddenProperties, style=dashed];
m0_290 -> m0_292  [color=green, key=1, label=history, style=dashed];
m0_291 -> m0_299  [color=green, key=1, label=stateHistory, style=dashed];
m0_293 -> m0_299  [color=green, key=1, label=dto, style=dashed];
m0_294 -> m0_296  [color=green, key=1, label=stateData, style=dashed];
m0_294 -> m0_297  [color=green, key=1, label=stateData, style=dashed];
m0_419 -> m0_424  [color=green, key=1, label="lambda expression", style=dashed];
m0_403 -> m0_405  [color=darkseagreen4, key=1, label="?", style=dashed];
m0_437 -> m0_452  [color=green, key=1, label=stats, style=dashed];
m0_438 -> m0_448  [color=green, key=1, label=queues, style=dashed];
m0_440 -> m0_455  [color=green, key=1, label="lambda expression", style=dashed];
m0_440 -> m0_459  [color=green, key=1, label="lambda expression", style=dashed];
m0_441 -> m0_462  [color=green, key=1, label="lambda expression", style=dashed];
m0_441 -> m0_465  [color=green, key=1, label="lambda expression", style=dashed];
m0_442 -> m0_468  [color=green, key=1, label="lambda expression", style=dashed];
m0_442 -> m0_471  [color=green, key=1, label="lambda expression", style=dashed];
m0_443 -> m0_474  [color=green, key=1, label="lambda expression", style=dashed];
m0_443 -> m0_477  [color=green, key=1, label="lambda expression", style=dashed];
m0_444 -> m0_480  [color=green, key=1, label="lambda expression", style=dashed];
m0_444 -> m0_484  [color=green, key=1, label="lambda expression", style=dashed];
m0_445 -> m0_488  [color=green, key=1, label="lambda expression", style=dashed];
m0_445 -> m0_491  [color=green, key=1, label="lambda expression", style=dashed];
m0_446 -> m0_494  [color=green, key=1, label="lambda expression", style=dashed];
m0_446 -> m0_497  [color=green, key=1, label="lambda expression", style=dashed];
m0_447 -> m0_500  [color=green, key=1, label="lambda expression", style=dashed];
m0_447 -> m0_503  [color=green, key=1, label="lambda expression", style=dashed];
m0_450 -> m0_506  [color=green, key=1, label="lambda expression", style=dashed];
m0_450 -> m0_509  [color=green, key=1, label="lambda expression", style=dashed];
m0_439 -> m0_451  [color=green, key=1, label=pipeline, style=dashed];
m0_449 -> m0_507  [color=green, key=1, label=queueName, style=dashed];
m0_167 -> m0_169  [color=green, key=1, label="lambda expression", style=dashed];
m0_130 -> m0_132  [color=green, key=1, label="lambda expression", style=dashed];
m0_41 -> m0_43  [color=green, key=1, label="lambda expression", style=dashed];
m0_179 -> m0_181  [color=green, key=1, label="lambda expression", style=dashed];
m0_117 -> m0_119  [color=green, key=1, label="lambda expression", style=dashed];
m0_7 -> m0_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_7 -> m0_42  [color=green, key=1, label="lambda expression", style=dashed];
m0_48 -> m0_7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts", style=dashed];
m0_48 -> m0_13  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts", style=dashed];
m0_48 -> m0_27  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts", style=dashed];
m0_48 -> m0_32  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts", style=dashed];
m0_48 -> m0_36  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts", style=dashed];
m0_48 -> m0_37  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.ServerComponentExtensionsFacts", style=dashed];
m0_269 -> m0_271  [color=green, key=1, label="lambda expression", style=dashed];
m0_124 -> m0_126  [color=green, key=1, label="lambda expression", style=dashed];
m0_203 -> m0_205  [color=green, key=1, label="lambda expression", style=dashed];
m0_68 -> m0_71  [color=green, key=1, label="lambda expression", style=dashed];
m0_523 -> m0_3  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_7  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_15  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_23  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_29  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_35  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_41  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_117  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_120  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_124  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_127  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_269  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_272  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_276  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_279  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_523 -> m0_428  [color=green, key=1, label="HangFire.Redis.RedisMonitoringApi", style=dashed];
m0_530 -> m0_100  [color=green, key=1, label=job, style=dashed];
m0_530 -> m0_107  [color=green, key=1, label=job, style=dashed];
m0_530 -> m0_95  [color=green, key=1, label=job, style=dashed];
m0_530 -> m0_104  [color=green, key=1, label=job, style=dashed];
m0_531 -> m0_100  [color=green, key=1, label=jobs, style=dashed];
m0_532 -> m0_107  [color=green, key=1, label=states, style=dashed];
m0_533 -> m0_151  [color=green, key=1, label=name, style=dashed];
m0_533 -> m0_158  [color=green, key=1, label=name, style=dashed];
m0_533 -> m0_148  [color=green, key=1, label=name, style=dashed];
m0_533 -> m0_154  [color=green, key=1, label=name, style=dashed];
m0_534 -> m0_151  [color=green, key=1, label=servers, style=dashed];
m0_535 -> m0_158  [color=green, key=1, label=queues, style=dashed];
m0_542 -> m0_226  [color=green, key=1, label=queue, style=dashed];
m0_542 -> m0_232  [color=green, key=1, label=queue, style=dashed];
m0_542 -> m0_238  [color=green, key=1, label=queue, style=dashed];
m0_550 -> m0_318  [color=green, key=1, label=hiddenProperties, style=dashed];
m0_558 -> m0_419  [color=green, key=1, label="System.Func<HangFire.Common.Job, System.Collections.Generic.List<string>, System.Collections.Generic.List<string>, T>", style=dashed];
m0_553 -> m0_399  [color=green, key=1, label="string[]", style=dashed];
m0_554 -> m0_399  [color=green, key=1, label=id, style=dashed];
m0_554 -> m0_404  [color=darkseagreen4, key=1, label=id, style=dashed];
m0_554 -> m0_405  [color=darkseagreen4, key=1, label=id, style=dashed];
m0_554 -> m0_409  [color=darkseagreen4, key=1, label=id, style=dashed];
m0_554 -> m0_412  [color=darkseagreen4, key=1, label=id, style=dashed];
m0_554 -> m0_413  [color=darkseagreen4, key=1, label=id, style=dashed];
m0_560 -> m0_507  [color=green, key=1, label=queueName, style=dashed];
m0_556 -> m0_409  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_555 -> m0_405  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m0_555 -> m0_404  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m0_557 -> m0_413  [color=darkseagreen4, key=1, label=states, style=dashed];
m0_557 -> m0_412  [color=darkseagreen4, key=1, label=states, style=dashed];
m0_552 -> m0_380  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_551 -> m0_352  [color=darkseagreen4, key=1, label=string, style=dashed];
}
