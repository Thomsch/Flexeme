digraph  {
d27 [label="NewState.IsFinal", span="76-76", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0];
d42 [label="HangFire.States.ApplyStateContext", span=""];
d25 [label=filters, span="71-71", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d28 [label="transaction.ExpireJob(JobId, JobExpirationTimeout)", span="78-78", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d29 [label="transaction.PersistJob(JobId)", span="82-82", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d5 [label="_connection = connection", span="36-36", cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)"];
d6 [label="OldStateName = oldStateName", span="37-37", cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)"];
d7 [label="NewState = newState", span="38-38", cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)"];
d8 [label="JobExpirationTimeout = TimeSpan.FromDays(1)", span="39-39", cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)"];
d17 [label="var transaction = _connection.CreateWriteTransaction()", span="52-52", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d18 [label="handlers.GetHandlers(OldStateName)", span="54-54", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d19 [label="handler.Unapply(this, transaction)", span="56-56", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d21 [label="filter.OnStateUnapplied(this, transaction)", span="61-61", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d22 [label="transaction.SetJobState(JobId, NewState)", span="64-64", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d23 [label="handlers.GetHandlers(NewState.Name)", span="66-66", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d24 [label="handler.Apply(this, transaction)", span="68-68", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d26 [label="filter.OnStateApplied(this, transaction)", span="73-73", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d12 [label="Entry HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", span="46-46", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d30 [label="transaction.Commit()", span="85-85", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d39 [label="Entry HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="24-24", cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)"];
d40 [label="Entry HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", span="25-25", cluster="HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)"];
d0 [label="Entry HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", span="26-26", cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)"];
d3 [label="newState == null", span="34-34", cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)"];
d9 [label="Exit HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", span="26-26", cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)"];
d11 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)"];
d15 [label="filters == null", span="50-50", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d32 [label="Entry HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="26-26", cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()"];
d20 [label=filters, span="59-59", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d33 [label="Entry HangFire.States.StateHandlerCollection.GetHandlers(string)", span="40-40", cluster="HangFire.States.StateHandlerCollection.GetHandlers(string)"];
d34 [label="Entry HangFire.States.IStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="25-25", cluster="HangFire.States.IStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)"];
d35 [label="Entry HangFire.States.IApplyStateFilter.OnStateUnapplied(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="36-36", cluster="HangFire.States.IApplyStateFilter.OnStateUnapplied(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)"];
d36 [label="Entry HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", span="26-26", cluster="HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)"];
d37 [label="Entry HangFire.States.IStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="24-24", cluster="HangFire.States.IStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)"];
d38 [label="Entry HangFire.States.IApplyStateFilter.OnStateApplied(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="29-29", cluster="HangFire.States.IApplyStateFilter.OnStateApplied(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)"];
d31 [label="Exit HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", span="46-46", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d13 [label="handlers == null", span="49-49", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d41 [label="Entry HangFire.Storage.IWriteOnlyTransaction.Commit()", span="48-48", cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()"];
d1 [label="connection == null", span="33-33", cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)"];
d4 [label="throw new ArgumentNullException(''newState'');", span="34-34", cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)"];
d2 [label="throw new ArgumentNullException(''connection'');", span="33-33", cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)"];
d16 [label="throw new ArgumentNullException(''filters'');", span="50-50", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d14 [label="throw new ArgumentNullException(''handlers'');", span="49-49", cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)"];
d10 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
m2_6 [label="Entry HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", span="16-16", cluster="HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="BackgroundJobClientExtensions.cs"];
m2_7 [label="var state = new SucceededState()", span="18-18", cluster="HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="BackgroundJobClientExtensions.cs"];
m2_8 [label="var data = state.SerializeData()", span="20-20", cluster="HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="BackgroundJobClientExtensions.cs"];
m2_9 [label="Assert.Equal(JobHelper.ToStringTimestamp(state.SucceededAt), data[''SucceededAt''])", span="22-22", cluster="HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="BackgroundJobClientExtensions.cs"];
m2_10 [label="Exit HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", span="16-16", cluster="HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="BackgroundJobClientExtensions.cs"];
m2_13 [label="Entry HangFire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", span="26-26", cluster="HangFire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", file="BackgroundJobClientExtensions.cs"];
m2_14 [label="var state = new SucceededState()", span="28-28", cluster="HangFire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", file="BackgroundJobClientExtensions.cs"];
m2_15 [label="Assert.True(state.IsFinal)", span="29-29", cluster="HangFire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", file="BackgroundJobClientExtensions.cs"];
m2_16 [label="Exit HangFire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", span="26-26", cluster="HangFire.Core.Tests.States.SucceededStateFacts.IsFinal_ReturnsTrue()", file="BackgroundJobClientExtensions.cs"];
m2_17 [label="Entry Unk.True", span="", cluster="Unk.True", file="BackgroundJobClientExtensions.cs"];
m2_5 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="BackgroundJobClientExtensions.cs"];
m2_0 [label="Entry HangFire.Core.Tests.States.SucceededStateFacts.StateName_IsCorrect()", span="9-9", cluster="HangFire.Core.Tests.States.SucceededStateFacts.StateName_IsCorrect()", file="BackgroundJobClientExtensions.cs"];
m2_1 [label="var state = new SucceededState()", span="11-11", cluster="HangFire.Core.Tests.States.SucceededStateFacts.StateName_IsCorrect()", file="BackgroundJobClientExtensions.cs"];
m2_2 [label="Assert.Equal(SucceededState.StateName, state.Name)", span="12-12", cluster="HangFire.Core.Tests.States.SucceededStateFacts.StateName_IsCorrect()", file="BackgroundJobClientExtensions.cs"];
m2_3 [label="Exit HangFire.Core.Tests.States.SucceededStateFacts.StateName_IsCorrect()", span="9-9", cluster="HangFire.Core.Tests.States.SucceededStateFacts.StateName_IsCorrect()", file="BackgroundJobClientExtensions.cs"];
m2_11 [label="Entry HangFire.States.SucceededState.SerializeData()", span="39-39", cluster="HangFire.States.SucceededState.SerializeData()", file="BackgroundJobClientExtensions.cs"];
m2_4 [label="Entry HangFire.States.SucceededState.SucceededState()", span="27-27", cluster="HangFire.States.SucceededState.SucceededState()", file="BackgroundJobClientExtensions.cs"];
m2_12 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="BackgroundJobClientExtensions.cs"];
m3_6 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", span="20-20", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_7 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Create(\r\n                    null, () => StaticMethod(), _state.Object))", span="22-24", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_8 [label="Assert.Equal(''client'', exception.ParamName)", span="26-26", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_9 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", span="20-20", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_95 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", span="92-92", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_96 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod(), ''critical''))", span="94-96", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_97 [label="Assert.Equal(''client'', exception.ParamName)", span="98-98", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_98 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", span="92-92", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_4 [label="Entry Mock<IBackgroundJobClient>.cstr", span="", cluster="Mock<IBackgroundJobClient>.cstr", file="BackgroundJobClientExtensionsFacts.cs"];
m3_11 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="BackgroundJobClientExtensionsFacts.cs"];
m3_52 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", span="56-56", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_53 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod()))", span="58-60", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_54 [label="Assert.Equal(''client'', exception.ParamName)", span="62-62", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_55 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", span="56-56", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_10 [label="Entry Unk.>", span="", cluster="Unk.>", file="BackgroundJobClientExtensionsFacts.cs"];
m3_41 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", span="176-176", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_194 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", span="176-176", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_151 [label="Entry HangFire.BackgroundJobClientExtensions.Schedule(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", span="106-106", cluster="HangFire.BackgroundJobClientExtensions.Schedule(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", file="BackgroundJobClientExtensionsFacts.cs"];
m3_176 [label="Entry HangFire.BackgroundJobClientExtensions.Schedule<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="123-123", cluster="HangFire.BackgroundJobClientExtensions.Schedule<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", file="BackgroundJobClientExtensionsFacts.cs"];
m3_180 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", span="162-162", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_181 [label="_client.Object.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                x => x.InstanceMethod(), TimeSpan.FromDays(1))", span="164-165", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_182 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow)))", span="167-169", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_183 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", span="162-162", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_67 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="BackgroundJobClientExtensionsFacts.cs"];
m3_20 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", span="30-30", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_21 [label="_client.Object.Create(() => StaticMethod(), _state.Object)", span="32-32", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_22 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), _state.Object))", span="34-34", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_23 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", span="30-30", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_119 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", span="112-112", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_120 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), ''critical''))", span="114-116", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_121 [label="Assert.Equal(''client'', exception.ParamName)", span="118-118", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_122 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", span="112-112", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_106 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", span="102-102", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_107 [label="_client.Object.Enqueue(() => StaticMethod(), ''critical'')", span="104-104", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_108 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<EnqueuedState>(state => state.Queue == ''critical'')))", span="106-108", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_109 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", span="102-102", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_126 [label="Entry HangFire.BackgroundJobClientExtensions.Enqueue<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, string)", span="90-90", cluster="HangFire.BackgroundJobClientExtensions.Enqueue<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, string)", file="BackgroundJobClientExtensionsFacts.cs"];
m3_5 [label="Entry Mock<State>.cstr", span="", cluster="Mock<State>.cstr", file="BackgroundJobClientExtensionsFacts.cs"];
m3_169 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", span="152-152", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_170 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), TimeSpan.FromDays(1)))", span="154-156", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_171 [label="Assert.Equal(''client'', exception.ParamName)", span="158-158", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_172 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", span="152-152", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_19 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", span="172-172", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_193 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", span="172-172", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_190 [label="Entry lambda expression", span="169-169", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_12 [label="Entry lambda expression", span="23-24", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_13 [label="BackgroundJobClientExtensions.Create(\r\n                    null, () => StaticMethod(), _state.Object)", span="23-24", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_14 [label="Exit lambda expression", span="23-24", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_16 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_17 [label="StaticMethod()", span="24-24", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_18 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_25 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_28 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_26 [label="StaticMethod()", span="32-32", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_27 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_29 [label="x.Create(It.IsNotNull<Job>(), _state.Object)", span="34-34", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_30 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_35 [label="Entry lambda expression", span="41-42", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_36 [label="BackgroundJobClientExtensions.Create<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), _state.Object)", span="41-42", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_37 [label="Exit lambda expression", span="41-42", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_38 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_39 [label="x.InstanceMethod()", span="42-42", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_40 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_46 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_49 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_47 [label="x.InstanceMethod()", span="50-50", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_48 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_50 [label="x.Create(It.IsNotNull<Job>(), _state.Object)", span="52-52", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_51 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_56 [label="Entry lambda expression", span="59-60", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_57 [label="BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod())", span="59-60", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_58 [label="Exit lambda expression", span="59-60", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_60 [label="Entry lambda expression", span="60-60", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_61 [label="StaticMethod()", span="60-60", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_62 [label="Exit lambda expression", span="60-60", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_68 [label="Entry lambda expression", span="68-68", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_71 [label="Entry lambda expression", span="70-70", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_69 [label="StaticMethod()", span="68-68", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_70 [label="Exit lambda expression", span="68-68", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_72 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="70-70", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_73 [label="Exit lambda expression", span="70-70", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_78 [label="Entry lambda expression", span="77-78", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_79 [label="BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod())", span="77-78", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_80 [label="Exit lambda expression", span="77-78", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_82 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_83 [label="x.InstanceMethod()", span="78-78", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_84 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_89 [label="Entry lambda expression", span="86-86", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_92 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_90 [label="x.InstanceMethod()", span="86-86", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_91 [label="Exit lambda expression", span="86-86", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_93 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="88-88", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_94 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_99 [label="Entry lambda expression", span="95-96", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_100 [label="BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod(), ''critical'')", span="95-96", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_101 [label="Exit lambda expression", span="95-96", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_103 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_104 [label="StaticMethod()", span="96-96", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_105 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_110 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_113 [label="Entry lambda expression", span="106-108", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_111 [label="StaticMethod()", span="104-104", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_112 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_114 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<EnqueuedState>(state => state.Queue == ''critical''))", span="106-108", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_115 [label="Exit lambda expression", span="106-108", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_116 [label="Entry lambda expression", span="108-108", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_117 [label="state.Queue == ''critical''", span="108-108", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_118 [label="Exit lambda expression", span="108-108", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_123 [label="Entry lambda expression", span="115-116", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_124 [label="BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), ''critical'')", span="115-116", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_125 [label="Exit lambda expression", span="115-116", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_127 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_128 [label="x.InstanceMethod()", span="116-116", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_129 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_134 [label="Entry lambda expression", span="124-124", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_137 [label="Entry lambda expression", span="126-128", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_135 [label="x.InstanceMethod()", span="124-124", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_136 [label="Exit lambda expression", span="124-124", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_138 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<EnqueuedState>(state => state.Queue == ''critical''))", span="126-128", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_139 [label="Exit lambda expression", span="126-128", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_140 [label="Entry lambda expression", span="128-128", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_141 [label="state.Queue == ''critical''", span="128-128", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_142 [label="Exit lambda expression", span="128-128", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_147 [label="Entry lambda expression", span="135-136", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_148 [label="BackgroundJobClientExtensions.Schedule(\r\n                    null, () => StaticMethod(), TimeSpan.FromDays(1))", span="135-136", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_149 [label="Exit lambda expression", span="135-136", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_152 [label="Entry lambda expression", span="136-136", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_153 [label="StaticMethod()", span="136-136", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_154 [label="Exit lambda expression", span="136-136", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_160 [label="Entry lambda expression", span="144-144", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_163 [label="Entry lambda expression", span="146-148", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_161 [label="StaticMethod()", span="144-144", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_162 [label="Exit lambda expression", span="144-144", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_164 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow))", span="146-148", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_165 [label="Exit lambda expression", span="146-148", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_166 [label="Entry lambda expression", span="148-148", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_167 [label="state.EnqueueAt > DateTime.UtcNow", span="148-148", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_168 [label="Exit lambda expression", span="148-148", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_173 [label="Entry lambda expression", span="155-156", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_174 [label="BackgroundJobClientExtensions.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), TimeSpan.FromDays(1))", span="155-156", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_175 [label="Exit lambda expression", span="155-156", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_177 [label="Entry lambda expression", span="156-156", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_178 [label="x.InstanceMethod()", span="156-156", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_179 [label="Exit lambda expression", span="156-156", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_184 [label="Entry lambda expression", span="165-165", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_187 [label="Entry lambda expression", span="167-169", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_185 [label="x.InstanceMethod()", span="165-165", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_186 [label="Exit lambda expression", span="165-165", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_188 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow))", span="167-169", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_189 [label="Exit lambda expression", span="167-169", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_191 [label="state.EnqueueAt > DateTime.UtcNow", span="169-169", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_192 [label="Exit lambda expression", span="169-169", cluster="lambda expression", file="BackgroundJobClientExtensionsFacts.cs"];
m3_74 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", span="74-74", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_75 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod()))", span="76-78", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_76 [label="Assert.Equal(''client'', exception.ParamName)", span="80-80", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_77 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", span="74-74", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_85 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", span="84-84", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_86 [label="_client.Object.Enqueue<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod())", span="86-86", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_87 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="88-88", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_88 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", span="84-84", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_42 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", span="48-48", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_43 [label="_client.Object.Create<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod(), _state.Object)", span="50-50", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_44 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), _state.Object))", span="52-52", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_45 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", span="48-48", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_81 [label="Entry HangFire.BackgroundJobClientExtensions.Enqueue<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>)", span="53-53", cluster="HangFire.BackgroundJobClientExtensions.Enqueue<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>)", file="BackgroundJobClientExtensionsFacts.cs"];
m3_63 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", span="66-66", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_64 [label="_client.Object.Enqueue(() => StaticMethod())", span="68-68", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_65 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="70-70", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_66 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", span="66-66", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_159 [label="Entry Unk.Schedule", span="", cluster="Unk.Schedule", file="BackgroundJobClientExtensionsFacts.cs"];
m3_15 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="BackgroundJobClientExtensionsFacts.cs"];
m3_0 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", span="13-13", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_1 [label="_client = new Mock<IBackgroundJobClient>()", span="15-15", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_2 [label="_state = new Mock<State>()", span="16-16", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", color=red, community=0, file="BackgroundJobClientExtensionsFacts.cs"];
m3_3 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", span="13-13", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_155 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", span="142-142", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_156 [label="_client.Object.Schedule(() => StaticMethod(), TimeSpan.FromDays(1))", span="144-144", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_157 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow)))", span="146-148", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_158 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", span="142-142", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_24 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="BackgroundJobClientExtensionsFacts.cs"];
m3_102 [label="Entry HangFire.BackgroundJobClientExtensions.Enqueue(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, string)", span="71-71", cluster="HangFire.BackgroundJobClientExtensions.Enqueue(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, string)", file="BackgroundJobClientExtensionsFacts.cs"];
m3_59 [label="Entry HangFire.BackgroundJobClientExtensions.Enqueue(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>)", span="35-35", cluster="HangFire.BackgroundJobClientExtensions.Enqueue(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>)", file="BackgroundJobClientExtensionsFacts.cs"];
m3_143 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", span="132-132", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_144 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Schedule(\r\n                    null, () => StaticMethod(), TimeSpan.FromDays(1)))", span="134-136", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_145 [label="Assert.Equal(''client'', exception.ParamName)", span="138-138", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_146 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", span="132-132", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_31 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", span="38-38", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_32 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Create<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), _state.Object))", span="40-42", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_33 [label="Assert.Equal(''client'', exception.ParamName)", span="44-44", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_34 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", span="38-38", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_130 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", span="122-122", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_131 [label="_client.Object.Enqueue<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod(), ''critical'')", span="124-124", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_132 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<EnqueuedState>(state => state.Queue == ''critical'')))", span="126-128", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_133 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", span="122-122", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="BackgroundJobClientExtensionsFacts.cs"];
m3_195 [label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts", span="", file="BackgroundJobClientExtensionsFacts.cs"];
m6_9 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="BackgroundJobServerFacts.cs"];
m6_0 [label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="27-27", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="BackgroundJobServerFacts.cs"];
m6_1 [label="exception == null", span="29-29", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="BackgroundJobServerFacts.cs"];
m6_3 [label="Exception = exception", span="31-31", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="BackgroundJobServerFacts.cs"];
m6_2 [label="throw new ArgumentNullException(''exception'');", span="29-29", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="BackgroundJobServerFacts.cs"];
m6_4 [label="Exit HangFire.States.FailedState.FailedState(System.Exception)", span="27-27", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="BackgroundJobServerFacts.cs"];
m6_12 [label="Entry System.Exception.ToString()", span="0-0", cluster="System.Exception.ToString()", file="BackgroundJobServerFacts.cs"];
m6_6 [label="Entry HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", span="37-37", cluster="HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", file="BackgroundJobServerFacts.cs"];
m6_7 [label="return new Dictionary<string, string>\r\n                {\r\n                    { ''FailedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''ExceptionType'', Exception.GetType().FullName },\r\n                    { ''ExceptionMessage'', Exception.Message },\r\n                    { ''ExceptionDetails'', Exception.ToString() }\r\n                };", span="39-45", cluster="HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", file="BackgroundJobServerFacts.cs"];
m6_8 [label="Exit HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", span="37-37", cluster="HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", file="BackgroundJobServerFacts.cs"];
m6_10 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="BackgroundJobServerFacts.cs"];
m6_11 [label="Entry System.Exception.GetType()", span="0-0", cluster="System.Exception.GetType()", file="BackgroundJobServerFacts.cs"];
m6_13 [label="HangFire.States.FailedState", span="", file="BackgroundJobServerFacts.cs"];
m7_90 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="BackgroundJobServerOptions.cs"];
m7_353 [label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="44-44", cluster="Hangfire.Storage.InvocationData.Deserialize()", file="BackgroundJobServerOptions.cs"];
m7_114 [label="Entry long.Parse(string)", span="0-0", cluster="long.Parse(string)", file="BackgroundJobServerOptions.cs"];
m7_368 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="BackgroundJobServerOptions.cs"];
m7_91 [label="Entry Hangfire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.ServerDto.ServerDto()", file="BackgroundJobServerOptions.cs"];
m7_45 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="484-484", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_354 [label="string jobsSql = string.Format(@''\r\nselect * from (\r\n  select j.*, s.Reason as StateReason, s.Data as StateData, row_number() over (order by j.Id desc) as row_num\r\n  from [{0}].Job j with (forceseek)\r\n  left join [{0}].State s on j.StateId = s.Id\r\n  where j.StateName = @stateName\r\n) as j where j.row_num between @start and @end\r\n'', _storage.GetSchemaName())", span="491-498", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_355 [label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                        .ToList()", span="500-503", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_356 [label="return DeserializeJobs(jobs, selector);", span="505-505", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_357 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="484-484", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_369 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="BackgroundJobServerOptions.cs"];
m7_27 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="66-66", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="BackgroundJobServerOptions.cs"];
m7_28 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, FailedState.StateName));", span="68-69", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="BackgroundJobServerOptions.cs"];
m7_29 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="66-66", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="BackgroundJobServerOptions.cs"];
m7_142 [label="Entry Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18", cluster="Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="BackgroundJobServerOptions.cs"];
m7_102 [label="Entry Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="BackgroundJobServerOptions.cs"];
m7_358 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="508-508", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_359 [label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="512-512", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_360 [label=jobs, span="514-514", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_363 [label="var dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="521-521", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_364 [label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="523-524", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_365 [label="return new JobList<TDto>(result);", span="527-527", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_361 [label="var deserializedData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="516-516", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_362 [label="var stateData = deserializedData != null\r\n                    ? new Dictionary<string, string>(deserializedData, StringComparer.OrdinalIgnoreCase)\r\n                    : null", span="517-519", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_366 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="508-508", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="BackgroundJobServerOptions.cs"];
m7_14 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", span="455-455", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_341 [label="var sqlQuery = _jobListLimit.HasValue\r\n                ? string.Format(@''select count(j.Id) from (select top (@limit) Id from [{0}].Job where StateName = @state) as j'', _storage.GetSchemaName())\r\n                : string.Format(@''select count(Id) from [{0}].Job where StateName = @state'', _storage.GetSchemaName())", span="457-459", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_342 [label="var count = connection.Query<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName, limit = _jobListLimit })\r\n                 .Single()", span="461-464", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_343 [label="return count;", span="466-466", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_344 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", span="455-455", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_229 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="300-300", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="BackgroundJobServerOptions.cs"];
m7_230 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, DeletedState.StateName));", span="302-303", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="BackgroundJobServerOptions.cs"];
m7_231 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="300-300", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="BackgroundJobServerOptions.cs"];
m7_381 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="BackgroundJobServerOptions.cs"];
m7_10 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="423-423", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="BackgroundJobServerOptions.cs"];
m7_329 [label="return _storage.UseTransaction(action, IsolationLevel.ReadUncommitted);", span="425-425", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="BackgroundJobServerOptions.cs"];
m7_330 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="423-423", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="BackgroundJobServerOptions.cs"];
m7_241 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="BackgroundJobServerOptions.cs"];
m7_188 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="246-246", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="BackgroundJobServerOptions.cs"];
m7_189 [label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''failed''));", span="248-249", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="BackgroundJobServerOptions.cs"];
m7_190 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="246-246", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="BackgroundJobServerOptions.cs"];
m7_336 [label="Entry Unk.DeserializeJobs", span="", cluster="Unk.DeserializeJobs", file="BackgroundJobServerOptions.cs"];
m7_235 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="306-306", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="BackgroundJobServerOptions.cs"];
m7_236 [label="string sql = string.Format(@''\r\nselect count(Id) from [{0}].Job where StateName = N'Enqueued';\r\nselect count(Id) from [{0}].Job where StateName = N'Failed';\r\nselect count(Id) from [{0}].Job where StateName = N'Processing';\r\nselect count(Id) from [{0}].Job where StateName = N'Scheduled';\r\nselect count(Id) from [{0}].Server;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter where [Key] = N'stats:succeeded'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter where [Key] = N'stats:succeeded'\r\n) as s;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter where [Key] = N'stats:deleted'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter where [Key] = N'stats:deleted'\r\n) as s;\r\nselect count(*) from [{0}].[Set] where [Key] = N'recurring-jobs';\r\n'', _storage.GetSchemaName())", span="308-325", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="BackgroundJobServerOptions.cs"];
m7_237 [label="var statistics = UseConnection(connection =>\r\n            {\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql))\r\n                {\r\n                    stats.Enqueued = multi.Read<int>().Single();\r\n                    stats.Failed = multi.Read<int>().Single();\r\n                    stats.Processing = multi.Read<int>().Single();\r\n                    stats.Scheduled = multi.Read<int>().Single();\r\n\r\n                    stats.Servers = multi.Read<int>().Single();\r\n\r\n                    stats.Succeeded = multi.Read<long?>().SingleOrDefault() ?? 0;\r\n                    stats.Deleted = multi.Read<long?>().SingleOrDefault() ?? 0;\r\n\r\n                    stats.Recurring = multi.Read<int>().Single();\r\n                }\r\n                return stats;\r\n            })", span="327-345", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="BackgroundJobServerOptions.cs"];
m7_238 [label="statistics.Queues = _storage.QueueProviders\r\n                .SelectMany(x => x.GetJobQueueMonitoringApi().GetQueues())\r\n                .Count()", span="347-349", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="BackgroundJobServerOptions.cs"];
m7_239 [label="return statistics;", span="351-351", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="BackgroundJobServerOptions.cs"];
m7_240 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="306-306", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="BackgroundJobServerOptions.cs"];
m7_176 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="24-24", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="BackgroundJobServerOptions.cs"];
m7_171 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="232-232", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="BackgroundJobServerOptions.cs"];
m7_172 [label="var queueApi = GetQueueApi(queue)", span="234-234", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="BackgroundJobServerOptions.cs"];
m7_173 [label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="235-235", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="BackgroundJobServerOptions.cs"];
m7_174 [label="return UseConnection(connection => FetchedJobs(connection, fetchedJobIds));", span="237-237", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="BackgroundJobServerOptions.cs"];
m7_175 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="232-232", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="BackgroundJobServerOptions.cs"];
m7_187 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="354-354", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_262 [label="var endDate = DateTime.UtcNow", span="358-358", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_269 [label="var keyMaps = dates.ToDictionary(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH'')), x => x)", span="366-366", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_270 [label="return GetTimelineStats(connection, keyMaps);", span="368-368", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_263 [label="var dates = new List<DateTime>()", span="359-359", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_266 [label="dates.Add(endDate)", span="362-362", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_267 [label="endDate = endDate.AddHours(-1)", span="363-363", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_264 [label="var i = 0", span="360-360", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_265 [label="i < 24", span="360-360", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_268 [label="i++", span="360-360", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_271 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="354-354", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_0 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="36-36", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="BackgroundJobServerOptions.cs"];
m7_5 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="36-36", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", color=green, community=0, file="BackgroundJobServerOptions.cs"];
m7_4 [label="_jobListLimit = jobListLimit", span="41-41", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="BackgroundJobServerOptions.cs"];
m7_1 [label="storage == null", span="38-38", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="BackgroundJobServerOptions.cs"];
m7_2 [label="throw new ArgumentNullException(''storage'');", span="38-38", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="BackgroundJobServerOptions.cs"];
m7_3 [label="_storage = storage", span="40-40", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="BackgroundJobServerOptions.cs"];
m7_6 [label="Exit HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="11-11", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m7_314 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="BackgroundJobServerOptions.cs"];
m7_113 [label="Entry Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="BackgroundJobServerOptions.cs"];
m7_160 [label="Entry Unk.EnqueuedJobs", span="", cluster="Unk.EnqueuedJobs", file="BackgroundJobServerOptions.cs"];
m7_382 [label="Entry Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", file="BackgroundJobServerOptions.cs"];
m7_261 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", file="BackgroundJobServerOptions.cs"];
m7_166 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="23-23", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="BackgroundJobServerOptions.cs"];
m7_146 [label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", span="21-21", cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", file="BackgroundJobServerOptions.cs"];
m7_50 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="BackgroundJobServerOptions.cs"];
m7_370 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()", file="BackgroundJobServerOptions.cs"];
m7_331 [label="Entry Unk.UseTransaction", span="", cluster="Unk.UseTransaction", file="BackgroundJobServerOptions.cs"];
m7_125 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="195-195", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="BackgroundJobServerOptions.cs"];
m7_126 [label="var tuples = _storage.QueueProviders\r\n                .Select(x => x.GetJobQueueMonitoringApi())\r\n                .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                .OrderBy(x => x.Queue)\r\n                .ToArray()", span="197-201", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="BackgroundJobServerOptions.cs"];
m7_127 [label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="203-203", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="BackgroundJobServerOptions.cs"];
m7_128 [label=tuples, span="205-205", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="BackgroundJobServerOptions.cs"];
m7_132 [label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                {\r\n                    Name = tuple.Queue,\r\n                    Length = counters.EnqueuedCount ?? 0,\r\n                    Fetched = counters.FetchedCount,\r\n                    FirstJobs = firstJobs\r\n                })", span="212-218", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="BackgroundJobServerOptions.cs"];
m7_133 [label="return result;", span="221-221", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="BackgroundJobServerOptions.cs"];
m7_129 [label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="207-207", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="BackgroundJobServerOptions.cs"];
m7_130 [label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="208-208", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="BackgroundJobServerOptions.cs"];
m7_131 [label="var firstJobs = UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds))", span="210-210", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="BackgroundJobServerOptions.cs"];
m7_134 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="195-195", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="BackgroundJobServerOptions.cs"];
m7_138 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="BackgroundJobServerOptions.cs"];
m7_292 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="BackgroundJobServerOptions.cs"];
m7_222 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="BackgroundJobServerOptions.cs"];
m7_352 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="BackgroundJobServerOptions.cs"];
m7_115 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="181-181", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_116 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }));", span="183-192", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_117 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="181-181", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_273 [label="Entry Unk.GetTimelineStats", span="", cluster="Unk.GetTimelineStats", file="BackgroundJobServerOptions.cs"];
m7_221 [label="Entry Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", file="BackgroundJobServerOptions.cs"];
m7_337 [label="Entry lambda expression", span="445-452", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_11 [label="Entry lambda expression", span="46-47", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_12 [label="GetNumberOfJobsByStateName(connection, ScheduledState.StateName)", span="47-47", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_13 [label="Exit lambda expression", span="46-47", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_30 [label="Entry lambda expression", span="68-69", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_31 [label="GetNumberOfJobsByStateName(connection, FailedState.StateName)", span="69-69", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_32 [label="Exit lambda expression", span="68-69", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_36 [label="Entry lambda expression", span="74-75", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_37 [label="GetNumberOfJobsByStateName(connection, ProcessingState.StateName)", span="75-75", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_38 [label="Exit lambda expression", span="74-75", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_43 [label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                })", span="80-89", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_42 [label="Entry lambda expression", span="80-89", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_44 [label="Exit lambda expression", span="80-89", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_46 [label="Entry lambda expression", span="84-89", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_47 [label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }", span="84-89", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_48 [label="Exit lambda expression", span="84-89", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_56 [label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                })", span="94-103", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_55 [label="Entry lambda expression", span="94-103", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_57 [label="Exit lambda expression", span="94-103", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_58 [label="Entry lambda expression", span="98-103", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_59 [label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }", span="98-103", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_60 [label="Exit lambda expression", span="98-103", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_65 [label="Entry lambda expression", span="108-109", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_66 [label="GetTimelineStats(connection, ''succeeded'')", span="109-109", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_67 [label="Exit lambda expression", span="108-109", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_72 [label="Entry lambda expression", span="114-115", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_73 [label="GetTimelineStats(connection, ''failed'')", span="115-115", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_74 [label="Exit lambda expression", span="114-115", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_79 [label="Entry lambda expression", span="120-142", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_80 [label="var servers = connection.Query<Entities.Server>(\r\n                    string.Format(@''select * from [{0}].Server'', _storage.GetSchemaName()))\r\n                    .ToList()", span="122-124", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_81 [label="var result = new List<ServerDto>()", span="126-126", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_82 [label=servers, span="128-128", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_84 [label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="131-138", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_85 [label="return result;", span="141-141", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_83 [label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="130-130", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_86 [label="Exit lambda expression", span="120-142", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_97 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                })", span="147-160", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_96 [label="Entry lambda expression", span="147-160", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_98 [label="Exit lambda expression", span="147-160", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_99 [label="Entry lambda expression", span="152-160", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_100 [label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }", span="152-160", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_101 [label="Exit lambda expression", span="152-160", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_108 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                })", span="165-178", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_107 [label="Entry lambda expression", span="165-178", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_109 [label="Exit lambda expression", span="165-178", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_110 [label="Entry lambda expression", span="170-178", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_111 [label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }", span="170-178", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_112 [label="Exit lambda expression", span="170-178", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_119 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                })", span="183-192", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_118 [label="Entry lambda expression", span="183-192", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_120 [label="Exit lambda expression", span="183-192", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_121 [label="Entry lambda expression", span="188-192", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_122 [label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", span="188-192", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_123 [label="Exit lambda expression", span="188-192", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_143 [label="Entry lambda expression", span="198-198", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_147 [label="Entry lambda expression", span="199-199", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_151 [label="Entry lambda expression", span="199-199", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_154 [label="Entry lambda expression", span="200-200", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_158 [label="EnqueuedJobs(connection, enqueuedJobIds)", span="210-210", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_157 [label="Entry lambda expression", span="210-210", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_144 [label="x.GetJobQueueMonitoringApi()", span="198-198", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_145 [label="Exit lambda expression", span="198-198", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_148 [label="x.GetQueues()", span="199-199", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_149 [label="Exit lambda expression", span="199-199", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_152 [label="new { Monitoring = monitoring, Queue = queue }", span="199-199", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_153 [label="Exit lambda expression", span="199-199", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_155 [label="x.Queue", span="200-200", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_156 [label="Exit lambda expression", span="200-200", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_159 [label="Exit lambda expression", span="210-210", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_168 [label="EnqueuedJobs(connection, enqueuedJobIds)", span="229-229", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_167 [label="Entry lambda expression", span="229-229", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_169 [label="Exit lambda expression", span="229-229", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_178 [label="FetchedJobs(connection, fetchedJobIds)", span="237-237", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_177 [label="Entry lambda expression", span="237-237", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_179 [label="Exit lambda expression", span="237-237", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_184 [label="Entry lambda expression", span="242-243", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_185 [label="GetHourlyTimelineStats(connection, ''succeeded'')", span="243-243", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_186 [label="Exit lambda expression", span="242-243", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_191 [label="Entry lambda expression", span="248-249", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_192 [label="GetHourlyTimelineStats(connection, ''failed'')", span="249-249", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_193 [label="Exit lambda expression", span="248-249", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_199 [label="var multi = connection.QueryMultiple(sql, new { id = jobId })", span="262-262", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_197 [label="Entry lambda expression", span="254-291", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_198 [label="string sql = string.Format(@''\r\nselect * from [{0}].Job where Id = @id\r\nselect * from [{0}].JobParameter where JobId = @id\r\nselect * from [{0}].State where JobId = @id order by Id desc'', _storage.GetSchemaName())", span="257-260", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_200 [label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="264-264", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_203 [label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="267-267", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_204 [label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList()", span="268-280", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_201 [label="job == null", span="265-265", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_205 [label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="282-289", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_202 [label="return null;", span="265-265", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_212 [label="Entry lambda expression", span="267-267", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_215 [label="Entry lambda expression", span="267-267", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_218 [label="Entry lambda expression", span="271-279", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_206 [label="Exit lambda expression", span="254-291", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_213 [label="x.Name", span="267-267", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_214 [label="Exit lambda expression", span="267-267", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_216 [label="x.Value", span="267-267", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_217 [label="Exit lambda expression", span="267-267", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_219 [label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            }", span="271-279", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_220 [label="Exit lambda expression", span="271-279", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_226 [label="Entry lambda expression", span="296-297", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_227 [label="GetNumberOfJobsByStateName(connection, SucceededState.StateName)", span="297-297", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_228 [label="Exit lambda expression", span="296-297", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_232 [label="Entry lambda expression", span="302-303", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_233 [label="GetNumberOfJobsByStateName(connection, DeletedState.StateName)", span="303-303", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_234 [label="Exit lambda expression", span="302-303", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_245 [label="var multi = connection.QueryMultiple(sql)", span="330-330", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_243 [label="Entry lambda expression", span="327-345", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_258 [label="Entry lambda expression", span="348-348", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_244 [label="var stats = new StatisticsDto()", span="329-329", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_246 [label="stats.Enqueued = multi.Read<int>().Single()", span="332-332", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_247 [label="stats.Failed = multi.Read<int>().Single()", span="333-333", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_248 [label="stats.Processing = multi.Read<int>().Single()", span="334-334", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_249 [label="stats.Scheduled = multi.Read<int>().Single()", span="335-335", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_250 [label="stats.Servers = multi.Read<int>().Single()", span="337-337", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_251 [label="stats.Succeeded = multi.Read<long?>().SingleOrDefault() ?? 0", span="339-339", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_252 [label="stats.Deleted = multi.Read<long?>().SingleOrDefault() ?? 0", span="340-340", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_253 [label="stats.Recurring = multi.Read<int>().Single()", span="342-342", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_254 [label="return stats;", span="344-344", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_255 [label="Exit lambda expression", span="327-345", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_259 [label="x.GetJobQueueMonitoringApi().GetQueues()", span="348-348", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_260 [label="Exit lambda expression", span="348-348", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_275 [label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="366-366", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_274 [label="Entry lambda expression", span="366-366", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_279 [label="Entry lambda expression", span="366-366", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_276 [label="Exit lambda expression", span="366-366", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_280 [label=x, span="366-366", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_281 [label="Exit lambda expression", span="366-366", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_294 [label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd''))", span="383-383", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_293 [label="Entry lambda expression", span="383-383", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_296 [label="Entry lambda expression", span="383-383", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_295 [label="Exit lambda expression", span="383-383", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_297 [label=x, span="383-383", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_298 [label="Exit lambda expression", span="383-383", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_318 [label="Entry lambda expression", span="398-398", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_321 [label="Entry lambda expression", span="398-398", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_319 [label="(string)x.Key", span="398-398", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_320 [label="Exit lambda expression", span="398-398", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_322 [label="(long)x.Count", span="398-398", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_323 [label="Exit lambda expression", span="398-398", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_338 [label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", span="445-452", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_339 [label="Exit lambda expression", span="445-452", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m7_92 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="BackgroundJobServerOptions.cs"];
m7_89 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="BackgroundJobServerOptions.cs"];
m7_317 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="BackgroundJobServerOptions.cs"];
m7_22 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="58-58", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="BackgroundJobServerOptions.cs"];
m7_23 [label="var queueApi = GetQueueApi(queue)", span="60-60", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="BackgroundJobServerOptions.cs"];
m7_24 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="61-61", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="BackgroundJobServerOptions.cs"];
m7_25 [label="return counters.FetchedCount ?? 0;", span="63-63", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="BackgroundJobServerOptions.cs"];
m7_26 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="58-58", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="BackgroundJobServerOptions.cs"];
m7_371 [label="Entry Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22", cluster="Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="BackgroundJobServerOptions.cs"];
m7_61 [label="Entry Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="BackgroundJobServerOptions.cs"];
m7_277 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)", file="BackgroundJobServerOptions.cs"];
m7_104 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="163-163", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_105 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }));", span="165-178", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_106 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="163-163", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_139 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="BackgroundJobServerOptions.cs"];
m7_21 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="25-25", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="BackgroundJobServerOptions.cs"];
m7_124 [label="Entry Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7", cluster="Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="BackgroundJobServerOptions.cs"];
m7_180 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="530-530", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="BackgroundJobServerOptions.cs"];
m7_372 [label="string fetchedJobsSql = string.Format(@''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{0}].Job j\r\nleft join [{0}].State s on s.Id = j.StateId\r\nwhere j.Id in @jobIds'', _storage.GetSchemaName())", span="534-538", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="BackgroundJobServerOptions.cs"];
m7_373 [label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="540-543", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="BackgroundJobServerOptions.cs"];
m7_374 [label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="545-545", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="BackgroundJobServerOptions.cs"];
m7_375 [label=jobs, span="547-547", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="BackgroundJobServerOptions.cs"];
m7_376 [label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                    }))", span="549-555", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="BackgroundJobServerOptions.cs"];
m7_377 [label="return new JobList<FetchedJobDto>(result);", span="558-558", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="BackgroundJobServerOptions.cs"];
m7_378 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="530-530", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="BackgroundJobServerOptions.cs"];
m7_380 [label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span="", cluster="KeyValuePair<string, FetchedJobDto>.cstr", file="BackgroundJobServerOptions.cs"];
m7_194 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="252-252", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="BackgroundJobServerOptions.cs"];
m7_195 [label="return UseConnection(connection =>\r\n            {\r\n\r\n                string sql = string.Format(@''\r\nselect * from [{0}].Job where Id = @id\r\nselect * from [{0}].JobParameter where JobId = @id\r\nselect * from [{0}].State where JobId = @id order by Id desc'', _storage.GetSchemaName());\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="254-291", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="BackgroundJobServerOptions.cs"];
m7_196 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="252-252", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="BackgroundJobServerOptions.cs"];
m7_313 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="BackgroundJobServerOptions.cs"];
m7_7 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="BackgroundJobServerOptions.cs"];
m7_8 [label="HangFire.BackgroundJobServerOptions", span="", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="BackgroundJobServerOptions.cs"];
m7_9 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="44-44", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="BackgroundJobServerOptions.cs"];
m7_170 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="428-428", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="BackgroundJobServerOptions.cs"];
m7_332 [label="string enqueuedJobsSql = string.Format(@''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{0}].Job j\r\nleft join [{0}].State s on s.Id = j.StateId\r\nwhere j.Id in @jobIds'', _storage.GetSchemaName())", span="432-436", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="BackgroundJobServerOptions.cs"];
m7_333 [label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="438-441", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="BackgroundJobServerOptions.cs"];
m7_334 [label="return DeserializeJobs(\r\n                jobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", span="443-452", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="BackgroundJobServerOptions.cs"];
m7_335 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="428-428", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="BackgroundJobServerOptions.cs"];
m7_315 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="BackgroundJobServerOptions.cs"];
m7_223 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="294-294", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="BackgroundJobServerOptions.cs"];
m7_224 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", span="296-297", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="BackgroundJobServerOptions.cs"];
m7_225 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="294-294", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="BackgroundJobServerOptions.cs"];
m7_51 [label="Entry Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73", cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="BackgroundJobServerOptions.cs"];
m7_340 [label="Entry Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="BackgroundJobServerOptions.cs"];
m7_379 [label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span="", cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", file="BackgroundJobServerOptions.cs"];
m7_272 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="BackgroundJobServerOptions.cs"];
m7_93 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="145-145", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_94 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }));", span="147-160", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_95 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="145-145", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_345 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="469-469", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="BackgroundJobServerOptions.cs"];
m7_346 [label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="471-471", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="BackgroundJobServerOptions.cs"];
m7_347 [label="data.Arguments = arguments", span="472-472", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="BackgroundJobServerOptions.cs"];
m7_348 [label="return data.Deserialize();", span="476-476", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="BackgroundJobServerOptions.cs"];
m7_349 [label=JobLoadException, span="478-478", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="BackgroundJobServerOptions.cs"];
m7_350 [label="return null;", span="480-480", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="BackgroundJobServerOptions.cs"];
m7_351 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="469-469", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="BackgroundJobServerOptions.cs"];
m7_75 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="118-118", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="BackgroundJobServerOptions.cs"];
m7_76 [label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    string.Format(@''select * from [{0}].Server'', _storage.GetSchemaName()))\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="120-142", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="BackgroundJobServerOptions.cs"];
m7_77 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="118-118", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="BackgroundJobServerOptions.cs"];
m7_207 [label="Entry Unk.QueryMultiple", span="", cluster="Unk.QueryMultiple", file="BackgroundJobServerOptions.cs"];
m7_20 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="415-415", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="BackgroundJobServerOptions.cs"];
m7_324 [label="var provider = _storage.QueueProviders.GetProvider(queueName)", span="417-417", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="BackgroundJobServerOptions.cs"];
m7_325 [label="var monitoringApi = provider.GetJobQueueMonitoringApi()", span="418-418", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="BackgroundJobServerOptions.cs"];
m7_326 [label="return monitoringApi;", span="420-420", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="BackgroundJobServerOptions.cs"];
m7_327 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="415-415", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="BackgroundJobServerOptions.cs"];
m7_39 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="78-78", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_40 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }));", span="80-89", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_41 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="78-78", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_52 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="92-92", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_53 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }));", span="94-103", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_54 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="92-92", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="BackgroundJobServerOptions.cs"];
m7_210 [label="Entry Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22", cluster="Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="BackgroundJobServerOptions.cs"];
m7_69 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="112-112", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="BackgroundJobServerOptions.cs"];
m7_70 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="114-115", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="BackgroundJobServerOptions.cs"];
m7_71 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="112-112", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="BackgroundJobServerOptions.cs"];
m7_181 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="240-240", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="BackgroundJobServerOptions.cs"];
m7_182 [label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="242-243", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="BackgroundJobServerOptions.cs"];
m7_183 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="240-240", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="BackgroundJobServerOptions.cs"];
m7_278 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="BackgroundJobServerOptions.cs"];
m7_328 [label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53", cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="BackgroundJobServerOptions.cs"];
m7_136 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany", file="BackgroundJobServerOptions.cs"];
m7_209 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="BackgroundJobServerOptions.cs"];
m7_88 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="BackgroundJobServerOptions.cs"];
m7_87 [label="Entry Hangfire.SqlServer.SqlServerStorage.GetSchemaName()", span="238-238", cluster="Hangfire.SqlServer.SqlServerStorage.GetSchemaName()", file="BackgroundJobServerOptions.cs"];
m7_78 [label="Entry Unk.>", span="", cluster="Unk.>", file="BackgroundJobServerOptions.cs"];
m7_140 [label="Entry Unk.GetEnqueuedJobIds", span="", cluster="Unk.GetEnqueuedJobIds", file="BackgroundJobServerOptions.cs"];
m7_103 [label="Entry Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", span="84-84", cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", file="BackgroundJobServerOptions.cs"];
m7_137 [label="Entry Unk.OrderBy", span="", cluster="Unk.OrderBy", file="BackgroundJobServerOptions.cs"];
m7_141 [label="Entry Unk.GetEnqueuedAndFetchedCount", span="", cluster="Unk.GetEnqueuedAndFetchedCount", file="BackgroundJobServerOptions.cs"];
m7_15 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="50-50", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="BackgroundJobServerOptions.cs"];
m7_16 [label="var queueApi = GetQueueApi(queue)", span="52-52", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="BackgroundJobServerOptions.cs"];
m7_17 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="53-53", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="BackgroundJobServerOptions.cs"];
m7_18 [label="return counters.EnqueuedCount ?? 0;", span="55-55", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="BackgroundJobServerOptions.cs"];
m7_19 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="50-50", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="BackgroundJobServerOptions.cs"];
m7_150 [label="Entry Unk.GetQueues", span="", cluster="Unk.GetQueues", file="BackgroundJobServerOptions.cs"];
m7_62 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="106-106", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="BackgroundJobServerOptions.cs"];
m7_63 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="108-109", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="BackgroundJobServerOptions.cs"];
m7_64 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="106-106", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="BackgroundJobServerOptions.cs"];
m7_316 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="BackgroundJobServerOptions.cs"];
m7_68 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_282 [label="var endDate = DateTime.UtcNow.Date", span="375-375", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_289 [label="var keyMaps = dates.ToDictionary(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd'')), x => x)", span="383-383", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_290 [label="return GetTimelineStats(connection, keyMaps);", span="385-385", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_283 [label="var dates = new List<DateTime>()", span="376-376", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_286 [label="dates.Add(endDate)", span="379-379", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_287 [label="endDate = endDate.AddDays(-1)", span="380-380", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_284 [label="var i = 0", span="377-377", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_285 [label="i < 7", span="377-377", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_288 [label="i++", span="377-377", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_291 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="BackgroundJobServerOptions.cs"];
m7_256 [label="Entry Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18", cluster="Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="BackgroundJobServerOptions.cs"];
m7_49 [label="Entry Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="BackgroundJobServerOptions.cs"];
m7_299 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="388-388", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_300 [label="string sqlQuery = string.Format(@''\r\nselect [Key], [Value] as [Count] from [{0}].AggregatedCounter\r\nwhere [Key] in @keys'', _storage.GetSchemaName())", span="391-393", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_301 [label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keyMaps.Keys })\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="395-398", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_302 [label="keyMaps.Keys", span="400-400", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_307 [label="i < keyMaps.Count", span="406-406", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_308 [label="var value = valuesMap[keyMaps.ElementAt(i).Key]", span="408-408", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_309 [label="result.Add(keyMaps.ElementAt(i).Value, value)", span="409-409", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_303 [label="!valuesMap.ContainsKey(key)", span="402-402", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_304 [label="valuesMap.Add(key, 0)", span="402-402", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_305 [label="var result = new Dictionary<DateTime, long>()", span="405-405", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_306 [label="var i = 0", span="406-406", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_311 [label="return result;", span="412-412", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_310 [label="i++", span="406-406", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_312 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="388-388", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="BackgroundJobServerOptions.cs"];
m7_242 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="BackgroundJobServerOptions.cs"];
m7_135 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="BackgroundJobServerOptions.cs"];
m7_367 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)", file="BackgroundJobServerOptions.cs"];
m7_257 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="BackgroundJobServerOptions.cs"];
m7_161 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="224-224", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="BackgroundJobServerOptions.cs"];
m7_162 [label="var queueApi = GetQueueApi(queue)", span="226-226", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="BackgroundJobServerOptions.cs"];
m7_163 [label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="227-227", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="BackgroundJobServerOptions.cs"];
m7_164 [label="return UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds));", span="229-229", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="BackgroundJobServerOptions.cs"];
m7_165 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="224-224", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="BackgroundJobServerOptions.cs"];
m7_208 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="BackgroundJobServerOptions.cs"];
m7_33 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="72-72", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="BackgroundJobServerOptions.cs"];
m7_34 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="74-75", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="BackgroundJobServerOptions.cs"];
m7_35 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="72-72", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="BackgroundJobServerOptions.cs"];
m7_211 [label="Entry Unk.DeserializeJob", span="", cluster="Unk.DeserializeJob", file="BackgroundJobServerOptions.cs"];
m7_383 [label="Hangfire.SqlServer.SqlServerMonitoringApi", span="", file="BackgroundJobServerOptions.cs"];
m7_384 [label=int, span="", file="BackgroundJobServerOptions.cs"];
m7_385 [label=int, span="", file="BackgroundJobServerOptions.cs"];
m7_386 [label=int, span="", file="BackgroundJobServerOptions.cs"];
m7_387 [label=int, span="", file="BackgroundJobServerOptions.cs"];
m7_388 [label=int, span="", file="BackgroundJobServerOptions.cs"];
m7_389 [label=int, span="", file="BackgroundJobServerOptions.cs"];
m7_390 [label=int, span="", file="BackgroundJobServerOptions.cs"];
}
