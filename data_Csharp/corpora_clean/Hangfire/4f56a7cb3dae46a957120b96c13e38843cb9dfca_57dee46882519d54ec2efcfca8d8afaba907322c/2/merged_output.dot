digraph  {
m0_111 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchJobs_FromMultipleQueues()", file="FetcherFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchJobs_FromMultipleQueues()", span="214-214"];
m0_112 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchJobs_FromMultipleQueues()", file="FetcherFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="216-220"];
m0_113 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchJobs_FromMultipleQueues()", color=green, community=0, file="FetcherFacts.cs", label="1: UseConnections((connection, storageConnection) =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    });\r\n\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                var critical = (SqlServerFetchedJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(critical.JobId);\r\n                Assert.Equal(''critical'', critical.Queue);\r\n\r\n                var @default = (SqlServerFetchedJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(@default.JobId);\r\n                Assert.Equal(''default'', @default.Queue);\r\n            })", span="222-247"];
m0_114 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchJobs_FromMultipleQueues()", file="FetcherFacts.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchJobs_FromMultipleQueues()", span="214-214"];
m0_76 [cluster="System.DateTime.AddMinutes(double)", file="FetcherFacts.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m0_3 [cluster="Unk.UseConnection", file="FetcherFacts.cs", label="Entry Unk.UseConnection", span=""];
m0_9 [cluster="Unk.Equal", file="FetcherFacts.cs", label="Entry Unk.Equal", span=""];
m0_0 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldThrowAnException_WhenQueuesCollectionIsNull()", file="FetcherFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldThrowAnException_WhenQueuesCollectionIsNull()", span="16-16"];
m0_1 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldThrowAnException_WhenQueuesCollectionIsNull()", color=green, community=0, file="FetcherFacts.cs", label="1: UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.FetchNextJob(null, CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", span="18-24"];
m0_2 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldThrowAnException_WhenQueuesCollectionIsNull()", file="FetcherFacts.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldThrowAnException_WhenQueuesCollectionIsNull()", span="16-16"];
m0_34 [cluster="System.Threading.CancellationTokenSource.Cancel()", file="FetcherFacts.cs", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
m0_125 [cluster="Unk.CreateJobQueue", file="FetcherFacts.cs", label="Entry Unk.CreateJobQueue", span=""];
m0_45 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(int)", file="FetcherFacts.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(int)", span="0-0"];
m0_129 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", file="FetcherFacts.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", span="0-0"];
m0_8 [cluster="Unk.>", file="FetcherFacts.cs", label="Entry Unk.>", span=""];
m0_15 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="FetcherFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="28-28"];
m0_16 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", color=green, community=0, file="FetcherFacts.cs", label="0: UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentException>(\r\n                    () => connection.FetchNextJob(new string[0], CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", span="30-36"];
m0_17 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="FetcherFacts.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="28-28"];
m0_25 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="FetcherFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="40-40"];
m0_26 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", color=green, community=0, file="FetcherFacts.cs", label="1: UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource();\r\n                cts.Cancel();\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => connection.FetchNextJob(DefaultQueues, cts.Token));\r\n            })", span="42-49"];
m0_27 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="FetcherFacts.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="40-40"];
m0_130 [cluster="System.TimeSpan.FromSeconds(double)", file="FetcherFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m0_38 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="FetcherFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="53-53"];
m0_39 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldWaitIndefinitely_WhenThereAreNoJobs()", color=green, community=0, file="FetcherFacts.cs", label="1: UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource(200);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => connection.FetchNextJob(DefaultQueues, cts.Token));\r\n            })", span="55-61"];
m0_40 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="FetcherFacts.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="53-53"];
m0_87 [cluster="System.DateTime.AddDays(double)", file="FetcherFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m0_49 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchAJob_FromTheSpecifiedQueue()", file="FetcherFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchAJob_FromTheSpecifiedQueue()", span="65-65"];
m0_50 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchAJob_FromTheSpecifiedQueue()", color=green, community=0, file="FetcherFacts.cs", label="1: string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@jobId, @queue)''", span="67-69"];
m0_51 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchAJob_FromTheSpecifiedQueue()", color=green, community=0, file="FetcherFacts.cs", label="1: UseConnections((connection, storageConnection) =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        jobId = 1,\r\n                        queue = ''default''\r\n                    });\r\n\r\n                // Act\r\n                var payload = (SqlServerFetchedJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.Equal(''1'', payload.JobId);\r\n                Assert.Equal(''default'', payload.Queue);\r\n            })", span="72-90"];
m0_52 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchAJob_FromTheSpecifiedQueue()", file="FetcherFacts.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchAJob_FromTheSpecifiedQueue()", span="65-65"];
m0_74 [cluster="Unk.NotNull", file="FetcherFacts.cs", label="Entry Unk.NotNull", span=""];
m0_89 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="FetcherFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="159-159"];
m0_90 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldSetFetchedAt_OnlyForTheFetchedJob()", color=green, community=0, file="FetcherFacts.cs", label="1: string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="161-165"];
m0_91 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldSetFetchedAt_OnlyForTheFetchedJob()", color=green, community=0, file="FetcherFacts.cs", label="1: UseConnections((connection, storageConnection) =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    });\r\n                // Act\r\n                var payload = storageConnection.FetchNextJob(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.Null(otherJobFetchedAt);\r\n            })", span="168-188"];
m0_92 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="FetcherFacts.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="159-159"];
m0_14 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="FetcherFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="61-61"];
m0_78 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="FetcherFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", span="127-127"];
m0_79 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", color=green, community=0, file="FetcherFacts.cs", label="0: string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue, FetchedAt)\r\nvalues (scope_identity(), @queue, @fetchedAt)''", span="129-133"];
m0_80 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", color=green, community=0, file="FetcherFacts.cs", label="1: UseConnections((connection, storageConnection) =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    });\r\n\r\n                // Act\r\n                var payload = storageConnection.FetchNextJob(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotEmpty(payload.JobId);\r\n            })", span="136-155"];
m0_81 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="FetcherFacts.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", span="127-127"];
m0_99 [cluster="Unk.Null", file="FetcherFacts.cs", label="Entry Unk.Null", span=""];
m0_33 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="FetcherFacts.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m0_61 [cluster="Unk.Dequeue", file="FetcherFacts.cs", label="Entry Unk.Dequeue", span=""];
m0_53 [cluster="Unk.UseConnections", file="FetcherFacts.cs", label="Entry Unk.UseConnections", span=""];
m0_46 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="60-60"];
m0_4 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="18-24"];
m0_5 [cluster="lambda expression", color=green, community=1, file="FetcherFacts.cs", label="0: var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.FetchNextJob(null, CreateTimingOutCancellationToken()))", span="20-21"];
m0_6 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="0: Assert.Equal(''queues'', exception.ParamName)", span="23-23"];
m0_10 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="21-21"];
m0_11 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="1: connection.FetchNextJob(null, CreateTimingOutCancellationToken())", span="21-21"];
m0_12 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="21-21"];
m0_7 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="18-24"];
m0_18 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="30-36"];
m0_19 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="0: var exception = Assert.Throws<ArgumentException>(\r\n                    () => connection.FetchNextJob(new string[0], CreateTimingOutCancellationToken()))", span="32-33"];
m0_20 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="1: Assert.Equal(''queues'', exception.ParamName)", span="35-35"];
m0_22 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="33-33"];
m0_23 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="1: connection.FetchNextJob(new string[0], CreateTimingOutCancellationToken())", span="33-33"];
m0_24 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="33-33"];
m0_21 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="30-36"];
m0_28 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="42-49"];
m0_41 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="55-61"];
m0_55 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="0: connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        jobId = 1,\r\n                        queue = ''default''\r\n                    })", span="74-80"];
m0_54 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="72-90"];
m0_56 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="0: var payload = (SqlServerFetchedJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="83-85"];
m0_57 [cluster="lambda expression", file="FetcherFacts.cs", label="Assert.Equal(''1'', payload.JobId)", span="88-88"];
m0_58 [cluster="lambda expression", file="FetcherFacts.cs", label="Assert.Equal(''default'', payload.Queue)", span="89-89"];
m0_67 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="0: connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' })", span="105-107"];
m0_66 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="103-123"];
m0_68 [cluster="lambda expression", file="FetcherFacts.cs", label="var payload = storageConnection.FetchNextJob(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="110-112"];
m0_83 [cluster="lambda expression", file="FetcherFacts.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    })", span="138-146"];
m0_82 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="136-155"];
m0_85 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="1: Assert.NotEmpty(payload.JobId)", span="154-154"];
m0_84 [cluster="lambda expression", file="FetcherFacts.cs", label="var payload = storageConnection.FetchNextJob(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="149-151"];
m0_86 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="136-155"];
m0_94 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="0: connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    })", span="170-176"];
m0_93 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="168-188"];
m0_95 [cluster="lambda expression", file="FetcherFacts.cs", label="var payload = storageConnection.FetchNextJob(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="178-180"];
m0_97 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="0: Assert.Null(otherJobFetchedAt)", span="187-187"];
m0_96 [cluster="lambda expression", file="FetcherFacts.cs", label="var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single()", span="183-185"];
m0_98 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="168-188"];
m0_105 [cluster="lambda expression", file="FetcherFacts.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' })", span="202-204"];
m0_104 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="200-210"];
m0_106 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="0: Assert.Throws<OperationCanceledException>(\r\n                    () => storageConnection.FetchNextJob(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()))", span="206-209"];
m0_107 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="200-210"];
m0_108 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="207-209"];
m0_109 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="0: storageConnection.FetchNextJob(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken())", span="207-209"];
m0_110 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="207-209"];
m0_115 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="222-247"];
m0_116 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="1: connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    })", span="224-230"];
m0_117 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="0: var queue = CreateJobQueue(connection)", span="232-232"];
m0_118 [cluster="lambda expression", file="FetcherFacts.cs", label="var critical = (SqlServerFetchedJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="234-236"];
m0_121 [cluster="lambda expression", file="FetcherFacts.cs", label="var @default = (SqlServerFetchedJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="241-243"];
m0_120 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="1: Assert.Equal(''critical'', critical.Queue)", span="239-239"];
m0_119 [cluster="lambda expression", file="FetcherFacts.cs", label="Assert.NotNull(critical.JobId)", span="238-238"];
m0_123 [cluster="lambda expression", color=green, community=0, file="FetcherFacts.cs", label="0: Assert.Equal(''default'', @default.Queue)", span="246-246"];
m0_122 [cluster="lambda expression", file="FetcherFacts.cs", label="Assert.NotNull(@default.JobId)", span="245-245"];
m0_124 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="222-247"];
m0_31 [cluster="lambda expression", file="FetcherFacts.cs", label="Assert.Throws<OperationCanceledException>(\r\n                    () => connection.FetchNextJob(DefaultQueues, cts.Token))", span="47-48"];
m0_43 [cluster="lambda expression", file="FetcherFacts.cs", label="Assert.Throws<OperationCanceledException>(\r\n                    () => connection.FetchNextJob(DefaultQueues, cts.Token))", span="59-60"];
m0_70 [cluster="lambda expression", file="FetcherFacts.cs", label="var fetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId = @id'',\r\n                    new { id = payload.JobId }).Single()", span="117-119"];
m0_36 [cluster="lambda expression", file="FetcherFacts.cs", label="connection.FetchNextJob(DefaultQueues, cts.Token)", span="48-48"];
m0_47 [cluster="lambda expression", file="FetcherFacts.cs", label="connection.FetchNextJob(DefaultQueues, cts.Token)", span="60-60"];
m0_32 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="42-49"];
m0_29 [cluster="lambda expression", file="FetcherFacts.cs", label="var cts = new CancellationTokenSource()", span="44-44"];
m0_44 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="55-61"];
m0_42 [cluster="lambda expression", file="FetcherFacts.cs", label="var cts = new CancellationTokenSource(200)", span="57-57"];
m0_59 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="72-90"];
m0_73 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="103-123"];
m0_69 [cluster="lambda expression", file="FetcherFacts.cs", label="Assert.NotNull(payload)", span="115-115"];
m0_30 [cluster="lambda expression", file="FetcherFacts.cs", label="cts.Cancel()", span="45-45"];
m0_35 [cluster="lambda expression", file="FetcherFacts.cs", label="Entry lambda expression", span="48-48"];
m0_71 [cluster="lambda expression", file="FetcherFacts.cs", label="Assert.NotNull(fetchedAt)", span="121-121"];
m0_72 [cluster="lambda expression", file="FetcherFacts.cs", label="Assert.True(fetchedAt > DateTime.UtcNow.AddMinutes(-1))", span="122-122"];
m0_37 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="48-48"];
m0_48 [cluster="lambda expression", file="FetcherFacts.cs", label="Exit lambda expression", span="60-60"];
m0_88 [cluster="Unk.NotEmpty", file="FetcherFacts.cs", label="Entry Unk.NotEmpty", span=""];
m0_75 [cluster="Unk.Single", file="FetcherFacts.cs", label="Entry Unk.Single", span=""];
m0_13 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateTimingOutCancellationToken()", file="FetcherFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateTimingOutCancellationToken()", span="250-250"];
m0_126 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateTimingOutCancellationToken()", file="FetcherFacts.cs", label="var source = new CancellationTokenSource(TimeSpan.FromSeconds(10))", span="252-252"];
m0_127 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateTimingOutCancellationToken()", file="FetcherFacts.cs", label="return source.Token;", span="253-253"];
m0_128 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateTimingOutCancellationToken()", file="FetcherFacts.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateTimingOutCancellationToken()", span="250-250"];
m0_100 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="FetcherFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="192-192"];
m0_101 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchJobs_OnlyFromSpecifiedQueues()", color=green, community=0, file="FetcherFacts.cs", label="1: string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="194-198"];
m0_102 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchJobs_OnlyFromSpecifiedQueues()", color=green, community=0, file="FetcherFacts.cs", label="1: UseConnections((connection, storageConnection) =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' });\r\n                \r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => storageConnection.FetchNextJob(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()));\r\n            })", span="200-210"];
m0_103 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="FetcherFacts.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="192-192"];
m0_77 [cluster="Unk.True", file="FetcherFacts.cs", label="Entry Unk.True", span=""];
m0_60 [cluster="Unk.Execute", file="FetcherFacts.cs", label="Entry Unk.Execute", span=""];
m0_62 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="FetcherFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", span="94-94"];
m0_63 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", color=green, community=0, file="FetcherFacts.cs", label="1: string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="96-100"];
m0_64 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", color=green, community=0, file="FetcherFacts.cs", label="0: UseConnections((connection, storageConnection) =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' });\r\n\r\n                // Act\r\n                var payload = storageConnection.FetchNextJob(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotNull(payload);\r\n\r\n                var fetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId = @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.NotNull(fetchedAt);\r\n                Assert.True(fetchedAt > DateTime.UtcNow.AddMinutes(-1));\r\n            })", span="103-123"];
m0_65 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="FetcherFacts.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.FetchNextJob_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", span="94-94"];
m0_133 [file="FetcherFacts.cs", label="HangFire.SqlServer.Tests.ConnectionFacts", span=""];
m0_134 [file="FetcherFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m0_135 [file="FetcherFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m0_140 [file="FetcherFacts.cs", label=arrangeSql, span=""];
m0_141 [file="FetcherFacts.cs", label=arrangeSql, span=""];
m0_143 [file="FetcherFacts.cs", label=arrangeSql, span=""];
m0_145 [file="FetcherFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m0_146 [file="FetcherFacts.cs", label=arrangeSql, span=""];
m0_142 [file="FetcherFacts.cs", label=arrangeSql, span=""];
m0_144 [file="FetcherFacts.cs", label=arrangeSql, span=""];
m0_136 [file="FetcherFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m0_137 [file="FetcherFacts.cs", label=cts, span=""];
m0_138 [file="FetcherFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m0_139 [file="FetcherFacts.cs", label=cts, span=""];
m2_10 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", file="MessageQueueJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", span="21-21"];
m2_11 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: var actions = new Queue<Action<SqlConnection>>()", span="24-24"];
m2_12 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: var queue = CreateQueue()", span="25-25"];
m2_13 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="1: queue.Enqueue(actions, ''my-queue'', ''job-id'')", span="28-28"];
m2_14 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: actions", span="30-30"];
m2_15 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: action(ConnectionUtils.CreateConnection())", span="32-32"];
m2_16 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: var messageQueue = CleanMsmqQueueAttribute.GetMessageQueue(''my-queue'')", span="36-36"];
m2_17 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: var transaction = new MessageQueueTransaction()", span="37-37"];
m2_19 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: var message = messageQueue.Receive(TimeSpan.FromSeconds(5), transaction)", span="41-41"];
m2_18 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: transaction.Begin()", span="39-39"];
m2_23 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="1: transaction.Commit()", span="47-47"];
m2_20 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: message.Formatter = new BinaryMessageFormatter()", span="42-42"];
m2_22 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="1: Assert.Equal(''job-id'', message.Label)", span="45-45"];
m2_21 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="1: Assert.Equal(''job-id'', message.Body)", span="44-44"];
m2_24 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", file="MessageQueueJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Enqueue_AddsAction_ThatSendsTheJobId()", span="21-21"];
m2_34 [cluster="Unk.Receive", file="MessageQueueJobQueueFacts.cs", label="Entry Unk.Receive", span=""];
m2_35 [cluster="BinaryMessageFormatter.cstr", file="MessageQueueJobQueueFacts.cs", label="Entry BinaryMessageFormatter.cstr", span=""];
m2_37 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", file="MessageQueueJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", span="52-52"];
m2_38 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: EnqueueJobId(''my-queue'', ''job-id'')", span="54-54"];
m2_39 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: var queue = CreateQueue()", span="55-55"];
m2_40 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="1: var token = new CancellationToken()", span="56-56"];
m2_41 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, token)", span="58-58"];
m2_42 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: Assert.Equal(''job-id'', fetchedJob.JobId)", span="60-60"];
m2_43 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", file="MessageQueueJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", span="52-52"];
m2_5 [cluster="Unk.Equal", file="MessageQueueJobQueueFacts.cs", label="Entry Unk.Equal", span=""];
m2_26 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.CreateQueue()", file="MessageQueueJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.CreateQueue()", span="75-75"];
m2_56 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.CreateQueue()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: return new MessageQueueJobQueue(CleanMsmqQueueAttribute.PathPattern);", span="77-77"];
m2_57 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.CreateQueue()", file="MessageQueueJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.CreateQueue()", span="75-75"];
m2_45 [cluster="System.Threading.CancellationToken.CancellationToken()", file="MessageQueueJobQueueFacts.cs", label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0"];
m2_58 [cluster="MessageQueueJobQueue.cstr", file="MessageQueueJobQueueFacts.cs", label="Entry MessageQueueJobQueue.cstr", span=""];
m2_32 [cluster="Unk.Begin", file="MessageQueueJobQueueFacts.cs", label="Entry Unk.Begin", span=""];
m2_46 [cluster="HangFire.SqlServer.MessageQueueJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="MessageQueueJobQueueFacts.cs", label="Entry HangFire.SqlServer.MessageQueueJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="41-41"];
m2_4 [cluster="Unk.>", file="MessageQueueJobQueueFacts.cs", label="Entry Unk.>", span=""];
m2_0 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", file="MessageQueueJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", span="12-12"];
m2_1 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="1: var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new MessageQueueJobQueue(null))", span="14-15"];
m2_2 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="1: Assert.Equal(''pathPattern'', exception.ParamName)", span="17-17"];
m2_3 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", file="MessageQueueJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", span="12-12"];
m2_27 [cluster="HangFire.SqlServer.MessageQueueJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)", file="MessageQueueJobQueueFacts.cs", label="Entry HangFire.SqlServer.MessageQueueJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)", span="87-87"];
m2_33 [cluster="System.TimeSpan.FromSeconds(double)", file="MessageQueueJobQueueFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m2_29 [cluster="System.Action<T>.Invoke(T)", file="MessageQueueJobQueueFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m2_30 [cluster="Unk.GetMessageQueue", file="MessageQueueJobQueueFacts.cs", label="Entry Unk.GetMessageQueue", span=""];
m2_25 [cluster="System.Collections.Generic.Queue<T>.Queue()", file="MessageQueueJobQueueFacts.cs", label="Entry System.Collections.Generic.Queue<T>.Queue()", span="0-0"];
m2_44 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.EnqueueJobId(string, string)", file="MessageQueueJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.EnqueueJobId(string, string)", span="63-63"];
m2_47 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.EnqueueJobId(string, string)", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: var messageQueue = CleanMsmqQueueAttribute.GetMessageQueue(queue)", span="65-65"];
m2_48 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.EnqueueJobId(string, string)", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="1: var message = new Message { Body = jobId, Label = jobId, Formatter = new BinaryMessageFormatter() }", span="66-66"];
m2_51 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.EnqueueJobId(string, string)", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="1: messageQueue.Send(message, transaction)", span="70-70"];
m2_49 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.EnqueueJobId(string, string)", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="1: var transaction = new MessageQueueTransaction()", span="67-67"];
m2_50 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.EnqueueJobId(string, string)", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="1: transaction.Begin()", span="69-69"];
m2_52 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.EnqueueJobId(string, string)", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="1: transaction.Commit()", span="71-71"];
m2_53 [cluster="HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.EnqueueJobId(string, string)", file="MessageQueueJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.MessageQueueJobQueueFacts.EnqueueJobId(string, string)", span="63-63"];
m2_54 [cluster="Message.cstr", file="MessageQueueJobQueueFacts.cs", label="Entry Message.cstr", span=""];
m2_6 [cluster="lambda expression", file="MessageQueueJobQueueFacts.cs", label="Entry lambda expression", span="15-15"];
m2_7 [cluster="lambda expression", color=green, community=0, file="MessageQueueJobQueueFacts.cs", label="0: new MessageQueueJobQueue(null)", span="15-15"];
m2_8 [cluster="lambda expression", file="MessageQueueJobQueueFacts.cs", label="Exit lambda expression", span="15-15"];
m2_9 [cluster="HangFire.SqlServer.MessageQueueJobQueue.MessageQueueJobQueue(string)", file="MessageQueueJobQueueFacts.cs", label="Entry HangFire.SqlServer.MessageQueueJobQueue.MessageQueueJobQueue(string)", span="33-33"];
m2_55 [cluster="Unk.Send", file="MessageQueueJobQueueFacts.cs", label="Entry Unk.Send", span=""];
m2_36 [cluster="Unk.Commit", file="MessageQueueJobQueueFacts.cs", label="Entry Unk.Commit", span=""];
m2_28 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="MessageQueueJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m2_31 [cluster="MessageQueueTransaction.cstr", file="MessageQueueJobQueueFacts.cs", label="Entry MessageQueueTransaction.cstr", span=""];
m4_15 [cluster="HangFire.JobHelper.ToTimestamp(System.DateTime)", file="RedisFetchedJobFacts.cs", label="Entry HangFire.JobHelper.ToTimestamp(System.DateTime)", span="40-40"];
m4_6 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisFetchedJobFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m4_0 [cluster="HangFire.States.ProcessingState.ProcessingState(string, string)", file="RedisFetchedJobFacts.cs", label="Entry HangFire.States.ProcessingState.ProcessingState(string, string)", span="10-10"];
m4_1 [cluster="HangFire.States.ProcessingState.ProcessingState(string, string)", color=green, community=0, file="RedisFetchedJobFacts.cs", label="0: ServerName = serverName", span="13-13"];
m4_2 [cluster="HangFire.States.ProcessingState.ProcessingState(string, string)", file="RedisFetchedJobFacts.cs", label="Exit HangFire.States.ProcessingState.ProcessingState(string, string)", span="10-10"];
m4_8 [cluster="HangFire.States.ProcessingState.Apply(IRedisTransaction, string)", file="RedisFetchedJobFacts.cs", label="Entry HangFire.States.ProcessingState.Apply(IRedisTransaction, string)", span="29-29"];
m4_9 [cluster="HangFire.States.ProcessingState.Apply(IRedisTransaction, string)", color=green, community=0, file="RedisFetchedJobFacts.cs", label="0: transaction.QueueCommand(x => x.AddItemToSortedSet(\r\n                ''hangfire:processing'', jobId, JobHelper.ToTimestamp(DateTime.UtcNow)))", span="31-32"];
m4_10 [cluster="HangFire.States.ProcessingState.Apply(IRedisTransaction, string)", file="RedisFetchedJobFacts.cs", label="Exit HangFire.States.ProcessingState.Apply(IRedisTransaction, string)", span="29-29"];
m4_11 [cluster="Unk.QueueCommand", file="RedisFetchedJobFacts.cs", label="Entry Unk.QueueCommand", span=""];
m4_16 [cluster="Unk.AddItemToSortedSet", file="RedisFetchedJobFacts.cs", label="Entry Unk.AddItemToSortedSet", span=""];
m4_17 [cluster="HangFire.States.ProcessingState.Descriptor.Unapply(IRedisTransaction, string)", file="RedisFetchedJobFacts.cs", label="Entry HangFire.States.ProcessingState.Descriptor.Unapply(IRedisTransaction, string)", span="37-37"];
m4_18 [cluster="HangFire.States.ProcessingState.Descriptor.Unapply(IRedisTransaction, string)", color=green, community=0, file="RedisFetchedJobFacts.cs", label="0: transaction.QueueCommand(x => x.RemoveItemFromSortedSet(\r\n                    ''hangfire:processing'', jobId))", span="39-40"];
m4_19 [cluster="HangFire.States.ProcessingState.Descriptor.Unapply(IRedisTransaction, string)", file="RedisFetchedJobFacts.cs", label="Exit HangFire.States.ProcessingState.Descriptor.Unapply(IRedisTransaction, string)", span="37-37"];
m4_3 [cluster="HangFire.States.ProcessingState.GetProperties()", file="RedisFetchedJobFacts.cs", label="Entry HangFire.States.ProcessingState.GetProperties()", span="20-20"];
m4_4 [cluster="HangFire.States.ProcessingState.GetProperties()", color=green, community=0, file="RedisFetchedJobFacts.cs", label="1: return new Dictionary<string, string>\r\n                {\r\n                    { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''ServerName'', ServerName }\r\n                };", span="22-26"];
m4_5 [cluster="HangFire.States.ProcessingState.GetProperties()", file="RedisFetchedJobFacts.cs", label="Exit HangFire.States.ProcessingState.GetProperties()", span="20-20"];
m4_20 [cluster="lambda expression", file="RedisFetchedJobFacts.cs", label="Entry lambda expression", span="39-40"];
m4_12 [cluster="lambda expression", file="RedisFetchedJobFacts.cs", label="Entry lambda expression", span="31-32"];
m4_13 [cluster="lambda expression", color=green, community=0, file="RedisFetchedJobFacts.cs", label="0: x.AddItemToSortedSet(\r\n                ''hangfire:processing'', jobId, JobHelper.ToTimestamp(DateTime.UtcNow))", span="31-32"];
m4_14 [cluster="lambda expression", file="RedisFetchedJobFacts.cs", label="Exit lambda expression", span="31-32"];
m4_21 [cluster="lambda expression", color=green, community=0, file="RedisFetchedJobFacts.cs", label="0: x.RemoveItemFromSortedSet(\r\n                    ''hangfire:processing'', jobId)", span="39-40"];
m4_22 [cluster="lambda expression", file="RedisFetchedJobFacts.cs", label="Exit lambda expression", span="39-40"];
m4_23 [cluster="Unk.RemoveItemFromSortedSet", file="RedisFetchedJobFacts.cs", label="Entry Unk.RemoveItemFromSortedSet", span=""];
m4_7 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="RedisFetchedJobFacts.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="51-51"];
m4_24 [file="RedisFetchedJobFacts.cs", label="HangFire.States.ProcessingState", span=""];
m4_25 [file="RedisFetchedJobFacts.cs", label=string, span=""];
m4_26 [file="RedisFetchedJobFacts.cs", label=string, span=""];
m5_0 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="Entry HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", span="23-23"];
m5_1 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="jobId == null", span="25-25"];
m5_3 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="queue == null", span="26-26"];
m5_5 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="JobId = jobId", span="28-28"];
m5_6 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="Queue = queue", span="29-29"];
m5_2 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="throw new ArgumentNullException(''jobId'');", span="25-25"];
m5_4 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="throw new ArgumentNullException(''queue'');", span="26-26"];
m5_7 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", file="RedisProcessingJob.cs", label="Exit HangFire.Redis.RedisProcessingJob.RedisProcessingJob(string, string)", span="23-23"];
m5_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="RedisProcessingJob.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m5_9 [file="RedisProcessingJob.cs", label="HangFire.Redis.RedisProcessingJob", span=""];
m7_51 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="SqlServerProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="57-57"];
m7_52 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="SqlServerProcessingJobFacts.cs", label="var scheduler = CreateScheduler()", span="59-59"];
m7_53 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="SqlServerProcessingJobFacts.cs", label="scheduler.Execute(_cts.Token)", span="61-61"];
m7_54 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="SqlServerProcessingJobFacts.cs", label="_storage.Verify(x => x.GetConnection())", span="63-63"];
m7_55 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="SqlServerProcessingJobFacts.cs", label="_connection.Verify(x => x.Dispose())", span="64-64"];
m7_56 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="SqlServerProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="57-57"];
m7_16 [cluster="Mock<IStateMachineFactory>.cstr", file="SqlServerProcessingJobFacts.cs", label="Entry Mock<IStateMachineFactory>.cstr", span=""];
m7_39 [cluster="Unk.Equal", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.Equal", span=""];
m7_35 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
m7_36 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerProcessingJobFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan))", span="39-41"];
m7_37 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerProcessingJobFacts.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="43-43"];
m7_38 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
m7_15 [cluster="System.Threading.CancellationTokenSource.Cancel()", file="SqlServerProcessingJobFacts.cs", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
m7_22 [cluster="Unk.>", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.>", span=""];
m7_76 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="SqlServerProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="81-81"];
m7_77 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="SqlServerProcessingJobFacts.cs", label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns((string)null)", span="83-84"];
m7_78 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="SqlServerProcessingJobFacts.cs", label="var scheduler = CreateScheduler()", span="85-85"];
m7_79 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="SqlServerProcessingJobFacts.cs", label="scheduler.Execute(_cts.Token)", span="87-87"];
m7_80 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="SqlServerProcessingJobFacts.cs", label="_stateMachine.Verify(\r\n                x => x.TryToChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>()),\r\n                Times.Never)", span="89-91"];
m7_81 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="SqlServerProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="81-81"];
m7_43 [cluster="SchedulePoller.cstr", file="SqlServerProcessingJobFacts.cs", label="Entry SchedulePoller.cstr", span=""];
m7_44 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="SqlServerProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="47-47"];
m7_45 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="SqlServerProcessingJobFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    _storage.Object, null, Timeout.InfiniteTimeSpan))", span="49-51"];
m7_46 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="SqlServerProcessingJobFacts.cs", label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="53-53"];
m7_47 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="SqlServerProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="47-47"];
m7_31 [cluster="Unk.GetFirstByLowestScoreFromSet", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.GetFirstByLowestScoreFromSet", span=""];
m7_27 [cluster="Unk.GetConnection", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.GetConnection", span=""];
m7_67 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="SqlServerProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="68-68"];
m7_68 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="SqlServerProcessingJobFacts.cs", label="var scheduler = CreateScheduler()", span="70-70"];
m7_69 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="SqlServerProcessingJobFacts.cs", label="scheduler.Execute(_cts.Token)", span="72-72"];
m7_70 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="SqlServerProcessingJobFacts.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName }))", span="74-77"];
m7_71 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="SqlServerProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="68-68"];
m7_17 [cluster="Unk.Setup", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.Setup", span=""];
m7_66 [cluster="Unk.Dispose", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.Dispose", span=""];
m7_14 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="SqlServerProcessingJobFacts.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m7_0 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="SqlServerProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19"];
m7_1 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="1: _storage = new Mock<JobStorage>()", span="21-21"];
m7_2 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="1: _connection = new Mock<IStorageConnection>()", span="22-22"];
m7_3 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="1: _stateMachine = new Mock<IStateMachine>()", span="23-23"];
m7_4 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="1: _cts = new CancellationTokenSource()", span="24-24"];
m7_5 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="0: _cts.Cancel()", span="25-25"];
m7_6 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="0: _stateMachineFactory = new Mock<IStateMachineFactory>()", span="27-27"];
m7_7 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="0: _stateMachineFactory.Setup(x => x.Create(It.IsNotNull<IStorageConnection>()))\r\n                .Returns(_stateMachine.Object)", span="28-29"];
m7_8 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="0: _storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="31-31"];
m7_9 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="0: _connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns(JobId)", span="32-33"];
m7_10 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="SqlServerProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19"];
m7_75 [cluster="Unk.TryToChangeState", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.TryToChangeState", span=""];
m7_85 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Entry lambda expression", span="84-84"];
m7_19 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Entry lambda expression", span="28-28"];
m7_24 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Entry lambda expression", span="31-31"];
m7_28 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Entry lambda expression", span="32-33"];
m7_20 [cluster="lambda expression", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="0: x.Create(It.IsNotNull<IStorageConnection>())", span="28-28"];
m7_21 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Exit lambda expression", span="28-28"];
m7_25 [cluster="lambda expression", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="1: x.GetConnection()", span="31-31"];
m7_26 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Exit lambda expression", span="31-31"];
m7_29 [cluster="lambda expression", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="1: x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="32-33"];
m7_30 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Exit lambda expression", span="32-33"];
m7_32 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Entry lambda expression", span="33-33"];
m7_33 [cluster="lambda expression", color=red, community=0, file="SqlServerProcessingJobFacts.cs", label="1: time > 0", span="33-33"];
m7_34 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Exit lambda expression", span="33-33"];
m7_40 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Entry lambda expression", span="40-41"];
m7_41 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan)", span="40-41"];
m7_42 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Exit lambda expression", span="40-41"];
m7_48 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Entry lambda expression", span="50-51"];
m7_49 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="new SchedulePoller(\r\n                    _storage.Object, null, Timeout.InfiniteTimeSpan)", span="50-51"];
m7_50 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Exit lambda expression", span="50-51"];
m7_60 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Entry lambda expression", span="63-63"];
m7_63 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Entry lambda expression", span="64-64"];
m7_61 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="x.GetConnection()", span="63-63"];
m7_62 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Exit lambda expression", span="63-63"];
m7_64 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="x.Dispose()", span="64-64"];
m7_65 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Exit lambda expression", span="64-64"];
m7_72 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Entry lambda expression", span="74-77"];
m7_73 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName })", span="74-77"];
m7_74 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Exit lambda expression", span="74-77"];
m7_82 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Entry lambda expression", span="83-84"];
m7_88 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Entry lambda expression", span="90-90"];
m7_83 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="83-84"];
m7_84 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Exit lambda expression", span="83-84"];
m7_86 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="time > 0", span="84-84"];
m7_87 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Exit lambda expression", span="84-84"];
m7_89 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="x.TryToChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>())", span="90-90"];
m7_90 [cluster="lambda expression", file="SqlServerProcessingJobFacts.cs", label="Exit lambda expression", span="90-90"];
m7_59 [cluster="Unk.Verify", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.Verify", span=""];
m7_13 [cluster="Mock<IStateMachine>.cstr", file="SqlServerProcessingJobFacts.cs", label="Entry Mock<IStateMachine>.cstr", span=""];
m7_23 [cluster="Unk.Create", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.Create", span=""];
m7_18 [cluster="Unk.Returns", file="SqlServerProcessingJobFacts.cs", label="Entry Unk.Returns", span=""];
m7_12 [cluster="Mock<IStorageConnection>.cstr", file="SqlServerProcessingJobFacts.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m7_11 [cluster="Mock<JobStorage>.cstr", file="SqlServerProcessingJobFacts.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m7_58 [cluster="Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", file="SqlServerProcessingJobFacts.cs", label="Entry Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", span="47-47"];
m7_57 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", file="SqlServerProcessingJobFacts.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="94-94"];
m7_91 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", file="SqlServerProcessingJobFacts.cs", label="return new SchedulePoller(_storage.Object, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan);", span="96-96"];
m7_92 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", file="SqlServerProcessingJobFacts.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="94-94"];
m7_93 [file="SqlServerProcessingJobFacts.cs", label="Hangfire.Core.Tests.Server.SchedulePollerFacts", span=""];
m8_13 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="59-59"];
m8_5 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="options == null", span="40-40"];
m8_79 [cluster="HangFire.States.StateMachine.ElectState(HangFire.Common.States.StateChangingContext, HangFire.Common.Filters.JobFilterInfo)", file="SqlServerStorage.cs", label="Entry HangFire.States.StateMachine.ElectState(HangFire.Common.States.StateChangingContext, HangFire.Common.Filters.JobFilterInfo)", span="174-174"];
m8_83 [cluster="HangFire.States.StateMachine.ElectState(HangFire.Common.States.StateChangingContext, HangFire.Common.Filters.JobFilterInfo)", file="SqlServerStorage.cs", label="var filters = filterInfo.StateChangingFilters", span="176-176"];
m8_85 [cluster="HangFire.States.StateMachine.ElectState(HangFire.Common.States.StateChangingContext, HangFire.Common.Filters.JobFilterInfo)", file="SqlServerStorage.cs", label="var oldState = context.CandidateState", span="180-180"];
m8_86 [cluster="HangFire.States.StateMachine.ElectState(HangFire.Common.States.StateChangingContext, HangFire.Common.Filters.JobFilterInfo)", file="SqlServerStorage.cs", label="filter.OnStateChanging(context)", span="181-181"];
m8_87 [cluster="HangFire.States.StateMachine.ElectState(HangFire.Common.States.StateChangingContext, HangFire.Common.Filters.JobFilterInfo)", file="SqlServerStorage.cs", label="oldState != context.CandidateState", span="183-183"];
m8_89 [cluster="HangFire.States.StateMachine.ElectState(HangFire.Common.States.StateChangingContext, HangFire.Common.Filters.JobFilterInfo)", file="SqlServerStorage.cs", label="transaction.AddJobState(context.JobId, oldState)", span="187-187"];
m8_91 [cluster="HangFire.States.StateMachine.ElectState(HangFire.Common.States.StateChangingContext, HangFire.Common.Filters.JobFilterInfo)", file="SqlServerStorage.cs", label="return context.CandidateState;", span="193-193"];
m8_84 [cluster="HangFire.States.StateMachine.ElectState(HangFire.Common.States.StateChangingContext, HangFire.Common.Filters.JobFilterInfo)", file="SqlServerStorage.cs", label=filters, span="178-178"];
m8_88 [cluster="HangFire.States.StateMachine.ElectState(HangFire.Common.States.StateChangingContext, HangFire.Common.Filters.JobFilterInfo)", file="SqlServerStorage.cs", label="var transaction = _connection.CreateWriteTransaction()", span="185-185"];
m8_90 [cluster="HangFire.States.StateMachine.ElectState(HangFire.Common.States.StateChangingContext, HangFire.Common.Filters.JobFilterInfo)", file="SqlServerStorage.cs", label="transaction.Commit()", span="188-188"];
m8_92 [cluster="HangFire.States.StateMachine.ElectState(HangFire.Common.States.StateChangingContext, HangFire.Common.Filters.JobFilterInfo)", file="SqlServerStorage.cs", label="Exit HangFire.States.StateMachine.ElectState(HangFire.Common.States.StateChangingContext, HangFire.Common.Filters.JobFilterInfo)", span="174-174"];
m8_62 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="84-84"];
m8_64 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="84-84"];
m8_37 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="var parts = _connectionString.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)\r\n                    .Select(x => x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))\r\n                    .Select(x => new { Key = x[0].Trim(), Value = x[1].Trim() })\r\n                    .ToDictionary(x => x.Key, x => x.Value)", span="82-85"];
m8_81 [cluster="HangFire.Common.States.StateApplyingContext.ApplyState(HangFire.Common.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="SqlServerStorage.cs", label="Entry HangFire.Common.States.StateApplyingContext.ApplyState(HangFire.Common.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", span="42-42"];
m8_65 [cluster="Unk.Trim", file="SqlServerStorage.cs", label="Entry Unk.Trim", span=""];
m8_20 [cluster="HangFire.Common.Filters.JobFilter.JobFilter(object, HangFire.Common.Filters.JobFilterScope, int?)", file="SqlServerStorage.cs", label="Entry HangFire.Common.Filters.JobFilter.JobFilter(object, HangFire.Common.Filters.JobFilterScope, int?)", span="38-38"];
m8_21 [cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", color=green, community=0, file="SqlServerStorage.cs", label="0: Entry HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", span="62-62"];
m8_22 [cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", file="SqlServerStorage.cs", label="job == null", span="67-67"];
m8_35 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="SqlServerStorage.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m8_36 [cluster="System.TimeSpan.FromHours(double)", file="SqlServerStorage.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m8_38 [cluster="HangFire.Common.States.StateContext.StateContext(string, HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="Entry HangFire.Common.States.StateContext.StateContext(string, HangFire.Common.JobMethod)", span="27-27"];
m8_40 [cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.Common.States.State, string[])", file="SqlServerStorage.cs", label="Entry HangFire.States.StateMachine.TryToChangeState(string, HangFire.Common.States.State, string[])", span="86-86"];
m8_41 [cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.Common.States.State, string[])", file="SqlServerStorage.cs", label="jobId == null", span="89-89"];
m8_45 [cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.Common.States.State, string[])", file="SqlServerStorage.cs", label="fromStates == null", span="91-91"];
m8_46 [cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.Common.States.State, string[])", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''fromStates'');", span="91-91"];
m8_47 [cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.Common.States.State, string[])", file="SqlServerStorage.cs", label="_connection.AcquireJobLock(jobId)", span="99-99"];
m8_49 [cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.Common.States.State, string[])", file="SqlServerStorage.cs", label="jobData == null", span="103-103"];
m8_39 [cluster="HangFire.States.StateMachine.ChangeState(HangFire.Common.States.StateContext, HangFire.Common.States.State, string)", file="SqlServerStorage.cs", label="Entry HangFire.States.StateMachine.ChangeState(HangFire.Common.States.StateContext, HangFire.Common.States.State, string)", span="141-141"];
m8_42 [cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.Common.States.State, string[])", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''jobId'');", span="89-89"];
m8_43 [cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.Common.States.State, string[])", file="SqlServerStorage.cs", label="toState == null", span="90-90"];
m8_44 [cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.Common.States.State, string[])", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''toState'');", span="90-90"];
m8_48 [cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.Common.States.State, string[])", file="SqlServerStorage.cs", label="var jobData = _connection.GetJobStateAndInvocationData(jobId)", span="101-101"];
m8_50 [cluster="HangFire.States.StateMachine.TryToChangeState(string, HangFire.Common.States.State, string[])", file="SqlServerStorage.cs", label="return false;", span="107-107"];
m8_51 [cluster="string.Split(char[], System.StringSplitOptions)", file="SqlServerStorage.cs", label="Entry string.Split(char[], System.StringSplitOptions)", span="0-0"];
m8_56 [cluster="Unk.AppendFormat", file="SqlServerStorage.cs", label="Entry Unk.AppendFormat", span=""];
m8_57 [cluster="System.Text.StringBuilder.Append(string)", file="SqlServerStorage.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m8_54 [cluster="System.Text.StringBuilder.StringBuilder()", file="SqlServerStorage.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m8_58 [cluster="string.Format(string, object)", file="SqlServerStorage.cs", label="Entry string.Format(string, object)", span="0-0"];
m8_52 [cluster="Unk.Select", file="SqlServerStorage.cs", label="Entry Unk.Select", span=""];
m8_53 [cluster="Unk.ToDictionary", file="SqlServerStorage.cs", label="Entry Unk.ToDictionary", span=""];
m8_55 [cluster="Unk.ContainsKey", file="SqlServerStorage.cs", label="Entry Unk.ContainsKey", span=""];
m8_59 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="83-83"];
m8_19 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="59-59"];
m8_63 [cluster="lambda expression", file="SqlServerStorage.cs", label="new { Key = x[0].Trim(), Value = x[1].Trim() }", span="84-84"];
m8_96 [cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="SqlServerStorage.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.Commit()", span="39-39"];
m8_0 [cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", file="SqlServerStorage.cs", label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", span="36-36"];
m8_1 [cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", file="SqlServerStorage.cs", label="connection == null", span="38-38"];
m8_3 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="connectionString == null", span="39-39"];
m8_2 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37"];
m8_4 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''connectionString'');", span="39-39"];
m8_23 [cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''job'');", span="67-67"];
m8_33 [cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", file="SqlServerStorage.cs", label="Exit HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", span="62-62"];
m8_95 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.State)", file="SqlServerStorage.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.State)", span="13-13"];
m8_28 [cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", file="SqlServerStorage.cs", label="var invocationData = job.MethodData.Serialize()", span="71-71"];
m8_30 [cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", file="SqlServerStorage.cs", label="var context = new StateContext(jobId, job.MethodData)", span="80-80"];
m8_31 [cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", file="SqlServerStorage.cs", label="ChangeState(context, state, null)", span="81-81"];
m8_29 [cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", file="SqlServerStorage.cs", label="var jobId = _connection.CreateExpiredJob(\r\n                invocationData, \r\n                job.Arguments.ToArray(),\r\n                parameters,\r\n                TimeSpan.FromHours(1))", span="73-77"];
m8_32 [cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", file="SqlServerStorage.cs", label="return jobId;", span="83-83"];
m8_101 [cluster="System.Func<T, TResult>.Invoke(T)", file="SqlServerStorage.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m8_6 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''options'');", span="40-40"];
m8_7 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="_options = options", span="42-42"];
m8_9 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="options.PrepareSchemaIfNecessary", span="45-45"];
m8_11 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="SqlServerObjectsInstaller.Install(connection)", span="49-49"];
m8_8 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="_connectionString = connectionString", span="43-43"];
m8_10 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="var connection = CreateAndOpenConnection()", span="47-47"];
m8_12 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37"];
m8_77 [cluster="HangFire.Common.States.StateChangingContext.StateChangingContext(HangFire.Common.States.StateContext, HangFire.Common.States.State, string, HangFire.Storage.IStorageConnection)", file="SqlServerStorage.cs", label="Entry HangFire.Common.States.StateChangingContext.StateChangingContext(HangFire.Common.States.StateContext, HangFire.Common.States.State, string, HangFire.Storage.IStorageConnection)", span="26-26"];
m8_94 [cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="SqlServerStorage.cs", label="Entry HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="10-10"];
m8_34 [cluster="HangFire.Common.JobMethod.Serialize()", file="SqlServerStorage.cs", label="Entry HangFire.Common.JobMethod.Serialize()", span="84-84"];
m8_76 [cluster="HangFire.States.StateMachine.ChangeState(HangFire.Common.States.StateContext, HangFire.Common.States.State, string)", file="SqlServerStorage.cs", label="Exit HangFire.States.StateMachine.ChangeState(HangFire.Common.States.StateContext, HangFire.Common.States.State, string)", span="141-141"];
m8_100 [cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="SqlServerStorage.cs", label="Entry HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", span="47-47"];
m8_16 [cluster="Unk.Select", file="SqlServerStorage.cs", label="Entry Unk.Select", span=""];
m8_17 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="59-59"];
m8_18 [cluster="lambda expression", file="SqlServerStorage.cs", label="new JobFilter(f, JobFilterScope.Type, null)", span="59-59"];
m8_27 [cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''state'');", span="69-69"];
m8_60 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries)", span="83-83"];
m8_66 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="85-85"];
m8_69 [cluster="HangFire.States.StateMachine.ChangeState(HangFire.Common.States.StateContext, HangFire.Common.States.State, string)", file="SqlServerStorage.cs", label="var electedState = ElectState(changingContext, filterInfo)", span="149-149"];
m8_14 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="119-119"];
m8_15 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="34-34"];
m8_61 [cluster="HangFire.Storage.IStorageConnection.GetJobStateAndInvocationData(string)", file="SqlServerStorage.cs", label="Entry HangFire.Storage.IStorageConnection.GetJobStateAndInvocationData(string)", span="23-23"];
m8_68 [cluster="HangFire.States.StateMachine.ChangeState(HangFire.Common.States.StateContext, HangFire.Common.States.State, string)", file="SqlServerStorage.cs", label="var filterInfo = GetFilters(context.MethodData)", span="146-146"];
m8_67 [cluster="HangFire.States.StateMachine.ChangeState(HangFire.Common.States.StateContext, HangFire.Common.States.State, string)", file="SqlServerStorage.cs", label="var changingContext = new StateChangingContext(context, toState, oldStateName, _connection)", span="145-145"];
m8_70 [cluster="HangFire.States.StateMachine.ChangeState(HangFire.Common.States.StateContext, HangFire.Common.States.State, string)", file="SqlServerStorage.cs", label="var changedContext = new StateApplyingContext(\r\n                    context,\r\n                    _connection,\r\n                    electedState,\r\n                    oldStateName)", span="151-155"];
m8_71 [cluster="HangFire.States.StateMachine.ChangeState(HangFire.Common.States.StateContext, HangFire.Common.States.State, string)", file="SqlServerStorage.cs", label="return changedContext.ApplyState(_handlers, filterInfo.StateChangedFilters);", span="157-157"];
m8_74 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="return connection;", span="124-124"];
m8_72 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="var connection = new SqlConnection(_connectionString)", span="121-121"];
m8_73 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="connection.Open()", span="122-122"];
m8_75 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="119-119"];
m8_93 [cluster="HangFire.Common.States.IStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="SqlServerStorage.cs", label="Entry HangFire.Common.States.IStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", span="30-30"];
m8_24 [cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", file="SqlServerStorage.cs", label="parameters == null", span="68-68"];
m8_25 [cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", color=green, community=0, file="SqlServerStorage.cs", label="0: throw new ArgumentNullException(''parameters'');", span="68-68"];
m8_26 [cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.State)", file="SqlServerStorage.cs", label="state == null", span="69-69"];
m8_97 [cluster="HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="Entry HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", span="196-196"];
m8_98 [cluster="HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="return new JobFilterInfo(_getFiltersThunk(method));", span="198-198"];
m8_99 [cluster="HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", file="SqlServerStorage.cs", label="Exit HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", span="196-196"];
m8_80 [cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IStorageConnection, HangFire.Common.States.State, string)", file="SqlServerStorage.cs", label="Entry HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IStorageConnection, HangFire.Common.States.State, string)", span="27-27"];
m8_82 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SqlServerStorage.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m8_78 [cluster="Unk.GetFilters", file="SqlServerStorage.cs", label="HangFire.SqlServer.SqlServerStorage", span=""];
m8_102 [file="SqlServerStorage.cs", label="HangFire.States.StateMachine", span=""];
m8_103 [file="SqlServerStorage.cs", label="System.Collections.Generic.IEnumerable<object>", span=""];
m9_5 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerStorageOptions.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m9_6 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerStorageOptions.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m9_0 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m9_1 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="26-26"];
m9_2 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="InvisibilityTimeout = TimeSpan.FromMinutes(5)", span="27-27"];
m9_3 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="PrepareSchemaIfNecessary = true", span="29-29"];
m9_4 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="Exit HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m9_7 [file="SqlServerStorageOptions.cs", label="HangFire.SqlServer.SqlServerStorageOptions", span=""];
m10_4 [cluster="Unk.>", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.>", span=""];
m10_15 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Core.Tests.Server.WorkerContextFacts.CreateContext()", span="46-46"];
m10_29 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs", label="return new WorkerContext(Queues, WorkerNumber);", span="48-48"];
m10_30 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CreateContext()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.Core.Tests.Server.WorkerContextFacts.CreateContext()", span="46-46"];
m10_0 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsNull()", span="12-12"];
m10_1 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new WorkerContext(null, WorkerNumber))", span="14-15"];
m10_2 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="Assert.Equal(''queues'', exception.ParamName)", span="17-17"];
m10_3 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_ThrowsAnException_WhenQueuesArrayIsNull()", span="12-12"];
m10_5 [cluster="Unk.Equal", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Equal", span=""];
m10_23 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", span="37-37"];
m10_24 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", file="SqlServerWriteOnlyTransaction.cs", label="var context = CreateContext()", span="39-39"];
m10_25 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="0: var contextCopy = new WorkerContext(context)", span="40-40"];
m10_26 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", file="SqlServerWriteOnlyTransaction.cs", label="Assert.Equal(Queues, context.Queues)", span="42-42"];
m10_27 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", file="SqlServerWriteOnlyTransaction.cs", label="Assert.Equal(context.WorkerNumber, contextCopy.WorkerNumber)", span="43-43"];
m10_28 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_CorrectlyCopies_AllPropertyValues()", span="37-37"];
m10_9 [cluster="Hangfire.Server.WorkerContext.WorkerContext(string[], int)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Server.WorkerContext.WorkerContext(string[], int)", span="22-22"];
m10_16 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_ThrowsAnException_WhenContextIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_ThrowsAnException_WhenContextIsNull()", span="30-30"];
m10_17 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_ThrowsAnException_WhenContextIsNull()", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="1: Assert.Throws<NullReferenceException>(\r\n                () => new WorkerContext(null))", span="32-33"];
m10_18 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_ThrowsAnException_WhenContextIsNull()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.Core.Tests.Server.WorkerContextFacts.CopyCtor_ThrowsAnException_WhenContextIsNull()", span="30-30"];
m10_19 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="33-33"];
m10_6 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="15-15"];
m10_7 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="new WorkerContext(null, WorkerNumber)", span="15-15"];
m10_8 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="15-15"];
m10_20 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="new WorkerContext(null)", span="33-33"];
m10_21 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="33-33"];
m10_22 [cluster="Hangfire.Server.WorkerContext.WorkerContext(Hangfire.Server.WorkerContext)", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Server.WorkerContext.WorkerContext(Hangfire.Server.WorkerContext)", span="30-30"];
m10_10 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", file="SqlServerWriteOnlyTransaction.cs", label="Entry Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", span="21-21"];
m10_11 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", file="SqlServerWriteOnlyTransaction.cs", label="var context = CreateContext()", span="23-23"];
m10_12 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", file="SqlServerWriteOnlyTransaction.cs", label="Assert.Equal(Queues, context.Queues)", span="25-25"];
m10_13 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", file="SqlServerWriteOnlyTransaction.cs", label="Assert.Equal(WorkerNumber, context.WorkerNumber)", span="26-26"];
m10_14 [cluster="Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", file="SqlServerWriteOnlyTransaction.cs", label="Exit Hangfire.Core.Tests.Server.WorkerContextFacts.Ctor_CorrectlySetsAllInstanceProperties()", span="21-21"];
m10_31 [file="SqlServerWriteOnlyTransaction.cs", label="Hangfire.Core.Tests.Server.WorkerContextFacts", span=""];
m11_14 [cluster="HangFire.Server.Worker.ToString()", file="Worker.cs", label="Entry HangFire.Server.Worker.ToString()", span="59-59"];
m11_15 [cluster="HangFire.Server.Worker.ToString()", file="Worker.cs", label="return ''Worker #'' + _context.WorkerNumber;", span="61-61"];
m11_16 [cluster="HangFire.Server.Worker.ToString()", file="Worker.cs", label="Exit HangFire.Server.Worker.ToString()", span="59-59"];
m11_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Worker.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m11_13 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="Entry HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", span="64-64"];
m11_17 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="var stateMachine = _context.StateMachineFactory.Create(connection)", span="69-69"];
m11_19 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="!stateMachine.TryToChangeState(\r\n                jobId,\r\n                processingState,\r\n                new[] { EnqueuedState.StateName, ProcessingState.StateName })", span="72-75"];
m11_22 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="var jobData = connection.GetJobData(jobId)", span="89-89"];
m11_24 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="var performContext = new PerformContext(_context, connection, jobId, jobData.Job)", span="92-92"];
m11_25 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="process.Run(performContext, jobData.Job)", span="94-94"];
m11_31 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="stateMachine.TryToChangeState(jobId, state, new[] { ProcessingState.StateName })", span="115-115"];
m11_18 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="var processingState = new ProcessingState(_context.ServerId)", span="70-70"];
m11_20 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="return;", span="77-77"];
m11_21 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="IState state", span="85-85"];
m11_23 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="jobData.EnsureLoaded()", span="90-90"];
m11_26 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="state = new SucceededState()", span="96-96"];
m11_27 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label=JobPerformanceException, span="98-98"];
m11_29 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label=Exception, span="105-105"];
m11_28 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="state = new FailedState(ex.InnerException)\r\n                {\r\n                    Reason = ex.Message\r\n                }", span="100-103"];
m11_30 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="state = new FailedState(ex)\r\n                {\r\n                    Reason = ''Internal HangFire Server exception occurred. Please, report it to HangFire developers.''\r\n                }", span="107-110"];
m11_32 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="Exit HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", span="64-64"];
m11_33 [cluster="HangFire.States.IStateMachineFactory.Create(HangFire.Storage.IStorageConnection)", file="Worker.cs", label="Entry HangFire.States.IStateMachineFactory.Create(HangFire.Storage.IStorageConnection)", span="8-8"];
m11_41 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="Worker.cs", label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="26-26"];
m11_12 [cluster="HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="Worker.cs", label="Entry HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="30-30"];
m11_38 [cluster="HangFire.Server.PerformContext.PerformContext(HangFire.Server.WorkerContext, HangFire.Storage.IStorageConnection, string, HangFire.Common.Job)", file="Worker.cs", label="Entry HangFire.Server.PerformContext.PerformContext(HangFire.Server.WorkerContext, HangFire.Storage.IStorageConnection, string, HangFire.Common.Job)", span="35-35"];
m11_35 [cluster="HangFire.States.IStateMachine.TryToChangeState(string, HangFire.States.IState, string[])", file="Worker.cs", label="Entry HangFire.States.IStateMachine.TryToChangeState(string, HangFire.States.IState, string[])", span="24-24"];
m11_37 [cluster="HangFire.Storage.JobData.EnsureLoaded()", file="Worker.cs", label="Entry HangFire.Storage.JobData.EnsureLoaded()", span="27-27"];
m11_6 [cluster="HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="Entry HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", span="34-34"];
m11_7 [cluster="HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="var connection = _context.Storage.GetConnection()", span="36-36"];
m11_8 [cluster="HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", color=red, community=0, file="Worker.cs", label="1: var nextJob = connection.FetchNextJob(_context.Queues, cancellationToken)", span="38-38"];
m11_9 [cluster="HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", color=red, community=0, file="Worker.cs", label="1: ProcessJob(nextJob.JobId, connection, _context.PerformanceProcess)", span="42-42"];
m11_10 [cluster="HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="Exit HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", span="34-34"];
m11_39 [cluster="HangFire.Server.IJobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", file="Worker.cs", label="Entry HangFire.Server.IJobPerformanceProcess.Run(HangFire.Server.PerformContext, HangFire.Server.IJobPerformer)", span="20-20"];
m11_36 [cluster="HangFire.Storage.IStorageConnection.GetJobData(string)", file="Worker.cs", label="Entry HangFire.Storage.IStorageConnection.GetJobData(string)", span="37-37"];
m11_34 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="Worker.cs", label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="26-26"];
m11_0 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="Entry HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27"];
m11_1 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="context == null", span="29-29"];
m11_3 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="_context = context", span="31-31"];
m11_2 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="throw new ArgumentNullException(''context'');", span="29-29"];
m11_4 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="Exit HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27"];
m11_40 [cluster="HangFire.States.SucceededState.SucceededState()", file="Worker.cs", label="Entry HangFire.States.SucceededState.SucceededState()", span="27-27"];
m11_11 [cluster="HangFire.JobStorage.GetConnection()", file="Worker.cs", label="Entry HangFire.JobStorage.GetConnection()", span="56-56"];
m11_42 [file="Worker.cs", label="HangFire.Server.Worker", span=""];
m12_3 [cluster="HangFire.States.FailedState.GetProperties()", file="WriteTransactionFacts.cs", label="Entry HangFire.States.FailedState.GetProperties()", span="20-20"];
m12_4 [cluster="HangFire.States.FailedState.GetProperties()", file="WriteTransactionFacts.cs", label="return new Dictionary<string, string>\r\n                {\r\n                    { ''FailedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''ExceptionType'', Exception.GetType().FullName },\r\n                    { ''ExceptionMessage'', Exception.Message },\r\n                    { ''ExceptionDetails'', Exception.ToString() }\r\n                };", span="22-28"];
m12_5 [cluster="HangFire.States.FailedState.GetProperties()", file="WriteTransactionFacts.cs", label="Exit HangFire.States.FailedState.GetProperties()", span="20-20"];
m12_17 [cluster="HangFire.JobHelper.ToTimestamp(System.DateTime)", file="WriteTransactionFacts.cs", label="Entry HangFire.JobHelper.ToTimestamp(System.DateTime)", span="40-40"];
m12_6 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="WriteTransactionFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m12_0 [cluster="HangFire.States.FailedState.FailedState(string, System.Exception)", file="WriteTransactionFacts.cs", label="Entry HangFire.States.FailedState.FailedState(string, System.Exception)", span="10-10"];
m12_1 [cluster="HangFire.States.FailedState.FailedState(string, System.Exception)", file="WriteTransactionFacts.cs", label="Exception = exception", span="13-13"];
m12_2 [cluster="HangFire.States.FailedState.FailedState(string, System.Exception)", file="WriteTransactionFacts.cs", label="Exit HangFire.States.FailedState.FailedState(string, System.Exception)", span="10-10"];
m12_10 [cluster="HangFire.States.FailedState.Apply(IRedisTransaction, string)", file="WriteTransactionFacts.cs", label="Entry HangFire.States.FailedState.Apply(IRedisTransaction, string)", span="31-31"];
m12_11 [cluster="HangFire.States.FailedState.Apply(IRedisTransaction, string)", file="WriteTransactionFacts.cs", label="transaction.QueueCommand(x => x.AddItemToSortedSet(\r\n                        ''hangfire:failed'',\r\n                        jobId,\r\n                        JobHelper.ToTimestamp(DateTime.UtcNow)))", span="33-36"];
m12_12 [cluster="HangFire.States.FailedState.Apply(IRedisTransaction, string)", file="WriteTransactionFacts.cs", label="Exit HangFire.States.FailedState.Apply(IRedisTransaction, string)", span="31-31"];
m12_9 [cluster="System.Exception.ToString()", file="WriteTransactionFacts.cs", label="Entry System.Exception.ToString()", span="0-0"];
m12_13 [cluster="Unk.QueueCommand", file="WriteTransactionFacts.cs", label="Entry Unk.QueueCommand", span=""];
m12_18 [cluster="Unk.AddItemToSortedSet", file="WriteTransactionFacts.cs", label="Entry Unk.AddItemToSortedSet", span=""];
m12_8 [cluster="System.Exception.GetType()", file="WriteTransactionFacts.cs", label="Entry System.Exception.GetType()", span="0-0"];
m12_22 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="43-43"];
m12_15 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.AddItemToSortedSet(\r\n                        ''hangfire:failed'',\r\n                        jobId,\r\n                        JobHelper.ToTimestamp(DateTime.UtcNow))", span="33-36"];
m12_14 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Entry lambda expression", span="33-36"];
m12_16 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="33-36"];
m12_23 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="x.RemoveItemFromSortedSet(''hangfire:failed'', jobId)", span="43-43"];
m12_24 [cluster="lambda expression", file="WriteTransactionFacts.cs", label="Exit lambda expression", span="43-43"];
m12_19 [cluster="HangFire.States.FailedState.Descriptor.Unapply(IRedisTransaction, string)", file="WriteTransactionFacts.cs", label="Entry HangFire.States.FailedState.Descriptor.Unapply(IRedisTransaction, string)", span="41-41"];
m12_20 [cluster="HangFire.States.FailedState.Descriptor.Unapply(IRedisTransaction, string)", file="WriteTransactionFacts.cs", label="transaction.QueueCommand(x => x.RemoveItemFromSortedSet(''hangfire:failed'', jobId))", span="43-43"];
m12_21 [cluster="HangFire.States.FailedState.Descriptor.Unapply(IRedisTransaction, string)", file="WriteTransactionFacts.cs", label="Exit HangFire.States.FailedState.Descriptor.Unapply(IRedisTransaction, string)", span="41-41"];
m12_7 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="WriteTransactionFacts.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="51-51"];
m12_25 [cluster="Unk.RemoveItemFromSortedSet", file="WriteTransactionFacts.cs", label="Entry Unk.RemoveItemFromSortedSet", span=""];
m12_26 [file="WriteTransactionFacts.cs", label="HangFire.States.FailedState", span=""];
m12_27 [file="WriteTransactionFacts.cs", label=string, span=""];
m12_28 [file="WriteTransactionFacts.cs", label=string, span=""];
m0_111 -> m0_112  [key=0, style=solid];
m0_112 -> m0_63  [color=green, key=3, label="Local variable string arrangeSql", style=bold];
m0_112 -> m0_113  [color=green, key=0, style=solid];
m0_112 -> m0_116  [color=green, key=1, label=arrangeSql, style=dashed];
m0_113 -> m0_114  [color=green, key=0, style=solid];
m0_113 -> m0_53  [color=green, key=2, style=dotted];
m0_113 -> m0_115  [color=green, key=1, label="lambda expression", style=dashed];
m0_114 -> m0_111  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [color=green, key=0, style=solid];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_3  [color=green, key=2, style=dotted];
m0_1 -> m0_4  [color=green, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_0  [color=blue, key=0, style=bold];
m0_15 -> m0_16  [color=green, key=0, style=solid];
m0_16 -> m0_17  [color=green, key=0, style=solid];
m0_16 -> m0_3  [color=green, key=2, style=dotted];
m0_16 -> m0_18  [color=green, key=1, label="lambda expression", style=dashed];
m0_17 -> m0_15  [color=blue, key=0, style=bold];
m0_25 -> m0_26  [color=green, key=0, style=solid];
m0_26 -> m0_27  [color=green, key=0, style=solid];
m0_26 -> m0_3  [color=green, key=2, style=dotted];
m0_26 -> m0_28  [color=green, key=1, label="lambda expression", style=dashed];
m0_27 -> m0_25  [color=blue, key=0, style=bold];
m0_38 -> m0_39  [color=green, key=0, style=solid];
m0_39 -> m0_40  [color=green, key=0, style=solid];
m0_39 -> m0_3  [color=green, key=2, style=dotted];
m0_39 -> m0_41  [color=green, key=1, label="lambda expression", style=dashed];
m0_40 -> m0_38  [color=blue, key=0, style=bold];
m0_49 -> m0_50  [color=green, key=0, style=solid];
m0_50 -> m0_50  [color=green, key=3, label="Local variable string arrangeSql", style=bold];
m0_50 -> m0_51  [color=green, key=0, style=solid];
m0_50 -> m0_55  [color=green, key=1, label=arrangeSql, style=dashed];
m0_51 -> m0_52  [color=green, key=0, style=solid];
m0_51 -> m0_53  [color=green, key=2, style=dotted];
m0_51 -> m0_54  [color=green, key=1, label="lambda expression", style=dashed];
m0_52 -> m0_49  [color=blue, key=0, style=bold];
m0_89 -> m0_90  [color=green, key=0, style=solid];
m0_90 -> m0_63  [color=green, key=3, label="Local variable string arrangeSql", style=bold];
m0_90 -> m0_91  [color=green, key=0, style=solid];
m0_90 -> m0_94  [color=green, key=1, label=arrangeSql, style=dashed];
m0_91 -> m0_92  [color=green, key=0, style=solid];
m0_91 -> m0_53  [color=green, key=2, style=dotted];
m0_91 -> m0_93  [color=green, key=1, label="lambda expression", style=dashed];
m0_92 -> m0_89  [color=blue, key=0, style=bold];
m0_78 -> m0_79  [color=green, key=0, style=solid];
m0_79 -> m0_79  [color=green, key=3, label="Local variable string arrangeSql", style=bold];
m0_79 -> m0_80  [color=green, key=0, style=solid];
m0_79 -> m0_83  [color=green, key=1, label=arrangeSql, style=dashed];
m0_80 -> m0_81  [color=green, key=0, style=solid];
m0_80 -> m0_53  [color=green, key=2, style=dotted];
m0_80 -> m0_82  [color=green, key=1, label="lambda expression", style=dashed];
m0_81 -> m0_78  [color=blue, key=0, style=bold];
m0_46 -> m0_47  [key=0, style=solid];
m0_4 -> m0_5  [color=green, key=0, style=solid];
m0_4 -> m0_11  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_5 -> m0_6  [color=green, key=0, style=solid];
m0_5 -> m0_8  [color=green, key=2, style=dotted];
m0_5 -> m0_10  [color=green, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_7  [color=green, key=0, style=solid];
m0_6 -> m0_9  [color=green, key=2, style=dotted];
m0_10 -> m0_11  [color=green, key=0, style=solid];
m0_11 -> m0_12  [color=green, key=0, style=solid];
m0_11 -> m0_13  [color=green, key=2, style=dotted];
m0_11 -> m0_14  [color=green, key=2, style=dotted];
m0_12 -> m0_10  [color=blue, key=0, style=bold];
m0_7 -> m0_4  [color=blue, key=0, style=bold];
m0_18 -> m0_19  [color=green, key=0, style=solid];
m0_18 -> m0_23  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_19 -> m0_20  [color=green, key=0, style=solid];
m0_19 -> m0_8  [color=green, key=2, style=dotted];
m0_19 -> m0_22  [color=green, key=1, label="lambda expression", style=dashed];
m0_20 -> m0_21  [color=green, key=0, style=solid];
m0_20 -> m0_9  [color=green, key=2, style=dotted];
m0_22 -> m0_23  [color=green, key=0, style=solid];
m0_23 -> m0_24  [color=green, key=0, style=solid];
m0_23 -> m0_13  [color=green, key=2, style=dotted];
m0_23 -> m0_14  [color=green, key=2, style=dotted];
m0_24 -> m0_22  [color=blue, key=0, style=bold];
m0_21 -> m0_18  [color=blue, key=0, style=bold];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_31  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_28 -> m0_36  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_43  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_41 -> m0_47  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_55 -> m0_56  [color=green, key=0, style=solid];
m0_55 -> m0_60  [color=green, key=2, style=dotted];
m0_54 -> m0_55  [color=green, key=0, style=solid];
m0_56 -> m0_57  [color=green, key=0, style=solid];
m0_56 -> m0_13  [color=green, key=2, style=dotted];
m0_56 -> m0_61  [color=green, key=2, style=dotted];
m0_56 -> m0_58  [color=green, key=1, label=payload, style=dashed];
m0_57 -> m0_9  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_58 -> m0_9  [key=2, style=dotted];
m0_58 -> m0_59  [key=0, style=solid];
m0_67 -> m0_68  [color=green, key=0, style=solid];
m0_67 -> m0_60  [color=green, key=2, style=dotted];
m0_66 -> m0_67  [color=green, key=0, style=solid];
m0_66 -> m0_68  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_66 -> m0_70  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_68 -> m0_13  [key=2, style=dotted];
m0_68 -> m0_14  [key=2, style=dotted];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_70  [color=darkseagreen4, key=1, label=payload, style=dashed];
m0_83 -> m0_60  [key=2, style=dotted];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_87  [key=2, style=dotted];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_84  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_85 -> m0_86  [color=green, key=0, style=solid];
m0_85 -> m0_88  [color=green, key=2, style=dotted];
m0_84 -> m0_85  [color=green, key=0, style=solid];
m0_84 -> m0_13  [key=2, style=dotted];
m0_84 -> m0_14  [key=2, style=dotted];
m0_86 -> m0_82  [color=blue, key=0, style=bold];
m0_94 -> m0_95  [color=green, key=0, style=solid];
m0_94 -> m0_60  [color=green, key=2, style=dotted];
m0_93 -> m0_94  [color=green, key=0, style=solid];
m0_93 -> m0_95  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_93 -> m0_96  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_95 -> m0_13  [key=2, style=dotted];
m0_95 -> m0_14  [key=2, style=dotted];
m0_95 -> m0_96  [key=0, style=solid];
m0_97 -> m0_98  [color=green, key=0, style=solid];
m0_97 -> m0_99  [color=green, key=2, style=dotted];
m0_96 -> m0_97  [color=green, key=0, style=solid];
m0_96 -> m0_8  [key=2, style=dotted];
m0_96 -> m0_75  [key=2, style=dotted];
m0_98 -> m0_93  [color=blue, key=0, style=bold];
m0_105 -> m0_106  [color=green, key=0, style=solid];
m0_105 -> m0_60  [key=2, style=dotted];
m0_104 -> m0_106  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_104 -> m0_109  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_104 -> m0_105  [key=0, style=solid];
m0_106 -> m0_107  [color=green, key=0, style=solid];
m0_106 -> m0_8  [color=green, key=2, style=dotted];
m0_106 -> m0_108  [color=green, key=1, label="lambda expression", style=dashed];
m0_107 -> m0_104  [color=blue, key=0, style=bold];
m0_108 -> m0_109  [color=green, key=0, style=solid];
m0_109 -> m0_110  [color=green, key=0, style=solid];
m0_109 -> m0_13  [color=green, key=2, style=dotted];
m0_109 -> m0_14  [color=green, key=2, style=dotted];
m0_110 -> m0_108  [color=blue, key=0, style=bold];
m0_115 -> m0_116  [color=green, key=0, style=solid];
m0_115 -> m0_117  [color=green, key=1, label=SqlConnection, style=dashed];
m0_116 -> m0_117  [color=green, key=0, style=solid];
m0_116 -> m0_60  [color=green, key=2, style=dotted];
m0_117 -> m0_118  [color=green, key=0, style=solid];
m0_117 -> m0_125  [color=green, key=2, style=dotted];
m0_117 -> m0_121  [color=green, key=1, label=queue, style=dashed];
m0_118 -> m0_120  [color=green, key=1, label=critical, style=dashed];
m0_118 -> m0_13  [key=2, style=dotted];
m0_118 -> m0_61  [key=2, style=dotted];
m0_118 -> m0_119  [key=0, style=solid];
m0_121 -> m0_123  [color=green, key=1, label="@default", style=dashed];
m0_121 -> m0_13  [key=2, style=dotted];
m0_121 -> m0_61  [key=2, style=dotted];
m0_121 -> m0_122  [key=0, style=solid];
m0_120 -> m0_121  [color=green, key=0, style=solid];
m0_120 -> m0_9  [color=green, key=2, style=dotted];
m0_119 -> m0_120  [color=green, key=0, style=solid];
m0_119 -> m0_74  [key=2, style=dotted];
m0_123 -> m0_124  [color=green, key=0, style=solid];
m0_123 -> m0_9  [color=green, key=2, style=dotted];
m0_122 -> m0_123  [color=green, key=0, style=solid];
m0_122 -> m0_74  [key=2, style=dotted];
m0_124 -> m0_115  [color=blue, key=0, style=bold];
m0_31 -> m0_8  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_43 -> m0_8  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_70 -> m0_8  [key=2, style=dotted];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_75  [key=2, style=dotted];
m0_70 -> m0_72  [color=darkseagreen4, key=1, label=fetchedAt, style=dashed];
m0_36 -> m0_14  [key=2, style=dotted];
m0_36 -> m0_37  [key=0, style=solid];
m0_47 -> m0_14  [key=2, style=dotted];
m0_47 -> m0_48  [key=0, style=solid];
m0_32 -> m0_28  [color=blue, key=0, style=bold];
m0_29 -> m0_31  [color=darkseagreen4, key=1, label=cts, style=dashed];
m0_29 -> m0_36  [color=darkseagreen4, key=1, label=cts, style=dashed];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_33  [key=2, style=dotted];
m0_44 -> m0_41  [color=blue, key=0, style=bold];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_47  [color=darkseagreen4, key=1, label=cts, style=dashed];
m0_42 -> m0_45  [key=2, style=dotted];
m0_59 -> m0_54  [color=blue, key=0, style=bold];
m0_73 -> m0_66  [color=blue, key=0, style=bold];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_74  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_34  [key=2, style=dotted];
m0_35 -> m0_36  [key=0, style=solid];
m0_71 -> m0_74  [key=2, style=dotted];
m0_71 -> m0_72  [key=0, style=solid];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_76  [key=2, style=dotted];
m0_72 -> m0_77  [key=2, style=dotted];
m0_37 -> m0_35  [color=blue, key=0, style=bold];
m0_48 -> m0_46  [color=blue, key=0, style=bold];
m0_13 -> m0_126  [key=0, style=solid];
m0_126 -> m0_127  [key=0, style=solid];
m0_126 -> m0_129  [key=2, style=dotted];
m0_126 -> m0_130  [key=2, style=dotted];
m0_127 -> m0_128  [key=0, style=solid];
m0_128 -> m0_13  [color=blue, key=0, style=bold];
m0_100 -> m0_101  [color=green, key=0, style=solid];
m0_101 -> m0_63  [color=green, key=3, label="Local variable string arrangeSql", style=bold];
m0_101 -> m0_102  [color=green, key=0, style=solid];
m0_101 -> m0_105  [color=green, key=1, label=arrangeSql, style=dashed];
m0_102 -> m0_103  [color=green, key=0, style=solid];
m0_102 -> m0_53  [color=green, key=2, style=dotted];
m0_102 -> m0_104  [color=green, key=1, label="lambda expression", style=dashed];
m0_103 -> m0_100  [color=blue, key=0, style=bold];
m0_62 -> m0_63  [color=green, key=0, style=solid];
m0_63 -> m0_63  [color=green, key=3, label="Local variable string arrangeSql", style=bold];
m0_63 -> m0_64  [color=green, key=0, style=solid];
m0_63 -> m0_67  [color=green, key=1, label=arrangeSql, style=dashed];
m0_64 -> m0_65  [color=green, key=0, style=solid];
m0_64 -> m0_53  [color=green, key=2, style=dotted];
m0_64 -> m0_66  [color=green, key=1, label="lambda expression", style=dashed];
m0_65 -> m0_62  [color=blue, key=0, style=bold];
m0_133 -> m0_1  [color=green, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m0_133 -> m0_16  [color=green, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m0_133 -> m0_26  [color=green, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m0_133 -> m0_39  [color=green, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m0_133 -> m0_51  [color=green, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m0_133 -> m0_64  [color=green, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m0_133 -> m0_80  [color=green, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m0_133 -> m0_91  [color=green, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m0_133 -> m0_102  [color=green, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m0_133 -> m0_113  [color=green, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m0_134 -> m0_11  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_135 -> m0_23  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_140 -> m0_55  [color=green, key=1, label=arrangeSql, style=dashed];
m0_141 -> m0_67  [color=green, key=1, label=arrangeSql, style=dashed];
m0_143 -> m0_94  [color=green, key=1, label=arrangeSql, style=dashed];
m0_145 -> m0_109  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_146 -> m0_116  [color=green, key=1, label=arrangeSql, style=dashed];
m0_142 -> m0_83  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_144 -> m0_105  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m0_136 -> m0_36  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_137 -> m0_36  [color=darkseagreen4, key=1, label=cts, style=dashed];
m0_138 -> m0_47  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_139 -> m0_47  [color=darkseagreen4, key=1, label=cts, style=dashed];
m2_10 -> m2_11  [color=green, key=0, style=solid];
m2_11 -> m2_12  [color=green, key=0, style=solid];
m2_11 -> m2_25  [color=green, key=2, style=dotted];
m2_11 -> m2_13  [color=green, key=1, label=actions, style=dashed];
m2_11 -> m2_14  [color=green, key=1, label=actions, style=dashed];
m2_12 -> m2_13  [color=green, key=0, style=solid];
m2_12 -> m2_26  [color=green, key=2, style=dotted];
m2_13 -> m2_14  [color=green, key=0, style=solid];
m2_13 -> m2_27  [color=green, key=2, style=dotted];
m2_14 -> m2_15  [color=green, key=0, style=solid];
m2_14 -> m2_16  [color=green, key=0, style=solid];
m2_15 -> m2_14  [color=green, key=0, style=solid];
m2_15 -> m2_28  [color=green, key=2, style=dotted];
m2_15 -> m2_29  [color=green, key=2, style=dotted];
m2_16 -> m2_17  [color=green, key=0, style=solid];
m2_16 -> m2_30  [color=green, key=2, style=dotted];
m2_16 -> m2_19  [color=green, key=1, label=messageQueue, style=dashed];
m2_17 -> m2_18  [color=green, key=0, style=solid];
m2_17 -> m2_31  [color=green, key=2, style=dotted];
m2_17 -> m2_19  [color=green, key=1, label=transaction, style=dashed];
m2_17 -> m2_23  [color=green, key=1, label=transaction, style=dashed];
m2_19 -> m2_20  [color=green, key=0, style=solid];
m2_19 -> m2_33  [color=green, key=2, style=dotted];
m2_19 -> m2_34  [color=green, key=2, style=dotted];
m2_18 -> m2_19  [color=green, key=0, style=solid];
m2_18 -> m2_32  [color=green, key=2, style=dotted];
m2_23 -> m2_24  [color=green, key=0, style=solid];
m2_23 -> m2_36  [color=green, key=2, style=dotted];
m2_20 -> m2_20  [color=green, key=1, label=message, style=dashed];
m2_20 -> m2_21  [color=green, key=0, style=solid];
m2_20 -> m2_35  [color=green, key=2, style=dotted];
m2_20 -> m2_22  [color=green, key=1, label=message, style=dashed];
m2_22 -> m2_23  [color=green, key=0, style=solid];
m2_22 -> m2_5  [color=green, key=2, style=dotted];
m2_21 -> m2_22  [color=green, key=0, style=solid];
m2_21 -> m2_5  [color=green, key=2, style=dotted];
m2_24 -> m2_10  [color=blue, key=0, style=bold];
m2_37 -> m2_38  [color=green, key=0, style=solid];
m2_38 -> m2_39  [color=green, key=0, style=solid];
m2_38 -> m2_44  [color=green, key=2, style=dotted];
m2_39 -> m2_40  [color=green, key=0, style=solid];
m2_39 -> m2_26  [color=green, key=2, style=dotted];
m2_39 -> m2_41  [color=green, key=1, label=queue, style=dashed];
m2_40 -> m2_41  [color=green, key=0, style=solid];
m2_40 -> m2_45  [color=green, key=2, style=dotted];
m2_41 -> m2_42  [color=green, key=0, style=solid];
m2_41 -> m2_46  [color=green, key=2, style=dotted];
m2_42 -> m2_43  [color=green, key=0, style=solid];
m2_42 -> m2_5  [color=green, key=2, style=dotted];
m2_43 -> m2_37  [color=blue, key=0, style=bold];
m2_26 -> m2_56  [color=green, key=0, style=solid];
m2_56 -> m2_57  [color=green, key=0, style=solid];
m2_56 -> m2_58  [color=green, key=2, style=dotted];
m2_57 -> m2_26  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [color=green, key=0, style=solid];
m2_1 -> m2_2  [color=green, key=0, style=solid];
m2_1 -> m2_4  [color=green, key=2, style=dotted];
m2_1 -> m2_6  [color=green, key=1, label="lambda expression", style=dashed];
m2_2 -> m2_3  [color=green, key=0, style=solid];
m2_2 -> m2_5  [color=green, key=2, style=dotted];
m2_3 -> m2_0  [color=blue, key=0, style=bold];
m2_44 -> m2_13  [color=green, key=3, label="Parameter variable string jobId", style=bold];
m2_44 -> m2_47  [color=green, key=0, style=solid];
m2_44 -> m2_48  [color=green, key=1, label=string, style=dashed];
m2_47 -> m2_48  [color=green, key=0, style=solid];
m2_47 -> m2_30  [color=green, key=2, style=dotted];
m2_47 -> m2_51  [color=green, key=1, label=messageQueue, style=dashed];
m2_48 -> m2_49  [color=green, key=0, style=solid];
m2_48 -> m2_54  [color=green, key=2, style=dotted];
m2_48 -> m2_35  [color=green, key=2, style=dotted];
m2_48 -> m2_51  [color=green, key=1, label=message, style=dashed];
m2_51 -> m2_52  [color=green, key=0, style=solid];
m2_51 -> m2_55  [color=green, key=2, style=dotted];
m2_49 -> m2_51  [color=green, key=1, label=transaction, style=dashed];
m2_49 -> m2_50  [color=green, key=0, style=solid];
m2_49 -> m2_31  [color=green, key=2, style=dotted];
m2_49 -> m2_52  [color=green, key=1, label=transaction, style=dashed];
m2_50 -> m2_51  [color=green, key=0, style=solid];
m2_50 -> m2_32  [color=green, key=2, style=dotted];
m2_52 -> m2_53  [color=green, key=0, style=solid];
m2_52 -> m2_36  [color=green, key=2, style=dotted];
m2_53 -> m2_44  [color=blue, key=0, style=bold];
m2_6 -> m2_7  [color=green, key=0, style=solid];
m2_7 -> m2_8  [color=green, key=0, style=solid];
m2_7 -> m2_9  [color=green, key=2, style=dotted];
m2_8 -> m2_6  [color=blue, key=0, style=bold];
m4_0 -> m4_1  [color=green, key=0, style=solid];
m4_1 -> m4_2  [color=green, key=0, style=solid];
m4_2 -> m4_0  [color=blue, key=0, style=bold];
m4_8 -> m4_9  [color=green, key=0, style=solid];
m4_8 -> m4_13  [color=green, key=1, label=string, style=dashed];
m4_9 -> m4_10  [color=green, key=0, style=solid];
m4_9 -> m4_11  [color=green, key=2, style=dotted];
m4_9 -> m4_12  [color=green, key=1, label="lambda expression", style=dashed];
m4_10 -> m4_8  [color=blue, key=0, style=bold];
m4_17 -> m4_18  [color=green, key=0, style=solid];
m4_17 -> m4_21  [color=green, key=1, label=string, style=dashed];
m4_18 -> m4_19  [color=green, key=0, style=solid];
m4_18 -> m4_11  [color=green, key=2, style=dotted];
m4_18 -> m4_20  [color=green, key=1, label="lambda expression", style=dashed];
m4_19 -> m4_17  [color=blue, key=0, style=bold];
m4_3 -> m4_4  [color=green, key=0, style=solid];
m4_4 -> m4_5  [color=green, key=0, style=solid];
m4_4 -> m4_6  [color=green, key=2, style=dotted];
m4_4 -> m4_7  [color=green, key=2, style=dotted];
m4_5 -> m4_3  [color=blue, key=0, style=bold];
m4_20 -> m4_21  [color=green, key=0, style=solid];
m4_12 -> m4_13  [color=green, key=0, style=solid];
m4_13 -> m4_14  [color=green, key=0, style=solid];
m4_13 -> m4_15  [color=green, key=2, style=dotted];
m4_13 -> m4_16  [color=green, key=2, style=dotted];
m4_14 -> m4_12  [color=blue, key=0, style=bold];
m4_21 -> m4_22  [color=green, key=0, style=solid];
m4_21 -> m4_23  [color=green, key=2, style=dotted];
m4_22 -> m4_20  [color=blue, key=0, style=bold];
m4_24 -> m4_1  [color=green, key=1, label="HangFire.States.ProcessingState", style=dashed];
m4_24 -> m4_4  [color=green, key=1, label="HangFire.States.ProcessingState", style=dashed];
m4_25 -> m4_13  [color=green, key=1, label=string, style=dashed];
m4_26 -> m4_21  [color=green, key=1, label=string, style=dashed];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_3  [key=0, style=solid];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_5  [key=0, style=solid];
m5_5 -> m5_6  [key=0, style=solid];
m5_6 -> m5_7  [key=0, style=solid];
m5_2 -> m5_7  [key=0, style=solid];
m5_2 -> m5_8  [key=2, style=dotted];
m5_4 -> m5_7  [key=0, style=solid];
m5_4 -> m5_8  [key=2, style=dotted];
m5_7 -> m5_0  [color=blue, key=0, style=bold];
m5_9 -> m5_5  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisProcessingJob", style=dashed];
m5_9 -> m5_6  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisProcessingJob", style=dashed];
m7_51 -> m7_52  [key=0, style=solid];
m7_52 -> m7_53  [key=0, style=solid];
m7_52 -> m7_57  [key=2, style=dotted];
m7_53 -> m7_54  [key=0, style=solid];
m7_53 -> m7_58  [key=2, style=dotted];
m7_54 -> m7_55  [key=0, style=solid];
m7_54 -> m7_59  [key=2, style=dotted];
m7_54 -> m7_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_55 -> m7_56  [key=0, style=solid];
m7_55 -> m7_59  [key=2, style=dotted];
m7_55 -> m7_63  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_56 -> m7_51  [color=blue, key=0, style=bold];
m7_35 -> m7_36  [key=0, style=solid];
m7_36 -> m7_37  [key=0, style=solid];
m7_36 -> m7_22  [key=2, style=dotted];
m7_36 -> m7_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_37 -> m7_38  [key=0, style=solid];
m7_37 -> m7_39  [key=2, style=dotted];
m7_38 -> m7_35  [color=blue, key=0, style=bold];
m7_76 -> m7_77  [key=0, style=solid];
m7_77 -> m7_78  [key=0, style=solid];
m7_77 -> m7_17  [key=2, style=dotted];
m7_77 -> m7_18  [key=2, style=dotted];
m7_77 -> m7_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_78 -> m7_79  [key=0, style=solid];
m7_78 -> m7_57  [key=2, style=dotted];
m7_79 -> m7_80  [key=0, style=solid];
m7_79 -> m7_58  [key=2, style=dotted];
m7_80 -> m7_81  [key=0, style=solid];
m7_80 -> m7_59  [key=2, style=dotted];
m7_80 -> m7_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_81 -> m7_76  [color=blue, key=0, style=bold];
m7_44 -> m7_45  [key=0, style=solid];
m7_45 -> m7_46  [key=0, style=solid];
m7_45 -> m7_22  [key=2, style=dotted];
m7_45 -> m7_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_46 -> m7_47  [key=0, style=solid];
m7_46 -> m7_39  [key=2, style=dotted];
m7_47 -> m7_44  [color=blue, key=0, style=bold];
m7_67 -> m7_68  [key=0, style=solid];
m7_68 -> m7_69  [key=0, style=solid];
m7_68 -> m7_57  [key=2, style=dotted];
m7_69 -> m7_70  [key=0, style=solid];
m7_69 -> m7_58  [key=2, style=dotted];
m7_70 -> m7_71  [key=0, style=solid];
m7_70 -> m7_59  [key=2, style=dotted];
m7_70 -> m7_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_70 -> m7_67  [color=darkorchid, key=3, label="Parameter variable string name", style=bold];
m7_71 -> m7_67  [color=blue, key=0, style=bold];
m7_0 -> m7_1  [color=red, key=0, style=solid];
m7_1 -> m7_2  [color=red, key=0, style=solid];
m7_1 -> m7_11  [color=red, key=2, style=dotted];
m7_2 -> m7_3  [color=red, key=0, style=solid];
m7_2 -> m7_12  [color=red, key=2, style=dotted];
m7_3 -> m7_4  [color=red, key=0, style=solid];
m7_3 -> m7_13  [color=red, key=2, style=dotted];
m7_4 -> m7_5  [color=red, key=0, style=solid];
m7_4 -> m7_14  [color=red, key=2, style=dotted];
m7_5 -> m7_6  [color=red, key=0, style=solid];
m7_5 -> m7_15  [color=red, key=2, style=dotted];
m7_6 -> m7_7  [color=red, key=0, style=solid];
m7_6 -> m7_16  [color=red, key=2, style=dotted];
m7_7 -> m7_8  [color=red, key=0, style=solid];
m7_7 -> m7_17  [color=red, key=2, style=dotted];
m7_7 -> m7_18  [color=red, key=2, style=dotted];
m7_7 -> m7_19  [color=red, key=1, label="lambda expression", style=dashed];
m7_8 -> m7_9  [color=red, key=0, style=solid];
m7_8 -> m7_17  [color=red, key=2, style=dotted];
m7_8 -> m7_18  [color=red, key=2, style=dotted];
m7_8 -> m7_24  [color=red, key=1, label="lambda expression", style=dashed];
m7_9 -> m7_10  [color=red, key=0, style=solid];
m7_9 -> m7_17  [color=red, key=2, style=dotted];
m7_9 -> m7_18  [color=red, key=2, style=dotted];
m7_9 -> m7_28  [color=red, key=1, label="lambda expression", style=dashed];
m7_10 -> m7_0  [color=blue, key=0, style=bold];
m7_85 -> m7_86  [key=0, style=solid];
m7_19 -> m7_20  [color=red, key=0, style=solid];
m7_24 -> m7_25  [color=red, key=0, style=solid];
m7_28 -> m7_29  [color=red, key=0, style=solid];
m7_20 -> m7_21  [color=red, key=0, style=solid];
m7_20 -> m7_22  [color=red, key=2, style=dotted];
m7_20 -> m7_23  [color=red, key=2, style=dotted];
m7_21 -> m7_19  [color=blue, key=0, style=bold];
m7_25 -> m7_26  [color=red, key=0, style=solid];
m7_25 -> m7_27  [color=red, key=2, style=dotted];
m7_26 -> m7_24  [color=blue, key=0, style=bold];
m7_29 -> m7_30  [color=red, key=0, style=solid];
m7_29 -> m7_22  [color=red, key=2, style=dotted];
m7_29 -> m7_31  [color=red, key=2, style=dotted];
m7_29 -> m7_32  [color=red, key=1, label="lambda expression", style=dashed];
m7_30 -> m7_28  [color=blue, key=0, style=bold];
m7_32 -> m7_33  [color=red, key=0, style=solid];
m7_33 -> m7_34  [color=red, key=0, style=solid];
m7_34 -> m7_32  [color=blue, key=0, style=bold];
m7_40 -> m7_41  [key=0, style=solid];
m7_41 -> m7_42  [key=0, style=solid];
m7_41 -> m7_43  [key=2, style=dotted];
m7_42 -> m7_40  [color=blue, key=0, style=bold];
m7_48 -> m7_49  [key=0, style=solid];
m7_49 -> m7_50  [key=0, style=solid];
m7_49 -> m7_43  [key=2, style=dotted];
m7_50 -> m7_48  [color=blue, key=0, style=bold];
m7_60 -> m7_61  [key=0, style=solid];
m7_63 -> m7_64  [key=0, style=solid];
m7_61 -> m7_62  [key=0, style=solid];
m7_61 -> m7_27  [key=2, style=dotted];
m7_62 -> m7_60  [color=blue, key=0, style=bold];
m7_64 -> m7_65  [key=0, style=solid];
m7_64 -> m7_66  [key=2, style=dotted];
m7_65 -> m7_63  [color=blue, key=0, style=bold];
m7_72 -> m7_73  [key=0, style=solid];
m7_73 -> m7_74  [key=0, style=solid];
m7_73 -> m7_22  [key=2, style=dotted];
m7_73 -> m7_75  [key=2, style=dotted];
m7_74 -> m7_72  [color=blue, key=0, style=bold];
m7_82 -> m7_83  [key=0, style=solid];
m7_88 -> m7_89  [key=0, style=solid];
m7_83 -> m7_84  [key=0, style=solid];
m7_83 -> m7_22  [key=2, style=dotted];
m7_83 -> m7_31  [key=2, style=dotted];
m7_83 -> m7_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_84 -> m7_82  [color=blue, key=0, style=bold];
m7_86 -> m7_87  [key=0, style=solid];
m7_87 -> m7_85  [color=blue, key=0, style=bold];
m7_89 -> m7_90  [key=0, style=solid];
m7_89 -> m7_22  [key=2, style=dotted];
m7_89 -> m7_75  [key=2, style=dotted];
m7_90 -> m7_88  [color=blue, key=0, style=bold];
m7_57 -> m7_91  [key=0, style=solid];
m7_91 -> m7_92  [key=0, style=solid];
m7_91 -> m7_43  [key=2, style=dotted];
m7_92 -> m7_57  [color=blue, key=0, style=bold];
m7_93 -> m7_1  [color=red, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_2  [color=red, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_3  [color=red, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_4  [color=red, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_5  [color=red, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_6  [color=red, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_7  [color=red, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_8  [color=red, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_9  [color=red, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_36  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_41  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_45  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_49  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_52  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_53  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_54  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_55  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_68  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_69  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_70  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_77  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_78  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_79  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_80  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m7_93 -> m7_91  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m8_13 -> m8_14  [key=0, style=solid];
m8_5 -> m8_7  [key=0, style=solid];
m8_5 -> m8_6  [key=0, style=solid];
m8_79 -> m8_83  [key=0, style=solid];
m8_79 -> m8_85  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateChangingContext", style=dashed];
m8_79 -> m8_86  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateChangingContext", style=dashed];
m8_79 -> m8_87  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateChangingContext", style=dashed];
m8_79 -> m8_89  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateChangingContext", style=dashed];
m8_79 -> m8_91  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateChangingContext", style=dashed];
m8_79 -> m8_67  [color=darkorchid, key=3, label="Parameter variable HangFire.Common.States.StateChangingContext context", style=bold];
m8_79 -> m8_68  [color=darkorchid, key=3, label="Parameter variable HangFire.Common.Filters.JobFilterInfo filterInfo", style=bold];
m8_83 -> m8_84  [key=0, style=solid];
m8_85 -> m8_86  [key=0, style=solid];
m8_85 -> m8_87  [color=darkseagreen4, key=1, label=oldState, style=dashed];
m8_85 -> m8_89  [color=darkseagreen4, key=1, label=oldState, style=dashed];
m8_86 -> m8_87  [key=0, style=solid];
m8_86 -> m8_93  [key=2, style=dotted];
m8_87 -> m8_88  [key=0, style=solid];
m8_87 -> m8_84  [key=0, style=solid];
m8_89 -> m8_90  [key=0, style=solid];
m8_89 -> m8_95  [key=2, style=dotted];
m8_91 -> m8_92  [key=0, style=solid];
m8_84 -> m8_85  [key=0, style=solid];
m8_84 -> m8_91  [key=0, style=solid];
m8_84 -> m8_86  [color=darkseagreen4, key=1, label=filter, style=dashed];
m8_88 -> m8_89  [key=0, style=solid];
m8_88 -> m8_94  [key=2, style=dotted];
m8_88 -> m8_90  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m8_90 -> m8_84  [key=0, style=solid];
m8_90 -> m8_96  [key=2, style=dotted];
m8_92 -> m8_79  [color=blue, key=0, style=bold];
m8_62 -> m8_63  [key=0, style=solid];
m8_64 -> m8_62  [color=blue, key=0, style=bold];
m8_37 -> m8_38  [key=0, style=solid];
m8_37 -> m8_51  [key=2, style=dotted];
m8_37 -> m8_52  [key=2, style=dotted];
m8_37 -> m8_53  [key=2, style=dotted];
m8_37 -> m8_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_37 -> m8_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_37 -> m8_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_37 -> m8_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_37 -> m8_40  [color=darkseagreen4, key=1, label=parts, style=dashed];
m8_37 -> m8_41  [color=darkseagreen4, key=1, label=parts, style=dashed];
m8_37 -> m8_45  [color=darkseagreen4, key=1, label=parts, style=dashed];
m8_37 -> m8_46  [color=darkseagreen4, key=1, label=parts, style=dashed];
m8_20 -> m8_21  [color=green, key=0, style=solid];
m8_21 -> m8_22  [color=green, key=0, style=solid];
m8_21 -> m8_23  [color=green, key=2, style=dotted];
m8_21 -> m8_14  [color=green, key=2, style=dotted];
m8_21 -> m8_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m8_21 -> m8_26  [color=darkseagreen4, key=1, label="HangFire.Common.States.State", style=dashed];
m8_21 -> m8_28  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
m8_21 -> m8_29  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
m8_21 -> m8_30  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
m8_21 -> m8_31  [color=darkseagreen4, key=1, label="HangFire.Common.States.State", style=dashed];
m8_22 -> m8_20  [color=blue, key=0, style=bold];
m8_22 -> m8_23  [key=0, style=solid];
m8_22 -> m8_24  [key=0, style=solid];
m8_35 -> m8_36  [key=0, style=solid];
m8_36 -> m8_37  [key=0, style=solid];
m8_36 -> m8_36  [color=darkorchid, key=3, label="Local variable string canNotParseMessage", style=bold];
m8_36 -> m8_47  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m8_36 -> m8_49  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m8_38 -> m8_39  [key=0, style=solid];
m8_38 -> m8_54  [key=2, style=dotted];
m8_38 -> m8_41  [color=darkseagreen4, key=1, label=builder, style=dashed];
m8_38 -> m8_42  [color=darkseagreen4, key=1, label=builder, style=dashed];
m8_38 -> m8_43  [color=darkseagreen4, key=1, label=builder, style=dashed];
m8_38 -> m8_46  [color=darkseagreen4, key=1, label=builder, style=dashed];
m8_38 -> m8_47  [color=darkseagreen4, key=1, label=builder, style=dashed];
m8_40 -> m8_41  [key=0, style=solid];
m8_40 -> m8_39  [key=0, style=solid];
m8_40 -> m8_55  [key=2, style=dotted];
m8_40 -> m8_43  [color=darkseagreen4, key=1, label="HangFire.Common.States.State", style=dashed];
m8_40 -> m8_45  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m8_40 -> m8_47  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_40 -> m8_48  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_40 -> m8_51  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m8_40 -> m8_56  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_40 -> m8_57  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_40 -> m8_50  [color=darkorchid, key=3, label="method methodReturn bool TryToChangeState", style=bold];
m8_41 -> m8_42  [key=0, style=solid];
m8_41 -> m8_56  [key=2, style=dotted];
m8_41 -> m8_43  [key=0, style=solid];
m8_45 -> m8_46  [key=0, style=solid];
m8_45 -> m8_44  [key=0, style=solid];
m8_45 -> m8_55  [key=2, style=dotted];
m8_45 -> m8_47  [key=0, style=solid];
m8_46 -> m8_47  [key=0, style=solid];
m8_46 -> m8_56  [key=2, style=dotted];
m8_46 -> m8_59  [key=0, style=solid];
m8_46 -> m8_5  [key=2, style=dotted];
m8_47 -> m8_50  [key=0, style=solid];
m8_47 -> m8_58  [key=2, style=dotted];
m8_47 -> m8_48  [key=0, style=solid];
m8_47 -> m8_60  [key=2, style=dotted];
m8_49 -> m8_50  [key=0, style=solid];
m8_49 -> m8_51  [key=0, style=solid];
m8_39 -> m8_40  [key=0, style=solid];
m8_39 -> m8_41  [color=darkseagreen4, key=1, label=alias, style=dashed];
m8_39 -> m8_42  [key=0, style=solid];
m8_39 -> m8_67  [key=0, style=solid];
m8_39 -> m8_68  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateContext", style=dashed];
m8_39 -> m8_70  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateContext", style=dashed];
m8_39 -> m8_74  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateContext", style=dashed];
m8_39 -> m8_30  [color=darkorchid, key=3, label="Parameter variable HangFire.Common.States.StateContext context", style=bold];
m8_39 -> m8_57  [color=darkorchid, key=3, label="Parameter variable HangFire.Common.States.StateContext context", style=bold];
m8_39 -> m8_31  [color=darkorchid, key=3, label="Parameter variable string oldStateName", style=bold];
m8_42 -> m8_43  [key=0, style=solid];
m8_42 -> m8_44  [key=0, style=solid];
m8_42 -> m8_59  [key=0, style=solid];
m8_42 -> m8_5  [key=2, style=dotted];
m8_43 -> m8_44  [key=0, style=solid];
m8_43 -> m8_57  [key=2, style=dotted];
m8_43 -> m8_45  [key=0, style=solid];
m8_44 -> m8_45  [key=0, style=solid];
m8_44 -> m8_46  [color=darkseagreen4, key=1, label=alias, style=dashed];
m8_44 -> m8_47  [key=0, style=solid];
m8_44 -> m8_59  [key=0, style=solid];
m8_44 -> m8_5  [key=2, style=dotted];
m8_48 -> m8_49  [key=0, style=solid];
m8_48 -> m8_61  [key=2, style=dotted];
m8_48 -> m8_51  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m8_48 -> m8_54  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m8_48 -> m8_58  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m8_50 -> m8_35  [color=blue, key=0, style=bold];
m8_50 -> m8_59  [key=0, style=solid];
m8_51 -> m8_52  [key=0, style=solid];
m8_51 -> m8_53  [key=0, style=solid];
m8_51 -> m8_62  [key=2, style=dotted];
m8_56 -> m8_57  [key=0, style=solid];
m8_56 -> m8_64  [key=2, style=dotted];
m8_56 -> m8_65  [key=2, style=dotted];
m8_56 -> m8_56  [color=darkseagreen4, key=1, label="HangFire.Common.States.State", style=dashed];
m8_56 -> m8_58  [color=darkseagreen4, key=1, label="HangFire.Common.States.State", style=dashed];
m8_57 -> m8_58  [key=0, style=solid];
m8_57 -> m8_66  [key=2, style=dotted];
m8_54 -> m8_55  [key=0, style=solid];
m8_54 -> m8_57  [key=0, style=solid];
m8_54 -> m8_63  [key=2, style=dotted];
m8_58 -> m8_59  [key=0, style=solid];
m8_58 -> m8_39  [key=2, style=dotted];
m8_52 -> m8_59  [key=0, style=solid];
m8_53 -> m8_54  [key=0, style=solid];
m8_53 -> m8_31  [color=darkorchid, key=3, label="Local variable HangFire.Common.JobMethod jobMethod", style=bold];
m8_55 -> m8_56  [key=0, style=solid];
m8_59 -> m8_40  [color=blue, key=0, style=bold];
m8_59 -> m8_60  [key=0, style=solid];
m8_19 -> m8_17  [color=blue, key=0, style=bold];
m8_63 -> m8_64  [key=0, style=solid];
m8_63 -> m8_65  [key=2, style=dotted];
m8_0 -> m8_1  [key=0, style=solid];
m8_0 -> m8_3  [color=darkseagreen4, key=1, label="HangFire.Storage.IStorageConnection", style=dashed];
m8_1 -> m8_2  [key=0, style=solid];
m8_1 -> m8_3  [key=0, style=solid];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_5  [key=0, style=solid];
m8_2 -> m8_4  [key=0, style=solid];
m8_2 -> m8_5  [key=2, style=dotted];
m8_2 -> m8_7  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m8_2 -> m8_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_2 -> m8_3  [key=0, style=solid];
m8_2 -> m8_9  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m8_4 -> m8_0  [color=blue, key=0, style=bold];
m8_4 -> m8_12  [key=0, style=solid];
m8_4 -> m8_13  [key=2, style=dotted];
m8_23 -> m8_33  [key=0, style=solid];
m8_23 -> m8_5  [key=2, style=dotted];
m8_33 -> m8_21  [color=blue, key=0, style=bold];
m8_28 -> m8_30  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m8_28 -> m8_31  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m8_28 -> m8_29  [key=0, style=solid];
m8_28 -> m8_34  [key=2, style=dotted];
m8_30 -> m8_31  [key=0, style=solid];
m8_30 -> m8_34  [key=2, style=dotted];
m8_30 -> m8_38  [key=2, style=dotted];
m8_31 -> m8_32  [key=0, style=solid];
m8_31 -> m8_34  [key=2, style=dotted];
m8_31 -> m8_39  [key=2, style=dotted];
m8_29 -> m8_30  [key=0, style=solid];
m8_29 -> m8_33  [key=2, style=dotted];
m8_29 -> m8_35  [key=2, style=dotted];
m8_29 -> m8_36  [key=2, style=dotted];
m8_29 -> m8_37  [key=2, style=dotted];
m8_29 -> m8_32  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_32 -> m8_28  [color=blue, key=0, style=bold];
m8_32 -> m8_33  [key=0, style=solid];
m8_6 -> m8_7  [key=0, style=solid];
m8_6 -> m8_9  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<object>", style=dashed];
m8_6 -> m8_11  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<object>", style=dashed];
m8_6 -> m8_14  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<object>", style=dashed];
m8_6 -> m8_12  [key=0, style=solid];
m8_6 -> m8_13  [key=2, style=dotted];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_9  [key=0, style=solid];
m8_9 -> m8_10  [key=0, style=solid];
m8_9 -> m8_11  [key=0, style=solid];
m8_9 -> m8_12  [key=0, style=solid];
m8_11 -> m8_12  [key=0, style=solid];
m8_11 -> m8_15  [key=2, style=dotted];
m8_8 -> m8_12  [key=0, style=solid];
m8_8 -> m8_5  [key=2, style=dotted];
m8_8 -> m8_9  [key=0, style=solid];
m8_10 -> m8_12  [key=0, style=solid];
m8_10 -> m8_5  [key=2, style=dotted];
m8_10 -> m8_14  [key=2, style=dotted];
m8_10 -> m8_11  [key=0, style=solid];
m8_12 -> m8_6  [color=blue, key=0, style=bold];
m8_12 -> m8_2  [color=blue, key=0, style=bold];
m8_76 -> m8_39  [color=blue, key=0, style=bold];
m8_16 -> m8_17  [key=0, style=solid];
m8_17 -> m8_14  [key=2, style=dotted];
m8_17 -> m8_18  [key=0, style=solid];
m8_17 -> m8_19  [key=2, style=dotted];
m8_18 -> m8_16  [color=blue, key=0, style=bold];
m8_18 -> m8_19  [key=0, style=solid];
m8_18 -> m8_20  [key=2, style=dotted];
m8_27 -> m8_33  [key=0, style=solid];
m8_27 -> m8_5  [key=2, style=dotted];
m8_60 -> m8_51  [key=2, style=dotted];
m8_60 -> m8_61  [key=0, style=solid];
m8_66 -> m8_67  [key=0, style=solid];
m8_69 -> m8_70  [key=0, style=solid];
m8_69 -> m8_79  [key=2, style=dotted];
m8_14 -> m8_15  [key=0, style=solid];
m8_14 -> m8_16  [key=2, style=dotted];
m8_14 -> m8_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_14 -> m8_72  [key=0, style=solid];
m8_15 -> m8_13  [color=blue, key=0, style=bold];
m8_61 -> m8_59  [color=blue, key=0, style=bold];
m8_68 -> m8_66  [color=blue, key=0, style=bold];
m8_68 -> m8_69  [key=0, style=solid];
m8_68 -> m8_78  [key=2, style=dotted];
m8_68 -> m8_71  [color=darkseagreen4, key=1, label=filterInfo, style=dashed];
m8_67 -> m8_68  [key=0, style=solid];
m8_67 -> m8_77  [key=2, style=dotted];
m8_67 -> m8_69  [color=darkseagreen4, key=1, label=changingContext, style=dashed];
m8_70 -> m8_71  [key=0, style=solid];
m8_70 -> m8_80  [key=2, style=dotted];
m8_71 -> m8_69  [color=blue, key=0, style=bold];
m8_71 -> m8_76  [key=0, style=solid];
m8_71 -> m8_81  [key=2, style=dotted];
m8_74 -> m8_75  [key=0, style=solid];
m8_74 -> m8_80  [key=2, style=dotted];
m8_72 -> m8_73  [key=0, style=solid];
m8_72 -> m8_76  [key=2, style=dotted];
m8_72 -> m8_74  [color=darkseagreen4, key=1, label=connection, style=dashed];
m8_73 -> m8_74  [key=0, style=solid];
m8_73 -> m8_64  [key=2, style=dotted];
m8_73 -> m8_77  [key=2, style=dotted];
m8_75 -> m8_76  [key=0, style=solid];
m8_75 -> m8_82  [key=2, style=dotted];
m8_75 -> m8_81  [key=2, style=dotted];
m8_75 -> m8_14  [color=blue, key=0, style=bold];
m8_24 -> m8_25  [color=green, key=0, style=solid];
m8_24 -> m8_26  [key=0, style=solid];
m8_25 -> m8_26  [color=green, key=0, style=solid];
m8_25 -> m8_27  [color=green, key=2, style=dotted];
m8_25 -> m8_33  [key=0, style=solid];
m8_25 -> m8_5  [key=2, style=dotted];
m8_26 -> m8_24  [color=blue, key=0, style=bold];
m8_26 -> m8_27  [key=0, style=solid];
m8_26 -> m8_28  [key=0, style=solid];
m8_97 -> m8_98  [key=0, style=solid];
m8_98 -> m8_99  [key=0, style=solid];
m8_98 -> m8_100  [key=2, style=dotted];
m8_98 -> m8_101  [key=2, style=dotted];
m8_99 -> m8_97  [color=blue, key=0, style=bold];
m8_78 -> m8_21  [color=green, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_78 -> m8_25  [color=green, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_78 -> m8_7  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_78 -> m8_8  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_78 -> m8_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_78 -> m8_17  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_78 -> m8_30  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_78 -> m8_31  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_78 -> m8_37  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_78 -> m8_72  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_102 -> m8_3  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_11  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_29  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_31  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_47  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_48  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_58  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_67  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_68  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_69  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_70  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_71  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_74  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_75  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_88  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_102 -> m8_98  [color=darkseagreen4, key=1, label="HangFire.States.StateMachine", style=dashed];
m8_103 -> m8_14  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<object>", style=dashed];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_5  [key=2, style=dotted];
m9_2 -> m9_3  [key=0, style=solid];
m9_2 -> m9_6  [key=2, style=dotted];
m9_3 -> m9_4  [key=0, style=solid];
m9_4 -> m9_0  [color=blue, key=0, style=bold];
m9_7 -> m9_1  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m9_7 -> m9_2  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m9_7 -> m9_3  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m10_15 -> m10_29  [key=0, style=solid];
m10_29 -> m10_30  [key=0, style=solid];
m10_29 -> m10_9  [key=2, style=dotted];
m10_30 -> m10_15  [color=blue, key=0, style=bold];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_4  [key=2, style=dotted];
m10_1 -> m10_6  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_2 -> m10_3  [key=0, style=solid];
m10_2 -> m10_5  [key=2, style=dotted];
m10_3 -> m10_0  [color=blue, key=0, style=bold];
m10_23 -> m10_24  [key=0, style=solid];
m10_24 -> m10_25  [color=green, key=0, style=solid];
m10_24 -> m10_15  [key=2, style=dotted];
m10_24 -> m10_26  [color=darkseagreen4, key=1, label=context, style=dashed];
m10_24 -> m10_27  [color=darkseagreen4, key=1, label=context, style=dashed];
m10_25 -> m10_26  [color=green, key=0, style=solid];
m10_25 -> m10_22  [color=green, key=2, style=dotted];
m10_25 -> m10_27  [color=green, key=1, label=contextCopy, style=dashed];
m10_26 -> m10_27  [key=0, style=solid];
m10_26 -> m10_5  [key=2, style=dotted];
m10_27 -> m10_28  [key=0, style=solid];
m10_27 -> m10_5  [key=2, style=dotted];
m10_28 -> m10_23  [color=blue, key=0, style=bold];
m10_16 -> m10_17  [color=green, key=0, style=solid];
m10_17 -> m10_18  [color=green, key=0, style=solid];
m10_17 -> m10_4  [color=green, key=2, style=dotted];
m10_17 -> m10_19  [color=green, key=1, label="lambda expression", style=dashed];
m10_18 -> m10_16  [color=blue, key=0, style=bold];
m10_19 -> m10_20  [key=0, style=solid];
m10_6 -> m10_7  [key=0, style=solid];
m10_7 -> m10_8  [key=0, style=solid];
m10_7 -> m10_9  [key=2, style=dotted];
m10_8 -> m10_6  [color=blue, key=0, style=bold];
m10_20 -> m10_21  [key=0, style=solid];
m10_20 -> m10_22  [key=2, style=dotted];
m10_21 -> m10_19  [color=blue, key=0, style=bold];
m10_10 -> m10_11  [key=0, style=solid];
m10_11 -> m10_12  [key=0, style=solid];
m10_11 -> m10_15  [key=2, style=dotted];
m10_11 -> m10_13  [color=darkseagreen4, key=1, label=context, style=dashed];
m10_12 -> m10_13  [key=0, style=solid];
m10_12 -> m10_5  [key=2, style=dotted];
m10_13 -> m10_14  [key=0, style=solid];
m10_13 -> m10_5  [key=2, style=dotted];
m10_14 -> m10_10  [color=blue, key=0, style=bold];
m10_31 -> m10_11  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerContextFacts", style=dashed];
m10_31 -> m10_24  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerContextFacts", style=dashed];
m11_14 -> m11_15  [key=0, style=solid];
m11_15 -> m11_16  [key=0, style=solid];
m11_16 -> m11_14  [color=blue, key=0, style=bold];
m11_13 -> m11_17  [key=0, style=solid];
m11_13 -> m11_19  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_13 -> m11_22  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_13 -> m11_24  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_13 -> m11_25  [color=darkseagreen4, key=1, label="HangFire.Server.IJobPerformanceProcess", style=dashed];
m11_13 -> m11_31  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_17 -> m11_18  [key=0, style=solid];
m11_17 -> m11_33  [key=2, style=dotted];
m11_17 -> m11_19  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m11_17 -> m11_31  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m11_19 -> m11_20  [key=0, style=solid];
m11_19 -> m11_21  [key=0, style=solid];
m11_19 -> m11_35  [key=2, style=dotted];
m11_22 -> m11_23  [key=0, style=solid];
m11_22 -> m11_36  [key=2, style=dotted];
m11_22 -> m11_24  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m11_22 -> m11_25  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m11_24 -> m11_25  [key=0, style=solid];
m11_24 -> m11_38  [key=2, style=dotted];
m11_25 -> m11_26  [key=0, style=solid];
m11_25 -> m11_39  [key=2, style=dotted];
m11_31 -> m11_32  [key=0, style=solid];
m11_31 -> m11_35  [key=2, style=dotted];
m11_18 -> m11_19  [key=0, style=solid];
m11_18 -> m11_34  [key=2, style=dotted];
m11_20 -> m11_32  [key=0, style=solid];
m11_21 -> m11_22  [key=0, style=solid];
m11_23 -> m11_24  [key=0, style=solid];
m11_23 -> m11_37  [key=2, style=dotted];
m11_26 -> m11_27  [key=0, style=solid];
m11_26 -> m11_29  [key=0, style=solid];
m11_26 -> m11_31  [key=0, style=solid];
m11_26 -> m11_40  [key=2, style=dotted];
m11_27 -> m11_28  [key=0, style=solid];
m11_29 -> m11_30  [key=0, style=solid];
m11_28 -> m11_31  [key=0, style=solid];
m11_28 -> m11_41  [key=2, style=dotted];
m11_30 -> m11_31  [key=0, style=solid];
m11_30 -> m11_41  [key=2, style=dotted];
m11_32 -> m11_13  [color=blue, key=0, style=bold];
m11_6 -> m11_7  [key=0, style=solid];
m11_6 -> m11_8  [color=red, key=1, label="System.Threading.CancellationToken", style=dashed];
m11_7 -> m11_8  [color=red, key=0, style=solid];
m11_7 -> m11_11  [key=2, style=dotted];
m11_7 -> m11_9  [color=red, key=1, label=connection, style=dashed];
m11_8 -> m11_9  [color=red, key=0, style=solid];
m11_8 -> m11_12  [color=red, key=2, style=dotted];
m11_9 -> m11_10  [color=red, key=0, style=solid];
m11_9 -> m11_13  [color=red, key=2, style=dotted];
m11_10 -> m11_6  [color=blue, key=0, style=bold];
m11_0 -> m11_1  [key=0, style=solid];
m11_0 -> m11_3  [color=darkseagreen4, key=1, label="HangFire.Server.WorkerContext", style=dashed];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_3  [key=0, style=solid];
m11_3 -> m11_4  [key=0, style=solid];
m11_2 -> m11_4  [key=0, style=solid];
m11_2 -> m11_5  [key=2, style=dotted];
m11_4 -> m11_0  [color=blue, key=0, style=bold];
m11_42 -> m11_3  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m11_42 -> m11_7  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m11_42 -> m11_8  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m11_42 -> m11_9  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m11_42 -> m11_15  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m11_42 -> m11_17  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m11_42 -> m11_18  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m11_42 -> m11_24  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m12_3 -> m12_4  [key=0, style=solid];
m12_4 -> m12_5  [key=0, style=solid];
m12_4 -> m12_6  [key=2, style=dotted];
m12_4 -> m12_7  [key=2, style=dotted];
m12_4 -> m12_8  [key=2, style=dotted];
m12_4 -> m12_9  [key=2, style=dotted];
m12_4 -> m12_4  [color=darkorchid, key=3, label="Local variable string arrangeSql", style=bold];
m12_5 -> m12_3  [color=blue, key=0, style=bold];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid];
m12_2 -> m12_0  [color=blue, key=0, style=bold];
m12_10 -> m12_11  [key=0, style=solid];
m12_10 -> m12_15  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_11 -> m12_12  [key=0, style=solid];
m12_11 -> m12_13  [key=2, style=dotted];
m12_11 -> m12_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_12 -> m12_10  [color=blue, key=0, style=bold];
m12_22 -> m12_23  [key=0, style=solid];
m12_15 -> m12_16  [key=0, style=solid];
m12_15 -> m12_17  [key=2, style=dotted];
m12_15 -> m12_18  [key=2, style=dotted];
m12_14 -> m12_15  [key=0, style=solid];
m12_16 -> m12_14  [color=blue, key=0, style=bold];
m12_23 -> m12_24  [key=0, style=solid];
m12_23 -> m12_25  [key=2, style=dotted];
m12_24 -> m12_22  [color=blue, key=0, style=bold];
m12_19 -> m12_20  [key=0, style=solid];
m12_19 -> m12_23  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_20 -> m12_21  [key=0, style=solid];
m12_20 -> m12_13  [key=2, style=dotted];
m12_20 -> m12_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_21 -> m12_19  [color=blue, key=0, style=bold];
m12_26 -> m12_1  [color=darkseagreen4, key=1, label="HangFire.States.FailedState", style=dashed];
m12_26 -> m12_4  [color=darkseagreen4, key=1, label="HangFire.States.FailedState", style=dashed];
m12_27 -> m12_15  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_28 -> m12_23  [color=darkseagreen4, key=1, label=string, style=dashed];
}
