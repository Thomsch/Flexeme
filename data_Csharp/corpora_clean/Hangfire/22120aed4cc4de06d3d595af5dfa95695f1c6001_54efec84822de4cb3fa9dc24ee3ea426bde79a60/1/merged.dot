digraph  {
n73 [label="HangFire.BackgroundJobServer", span=""];
n0 [label="Entry HangFire.BackgroundJobServer.BackgroundJobServer()", span="36-36", cluster="HangFire.BackgroundJobServer.BackgroundJobServer()"];
n1 [label="Exit HangFire.BackgroundJobServer.BackgroundJobServer()", span="36-36", cluster="HangFire.BackgroundJobServer.BackgroundJobServer()"];
n2 [label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", span="41-41", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)"];
n3 [label="Exit HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", span="41-41", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)"];
n4 [label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", span="46-46", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)"];
n5 [label="options == null", span="48-48", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)"];
n7 [label="storage == null", span="49-49", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)"];
n9 [label="_options = options", span="51-51", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)"];
n10 [label="_storage = storage", span="52-52", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)"];
n6 [label="throw new ArgumentNullException(''options'');", span="48-48", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)"];
n8 [label="throw new ArgumentNullException(''storage'');", span="49-49", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)"];
n11 [label="_serverId = String.Format(''{0}:{1}'', _options.ServerName.ToLowerInvariant(), Process.GetCurrentProcess().Id)", span="54-54", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)"];
n12 [label="_serverRunner = GetServerRunner()", span="57-57", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)"];
n15 [label="Entry string.ToLowerInvariant()", span="0-0", cluster="string.ToLowerInvariant()"];
n16 [label="Entry System.Diagnostics.Process.GetCurrentProcess()", span="0-0", cluster="System.Diagnostics.Process.GetCurrentProcess()"];
n17 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)"];
n13 [label="Exit HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", span="46-46", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)"];
n14 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n18 [label="Entry HangFire.BackgroundJobServer.GetServerRunner()", span="77-77", cluster="HangFire.BackgroundJobServer.GetServerRunner()"];
n19 [label="Entry HangFire.BackgroundJobServer.Start()", span="60-60", cluster="HangFire.BackgroundJobServer.Start()"];
n20 [label="Logger.Info(''Starting HangFire Server...'')", span="62-62", cluster="HangFire.BackgroundJobServer.Start()"];
n21 [label="_serverRunner.Start()", span="63-63", cluster="HangFire.BackgroundJobServer.Start()"];
n23 [label="Entry Unk.Info", span="", cluster="Unk.Info"];
n22 [label="Exit HangFire.BackgroundJobServer.Start()", span="60-60", cluster="HangFire.BackgroundJobServer.Start()"];
n24 [label="Entry HangFire.Server.IServerComponentRunner.Start()", span="22-22", cluster="HangFire.Server.IServerComponentRunner.Start()"];
n25 [label="Entry HangFire.BackgroundJobServer.Stop()", span="66-66", cluster="HangFire.BackgroundJobServer.Stop()"];
n26 [label="_serverRunner.Stop()", span="68-68", cluster="HangFire.BackgroundJobServer.Stop()"];
n27 [label="Exit HangFire.BackgroundJobServer.Stop()", span="66-66", cluster="HangFire.BackgroundJobServer.Stop()"];
n28 [label="Entry HangFire.Server.IServerComponentRunner.Stop()", span="23-23", cluster="HangFire.Server.IServerComponentRunner.Stop()"];
n29 [label="Entry HangFire.BackgroundJobServer.Dispose()", span="71-71", cluster="HangFire.BackgroundJobServer.Dispose()"];
n30 [label="_serverRunner.Dispose()", span="73-73", cluster="HangFire.BackgroundJobServer.Dispose()"];
n31 [label="Logger.Info(''HangFire Server stopped.'')", span="74-74", cluster="HangFire.BackgroundJobServer.Dispose()"];
n33 [label="Entry System.IDisposable.Dispose()", span="0-0", cluster="System.IDisposable.Dispose()"];
n32 [label="Exit HangFire.BackgroundJobServer.Dispose()", span="71-71", cluster="HangFire.BackgroundJobServer.Dispose()"];
n34 [label="var context = new ServerContext\r\n            {\r\n                Queues = _options.Queues,\r\n                WorkerCount = _options.WorkerCount\r\n            }", span="79-83", cluster="HangFire.BackgroundJobServer.GetServerRunner()"];
n35 [label="var server = new ServerCore(\r\n                _serverId, \r\n                context, \r\n                _storage, \r\n                new Lazy<IServerComponentRunner>(GetServerComponentsRunner))", span="85-89", cluster="HangFire.BackgroundJobServer.GetServerRunner()"];
n38 [label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18", cluster="HangFire.Server.ServerContext.ServerContext()"];
n36 [label="return new ServerComponentRunner(\r\n                server, \r\n                new ServerComponentRunnerOptions\r\n                {\r\n                    ShutdownTimeout = _options.ShutdownTimeout\r\n                });", span="91-96", cluster="HangFire.BackgroundJobServer.GetServerRunner()"];
n39 [label="Entry HangFire.Server.ServerCore.ServerCore(string, HangFire.Server.ServerContext, HangFire.JobStorage, System.Lazy<HangFire.Server.IServerComponentRunner>)", span="31-31", cluster="HangFire.Server.ServerCore.ServerCore(string, HangFire.Server.ServerContext, HangFire.JobStorage, System.Lazy<HangFire.Server.IServerComponentRunner>)"];
n40 [label="Entry System.Lazy<T>.Lazy(System.Func<T>)", span="0-0", cluster="System.Lazy<T>.Lazy(System.Func<T>)"];
n37 [label="Exit HangFire.BackgroundJobServer.GetServerRunner()", span="77-77", cluster="HangFire.BackgroundJobServer.GetServerRunner()"];
n41 [label="Entry HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent, HangFire.Server.ServerComponentRunnerOptions)", span="41-41", cluster="HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent, HangFire.Server.ServerComponentRunnerOptions)"];
n42 [label="Entry HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", span="24-24", cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()"];
n43 [label="Entry HangFire.BackgroundJobServer.GetServerComponentsRunner()", span="99-99", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()"];
n44 [label="var componentRunners = new List<IServerComponentRunner>()", span="101-101", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()"];
n45 [label="componentRunners.AddRange(GetCommonComponentRunners())", span="103-103", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()"];
n49 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n46 [label="componentRunners.AddRange(GetStorageComponentRunners())", span="104-104", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()"];
n47 [label="return new ServerComponentRunnerCollection(componentRunners);", span="106-106", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()"];
n50 [label="Entry HangFire.BackgroundJobServer.GetCommonComponentRunners()", span="109-109", cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()"];
n51 [label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0", cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)"];
n52 [label="Entry HangFire.BackgroundJobServer.GetStorageComponentRunners()", span="121-121", cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()"];
n48 [label="Exit HangFire.BackgroundJobServer.GetServerComponentsRunner()", span="99-99", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()"];
n53 [label="Entry HangFire.Server.ServerComponentRunnerCollection.ServerComponentRunnerCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerComponentRunner>)", span="26-26", cluster="HangFire.Server.ServerComponentRunnerCollection.ServerComponentRunnerCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerComponentRunner>)"];
n54 [label="yield return new ServerComponentRunner(\r\n                new ServerHeartbeat(_storage, _serverId));", span="111-112", cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()"];
n55 [label="yield return new WorkerManager(\r\n                _serverId, _options.WorkerCount, _options.Queues, _storage, new JobPerformanceProcess(), new StateMachineFactory(_storage));", span="114-115", cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()"];
n56 [label="yield return new ServerComponentRunner(\r\n                new ServerWatchdog(_storage));", span="117-118", cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()"];
n58 [label="Entry HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent)", span="36-36", cluster="HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent)"];
n59 [label="Entry HangFire.Server.ServerHeartbeat.ServerHeartbeat(HangFire.JobStorage, string)", span="28-28", cluster="HangFire.Server.ServerHeartbeat.ServerHeartbeat(HangFire.JobStorage, string)"];
n60 [label="Entry HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)", span="32-32", cluster="HangFire.Server.WorkerManager.WorkerManager(string, int, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.States.IStateMachineFactory)"];
n61 [label="Entry HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()", span="28-28", cluster="HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()"];
n62 [label="Entry HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", span="16-16", cluster="HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)"];
n57 [label="Exit HangFire.BackgroundJobServer.GetCommonComponentRunners()", span="109-109", cluster="HangFire.BackgroundJobServer.GetCommonComponentRunners()"];
n63 [label="Entry HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="29-29", cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)"];
n64 [label="var components = _storage.GetComponents()", span="123-123", cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()"];
n65 [label="return components\r\n                .Select(component => new ServerComponentRunner(component))\r\n                .ToArray();", span="125-127", cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()"];
n67 [label="Entry HangFire.JobStorage.GetComponents()", span="57-57", cluster="HangFire.JobStorage.GetComponents()"];
n66 [label="Exit HangFire.BackgroundJobServer.GetStorageComponentRunners()", span="121-121", cluster="HangFire.BackgroundJobServer.GetStorageComponentRunners()"];
n68 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n69 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
n70 [label="Entry lambda expression", span="126-126", cluster="lambda expression"];
n71 [label="new ServerComponentRunner(component)", span="126-126", cluster="lambda expression"];
n72 [label="Exit lambda expression", span="126-126", cluster="lambda expression"];
m0_35 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForStorage()", span="47-47", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForStorage()", file="BackgroundJobServerFacts.cs"];
m0_36 [label="JobStorage.Current = new Mock<JobStorage>().Object", span="49-49", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForStorage()", file="BackgroundJobServerFacts.cs"];
m0_37 [label="Assert.DoesNotThrow(() => new BackgroundJobServer(_options))", span="50-50", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForStorage()", file="BackgroundJobServerFacts.cs"];
m0_38 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForStorage()", span="47-47", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForStorage()", file="BackgroundJobServerFacts.cs"];
m0_86 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", span="96-96", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="BackgroundJobServerFacts.cs"];
m0_87 [label="var server = CreateServer()", span="99-99", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="BackgroundJobServerFacts.cs"];
m0_88 [label="var runners = server.GetServerComponentsRunner()", span="102-102", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="BackgroundJobServerFacts.cs"];
m0_89 [label="Assert.True(runners.Select(x => x.GetType()).Contains(typeof(WorkerManager)))", span="105-105", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="BackgroundJobServerFacts.cs"];
m0_90 [label="var componentTypes = runners.OfType<ServerComponentRunner>()\r\n                .Select(x => x.Component)\r\n                .Select(x => x.GetType())\r\n                .ToArray()", span="107-110", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="BackgroundJobServerFacts.cs"];
m0_91 [label="Assert.Contains(typeof(ServerHeartbeat), componentTypes)", span="112-112", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="BackgroundJobServerFacts.cs"];
m0_92 [label="Assert.Contains(typeof(ServerWatchdog), componentTypes)", span="113-113", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="BackgroundJobServerFacts.cs"];
m0_93 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", span="96-96", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsDefaultComponents()", file="BackgroundJobServerFacts.cs"];
m0_22 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="BackgroundJobServerFacts.cs"];
m0_65 [label="Entry Unk.Stop", span="", cluster="Unk.Stop", file="BackgroundJobServerFacts.cs"];
m0_83 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", span="136-136", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", file="BackgroundJobServerFacts.cs"];
m0_127 [label="return new BackgroundJobServer(_options, _storage.Object);", span="138-138", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", file="BackgroundJobServerFacts.cs"];
m0_128 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", span="136-136", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.CreateServer()", file="BackgroundJobServerFacts.cs"];
m0_61 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheServerComponentRunner()", span="69-69", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheServerComponentRunner()", file="BackgroundJobServerFacts.cs"];
m0_62 [label="_serverMock.Object.Stop()", span="71-71", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheServerComponentRunner()", file="BackgroundJobServerFacts.cs"];
m0_63 [label="_runner.Verify(x => x.Stop())", span="73-73", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheServerComponentRunner()", file="BackgroundJobServerFacts.cs"];
m0_64 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheServerComponentRunner()", span="69-69", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheServerComponentRunner()", file="BackgroundJobServerFacts.cs"];
m0_103 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="BackgroundJobServerFacts.cs"];
m0_39 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="BackgroundJobServerFacts.cs"];
m0_69 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", span="77-77", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", file="BackgroundJobServerFacts.cs"];
m0_70 [label="_serverMock.Object.Dispose()", span="79-79", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", file="BackgroundJobServerFacts.cs"];
m0_71 [label="_runner.Verify(x => x.Dispose())", span="81-81", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", file="BackgroundJobServerFacts.cs"];
m0_72 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", span="77-77", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesServerComponentRunner()", file="BackgroundJobServerFacts.cs"];
m0_9 [label="Entry Mock<IServerComponentRunner>.cstr", span="", cluster="Mock<IServerComponentRunner>.cstr", file="BackgroundJobServerFacts.cs"];
m0_21 [label="Entry Unk.>", span="", cluster="Unk.>", file="BackgroundJobServerFacts.cs"];
m0_111 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", span="117-117", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="BackgroundJobServerFacts.cs"];
m0_112 [label="var storageComponent = new Mock<IServerComponent>()", span="120-120", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="BackgroundJobServerFacts.cs"];
m0_113 [label="_storage.Setup(x => x.GetComponents()).Returns(new[] { storageComponent.Object })", span="121-121", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="BackgroundJobServerFacts.cs"];
m0_117 [label="Assert.Contains(storageComponent.Object, components)", span="133-133", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="BackgroundJobServerFacts.cs"];
m0_114 [label="var server = CreateServer()", span="123-123", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="BackgroundJobServerFacts.cs"];
m0_115 [label="var runners = server.GetServerComponentsRunner()", span="126-126", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="BackgroundJobServerFacts.cs"];
m0_116 [label="var components = runners.OfType<ServerComponentRunner>()\r\n                .Select(x => x.Component)\r\n                .ToArray()", span="129-131", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="BackgroundJobServerFacts.cs"];
m0_118 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", span="117-117", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerComponentsRunner_ContainsStorageComponents()", file="BackgroundJobServerFacts.cs"];
m0_0 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", span="15-15", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m0_1 [label="_storage = new Mock<JobStorage>()", span="17-17", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m0_2 [label="_options = new BackgroundJobServerOptions()", span="18-18", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m0_3 [label="_runner = new Mock<IServerComponentRunner>()", span="20-20", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m0_4 [label="_serverMock = new Mock<BackgroundJobServer>(_options, _storage.Object)\r\n            {\r\n                CallBase = true\r\n            }", span="21-24", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m0_5 [label="_serverMock.Setup(x => x.GetServerRunner()).Returns(_runner.Object)", span="25-25", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m0_6 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", span="15-15", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m0_123 [label="Entry Unk.GetComponents", span="", cluster="Unk.GetComponents", file="BackgroundJobServerFacts.cs"];
m0_44 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForOptions()", span="54-54", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForOptions()", file="BackgroundJobServerFacts.cs"];
m0_45 [label="JobStorage.Current = new Mock<JobStorage>().Object", span="56-56", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForOptions()", file="BackgroundJobServerFacts.cs"];
m0_46 [label="Assert.DoesNotThrow(() => new BackgroundJobServer())", span="57-57", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForOptions()", file="BackgroundJobServerFacts.cs"];
m0_47 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForOptions()", span="54-54", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForOptions()", file="BackgroundJobServerFacts.cs"];
m0_77 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", span="85-85", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="BackgroundJobServerFacts.cs"];
m0_78 [label="var server = CreateServer()", span="87-87", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="BackgroundJobServerFacts.cs"];
m0_79 [label="var runner = server.GetServerRunner()", span="89-89", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="BackgroundJobServerFacts.cs"];
m0_80 [label="Assert.NotNull(runner)", span="91-91", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="BackgroundJobServerFacts.cs"];
m0_81 [label="Assert.IsType<ServerCore>(((ServerComponentRunner) runner).Component)", span="92-92", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="BackgroundJobServerFacts.cs"];
m0_82 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", span="85-85", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.GetServerRunner_ReturnsNonNullResult()", file="BackgroundJobServerFacts.cs"];
m0_85 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="BackgroundJobServerFacts.cs"];
m0_43 [label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", span="41-41", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", file="BackgroundJobServerFacts.cs"];
m0_11 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="BackgroundJobServerFacts.cs"];
m0_51 [label="Entry HangFire.BackgroundJobServer.BackgroundJobServer()", span="36-36", cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="BackgroundJobServerFacts.cs"];
m0_73 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="BackgroundJobServerFacts.cs"];
m0_34 [label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", span="46-46", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="BackgroundJobServerFacts.cs"];
m0_10 [label="Entry Mock<BackgroundJobServer>.cstr", span="", cluster="Mock<BackgroundJobServer>.cstr", file="BackgroundJobServerFacts.cs"];
m0_119 [label="Entry Mock<IServerComponent>.cstr", span="", cluster="Mock<IServerComponent>.cstr", file="BackgroundJobServerFacts.cs"];
m0_52 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheServerComponentRunner()", span="61-61", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheServerComponentRunner()", file="BackgroundJobServerFacts.cs"];
m0_53 [label="_serverMock.Object.Start()", span="63-63", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheServerComponentRunner()", file="BackgroundJobServerFacts.cs"];
m0_54 [label="_runner.Verify(x => x.Start())", span="65-65", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheServerComponentRunner()", file="BackgroundJobServerFacts.cs"];
m0_55 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheServerComponentRunner()", span="61-61", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheServerComponentRunner()", file="BackgroundJobServerFacts.cs"];
m0_94 [label="Entry HangFire.BackgroundJobServer.GetServerComponentsRunner()", span="99-99", cluster="HangFire.BackgroundJobServer.GetServerComponentsRunner()", file="BackgroundJobServerFacts.cs"];
m0_98 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="BackgroundJobServerFacts.cs"];
m0_17 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="29-29", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="BackgroundJobServerFacts.cs"];
m0_18 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobServer(null, _storage.Object))", span="31-32", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="BackgroundJobServerFacts.cs"];
m0_19 [label="Assert.Equal(''options'', exception.ParamName)", span="34-34", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="BackgroundJobServerFacts.cs"];
m0_20 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="29-29", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="BackgroundJobServerFacts.cs"];
m0_124 [label="Entry lambda expression", span="130-130", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_13 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_14 [label="x.GetServerRunner()", span="25-25", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_15 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_23 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_24 [label="new BackgroundJobServer(null, _storage.Object)", span="32-32", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_25 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_31 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_32 [label="new BackgroundJobServer(_options, null)", span="41-41", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_33 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_40 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_41 [label="new BackgroundJobServer(_options)", span="50-50", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_42 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_48 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_49 [label="new BackgroundJobServer()", span="57-57", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_50 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_58 [label="Entry lambda expression", span="65-65", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_59 [label="x.Start()", span="65-65", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_60 [label="Exit lambda expression", span="65-65", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_66 [label="Entry lambda expression", span="73-73", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_67 [label="x.Stop()", span="73-73", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_68 [label="Exit lambda expression", span="73-73", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_74 [label="Entry lambda expression", span="81-81", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_75 [label="x.Dispose()", span="81-81", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_76 [label="Exit lambda expression", span="81-81", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_100 [label="Entry lambda expression", span="105-105", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_104 [label="Entry lambda expression", span="108-108", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_107 [label="Entry lambda expression", span="109-109", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_101 [label="x.GetType()", span="105-105", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_102 [label="Exit lambda expression", span="105-105", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_105 [label="x.Component", span="108-108", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_106 [label="Exit lambda expression", span="108-108", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_108 [label="x.GetType()", span="109-109", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_109 [label="Exit lambda expression", span="109-109", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_120 [label="Entry lambda expression", span="121-121", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_121 [label="x.GetComponents()", span="121-121", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_122 [label="Exit lambda expression", span="121-121", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_125 [label="x.Component", span="130-130", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_126 [label="Exit lambda expression", span="130-130", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m0_96 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="BackgroundJobServerFacts.cs"];
m0_16 [label="Entry Unk.GetServerRunner", span="", cluster="Unk.GetServerRunner", file="BackgroundJobServerFacts.cs"];
m0_56 [label="Entry Unk.Start", span="", cluster="Unk.Start", file="BackgroundJobServerFacts.cs"];
m0_95 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="BackgroundJobServerFacts.cs"];
m0_110 [label="Entry Unk.GetType", span="", cluster="Unk.GetType", file="BackgroundJobServerFacts.cs"];
m0_27 [label="Entry HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="38-38", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundJobServerFacts.cs"];
m0_28 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobServer(_options, null))", span="40-41", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundJobServerFacts.cs"];
m0_29 [label="Assert.Equal(''storage'', exception.ParamName)", span="43-43", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundJobServerFacts.cs"];
m0_30 [label="Exit HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="38-38", cluster="HangFire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundJobServerFacts.cs"];
m0_97 [label="Entry Unk.True", span="", cluster="Unk.True", file="BackgroundJobServerFacts.cs"];
m0_84 [label="Entry HangFire.BackgroundJobServer.GetServerRunner()", span="77-77", cluster="HangFire.BackgroundJobServer.GetServerRunner()", file="BackgroundJobServerFacts.cs"];
m0_8 [label="Entry HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="11-11", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerFacts.cs"];
m0_12 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="BackgroundJobServerFacts.cs"];
m0_26 [label="Entry BackgroundJobServer.cstr", span="", cluster="BackgroundJobServer.cstr", file="BackgroundJobServerFacts.cs"];
m0_57 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="BackgroundJobServerFacts.cs"];
m0_7 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="BackgroundJobServerFacts.cs"];
m0_129 [label="HangFire.Core.Tests.BackgroundJobServerFacts", span="", file="BackgroundJobServerFacts.cs"];
m1_0 [label="Entry HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="11-11", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m1_1 [label="WorkerCount = Environment.ProcessorCount * 5", span="13-13", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m1_2 [label="ServerName = Environment.MachineName", span="14-14", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m1_3 [label="Queues = new[] { EnqueuedState.DefaultQueue }", span="15-15", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m1_4 [label="ShutdownTimeout = TimeSpan.FromSeconds(15)", span="16-16", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m1_5 [label="Exit HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="11-11", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", color=green, community=0, file="BackgroundJobServerOptions.cs"];
m1_6 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="BackgroundJobServerOptions.cs"];
m1_7 [label="HangFire.BackgroundJobServerOptions", span="", file="BackgroundJobServerOptions.cs"];
m2_0 [label="Entry Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", span="33-33", cluster="Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", file="BackgroundJobServerOptionsFacts.cs"];
m2_1 [label="Exit Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", span="33-33", cluster="Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", file="BackgroundJobServerOptionsFacts.cs"];
m3_11 [label="Entry string.EndsWith(string, System.StringComparison)", span="0-0", cluster="string.EndsWith(string, System.StringComparison)", file="ConnectionFacts.cs"];
m3_16 [label="Entry HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", span="41-41", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="ConnectionFacts.cs"];
m3_17 [label="Given(String.Format(''the '{0}' job'', jobId))", span="43-43", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="ConnectionFacts.cs"];
m3_18 [label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', queue),\r\n                jobId)", span="45-47", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="ConnectionFacts.cs"];
m3_19 [label="Exit HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", span="41-41", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="ConnectionFacts.cs"];
m3_2 [label="fontName.EndsWith(''.eot'', StringComparison.OrdinalIgnoreCase)", span="27-27", cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="ConnectionFacts.cs", color=green, community=0];
m3_3 [label="ContentType = ''application/vnd.ms-fontobject''", span="29-29", cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="ConnectionFacts.cs", color=green, community=0];
m3_4 [label="fontName.EndsWith(''.svg'', StringComparison.OrdinalIgnoreCase)", span="31-31", cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="ConnectionFacts.cs"];
m3_5 [label="ContentType = ''image/svg+xml''", span="33-33", cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="ConnectionFacts.cs"];
m3_43 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="ConnectionFacts.cs"];
m3_42 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount", file="ConnectionFacts.cs"];
m3_0 [label="Entry HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", span="14-14", cluster="HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", file="ConnectionFacts.cs"];
m3_1 [label="Exit HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", span="14-14", cluster="HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", color=green, community=0, file="ConnectionFacts.cs"];
m3_7 [label="Entry HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", span="25-25", cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="ConnectionFacts.cs"];
m3_9 [label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', queue),\r\n                JobSteps.DefaultJobId)", span="29-31", cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="ConnectionFacts.cs"];
m3_6 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="ConnectionFacts.cs"];
m3_8 [label="Given(''a job'')", span="27-27", cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="ConnectionFacts.cs"];
m3_10 [label="Exit HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", span="25-25", cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="ConnectionFacts.cs"];
m3_33 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", span="73-73", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="ConnectionFacts.cs"];
m3_34 [label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="75-76", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="ConnectionFacts.cs"];
m3_35 [label="CollectionAssert.DoesNotContain(jobIds, JobSteps.DefaultJobId)", span="78-78", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="ConnectionFacts.cs"];
m3_36 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", span="73-73", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="ConnectionFacts.cs"];
m3_30 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", span="67-67", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="ConnectionFacts.cs"];
m3_31 [label="Then(String.Format(''the '{0}' queue does not contain the job'', DefaultQueue))", span="69-69", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="ConnectionFacts.cs"];
m3_32 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", span="67-67", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="ConnectionFacts.cs"];
m3_24 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", span="57-57", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="ConnectionFacts.cs"];
m3_25 [label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="59-60", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="ConnectionFacts.cs"];
m3_26 [label="CollectionAssert.Contains(jobIds, JobSteps.DefaultJobId)", span="62-62", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="ConnectionFacts.cs"];
m3_27 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", span="57-57", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="ConnectionFacts.cs"];
m3_28 [label="Entry Unk.GetAllItemsFromList", span="", cluster="Unk.GetAllItemsFromList", file="ConnectionFacts.cs"];
m3_29 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="ConnectionFacts.cs"];
m3_23 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="ConnectionFacts.cs"];
m3_37 [label="Entry Unk.DoesNotContain", span="", cluster="Unk.DoesNotContain", file="ConnectionFacts.cs"];
m3_12 [label="HangFire.Web.FontsHandler", span="", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="ConnectionFacts.cs"];
m3_13 [label="Given(String.Format(''the '{0}' job in the '{1}' queue'', jobId, DefaultQueue))", span="37-37", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="ConnectionFacts.cs"];
m3_14 [label="Exit HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", span="35-35", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="ConnectionFacts.cs"];
m3_44 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="90-90", cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="ConnectionFacts.cs"];
m3_45 [label="var actualLength = Redis.Client.GetListCount(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="92-93", cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="ConnectionFacts.cs"];
m3_46 [label="Assert.AreEqual(length, actualLength)", span="94-94", cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="ConnectionFacts.cs"];
m3_47 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="90-90", cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="ConnectionFacts.cs"];
m3_20 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", span="51-51", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="ConnectionFacts.cs"];
m3_21 [label="Then(String.Format(''the '{0}' queue contains the job'', DefaultQueue))", span="53-53", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="ConnectionFacts.cs"];
m3_22 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", span="51-51", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="ConnectionFacts.cs"];
m3_38 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", span="82-82", cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="ConnectionFacts.cs"];
m3_39 [label="var length = Redis.Client.GetListCount(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="84-85", cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="ConnectionFacts.cs"];
m3_40 [label="Assert.AreEqual(0, length)", span="86-86", cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="ConnectionFacts.cs"];
m3_41 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", span="82-82", cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="ConnectionFacts.cs"];
m4_25 [label="Exit HangFire.Redis.RedisStorage.GetComponents()", span="78-78", cluster="HangFire.Redis.RedisStorage.GetComponents()", file="RedisStorage.cs"];
m4_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="RedisStorage.cs"];
m4_21 [label="Exit HangFire.Redis.RedisStorage.GetConnection()", span="73-73", cluster="HangFire.Redis.RedisStorage.GetConnection()", file="RedisStorage.cs"];
m4_0 [label="Entry HangFire.Tests.Server.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="RedisStorage.cs"];
m4_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="RedisStorage.cs"];
m4_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''SchedulePoller'', ''\r\n  As an Administrator (or a Developer), I want the scheduled \r\n  jobs to added '' +\r\n                    ''to their actual queues when their time has come.'', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-35", cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="RedisStorage.cs"];
m4_3 [label="testRunner.OnFeatureStart(featureInfo)", span="36-36", cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="RedisStorage.cs"];
m4_4 [label="Exit HangFire.Tests.Server.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="RedisStorage.cs"];
m4_45 [label="Entry Unk.And", span="", cluster="Unk.And", file="RedisStorage.cs"];
m4_46 [label="Entry Unk.But", span="", cluster="Unk.But", file="RedisStorage.cs"];
m4_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="RedisStorage.cs"];
m4_14 [label="Entry HangFire.Redis.RedisStorage.GetMonitoringApi()", span="68-68", cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="RedisStorage.cs"];
m4_15 [label="return new RedisMonitoringApi(_pooledManager.GetClient());", span="70-70", cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="RedisStorage.cs"];
m4_16 [label="Exit HangFire.Redis.RedisStorage.GetMonitoringApi()", span="68-68", cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="RedisStorage.cs"];
m4_17 [label="Entry RedisMonitoringApi.cstr", span="", cluster="RedisMonitoringApi.cstr", file="RedisStorage.cs"];
m4_26 [label="Entry HangFire.Redis.FetchedJobsWatcher.FetchedJobsWatcher(HangFire.JobStorage, HangFire.States.IStateMachineFactory)", span="33-33", cluster="HangFire.Redis.FetchedJobsWatcher.FetchedJobsWatcher(HangFire.JobStorage, HangFire.States.IStateMachineFactory)", file="RedisStorage.cs"];
m4_27 [label="Entry HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", span="16-16", cluster="HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", file="RedisStorage.cs"];
m4_28 [label="Exit HangFire.Tests.Server.SchedulePollerFeature.ScenarioCleanup()", span="67-67", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioCleanup()", file="RedisStorage.cs"];
m4_18 [label="Entry Unk.GetClient", span="", cluster="Unk.GetClient", file="RedisStorage.cs"];
m4_19 [label="Entry HangFire.Redis.RedisStorage.GetConnection()", span="73-73", cluster="HangFire.Redis.RedisStorage.GetConnection()", file="RedisStorage.cs"];
m4_20 [label="return new RedisConnection(_pooledManager.GetClient());", span="75-75", cluster="HangFire.Redis.RedisStorage.GetConnection()", file="RedisStorage.cs"];
m4_22 [label="Entry HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="RedisStorage.cs"];
m4_13 [label="Entry RedisClientManagerConfig.cstr", span="", cluster="RedisClientManagerConfig.cstr", file="RedisStorage.cs"];
m4_7 [label="HostAndPort = hostAndPort", span="48-48", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs"];
m4_43 [label="Entry Unk.When", span="", cluster="Unk.When", file="RedisStorage.cs"];
m4_58 [label="Entry HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", span="126-126", cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="RedisStorage.cs"];
m4_59 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Poller should enqueue only jobs in the Scheduled state'', ((string[])(null)))", span="128-128", cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="RedisStorage.cs"];
m4_60 [label="this.ScenarioSetup(scenarioInfo)", span="130-130", cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="RedisStorage.cs"];
m4_61 [label="testRunner.Given(''a scheduled job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="132-132", cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="RedisStorage.cs"];
m4_62 [label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="134-134", cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="RedisStorage.cs"];
m4_63 [label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="136-136", cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="RedisStorage.cs"];
m4_64 [label="testRunner.Then(''the job should be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="138-138", cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="RedisStorage.cs"];
m4_65 [label="testRunner.And(''the queue should not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="140-140", cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="RedisStorage.cs"];
m4_66 [label="this.ScenarioCleanup()", span="142-142", cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="RedisStorage.cs"];
m4_67 [label="Exit HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", span="126-126", cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="RedisStorage.cs"];
m4_36 [label="testRunner.And(''the schedule should not contain it anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="88-88", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="RedisStorage.cs"];
m4_37 [label="testRunner.But(''the queue should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="90-90", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="RedisStorage.cs"];
m4_38 [label="testRunner.And(''schedule poller should return \'true\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="92-92", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="RedisStorage.cs"];
m4_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="RedisStorage.cs"];
m4_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="RedisStorage.cs"];
m4_9 [label="Entry HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", span="40-40", cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", file="RedisStorage.cs"];
m4_10 [label="testRunner.OnFeatureEnd()", span="42-42", cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", file="RedisStorage.cs"];
m4_11 [label="testRunner = null", span="43-43", cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", file="RedisStorage.cs"];
m4_41 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="RedisStorage.cs"];
m4_47 [label="Entry HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", span="101-101", cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="RedisStorage.cs"];
m4_48 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Future jobs should not be enqueued'', ((string[])(null)))", span="103-103", cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="RedisStorage.cs"];
m4_49 [label="this.ScenarioSetup(scenarioInfo)", span="105-105", cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="RedisStorage.cs"];
m4_50 [label="testRunner.Given(''a future job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="107-107", cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="RedisStorage.cs"];
m4_51 [label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="109-109", cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="RedisStorage.cs"];
m4_52 [label="testRunner.Then(''the job should be in the Scheduled state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="111-111", cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="RedisStorage.cs"];
m4_53 [label="testRunner.And(''the schedule should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="113-113", cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="RedisStorage.cs"];
m4_54 [label="testRunner.And(''the queue should not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="115-115", cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="RedisStorage.cs"];
m4_55 [label="testRunner.And(''schedule poller should return \'false\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="117-117", cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="RedisStorage.cs"];
m4_56 [label="this.ScenarioCleanup()", span="119-119", cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="RedisStorage.cs"];
m4_57 [label="Exit HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", span="101-101", cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="RedisStorage.cs"];
m4_12 [label="Entry PooledRedisClientManager.cstr", span="", cluster="PooledRedisClientManager.cstr", file="RedisStorage.cs"];
m4_44 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="RedisStorage.cs"];
m4_42 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="RedisStorage.cs"];
m4_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="64-64", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="RedisStorage.cs"];
m4_24 [label="Exit HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", color=green, community=0, file="RedisStorage.cs"];
m4_30 [label="Entry HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", span="76-76", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="RedisStorage.cs"];
m4_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Scheduled jobs should be enqueued on their actual queues'', ((string[])(null)))", span="78-78", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="RedisStorage.cs"];
m4_32 [label="this.ScenarioSetup(scenarioInfo)", span="80-80", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", color=red, community=0, file="RedisStorage.cs"];
m4_33 [label="testRunner.Given(''a scheduled job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="82-82", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", color=red, community=0, file="RedisStorage.cs"];
m4_34 [label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="84-84", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="RedisStorage.cs"];
m4_35 [label="testRunner.Then(''the job should be in the Enqueued state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="86-86", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="RedisStorage.cs"];
m4_39 [label="this.ScenarioCleanup()", span="94-94", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="RedisStorage.cs"];
m4_40 [label="HangFire.Redis.RedisStorage", span="", cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="RedisStorage.cs"];
m4_68 [label="Entry HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", span="149-149", cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="RedisStorage.cs"];
m4_69 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Should return false when there are no jobs in the schedule'', ((string[])(null)))", span="151-151", cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="RedisStorage.cs"];
m4_70 [label="this.ScenarioSetup(scenarioInfo)", span="153-153", cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="RedisStorage.cs"];
m4_71 [label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="155-155", cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="RedisStorage.cs"];
m4_72 [label="testRunner.Then(''schedule poller should return \'false\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="157-157", cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="RedisStorage.cs"];
m4_73 [label="this.ScenarioCleanup()", span="159-159", cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="RedisStorage.cs"];
m4_74 [label="Exit HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", span="149-149", cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="RedisStorage.cs"];
m4_75 [label="HangFire.Tests.Server.SchedulePollerFeature", span="", file="RedisStorage.cs"];
m5_7 [label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsOpenGenericNestedClassName_WithGenericParameters()", span="19-19", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsOpenGenericNestedClassName_WithGenericParameters()", file="RedisStorageOptions.cs"];
m5_8 [label="Assert.Equal(typeof(NonGenericClass.NestedGenericClass<,>).ToGenericTypeString(), ''NonGenericClass.NestedGenericClass<T1,T2>'')", span="21-21", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsOpenGenericNestedClassName_WithGenericParameters()", file="RedisStorageOptions.cs"];
m5_9 [label="Assert.Equal(typeof(GenericClass<>).ToGenericTypeString(), ''GenericClass<T0>'')", span="22-22", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsOpenGenericNestedClassName_WithGenericParameters()", file="RedisStorageOptions.cs"];
m5_10 [label="Assert.Equal(typeof(GenericClass<>.NestedNonGenericClass).ToGenericTypeString(), ''GenericClass<T0>.NestedNonGenericClass'')", span="23-23", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsOpenGenericNestedClassName_WithGenericParameters()", file="RedisStorageOptions.cs"];
m5_11 [label="Assert.Equal(typeof(GenericClass<>.NestedNonGenericClass.DoubleNestedGenericClass<,,>).ToGenericTypeString(), ''GenericClass<T0>.NestedNonGenericClass.DoubleNestedGenericClass<T1,T2,T3>'')", span="24-24", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsOpenGenericNestedClassName_WithGenericParameters()", color=red, community=0, file="RedisStorageOptions.cs"];
m5_12 [label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsOpenGenericNestedClassName_WithGenericParameters()", span="19-19", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsOpenGenericNestedClassName_WithGenericParameters()", file="RedisStorageOptions.cs"];
m5_6 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RedisStorageOptions.cs"];
m5_0 [label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsNonGenericNestedClassName_WithDot()", span="11-11", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsNonGenericNestedClassName_WithDot()", file="RedisStorageOptions.cs"];
m5_1 [label="Assert.Equal(typeof(NonGenericClass).ToGenericTypeString(), ''NonGenericClass'')", span="13-13", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsNonGenericNestedClassName_WithDot()", file="RedisStorageOptions.cs"];
m5_2 [label="Assert.Equal(typeof(NonGenericClass.NestedNonGenericClass).ToGenericTypeString(), ''NonGenericClass.NestedNonGenericClass'')", span="14-14", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsNonGenericNestedClassName_WithDot()", file="RedisStorageOptions.cs"];
m5_3 [label="Assert.Equal(typeof(NonGenericClass.NestedNonGenericClass.DoubleNestedNonGenericClass).ToGenericTypeString(), ''NonGenericClass.NestedNonGenericClass.DoubleNestedNonGenericClass'')", span="15-15", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsNonGenericNestedClassName_WithDot()", file="RedisStorageOptions.cs"];
m5_4 [label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsNonGenericNestedClassName_WithDot()", span="11-11", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsNonGenericNestedClassName_WithDot()", file="RedisStorageOptions.cs"];
m5_13 [label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsClosedGenericNestedClassName_WithGivenTypes()", span="28-28", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsClosedGenericNestedClassName_WithGivenTypes()", file="RedisStorageOptions.cs"];
m5_14 [label="Assert.Equal(typeof(NonGenericClass.NestedGenericClass<Assert, List<Assert>>).ToGenericTypeString(), ''NonGenericClass.NestedGenericClass<Assert,List<Assert>>'')", span="30-30", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsClosedGenericNestedClassName_WithGivenTypes()", file="RedisStorageOptions.cs"];
m5_15 [label="Assert.Equal(typeof(GenericClass<Assert>).ToGenericTypeString(), ''GenericClass<Assert>'')", span="31-31", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsClosedGenericNestedClassName_WithGivenTypes()", file="RedisStorageOptions.cs"];
m5_16 [label="Assert.Equal(typeof(GenericClass<List<Assert>>.NestedNonGenericClass).ToGenericTypeString(), ''GenericClass<List<Assert>>.NestedNonGenericClass'')", span="32-32", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsClosedGenericNestedClassName_WithGivenTypes()", file="RedisStorageOptions.cs"];
m5_17 [label="Assert.Equal(typeof(GenericClass<List<GenericClass<List<Assert>>.NestedNonGenericClass.DoubleNestedGenericClass<Assert, List<Assert>, Stack<Assert>>>>.NestedNonGenericClass.DoubleNestedGenericClass<Assert, List<Assert>, Stack<Assert>>).ToGenericTypeString(), ''GenericClass<List<GenericClass<List<Assert>>.NestedNonGenericClass.DoubleNestedGenericClass<Assert,List<Assert>,Stack<Assert>>>>.NestedNonGenericClass.DoubleNestedGenericClass<Assert,List<Assert>,Stack<Assert>>'')", span="33-33", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsClosedGenericNestedClassName_WithGivenTypes()", file="RedisStorageOptions.cs"];
m5_18 [label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsClosedGenericNestedClassName_WithGivenTypes()", span="28-28", cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsClosedGenericNestedClassName_WithGivenTypes()", file="RedisStorageOptions.cs"];
m5_5 [label="Entry System.Type.ToGenericTypeString()", span="9-9", cluster="System.Type.ToGenericTypeString()", file="RedisStorageOptions.cs"];
m6_12 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="SqlServerConnection.cs"];
m6_0 [label="Entry HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", span="16-16", cluster="HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", file="SqlServerConnection.cs"];
m6_1 [label="_name = name", span="19-19", cluster="HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", file="SqlServerConnection.cs"];
m6_2 [label="_results = results", span="20-20", cluster="HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", file="SqlServerConnection.cs"];
m6_3 [label="_handlesException = handlesException", span="21-21", cluster="HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", file="SqlServerConnection.cs"];
m6_4 [label="Exit HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", span="16-16", cluster="HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", file="SqlServerConnection.cs"];
m6_13 [label="Entry HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", span="36-36", cluster="HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", file="SqlServerConnection.cs"];
m6_14 [label="Assert.IsNotNull(filterContext)", span="38-38", cluster="HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", file="SqlServerConnection.cs"];
m6_17 [label="filterContext.ExceptionHandled = true", span="44-44", cluster="HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", file="SqlServerConnection.cs"];
m6_15 [label="_results.Add(_name)", span="40-40", cluster="HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", file="SqlServerConnection.cs"];
m6_16 [label=_handlesException, span="42-42", cluster="HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", file="SqlServerConnection.cs"];
m6_18 [label="Exit HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", span="36-36", cluster="HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", file="SqlServerConnection.cs"];
m6_11 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="SqlServerConnection.cs"];
m6_5 [label="Entry HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", span="24-24", cluster="HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", file="SqlServerConnection.cs"];
m6_6 [label="Assert.IsNotNull(filterContext)", span="26-26", cluster="HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", file="SqlServerConnection.cs"];
m6_9 [label="filterContext.ExceptionHandled = true", span="32-32", cluster="HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", color=red, community=0, file="SqlServerConnection.cs"];
m6_7 [label="_results.Add(_name)", span="28-28", cluster="HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", file="SqlServerConnection.cs"];
m6_8 [label=_handlesException, span="30-30", cluster="HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", file="SqlServerConnection.cs"];
m6_10 [label="Exit HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", span="24-24", cluster="HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", file="SqlServerConnection.cs"];
m6_19 [label="HangFire.Tests.TestExceptionFilter", span="", file="SqlServerConnection.cs"];
m7_0 [label="Entry HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="11-11", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="SqlServerStorage.cs"];
m7_1 [label="WorkerCount = Environment.ProcessorCount * 5", span="13-13", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="SqlServerStorage.cs"];
m7_2 [label="ServerName = Environment.MachineName", span="14-14", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="SqlServerStorage.cs"];
m7_3 [label="Queues = new[] { EnqueuedState.DefaultQueue }", span="15-15", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="SqlServerStorage.cs"];
m7_4 [label="ShutdownTimeout = TimeSpan.FromSeconds(15)", span="16-16", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="SqlServerStorage.cs"];
m7_5 [label="Exit HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="11-11", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="SqlServerStorage.cs"];
m7_6 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerStorage.cs"];
m7_7 [label="HangFire.BackgroundJobServerOptions", span="", file="SqlServerStorage.cs"];
m8_4 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerStorageOptions.cs"];
m8_0 [label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m8_1 [label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="26-26", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m8_2 [label="PrepareSchemaIfNecessary = true", span="27-27", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", color=green, community=0];
m8_3 [label="Exit HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m8_5 [label="HangFire.SqlServer.SqlServerStorageOptions", span="", file="SqlServerStorageOptions.cs"];
m9_12 [label="Entry Unk.>", span="", cluster="Unk.>", file="StorageOptionsFacts.cs"];
m9_7 [label="Entry Unk.True", span="", cluster="Unk.True", file="StorageOptionsFacts.cs"];
m9_6 [label="Entry Unk.NotEqual", span="", cluster="Unk.NotEqual", file="StorageOptionsFacts.cs"];
m9_5 [label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="StorageOptionsFacts.cs"];
m9_23 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="StorageOptionsFacts.cs"];
m9_29 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="StorageOptionsFacts.cs"];
m9_16 [label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", span="24-24", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="StorageOptionsFacts.cs"];
m9_17 [label="var options = new SqlServerStorageOptions()", span="26-26", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="StorageOptionsFacts.cs"];
m9_18 [label="Assert.Throws<ArgumentException>(\r\n                () => options.QueuePollInterval = TimeSpan.FromSeconds(-1))", span="27-28", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="StorageOptionsFacts.cs"];
m9_19 [label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", span="24-24", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="StorageOptionsFacts.cs"];
m9_24 [label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", span="32-32", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs"];
m9_25 [label="var options = new SqlServerStorageOptions()", span="34-34", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs"];
m9_26 [label="options.QueuePollInterval = TimeSpan.FromSeconds(1)", span="35-35", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs"];
m9_27 [label="Assert.Equal(TimeSpan.FromSeconds(1), options.QueuePollInterval)", span="36-36", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs"];
m9_28 [label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", span="32-32", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs"];
m9_8 [label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", span="16-16", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="StorageOptionsFacts.cs"];
m9_9 [label="var options = new SqlServerStorageOptions()", span="18-18", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="StorageOptionsFacts.cs"];
m9_10 [label="Assert.Throws<ArgumentException>(\r\n                () => options.QueuePollInterval = TimeSpan.Zero)", span="19-20", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="StorageOptionsFacts.cs"];
m9_11 [label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", span="16-16", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="StorageOptionsFacts.cs"];
m9_20 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="StorageOptionsFacts.cs"];
m9_14 [label="options.QueuePollInterval = TimeSpan.Zero", span="20-20", cluster="lambda expression", file="StorageOptionsFacts.cs"];
m9_13 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="StorageOptionsFacts.cs"];
m9_15 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="StorageOptionsFacts.cs"];
m9_21 [label="options.QueuePollInterval = TimeSpan.FromSeconds(-1)", span="28-28", cluster="lambda expression", file="StorageOptionsFacts.cs"];
m9_22 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="StorageOptionsFacts.cs"];
m9_0 [label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", span="8-8", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs"];
m9_1 [label="var options = new SqlServerStorageOptions()", span="10-10", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs"];
m9_2 [label="Assert.NotEqual(0, options.QueuePollInterval.TotalSeconds)", span="11-11", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", color=green, community=0, file="StorageOptionsFacts.cs"];
m9_3 [label="Assert.True(options.PrepareSchemaIfNecessary)", span="12-12", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs", color=green, community=0];
m9_4 [label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", span="8-8", cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs"];
m9_30 [label=options, span="", file="StorageOptionsFacts.cs"];
m9_31 [label=options, span="", file="StorageOptionsFacts.cs"];
n73 -> n9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n54  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n55  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n73 -> n64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServer"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n3 -> n2  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n4 -> n7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.JobStorage"];
n4 -> n9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
n4 -> n10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.JobStorage"];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n10 -> n11  [key=0, style=solid];
n6 -> n13  [key=0, style=solid];
n6 -> n14  [key=2, style=dotted];
n8 -> n13  [key=0, style=solid];
n8 -> n14  [key=2, style=dotted];
n11 -> n12  [key=0, style=solid];
n11 -> n15  [key=2, style=dotted];
n11 -> n16  [key=2, style=dotted];
n11 -> n17  [key=2, style=dotted];
n12 -> n13  [key=0, style=solid];
n12 -> n18  [key=2, style=dotted];
n13 -> n4  [key=0, style=bold, color=blue];
n18 -> n34  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n20 -> n21  [key=0, style=solid];
n20 -> n23  [key=2, style=dotted];
n21 -> n22  [key=0, style=solid];
n21 -> n24  [key=2, style=dotted];
n22 -> n19  [key=0, style=bold, color=blue];
n25 -> n26  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n26 -> n28  [key=2, style=dotted];
n27 -> n25  [key=0, style=bold, color=blue];
n29 -> n30  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n33  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid];
n31 -> n23  [key=2, style=dotted];
n32 -> n29  [key=0, style=bold, color=blue];
n34 -> n35  [key=0, style=solid];
n34 -> n38  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n35 -> n39  [key=2, style=dotted];
n35 -> n40  [key=2, style=dotted];
n36 -> n37  [key=0, style=solid];
n36 -> n41  [key=2, style=dotted];
n36 -> n42  [key=2, style=dotted];
n39 -> n4  [key=3, color=darkorchid, style=bold, label="Field variable HangFire.BackgroundJobServerOptions _options"];
n37 -> n18  [key=0, style=bold, color=blue];
n43 -> n44  [key=0, style=solid];
n44 -> n45  [key=0, style=solid];
n44 -> n49  [key=2, style=dotted];
n44 -> n46  [key=1, style=dashed, color=darkseagreen4, label=componentRunners];
n44 -> n47  [key=1, style=dashed, color=darkseagreen4, label=componentRunners];
n45 -> n46  [key=0, style=solid];
n45 -> n50  [key=2, style=dotted];
n45 -> n51  [key=2, style=dotted];
n46 -> n47  [key=0, style=solid];
n46 -> n52  [key=2, style=dotted];
n46 -> n51  [key=2, style=dotted];
n47 -> n48  [key=0, style=solid];
n47 -> n53  [key=2, style=dotted];
n50 -> n54  [key=0, style=solid];
n50 -> n55  [key=0, style=bold, color=crimson];
n50 -> n56  [key=0, style=bold, color=crimson];
n52 -> n64  [key=0, style=solid];
n48 -> n43  [key=0, style=bold, color=blue];
n54 -> n55  [key=0, style=solid];
n54 -> n58  [key=2, style=dotted];
n54 -> n59  [key=2, style=dotted];
n55 -> n56  [key=0, style=solid];
n55 -> n60  [key=2, style=dotted];
n55 -> n61  [key=2, style=dotted];
n55 -> n62  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n56 -> n58  [key=2, style=dotted];
n56 -> n63  [key=2, style=dotted];
n57 -> n50  [key=0, style=bold, color=blue];
n64 -> n65  [key=0, style=solid];
n64 -> n67  [key=2, style=dotted];
n65 -> n66  [key=0, style=solid];
n65 -> n68  [key=2, style=dotted];
n65 -> n69  [key=2, style=dotted];
n65 -> n70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n66 -> n52  [key=0, style=bold, color=blue];
n70 -> n71  [key=0, style=solid];
n71 -> n72  [key=0, style=solid];
n71 -> n58  [key=2, style=dotted];
n72 -> n70  [key=0, style=bold, color=blue];
m0_35 -> m0_36  [key=0, style=solid];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_7  [key=2, style=dotted];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_39  [key=2, style=dotted];
m0_37 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_35  [key=0, style=bold, color=blue];
m0_86 -> m0_87  [key=0, style=solid];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_83  [key=2, style=dotted];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_94  [key=2, style=dotted];
m0_88 -> m0_90  [key=1, style=dashed, color=darkseagreen4, label=runners];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_95  [key=2, style=dotted];
m0_89 -> m0_96  [key=2, style=dotted];
m0_89 -> m0_97  [key=2, style=dotted];
m0_89 -> m0_100  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_98  [key=2, style=dotted];
m0_90 -> m0_95  [key=2, style=dotted];
m0_90 -> n69  [key=2, style=dotted];
m0_90 -> m0_104  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_90 -> m0_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_90 -> m0_92  [key=1, style=dashed, color=darkseagreen4, label=componentTypes];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_96  [key=2, style=dotted];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_96  [key=2, style=dotted];
m0_93 -> m0_86  [key=0, style=bold, color=blue];
m0_83 -> m0_127  [key=0, style=solid];
m0_127 -> m0_128  [key=0, style=solid];
m0_127 -> m0_26  [key=2, style=dotted];
m0_128 -> m0_83  [key=0, style=bold, color=blue];
m0_61 -> m0_62  [key=0, style=solid];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_65  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_57  [key=2, style=dotted];
m0_63 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_64 -> m0_61  [key=0, style=bold, color=blue];
m0_69 -> m0_70  [key=0, style=solid];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_73  [key=2, style=dotted];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_57  [key=2, style=dotted];
m0_71 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_72 -> m0_69  [key=0, style=bold, color=blue];
m0_111 -> m0_112  [key=0, style=solid];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_119  [key=2, style=dotted];
m0_112 -> m0_117  [key=1, style=dashed, color=darkseagreen4, label=storageComponent];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_11  [key=2, style=dotted];
m0_113 -> m0_12  [key=2, style=dotted];
m0_113 -> m0_120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_96  [key=2, style=dotted];
m0_114 -> m0_115  [key=0, style=solid];
m0_114 -> m0_83  [key=2, style=dotted];
m0_115 -> m0_116  [key=0, style=solid];
m0_115 -> m0_94  [key=2, style=dotted];
m0_116 -> m0_117  [key=0, style=solid];
m0_116 -> m0_98  [key=2, style=dotted];
m0_116 -> m0_95  [key=2, style=dotted];
m0_116 -> n69  [key=2, style=dotted];
m0_116 -> m0_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_118 -> m0_111  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_8  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_11  [key=2, style=dotted];
m0_5 -> m0_12  [key=2, style=dotted];
m0_5 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_6 -> m0_0  [key=0, style=bold, color=blue];
m0_44 -> m0_45  [key=0, style=solid];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_7  [key=2, style=dotted];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_39  [key=2, style=dotted];
m0_46 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_47 -> m0_44  [key=0, style=bold, color=blue];
m0_77 -> m0_78  [key=0, style=solid];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_83  [key=2, style=dotted];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_84  [key=2, style=dotted];
m0_79 -> m0_81  [key=1, style=dashed, color=darkseagreen4, label=runner];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_85  [key=2, style=dotted];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_21  [key=2, style=dotted];
m0_82 -> m0_77  [key=0, style=bold, color=blue];
m0_52 -> m0_53  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_56  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_57  [key=2, style=dotted];
m0_54 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_55 -> m0_52  [key=0, style=bold, color=blue];
m0_17 -> m0_18  [key=0, style=solid];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_21  [key=2, style=dotted];
m0_18 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_22  [key=2, style=dotted];
m0_20 -> m0_17  [key=0, style=bold, color=blue];
m0_124 -> m0_125  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_16  [key=2, style=dotted];
m0_15 -> m0_13  [key=0, style=bold, color=blue];
m0_23 -> m0_24  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_26  [key=2, style=dotted];
m0_25 -> m0_23  [key=0, style=bold, color=blue];
m0_31 -> m0_32  [key=0, style=solid];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_34  [key=2, style=dotted];
m0_33 -> m0_31  [key=0, style=bold, color=blue];
m0_40 -> m0_41  [key=0, style=solid];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_43  [key=2, style=dotted];
m0_42 -> m0_40  [key=0, style=bold, color=blue];
m0_48 -> m0_49  [key=0, style=solid];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_51  [key=2, style=dotted];
m0_50 -> m0_48  [key=0, style=bold, color=blue];
m0_58 -> m0_59  [key=0, style=solid];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_56  [key=2, style=dotted];
m0_60 -> m0_58  [key=0, style=bold, color=blue];
m0_66 -> m0_67  [key=0, style=solid];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_65  [key=2, style=dotted];
m0_68 -> m0_66  [key=0, style=bold, color=blue];
m0_74 -> m0_75  [key=0, style=solid];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_73  [key=2, style=dotted];
m0_76 -> m0_74  [key=0, style=bold, color=blue];
m0_100 -> m0_101  [key=0, style=solid];
m0_104 -> m0_105  [key=0, style=solid];
m0_107 -> m0_108  [key=0, style=solid];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_103  [key=2, style=dotted];
m0_102 -> m0_100  [key=0, style=bold, color=blue];
m0_105 -> m0_106  [key=0, style=solid];
m0_106 -> m0_104  [key=0, style=bold, color=blue];
m0_108 -> m0_109  [key=0, style=solid];
m0_108 -> m0_110  [key=2, style=dotted];
m0_109 -> m0_107  [key=0, style=bold, color=blue];
m0_120 -> m0_121  [key=0, style=solid];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_123  [key=2, style=dotted];
m0_122 -> m0_120  [key=0, style=bold, color=blue];
m0_125 -> m0_126  [key=0, style=solid];
m0_126 -> m0_124  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_21  [key=2, style=dotted];
m0_28 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_22  [key=2, style=dotted];
m0_30 -> m0_27  [key=0, style=bold, color=blue];
m0_129 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_63  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_113  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_114  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m0_129 -> m0_127  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobServerFacts"];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_4 -> m1_5  [key=0, style=solid, color=green];
m1_4 -> m1_6  [key=2, style=dotted];
m1_5 -> m1_5  [key=0, style=solid, color=green];
m1_5 -> m1_6  [key=2, style=dotted, color=green];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m1_7 -> m1_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m1_7 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m1_7 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m1_7 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m1_7 -> m1_5  [key=1, style=dashed, color=green, label="HangFire.BackgroundJobServerOptions"];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [key=0, style=bold, color=blue];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_18  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_5  [key=2, style=dotted];
m3_17 -> m3_6  [key=2, style=dotted];
m3_18 -> m3_19  [key=0, style=solid];
m3_18 -> m3_5  [key=2, style=dotted];
m3_18 -> m3_11  [key=2, style=dotted];
m3_19 -> m3_16  [key=0, style=bold, color=blue];
m3_2 -> m3_3  [key=0, style=solid, color=green];
m3_2 -> m3_4  [key=0, style=solid, color=green];
m3_2 -> m3_11  [key=2, style=dotted, color=green];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_5  [key=2, style=dotted];
m3_3 -> m3_6  [key=2, style=dotted];
m3_3 -> m3_10  [key=0, style=solid, color=green];
m3_4 -> m3_2  [key=0, style=bold, color=blue];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_6  [key=0, style=solid];
m3_4 -> m3_11  [key=2, style=dotted];
m3_5 -> m3_10  [key=0, style=solid];
m3_0 -> m3_1  [key=0, style=solid, color=green];
m3_0 -> m3_2  [key=1, style=dashed, color=green, label=string];
m3_0 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_0 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_0 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_1 -> m3_2  [key=0, style=solid, color=green];
m3_1 -> m3_0  [key=0, style=bold, color=blue];
m3_7 -> m3_10  [key=0, style=solid];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_9 -> m3_10  [key=0, style=solid];
m3_9 -> m3_5  [key=2, style=dotted];
m3_9 -> m3_11  [key=2, style=dotted];
m3_9 -> m3_20  [key=3, color=darkorchid, style=bold, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext"];
m3_6 -> m3_11  [key=2, style=dotted];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_8  [key=0, style=solid];
m3_8 -> m3_11  [key=2, style=dotted];
m3_8 -> m3_10  [key=0, style=solid];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_6  [key=2, style=dotted];
m3_10 -> m3_0  [key=0, style=bold, color=blue];
m3_10 -> m3_7  [key=0, style=bold, color=blue];
m3_33 -> m3_34  [key=0, style=solid];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_5  [key=2, style=dotted];
m3_34 -> m3_28  [key=2, style=dotted];
m3_35 -> m3_36  [key=0, style=solid];
m3_35 -> m3_37  [key=2, style=dotted];
m3_36 -> m3_33  [key=0, style=bold, color=blue];
m3_30 -> m3_31  [key=0, style=solid];
m3_31 -> m3_32  [key=0, style=solid];
m3_31 -> m3_5  [key=2, style=dotted];
m3_31 -> m3_23  [key=2, style=dotted];
m3_32 -> m3_30  [key=0, style=bold, color=blue];
m3_24 -> m3_25  [key=0, style=solid];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_5  [key=2, style=dotted];
m3_25 -> m3_28  [key=2, style=dotted];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_29  [key=2, style=dotted];
m3_27 -> m3_24  [key=0, style=bold, color=blue];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_1  [key=1, style=dashed, color=green, label="HangFire.Web.FontsHandler"];
m3_12 -> m3_3  [key=1, style=dashed, color=green, label="HangFire.Web.FontsHandler"];
m3_12 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.FontsHandler"];
m3_12 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.FontsHandler"];
m3_12 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.FontsHandler"];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> n17  [key=2, style=dotted];
m3_13 -> m3_6  [key=2, style=dotted];
m3_14 -> m3_12  [key=0, style=bold, color=blue];
m3_44 -> m3_45  [key=0, style=solid];
m3_44 -> m3_46  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_5  [key=2, style=dotted];
m3_45 -> m3_42  [key=2, style=dotted];
m3_46 -> m3_47  [key=0, style=solid];
m3_46 -> m3_43  [key=2, style=dotted];
m3_47 -> m3_44  [key=0, style=bold, color=blue];
m3_20 -> m3_21  [key=0, style=solid];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_5  [key=2, style=dotted];
m3_21 -> m3_23  [key=2, style=dotted];
m3_22 -> m3_20  [key=0, style=bold, color=blue];
m3_38 -> m3_39  [key=0, style=solid];
m3_39 -> m3_40  [key=0, style=solid];
m3_39 -> m3_5  [key=2, style=dotted];
m3_39 -> m3_42  [key=2, style=dotted];
m3_40 -> m3_41  [key=0, style=solid];
m3_40 -> m3_43  [key=2, style=dotted];
m3_41 -> m3_38  [key=0, style=bold, color=blue];
m4_25 -> m4_23  [key=0, style=bold, color=blue];
m4_21 -> m4_19  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_5  [key=2, style=dotted];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_6  [key=2, style=dotted];
m4_2 -> m4_7  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_8  [key=2, style=dotted];
m4_4 -> m4_0  [key=0, style=bold, color=blue];
m4_14 -> m4_15  [key=0, style=solid];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_17  [key=0, style=solid];
m4_15 -> m4_18  [key=2, style=dotted];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_0  [key=2, style=dotted];
m4_16 -> m4_14  [key=0, style=bold, color=blue];
m4_17 -> m4_14  [key=0, style=bold, color=blue];
m4_26 -> m4_27  [key=0, style=solid];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_29  [key=2, style=dotted];
m4_28 -> m4_26  [key=0, style=bold, color=blue];
m4_18 -> m4_19  [key=0, style=solid];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_21  [key=2, style=dotted];
m4_20 -> m4_18  [key=0, style=bold, color=blue];
m4_20 -> m4_21  [key=0, style=solid];
m4_20 -> m4_22  [key=2, style=dotted];
m4_22 -> m4_23  [key=0, style=solid];
m4_7 -> m4_8  [key=0, style=solid];
m4_58 -> m4_59  [key=0, style=solid];
m4_59 -> m4_60  [key=0, style=solid];
m4_59 -> m4_41  [key=2, style=dotted];
m4_60 -> m4_61  [key=0, style=solid];
m4_60 -> m4_22  [key=2, style=dotted];
m4_61 -> m4_62  [key=0, style=solid];
m4_61 -> m4_42  [key=2, style=dotted];
m4_62 -> m4_63  [key=0, style=solid];
m4_62 -> m4_45  [key=2, style=dotted];
m4_63 -> m4_64  [key=0, style=solid];
m4_63 -> m4_43  [key=2, style=dotted];
m4_64 -> m4_65  [key=0, style=solid];
m4_64 -> m4_44  [key=2, style=dotted];
m4_65 -> m4_66  [key=0, style=solid];
m4_65 -> m4_45  [key=2, style=dotted];
m4_66 -> m4_67  [key=0, style=solid];
m4_66 -> m4_26  [key=2, style=dotted];
m4_67 -> m4_58  [key=0, style=bold, color=blue];
m4_36 -> m4_37  [key=0, style=solid];
m4_36 -> m4_45  [key=2, style=dotted];
m4_37 -> m4_38  [key=0, style=solid];
m4_37 -> n17  [key=2, style=dotted];
m4_37 -> m4_46  [key=2, style=dotted];
m4_38 -> m4_36  [key=0, style=bold, color=blue];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_45  [key=2, style=dotted];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_6 -> m4_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageOptions"];
m4_8 -> m4_9  [key=0, style=solid];
m4_9 -> m4_10  [key=0, style=solid];
m4_10 -> m4_11  [key=0, style=solid];
m4_10 -> m4_12  [key=2, style=dotted];
m4_10 -> m4_13  [key=2, style=dotted];
m4_11 -> m4_6  [key=0, style=bold, color=blue];
m4_11 -> m4_12  [key=0, style=solid];
m4_47 -> m4_48  [key=0, style=solid];
m4_48 -> m4_49  [key=0, style=solid];
m4_48 -> m4_41  [key=2, style=dotted];
m4_49 -> m4_50  [key=0, style=solid];
m4_49 -> m4_22  [key=2, style=dotted];
m4_50 -> m4_51  [key=0, style=solid];
m4_50 -> m4_42  [key=2, style=dotted];
m4_51 -> m4_52  [key=0, style=solid];
m4_51 -> m4_43  [key=2, style=dotted];
m4_52 -> m4_53  [key=0, style=solid];
m4_52 -> m4_44  [key=2, style=dotted];
m4_53 -> m4_54  [key=0, style=solid];
m4_53 -> m4_45  [key=2, style=dotted];
m4_54 -> m4_55  [key=0, style=solid];
m4_54 -> m4_45  [key=2, style=dotted];
m4_55 -> m4_56  [key=0, style=solid];
m4_55 -> m4_45  [key=2, style=dotted];
m4_56 -> m4_57  [key=0, style=solid];
m4_56 -> m4_26  [key=2, style=dotted];
m4_57 -> m4_47  [key=0, style=bold, color=blue];
m4_12 -> m4_9  [key=0, style=bold, color=blue];
m4_23 -> m4_24  [key=0, style=solid, color=green];
m4_23 -> m4_25  [key=2, style=dotted];
m4_24 -> m4_25  [key=0, style=solid, color=green];
m4_24 -> m4_26  [key=2, style=dotted, color=green];
m4_24 -> m4_27  [key=2, style=dotted, color=green];
m4_24 -> m4_22  [key=0, style=bold, color=blue];
m4_30 -> m4_31  [key=0, style=solid];
m4_31 -> m4_32  [key=0, style=solid, color=red];
m4_31 -> m4_41  [key=2, style=dotted];
m4_32 -> m4_33  [key=0, style=solid, color=red];
m4_32 -> m4_22  [key=2, style=dotted, color=red];
m4_33 -> m4_34  [key=0, style=solid, color=red];
m4_33 -> m4_42  [key=2, style=dotted, color=red];
m4_34 -> m4_35  [key=0, style=solid];
m4_34 -> m4_43  [key=2, style=dotted];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_44  [key=2, style=dotted];
m4_39 -> m4_40  [key=0, style=solid];
m4_39 -> m4_26  [key=2, style=dotted];
m4_40 -> m4_30  [key=0, style=bold, color=blue];
m4_40 -> m4_24  [key=1, style=dashed, color=green, label="HangFire.Redis.RedisStorage"];
m4_40 -> m4_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m4_40 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m4_40 -> m4_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m4_40 -> m4_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m4_40 -> m4_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m4_40 -> m4_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m4_40 -> m4_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m4_68 -> m4_69  [key=0, style=solid];
m4_69 -> m4_70  [key=0, style=solid];
m4_69 -> m4_41  [key=2, style=dotted];
m4_70 -> m4_71  [key=0, style=solid];
m4_70 -> m4_22  [key=2, style=dotted];
m4_71 -> m4_72  [key=0, style=solid];
m4_71 -> m4_43  [key=2, style=dotted];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_44  [key=2, style=dotted];
m4_73 -> m4_74  [key=0, style=solid];
m4_73 -> m4_26  [key=2, style=dotted];
m4_74 -> m4_68  [key=0, style=bold, color=blue];
m4_75 -> m4_32  [key=1, style=dashed, color=red, label="HangFire.Tests.Server.SchedulePollerFeature"];
m4_75 -> m4_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.SchedulePollerFeature"];
m4_75 -> m4_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.SchedulePollerFeature"];
m4_75 -> m4_56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.SchedulePollerFeature"];
m4_75 -> m4_60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.SchedulePollerFeature"];
m4_75 -> m4_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.SchedulePollerFeature"];
m4_75 -> m4_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.SchedulePollerFeature"];
m4_75 -> m4_73  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.SchedulePollerFeature"];
m5_7 -> m5_8  [key=0, style=solid];
m5_8 -> m5_9  [key=0, style=solid];
m5_8 -> m5_5  [key=2, style=dotted];
m5_8 -> m5_6  [key=2, style=dotted];
m5_9 -> m5_10  [key=0, style=solid];
m5_9 -> m5_5  [key=2, style=dotted];
m5_9 -> m5_6  [key=2, style=dotted];
m5_10 -> m5_11  [key=0, style=solid, color=red];
m5_10 -> m5_5  [key=2, style=dotted];
m5_10 -> m5_6  [key=2, style=dotted];
m5_11 -> m5_12  [key=0, style=solid, color=red];
m5_11 -> m5_5  [key=2, style=dotted, color=red];
m5_11 -> m5_6  [key=2, style=dotted, color=red];
m5_12 -> m5_7  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_5  [key=2, style=dotted];
m5_1 -> m5_6  [key=2, style=dotted];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_5  [key=2, style=dotted];
m5_2 -> m5_6  [key=2, style=dotted];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_5  [key=2, style=dotted];
m5_3 -> m5_6  [key=2, style=dotted];
m5_4 -> m5_0  [key=0, style=bold, color=blue];
m5_13 -> m5_14  [key=0, style=solid];
m5_14 -> m5_15  [key=0, style=solid];
m5_14 -> m5_5  [key=2, style=dotted];
m5_14 -> m5_6  [key=2, style=dotted];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_5  [key=2, style=dotted];
m5_15 -> m5_6  [key=2, style=dotted];
m5_16 -> m5_17  [key=0, style=solid];
m5_16 -> m5_5  [key=2, style=dotted];
m5_16 -> m5_6  [key=2, style=dotted];
m5_17 -> m5_18  [key=0, style=solid];
m5_17 -> m5_5  [key=2, style=dotted];
m5_17 -> m5_6  [key=2, style=dotted];
m5_18 -> m5_13  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_0 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<string>"];
m6_0 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label=bool];
m6_1 -> m6_2  [key=0, style=solid];
m6_2 -> m6_3  [key=0, style=solid];
m6_3 -> m6_4  [key=0, style=solid];
m6_4 -> m6_0  [key=0, style=bold, color=blue];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.Filters.ServerExceptionContext"];
m6_14 -> m6_15  [key=0, style=solid];
m6_14 -> m6_11  [key=2, style=dotted];
m6_17 -> m6_18  [key=0, style=solid];
m6_15 -> m6_16  [key=0, style=solid];
m6_15 -> m6_12  [key=2, style=dotted];
m6_16 -> m6_17  [key=0, style=solid];
m6_16 -> m6_18  [key=0, style=solid];
m6_18 -> m6_13  [key=0, style=bold, color=blue];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_9  [key=1, style=dashed, color=red, label="HangFire.Client.Filters.ClientExceptionContext"];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> m6_11  [key=2, style=dotted];
m6_9 -> m6_10  [key=0, style=solid, color=red];
m6_7 -> m6_8  [key=0, style=solid];
m6_7 -> m6_12  [key=2, style=dotted];
m6_8 -> m6_9  [key=0, style=solid, color=red];
m6_8 -> m6_10  [key=0, style=solid];
m6_10 -> m6_5  [key=0, style=bold, color=blue];
m6_19 -> m6_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestExceptionFilter"];
m6_19 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestExceptionFilter"];
m6_19 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestExceptionFilter"];
m6_19 -> m6_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestExceptionFilter"];
m6_19 -> m6_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestExceptionFilter"];
m6_19 -> m6_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestExceptionFilter"];
m6_19 -> m6_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.TestExceptionFilter"];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid];
m7_2 -> m7_3  [key=0, style=solid];
m7_3 -> m7_4  [key=0, style=solid];
m7_4 -> m7_5  [key=0, style=solid];
m7_4 -> m7_6  [key=2, style=dotted];
m7_5 -> m7_0  [key=0, style=bold, color=blue];
m7_7 -> m7_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m7_7 -> m7_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m7_7 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m7_7 -> m7_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_2  [key=0, style=solid, color=green];
m8_1 -> m8_4  [key=2, style=dotted];
m8_2 -> m8_3  [key=0, style=solid, color=green];
m8_3 -> m8_0  [key=0, style=bold, color=blue];
m8_5 -> m8_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m8_5 -> m8_2  [key=1, style=dashed, color=green, label="HangFire.SqlServer.SqlServerStorageOptions"];
m9_16 -> m9_17  [key=0, style=solid];
m9_17 -> m9_18  [key=0, style=solid];
m9_17 -> m9_5  [key=2, style=dotted];
m9_17 -> m9_21  [key=1, style=dashed, color=darkseagreen4, label=options];
m9_18 -> m9_19  [key=0, style=solid];
m9_18 -> m9_12  [key=2, style=dotted];
m9_18 -> m9_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_19 -> m9_16  [key=0, style=bold, color=blue];
m9_24 -> m9_25  [key=0, style=solid];
m9_25 -> m9_26  [key=0, style=solid];
m9_25 -> m9_5  [key=2, style=dotted];
m9_25 -> m9_27  [key=1, style=dashed, color=darkseagreen4, label=options];
m9_26 -> m9_27  [key=0, style=solid];
m9_26 -> m9_23  [key=2, style=dotted];
m9_27 -> m9_28  [key=0, style=solid];
m9_27 -> m9_23  [key=2, style=dotted];
m9_27 -> m9_29  [key=2, style=dotted];
m9_28 -> m9_24  [key=0, style=bold, color=blue];
m9_8 -> m9_9  [key=0, style=solid];
m9_9 -> m9_10  [key=0, style=solid];
m9_9 -> m9_5  [key=2, style=dotted];
m9_9 -> m9_14  [key=1, style=dashed, color=darkseagreen4, label=options];
m9_10 -> m9_11  [key=0, style=solid];
m9_10 -> m9_12  [key=2, style=dotted];
m9_10 -> m9_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_11 -> m9_8  [key=0, style=bold, color=blue];
m9_20 -> m9_21  [key=0, style=solid];
m9_14 -> m9_15  [key=0, style=solid];
m9_13 -> m9_14  [key=0, style=solid];
m9_15 -> m9_13  [key=0, style=bold, color=blue];
m9_21 -> m9_22  [key=0, style=solid];
m9_21 -> m9_23  [key=2, style=dotted];
m9_22 -> m9_20  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid, color=green];
m9_1 -> m9_5  [key=2, style=dotted];
m9_1 -> m9_3  [key=1, style=dashed, color=green, label=options];
m9_2 -> m9_3  [key=0, style=solid, color=green];
m9_2 -> m9_6  [key=2, style=dotted, color=green];
m9_3 -> m9_4  [key=0, style=solid, color=green];
m9_3 -> m9_7  [key=2, style=dotted, color=green];
m9_4 -> m9_0  [key=0, style=bold, color=blue];
m9_30 -> m9_14  [key=1, style=dashed, color=darkseagreen4, label=options];
m9_31 -> m9_21  [key=1, style=dashed, color=darkseagreen4, label=options];
}
