digraph  {
n20 [label="HangFire.States.ScheduledState", span=""];
n0 [cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="27-27"];
n1 [cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", label="EnqueueAt = enqueueAt", span="29-29"];
n2 [cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", label="Exit HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="27-27"];
n3 [cluster="HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", label="Entry HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", span="35-35"];
n4 [cluster="HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", label="return new Dictionary<string, string>\r\n                {\r\n                    { ''ScheduledAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''EnqueueAt'', JobHelper.ToStringTimestamp(EnqueueAt) }\r\n                };", span="37-41"];
n5 [cluster="HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", label="Exit HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", span="35-35"];
n6 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n7 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
n8 [cluster="HangFire.States.ScheduledState.Handler.Apply(HangFire.Common.States.StateApplyingContext)", label="Entry HangFire.States.ScheduledState.Handler.Apply(HangFire.Common.States.StateApplyingContext)", span="46-46"];
n9 [cluster="HangFire.States.ScheduledState.Handler.Apply(HangFire.Common.States.StateApplyingContext)", label="var stateData = context.ApplyingState.GetData(context.JobMethod)", span="48-48"];
n11 [cluster="HangFire.States.ScheduledState.Handler.Apply(HangFire.Common.States.StateApplyingContext)", label="context.Transaction.AddToSet(''schedule'', context.JobId, timestamp)", span="51-51"];
n10 [cluster="HangFire.States.ScheduledState.Handler.Apply(HangFire.Common.States.StateApplyingContext)", label="var timestamp = long.Parse(stateData[''EnqueueAt''])", span="49-49"];
n13 [cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", label="Entry HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", span="26-26"];
n14 [cluster="long.Parse(string)", label="Entry long.Parse(string)", span="0-0"];
n12 [cluster="HangFire.States.ScheduledState.Handler.Apply(HangFire.Common.States.StateApplyingContext)", label="Exit HangFire.States.ScheduledState.Handler.Apply(HangFire.Common.States.StateApplyingContext)", span="46-46"];
n15 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="26-26"];
n16 [cluster="HangFire.States.ScheduledState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", label="Entry HangFire.States.ScheduledState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", span="54-54"];
n17 [cluster="HangFire.States.ScheduledState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", label="context.Transaction.RemoveFromSet(''schedule'', context.JobId)", span="56-56"];
n18 [cluster="HangFire.States.ScheduledState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", label="Exit HangFire.States.ScheduledState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", span="54-54"];
n19 [cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="27-27"];
d21 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, label="0: Assert.NotNull(api)", span="33-33"];
d20 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", label="var api = storage.GetMonitoringApi()", span="31-31"];
d22 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", label="Exit HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="28-28"];
d25 [cluster="Unk.NotNull", label="Entry Unk.NotNull", span=""];
d19 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", label="var storage = CreateStorage()", span="30-30"];
d24 [cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", label="Entry HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="54-54"];
d18 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", label="Entry HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="28-28"];
d29 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", label="Assert.NotNull(connection)", span="43-43"];
d23 [cluster="HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", label="Entry HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", span="58-58"];
d28 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", label="var connection = storage.GetConnection()", span="41-41"];
d30 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", label="Exit HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", span="38-38"];
d27 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", label="var storage = CreateStorage()", span="40-40"];
d33 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", label="var storage = CreateStorage()", span="50-50"];
d47 [cluster="HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", label="Exit HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", span="58-58"];
d46 [cluster="HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", label="return new SqlServerStorage(\r\n                ConnectionUtils.GetConnectionString(),\r\n                new SqlServerStorageOptions { PrepareSchemaIfNecessary = false });", span="60-62"];
d31 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", label="Entry HangFire.SqlServer.SqlServerStorage.GetConnection()", span="59-59"];
d26 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", label="Entry HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", span="38-38"];
d32 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", label="Entry HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", span="48-48"];
d34 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", label="var components = storage.GetComponents()", span="52-52"];
d17 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37"];
d48 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26"];
d49 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
d37 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", label="Exit HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", span="48-48"];
d35 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", label="var componentTypes = components.Select(x => x.GetType()).ToArray()", span="54-54"];
d38 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", label="Entry HangFire.SqlServer.SqlServerStorage.GetComponents()", span="64-64"];
d15 [cluster="lambda expression", label="new SqlServerStorage(''hello'', null)", span="22-22"];
d36 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", label="Assert.Contains(typeof(ExpirationManager), componentTypes)", span="55-55"];
d39 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d40 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
d42 [cluster="lambda expression", label="Entry lambda expression", span="54-54"];
d14 [cluster="lambda expression", label="Entry lambda expression", span="22-22"];
d16 [cluster="lambda expression", label="Exit lambda expression", span="22-22"];
d41 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
d44 [cluster="lambda expression", label="Exit lambda expression", span="54-54"];
d43 [cluster="lambda expression", label="x.GetType()", span="54-54"];
d11 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerStorage(''hello'', null))", span="21-22"];
d45 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
d10 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", label="Entry HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="19-19"];
d12 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", label="Assert.Equal(''options'', exception.ParamName)", span="24-24"];
d4 [cluster="Unk.>", label="Entry Unk.>", span=""];
d13 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", label="Exit HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="19-19"];
d5 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
d1 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerStorage(null))", span="12-13"];
d2 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", label="Assert.Equal(''connectionString'', exception.ParamName)", span="15-15"];
d0 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", label="Entry HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", span="10-10"];
d6 [cluster="lambda expression", label="Entry lambda expression", span="13-13"];
d3 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", label="Exit HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", span="10-10"];
d8 [cluster="lambda expression", label="Exit lambda expression", span="13-13"];
d7 [cluster="lambda expression", label="new SqlServerStorage(null)", span="13-13"];
d9 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="32-32"];
m0_25 [cluster="Unk.OnScenarioStart", file="ClientFilters.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m0_29 [cluster="HangFire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", file="ClientFilters.feature.cs", label="Entry HangFire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64"];
m0_26 [cluster="HangFire.JobStorage.GetConnection()", file="ClientFilters.feature.cs", label="Entry HangFire.JobStorage.GetConnection()", span="56-56"];
m0_27 [cluster="HangFire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="ClientFilters.feature.cs", label="Entry HangFire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55"];
m0_28 [cluster="string.Format(string, object)", file="ClientFilters.feature.cs", label="Entry string.Format(string, object)", span="0-0"];
m0_32 [cluster="HangFire.Tests.ClientFiltersFeature.FeatureBackground()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.FeatureBackground()", span="71-71"];
m0_52 [cluster="Unk.And", file="ClientFilters.feature.cs", label="Entry Unk.And", span=""];
m0_34 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", span="83-83"];
m0_5 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="ClientFilters.feature.cs", label="var hash = connection.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', id))", span="19-19"];
m0_98 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", span="215-215"];
m0_100 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.ScenarioSetup(scenarioInfo)", span="219-219"];
m0_99 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Client filter can handle the exception'', ((string[])(null)))", span="217-217"];
m0_101 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.FeatureBackground()", span="221-221"];
m0_102 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Given(''the client filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="223-223"];
m0_103 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''the client filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="225-225"];
m0_104 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''the client filter \'third\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="227-227"];
m0_105 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.When(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="229-229"];
m0_106 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="231-232"];
m0_112 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Then(''the client filter methods were executed in the following order:'', ((string)(null)), table5, ''Then '')", span="244-244"];
m0_111 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''first::OnCreated''})", span="241-242"];
m0_113 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''no exception were thrown'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="246-246"];
m0_114 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", span="248-248"];
m0_107 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''first::OnCreating''})", span="233-234"];
m0_108 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''second::OnCreating''})", span="235-236"];
m0_109 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''third::OnCreating''})", span="237-238"];
m0_110 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''second::OnCreated''})", span="239-240"];
m0_115 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.ClientFilterCanHandleTheException()", span="215-215"];
m0_36 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.ScenarioSetup(scenarioInfo)", span="87-87"];
m0_53 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", span="113-113"];
m0_55 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.ScenarioSetup(scenarioInfo)", span="117-117"];
m0_54 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple client filters are executed depending on their order'', ((string[])(null)))", span="115-115"];
m0_56 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.FeatureBackground()", span="119-119"];
m0_57 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Given(''the client filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="121-121"];
m0_58 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''the client filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="123-123"];
m0_59 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.When(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="125-125"];
m0_60 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="127-128"];
m0_65 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Then(''the client filter methods were executed in the following order:'', ((string)(null)), table2, ''Then '')", span="138-138"];
m0_64 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''first::OnCreated''})", span="135-136"];
m0_66 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", span="140-140"];
m0_61 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''first::OnCreating''})", span="129-130"];
m0_62 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''second::OnCreating''})", span="131-132"];
m0_63 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''second::OnCreated''})", span="133-134"];
m0_67 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersAreExecutedDependingOnTheirOrder()", span="113-113"];
m0_84 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", span="183-183"];
m0_86 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.ScenarioSetup(scenarioInfo)", span="187-187"];
m0_85 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Client filter\'s OnCreated could be skipped if there was an exception'', ((string[])(null)))", span="185-185"];
m0_87 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.FeatureBackground()", span="189-189"];
m0_88 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Given(''the client filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="191-191"];
m0_89 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''the client filter \'second\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="193-193"];
m0_90 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.When(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="195-195"];
m0_91 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="197-198"];
m0_95 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Then(''only the following client filter methods were executed:'', ((string)(null)), table4, ''Then '')", span="206-206"];
m0_94 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", file="ClientFilters.feature.cs", label="table4.AddRow(new string[] {\r\n                        ''first::OnCreated''})", span="203-204"];
m0_96 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", span="208-208"];
m0_92 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", file="ClientFilters.feature.cs", label="table4.AddRow(new string[] {\r\n                        ''first::OnCreating''})", span="199-200"];
m0_93 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", file="ClientFilters.feature.cs", label="table4.AddRow(new string[] {\r\n                        ''second::OnCreating''})", span="201-202"];
m0_97 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", span="183-183"];
m0_22 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="ClientFilters.feature.cs", label="dto.LastExecution = JobHelper.DeserializeDateTime(hash[''LastExecution''])", span="58-58"];
m0_23 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="ClientFilters.feature.cs", label="RecurringJobs.Add(dto)", span="61-61"];
m0_24 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="ClientFilters.feature.cs", label="Exit HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", span="9-9"];
m0_7 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="ClientFilters.feature.cs", label="RecurringJobs.Add(new RecurringJobDto { Id = id, Removed = true })", span="23-23"];
m0_0 [cluster="HangFire.Tests.ClientFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m0_1 [cluster="HangFire.Tests.ClientFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ClientFilters.feature.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m0_2 [cluster="HangFire.Tests.ClientFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="ClientFilters.feature.cs", label="0: TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Client filters'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m0_3 [cluster="HangFire.Tests.ClientFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ClientFilters.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m0_18 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="ClientFilters.feature.cs", label="var stateData = connection.GetStateData(dto.LastJobId)", span="49-49"];
m0_4 [cluster="HangFire.Tests.ClientFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m0_8 [cluster="Unk.OnFeatureStart", file="ClientFilters.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m0_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="ClientFilters.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m0_9 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="ClientFilters.feature.cs", label="dto.Cron = hash[''Cron'']", span="28-28"];
m0_10 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="ClientFilters.feature.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(hash[''Job''])", span="32-32"];
m0_14 [cluster="HangFire.Tests.ClientFiltersFeature.TestInitialize()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.TestInitialize()", span="46-46"];
m0_15 [cluster="HangFire.Tests.ClientFiltersFeature.TestInitialize()", file="ClientFilters.feature.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Client filters''))", span="48-49"];
m0_16 [cluster="HangFire.Tests.ClientFiltersFeature.TestInitialize()", file="ClientFilters.feature.cs", label="HangFire.Tests.ClientFiltersFeature.FeatureSetup(null)", span="51-51"];
m0_17 [cluster="HangFire.Tests.ClientFiltersFeature.TestInitialize()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.TestInitialize()", span="46-46"];
m0_21 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="ClientFilters.feature.cs", label="hash.ContainsKey(''LastExecution'')", span="56-56"];
m0_11 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", color=red, community=0, file="ClientFilters.feature.cs", label="0: dto.Job = invocationData.Deserialize()", span="33-33"];
m0_13 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="ClientFilters.feature.cs", label="dto.LoadException = ex", span="37-37"];
m0_20 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="ClientFilters.feature.cs", label="dto.LastJobState = stateData.Name", span="52-52"];
m0_12 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="ClientFilters.feature.cs", label=JobLoadException, span="35-35"];
m0_19 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="ClientFilters.feature.cs", label="stateData != null", span="50-50"];
m0_142 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", span="316-316"];
m0_143 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Exception filter can handle the exception'', ((string[])(null)))", span="318-318"];
m0_144 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.ScenarioSetup(scenarioInfo)", span="320-320"];
m0_145 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.FeatureBackground()", span="322-322"];
m0_146 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Given(''the exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="324-324"];
m0_147 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''the exception filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="326-326"];
m0_148 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''the exception filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="328-328"];
m0_149 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.When(''there is a buggy filter (for example)'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="330-330"];
m0_150 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="332-332"];
m0_151 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="334-335"];
m0_152 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="table7.AddRow(new string[] {\r\n                        ''first''})", span="336-337"];
m0_153 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="table7.AddRow(new string[] {\r\n                        ''second''})", span="338-339"];
m0_154 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="table7.AddRow(new string[] {\r\n                        ''third''})", span="340-341"];
m0_155 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="testRunner.Then(''the following exceptions filter were executed:'', ((string)(null)), table7, ''Then '')", span="343-343"];
m0_156 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''no exception were thrown'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="345-345"];
m0_157 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.ScenarioCleanup()", span="347-347"];
m0_158 [cluster="HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.ExceptionFilterCanHandleTheException()", span="316-316"];
m0_48 [cluster="Unk.When", file="ClientFilters.feature.cs", label="Entry Unk.When", span=""];
m0_35 [cluster="HangFire.Common.JobHelper.DeserializeDateTime(string)", file="ClientFilters.feature.cs", label="Entry HangFire.Common.JobHelper.DeserializeDateTime(string)", span="56-56"];
m0_37 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: HangFire.Web.Pages.RecurringJobsPage", span=""];
m0_38 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Given(''the client filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="91-91"];
m0_39 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.When(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="93-93"];
m0_40 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="95-96"];
m0_43 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Then(''the client filter methods were executed in the following order:'', ((string)(null)), table1, ''Then '')", span="102-102"];
m0_42 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''test::OnCreated''})", span="99-100"];
m0_44 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''the storage contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="104-104"];
m0_45 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", span="106-106"];
m0_41 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''test::OnCreating''})", span="97-98"];
m0_46 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.ClientFiltersAreExecutedWhenICreateAJob()", span="83-83"];
m0_50 [cluster="Unk.AddRow", file="ClientFilters.feature.cs", label="Entry Unk.AddRow", span=""];
m0_30 [cluster="HangFire.Tests.ClientFiltersFeature.FeatureBackground()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.FeatureBackground()", span="71-71"];
m0_47 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="ClientFilters.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m0_51 [cluster="Unk.Then", file="ClientFilters.feature.cs", label="Entry Unk.Then", span=""];
m0_33 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="ClientFilters.feature.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m0_31 [cluster="HangFire.Tests.ClientFiltersFeature.FeatureBackground()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Given(''a client'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="75-75"];
m0_49 [cluster="TechTalk.SpecFlow.Table.cstr", file="ClientFilters.feature.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m0_127 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", span="282-282"];
m0_129 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.ScenarioSetup(scenarioInfo)", span="286-286"];
m0_128 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple exception filters are executed depending on their order'', ((string[])(null)))", span="284-284"];
m0_130 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.FeatureBackground()", span="288-288"];
m0_131 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Given(''the exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="290-290"];
m0_132 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''the exception filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="292-292"];
m0_133 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.When(''there is a buggy filter (for example)'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="294-294"];
m0_134 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="296-296"];
m0_135 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="298-299"];
m0_138 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Then(''the client exception filters were executed in the following order:'', ((string)(null)), table6, ''Then '')", span="305-305"];
m0_137 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="table6.AddRow(new string[] {\r\n                        ''second''})", span="302-303"];
m0_139 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''the CreateJobFailedException was thrown'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="307-307"];
m0_140 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", span="309-309"];
m0_136 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="table6.AddRow(new string[] {\r\n                        ''first''})", span="300-301"];
m0_141 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersAreExecutedDependingOnTheirOrder()", span="282-282"];
m0_68 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", span="147-147"];
m0_70 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.ScenarioSetup(scenarioInfo)", span="151-151"];
m0_69 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When client filter can cancel the creation of the job'', ((string[])(null)))", span="149-149"];
m0_71 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.FeatureBackground()", span="153-153"];
m0_72 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Given(''the client filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="155-155"];
m0_73 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''the client filter \'second\' that cancels the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="157-157"];
m0_74 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''the client filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="159-159"];
m0_75 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.When(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="161-161"];
m0_76 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Then(''the storage does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="163-163"];
m0_77 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="165-166"];
m0_81 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''only the following client filter methods were executed:'', ((string)(null)), table3, ''And '')", span="174-174"];
m0_80 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", file="ClientFilters.feature.cs", label="table3.AddRow(new string[] {\r\n                        ''first::OnCreated (with the canceled flag set)''})", span="171-172"];
m0_82 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", span="176-176"];
m0_78 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", file="ClientFilters.feature.cs", label="table3.AddRow(new string[] {\r\n                        ''first::OnCreating''})", span="167-168"];
m0_79 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", file="ClientFilters.feature.cs", label="table3.AddRow(new string[] {\r\n                        ''second::OnCreating''})", span="169-170"];
m0_83 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.WhenClientFilterCanCancelTheCreationOfTheJob()", span="147-147"];
m0_116 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersAreExecutedWhenThereWasAnExceptionWhileCreatingAJob()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersAreExecutedWhenThereWasAnExceptionWhileCreatingAJob()", span="256-256"];
m0_117 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersAreExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Client exception filters are executed when there was an exception while creating '' +\r\n                    ''a job'', ((string[])(null)))", span="258-259"];
m0_118 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersAreExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.ScenarioSetup(scenarioInfo)", span="261-261"];
m0_119 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersAreExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: this.FeatureBackground()", span="263-263"];
m0_120 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersAreExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Given(''the exception filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="265-265"];
m0_121 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersAreExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.When(''there is a buggy filter (for example)'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="267-267"];
m0_122 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersAreExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="269-269"];
m0_123 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersAreExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.Then(''the client exception filter was executed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="271-271"];
m0_124 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersAreExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="0: testRunner.And(''the CreateJobFailedException was thrown'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="273-273"];
m0_125 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersAreExecutedWhenThereWasAnExceptionWhileCreatingAJob()", file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", span="275-275"];
m0_126 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersAreExecutedWhenThereWasAnExceptionWhileCreatingAJob()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersAreExecutedWhenThereWasAnExceptionWhileCreatingAJob()", span="256-256"];
m0_159 [file="ClientFilters.feature.cs", label="HangFire.Tests.ClientFiltersFeature", span=""];
m3_3 [cluster="System.NotSupportedException.NotSupportedException()", file="CustomTypeConverter.cs", label="Entry System.NotSupportedException.NotSupportedException()", span="0-0"];
m3_0 [cluster="HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", file="CustomTypeConverter.cs", label="Entry HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", span="8-8"];
m3_1 [cluster="HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", color=green, community=0, file="CustomTypeConverter.cs", label="0: throw new NotSupportedException();", span="10-10"];
m3_2 [cluster="HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", file="CustomTypeConverter.cs", label="Exit HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", span="8-8"];
m4_24 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="DequeuedJobsWatcher.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", span="53-53"];
m4_25 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="DequeuedJobsWatcher.cs", label="var flags = _redis.GetValuesFromHash(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                ''Fetched'',\r\n                ''Checked'')", span="55-58"];
m4_29 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="DequeuedJobsWatcher.cs", label="_redis.SetEntryInHash(\r\n                    String.Format(''hangfire:job:{0}'', jobId),\r\n                    ''Checked'',\r\n                    JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="83-86"];
m4_30 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="DequeuedJobsWatcher.cs", label="TimedOutByFetchedTime(fetched) || TimedOutByCheckedTime(fetched, @checked)", span="93-93"];
m4_31 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="DequeuedJobsWatcher.cs", label="TryToRequeueTheJob(jobId)", span="95-95"];
m4_32 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="DequeuedJobsWatcher.cs", label="JobFetcher.RemoveFromFetchedQueue(_redis, jobId, queue)", span="96-96"];
m4_26 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="DequeuedJobsWatcher.cs", label="var fetched = flags[0]", span="60-60"];
m4_27 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="DequeuedJobsWatcher.cs", label="var @checked = flags[1]", span="61-61"];
m4_28 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="DequeuedJobsWatcher.cs", label="String.IsNullOrEmpty(fetched) && String.IsNullOrEmpty(@checked)", span="63-63"];
m4_33 [cluster="HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", file="DequeuedJobsWatcher.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.RequeueJobIfTimedOut(string, string)", span="53-53"];
m4_81 [cluster="System.Threading.Thread.Join()", file="DequeuedJobsWatcher.cs", label="Entry System.Threading.Thread.Join()", span="0-0"];
m4_55 [cluster="HangFire.States.FailedState.FailedState(string, System.Exception)", file="DequeuedJobsWatcher.cs", label="Entry HangFire.States.FailedState.FailedState(string, System.Exception)", span="10-10"];
m4_20 [cluster="System.TimeSpan.FromMinutes(double)", file="DequeuedJobsWatcher.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m4_0 [cluster="Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="10-10"];
m4_1 [cluster="Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="DequeuedJobsWatcher.cs", label="var provider = CreateProvider()", span="12-12"];
m4_2 [cluster="Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="DequeuedJobsWatcher.cs", label="var jobQueue = provider.GetJobQueue(null)", span="14-14"];
m4_3 [cluster="Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="DequeuedJobsWatcher.cs", label="Assert.NotNull(jobQueue)", span="16-16"];
m4_56 [cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="DequeuedJobsWatcher.cs", label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", span="57-57"];
m4_38 [cluster="Unk.SetEntryInHash", file="DequeuedJobsWatcher.cs", label="Entry Unk.SetEntryInHash", span=""];
m4_34 [cluster="string.Format(string, object)", file="DequeuedJobsWatcher.cs", label="Entry string.Format(string, object)", span="0-0"];
m4_37 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="DequeuedJobsWatcher.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="62-62"];
m4_5 [cluster="Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", span="29-29"];
m4_10 [cluster="Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="DequeuedJobsWatcher.cs", label="var monitoring = provider.GetJobQueueMonitoringApi(null)", span="24-24"];
m4_11 [cluster="Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="DequeuedJobsWatcher.cs", label="Assert.NotNull(monitoring)", span="26-26"];
m4_13 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="37-37"];
m4_14 [cluster="Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", file="DequeuedJobsWatcher.cs", label="return new MsmqJobQueueProvider(\r\n                CleanMsmqQueueAttribute.PathPattern,\r\n                Queues);", span="31-33"];
m4_16 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>)", span="26-26"];
m4_12 [cluster="Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="20-20"];
m4_15 [cluster="Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", span="29-29"];
m4_17 [cluster="HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", file="DequeuedJobsWatcher.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.FindAndRequeueTimedOutJobs()", span="32-32"];
m4_53 [cluster="HangFire.JobHelper.GetQueue(System.Type)", file="DequeuedJobsWatcher.cs", label="Entry HangFire.JobHelper.GetQueue(System.Type)", span="22-22"];
m4_80 [cluster="System.Threading.EventWaitHandle.Set()", file="DequeuedJobsWatcher.cs", label="Entry System.Threading.EventWaitHandle.Set()", span="0-0"];
m4_8 [cluster="HangFire.Server.DequeuedJobsWatcher.Dispose()", file="DequeuedJobsWatcher.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.Dispose()", span="27-27"];
m4_9 [cluster="Unk.Dispose", file="DequeuedJobsWatcher.cs", label="Entry Unk.Dispose", span=""];
m4_54 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string, string)", file="DequeuedJobsWatcher.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState(string, string)", span="10-10"];
m4_42 [cluster="HangFire.Server.JobFetcher.RemoveFromFetchedQueue(IRedisClient, string, string)", file="DequeuedJobsWatcher.cs", label="Entry HangFire.Server.JobFetcher.RemoveFromFetchedQueue(IRedisClient, string, string)", span="86-86"];
m4_6 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueue(IDbConnection)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueue(IDbConnection)", span="32-32"];
m4_7 [cluster="HangFire.Server.DequeuedJobsWatcher.Dispose()", file="DequeuedJobsWatcher.cs", label="_redis.Dispose()", span="29-29"];
m4_39 [cluster="Unk.TimedOutByFetchedTime", file="DequeuedJobsWatcher.cs", label="Entry Unk.TimedOutByFetchedTime", span=""];
m4_4 [cluster="Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="10-10"];
m4_40 [cluster="Unk.TimedOutByCheckedTime", file="DequeuedJobsWatcher.cs", label="Entry Unk.TimedOutByCheckedTime", span=""];
m4_67 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="DequeuedJobsWatcher.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", span="142-142"];
m4_69 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="DequeuedJobsWatcher.cs", label="FindAndRequeueTimedOutJobs()", span="148-148"];
m4_70 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="DequeuedJobsWatcher.cs", label="_stopped.WaitOne(SleepTimeout)", span="150-150"];
m4_72 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="DequeuedJobsWatcher.cs", label="_logger.Fatal(\r\n                    ''Unexpected exception caught in the timed out jobs thread. Timed out jobs will not be re-queued.'',\r\n                    ex)", span="158-160"];
m4_68 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="DequeuedJobsWatcher.cs", label=true, span="146-146"];
m4_71 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="DequeuedJobsWatcher.cs", label=Exception, span="156-156"];
m4_73 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", file="DequeuedJobsWatcher.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Work()", span="142-142"];
m4_41 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="DequeuedJobsWatcher.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", span="101-101"];
m4_45 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", color=green, community=0, file="DequeuedJobsWatcher.cs", label="0: var queue = JobHelper.GetQueue(Type.GetType(jobType))", span="111-111"];
m4_43 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="DequeuedJobsWatcher.cs", label="var jobType = _redis.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                ''Type'')", span="103-105"];
m4_44 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="DequeuedJobsWatcher.cs", label="JobState state", span="107-107"];
m4_46 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="DequeuedJobsWatcher.cs", label="state = new EnqueuedState(''Requeued due to time out'', queue)", span="112-112"];
m4_47 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", color=green, community=0, file="DequeuedJobsWatcher.cs", label="0: Exception", span="114-114"];
m4_48 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", color=green, community=0, file="DequeuedJobsWatcher.cs", label="0: state = new FailedState(''Failed to re-queue the job'', ex)", span="116-116"];
m4_49 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="DequeuedJobsWatcher.cs", label="_stateMachine.ChangeState(jobId, state, EnqueuedState.Name, ProcessingState.Name)", span="119-119"];
m4_50 [cluster="HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", file="DequeuedJobsWatcher.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.TryToRequeueTheJob(string)", span="101-101"];
m4_75 [cluster="Unk.Fatal", file="DequeuedJobsWatcher.cs", label="Entry Unk.Fatal", span=""];
m4_22 [cluster="Unk.GetAllItemsFromList", file="DequeuedJobsWatcher.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m4_52 [cluster="Unk.GetType", file="DequeuedJobsWatcher.cs", label="Entry Unk.GetType", span=""];
m4_51 [cluster="Unk.GetValueFromHash", file="DequeuedJobsWatcher.cs", label="Entry Unk.GetValueFromHash", span=""];
m4_18 [cluster="Unk.GetAllItemsFromSet", file="DequeuedJobsWatcher.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m4_74 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="DequeuedJobsWatcher.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m4_23 [cluster="Unk.RequeueJobIfTimedOut", file="DequeuedJobsWatcher.cs", label="Entry Unk.RequeueJobIfTimedOut", span=""];
m4_19 [cluster="Unk.Format", file="DequeuedJobsWatcher.cs", label="Entry Unk.Format", span=""];
m4_35 [cluster="Unk.GetValuesFromHash", file="DequeuedJobsWatcher.cs", label="Entry Unk.GetValuesFromHash", span=""];
m4_36 [cluster="Unk.IsNullOrEmpty", file="DequeuedJobsWatcher.cs", label="Entry Unk.IsNullOrEmpty", span=""];
m4_76 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="DequeuedJobsWatcher.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="164-164"];
m4_77 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="DequeuedJobsWatcher.cs", label="_stopped.Set()", span="166-166"];
m4_78 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="DequeuedJobsWatcher.cs", label="thread.Join()", span="167-167"];
m4_79 [cluster="HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="DequeuedJobsWatcher.cs", label="Exit HangFire.Server.DequeuedJobsWatcher.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="164-164"];
m4_21 [cluster="Unk.AcquireLock", file="DequeuedJobsWatcher.cs", label="Entry Unk.AcquireLock", span=""];
m4_82 [file="DequeuedJobsWatcher.cs", label="HangFire.Server.DequeuedJobsWatcher", span=""];
m5_0 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m5_1 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="DequeuedJobsWatcher.feature.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m5_2 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=1, file="DequeuedJobsWatcher.feature.cs", label="0: TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Re-queueing of timed out jobs'', ''\r\n  As an Administrator, I want the jobs to recovered automatically \r\n  after a s'' +\r\n                    ''erver failure, which took them into the processing.'', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-35"];
m5_3 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="DequeuedJobsWatcher.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="36-36"];
m5_4 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=red, community=0, file="DequeuedJobsWatcher.feature.cs", label="0: Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m5_5 [cluster="Unk.GetTestRunner", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m5_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="DequeuedJobsWatcher.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m5_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="DequeuedJobsWatcher.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m5_8 [cluster="Unk.OnFeatureStart", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m5_9 [cluster="HangFire.Web.CommandHandler.ProcessRequest()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Web.CommandHandler.ProcessRequest()", span="31-31"];
m5_14 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", span="47-47"];
m5_16 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="DequeuedJobsWatcher.feature.cs", label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(null)", span="52-52"];
m5_15 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="DequeuedJobsWatcher.feature.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Re-queueing of timed out jobs''))", span="49-50"];
m5_17 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", span="47-47"];
m5_10 [cluster="HttpException.cstr", file="DequeuedJobsWatcher.feature.cs", label="Entry HttpException.cstr", span=""];
m5_11 [cluster="System.Func<TResult>.Invoke()", file="DequeuedJobsWatcher.feature.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m5_12 [file="DequeuedJobsWatcher.feature.cs", label="HangFire.Web.CommandHandler", span=""];
m6_0 [cluster="HangFire.Web.Pages.ErrorPage.ErrorPage(System.Exception)", file="ErrorPage.cs", label="Entry HangFire.Web.Pages.ErrorPage.ErrorPage(System.Exception)", span="6-6"];
m6_1 [cluster="HangFire.Web.Pages.ErrorPage.ErrorPage(System.Exception)", color=green, community=0, file="ErrorPage.cs", label="0: Exception = exception", span="8-8"];
m6_2 [cluster="HangFire.Web.Pages.ErrorPage.ErrorPage(System.Exception)", file="ErrorPage.cs", label="Exit HangFire.Web.Pages.ErrorPage.ErrorPage(System.Exception)", span="6-6"];
m6_3 [file="ErrorPage.cs", label="HangFire.Web.Pages.ErrorPage", span=""];
m7_4 [cluster="System.TimeSpan.FromMinutes(double)", file="ErrorPage.generated.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m7_0 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="ErrorPage.generated.cs", label="Entry Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="22-22"];
m7_1 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", color=green, community=0, file="ErrorPage.generated.cs", label="0: ServerTimeout = TimeSpan.FromMinutes(1)", span="24-24"];
m7_2 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", color=green, community=0, file="ErrorPage.generated.cs", label="0: CheckInterval = TimeSpan.FromMinutes(5)", span="25-25"];
m7_3 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="ErrorPage.generated.cs", label="Exit Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="22-22"];
m7_5 [file="ErrorPage.generated.cs", label="Hangfire.Server.ServerWatchdogOptions", span=""];
m8_14 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="HangFireJobActivatorTests.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m8_55 [cluster="System.Collections.Generic.List<T>.List()", file="HangFireJobActivatorTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m8_17 [cluster="string.Format(string, object, object)", file="HangFireJobActivatorTests.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m8_58 [cluster="HangFire.BackgroundJobServer.GetStorageSupervisors()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.BackgroundJobServer.GetStorageSupervisors()", span="133-133"];
m8_75 [cluster="HangFire.BackgroundJobServer.GetStorageSupervisors()", file="HangFireJobActivatorTests.cs", label="var components = _storage.GetComponents()", span="135-135"];
m8_76 [cluster="HangFire.BackgroundJobServer.GetStorageSupervisors()", file="HangFireJobActivatorTests.cs", label="return components\r\n                .Select(component => new ServerSupervisor(component))\r\n                .ToArray();", span="137-139"];
m8_77 [cluster="HangFire.BackgroundJobServer.GetStorageSupervisors()", file="HangFireJobActivatorTests.cs", label="Exit HangFire.BackgroundJobServer.GetStorageSupervisors()", span="133-133"];
m8_45 [cluster="HangFire.Server.ServerBootstrapper.ServerBootstrapper(string, HangFire.Server.ServerContext, HangFire.JobStorage, System.Lazy<HangFire.Server.IServerSupervisor>)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.ServerBootstrapper.ServerBootstrapper(string, HangFire.Server.ServerContext, HangFire.JobStorage, System.Lazy<HangFire.Server.IServerSupervisor>)", span="31-31"];
m8_26 [cluster="Unk.Info", file="HangFireJobActivatorTests.cs", label="Entry Unk.Info", span=""];
m8_78 [cluster="HangFire.JobStorage.GetComponents()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.JobStorage.GetComponents()", span="58-58"];
m8_48 [cluster="HangFire.Server.ServerSupervisorOptions.ServerSupervisorOptions()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.ServerSupervisorOptions.ServerSupervisorOptions()", span="25-25"];
m8_46 [cluster="System.Lazy<T>.Lazy(System.Func<T>)", file="HangFireJobActivatorTests.cs", label="Entry System.Lazy<T>.Lazy(System.Func<T>)", span="0-0"];
m8_56 [cluster="HangFire.BackgroundJobServer.GetCommonSupervisors()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.BackgroundJobServer.GetCommonSupervisors()", span="114-114"];
m8_60 [cluster="HangFire.BackgroundJobServer.GetCommonSupervisors()", file="HangFireJobActivatorTests.cs", label="var stateMachineFactory = new StateMachineFactory(_storage)", span="116-116"];
m8_62 [cluster="HangFire.BackgroundJobServer.GetCommonSupervisors()", file="HangFireJobActivatorTests.cs", label="yield return new ServerSupervisor(new WorkerManager(sharedWorkerContext, _options.WorkerCount));", span="125-125"];
m8_63 [cluster="HangFire.BackgroundJobServer.GetCommonSupervisors()", file="HangFireJobActivatorTests.cs", label="yield return new ServerSupervisor(new ServerHeartbeat(_storage, _serverId));", span="126-126"];
m8_64 [cluster="HangFire.BackgroundJobServer.GetCommonSupervisors()", file="HangFireJobActivatorTests.cs", label="yield return new ServerSupervisor(new ServerWatchdog(_storage));", span="127-127"];
m8_65 [cluster="HangFire.BackgroundJobServer.GetCommonSupervisors()", file="HangFireJobActivatorTests.cs", label="yield return new ServerSupervisor(\r\n                new SchedulePoller(_storage, stateMachineFactory, _options.SchedulePollingInterval));", span="129-130"];
m8_61 [cluster="HangFire.BackgroundJobServer.GetCommonSupervisors()", file="HangFireJobActivatorTests.cs", label="var sharedWorkerContext = new SharedWorkerContext(\r\n                _serverId,\r\n                _options.Queues,\r\n                _storage,\r\n                new JobPerformanceProcess(),\r\n                JobActivator.Current,\r\n                stateMachineFactory)", span="117-123"];
m8_66 [cluster="HangFire.BackgroundJobServer.GetCommonSupervisors()", file="HangFireJobActivatorTests.cs", label="Exit HangFire.BackgroundJobServer.GetCommonSupervisors()", span="114-114"];
m8_16 [cluster="System.Diagnostics.Process.GetCurrentProcess()", file="HangFireJobActivatorTests.cs", label="Entry System.Diagnostics.Process.GetCurrentProcess()", span="0-0"];
m8_27 [cluster="Unk.InfoFormat", file="HangFireJobActivatorTests.cs", label="Entry Unk.InfoFormat", span=""];
m8_18 [cluster="HangFire.BackgroundJobServer.GetBootstrapSupervisor()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.BackgroundJobServer.GetBootstrapSupervisor()", span="82-82"];
m8_40 [cluster="HangFire.BackgroundJobServer.GetBootstrapSupervisor()", file="HangFireJobActivatorTests.cs", label="var context = new ServerContext\r\n            {\r\n                Queues = _options.Queues,\r\n                WorkerCount = _options.WorkerCount\r\n            }", span="84-88"];
m8_41 [cluster="HangFire.BackgroundJobServer.GetBootstrapSupervisor()", file="HangFireJobActivatorTests.cs", label="var bootstrapper = new ServerBootstrapper(\r\n                _serverId, \r\n                context, \r\n                _storage, \r\n                new Lazy<IServerSupervisor>(GetSupervisors))", span="90-94"];
m8_42 [cluster="HangFire.BackgroundJobServer.GetBootstrapSupervisor()", file="HangFireJobActivatorTests.cs", label="return new ServerSupervisor(\r\n                bootstrapper, \r\n                new ServerSupervisorOptions\r\n                {\r\n                    ShutdownTimeout = _options.ShutdownTimeout\r\n                });", span="96-101"];
m8_43 [cluster="HangFire.BackgroundJobServer.GetBootstrapSupervisor()", file="HangFireJobActivatorTests.cs", label="Exit HangFire.BackgroundJobServer.GetBootstrapSupervisor()", span="82-82"];
m8_29 [cluster="HangFire.BackgroundJobServerOptions.WriteToLog(ILog)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.BackgroundJobServerOptions.WriteToLog(ILog)", span="59-59"];
m8_30 [cluster="HangFire.Server.IServerSupervisor.Start()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.IServerSupervisor.Start()", span="22-22"];
m8_59 [cluster="HangFire.Server.ServerSupervisorCollection.ServerSupervisorCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerSupervisor>)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.ServerSupervisorCollection.ServerSupervisorCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerSupervisor>)", span="26-26"];
m8_72 [cluster="HangFire.Server.ServerHeartbeat.ServerHeartbeat(HangFire.JobStorage, string)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.ServerHeartbeat.ServerHeartbeat(HangFire.JobStorage, string)", span="28-28"];
m8_2 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", span="41-41"];
m8_3 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", file="HangFireJobActivatorTests.cs", label="Exit HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", span="41-41"];
m8_69 [cluster="HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.JobPerformanceProcess.JobPerformanceProcess()", span="28-28"];
m8_0 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.BackgroundJobServer.BackgroundJobServer()", span="36-36"];
m8_1 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer()", file="HangFireJobActivatorTests.cs", label="Exit HangFire.BackgroundJobServer.BackgroundJobServer()", span="36-36"];
m8_4 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", span="46-46"];
m8_5 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="HangFireJobActivatorTests.cs", label="options == null", span="48-48"];
m8_7 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="HangFireJobActivatorTests.cs", label="storage == null", span="49-49"];
m8_9 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="HangFireJobActivatorTests.cs", label="_options = options", span="51-51"];
m8_10 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="HangFireJobActivatorTests.cs", label="_storage = storage", span="52-52"];
m8_6 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="HangFireJobActivatorTests.cs", label="throw new ArgumentNullException(''options'');", span="48-48"];
m8_8 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="HangFireJobActivatorTests.cs", label="throw new ArgumentNullException(''storage'');", span="49-49"];
m8_11 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="HangFireJobActivatorTests.cs", label="_serverId = String.Format(''{0}:{1}'', _options.ServerName.ToLowerInvariant(), Process.GetCurrentProcess().Id)", span="54-54"];
m8_12 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="HangFireJobActivatorTests.cs", label="_bootstrapSupervisor = GetBootstrapSupervisor()", span="57-57"];
m8_13 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", file="HangFireJobActivatorTests.cs", label="Exit HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions, HangFire.JobStorage)", span="46-46"];
m8_47 [cluster="HangFire.Server.ServerSupervisor.ServerSupervisor(HangFire.Server.IServerComponent, HangFire.Server.ServerSupervisorOptions)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.ServerSupervisor.ServerSupervisor(HangFire.Server.IServerComponent, HangFire.Server.ServerSupervisorOptions)", span="41-41"];
m8_31 [cluster="HangFire.BackgroundJobServer.Stop()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.BackgroundJobServer.Stop()", span="71-71"];
m8_32 [cluster="HangFire.BackgroundJobServer.Stop()", file="HangFireJobActivatorTests.cs", label="_bootstrapSupervisor.Stop()", span="73-73"];
m8_33 [cluster="HangFire.BackgroundJobServer.Stop()", file="HangFireJobActivatorTests.cs", label="Exit HangFire.BackgroundJobServer.Stop()", span="71-71"];
m8_44 [cluster="HangFire.Server.ServerContext.ServerContext()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18"];
m8_15 [cluster="string.ToLowerInvariant()", file="HangFireJobActivatorTests.cs", label="Entry string.ToLowerInvariant()", span="0-0"];
m8_81 [cluster="lambda expression", file="HangFireJobActivatorTests.cs", label="Entry lambda expression", span="138-138"];
m8_82 [cluster="lambda expression", file="HangFireJobActivatorTests.cs", label="new ServerSupervisor(component)", span="138-138"];
m8_83 [cluster="lambda expression", file="HangFireJobActivatorTests.cs", label="Exit lambda expression", span="138-138"];
m8_74 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.SchedulePoller.SchedulePoller(HangFire.JobStorage, HangFire.States.IStateMachineFactory, System.TimeSpan)", span="34-34"];
m8_57 [cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", file="HangFireJobActivatorTests.cs", label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0"];
m8_79 [cluster="Unk.Select", file="HangFireJobActivatorTests.cs", label="Entry Unk.Select", span=""];
m8_19 [cluster="HangFire.BackgroundJobServer.Start()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.BackgroundJobServer.Start()", span="60-60"];
m8_20 [cluster="HangFire.BackgroundJobServer.Start()", file="HangFireJobActivatorTests.cs", label="Logger.Info(''Starting HangFire Server...'')", span="62-62"];
m8_21 [cluster="HangFire.BackgroundJobServer.Start()", file="HangFireJobActivatorTests.cs", label="Logger.InfoFormat(''Using job storage: '{0}'.'', _storage)", span="63-63"];
m8_22 [cluster="HangFire.BackgroundJobServer.Start()", file="HangFireJobActivatorTests.cs", label="_storage.WriteOptionsToLog(Logger)", span="65-65"];
m8_23 [cluster="HangFire.BackgroundJobServer.Start()", file="HangFireJobActivatorTests.cs", label="_options.WriteToLog(Logger)", span="66-66"];
m8_24 [cluster="HangFire.BackgroundJobServer.Start()", file="HangFireJobActivatorTests.cs", label="_bootstrapSupervisor.Start()", span="68-68"];
m8_25 [cluster="HangFire.BackgroundJobServer.Start()", file="HangFireJobActivatorTests.cs", label="Exit HangFire.BackgroundJobServer.Start()", span="60-60"];
m8_70 [cluster="HangFire.Server.ServerSupervisor.ServerSupervisor(HangFire.Server.IServerComponent)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.ServerSupervisor.ServerSupervisor(HangFire.Server.IServerComponent)", span="36-36"];
m8_28 [cluster="HangFire.JobStorage.WriteOptionsToLog(ILog)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.JobStorage.WriteOptionsToLog(ILog)", span="68-68"];
m8_35 [cluster="HangFire.BackgroundJobServer.Dispose()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.BackgroundJobServer.Dispose()", span="76-76"];
m8_36 [cluster="HangFire.BackgroundJobServer.Dispose()", file="HangFireJobActivatorTests.cs", label="_bootstrapSupervisor.Dispose()", span="78-78"];
m8_37 [cluster="HangFire.BackgroundJobServer.Dispose()", file="HangFireJobActivatorTests.cs", label="Logger.Info(''HangFire Server stopped.'')", span="79-79"];
m8_38 [cluster="HangFire.BackgroundJobServer.Dispose()", file="HangFireJobActivatorTests.cs", label="Exit HangFire.BackgroundJobServer.Dispose()", span="76-76"];
m8_49 [cluster="HangFire.BackgroundJobServer.GetSupervisors()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.BackgroundJobServer.GetSupervisors()", span="104-104"];
m8_50 [cluster="HangFire.BackgroundJobServer.GetSupervisors()", file="HangFireJobActivatorTests.cs", label="var supervisors = new List<IServerSupervisor>()", span="106-106"];
m8_51 [cluster="HangFire.BackgroundJobServer.GetSupervisors()", file="HangFireJobActivatorTests.cs", label="supervisors.AddRange(GetCommonSupervisors())", span="108-108"];
m8_52 [cluster="HangFire.BackgroundJobServer.GetSupervisors()", file="HangFireJobActivatorTests.cs", label="supervisors.AddRange(GetStorageSupervisors())", span="109-109"];
m8_53 [cluster="HangFire.BackgroundJobServer.GetSupervisors()", file="HangFireJobActivatorTests.cs", label="return new ServerSupervisorCollection(supervisors);", span="111-111"];
m8_54 [cluster="HangFire.BackgroundJobServer.GetSupervisors()", file="HangFireJobActivatorTests.cs", label="Exit HangFire.BackgroundJobServer.GetSupervisors()", span="104-104"];
m8_34 [cluster="HangFire.Server.IServerSupervisor.Stop()", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.IServerSupervisor.Stop()", span="23-23"];
m8_39 [cluster="System.IDisposable.Dispose()", file="HangFireJobActivatorTests.cs", label="Entry System.IDisposable.Dispose()", span="0-0"];
m8_68 [cluster="HangFire.Server.SharedWorkerContext.SharedWorkerContext(string, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.JobActivator, HangFire.States.IStateMachineFactory)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.SharedWorkerContext.SharedWorkerContext(string, string[], HangFire.JobStorage, HangFire.Server.IJobPerformanceProcess, HangFire.JobActivator, HangFire.States.IStateMachineFactory)", span="23-23"];
m8_71 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", span="30-30"];
m8_73 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="29-29"];
m8_67 [cluster="HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", file="HangFireJobActivatorTests.cs", label="Entry HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", span="25-25"];
m8_84 [file="HangFireJobActivatorTests.cs", label="HangFire.BackgroundJobServer", span=""];
m9_11 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="HangFirePageFactory.cs", label="Entry Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="82-82"];
m9_12 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="HangFirePageFactory.cs", label="logger.InfoFormat(''Using the following options for Hangfire Server:'')", span="84-84"];
m9_13 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="HangFirePageFactory.cs", label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="85-85"];
m9_14 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="HangFirePageFactory.cs", label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="86-86"];
m9_15 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="HangFirePageFactory.cs", label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="87-87"];
m9_16 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="HangFirePageFactory.cs", label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="88-88"];
m9_17 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="HangFirePageFactory.cs", label="Exit Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="82-82"];
m9_8 [cluster="System.Math.Min(int, int)", file="HangFirePageFactory.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m9_18 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="HangFirePageFactory.cs", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="217-217"];
m9_9 [cluster="System.TimeSpan.FromSeconds(double)", file="HangFirePageFactory.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m9_20 [cluster="Unk.Join", file="HangFirePageFactory.cs", label="Entry Unk.Join", span=""];
m9_0 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="HangFirePageFactory.cs", label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="33-33"];
m9_1 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="HangFirePageFactory.cs", label="WorkerCount = Math.Min(Environment.ProcessorCount * 5, MaxDefaultWorkerCount)", span="35-35"];
m9_2 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="HangFirePageFactory.cs", label="ServerName = Environment.MachineName", span="36-36"];
m9_3 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="HangFirePageFactory.cs", label="Queues = new[] { EnqueuedState.DefaultQueue }", span="37-37"];
m9_4 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="HangFirePageFactory.cs", label="ShutdownTimeout = TimeSpan.FromSeconds(15)", span="38-38"];
m9_5 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="HangFirePageFactory.cs", label="SchedulePollingInterval = TimeSpan.FromSeconds(15)", span="39-39"];
m9_6 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="HangFirePageFactory.cs", label="ServerWatchdogOptions = new ServerWatchdogOptions()", span="41-41"];
m9_7 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="HangFirePageFactory.cs", label="Exit Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="33-33"];
m9_10 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="HangFirePageFactory.cs", label="Entry Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="22-22"];
m9_21 [cluster="lambda expression", file="HangFirePageFactory.cs", label="Entry lambda expression", span="86-86"];
m9_22 [cluster="lambda expression", file="HangFirePageFactory.cs", label="''''' + x + '''''", span="86-86"];
m9_23 [cluster="lambda expression", file="HangFirePageFactory.cs", label="Exit lambda expression", span="86-86"];
m9_24 [file="HangFirePageFactory.cs", label="Hangfire.BackgroundJobServerOptions", span=""];
m12_239 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="448-448"];
m12_240 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="JobClient.feature.cs", label="var serializedHistory = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="450-451"];
m12_244 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="JobClient.feature.cs", label="Assert.Equal(table.Rows[i][''State''], history[i][''State''])", span="456-456"];
m12_241 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="JobClient.feature.cs", label="var history = serializedHistory.Select(JobHelper.FromJson<Dictionary<string, string>>).ToList()", span="452-452"];
m12_243 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="JobClient.feature.cs", label="i < table.RowCount", span="454-454"];
m12_242 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="JobClient.feature.cs", label="var i = 0", span="454-454"];
m12_245 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="JobClient.feature.cs", label="i++", span="454-454"];
m12_246 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="448-448"];
m12_153 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="307-307"];
m12_156 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="JobClient.feature.cs", label="Assert.True(timestamp > DateTime.UtcNow.AddSeconds(-1))", span="312-312"];
m12_157 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="JobClient.feature.cs", label="Assert.True(timestamp < DateTime.UtcNow.AddSeconds(1))", span="313-313"];
m12_155 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="JobClient.feature.cs", label="var timestamp = JobHelper.FromTimestamp((long)score)", span="310-310"];
m12_154 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="JobClient.feature.cs", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:processing'', JobSteps.DefaultJobId)", span="309-309"];
m12_158 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="307-307"];
m12_137 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="282-282"];
m12_138 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="JobClient.feature.cs", label="Assert.Equal(1, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="284-284"];
m12_139 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="JobClient.feature.cs", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:failed'', JobSteps.DefaultJobId))", span="285-285"];
m12_140 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="282-282"];
m12_90 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="198-198"];
m12_91 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", color=green, community=0, file="JobClient.feature.cs", label="0: var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="201-202"];
m12_92 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="JobClient.feature.cs", label="stateMachine.ChangeState(JobSteps.DefaultJobId, _stateMocks[state].Object, allowedState)", span="203-203"];
m12_93 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="198-198"];
m12_152 [cluster="Unk.False", file="JobClient.feature.cs", label="Entry Unk.False", span=""];
m12_19 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76"];
m12_20 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", color=green, community=0, file="JobClient.feature.cs", label="0: _state = new EnqueuedState\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="78-81"];
m12_21 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76"];
m12_162 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="317-317"];
m12_163 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="JobClient.feature.cs", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="319-319"];
m12_166 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="JobClient.feature.cs", label="Assert.True(timestamp >= DateTime.UtcNow.Date.AddDays(1))", span="323-323"];
m12_167 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="JobClient.feature.cs", label="Assert.True(timestamp < DateTime.UtcNow.Date.AddDays(2))", span="324-324"];
m12_164 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="JobClient.feature.cs", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:schedule'', JobSteps.DefaultJobId)", span="320-320"];
m12_165 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="JobClient.feature.cs", label="var timestamp = JobHelper.FromTimestamp((long) score)", span="321-321"];
m12_168 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="317-317"];
m12_8 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="JobClient.feature.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m12_9 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="JobClient.feature.cs", label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="28-28"];
m12_10 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58"];
m12_64 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="122-122"];
m12_66 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", color=green, community=0, file="JobClient.feature.cs", label="0: _filters.Add(\r\n                new TestStateChangingFilter(name, _stateChangingResults, _stateMocks[state].Object))", span="126-127"];
m12_65 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="JobClient.feature.cs", label="Given(String.Format(''a '{0}' state'', state))", span="124-124"];
m12_67 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="122-122"];
m12_89 [cluster="Unk.ChangeState", file="JobClient.feature.cs", label="Entry Unk.ChangeState", span=""];
m12_202 [cluster="Unk.Unapply", file="JobClient.feature.cs", label="Entry Unk.Unapply", span=""];
m12_102 [cluster="Unk.ForEach", file="JobClient.feature.cs", label="Entry Unk.ForEach", span=""];
m12_48 [cluster="Unk.Given", file="JobClient.feature.cs", label="Entry Unk.Given", span=""];
m12_169 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="328-328"];
m12_170 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="JobClient.feature.cs", label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="330-330"];
m12_171 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="328-328"];
m12_136 [cluster="HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", file="JobClient.feature.cs", label="Entry HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", span="8-8"];
m12_228 [cluster="Unk.ContainsKey", file="JobClient.feature.cs", label="Entry Unk.ContainsKey", span=""];
m12_212 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="401-401"];
m12_217 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="JobClient.feature.cs", label=_stateProperties, span="410-410"];
m12_215 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="JobClient.feature.cs", label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="407-407"];
m12_213 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="JobClient.feature.cs", label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="403-404"];
m12_219 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="JobClient.feature.cs", label="Assert.Equal(property.Value, history[property.Key])", span="413-413"];
m12_218 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="JobClient.feature.cs", label="Assert.True(history.ContainsKey(property.Key))", span="412-412"];
m12_216 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="JobClient.feature.cs", label="Assert.NotNull(history)", span="408-408"];
m12_214 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="JobClient.feature.cs", label="Assert.NotNull(entry)", span="405-405"];
m12_220 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="401-401"];
m12_121 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="249-249"];
m12_122 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", color=green, community=0, file="JobClient.feature.cs", label="0: var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="251-256"];
m12_123 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", color=green, community=0, file="JobClient.feature.cs", label="0: keys.ForEach(x =>\r\n            {\r\n                var ttl = Redis.Client.GetTimeToLive(x);\r\n                Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl));\r\n            })", span="258-264"];
m12_124 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="249-249"];
m12_120 [cluster="Unk.PopItemFromList", file="JobClient.feature.cs", label="Entry Unk.PopItemFromList", span=""];
m12_68 [cluster="TestStateChangingFilter.cstr", file="JobClient.feature.cs", label="Entry TestStateChangingFilter.cstr", span=""];
m12_13 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="JobClient.feature.cs", label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="28-28"];
m12_29 [cluster="Mock<JobState>.cstr", file="JobClient.feature.cs", label="Entry Mock<JobState>.cstr", span=""];
m12_221 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="JobClient.feature.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m12_22 [cluster="HangFire.States.EnqueuedState.EnqueuedState()", file="JobClient.feature.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState()", span="25-25"];
m12_94 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="207-207"];
m12_95 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", color=green, community=0, file="JobClient.feature.cs", label="0: Assert.Equal(name, _state.StateName)", span="209-209"];
m12_96 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="207-207"];
m12_59 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="116-116"];
m12_60 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", color=green, community=0, file="JobClient.feature.cs", label="0: _filters.Add(new TestStateChangingFilter(name, _stateChangingResults))", span="118-118"];
m12_61 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="116-116"];
m12_11 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="JobClient.feature.cs", label="_state = new ProcessingState(''TestServer'')\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="60-63"];
m12_12 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58"];
m12_18 [cluster="System.DateTime.AddDays(double)", file="JobClient.feature.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m12_195 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="386-386"];
m12_196 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="JobClient.feature.cs", label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId)))", span="388-389"];
m12_197 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="386-386"];
m12_222 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="418-418"];
m12_224 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="JobClient.feature.cs", label=_stateProperties, span="423-423"];
m12_223 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="JobClient.feature.cs", label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="420-421"];
m12_226 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="JobClient.feature.cs", label="Assert.Equal(property.Value, stateEntry[property.Key])", span="426-426"];
m12_225 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="JobClient.feature.cs", label="Assert.True(stateEntry.ContainsKey(property.Key))", span="425-425"];
m12_227 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="418-418"];
m12_229 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="431-431"];
m12_230 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="Assert.Equal(table.RowCount, _stateChangingResults.Count)", span="433-433"];
m12_233 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="Assert.Equal(table.Rows[i][''Filter''], _stateChangingResults[i])", span="437-437"];
m12_231 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="var i = 0", span="435-435"];
m12_232 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="i < table.RowCount", span="435-435"];
m12_234 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="i++", span="435-435"];
m12_235 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="431-431"];
m12_203 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="389-389"];
m12_37 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="89-89"];
m12_38 [cluster="lambda expression", color=green, community=0, file="JobClient.feature.cs", label="0: x.GetData(It.IsAny<JobMethod>())", span="89-89"];
m12_39 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="89-89"];
m12_56 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="101-101"];
m12_57 [cluster="lambda expression", color=green, community=0, file="JobClient.feature.cs", label="0: x.GetData(It.IsAny<JobMethod>())", span="101-101"];
m12_58 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="101-101"];
m12_103 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="222-229"];
m12_105 [cluster="lambda expression", color=green, community=0, file="JobClient.feature.cs", label="0: Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl))", span="225-228"];
m12_104 [cluster="lambda expression", file="JobClient.feature.cs", label="var ttl = Redis.Client.GetTimeToLive(x)", span="224-224"];
m12_106 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="222-229"];
m12_125 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="258-264"];
m12_126 [cluster="lambda expression", color=green, community=0, file="JobClient.feature.cs", label="0: var ttl = Redis.Client.GetTimeToLive(x)", span="260-260"];
m12_127 [cluster="lambda expression", color=green, community=0, file="JobClient.feature.cs", label="0: Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl))", span="261-263"];
m12_128 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="258-264"];
m12_34 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="88-88"];
m12_200 [cluster="lambda expression", file="JobClient.feature.cs", label="x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId))", span="389-389"];
m12_210 [cluster="lambda expression", file="JobClient.feature.cs", label="x.Unapply(It.IsAny<StateApplyingContext>())", span="396-396"];
m12_50 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="100-100"];
m12_53 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="100-100"];
m12_199 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="389-389"];
m12_209 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="396-396"];
m12_36 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="88-88"];
m12_35 [cluster="lambda expression", file="JobClient.feature.cs", label="x.StateName", span="88-88"];
m12_201 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="389-389"];
m12_211 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="396-396"];
m12_52 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="100-100"];
m12_51 [cluster="lambda expression", file="JobClient.feature.cs", label="x[''Name'']", span="100-100"];
m12_55 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="100-100"];
m12_54 [cluster="lambda expression", file="JobClient.feature.cs", label="x[''Value'']", span="100-100"];
m12_204 [cluster="lambda expression", file="JobClient.feature.cs", label="y.JobId == JobSteps.DefaultJobId", span="389-389"];
m12_205 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="389-389"];
m12_175 [cluster="Unk.SetContainsItem", file="JobClient.feature.cs", label="Entry Unk.SetContainsItem", span=""];
m12_62 [cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="JobClient.feature.cs", label="Entry HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", span="14-14"];
m12_249 [cluster="Unk.ToList", file="JobClient.feature.cs", label="Entry Unk.ToList", span=""];
m12_108 [cluster="Unk.Format", file="JobClient.feature.cs", label="Entry Unk.Format", span=""];
m12_149 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="301-301"];
m12_150 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="JobClient.feature.cs", label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="303-303"];
m12_151 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="301-301"];
m12_31 [cluster="Unk.Returns", file="JobClient.feature.cs", label="Entry Unk.Returns", span=""];
m12_33 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="JobClient.feature.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m12_77 [cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="JobClient.feature.cs", label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", span="41-41"];
m12_80 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", span="181-181"];
m12_81 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", color=green, community=0, file="JobClient.feature.cs", label="0: When(String.Format(\r\n                ''I change the state of the '{0}' job to the '{1}''',\r\n                JobSteps.DefaultJobId,\r\n                state))", span="183-186"];
m12_82 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", span="181-181"];
m12_107 [cluster="Unk.GetTimeToLive", file="JobClient.feature.cs", label="Entry Unk.GetTimeToLive", span=""];
m12_63 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="JobClient.feature.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m12_69 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="131-131"];
m12_70 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="JobClient.feature.cs", label="_filters.Add(new TestStateChangedFilter(name, _stateAppliedResults))", span="133-133"];
m12_71 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="131-131"];
m12_42 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="96-96"];
m12_43 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", color=green, community=0, file="JobClient.feature.cs", label="0: Given(String.Format(''a '{0}' state'', state))", span="98-98"];
m12_44 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="JobClient.feature.cs", label="_stateProperties = table.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])", span="100-100"];
m12_45 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", color=green, community=0, file="JobClient.feature.cs", label="0: _stateMocks[state].Setup(x => x.GetData(It.IsAny<JobMethod>()))\r\n                .Returns(_stateProperties)", span="101-102"];
m12_46 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="96-96"];
m12_97 [cluster="Unk.Equal", file="JobClient.feature.cs", label="Entry Unk.Equal", span=""];
m12_206 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="393-393"];
m12_207 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="JobClient.feature.cs", label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.IsAny<StateApplyingContext>()),\r\n                Times.Never)", span="395-397"];
m12_208 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="393-393"];
m12_193 [cluster="Unk.RemoveStartFromList", file="JobClient.feature.cs", label="Entry Unk.RemoveStartFromList", span=""];
m12_176 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="340-340"];
m12_177 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="JobClient.feature.cs", label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="342-342"];
m12_178 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="JobClient.feature.cs", label="Assert.Equal(state, job[''State''])", span="343-343"];
m12_179 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="340-340"];
m12_110 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="233-233"];
m12_111 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", color=green, community=0, file="JobClient.feature.cs", label="0: Assert.Equal(\r\n                changeType == ''increase'' ? ''1'' : ''0'',\r\n                Redis.Client.GetValue(String.Format(''hangfire:stats:succeeded'')))", span="235-237"];
m12_112 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="233-233"];
m12_72 [cluster="HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", file="JobClient.feature.cs", label="Entry HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", span="14-14"];
m12_236 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="442-442"];
m12_237 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="JobClient.feature.cs", label="Assert.Equal(0, _stateChangingResults.Count)", span="444-444"];
m12_238 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="442-442"];
m12_23 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85"];
m12_24 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", color=green, community=0, file="JobClient.feature.cs", label="0: var mock = new Mock<JobState>()", span="87-87"];
m12_25 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="JobClient.feature.cs", label="mock.Setup(x => x.StateName).Returns(state)", span="88-88"];
m12_26 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", color=green, community=0, file="JobClient.feature.cs", label="0: mock.Setup(x => x.GetData(It.IsAny<JobMethod>()))\r\n                .Returns(new Dictionary<string, string>())", span="89-90"];
m12_27 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", color=green, community=0, file="JobClient.feature.cs", label="0: _stateMocks.Add(state, mock)", span="92-92"];
m12_28 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85"];
m12_194 [cluster="Unk.NotNull", file="JobClient.feature.cs", label="Entry Unk.NotNull", span=""];
m12_30 [cluster="Unk.Setup", file="JobClient.feature.cs", label="Entry Unk.Setup", span=""];
m12_14 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67"];
m12_15 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="JobClient.feature.cs", label="_state = new ScheduledState(DateTime.UtcNow.AddDays(1))\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="69-72"];
m12_16 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67"];
m12_172 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="334-334"];
m12_173 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="JobClient.feature.cs", label="Assert.True(Redis.Client.SetContainsItem(''hangfire:queues'', queue))", span="336-336"];
m12_174 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="334-334"];
m12_146 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="295-295"];
m12_147 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="JobClient.feature.cs", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="297-297"];
m12_148 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="295-295"];
m12_17 [cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", file="JobClient.feature.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="27-27"];
m12_141 [cluster="Unk.GetSortedSetCount", file="JobClient.feature.cs", label="Entry Unk.GetSortedSetCount", span=""];
m12_0 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42"];
m12_1 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="JobClient.feature.cs", label="_state = new SucceededState { Reason = ''SomeReason'' }", span="44-44"];
m12_198 [cluster="Unk.Verify", file="JobClient.feature.cs", label="Entry Unk.Verify", span=""];
m12_115 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="241-241"];
m12_116 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", color=green, community=0, file="JobClient.feature.cs", label="0: Assert.Equal(1, Redis.Client.GetListCount(''hangfire:succeeded''))", span="243-243"];
m12_117 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", color=green, community=0, file="JobClient.feature.cs", label="0: Assert.Equal(JobSteps.DefaultJobId, Redis.Client.PopItemFromList(\r\n                ''hangfire:succeeded''))", span="244-245"];
m12_118 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="241-241"];
m12_143 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="289-289"];
m12_144 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="JobClient.feature.cs", label="Assert.Equal(0, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="291-291"];
m12_145 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="289-289"];
m12_184 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="347-347"];
m12_182 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="JobClient.feature.cs", label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="349-350"];
m12_181 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="347-347"];
m12_183 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="JobClient.feature.cs", label="TableAssert.ContainsFollowingItems(table, stateEntry)", span="351-351"];
m12_142 [cluster="Unk.SortedSetContainsItem", file="JobClient.feature.cs", label="Entry Unk.SortedSetContainsItem", span=""];
m12_83 [cluster="string.Format(string, object, object)", file="JobClient.feature.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m12_161 [cluster="System.DateTime.AddSeconds(double)", file="JobClient.feature.cs", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
m12_113 [cluster="string.Format(string, params object[])", file="JobClient.feature.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m12_98 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="213-213"];
m12_99 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", color=green, community=0, file="JobClient.feature.cs", label="0: var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="215-220"];
m12_100 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", color=green, community=0, file="JobClient.feature.cs", label="0: keys.ForEach(x =>\r\n                {\r\n                    var ttl = Redis.Client.GetTimeToLive(x);\r\n                    Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl));\r\n                })", span="222-229"];
m12_101 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="213-213"];
m12_49 [cluster="Unk.ToDictionary", file="JobClient.feature.cs", label="Entry Unk.ToDictionary", span=""];
m12_180 [cluster="Unk.GetAllEntriesFromHash", file="JobClient.feature.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m12_4 [cluster="HangFire.JobStorage.GetComponents()", file="JobClient.feature.cs", label="Entry HangFire.JobStorage.GetComponents()", span="57-57"];
m12_5 [cluster="HangFire.JobStorage.GetComponents()", file="JobClient.feature.cs", label="return Enumerable.Empty<IServerComponent>();", span="59-59"];
m12_6 [cluster="HangFire.JobStorage.GetComponents()", file="JobClient.feature.cs", label="Exit HangFire.JobStorage.GetComponents()", span="57-57"];
m12_7 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="JobClient.feature.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m12_192 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="355-355"];
m12_189 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="JobClient.feature.cs", label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="361-361"];
m12_187 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="JobClient.feature.cs", label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="357-358"];
m12_188 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="JobClient.feature.cs", label="Assert.NotNull(entry)", span="359-359"];
m12_190 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="JobClient.feature.cs", label="Assert.NotNull(history)", span="362-362"];
m12_191 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="JobClient.feature.cs", label="TableAssert.ContainsFollowingItems(table, history)", span="364-364"];
m12_186 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="355-355"];
m12_47 [cluster="string.Format(string, object)", file="JobClient.feature.cs", label="Entry string.Format(string, object)", span="0-0"];
m12_160 [cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="JobClient.feature.cs", label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="41-41"];
m12_40 [cluster="Unk.>", file="JobClient.feature.cs", label="Entry Unk.>", span=""];
m12_159 [cluster="Unk.GetItemScoreInSortedSet", file="JobClient.feature.cs", label="Entry Unk.GetItemScoreInSortedSet", span=""];
m12_78 [cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", file="JobClient.feature.cs", label="Entry HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", span="15-15"];
m12_119 [cluster="Unk.GetListCount", file="JobClient.feature.cs", label="Entry Unk.GetListCount", span=""];
m12_41 [cluster="Unk.GetData", file="JobClient.feature.cs", label="Entry Unk.GetData", span=""];
m12_3 [cluster="HangFire.JobStorage.GetConnection()", file="JobClient.feature.cs", label="Exit HangFire.JobStorage.GetConnection()", span="55-55"];
m12_2 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42"];
m12_32 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JobClient.feature.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m12_84 [cluster="Unk.When", file="JobClient.feature.cs", label="Entry Unk.When", span=""];
m12_129 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="268-268"];
m12_130 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="JobClient.feature.cs", label="Assert.Equal(0, Redis.Client.GetListCount(''hangfire:succeeded''))", span="270-270"];
m12_131 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="268-268"];
m12_132 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="274-274"];
m12_133 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="JobClient.feature.cs", label="TableAssert.ContainsFollowingItems(\r\n                table,\r\n                _state.GetData(_defaultData))", span="276-278"];
m12_134 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="274-274"];
m12_247 [cluster="Unk.GetAllItemsFromList", file="JobClient.feature.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m12_85 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="190-190"];
m12_86 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", color=green, community=0, file="JobClient.feature.cs", label="0: var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="192-193"];
m12_87 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", color=green, community=0, file="JobClient.feature.cs", label="0: stateMachine.ChangeState(jobId, _stateMocks[state].Object)", span="194-194"];
m12_88 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="190-190"];
m12_248 [cluster="Unk.Select", file="JobClient.feature.cs", label="Entry Unk.Select", span=""];
m12_79 [cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="JobClient.feature.cs", label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="113-113"];
m12_73 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="173-173"];
m12_74 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", color=green, community=0, file="JobClient.feature.cs", label="0: var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="175-176"];
m12_75 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="JobClient.feature.cs", label="stateMachine.ChangeState(JobSteps.DefaultJobId, _state)", span="177-177"];
m12_76 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="173-173"];
m12_114 [cluster="Unk.GetValue", file="JobClient.feature.cs", label="Entry Unk.GetValue", span=""];
m12_109 [cluster="Unk.True", file="JobClient.feature.cs", label="Entry Unk.True", span=""];
m12_185 [cluster="Unk.ContainsFollowingItems", file="JobClient.feature.cs", label="Entry Unk.ContainsFollowingItems", span=""];
m12_250 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="461-461"];
m12_251 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="Assert.Equal(table.RowCount, _stateAppliedResults.Count)", span="463-463"];
m12_254 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="Assert.Equal(table.Rows[i][''Method''], _stateAppliedResults[i])", span="467-467"];
m12_252 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="var i = 0", span="465-465"];
m12_253 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="i < table.RowCount", span="465-465"];
m12_255 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="i++", span="465-465"];
m12_256 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="JobClient.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="461-461"];
m12_257 [file="JobClient.feature.cs", label="HangFire.Tests.States.StateSteps", span=""];
m13_5 [cluster="HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="JobClientSteps.cs", label="Entry HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17"];
m13_6 [cluster="HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="JobClientSteps.cs", label="context.Transaction.RemoveFromSet(''processing'', context.JobId)", span="19-19"];
m13_7 [cluster="HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="JobClientSteps.cs", label="Exit HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17"];
m13_3 [cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="JobClientSteps.cs", label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="35-35"];
m13_4 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="JobClientSteps.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="26-26"];
m13_0 [cluster="HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="JobClientSteps.cs", label="Entry HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="9-9"];
m13_1 [cluster="HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="JobClientSteps.cs", label="context.Transaction.AddToSet(\r\n                ''processing'',\r\n                context.JobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow))", span="11-14"];
m13_2 [cluster="HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="JobClientSteps.cs", label="Exit HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="9-9"];
m14_25 [cluster="Unk.OnScenarioStart", file="JobFetcher.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m14_29 [cluster="Unk.CollectScenarioErrors", file="JobFetcher.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m14_21 [cluster="Unk.OnScenarioEnd", file="JobFetcher.feature.cs", label="Entry Unk.OnScenarioEnd", span=""];
m14_55 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119"];
m14_56 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns null when it tries to dequeue a job from an empty queue'', ((string[])(null)))", span="121-121"];
m14_57 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="123-123"];
m14_58 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="125-125"];
m14_59 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="127-127"];
m14_60 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="129-129"];
m14_61 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher does not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="131-131"];
m14_62 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="133-133"];
m14_63 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119"];
m14_0 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m14_1 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m14_2 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=1, file="JobFetcher.feature.cs", label="0: TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''JobFetcher'', ''\r\n  As a user, I expect that my enqueued jobs will be dequeued by the Server.'', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m14_3 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m14_4 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m14_76 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167"];
m14_77 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher listens only specified queue'', ((string[])(null)))", span="169-169"];
m14_78 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="171-171"];
m14_79 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="173-173"];
m14_80 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="175-175"];
m14_81 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="177-177"];
m14_82 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher does not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="179-179"];
m14_83 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="181-181"];
m14_84 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167"];
m14_41 [cluster="Unk.And", file="JobFetcher.feature.cs", label="Entry Unk.And", span=""];
m14_54 [cluster="Unk.But", file="JobFetcher.feature.cs", label="Entry Unk.But", span=""];
m14_5 [cluster="Unk.GetTestRunner", file="JobFetcher.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m14_9 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39"];
m14_10 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m14_11 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs", label="testRunner = null", span="42-42"];
m14_12 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39"];
m14_22 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m14_23 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m14_24 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m14_85 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188"];
m14_86 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher sets the \'fetched\' flag when it dequeues a job'', ((string[])(null)))", span="190-190"];
m14_87 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="192-192"];
m14_88 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="194-194"];
m14_89 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="196-196"];
m14_90 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="198-198"];
m14_91 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Then(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="200-200"];
m14_92 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="202-202"];
m14_93 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188"];
m14_13 [cluster="Unk.OnFeatureEnd", file="JobFetcher.feature.cs", label="Entry Unk.OnFeatureEnd", span=""];
m14_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="JobFetcher.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m14_64 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140"];
m14_65 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher dequeues jobs in the FIFO order'', ((string[])(null)))", span="142-142"];
m14_66 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="144-144"];
m14_67 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="146-146"];
m14_68 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="148-148"];
m14_69 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="150-150"];
m14_70 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="152-152"];
m14_71 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher returns the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="154-154"];
m14_72 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156"];
m14_73 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher returns the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158"];
m14_74 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="160-160"];
m14_75 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140"];
m14_42 [cluster="Unk.When", file="JobFetcher.feature.cs", label="Entry Unk.When", span=""];
m14_14 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46"];
m14_15 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", span="48-49"];
m14_16 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(null)", span="51-51"];
m14_17 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46"];
m14_39 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="JobFetcher.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m14_43 [cluster="Unk.Then", file="JobFetcher.feature.cs", label="Entry Unk.Then", span=""];
m14_40 [cluster="Unk.Given", file="JobFetcher.feature.cs", label="Entry Unk.Given", span=""];
m14_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="JobFetcher.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m14_26 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m14_27 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m14_28 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m14_44 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96"];
m14_45 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher removes the dequeued job from the queue and adds it to the dequeued list'', ((string[])(null)))", span="98-98"];
m14_46 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="100-100"];
m14_47 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102"];
m14_48 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="104-104"];
m14_49 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="106-106"];
m14_50 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.Then(''the queue does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="108-108"];
m14_51 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.But(''the dequeued jobs list contains it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="110-110"];
m14_52 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="112-112"];
m14_53 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96"];
m14_8 [cluster="Unk.OnFeatureStart", file="JobFetcher.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m14_30 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75"];
m14_31 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns the job payload when it dequeues a job'', ((string[])(null)))", span="77-77"];
m14_32 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m14_33 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
m14_34 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83"];
m14_35 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
m14_36 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher returns the payload'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87"];
m14_37 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="89-89"];
m14_38 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75"];
m14_18 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56"];
m14_19 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m14_20 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56"];
m14_94 [file="JobFetcher.feature.cs", label="HangFire.Tests.Server.JobFetcherFeature", span=""];
m15_5 [cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="JobHelper.cs", label="Entry HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17"];
m15_6 [cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="JobHelper.cs", label="context.Transaction.RemoveFromSet(''failed'', context.JobId)", span="19-19"];
m15_7 [cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="JobHelper.cs", label="Exit HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17"];
m15_3 [cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="JobHelper.cs", label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="35-35"];
m15_4 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="JobHelper.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="26-26"];
m15_0 [cluster="HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="JobHelper.cs", label="Entry HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="9-9"];
m15_1 [cluster="HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", color=red, community=0, file="JobHelper.cs", label="0: context.Transaction.AddToSet(\r\n                ''failed'',\r\n                context.JobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow))", span="11-14"];
m15_2 [cluster="HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="JobHelper.cs", label="Exit HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="9-9"];
m16_3 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob.Perform(int, string)", file="JobInvokerTests.cs", label="Entry HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob.Perform(int, string)", span="187-187"];
m16_4 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob.Perform(int, string)", color=red, community=0, file="JobInvokerTests.cs", label="0: A = a", span="189-189"];
m16_5 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob.Perform(int, string)", color=red, community=0, file="JobInvokerTests.cs", label="0: B = b", span="190-190"];
m16_6 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob.Perform(int, string)", file="JobInvokerTests.cs", label="Exit HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob.Perform(int, string)", span="187-187"];
m16_7 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Perform()", file="JobInvokerTests.cs", label="Entry HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Perform()", span="198-198"];
m16_8 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Perform()", file="JobInvokerTests.cs", label="Exit HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Perform()", span="198-198"];
m16_0 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.CorrectJob.Perform()", file="JobInvokerTests.cs", label="Entry HangFire.Tests.UnitTests.JobInvokerTests.CorrectJob.Perform()", span="176-176"];
m16_1 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.CorrectJob.Perform()", color=red, community=0, file="JobInvokerTests.cs", label="0: Performed = true", span="178-178"];
m16_2 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.CorrectJob.Perform()", file="JobInvokerTests.cs", label="Exit HangFire.Tests.UnitTests.JobInvokerTests.CorrectJob.Perform()", span="176-176"];
m16_9 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Dispose()", file="JobInvokerTests.cs", label="Entry HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Dispose()", span="202-202"];
m16_10 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Dispose()", color=red, community=0, file="JobInvokerTests.cs", label="0: Disposed = true", span="204-204"];
m16_11 [cluster="HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Dispose()", file="JobInvokerTests.cs", label="Exit HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob.Dispose()", span="202-202"];
m16_12 [file="JobInvokerTests.cs", label="HangFire.Tests.UnitTests.JobInvokerTests.CorrectJob", span=""];
m16_13 [file="JobInvokerTests.cs", label="HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob", span=""];
m16_14 [file="JobInvokerTests.cs", label="HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob", span=""];
m17_0 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.IServerProcess)", file="JobManager.feature.cs", label="Entry Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.IServerProcess)", span="32-32"];
m17_3 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.IServerProcess)", file="JobManager.feature.cs", label="_innerProcess = innerProcess", span="36-36"];
m17_4 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.IServerProcess)", file="JobManager.feature.cs", label="_logger = LogProvider.GetLogger(_innerProcess.GetProcessType())", span="37-37"];
m17_5 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.IServerProcess)", file="JobManager.feature.cs", label="MaxRetryAttempts = DefaultMaxRetryAttempts", span="39-39"];
m17_6 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.IServerProcess)", file="JobManager.feature.cs", label="MaxAttemptDelay = DefaultMaxAttemptDelay", span="40-40"];
m17_7 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.IServerProcess)", file="JobManager.feature.cs", label="DelayCallback = GetBackOffMultiplier", span="41-41"];
m17_1 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.IServerProcess)", file="JobManager.feature.cs", label="innerProcess == null", span="34-34"];
m17_2 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.IServerProcess)", file="JobManager.feature.cs", label="throw new ArgumentNullException(nameof(innerProcess));", span="34-34"];
m17_8 [cluster="Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.IServerProcess)", file="JobManager.feature.cs", label="Exit Hangfire.Server.AutomaticRetryProcess.AutomaticRetryProcess(Hangfire.Server.IServerProcess)", span="32-32"];
m17_9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="JobManager.feature.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m17_32 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", file="JobManager.feature.cs", label="Entry Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", span="87-87"];
m17_45 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", color=green, community=0, file="JobManager.feature.cs", label="0: return LogLevel.Error;", span="99-99"];
m17_38 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", file="JobManager.feature.cs", label=i, span="89-89"];
m17_40 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", file="JobManager.feature.cs", label="return LogLevel.Debug;", span="92-92"];
m17_42 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", file="JobManager.feature.cs", label="return LogLevel.Info;", span="94-94"];
m17_44 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", file="JobManager.feature.cs", label="return LogLevel.Warn;", span="96-96"];
m17_39 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", file="JobManager.feature.cs", label=0, span="91-91"];
m17_41 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", file="JobManager.feature.cs", label=1, span="93-93"];
m17_43 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", file="JobManager.feature.cs", label=2, span="95-95"];
m17_46 [cluster="Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", file="JobManager.feature.cs", label="Exit Hangfire.Server.AutomaticRetryProcess.GetLogLevel(int)", span="87-87"];
m17_60 [cluster="System.Random.Next(int, int)", file="JobManager.feature.cs", label="Entry System.Random.Next(int, int)", span="0-0"];
m17_56 [cluster="System.Random.Random(int)", file="JobManager.feature.cs", label="Entry System.Random.Random(int)", span="0-0"];
m17_11 [cluster="Hangfire.Server.IServerProcess.GetProcessType()", file="JobManager.feature.cs", label="Entry Hangfire.Server.IServerProcess.GetProcessType()", span="61-61"];
m17_30 [cluster="Hangfire.Server.IServerProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="Entry Hangfire.Server.IServerProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="28-28"];
m17_59 [cluster="System.Math.Pow(double, double)", file="JobManager.feature.cs", label="Entry System.Math.Pow(double, double)", span="0-0"];
m17_31 [cluster="System.Func<T, TResult>.Invoke(T)", file="JobManager.feature.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m17_13 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="Entry Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="50-50"];
m17_24 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="var logLevel = GetLogLevel(i)", span="69-69"];
m17_14 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="var i = 0", span="52-52"];
m17_23 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="var nextTry = DelayCallback(i)", span="68-68"];
m17_25 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="_logger.Log(\r\n                        logLevel,\r\n                        // ReSharper disable once AccessToModifiedClosure\r\n                        () => $''Error occurred during execution of '{_innerProcess}' process. Execution will be retried (attempt {i + 1} of {MaxRetryAttempts}) in {nextTry} seconds.'',\r\n                        ex)", span="71-75"];
m17_15 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="i <= MaxRetryAttempts", span="52-52"];
m17_21 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="i >= MaxRetryAttempts - 1", span="66-66"];
m17_28 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="i++", span="52-52"];
m17_26 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="context.Wait(nextTry)", span="77-77"];
m17_16 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="_innerProcess.Execute(context)", span="56-56"];
m17_27 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="context.IsShutdownRequested", span="79-79"];
m17_20 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label=Exception, span="63-63"];
m17_22 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="throw;", span="66-66"];
m17_17 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="return;", span="57-57"];
m17_19 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="throw;", span="61-61"];
m17_18 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label=OperationCanceledException, span="59-59"];
m17_29 [cluster="Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobManager.feature.cs", label="Exit Hangfire.Server.AutomaticRetryProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="50-50"];
m17_62 [cluster="System.TimeSpan.FromSeconds(double)", file="JobManager.feature.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m17_10 [cluster="Unk.nameof", file="JobManager.feature.cs", label="Entry Unk.nameof", span=""];
m17_33 [cluster="Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="JobManager.feature.cs", label="Entry Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="56-56"];
m17_47 [cluster="Hangfire.Server.AutomaticRetryProcess.ToString()", file="JobManager.feature.cs", label="Entry Hangfire.Server.AutomaticRetryProcess.ToString()", span="102-102"];
m17_48 [cluster="Hangfire.Server.AutomaticRetryProcess.ToString()", file="JobManager.feature.cs", label="return _innerProcess.ToString();", span="104-104"];
m17_49 [cluster="Hangfire.Server.AutomaticRetryProcess.ToString()", file="JobManager.feature.cs", label="Exit Hangfire.Server.AutomaticRetryProcess.ToString()", span="102-102"];
m17_61 [cluster="System.Math.Min(double, double)", file="JobManager.feature.cs", label="Entry System.Math.Min(double, double)", span="0-0"];
m17_35 [cluster="lambda expression", file="JobManager.feature.cs", label="Entry lambda expression", span="74-74"];
m17_36 [cluster="lambda expression", file="JobManager.feature.cs", label="$''Error occurred during execution of '{_innerProcess}' process. Execution will be retried (attempt {i + 1} of {MaxRetryAttempts}) in {nextTry} seconds.''", span="74-74"];
m17_37 [cluster="lambda expression", file="JobManager.feature.cs", label="Exit lambda expression", span="74-74"];
m17_57 [cluster="System.Guid.NewGuid()", file="JobManager.feature.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m17_12 [cluster="Hangfire.Logging.LogProvider.GetLogger(System.Type)", file="JobManager.feature.cs", label="Entry Hangfire.Logging.LogProvider.GetLogger(System.Type)", span="357-357"];
m17_58 [cluster="System.Guid.GetHashCode()", file="JobManager.feature.cs", label="Entry System.Guid.GetHashCode()", span="0-0"];
m17_51 [cluster="Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", file="JobManager.feature.cs", label="Entry Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", span="107-107"];
m17_54 [cluster="Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", file="JobManager.feature.cs", label="return TimeSpan.FromSeconds(Math.Min(nextTry, MaxAttemptDelay.TotalSeconds));", span="114-114"];
m17_53 [cluster="Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", file="JobManager.feature.cs", label="var nextTry = rand.Next(\r\n                (int)Math.Pow(retryAttemptNumber, 2), (int)Math.Pow(retryAttemptNumber + 1, 2) + 1)", span="111-112"];
m17_52 [cluster="Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", file="JobManager.feature.cs", label="var rand = new Random(Guid.NewGuid().GetHashCode())", span="110-110"];
m17_55 [cluster="Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", file="JobManager.feature.cs", label="Exit Hangfire.Server.AutomaticRetryProcess.GetBackOffMultiplier(int)", span="107-107"];
m17_34 [cluster="Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", file="JobManager.feature.cs", label="Entry Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", span="54-54"];
m17_50 [cluster="object.ToString()", file="JobManager.feature.cs", label="Entry object.ToString()", span="0-0"];
m17_63 [file="JobManager.feature.cs", label="Hangfire.Server.AutomaticRetryProcess", span=""];
m17_64 [file="JobManager.feature.cs", label=i, span=""];
m17_65 [file="JobManager.feature.cs", label=nextTry, span=""];
n20 -> n1  [color=darkseagreen4, key=1, label="HangFire.States.ScheduledState", style=dashed];
n20 -> n4  [color=darkseagreen4, key=1, label="HangFire.States.ScheduledState", style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n2 -> n0  [color=blue, key=0, style=bold];
n3 -> n4  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n4 -> n6  [key=2, style=dotted];
n4 -> n7  [key=2, style=dotted];
n5 -> n3  [color=blue, key=0, style=bold];
n8 -> n9  [key=0, style=solid];
n8 -> n11  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateApplyingContext", style=dashed];
n9 -> n10  [key=0, style=solid];
n9 -> n13  [key=2, style=dotted];
n11 -> n12  [key=0, style=solid];
n11 -> n15  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n10 -> n14  [key=2, style=dotted];
n12 -> n8  [color=blue, key=0, style=bold];
n16 -> n17  [key=0, style=solid];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=2, style=dotted];
n18 -> n16  [color=blue, key=0, style=bold];
d21 -> d22  [color=green, key=0, style=solid];
d21 -> d25  [color=green, key=2, style=dotted];
d20 -> d21  [color=green, key=0, style=solid];
d20 -> d24  [key=2, style=dotted];
d22 -> d18  [color=blue, key=0, style=bold];
d19 -> d20  [key=0, style=solid];
d19 -> d23  [key=2, style=dotted];
d18 -> d19  [key=0, style=solid];
d29 -> d25  [key=2, style=dotted];
d29 -> d30  [key=0, style=solid];
d23 -> d46  [key=0, style=solid];
d28 -> d29  [key=0, style=solid];
d28 -> d31  [key=2, style=dotted];
d30 -> d26  [color=blue, key=0, style=bold];
d27 -> d23  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d33 -> d23  [key=2, style=dotted];
d33 -> d34  [key=0, style=solid];
d47 -> d23  [color=blue, key=0, style=bold];
d46 -> d47  [key=0, style=solid];
d46 -> d17  [key=2, style=dotted];
d46 -> d48  [key=2, style=dotted];
d46 -> d49  [key=2, style=dotted];
d26 -> d27  [key=0, style=solid];
d32 -> d33  [key=0, style=solid];
d34 -> d35  [key=0, style=solid];
d34 -> d38  [key=2, style=dotted];
d37 -> d32  [color=blue, key=0, style=bold];
d35 -> d36  [key=0, style=solid];
d35 -> d39  [key=2, style=dotted];
d35 -> d40  [key=2, style=dotted];
d35 -> d42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d15 -> d17  [key=2, style=dotted];
d15 -> d16  [key=0, style=solid];
d36 -> d37  [key=0, style=solid];
d36 -> d41  [key=2, style=dotted];
d42 -> d43  [key=0, style=solid];
d14 -> d15  [key=0, style=solid];
d16 -> d14  [color=blue, key=0, style=bold];
d44 -> d42  [color=blue, key=0, style=bold];
d43 -> d44  [key=0, style=solid];
d43 -> d45  [key=2, style=dotted];
d11 -> d14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d11 -> d12  [key=0, style=solid];
d11 -> d4  [key=2, style=dotted];
d10 -> d11  [key=0, style=solid];
d12 -> d13  [key=0, style=solid];
d12 -> d5  [key=2, style=dotted];
d13 -> d10  [color=blue, key=0, style=bold];
d1 -> d4  [key=2, style=dotted];
d1 -> d2  [key=0, style=solid];
d1 -> d6  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d2 -> d5  [key=2, style=dotted];
d2 -> d3  [key=0, style=solid];
d0 -> d1  [key=0, style=solid];
d6 -> d7  [key=0, style=solid];
d3 -> d0  [color=blue, key=0, style=bold];
d8 -> d6  [color=blue, key=0, style=bold];
d7 -> d8  [key=0, style=solid];
d7 -> d9  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=2, style=dotted];
m0_28 -> m0_26  [color=blue, key=0, style=bold];
m0_32 -> m0_30  [color=blue, key=0, style=bold];
m0_34 -> m0_35  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_28  [key=2, style=dotted];
m0_5 -> m0_29  [key=2, style=dotted];
m0_5 -> m0_9  [color=darkseagreen4, key=1, label=hash, style=dashed];
m0_5 -> m0_10  [color=darkseagreen4, key=1, label=hash, style=dashed];
m0_5 -> m0_14  [color=darkseagreen4, key=1, label=hash, style=dashed];
m0_5 -> m0_15  [color=darkseagreen4, key=1, label=hash, style=dashed];
m0_5 -> m0_16  [color=darkseagreen4, key=1, label=hash, style=dashed];
m0_5 -> m0_17  [color=darkseagreen4, key=1, label=hash, style=dashed];
m0_5 -> m0_21  [color=darkseagreen4, key=1, label=hash, style=dashed];
m0_5 -> m0_22  [color=darkseagreen4, key=1, label=hash, style=dashed];
m0_98 -> m0_99  [key=0, style=solid];
m0_100 -> m0_101  [color=green, key=0, style=solid];
m0_100 -> m0_22  [color=green, key=2, style=dotted];
m0_99 -> m0_100  [color=green, key=0, style=solid];
m0_99 -> m0_47  [key=2, style=dotted];
m0_101 -> m0_102  [color=green, key=0, style=solid];
m0_101 -> m0_30  [color=green, key=2, style=dotted];
m0_102 -> m0_103  [color=green, key=0, style=solid];
m0_102 -> m0_33  [color=green, key=2, style=dotted];
m0_103 -> m0_104  [color=green, key=0, style=solid];
m0_103 -> m0_52  [color=green, key=2, style=dotted];
m0_104 -> m0_105  [color=green, key=0, style=solid];
m0_104 -> m0_52  [color=green, key=2, style=dotted];
m0_105 -> m0_106  [color=green, key=0, style=solid];
m0_105 -> m0_48  [color=green, key=2, style=dotted];
m0_106 -> m0_112  [color=green, key=1, label=table5, style=dashed];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_49  [key=2, style=dotted];
m0_106 -> m0_108  [color=darkseagreen4, key=1, label=table5, style=dashed];
m0_106 -> m0_109  [color=darkseagreen4, key=1, label=table5, style=dashed];
m0_106 -> m0_110  [color=darkseagreen4, key=1, label=table5, style=dashed];
m0_106 -> m0_111  [color=darkseagreen4, key=1, label=table5, style=dashed];
m0_112 -> m0_113  [color=green, key=0, style=solid];
m0_112 -> m0_51  [color=green, key=2, style=dotted];
m0_111 -> m0_112  [color=green, key=0, style=solid];
m0_111 -> m0_50  [key=2, style=dotted];
m0_113 -> m0_114  [color=green, key=0, style=solid];
m0_113 -> m0_52  [color=green, key=2, style=dotted];
m0_114 -> m0_115  [key=0, style=solid];
m0_114 -> m0_26  [key=2, style=dotted];
m0_107 -> m0_50  [key=2, style=dotted];
m0_107 -> m0_108  [key=0, style=solid];
m0_108 -> m0_50  [key=2, style=dotted];
m0_108 -> m0_109  [key=0, style=solid];
m0_109 -> m0_50  [key=2, style=dotted];
m0_109 -> m0_110  [key=0, style=solid];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_50  [key=2, style=dotted];
m0_115 -> m0_98  [color=blue, key=0, style=bold];
m0_36 -> m0_37  [color=green, key=0, style=solid];
m0_36 -> m0_22  [color=green, key=2, style=dotted];
m0_53 -> m0_54  [key=0, style=solid];
m0_55 -> m0_56  [color=green, key=0, style=solid];
m0_55 -> m0_22  [color=green, key=2, style=dotted];
m0_54 -> m0_55  [color=green, key=0, style=solid];
m0_54 -> m0_47  [key=2, style=dotted];
m0_56 -> m0_57  [color=green, key=0, style=solid];
m0_56 -> m0_30  [color=green, key=2, style=dotted];
m0_57 -> m0_58  [color=green, key=0, style=solid];
m0_57 -> m0_33  [color=green, key=2, style=dotted];
m0_58 -> m0_59  [color=green, key=0, style=solid];
m0_58 -> m0_52  [color=green, key=2, style=dotted];
m0_59 -> m0_60  [color=green, key=0, style=solid];
m0_59 -> m0_48  [color=green, key=2, style=dotted];
m0_60 -> m0_65  [color=green, key=1, label=table2, style=dashed];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_49  [key=2, style=dotted];
m0_60 -> m0_62  [color=darkseagreen4, key=1, label=table2, style=dashed];
m0_60 -> m0_63  [color=darkseagreen4, key=1, label=table2, style=dashed];
m0_60 -> m0_64  [color=darkseagreen4, key=1, label=table2, style=dashed];
m0_65 -> m0_66  [color=green, key=0, style=solid];
m0_65 -> m0_51  [color=green, key=2, style=dotted];
m0_64 -> m0_65  [color=green, key=0, style=solid];
m0_64 -> m0_50  [key=2, style=dotted];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_26  [key=2, style=dotted];
m0_61 -> m0_50  [key=2, style=dotted];
m0_61 -> m0_62  [key=0, style=solid];
m0_62 -> m0_50  [key=2, style=dotted];
m0_62 -> m0_63  [key=0, style=solid];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_50  [key=2, style=dotted];
m0_67 -> m0_53  [color=blue, key=0, style=bold];
m0_84 -> m0_85  [key=0, style=solid];
m0_86 -> m0_87  [color=green, key=0, style=solid];
m0_86 -> m0_22  [color=green, key=2, style=dotted];
m0_85 -> m0_86  [color=green, key=0, style=solid];
m0_85 -> m0_47  [key=2, style=dotted];
m0_87 -> m0_88  [color=green, key=0, style=solid];
m0_87 -> m0_30  [color=green, key=2, style=dotted];
m0_88 -> m0_89  [color=green, key=0, style=solid];
m0_88 -> m0_33  [color=green, key=2, style=dotted];
m0_89 -> m0_90  [color=green, key=0, style=solid];
m0_89 -> m0_52  [color=green, key=2, style=dotted];
m0_90 -> m0_91  [color=green, key=0, style=solid];
m0_90 -> m0_48  [color=green, key=2, style=dotted];
m0_91 -> m0_95  [color=green, key=1, label=table4, style=dashed];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_49  [key=2, style=dotted];
m0_91 -> m0_93  [color=darkseagreen4, key=1, label=table4, style=dashed];
m0_91 -> m0_94  [color=darkseagreen4, key=1, label=table4, style=dashed];
m0_95 -> m0_96  [color=green, key=0, style=solid];
m0_95 -> m0_51  [color=green, key=2, style=dotted];
m0_94 -> m0_95  [color=green, key=0, style=solid];
m0_94 -> m0_50  [key=2, style=dotted];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_26  [key=2, style=dotted];
m0_92 -> m0_50  [key=2, style=dotted];
m0_92 -> m0_93  [key=0, style=solid];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_50  [key=2, style=dotted];
m0_97 -> m0_84  [color=blue, key=0, style=bold];
m0_22 -> m0_117  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m0_22 -> m0_143  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m0_22 -> m0_35  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_54  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m0_22 -> m0_69  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m0_22 -> m0_85  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m0_22 -> m0_99  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m0_22 -> m0_128  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=2, style=dotted];
m0_23 -> m0_4  [key=0, style=solid];
m0_23 -> m0_31  [key=2, style=dotted];
m0_24 -> m0_22  [color=blue, key=0, style=bold];
m0_24 -> m0_0  [color=blue, key=0, style=bold];
m0_7 -> m0_4  [key=0, style=solid];
m0_7 -> m0_30  [key=2, style=dotted];
m0_7 -> m0_31  [key=2, style=dotted];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_16  [color=darkorchid, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_25  [key=2, style=dotted];
m0_1 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_3  [color=green, key=0, style=solid];
m0_2 -> m0_26  [key=2, style=dotted];
m0_2 -> m0_5  [color=darkseagreen4, key=1, label=connection, style=dashed];
m0_2 -> m0_18  [color=darkseagreen4, key=1, label=connection, style=dashed];
m0_2 -> m0_6  [color=green, key=2, style=dotted];
m0_2 -> m0_7  [color=green, key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_27  [key=2, style=dotted];
m0_3 -> m0_8  [key=2, style=dotted];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_36  [key=2, style=dotted];
m0_18 -> m0_20  [color=darkseagreen4, key=1, label=stateData, style=dashed];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_24  [key=0, style=solid];
m0_4 -> m0_7  [color=darkseagreen4, key=1, label=id, style=dashed];
m0_4 -> m0_8  [color=darkseagreen4, key=1, label=id, style=dashed];
m0_4 -> m0_0  [color=blue, key=0, style=bold];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_30  [key=2, style=dotted];
m0_8 -> m0_11  [color=red, key=1, label=dto, style=dashed];
m0_8 -> m0_13  [color=darkseagreen4, key=1, label=dto, style=dashed];
m0_8 -> m0_15  [color=darkseagreen4, key=1, label=dto, style=dashed];
m0_8 -> m0_17  [color=darkseagreen4, key=1, label=dto, style=dashed];
m0_8 -> m0_18  [color=darkseagreen4, key=1, label=dto, style=dashed];
m0_8 -> m0_20  [color=darkseagreen4, key=1, label=dto, style=dashed];
m0_8 -> m0_22  [color=darkseagreen4, key=1, label=dto, style=dashed];
m0_8 -> m0_23  [color=darkseagreen4, key=1, label=dto, style=dashed];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_8  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid];
m0_10 -> m0_11  [color=red, key=0, style=solid];
m0_10 -> m0_32  [key=2, style=dotted];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_16  [key=0, style=solid];
m0_14 -> m0_34  [key=2, style=dotted];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_35  [key=2, style=dotted];
m0_15 -> m0_17  [key=0, style=solid];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_21  [key=0, style=solid];
m0_16 -> m0_34  [key=2, style=dotted];
m0_16 -> m0_0  [key=2, style=dotted];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_14  [color=blue, key=0, style=bold];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_23  [key=0, style=solid];
m0_21 -> m0_34  [key=2, style=dotted];
m0_11 -> m0_12  [color=red, key=0, style=solid];
m0_11 -> m0_14  [color=red, key=0, style=solid];
m0_11 -> m0_33  [color=red, key=2, style=dotted];
m0_13 -> m0_14  [key=0, style=solid];
m0_20 -> m0_21  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_21  [key=0, style=solid];
m0_142 -> m0_143  [color=green, key=0, style=solid];
m0_143 -> m0_144  [color=green, key=0, style=solid];
m0_143 -> m0_47  [color=green, key=2, style=dotted];
m0_144 -> m0_145  [color=green, key=0, style=solid];
m0_144 -> m0_22  [color=green, key=2, style=dotted];
m0_145 -> m0_146  [color=green, key=0, style=solid];
m0_145 -> m0_30  [color=green, key=2, style=dotted];
m0_146 -> m0_147  [color=green, key=0, style=solid];
m0_146 -> m0_33  [color=green, key=2, style=dotted];
m0_147 -> m0_148  [color=green, key=0, style=solid];
m0_147 -> m0_52  [color=green, key=2, style=dotted];
m0_148 -> m0_149  [color=green, key=0, style=solid];
m0_148 -> m0_52  [color=green, key=2, style=dotted];
m0_149 -> m0_150  [color=green, key=0, style=solid];
m0_149 -> m0_48  [color=green, key=2, style=dotted];
m0_150 -> m0_151  [color=green, key=0, style=solid];
m0_150 -> m0_52  [color=green, key=2, style=dotted];
m0_151 -> m0_152  [color=green, key=0, style=solid];
m0_151 -> m0_49  [color=green, key=2, style=dotted];
m0_151 -> m0_153  [color=green, key=1, label=table7, style=dashed];
m0_151 -> m0_154  [color=green, key=1, label=table7, style=dashed];
m0_151 -> m0_155  [color=green, key=1, label=table7, style=dashed];
m0_152 -> m0_153  [key=0, style=solid];
m0_152 -> m0_50  [key=2, style=dotted];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_50  [key=2, style=dotted];
m0_154 -> m0_155  [key=0, style=solid];
m0_154 -> m0_50  [key=2, style=dotted];
m0_155 -> m0_156  [color=green, key=0, style=solid];
m0_155 -> m0_51  [key=2, style=dotted];
m0_156 -> m0_157  [color=green, key=0, style=solid];
m0_156 -> m0_52  [color=green, key=2, style=dotted];
m0_157 -> m0_158  [color=green, key=0, style=solid];
m0_157 -> m0_26  [color=green, key=2, style=dotted];
m0_158 -> m0_142  [color=blue, key=0, style=bold];
m0_35 -> m0_36  [color=green, key=0, style=solid];
m0_35 -> m0_47  [key=2, style=dotted];
m0_37 -> m0_38  [color=green, key=0, style=solid];
m0_37 -> m0_30  [color=green, key=2, style=dotted];
m0_37 -> m0_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.RecurringJobsPage", style=dashed];
m0_37 -> m0_7  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.RecurringJobsPage", style=dashed];
m0_37 -> m0_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.RecurringJobsPage", style=dashed];
m0_38 -> m0_39  [color=green, key=0, style=solid];
m0_38 -> m0_33  [color=green, key=2, style=dotted];
m0_39 -> m0_40  [color=green, key=0, style=solid];
m0_39 -> m0_48  [color=green, key=2, style=dotted];
m0_40 -> m0_43  [color=green, key=1, label=table1, style=dashed];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_49  [key=2, style=dotted];
m0_40 -> m0_42  [color=darkseagreen4, key=1, label=table1, style=dashed];
m0_43 -> m0_44  [color=green, key=0, style=solid];
m0_43 -> m0_51  [color=green, key=2, style=dotted];
m0_42 -> m0_43  [color=green, key=0, style=solid];
m0_42 -> m0_50  [key=2, style=dotted];
m0_44 -> m0_45  [color=green, key=0, style=solid];
m0_44 -> m0_52  [color=green, key=2, style=dotted];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_26  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_50  [key=2, style=dotted];
m0_46 -> m0_34  [color=blue, key=0, style=bold];
m0_30 -> m0_31  [color=green, key=0, style=solid];
m0_31 -> m0_32  [color=green, key=0, style=solid];
m0_31 -> m0_33  [color=green, key=2, style=dotted];
m0_127 -> m0_128  [key=0, style=solid];
m0_129 -> m0_130  [color=green, key=0, style=solid];
m0_129 -> m0_22  [color=green, key=2, style=dotted];
m0_128 -> m0_129  [color=green, key=0, style=solid];
m0_128 -> m0_47  [key=2, style=dotted];
m0_130 -> m0_131  [color=green, key=0, style=solid];
m0_130 -> m0_30  [color=green, key=2, style=dotted];
m0_131 -> m0_132  [color=green, key=0, style=solid];
m0_131 -> m0_33  [color=green, key=2, style=dotted];
m0_132 -> m0_133  [color=green, key=0, style=solid];
m0_132 -> m0_52  [color=green, key=2, style=dotted];
m0_133 -> m0_134  [color=green, key=0, style=solid];
m0_133 -> m0_48  [color=green, key=2, style=dotted];
m0_134 -> m0_135  [color=green, key=0, style=solid];
m0_134 -> m0_52  [color=green, key=2, style=dotted];
m0_135 -> m0_138  [color=green, key=1, label=table6, style=dashed];
m0_135 -> m0_136  [key=0, style=solid];
m0_135 -> m0_49  [key=2, style=dotted];
m0_135 -> m0_137  [color=darkseagreen4, key=1, label=table6, style=dashed];
m0_138 -> m0_139  [color=green, key=0, style=solid];
m0_138 -> m0_51  [color=green, key=2, style=dotted];
m0_137 -> m0_138  [color=green, key=0, style=solid];
m0_137 -> m0_50  [key=2, style=dotted];
m0_139 -> m0_140  [color=green, key=0, style=solid];
m0_139 -> m0_52  [color=green, key=2, style=dotted];
m0_140 -> m0_141  [key=0, style=solid];
m0_140 -> m0_26  [key=2, style=dotted];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_50  [key=2, style=dotted];
m0_141 -> m0_127  [color=blue, key=0, style=bold];
m0_68 -> m0_69  [key=0, style=solid];
m0_70 -> m0_71  [color=green, key=0, style=solid];
m0_70 -> m0_22  [color=green, key=2, style=dotted];
m0_69 -> m0_70  [color=green, key=0, style=solid];
m0_69 -> m0_47  [key=2, style=dotted];
m0_71 -> m0_72  [color=green, key=0, style=solid];
m0_71 -> m0_30  [color=green, key=2, style=dotted];
m0_72 -> m0_73  [color=green, key=0, style=solid];
m0_72 -> m0_33  [color=green, key=2, style=dotted];
m0_73 -> m0_74  [color=green, key=0, style=solid];
m0_73 -> m0_52  [color=green, key=2, style=dotted];
m0_74 -> m0_75  [color=green, key=0, style=solid];
m0_74 -> m0_52  [color=green, key=2, style=dotted];
m0_75 -> m0_76  [color=green, key=0, style=solid];
m0_75 -> m0_48  [color=green, key=2, style=dotted];
m0_76 -> m0_77  [color=green, key=0, style=solid];
m0_76 -> m0_51  [color=green, key=2, style=dotted];
m0_77 -> m0_81  [color=green, key=1, label=table3, style=dashed];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_49  [key=2, style=dotted];
m0_77 -> m0_79  [color=darkseagreen4, key=1, label=table3, style=dashed];
m0_77 -> m0_80  [color=darkseagreen4, key=1, label=table3, style=dashed];
m0_81 -> m0_82  [color=green, key=0, style=solid];
m0_81 -> m0_52  [color=green, key=2, style=dotted];
m0_80 -> m0_81  [color=green, key=0, style=solid];
m0_80 -> m0_50  [key=2, style=dotted];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_26  [key=2, style=dotted];
m0_78 -> m0_50  [key=2, style=dotted];
m0_78 -> m0_79  [key=0, style=solid];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_50  [key=2, style=dotted];
m0_83 -> m0_68  [color=blue, key=0, style=bold];
m0_116 -> m0_117  [color=green, key=0, style=solid];
m0_117 -> m0_118  [color=green, key=0, style=solid];
m0_117 -> m0_47  [color=green, key=2, style=dotted];
m0_118 -> m0_119  [color=green, key=0, style=solid];
m0_118 -> m0_22  [color=green, key=2, style=dotted];
m0_119 -> m0_120  [color=green, key=0, style=solid];
m0_119 -> m0_30  [color=green, key=2, style=dotted];
m0_120 -> m0_121  [color=green, key=0, style=solid];
m0_120 -> m0_33  [color=green, key=2, style=dotted];
m0_121 -> m0_122  [color=green, key=0, style=solid];
m0_121 -> m0_48  [color=green, key=2, style=dotted];
m0_122 -> m0_123  [color=green, key=0, style=solid];
m0_122 -> m0_52  [color=green, key=2, style=dotted];
m0_123 -> m0_124  [color=green, key=0, style=solid];
m0_123 -> m0_51  [color=green, key=2, style=dotted];
m0_124 -> m0_125  [color=green, key=0, style=solid];
m0_124 -> m0_52  [color=green, key=2, style=dotted];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_26  [key=2, style=dotted];
m0_126 -> m0_116  [color=blue, key=0, style=bold];
m0_159 -> m0_36  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_37  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_55  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_56  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_70  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_71  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_86  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_87  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_100  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_101  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_118  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_119  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_129  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_130  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_144  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_145  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_157  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_45  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_66  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_82  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_96  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_114  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_125  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_140  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m3_0 -> m3_1  [color=green, key=0, style=solid];
m3_1 -> m3_2  [color=green, key=0, style=solid];
m3_1 -> m3_3  [color=green, key=2, style=dotted];
m3_2 -> m3_0  [color=blue, key=0, style=bold];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_29  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_24 -> m4_31  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_24 -> m4_32  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_25 -> m4_34  [key=2, style=dotted];
m4_25 -> m4_26  [key=0, style=solid];
m4_25 -> m4_35  [key=2, style=dotted];
m4_25 -> m4_27  [color=darkseagreen4, key=1, label=flags, style=dashed];
m4_29 -> m4_34  [key=2, style=dotted];
m4_29 -> m4_33  [key=0, style=solid];
m4_29 -> m4_37  [key=2, style=dotted];
m4_29 -> m4_38  [key=2, style=dotted];
m4_30 -> m4_31  [key=0, style=solid];
m4_30 -> m4_33  [key=0, style=solid];
m4_30 -> m4_39  [key=2, style=dotted];
m4_30 -> m4_40  [key=2, style=dotted];
m4_31 -> m4_41  [key=2, style=dotted];
m4_31 -> m4_32  [key=0, style=solid];
m4_32 -> m4_33  [key=0, style=solid];
m4_32 -> m4_42  [key=2, style=dotted];
m4_26 -> m4_30  [color=darkseagreen4, key=1, label=fetched, style=dashed];
m4_26 -> m4_27  [key=0, style=solid];
m4_26 -> m4_28  [color=darkseagreen4, key=1, label=fetched, style=dashed];
m4_27 -> m4_30  [color=darkseagreen4, key=1, label="@checked", style=dashed];
m4_27 -> m4_28  [key=0, style=solid];
m4_28 -> m4_29  [key=0, style=solid];
m4_28 -> m4_30  [key=0, style=solid];
m4_28 -> m4_36  [key=2, style=dotted];
m4_33 -> m4_24  [color=blue, key=0, style=bold];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_4  [key=2, style=dotted];
m4_1 -> m4_5  [key=2, style=dotted];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_5  [key=2, style=dotted];
m4_2 -> m4_6  [key=2, style=dotted];
m4_3 -> m4_0  [color=blue, key=0, style=bold];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> d25  [key=2, style=dotted];
m4_5 -> m4_14  [key=0, style=solid];
m4_10 -> m4_11  [key=0, style=solid];
m4_10 -> m4_13  [key=2, style=dotted];
m4_11 -> m4_12  [key=0, style=solid];
m4_11 -> m4_18  [key=2, style=dotted];
m4_11 -> d25  [key=2, style=dotted];
m4_13 -> m4_14  [key=0, style=solid];
m4_13 -> m4_19  [key=2, style=dotted];
m4_13 -> m4_20  [key=2, style=dotted];
m4_13 -> m4_21  [key=2, style=dotted];
m4_14 -> m4_15  [key=0, style=solid];
m4_14 -> m4_19  [key=2, style=dotted];
m4_14 -> m4_22  [key=2, style=dotted];
m4_14 -> m4_16  [key=2, style=dotted];
m4_16 -> m4_15  [key=0, style=solid];
m4_16 -> m4_23  [key=2, style=dotted];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_14  [color=darkseagreen4, key=1, label=queue, style=dashed];
m4_12 -> m4_16  [color=darkseagreen4, key=1, label=queue, style=dashed];
m4_12 -> m4_17  [key=0, style=solid];
m4_12 -> m4_8  [color=blue, key=0, style=bold];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_12  [key=0, style=solid];
m4_15 -> m4_5  [color=blue, key=0, style=bold];
m4_17 -> m4_10  [color=blue, key=0, style=bold];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_6  [color=blue, key=0, style=bold];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_5  [key=2, style=dotted];
m4_6 -> m4_7  [key=0, style=solid];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_9  [key=2, style=dotted];
m4_4 -> m4_0  [color=blue, key=0, style=bold];
m4_67 -> m4_68  [key=0, style=solid];
m4_69 -> m4_70  [key=0, style=solid];
m4_69 -> m4_10  [key=2, style=dotted];
m4_70 -> m4_68  [key=0, style=solid];
m4_70 -> m4_71  [key=0, style=solid];
m4_70 -> m4_73  [key=0, style=solid];
m4_70 -> m4_74  [key=2, style=dotted];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_75  [key=2, style=dotted];
m4_68 -> m4_69  [key=0, style=solid];
m4_68 -> m4_71  [key=0, style=solid];
m4_68 -> m4_73  [key=0, style=solid];
m4_71 -> m4_72  [key=0, style=solid];
m4_73 -> m4_67  [color=blue, key=0, style=bold];
m4_41 -> m4_43  [key=0, style=solid];
m4_41 -> m4_49  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_41 -> m4_24  [color=darkorchid, key=3, label="Parameter variable string jobId", style=bold];
m4_45 -> m4_46  [color=green, key=0, style=solid];
m4_45 -> m4_52  [color=green, key=2, style=dotted];
m4_45 -> m4_53  [color=green, key=2, style=dotted];
m4_43 -> m4_45  [color=green, key=1, label=jobType, style=dashed];
m4_43 -> m4_44  [key=0, style=solid];
m4_43 -> m4_34  [key=2, style=dotted];
m4_43 -> m4_51  [key=2, style=dotted];
m4_44 -> m4_45  [color=green, key=0, style=solid];
m4_46 -> m4_47  [color=green, key=0, style=solid];
m4_46 -> m4_49  [key=0, style=solid];
m4_46 -> m4_54  [key=2, style=dotted];
m4_47 -> m4_48  [color=green, key=0, style=solid];
m4_48 -> m4_49  [color=green, key=0, style=solid];
m4_48 -> m4_55  [color=green, key=2, style=dotted];
m4_49 -> m4_50  [key=0, style=solid];
m4_49 -> m4_56  [key=2, style=dotted];
m4_50 -> m4_41  [color=blue, key=0, style=bold];
m4_76 -> m4_77  [key=0, style=solid];
m4_76 -> m4_78  [color=darkseagreen4, key=1, label="System.Threading.Thread", style=dashed];
m4_77 -> m4_78  [key=0, style=solid];
m4_77 -> m4_80  [key=2, style=dotted];
m4_78 -> m4_79  [key=0, style=solid];
m4_78 -> m4_81  [key=2, style=dotted];
m4_79 -> m4_76  [color=blue, key=0, style=bold];
m4_82 -> m4_43  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_49  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_1  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_2  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_7  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_11  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_13  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_14  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_16  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_25  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_29  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_30  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_31  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_32  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_69  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_70  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_72  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m4_82 -> m4_77  [color=darkseagreen4, key=1, label="HangFire.Server.DequeuedJobsWatcher", style=dashed];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_16  [color=darkorchid, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m5_1 -> m5_2  [color=green, key=0, style=solid];
m5_1 -> m5_5  [key=2, style=dotted];
m5_2 -> m5_0  [color=blue, key=0, style=bold];
m5_2 -> m5_3  [color=green, key=0, style=solid];
m5_2 -> m5_6  [color=green, key=2, style=dotted];
m5_2 -> m5_7  [color=green, key=2, style=dotted];
m5_3 -> m5_4  [color=red, key=0, style=solid];
m5_3 -> m5_8  [key=2, style=dotted];
m5_4 -> m5_5  [color=red, key=0, style=solid];
m5_4 -> m5_6  [color=red, key=0, style=solid];
m5_4 -> m5_0  [color=blue, key=0, style=bold];
m5_5 -> m5_9  [key=0, style=solid];
m5_5 -> m5_10  [key=2, style=dotted];
m5_6 -> m5_7  [key=0, style=solid];
m5_6 -> m5_8  [key=0, style=solid];
m5_6 -> m5_11  [key=2, style=dotted];
m5_7 -> m5_9  [key=0, style=solid];
m5_8 -> m5_9  [key=0, style=solid];
m5_9 -> m5_3  [color=blue, key=0, style=bold];
m5_14 -> m5_15  [key=0, style=solid];
m5_16 -> m5_0  [key=2, style=dotted];
m5_16 -> m5_17  [key=0, style=solid];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_17  [key=0, style=solid];
m5_17 -> m5_14  [color=blue, key=0, style=bold];
m5_12 -> m5_1  [color=darkseagreen4, key=1, label="HangFire.Web.CommandHandler", style=dashed];
m5_12 -> m5_4  [color=red, key=1, label="HangFire.Web.CommandHandler", style=dashed];
m5_12 -> m5_6  [color=darkseagreen4, key=1, label="HangFire.Web.CommandHandler", style=dashed];
m5_12 -> m5_7  [color=darkseagreen4, key=1, label="HangFire.Web.CommandHandler", style=dashed];
m5_12 -> m5_8  [color=darkseagreen4, key=1, label="HangFire.Web.CommandHandler", style=dashed];
m6_0 -> m6_1  [color=green, key=0, style=solid];
m6_1 -> m6_2  [color=green, key=0, style=solid];
m6_2 -> m6_0  [color=blue, key=0, style=bold];
m6_3 -> m6_1  [color=green, key=1, label="HangFire.Web.Pages.ErrorPage", style=dashed];
m7_0 -> m7_1  [color=green, key=0, style=solid];
m7_1 -> m7_2  [color=green, key=0, style=solid];
m7_1 -> m7_4  [color=green, key=2, style=dotted];
m7_2 -> m7_3  [color=green, key=0, style=solid];
m7_2 -> m7_4  [color=green, key=2, style=dotted];
m7_3 -> m7_0  [color=blue, key=0, style=bold];
m7_5 -> m7_1  [color=green, key=1, label="Hangfire.Server.ServerWatchdogOptions", style=dashed];
m7_5 -> m7_2  [color=green, key=1, label="Hangfire.Server.ServerWatchdogOptions", style=dashed];
m8_58 -> m8_75  [key=0, style=solid];
m8_75 -> m8_76  [key=0, style=solid];
m8_75 -> m8_78  [key=2, style=dotted];
m8_76 -> m8_77  [key=0, style=solid];
m8_76 -> m8_79  [key=2, style=dotted];
m8_76 -> d40  [key=2, style=dotted];
m8_76 -> m8_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_77 -> m8_58  [color=blue, key=0, style=bold];
m8_56 -> m8_60  [key=0, style=solid];
m8_56 -> m8_62  [color=crimson, key=0, style=bold];
m8_56 -> m8_63  [color=crimson, key=0, style=bold];
m8_56 -> m8_64  [color=crimson, key=0, style=bold];
m8_56 -> m8_65  [color=crimson, key=0, style=bold];
m8_60 -> m8_61  [key=0, style=solid];
m8_60 -> m8_67  [key=2, style=dotted];
m8_60 -> m8_65  [color=darkseagreen4, key=1, label=stateMachineFactory, style=dashed];
m8_62 -> m8_63  [key=0, style=solid];
m8_62 -> m8_70  [key=2, style=dotted];
m8_62 -> m8_71  [key=2, style=dotted];
m8_63 -> m8_64  [key=0, style=solid];
m8_63 -> m8_70  [key=2, style=dotted];
m8_63 -> m8_72  [key=2, style=dotted];
m8_64 -> m8_65  [key=0, style=solid];
m8_64 -> m8_70  [key=2, style=dotted];
m8_64 -> m8_73  [key=2, style=dotted];
m8_65 -> m8_66  [key=0, style=solid];
m8_65 -> m8_70  [key=2, style=dotted];
m8_65 -> m8_74  [key=2, style=dotted];
m8_61 -> m8_62  [key=0, style=solid];
m8_61 -> m8_68  [key=2, style=dotted];
m8_61 -> m8_69  [key=2, style=dotted];
m8_66 -> m8_56  [color=blue, key=0, style=bold];
m8_18 -> m8_40  [key=0, style=solid];
m8_40 -> m8_41  [key=0, style=solid];
m8_40 -> m8_44  [key=2, style=dotted];
m8_41 -> m8_42  [key=0, style=solid];
m8_41 -> m8_45  [key=2, style=dotted];
m8_41 -> m8_46  [key=2, style=dotted];
m8_42 -> m8_43  [key=0, style=solid];
m8_42 -> m8_47  [key=2, style=dotted];
m8_42 -> m8_48  [key=2, style=dotted];
m8_43 -> m8_18  [color=blue, key=0, style=bold];
m8_2 -> m8_3  [key=0, style=solid];
m8_3 -> m8_2  [color=blue, key=0, style=bold];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_0  [color=blue, key=0, style=bold];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_7  [color=darkseagreen4, key=1, label="HangFire.JobStorage", style=dashed];
m8_4 -> m8_9  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m8_4 -> m8_10  [color=darkseagreen4, key=1, label="HangFire.JobStorage", style=dashed];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_7  [key=0, style=solid];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_9  [key=0, style=solid];
m8_9 -> m8_10  [key=0, style=solid];
m8_10 -> m8_11  [key=0, style=solid];
m8_6 -> m8_13  [key=0, style=solid];
m8_6 -> m8_14  [key=2, style=dotted];
m8_8 -> m8_13  [key=0, style=solid];
m8_8 -> m8_14  [key=2, style=dotted];
m8_11 -> m8_12  [key=0, style=solid];
m8_11 -> m8_15  [key=2, style=dotted];
m8_11 -> m8_16  [key=2, style=dotted];
m8_11 -> m8_17  [key=2, style=dotted];
m8_12 -> m8_13  [key=0, style=solid];
m8_12 -> m8_18  [key=2, style=dotted];
m8_13 -> m8_4  [color=blue, key=0, style=bold];
m8_31 -> m8_32  [key=0, style=solid];
m8_32 -> m8_33  [key=0, style=solid];
m8_32 -> m8_34  [key=2, style=dotted];
m8_33 -> m8_31  [color=blue, key=0, style=bold];
m8_81 -> m8_82  [key=0, style=solid];
m8_82 -> m8_83  [key=0, style=solid];
m8_82 -> m8_70  [key=2, style=dotted];
m8_83 -> m8_81  [color=blue, key=0, style=bold];
m8_19 -> m8_20  [key=0, style=solid];
m8_20 -> m8_21  [key=0, style=solid];
m8_20 -> m8_26  [key=2, style=dotted];
m8_21 -> m8_22  [key=0, style=solid];
m8_21 -> m8_27  [key=2, style=dotted];
m8_22 -> m8_23  [key=0, style=solid];
m8_22 -> m8_28  [key=2, style=dotted];
m8_23 -> m8_24  [key=0, style=solid];
m8_23 -> m8_29  [key=2, style=dotted];
m8_24 -> m8_25  [key=0, style=solid];
m8_24 -> m8_30  [key=2, style=dotted];
m8_25 -> m8_19  [color=blue, key=0, style=bold];
m8_35 -> m8_36  [key=0, style=solid];
m8_36 -> m8_37  [key=0, style=solid];
m8_36 -> m8_39  [key=2, style=dotted];
m8_37 -> m8_38  [key=0, style=solid];
m8_37 -> m8_26  [key=2, style=dotted];
m8_38 -> m8_35  [color=blue, key=0, style=bold];
m8_49 -> m8_50  [key=0, style=solid];
m8_50 -> m8_51  [key=0, style=solid];
m8_50 -> m8_55  [key=2, style=dotted];
m8_50 -> m8_52  [color=darkseagreen4, key=1, label=supervisors, style=dashed];
m8_50 -> m8_53  [color=darkseagreen4, key=1, label=supervisors, style=dashed];
m8_51 -> m8_52  [key=0, style=solid];
m8_51 -> m8_56  [key=2, style=dotted];
m8_51 -> m8_57  [key=2, style=dotted];
m8_52 -> m8_53  [key=0, style=solid];
m8_52 -> m8_58  [key=2, style=dotted];
m8_52 -> m8_57  [key=2, style=dotted];
m8_53 -> m8_54  [key=0, style=solid];
m8_53 -> m8_59  [key=2, style=dotted];
m8_54 -> m8_49  [color=blue, key=0, style=bold];
m8_84 -> m8_9  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_10  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_11  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_12  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_21  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_22  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_23  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_24  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_32  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_36  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_40  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_41  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_42  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_51  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_52  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_60  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_61  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_62  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_63  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_64  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_65  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m8_84 -> m8_75  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServer", style=dashed];
m9_11 -> m9_12  [key=0, style=solid];
m9_11 -> m9_13  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m9_11 -> m9_14  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m9_11 -> m9_15  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m9_11 -> m9_16  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m9_12 -> m9_13  [key=0, style=solid];
m9_12 -> m9_18  [key=2, style=dotted];
m9_13 -> m9_14  [key=0, style=solid];
m9_13 -> m9_18  [key=2, style=dotted];
m9_14 -> m9_15  [key=0, style=solid];
m9_14 -> d39  [key=2, style=dotted];
m9_14 -> m9_20  [key=2, style=dotted];
m9_14 -> m9_18  [key=2, style=dotted];
m9_14 -> m9_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_15 -> m9_16  [key=0, style=solid];
m9_15 -> m9_18  [key=2, style=dotted];
m9_16 -> m9_17  [key=0, style=solid];
m9_16 -> m9_18  [key=2, style=dotted];
m9_17 -> m9_11  [color=blue, key=0, style=bold];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_8  [key=2, style=dotted];
m9_2 -> m9_3  [key=0, style=solid];
m9_3 -> m9_4  [key=0, style=solid];
m9_4 -> m9_5  [key=0, style=solid];
m9_4 -> m9_9  [key=2, style=dotted];
m9_5 -> m9_6  [key=0, style=solid];
m9_5 -> m9_9  [key=2, style=dotted];
m9_6 -> m9_7  [key=0, style=solid];
m9_6 -> m9_10  [key=2, style=dotted];
m9_7 -> m9_0  [color=blue, key=0, style=bold];
m9_21 -> m9_22  [key=0, style=solid];
m9_22 -> m9_23  [key=0, style=solid];
m9_23 -> m9_21  [color=blue, key=0, style=bold];
m9_24 -> m9_1  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m9_24 -> m9_2  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m9_24 -> m9_3  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m9_24 -> m9_4  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m9_24 -> m9_5  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m9_24 -> m9_6  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m9_24 -> m9_13  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m9_24 -> m9_14  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m9_24 -> m9_15  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m9_24 -> m9_16  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m12_239 -> m12_240  [key=0, style=solid];
m12_239 -> m12_244  [color=darkseagreen4, key=1, label=Table, style=dashed];
m12_239 -> m12_243  [color=darkseagreen4, key=1, label=Table, style=dashed];
m12_240 -> m12_47  [key=2, style=dotted];
m12_240 -> m12_241  [key=0, style=solid];
m12_240 -> m12_247  [key=2, style=dotted];
m12_244 -> m12_97  [key=2, style=dotted];
m12_244 -> m12_245  [key=0, style=solid];
m12_241 -> m12_244  [color=darkseagreen4, key=1, label=history, style=dashed];
m12_241 -> m12_242  [key=0, style=solid];
m12_241 -> m12_248  [key=2, style=dotted];
m12_241 -> m12_249  [key=2, style=dotted];
m12_243 -> m12_244  [key=0, style=solid];
m12_243 -> m12_246  [key=0, style=solid];
m12_242 -> m12_244  [color=darkseagreen4, key=1, label=i, style=dashed];
m12_242 -> m12_243  [key=0, style=solid];
m12_242 -> m12_245  [color=darkseagreen4, key=1, label=i, style=dashed];
m12_245 -> m12_243  [key=0, style=solid];
m12_245 -> m12_245  [color=darkseagreen4, key=1, label=i, style=dashed];
m12_246 -> m12_239  [color=blue, key=0, style=bold];
m12_153 -> m12_154  [key=0, style=solid];
m12_156 -> m12_109  [key=2, style=dotted];
m12_156 -> m12_157  [key=0, style=solid];
m12_156 -> m12_161  [key=2, style=dotted];
m12_157 -> m12_109  [key=2, style=dotted];
m12_157 -> m12_158  [key=0, style=solid];
m12_157 -> m12_161  [key=2, style=dotted];
m12_155 -> m12_156  [key=0, style=solid];
m12_155 -> m12_157  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m12_155 -> m12_160  [key=2, style=dotted];
m12_154 -> m12_155  [key=0, style=solid];
m12_154 -> m12_159  [key=2, style=dotted];
m12_158 -> m12_153  [color=blue, key=0, style=bold];
m12_137 -> m12_138  [key=0, style=solid];
m12_138 -> m12_97  [key=2, style=dotted];
m12_138 -> m12_139  [key=0, style=solid];
m12_138 -> m12_141  [key=2, style=dotted];
m12_139 -> m12_109  [key=2, style=dotted];
m12_139 -> m12_140  [key=0, style=solid];
m12_139 -> m12_142  [key=2, style=dotted];
m12_140 -> m12_137  [color=blue, key=0, style=bold];
m12_90 -> m12_91  [color=green, key=0, style=solid];
m12_90 -> m12_92  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_91 -> m12_92  [color=green, key=0, style=solid];
m12_91 -> m12_77  [color=green, key=2, style=dotted];
m12_91 -> m12_78  [color=green, key=2, style=dotted];
m12_92 -> m12_89  [key=2, style=dotted];
m12_92 -> m12_93  [key=0, style=solid];
m12_93 -> m12_90  [color=blue, key=0, style=bold];
m12_19 -> m12_20  [color=green, key=0, style=solid];
m12_20 -> m12_21  [color=green, key=0, style=solid];
m12_20 -> m12_22  [color=green, key=2, style=dotted];
m12_21 -> m12_19  [color=blue, key=0, style=bold];
m12_162 -> m12_163  [key=0, style=solid];
m12_163 -> m12_109  [key=2, style=dotted];
m12_163 -> m12_164  [key=0, style=solid];
m12_163 -> m12_142  [key=2, style=dotted];
m12_166 -> m12_109  [key=2, style=dotted];
m12_166 -> m12_167  [key=0, style=solid];
m12_166 -> m12_18  [key=2, style=dotted];
m12_167 -> m12_109  [key=2, style=dotted];
m12_167 -> m12_168  [key=0, style=solid];
m12_167 -> m12_18  [key=2, style=dotted];
m12_164 -> m12_165  [key=0, style=solid];
m12_164 -> m12_159  [key=2, style=dotted];
m12_165 -> m12_166  [key=0, style=solid];
m12_165 -> m12_167  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m12_165 -> m12_160  [key=2, style=dotted];
m12_168 -> m12_162  [color=blue, key=0, style=bold];
m12_8 -> m12_9  [key=0, style=solid];
m12_9 -> m12_10  [key=0, style=solid];
m12_9 -> m12_7  [key=2, style=dotted];
m12_10 -> m12_8  [color=blue, key=0, style=bold];
m12_10 -> m12_11  [key=0, style=solid];
m12_64 -> m12_66  [color=green, key=1, label=string, style=dashed];
m12_64 -> m12_65  [key=0, style=solid];
m12_66 -> m12_67  [color=green, key=0, style=solid];
m12_66 -> m12_68  [color=green, key=2, style=dotted];
m12_66 -> m12_63  [color=green, key=2, style=dotted];
m12_65 -> m12_66  [color=green, key=0, style=solid];
m12_65 -> m12_47  [key=2, style=dotted];
m12_65 -> m12_48  [key=2, style=dotted];
m12_67 -> m12_64  [color=blue, key=0, style=bold];
m12_169 -> m12_170  [key=0, style=solid];
m12_170 -> m12_142  [key=2, style=dotted];
m12_170 -> m12_171  [key=0, style=solid];
m12_170 -> m12_152  [key=2, style=dotted];
m12_171 -> m12_169  [color=blue, key=0, style=bold];
m12_212 -> m12_213  [key=0, style=solid];
m12_217 -> m12_218  [key=0, style=solid];
m12_217 -> m12_220  [key=0, style=solid];
m12_215 -> m12_40  [key=2, style=dotted];
m12_215 -> m12_216  [key=0, style=solid];
m12_215 -> m12_218  [color=darkseagreen4, key=1, label=history, style=dashed];
m12_215 -> m12_219  [color=darkseagreen4, key=1, label=history, style=dashed];
m12_213 -> m12_47  [key=2, style=dotted];
m12_213 -> m12_215  [color=darkseagreen4, key=1, label=entry, style=dashed];
m12_213 -> m12_214  [key=0, style=solid];
m12_213 -> m12_193  [key=2, style=dotted];
m12_219 -> m12_97  [key=2, style=dotted];
m12_219 -> m12_217  [key=0, style=solid];
m12_219 -> m12_219  [color=darkseagreen4, key=1, label=property, style=dashed];
m12_218 -> m12_109  [key=2, style=dotted];
m12_218 -> m12_219  [key=0, style=solid];
m12_218 -> m12_218  [color=darkseagreen4, key=1, label=property, style=dashed];
m12_218 -> m12_221  [key=2, style=dotted];
m12_216 -> m12_217  [key=0, style=solid];
m12_216 -> m12_194  [key=2, style=dotted];
m12_214 -> m12_215  [key=0, style=solid];
m12_214 -> m12_194  [key=2, style=dotted];
m12_220 -> m12_212  [color=blue, key=0, style=bold];
m12_121 -> m12_122  [color=green, key=0, style=solid];
m12_122 -> m12_123  [color=green, key=0, style=solid];
m12_122 -> m12_47  [color=green, key=2, style=dotted];
m12_123 -> m12_124  [color=green, key=0, style=solid];
m12_123 -> m12_102  [color=green, key=2, style=dotted];
m12_123 -> m12_125  [color=green, key=1, label="lambda expression", style=dashed];
m12_124 -> m12_121  [color=blue, key=0, style=bold];
m12_94 -> m12_95  [color=green, key=0, style=solid];
m12_95 -> m12_96  [color=green, key=0, style=solid];
m12_95 -> m12_97  [color=green, key=2, style=dotted];
m12_96 -> m12_94  [color=blue, key=0, style=bold];
m12_59 -> m12_60  [color=green, key=0, style=solid];
m12_60 -> m12_61  [color=green, key=0, style=solid];
m12_60 -> m12_62  [color=green, key=2, style=dotted];
m12_60 -> m12_63  [color=green, key=2, style=dotted];
m12_61 -> m12_59  [color=blue, key=0, style=bold];
m12_11 -> m12_45  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m12_11 -> m12_66  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m12_11 -> m12_99  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m12_11 -> m12_111  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m12_11 -> m12_122  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m12_11 -> m12_12  [key=0, style=solid];
m12_11 -> m12_13  [key=2, style=dotted];
m12_11 -> m12_80  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m12_12 -> m12_10  [color=blue, key=0, style=bold];
m12_195 -> m12_196  [key=0, style=solid];
m12_196 -> m12_197  [key=0, style=solid];
m12_196 -> m12_198  [key=2, style=dotted];
m12_196 -> m12_199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_197 -> m12_195  [color=blue, key=0, style=bold];
m12_222 -> m12_223  [key=0, style=solid];
m12_224 -> m12_225  [key=0, style=solid];
m12_224 -> m12_227  [key=0, style=solid];
m12_223 -> m12_47  [key=2, style=dotted];
m12_223 -> m12_224  [key=0, style=solid];
m12_223 -> m12_180  [key=2, style=dotted];
m12_223 -> m12_225  [color=darkseagreen4, key=1, label=stateEntry, style=dashed];
m12_223 -> m12_226  [color=darkseagreen4, key=1, label=stateEntry, style=dashed];
m12_226 -> m12_97  [key=2, style=dotted];
m12_226 -> m12_224  [key=0, style=solid];
m12_226 -> m12_226  [color=darkseagreen4, key=1, label=property, style=dashed];
m12_225 -> m12_109  [key=2, style=dotted];
m12_225 -> m12_226  [key=0, style=solid];
m12_225 -> m12_225  [color=darkseagreen4, key=1, label=property, style=dashed];
m12_225 -> m12_228  [key=2, style=dotted];
m12_227 -> m12_222  [color=blue, key=0, style=bold];
m12_229 -> m12_230  [key=0, style=solid];
m12_229 -> m12_233  [color=darkseagreen4, key=1, label=Table, style=dashed];
m12_229 -> m12_232  [color=darkseagreen4, key=1, label=Table, style=dashed];
m12_230 -> m12_97  [key=2, style=dotted];
m12_230 -> m12_231  [key=0, style=solid];
m12_233 -> m12_97  [key=2, style=dotted];
m12_233 -> m12_234  [key=0, style=solid];
m12_231 -> m12_233  [color=darkseagreen4, key=1, label=i, style=dashed];
m12_231 -> m12_232  [key=0, style=solid];
m12_231 -> m12_234  [color=darkseagreen4, key=1, label=i, style=dashed];
m12_232 -> m12_233  [key=0, style=solid];
m12_232 -> m12_235  [key=0, style=solid];
m12_234 -> m12_232  [key=0, style=solid];
m12_234 -> m12_234  [color=darkseagreen4, key=1, label=i, style=dashed];
m12_235 -> m12_229  [color=blue, key=0, style=bold];
m12_203 -> m12_204  [key=0, style=solid];
m12_37 -> m12_38  [color=green, key=0, style=solid];
m12_38 -> m12_39  [color=green, key=0, style=solid];
m12_38 -> m12_40  [color=green, key=2, style=dotted];
m12_38 -> m12_41  [color=green, key=2, style=dotted];
m12_39 -> m12_37  [color=blue, key=0, style=bold];
m12_56 -> m12_57  [color=green, key=0, style=solid];
m12_57 -> m12_58  [color=green, key=0, style=solid];
m12_57 -> m12_40  [color=green, key=2, style=dotted];
m12_57 -> m12_41  [color=green, key=2, style=dotted];
m12_58 -> m12_56  [color=blue, key=0, style=bold];
m12_103 -> m12_105  [color=green, key=1, label="?", style=dashed];
m12_103 -> m12_104  [key=0, style=solid];
m12_105 -> m12_106  [color=green, key=0, style=solid];
m12_105 -> m12_108  [color=green, key=2, style=dotted];
m12_105 -> m12_109  [color=green, key=2, style=dotted];
m12_104 -> m12_105  [color=green, key=0, style=solid];
m12_104 -> m12_107  [key=2, style=dotted];
m12_106 -> m12_103  [color=blue, key=0, style=bold];
m12_125 -> m12_126  [color=green, key=0, style=solid];
m12_125 -> m12_127  [color=green, key=1, label="?", style=dashed];
m12_126 -> m12_127  [color=green, key=0, style=solid];
m12_126 -> m12_107  [color=green, key=2, style=dotted];
m12_127 -> m12_128  [color=green, key=0, style=solid];
m12_127 -> m12_108  [color=green, key=2, style=dotted];
m12_127 -> m12_109  [color=green, key=2, style=dotted];
m12_128 -> m12_125  [color=blue, key=0, style=bold];
m12_34 -> m12_35  [key=0, style=solid];
m12_200 -> m12_40  [key=2, style=dotted];
m12_200 -> m12_201  [key=0, style=solid];
m12_200 -> m12_202  [key=2, style=dotted];
m12_200 -> m12_203  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_210 -> m12_40  [key=2, style=dotted];
m12_210 -> m12_211  [key=0, style=solid];
m12_210 -> m12_202  [key=2, style=dotted];
m12_50 -> m12_51  [key=0, style=solid];
m12_53 -> m12_54  [key=0, style=solid];
m12_199 -> m12_200  [key=0, style=solid];
m12_209 -> m12_210  [key=0, style=solid];
m12_36 -> m12_34  [color=blue, key=0, style=bold];
m12_35 -> m12_36  [key=0, style=solid];
m12_201 -> m12_199  [color=blue, key=0, style=bold];
m12_211 -> m12_209  [color=blue, key=0, style=bold];
m12_52 -> m12_50  [color=blue, key=0, style=bold];
m12_51 -> m12_52  [key=0, style=solid];
m12_55 -> m12_53  [color=blue, key=0, style=bold];
m12_54 -> m12_55  [key=0, style=solid];
m12_204 -> m12_205  [key=0, style=solid];
m12_205 -> m12_203  [color=blue, key=0, style=bold];
m12_149 -> m12_150  [key=0, style=solid];
m12_150 -> m12_142  [key=2, style=dotted];
m12_150 -> m12_151  [key=0, style=solid];
m12_150 -> m12_152  [key=2, style=dotted];
m12_151 -> m12_149  [color=blue, key=0, style=bold];
m12_80 -> m12_81  [color=green, key=0, style=solid];
m12_81 -> m12_82  [color=green, key=0, style=solid];
m12_81 -> m12_83  [color=green, key=2, style=dotted];
m12_81 -> m12_84  [color=green, key=2, style=dotted];
m12_82 -> m12_80  [color=blue, key=0, style=bold];
m12_69 -> m12_70  [key=0, style=solid];
m12_70 -> m12_63  [key=2, style=dotted];
m12_70 -> m12_71  [key=0, style=solid];
m12_70 -> m12_72  [key=2, style=dotted];
m12_71 -> m12_69  [color=blue, key=0, style=bold];
m12_42 -> m12_43  [color=green, key=0, style=solid];
m12_42 -> m12_45  [color=green, key=1, label=string, style=dashed];
m12_42 -> m12_44  [color=darkseagreen4, key=1, label=Table, style=dashed];
m12_43 -> m12_44  [color=green, key=0, style=solid];
m12_43 -> m12_47  [color=green, key=2, style=dotted];
m12_43 -> m12_48  [color=green, key=2, style=dotted];
m12_44 -> m12_45  [color=green, key=0, style=solid];
m12_44 -> m12_49  [key=2, style=dotted];
m12_44 -> m12_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_44 -> m12_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_45 -> m12_46  [color=green, key=0, style=solid];
m12_45 -> m12_30  [color=green, key=2, style=dotted];
m12_45 -> m12_31  [color=green, key=2, style=dotted];
m12_45 -> m12_56  [color=green, key=1, label="lambda expression", style=dashed];
m12_46 -> m12_42  [color=blue, key=0, style=bold];
m12_206 -> m12_207  [key=0, style=solid];
m12_207 -> m12_208  [key=0, style=solid];
m12_207 -> m12_198  [key=2, style=dotted];
m12_207 -> m12_209  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_208 -> m12_206  [color=blue, key=0, style=bold];
m12_176 -> m12_177  [key=0, style=solid];
m12_176 -> m12_178  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_177 -> m12_47  [key=2, style=dotted];
m12_177 -> m12_178  [key=0, style=solid];
m12_177 -> m12_180  [key=2, style=dotted];
m12_178 -> m12_97  [key=2, style=dotted];
m12_178 -> m12_179  [key=0, style=solid];
m12_179 -> m12_176  [color=blue, key=0, style=bold];
m12_110 -> m12_111  [color=green, key=0, style=solid];
m12_111 -> m12_112  [color=green, key=0, style=solid];
m12_111 -> m12_113  [color=green, key=2, style=dotted];
m12_111 -> m12_114  [color=green, key=2, style=dotted];
m12_111 -> m12_97  [color=green, key=2, style=dotted];
m12_112 -> m12_110  [color=blue, key=0, style=bold];
m12_236 -> m12_237  [key=0, style=solid];
m12_237 -> m12_97  [key=2, style=dotted];
m12_237 -> m12_238  [key=0, style=solid];
m12_238 -> m12_236  [color=blue, key=0, style=bold];
m12_23 -> m12_24  [color=green, key=0, style=solid];
m12_23 -> m12_27  [color=green, key=1, label=string, style=dashed];
m12_23 -> m12_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_24 -> m12_25  [color=green, key=0, style=solid];
m12_24 -> m12_29  [color=green, key=2, style=dotted];
m12_24 -> m12_26  [color=green, key=1, label=mock, style=dashed];
m12_24 -> m12_27  [color=green, key=1, label=mock, style=dashed];
m12_25 -> m12_26  [color=green, key=0, style=solid];
m12_25 -> m12_30  [key=2, style=dotted];
m12_25 -> m12_31  [key=2, style=dotted];
m12_25 -> m12_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_26 -> m12_27  [color=green, key=0, style=solid];
m12_26 -> m12_30  [color=green, key=2, style=dotted];
m12_26 -> m12_32  [color=green, key=2, style=dotted];
m12_26 -> m12_31  [color=green, key=2, style=dotted];
m12_26 -> m12_37  [color=green, key=1, label="lambda expression", style=dashed];
m12_27 -> m12_28  [color=green, key=0, style=solid];
m12_27 -> m12_33  [color=green, key=2, style=dotted];
m12_28 -> m12_23  [color=blue, key=0, style=bold];
m12_14 -> m12_15  [key=0, style=solid];
m12_15 -> m12_16  [key=0, style=solid];
m12_15 -> m12_17  [key=2, style=dotted];
m12_15 -> m12_18  [key=2, style=dotted];
m12_16 -> m12_14  [color=blue, key=0, style=bold];
m12_172 -> m12_173  [key=0, style=solid];
m12_173 -> m12_109  [key=2, style=dotted];
m12_173 -> m12_174  [key=0, style=solid];
m12_173 -> m12_175  [key=2, style=dotted];
m12_174 -> m12_172  [color=blue, key=0, style=bold];
m12_146 -> m12_147  [key=0, style=solid];
m12_147 -> m12_109  [key=2, style=dotted];
m12_147 -> m12_148  [key=0, style=solid];
m12_147 -> m12_142  [key=2, style=dotted];
m12_148 -> m12_146  [color=blue, key=0, style=bold];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_0  [color=blue, key=0, style=bold];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_3  [key=2, style=dotted];
m12_115 -> m12_116  [color=green, key=0, style=solid];
m12_116 -> m12_117  [color=green, key=0, style=solid];
m12_116 -> m12_119  [color=green, key=2, style=dotted];
m12_116 -> m12_97  [color=green, key=2, style=dotted];
m12_117 -> m12_118  [color=green, key=0, style=solid];
m12_117 -> m12_120  [color=green, key=2, style=dotted];
m12_117 -> m12_97  [color=green, key=2, style=dotted];
m12_118 -> m12_115  [color=blue, key=0, style=bold];
m12_143 -> m12_144  [key=0, style=solid];
m12_144 -> m12_97  [key=2, style=dotted];
m12_144 -> m12_145  [key=0, style=solid];
m12_144 -> m12_141  [key=2, style=dotted];
m12_145 -> m12_143  [color=blue, key=0, style=bold];
m12_184 -> m12_181  [color=blue, key=0, style=bold];
m12_182 -> m12_47  [key=2, style=dotted];
m12_182 -> m12_183  [key=0, style=solid];
m12_182 -> m12_180  [key=2, style=dotted];
m12_181 -> m12_182  [key=0, style=solid];
m12_181 -> m12_183  [color=darkseagreen4, key=1, label=Table, style=dashed];
m12_183 -> m12_184  [key=0, style=solid];
m12_183 -> m12_185  [key=2, style=dotted];
m12_98 -> m12_99  [color=green, key=0, style=solid];
m12_99 -> m12_100  [color=green, key=0, style=solid];
m12_99 -> m12_47  [color=green, key=2, style=dotted];
m12_100 -> m12_101  [color=green, key=0, style=solid];
m12_100 -> m12_102  [color=green, key=2, style=dotted];
m12_100 -> m12_103  [color=green, key=1, label="lambda expression", style=dashed];
m12_101 -> m12_98  [color=blue, key=0, style=bold];
m12_4 -> m12_5  [key=0, style=solid];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_8  [key=2, style=dotted];
m12_5 -> m12_7  [key=2, style=dotted];
m12_6 -> m12_7  [key=0, style=solid];
m12_6 -> m12_9  [key=2, style=dotted];
m12_6 -> m12_4  [color=blue, key=0, style=bold];
m12_7 -> m12_4  [color=blue, key=0, style=bold];
m12_192 -> m12_186  [color=blue, key=0, style=bold];
m12_189 -> m12_40  [key=2, style=dotted];
m12_189 -> m12_190  [key=0, style=solid];
m12_189 -> m12_191  [color=darkseagreen4, key=1, label=history, style=dashed];
m12_187 -> m12_47  [key=2, style=dotted];
m12_187 -> m12_189  [color=darkseagreen4, key=1, label=entry, style=dashed];
m12_187 -> m12_188  [key=0, style=solid];
m12_187 -> m12_193  [key=2, style=dotted];
m12_188 -> m12_189  [key=0, style=solid];
m12_188 -> m12_194  [key=2, style=dotted];
m12_190 -> m12_191  [key=0, style=solid];
m12_190 -> m12_194  [key=2, style=dotted];
m12_191 -> m12_136  [key=2, style=dotted];
m12_191 -> m12_192  [key=0, style=solid];
m12_186 -> m12_187  [key=0, style=solid];
m12_186 -> m12_191  [color=darkseagreen4, key=1, label=Table, style=dashed];
m12_3 -> m12_2  [color=blue, key=0, style=bold];
m12_2 -> m12_3  [key=0, style=solid];
m12_2 -> m12_0  [color=blue, key=0, style=bold];
m12_129 -> m12_130  [key=0, style=solid];
m12_130 -> m12_97  [key=2, style=dotted];
m12_130 -> m12_119  [key=2, style=dotted];
m12_130 -> m12_131  [key=0, style=solid];
m12_131 -> m12_129  [color=blue, key=0, style=bold];
m12_132 -> m12_133  [key=0, style=solid];
m12_133 -> m12_134  [key=0, style=solid];
m12_133 -> n13  [key=2, style=dotted];
m12_133 -> m12_136  [key=2, style=dotted];
m12_134 -> m12_132  [color=blue, key=0, style=bold];
m12_85 -> m12_86  [color=green, key=0, style=solid];
m12_85 -> m12_87  [color=green, key=1, label=string, style=dashed];
m12_86 -> m12_87  [color=green, key=0, style=solid];
m12_86 -> m12_77  [color=green, key=2, style=dotted];
m12_86 -> m12_78  [color=green, key=2, style=dotted];
m12_87 -> m12_88  [color=green, key=0, style=solid];
m12_87 -> m12_89  [color=green, key=2, style=dotted];
m12_88 -> m12_85  [color=blue, key=0, style=bold];
m12_73 -> m12_74  [color=green, key=0, style=solid];
m12_74 -> m12_75  [color=green, key=0, style=solid];
m12_74 -> m12_77  [color=green, key=2, style=dotted];
m12_74 -> m12_78  [color=green, key=2, style=dotted];
m12_75 -> m12_76  [key=0, style=solid];
m12_75 -> m12_79  [key=2, style=dotted];
m12_76 -> m12_73  [color=blue, key=0, style=bold];
m12_250 -> m12_251  [key=0, style=solid];
m12_250 -> m12_254  [color=darkseagreen4, key=1, label=Table, style=dashed];
m12_250 -> m12_253  [color=darkseagreen4, key=1, label=Table, style=dashed];
m12_251 -> m12_97  [key=2, style=dotted];
m12_251 -> m12_252  [key=0, style=solid];
m12_254 -> m12_97  [key=2, style=dotted];
m12_254 -> m12_255  [key=0, style=solid];
m12_252 -> m12_254  [color=darkseagreen4, key=1, label=i, style=dashed];
m12_252 -> m12_253  [key=0, style=solid];
m12_252 -> m12_255  [color=darkseagreen4, key=1, label=i, style=dashed];
m12_253 -> m12_254  [key=0, style=solid];
m12_253 -> m12_256  [key=0, style=solid];
m12_255 -> m12_253  [key=0, style=solid];
m12_255 -> m12_255  [color=darkseagreen4, key=1, label=i, style=dashed];
m12_256 -> m12_250  [color=blue, key=0, style=bold];
m12_257 -> m12_20  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_27  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_45  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_60  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_66  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_74  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_86  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_87  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_91  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_95  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_1  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_5  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_6  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_11  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_15  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_44  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_75  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_92  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_133  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_196  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_207  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_217  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_224  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_230  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_233  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_237  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_251  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m12_257 -> m12_254  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m13_5 -> m13_6  [key=0, style=solid];
m13_6 -> m13_7  [key=0, style=solid];
m13_6 -> n19  [key=2, style=dotted];
m13_7 -> m13_5  [color=blue, key=0, style=bold];
m13_0 -> m13_1  [key=0, style=solid];
m13_1 -> m13_2  [key=0, style=solid];
m13_1 -> m13_3  [key=2, style=dotted];
m13_1 -> m13_4  [key=2, style=dotted];
m13_2 -> m13_0  [color=blue, key=0, style=bold];
m14_55 -> m14_56  [key=0, style=solid];
m14_56 -> m14_57  [key=0, style=solid];
m14_56 -> m14_39  [key=2, style=dotted];
m14_57 -> m14_58  [key=0, style=solid];
m14_57 -> m14_22  [key=2, style=dotted];
m14_58 -> m14_59  [key=0, style=solid];
m14_58 -> m14_40  [key=2, style=dotted];
m14_59 -> m14_60  [key=0, style=solid];
m14_59 -> m14_41  [key=2, style=dotted];
m14_60 -> m14_61  [key=0, style=solid];
m14_60 -> m14_42  [key=2, style=dotted];
m14_61 -> m14_62  [key=0, style=solid];
m14_61 -> m14_43  [key=2, style=dotted];
m14_62 -> m14_63  [key=0, style=solid];
m14_62 -> m14_26  [key=2, style=dotted];
m14_63 -> m14_55  [color=blue, key=0, style=bold];
m14_0 -> m14_1  [key=0, style=solid];
m14_0 -> m14_16  [color=darkorchid, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m14_1 -> m14_2  [color=green, key=0, style=solid];
m14_1 -> m14_5  [key=2, style=dotted];
m14_2 -> m14_3  [color=green, key=0, style=solid];
m14_2 -> m14_6  [color=green, key=2, style=dotted];
m14_2 -> m14_7  [color=green, key=2, style=dotted];
m14_3 -> m14_4  [key=0, style=solid];
m14_3 -> m14_8  [key=2, style=dotted];
m14_4 -> m14_0  [color=blue, key=0, style=bold];
m14_76 -> m14_77  [key=0, style=solid];
m14_77 -> m14_78  [key=0, style=solid];
m14_77 -> m14_39  [key=2, style=dotted];
m14_78 -> m14_79  [key=0, style=solid];
m14_78 -> m14_22  [key=2, style=dotted];
m14_79 -> m14_80  [key=0, style=solid];
m14_79 -> m14_40  [key=2, style=dotted];
m14_80 -> m14_81  [key=0, style=solid];
m14_80 -> m14_41  [key=2, style=dotted];
m14_81 -> m14_82  [key=0, style=solid];
m14_81 -> m14_42  [key=2, style=dotted];
m14_82 -> m14_83  [key=0, style=solid];
m14_82 -> m14_43  [key=2, style=dotted];
m14_83 -> m14_84  [key=0, style=solid];
m14_83 -> m14_26  [key=2, style=dotted];
m14_84 -> m14_76  [color=blue, key=0, style=bold];
m14_9 -> m14_10  [key=0, style=solid];
m14_10 -> m14_11  [key=0, style=solid];
m14_10 -> m14_13  [key=2, style=dotted];
m14_11 -> m14_12  [key=0, style=solid];
m14_12 -> m14_9  [color=blue, key=0, style=bold];
m14_22 -> m14_23  [key=0, style=solid];
m14_22 -> m14_31  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m14_22 -> m14_45  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m14_22 -> m14_56  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m14_22 -> m14_65  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m14_22 -> m14_77  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m14_22 -> m14_86  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m14_23 -> m14_24  [key=0, style=solid];
m14_23 -> m14_25  [key=2, style=dotted];
m14_24 -> m14_22  [color=blue, key=0, style=bold];
m14_85 -> m14_86  [key=0, style=solid];
m14_86 -> m14_87  [key=0, style=solid];
m14_86 -> m14_39  [key=2, style=dotted];
m14_87 -> m14_88  [key=0, style=solid];
m14_87 -> m14_22  [key=2, style=dotted];
m14_88 -> m14_89  [key=0, style=solid];
m14_88 -> m14_40  [key=2, style=dotted];
m14_89 -> m14_90  [key=0, style=solid];
m14_89 -> m14_41  [key=2, style=dotted];
m14_90 -> m14_91  [key=0, style=solid];
m14_90 -> m14_42  [key=2, style=dotted];
m14_91 -> m14_92  [key=0, style=solid];
m14_91 -> m14_43  [key=2, style=dotted];
m14_92 -> m14_93  [key=0, style=solid];
m14_92 -> m14_26  [key=2, style=dotted];
m14_93 -> m14_85  [color=blue, key=0, style=bold];
m14_64 -> m14_65  [key=0, style=solid];
m14_65 -> m14_66  [key=0, style=solid];
m14_65 -> m14_39  [key=2, style=dotted];
m14_66 -> m14_67  [key=0, style=solid];
m14_66 -> m14_22  [key=2, style=dotted];
m14_67 -> m14_68  [key=0, style=solid];
m14_67 -> m14_40  [key=2, style=dotted];
m14_68 -> m14_69  [key=0, style=solid];
m14_68 -> m14_41  [key=2, style=dotted];
m14_69 -> m14_70  [key=0, style=solid];
m14_69 -> m14_41  [key=2, style=dotted];
m14_70 -> m14_71  [key=0, style=solid];
m14_70 -> m14_42  [key=2, style=dotted];
m14_71 -> m14_72  [key=0, style=solid];
m14_71 -> m14_43  [key=2, style=dotted];
m14_72 -> m14_73  [key=0, style=solid];
m14_72 -> m14_42  [key=2, style=dotted];
m14_73 -> m14_74  [key=0, style=solid];
m14_73 -> m14_43  [key=2, style=dotted];
m14_74 -> m14_75  [key=0, style=solid];
m14_74 -> m14_26  [key=2, style=dotted];
m14_75 -> m14_64  [color=blue, key=0, style=bold];
m14_14 -> m14_15  [key=0, style=solid];
m14_15 -> m14_16  [key=0, style=solid];
m14_15 -> m14_17  [key=0, style=solid];
m14_16 -> m14_17  [key=0, style=solid];
m14_16 -> m14_0  [key=2, style=dotted];
m14_17 -> m14_14  [color=blue, key=0, style=bold];
m14_26 -> m14_27  [key=0, style=solid];
m14_27 -> m14_28  [key=0, style=solid];
m14_27 -> m14_29  [key=2, style=dotted];
m14_28 -> m14_26  [color=blue, key=0, style=bold];
m14_44 -> m14_45  [key=0, style=solid];
m14_45 -> m14_46  [key=0, style=solid];
m14_45 -> m14_39  [key=2, style=dotted];
m14_46 -> m14_47  [key=0, style=solid];
m14_46 -> m14_22  [key=2, style=dotted];
m14_47 -> m14_48  [key=0, style=solid];
m14_47 -> m14_40  [key=2, style=dotted];
m14_48 -> m14_49  [key=0, style=solid];
m14_48 -> m14_41  [key=2, style=dotted];
m14_49 -> m14_50  [key=0, style=solid];
m14_49 -> m14_42  [key=2, style=dotted];
m14_50 -> m14_51  [key=0, style=solid];
m14_50 -> m14_43  [key=2, style=dotted];
m14_51 -> m14_52  [key=0, style=solid];
m14_51 -> m14_54  [key=2, style=dotted];
m14_52 -> m14_53  [key=0, style=solid];
m14_52 -> m14_26  [key=2, style=dotted];
m14_53 -> m14_44  [color=blue, key=0, style=bold];
m14_30 -> m14_31  [key=0, style=solid];
m14_31 -> m14_32  [key=0, style=solid];
m14_31 -> m14_39  [key=2, style=dotted];
m14_32 -> m14_33  [key=0, style=solid];
m14_32 -> m14_22  [key=2, style=dotted];
m14_33 -> m14_34  [key=0, style=solid];
m14_33 -> m14_40  [key=2, style=dotted];
m14_34 -> m14_35  [key=0, style=solid];
m14_34 -> m14_41  [key=2, style=dotted];
m14_35 -> m14_36  [key=0, style=solid];
m14_35 -> m14_42  [key=2, style=dotted];
m14_36 -> m14_37  [key=0, style=solid];
m14_36 -> m14_43  [key=2, style=dotted];
m14_37 -> m14_38  [key=0, style=solid];
m14_37 -> m14_26  [key=2, style=dotted];
m14_38 -> m14_30  [color=blue, key=0, style=bold];
m14_18 -> m14_19  [key=0, style=solid];
m14_19 -> m14_20  [key=0, style=solid];
m14_19 -> m14_21  [key=2, style=dotted];
m14_20 -> m14_18  [color=blue, key=0, style=bold];
m14_94 -> m14_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m14_94 -> m14_37  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m14_94 -> m14_46  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m14_94 -> m14_52  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m14_94 -> m14_57  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m14_94 -> m14_62  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m14_94 -> m14_66  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m14_94 -> m14_74  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m14_94 -> m14_78  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m14_94 -> m14_83  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m14_94 -> m14_87  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m14_94 -> m14_92  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m15_5 -> m15_6  [key=0, style=solid];
m15_6 -> m15_7  [key=0, style=solid];
m15_6 -> n19  [key=2, style=dotted];
m15_7 -> m15_5  [color=blue, key=0, style=bold];
m15_0 -> m15_1  [color=red, key=0, style=solid];
m15_0 -> m15_0  [color=darkorchid, key=3, label="Field variable string DefaultQueue", style=bold];
m15_1 -> m15_2  [color=red, key=0, style=solid];
m15_1 -> m15_3  [color=red, key=2, style=dotted];
m15_1 -> m15_4  [color=red, key=2, style=dotted];
m15_1 -> m15_5  [color=red, key=3, label="method methodReturn string TryToGetQueue", style=bold];
m15_2 -> m15_0  [color=blue, key=0, style=bold];
m16_3 -> m16_4  [color=red, key=0, style=solid];
m16_3 -> m16_5  [color=red, key=1, label=string, style=dashed];
m16_4 -> m16_5  [color=red, key=0, style=solid];
m16_5 -> m16_6  [color=red, key=0, style=solid];
m16_6 -> m16_3  [color=blue, key=0, style=bold];
m16_7 -> m16_8  [key=0, style=solid];
m16_8 -> m16_7  [color=blue, key=0, style=bold];
m16_0 -> m16_1  [color=red, key=0, style=solid];
m16_1 -> m16_2  [color=red, key=0, style=solid];
m16_2 -> m16_0  [color=blue, key=0, style=bold];
m16_9 -> m16_10  [color=red, key=0, style=solid];
m16_10 -> m16_11  [color=red, key=0, style=solid];
m16_11 -> m16_9  [color=blue, key=0, style=bold];
m16_12 -> m16_1  [color=red, key=1, label="HangFire.Tests.UnitTests.JobInvokerTests.CorrectJob", style=dashed];
m16_13 -> m16_4  [color=red, key=1, label="HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob", style=dashed];
m16_13 -> m16_5  [color=red, key=1, label="HangFire.Tests.UnitTests.JobInvokerTests.ArgumentsJob", style=dashed];
m16_14 -> m16_10  [color=red, key=1, label="HangFire.Tests.UnitTests.JobInvokerTests.DisposableJob", style=dashed];
m17_0 -> m17_3  [color=darkseagreen4, key=1, label="Hangfire.Server.IServerProcess", style=dashed];
m17_0 -> m17_1  [key=0, style=solid];
m17_0 -> m17_2  [color=darkseagreen4, key=1, label="Hangfire.Server.IServerProcess", style=dashed];
m17_3 -> m17_4  [key=0, style=solid];
m17_4 -> m17_5  [key=0, style=solid];
m17_4 -> m17_11  [key=2, style=dotted];
m17_4 -> m17_12  [key=2, style=dotted];
m17_5 -> m17_6  [key=0, style=solid];
m17_6 -> m17_7  [key=0, style=solid];
m17_7 -> m17_8  [key=0, style=solid];
m17_1 -> m17_3  [key=0, style=solid];
m17_1 -> m17_2  [key=0, style=solid];
m17_2 -> m17_8  [key=0, style=solid];
m17_2 -> m17_9  [key=2, style=dotted];
m17_2 -> m17_10  [key=2, style=dotted];
m17_8 -> m17_0  [color=blue, key=0, style=bold];
m17_32 -> m17_45  [color=green, key=3, label="method methodReturn Hangfire.Logging.LogLevel GetLogLevel", style=bold];
m17_32 -> m17_38  [key=0, style=solid];
m17_32 -> m17_14  [color=darkorchid, key=3, label="Parameter variable int i", style=bold];
m17_32 -> m17_40  [color=darkorchid, key=3, label="method methodReturn Hangfire.Logging.LogLevel GetLogLevel", style=bold];
m17_32 -> m17_42  [color=darkorchid, key=3, label="method methodReturn Hangfire.Logging.LogLevel GetLogLevel", style=bold];
m17_32 -> m17_44  [color=darkorchid, key=3, label="method methodReturn Hangfire.Logging.LogLevel GetLogLevel", style=bold];
m17_45 -> m17_46  [color=green, key=0, style=solid];
m17_38 -> m17_39  [key=0, style=solid];
m17_38 -> m17_41  [key=0, style=solid];
m17_38 -> m17_43  [key=0, style=solid];
m17_40 -> m17_46  [key=0, style=solid];
m17_42 -> m17_46  [key=0, style=solid];
m17_44 -> m17_46  [key=0, style=solid];
m17_39 -> m17_40  [key=0, style=solid];
m17_41 -> m17_42  [key=0, style=solid];
m17_43 -> m17_44  [key=0, style=solid];
m17_46 -> m17_32  [color=blue, key=0, style=bold];
m17_13 -> m17_14  [key=0, style=solid];
m17_13 -> m17_16  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m17_13 -> m17_26  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m17_13 -> m17_27  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m17_24 -> m17_32  [key=2, style=dotted];
m17_24 -> m17_25  [key=0, style=solid];
m17_14 -> m17_24  [color=darkseagreen4, key=1, label=i, style=dashed];
m17_14 -> m17_14  [color=darkorchid, key=3, label="Local variable int i", style=bold];
m17_14 -> m17_15  [key=0, style=solid];
m17_14 -> m17_21  [color=darkseagreen4, key=1, label=i, style=dashed];
m17_14 -> m17_23  [color=darkseagreen4, key=1, label=i, style=dashed];
m17_14 -> m17_25  [color=darkseagreen4, key=1, label=i, style=dashed];
m17_14 -> m17_36  [color=darkseagreen4, key=1, label=i, style=dashed];
m17_14 -> m17_28  [color=darkseagreen4, key=1, label=i, style=dashed];
m17_23 -> m17_24  [key=0, style=solid];
m17_23 -> m17_31  [key=2, style=dotted];
m17_23 -> m17_25  [color=darkseagreen4, key=1, label=nextTry, style=dashed];
m17_23 -> m17_36  [color=darkseagreen4, key=1, label=nextTry, style=dashed];
m17_23 -> m17_26  [color=darkseagreen4, key=1, label=nextTry, style=dashed];
m17_25 -> m17_26  [key=0, style=solid];
m17_25 -> m17_33  [key=2, style=dotted];
m17_25 -> m17_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_15 -> m17_16  [key=0, style=solid];
m17_15 -> m17_29  [key=0, style=solid];
m17_21 -> m17_23  [key=0, style=solid];
m17_21 -> m17_22  [key=0, style=solid];
m17_28 -> m17_15  [key=0, style=solid];
m17_28 -> m17_28  [color=darkseagreen4, key=1, label=i, style=dashed];
m17_26 -> m17_27  [key=0, style=solid];
m17_26 -> m17_34  [key=2, style=dotted];
m17_16 -> m17_17  [key=0, style=solid];
m17_16 -> m17_30  [key=2, style=dotted];
m17_27 -> m17_28  [key=0, style=solid];
m17_27 -> m17_29  [key=0, style=solid];
m17_20 -> m17_21  [key=0, style=solid];
m17_22 -> m17_29  [key=0, style=solid];
m17_17 -> m17_29  [key=0, style=solid];
m17_19 -> m17_29  [key=0, style=solid];
m17_18 -> m17_19  [key=0, style=solid];
m17_29 -> m17_13  [color=blue, key=0, style=bold];
m17_47 -> m17_48  [key=0, style=solid];
m17_48 -> m17_49  [key=0, style=solid];
m17_48 -> m17_50  [key=2, style=dotted];
m17_49 -> m17_47  [color=blue, key=0, style=bold];
m17_35 -> m17_36  [key=0, style=solid];
m17_36 -> m17_37  [key=0, style=solid];
m17_37 -> m17_35  [color=blue, key=0, style=bold];
m17_51 -> m17_53  [color=darkseagreen4, key=1, label=int, style=dashed];
m17_51 -> m17_52  [key=0, style=solid];
m17_54 -> m17_55  [key=0, style=solid];
m17_54 -> m17_61  [key=2, style=dotted];
m17_54 -> m17_62  [key=2, style=dotted];
m17_53 -> m17_54  [key=0, style=solid];
m17_53 -> m17_59  [key=2, style=dotted];
m17_53 -> m17_60  [key=2, style=dotted];
m17_52 -> m17_53  [key=0, style=solid];
m17_52 -> m17_56  [key=2, style=dotted];
m17_52 -> m17_57  [key=2, style=dotted];
m17_52 -> m17_58  [key=2, style=dotted];
m17_55 -> m17_51  [color=blue, key=0, style=bold];
m17_63 -> m17_23  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
m17_63 -> m17_25  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
m17_63 -> m17_15  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
m17_63 -> m17_21  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
m17_63 -> m17_36  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
m17_63 -> m17_3  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
m17_63 -> m17_4  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
m17_63 -> m17_5  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
m17_63 -> m17_6  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
m17_63 -> m17_7  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
m17_63 -> m17_16  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
m17_63 -> m17_48  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
m17_63 -> m17_54  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryProcess", style=dashed];
m17_64 -> m17_36  [color=darkseagreen4, key=1, label=i, style=dashed];
m17_65 -> m17_36  [color=darkseagreen4, key=1, label=nextTry, style=dashed];
}
