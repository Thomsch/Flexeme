digraph  {
n44 [label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts", span=""];
n45 [label=handler, span=""];
n46 [label=context, span=""];
n0 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()", label="Entry HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()", span="19-19"];
n1 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()", label="var job = Job.FromExpression(() => Console.WriteLine())", span="21-21"];
n2 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()", label="_transaction = new Mock<IWriteOnlyTransaction>()", span="23-23"];
n7 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="125-125"];
n13 [cluster="lambda expression", label="Entry lambda expression", span="21-21"];
n4 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()", label="_stateContext = new StateContext(JobId, job)", span="25-25"];
n3 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()", label="_connection = new Mock<IStorageConnection>()", span="24-24"];
n8 [cluster="Mock<IWriteOnlyTransaction>.cstr", label="Entry Mock<IWriteOnlyTransaction>.cstr", span=""];
n9 [cluster="Mock<IStorageConnection>.cstr", label="Entry Mock<IStorageConnection>.cstr", span=""];
n5 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()", label="_context = new ApplyStateContext(\r\n                _connection.Object,\r\n                _stateContext, \r\n                new EnqueuedState { Queue = Queue }, \r\n                null)", span="27-31"];
n10 [cluster="HangFire.States.StateContext.StateContext(string, HangFire.Common.Job)", label="Entry HangFire.States.StateContext.StateContext(string, HangFire.Common.Job)", span="23-23"];
n6 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()", label="Exit HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()", span="19-19"];
n11 [cluster="ApplyStateContext.cstr", label="Entry ApplyStateContext.cstr", span=""];
n12 [cluster="HangFire.States.EnqueuedState.EnqueuedState()", label="Entry HangFire.States.EnqueuedState.EnqueuedState()", span="31-31"];
n14 [cluster="lambda expression", label="Console.WriteLine()", span="21-21"];
n15 [cluster="lambda expression", label="Exit lambda expression", span="21-21"];
n16 [cluster="System.Console.WriteLine()", label="Entry System.Console.WriteLine()", span="0-0"];
n17 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.HandlerShouldBeRegistered_ForTheEnqueuedState()", label="Entry HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.HandlerShouldBeRegistered_ForTheEnqueuedState()", span="35-35"];
n18 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.HandlerShouldBeRegistered_ForTheEnqueuedState()", label="var handler = new EnqueuedState.Handler()", span="37-37"];
n19 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.HandlerShouldBeRegistered_ForTheEnqueuedState()", label="Assert.Equal(EnqueuedState.StateName, handler.StateName)", span="38-38"];
n21 [cluster="HangFire.States.EnqueuedState.Handler.Handler()", label="Entry HangFire.States.EnqueuedState.Handler.Handler()", span="77-77"];
n20 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.HandlerShouldBeRegistered_ForTheEnqueuedState()", label="Exit HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.HandlerShouldBeRegistered_ForTheEnqueuedState()", span="35-35"];
n22 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n23 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()", label="Entry HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()", span="42-42"];
n24 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()", label="var handler = new EnqueuedState.Handler()", span="44-44"];
n25 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()", label="handler.Apply(_context, _transaction.Object)", span="46-46"];
n26 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()", label="_transaction.Verify(x => x.AddToQueue(Queue, JobId))", span="48-48"];
n28 [cluster="Unk.Apply", label="Entry Unk.Apply", span=""];
n27 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()", label="Exit HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()", span="42-42"];
n29 [cluster="Unk.Verify", label="Entry Unk.Verify", span=""];
n30 [cluster="lambda expression", label="Entry lambda expression", span="48-48"];
n31 [cluster="lambda expression", label="x.AddToQueue(Queue, JobId)", span="48-48"];
n32 [cluster="lambda expression", label="Exit lambda expression", span="48-48"];
n33 [cluster="Unk.AddToQueue", label="Entry Unk.AddToQueue", span=""];
n34 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_ThrowsAnException_WhenOtherThanEnqueuedStateGiven()", label="Entry HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_ThrowsAnException_WhenOtherThanEnqueuedStateGiven()", span="52-52"];
n35 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_ThrowsAnException_WhenOtherThanEnqueuedStateGiven()", label="var handler = new EnqueuedState.Handler()", span="54-54"];
n37 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_ThrowsAnException_WhenOtherThanEnqueuedStateGiven()", label="Assert.Throws<InvalidOperationException>(\r\n                () => handler.Apply(context, _transaction.Object))", span="58-59"];
n42 [cluster="lambda expression", label="handler.Apply(context, _transaction.Object)", span="59-59"];
n39 [cluster="Mock<State>.cstr", label="Entry Mock<State>.cstr", span=""];
n38 [cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_ThrowsAnException_WhenOtherThanEnqueuedStateGiven()", label="Exit HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_ThrowsAnException_WhenOtherThanEnqueuedStateGiven()", span="52-52"];
n40 [cluster="Unk.>", label="Entry Unk.>", span=""];
n41 [cluster="lambda expression", label="Entry lambda expression", span="59-59"];
n43 [cluster="lambda expression", label="Exit lambda expression", span="59-59"];
d12 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", color=green, community=0, label="JobServer.RetryOnException(\r\n                        () => RemoveTimedOutServers(ServerTimeout), \r\n                        _stopped)", prediction=0, span="54-56"];
d31 [label="HangFire.Server.Components.ServerWatchdog", span=""];
d11 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", label=true, span="52-52"];
d13 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", label="_stopped.WaitOne(CheckInterval)", span="58-58"];
d19 [cluster="HangFire.Server.JobServer.RetryOnException(System.Action, System.Threading.WaitHandle)", label="Entry HangFire.Server.JobServer.RetryOnException(System.Action, System.Threading.WaitHandle)", span="151-151"];
d22 [cluster="lambda expression", label="Entry lambda expression", span="55-55"];
d23 [cluster="lambda expression", color=green, community=0, label="RemoveTimedOutServers(ServerTimeout)", prediction=0, span="55-55"];
d24 [cluster="lambda expression", label="Exit lambda expression", span="55-55"];
d3 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", label="Entry HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", span="38-38"];
d1 [cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", label="_storage = storage", span="35-35"];
d4 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", label="var connection = _storage.GetConnection()", span="40-40"];
d26 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", label="_stopped.Set()", span="74-74"];
d10 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", label="Logger.Info(''Server watchdog has been started.'')", span="50-50"];
d14 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", label="Logger.Info(''Server watchdog has been stopped.'')", span="64-64"];
d20 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
d6 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", label="Exit HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", span="38-38"];
d5 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", label="connection.RemoveTimedOutServers(timeout)", span="42-42"];
d0 [cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", label="Entry HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="33-33"];
d2 [cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", label="Exit HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="33-33"];
d7 [cluster="HangFire.JobStorage.GetConnection()", label="Entry HangFire.JobStorage.GetConnection()", span="45-45"];
d25 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", label="Entry HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="72-72"];
d27 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", label="thread.Join()", span="75-75"];
d29 [cluster="System.Threading.EventWaitHandle.Set()", label="Entry System.Threading.EventWaitHandle.Set()", span="0-0"];
d9 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", label="Entry HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", span="46-46"];
d18 [cluster="Unk.Info", label="Entry Unk.Info", span=""];
d15 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", label=Exception, span="66-66"];
d17 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", label="Exit HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", span="46-46"];
d8 [cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", label="Entry HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="26-26"];
d28 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", label="Exit HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="72-72"];
d30 [cluster="System.Threading.Thread.Join()", label="Entry System.Threading.Thread.Join()", span="0-0"];
d16 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", label="Logger.Fatal(''Unexpected exception caught.'', ex)", span="68-68"];
d21 [cluster="Unk.Fatal", label="Entry Unk.Fatal", span=""];
m0_6 [cluster="ConsoleSample.ConsoleJob.Perform()", file="ExpirationManager.cs", label="Thread.Sleep(TimeSpan.FromSeconds(5 + time))", span="30-30"];
m0_73 [cluster="HangFire.Perform.In<TJob>(System.TimeSpan, object)", file="ExpirationManager.cs", label="System.Action<DbConnection>", span=""];
m0_63 [cluster="Unk.AddRange", file="ExpirationManager.cs", label="Entry Unk.AddRange", span=""];
m0_65 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(params string[])", file="ExpirationManager.cs", label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(params string[])", span="14-14"];
m0_27 [cluster="ConsoleSample.Program.Main()", file="ExpirationManager.cs", label="RedisFactory.Db = 3", span="62-62"];
m0_28 [cluster="ConsoleSample.Program.Main()", file="ExpirationManager.cs", label="GlobalJobFilters.Filters.Add(new HistoryStatisticsFilter())", span="64-64"];
m0_29 [cluster="ConsoleSample.Program.Main()", file="ExpirationManager.cs", label="GlobalJobFilters.Filters.Add(new RetryJobsFilter())", span="65-65"];
m0_20 [cluster="lambda expression", file="ExpirationManager.cs", label="int affected", span="70-70"];
m0_21 [cluster="lambda expression", file="ExpirationManager.cs", label="affected = ExecuteNonQuery(\r\n                            connection,\r\n                            GetQuery(_storage.SchemaName, table),\r\n                            cancellationToken,\r\n                            new SqlParameter(''@count'', NumberOfRecordsInSinglePass),\r\n                            new SqlParameter(''@now'', DateTime.UtcNow))", span="74-79"];
m0_22 [cluster="lambda expression", file="ExpirationManager.cs", label="affected == NumberOfRecordsInSinglePass", span="81-81"];
m0_23 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="68-82"];
m0_24 [cluster="Hangfire.SqlServer.ExpirationManager.GetQuery(string, string)", file="ExpirationManager.cs", label="Entry Hangfire.SqlServer.ExpirationManager.GetQuery(string, string)", span="125-125"];
m0_25 [cluster="SqlParameter.cstr", file="ExpirationManager.cs", label="Entry SqlParameter.cstr", span=""];
m0_31 [cluster="System.Type.ToString()", file="ExpirationManager.cs", label="Entry System.Type.ToString()", span="0-0"];
m0_26 [cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs", label="Entry Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", span="156-156"];
m0_30 [cluster="object.GetType()", file="ExpirationManager.cs", label="Entry object.GetType()", span="0-0"];
m0_32 [cluster="Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", file="ExpirationManager.cs", label="Entry Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", span="95-95"];
m0_33 [cluster="Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", color=green, community=0, file="ExpirationManager.cs", label="storage.UseConnection(null, connection =>\r\n                {\r\n                    SqlServerDistributedLock.Acquire(connection, DistributedLockKey, DefaultLockTimeout);\r\n\r\n                    try\r\n                    {\r\n                        action(connection);\r\n                    }\r\n                    finally\r\n                    {\r\n                        SqlServerDistributedLock.Release(connection, DistributedLockKey);\r\n                    }\r\n                })", prediction=2, span="99-111"];
m0_34 [cluster="Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", file="ExpirationManager.cs", label=DistributedLockTimeoutException, span="113-113"];
m0_35 [cluster="Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", file="ExpirationManager.cs", label="e.Resource == DistributedLockKey", span="113-113"];
m0_42 [cluster="lambda expression", file="ExpirationManager.cs", label="action(connection)", span="105-105"];
m0_55 [cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs", label="command.CommandTimeout = 0", span="166-166"];
m0_36 [cluster="Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", file="ExpirationManager.cs", label="Logger.Log(\r\n                    LogLevel.Debug,\r\n                    () => $@''An exception was thrown during acquiring distributed lock on the {DistributedLockKey} resource within {DefaultLockTimeout.TotalSeconds} seconds. Outdated records were not removed.\r\nIt will be retried in {_checkInterval.TotalSeconds} seconds.'',\r\n                    e)", span="117-121"];
m0_37 [cluster="Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", file="ExpirationManager.cs", label="Exit Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", span="95-95"];
m0_38 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection, System.Action<DbConnection>)", file="ExpirationManager.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection, System.Action<DbConnection>)", span="171-171"];
m0_39 [cluster="Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="ExpirationManager.cs", label="Entry Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="56-56"];
m0_47 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="119-120"];
m0_48 [cluster="lambda expression", file="ExpirationManager.cs", label="$@''An exception was thrown during acquiring distributed lock on the {DistributedLockKey} resource within {DefaultLockTimeout.TotalSeconds} seconds. Outdated records were not removed.\r\nIt will be retried in {_checkInterval.TotalSeconds} seconds.''", span="119-120"];
m0_53 [cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs", label="command.CommandText = commandText", span="164-164"];
m0_54 [cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs", label="command.Parameters.AddRange(parameters)", span="165-165"];
m0_56 [cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs", label="cancellationToken.Register(state => ((SqlCommand)state).Cancel(), command)", span="168-168"];
m0_40 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="99-111"];
m0_41 [cluster="lambda expression", file="ExpirationManager.cs", label="SqlServerDistributedLock.Acquire(connection, DistributedLockKey, DefaultLockTimeout)", span="101-101"];
m0_43 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="99-111"];
m0_44 [cluster="Unk.Acquire", file="ExpirationManager.cs", label="Entry Unk.Acquire", span=""];
m0_45 [cluster="System.Action<T>.Invoke(T)", file="ExpirationManager.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m0_46 [cluster="Unk.Release", file="ExpirationManager.cs", label="Entry Unk.Release", span=""];
m0_49 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="119-120"];
m0_50 [cluster="Hangfire.SqlServer.ExpirationManager.GetQuery(string, string)", file="ExpirationManager.cs", label="return\r\n$@''set transaction isolation level read committed;\r\ndelete top (@count) from [{schemaName}].[{table}] with (readpast) \r\nwhere ExpireAt < @now\r\noption (loop join, optimize for (@count = 20000));'';", span="149-153"];
m0_52 [cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs", label="var command = connection.CreateCommand()", span="162-162"];
m0_51 [cluster="Hangfire.SqlServer.ExpirationManager.GetQuery(string, string)", file="ExpirationManager.cs", label="Exit Hangfire.SqlServer.ExpirationManager.GetQuery(string, string)", span="125-125"];
m0_57 [cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs", label="return command.ExecuteNonQuery();", span="172-172"];
m0_58 [cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs", label=SqlException, span="174-174"];
m0_59 [cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs", label="cancellationToken.IsCancellationRequested", span="174-174"];
m0_64 [cluster="HangFire.RecurringJobsFilter.RecurringJobsFilter()", file="ExpirationManager.cs", label="Entry HangFire.RecurringJobsFilter.RecurringJobsFilter()", span="18-18"];
m0_10 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs", label="Logger.Debug($''Removing outdated records from the '{table}' table...'')", span="66-66"];
m0_74 [cluster="HangFire.Perform.Async<TJob>()", file="ExpirationManager.cs", label="Entry HangFire.Perform.Async<TJob>()", span="11-11"];
m0_8 [cluster="ConsoleSample.ConsoleJob.Perform()", file="ExpirationManager.cs", label="Exit ConsoleSample.ConsoleJob.Perform()", span="17-17"];
m0_11 [cluster="System.TimeSpan.FromSeconds(double)", file="ExpirationManager.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m0_13 [cluster="System.Console.WriteLine(string)", file="ExpirationManager.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m0_9 [cluster="System.Random.Next(int)", file="ExpirationManager.cs", label="Entry System.Random.Next(int)", span="0-0"];
m0_12 [cluster="System.Threading.Thread.Sleep(System.TimeSpan)", file="ExpirationManager.cs", label="Entry System.Threading.Thread.Sleep(System.TimeSpan)", span="0-0"];
m0_14 [cluster="ConsoleSample.ErrorJob.Perform()", file="ExpirationManager.cs", label="Entry ConsoleSample.ErrorJob.Perform()", span="38-38"];
m0_72 [cluster="HangFire.Perform.Async<TJob>(object)", file="ExpirationManager.cs", label=table, span=""];
m0_19 [cluster="lambda expression", file="ExpirationManager.cs", label="Entry lambda expression", span="68-82"];
m0_71 [cluster="int.Parse(string)", file="ExpirationManager.cs", label="System.Threading.CancellationToken", span=""];
m0_61 [cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs", label="Exit Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", span="156-156"];
m0_0 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs", label="Entry Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="54-54"];
m0_1 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs", label="storage == null", span="56-56"];
m0_2 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs", label="throw new ArgumentNullException(nameof(storage));", span="56-56"];
m0_3 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs", label="_storage = storage", span="58-58"];
m0_4 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs", label="_checkInterval = checkInterval", span="59-59"];
m0_5 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs", label="Exit Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="54-54"];
m0_7 [cluster="Unk.nameof", file="ExpirationManager.cs", label="Entry Unk.nameof", span=""];
m0_62 [cluster="HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", file="ExpirationManager.cs", label="Entry HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", span="17-17"];
m0_69 [cluster="Unk.Cancel", file="ExpirationManager.cs", label="Entry Unk.Cancel", span=""];
m0_18 [cluster="System.InvalidOperationException.InvalidOperationException(string, System.Exception)", file="ExpirationManager.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string, System.Exception)", span="0-0"];
m0_67 [cluster="lambda expression", file="ExpirationManager.cs", label="((SqlCommand)state).Cancel()", span="168-168"];
m0_17 [cluster="ConsoleSample.ErrorJob.Perform()", file="ExpirationManager.cs", label="Exit ConsoleSample.ErrorJob.Perform()", span="38-38"];
m0_68 [cluster="lambda expression", file="ExpirationManager.cs", label="Exit lambda expression", span="168-168"];
m0_66 [cluster="HangFire.BackgroundJobServer.Start()", file="ExpirationManager.cs", label="Entry HangFire.BackgroundJobServer.Start()", span="51-51"];
m0_15 [cluster="ConsoleSample.ErrorJob.Perform()", file="ExpirationManager.cs", label="Console.WriteLine(''Beginning error task...'')", span="40-40"];
m0_16 [cluster="ConsoleSample.ErrorJob.Perform()", file="ExpirationManager.cs", label="throw new InvalidOperationException(null, new FileLoadException());", span="41-41"];
m0_60 [cluster="ConsoleLogFactory.cstr", file="ExpirationManager.cs", label="Entry ConsoleLogFactory.cstr", span=""];
m0_70 [cluster="string.Substring(int)", file="ExpirationManager.cs", label="Hangfire.SqlServer.ExpirationManager", span=""];
m0_75 [file="ExpirationManager.cs", label="ConsoleSample.ConsoleJob", span=""];
m1_47 [cluster="Hangfire.Dashboard.UrlHelper.Home()", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.UrlHelper.Home()", span="53-53"];
m1_50 [cluster="Hangfire.Dashboard.RazorPage.RenderBody()", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.RazorPage.RenderBody()", span="121-121"];
m1_51 [cluster="Hangfire.Dashboard.HtmlHelper.LocalTime(System.DateTime)", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.HtmlHelper.LocalTime(System.DateTime)", span="156-156"];
m1_53 [cluster="string.Format(string, object)", file="LayoutPage.generated.cs", label="Entry string.Format(string, object)", span="0-0"];
m1_41 [cluster="Hangfire.Dashboard.RazorPage.WriteLiteral(string)", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.RazorPage.WriteLiteral(string)", span="105-105"];
m1_48 [cluster="Hangfire.Dashboard.Pages.Navigation.Navigation()", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.Pages.Navigation.Navigation()", span="25-25"];
m1_0 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.Pages.LayoutPage.Execute()", span="58-58"];
m1_24 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", color=green, community=0, file="LayoutPage.generated.cs", label="Write($''{version.Major}.{version.Minor}.{version.Build}'')", prediction=3, span="218-218"];
m1_7 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="var version = GetType().GetTypeInfo().Assembly.GetName().Version", span="98-98"];
m1_23 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", color=green, community=0, file="LayoutPage.generated.cs", label="WriteLiteral(@''\r\n            </div>\r\n        </div>\r\n\r\n        <div id=''''footer''''>\r\n            <div class=''''container''''>\r\n                <ul class=''''list-inline credit''''>\r\n                    <li>\r\n                        <a href=''''http://hangfire.io/'''' target=''''_blank''''>Hangfire '')", prediction=3, span="205-213"];
m1_25 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\r\n                        </a>\r\n                    </li>\r\n                    <l'' +\r\n''i>'')", span="223-224"];
m1_22 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(RenderBody())", span="200-200"];
m1_1 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\r\n'')", span="62-62"];
m1_2 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''<!DOCTYPE html>\r\n<html lang=\'''')", span="71-71"];
m1_3 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(CultureInfo.CurrentUICulture.TwoLetterISOLanguageName)", span="76-76"];
m1_4 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\''>\r\n<head>\r\n    <title>'')", span="81-81"];
m1_5 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Title)", span="86-86"];
m1_6 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral('' - Hangfire</title>\r\n    <meta http-equiv=\''X-UA-Compatible\'' content=\''IE=edge\''>\r\n '' +\r\n''   <meta charset=\''utf-8\''>\r\n    <meta name=\''viewport\'' content=\''width=device-width'' +\r\n'', initial-scale=1.0\''>\r\n'')", span="91-93"];
m1_8 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''    <link rel=\''stylesheet\'' href=\'''')", span="103-103"];
m1_9 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Url.To($''/css{version.Major}{version.Minor}{version.Build}''))", span="108-108"];
m1_10 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(@''''''>\r\n</head>\r\n    <body>\r\n        <!-- Wrap all page content here -->\r\n        <div id=''''wrap''''>\r\n\r\n            <!-- Fixed navbar -->\r\n            <div class=''''navbar navbar-default navbar-fixed-top''''>\r\n                <div class=''''container''''>\r\n                    <div class=''''navbar-header''''>\r\n                        <button type=''''button'''' class=''''navbar-toggle'''' data-toggle=''''collapse'''' data-target=''''.navbar-collapse''''>\r\n                            <span class=''''icon-bar''''></span>\r\n                            <span class=''''icon-bar''''></span>\r\n                            <span class=''''icon-bar''''></span>\r\n                        </button>\r\n                        <a class=''''navbar-brand'''' href='''''')", span="113-128"];
m1_11 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Url.Home())", span="133-133"];
m1_12 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\''>Hangfire Dashboard</a>\r\n                    </div>\r\n                    <div cl'' +\r\n''ass=\''collapse navbar-collapse\''>\r\n                        '')", span="138-139"];
m1_13 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Html.RenderPartial(new Navigation()))", span="144-144"];
m1_14 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\r\n'')", span="149-149"];
m1_15 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="@AppPath != null", span="154-154"];
m1_16 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''                            <ul class=\''nav navbar-nav navbar-right\''>\r\n           '' +\r\n''                     <li>\r\n                                    <a href=\'''')", span="159-160"];
m1_17 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(AppPath)", span="165-165"];
m1_18 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\''>\r\n                                        <span class=\''glyphicon glyphicon-log-'' +\r\n''out\''></span>\r\n                                        '')", span="170-171"];
m1_19 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Strings.LayoutPage_Back)", span="176-176"];
m1_20 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\r\n                                    </a>\r\n                                </li>'' +\r\n''\r\n                            </ul>\r\n'')", span="181-182"];
m1_21 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''                    </div>\r\n                    <!--/.nav-collapse -->\r\n         '' +\r\n''       </div>\r\n            </div>\r\n\r\n            <!-- Begin page content -->\r\n  '' +\r\n''          <div class=\''container\'' style=\''margin-bottom: 20px;\''>\r\n                '' +\r\n'''')", span="192-195"];
m1_26 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Storage)", span="229-229"];
m1_27 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''</li>\r\n                    <li>'')", span="234-234"];
m1_28 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Strings.LayoutPage_Footer_Time)", span="239-239"];
m1_29 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral('' '')", span="244-244"];
m1_30 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Html.LocalTime(DateTime.UtcNow))", span="249-249"];
m1_31 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''</li>\r\n                    <li>'')", span="254-254"];
m1_32 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(String.Format(Strings.LayoutPage_Footer_Generatedms, GenerationTime.Elapsed.TotalMilliseconds.ToString(''N'')))", span="259-259"];
m1_33 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        \r\n     '' +\r\n''   <div id=\''hangfireConfig\''\r\n             data-pollinterval=\'''')", span="264-265"];
m1_34 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(StatsPollingInterval)", span="270-270"];
m1_35 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\''\r\n             data-pollurl=\'''')", span="275-275"];
m1_36 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Url.To(''/stats''))", span="280-280"];
m1_37 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\''>\r\n        </div>\r\n\r\n        <script src=\'''')", span="285-285"];
m1_38 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Write(Url.To($''/js{version.Major}{version.Minor}{version.Build}''))", span="290-290"];
m1_39 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="WriteLiteral(''\''></script>\r\n    </body>\r\n</html>\r\n'')", span="295-295"];
m1_40 [cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs", label="Exit Hangfire.Dashboard.Pages.LayoutPage.Execute()", span="58-58"];
m1_45 [cluster="System.Reflection.Assembly.GetName()", file="LayoutPage.generated.cs", label="Entry System.Reflection.Assembly.GetName()", span="0-0"];
m1_43 [cluster="object.GetType()", file="LayoutPage.generated.cs", label="Entry object.GetType()", span="0-0"];
m1_49 [cluster="Hangfire.Dashboard.HtmlHelper.RenderPartial(Hangfire.Dashboard.RazorPage)", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.HtmlHelper.RenderPartial(Hangfire.Dashboard.RazorPage)", span="82-82"];
m1_44 [cluster="System.Type.GetTypeInfo()", file="LayoutPage.generated.cs", label="Entry System.Type.GetTypeInfo()", span="0-0"];
m1_42 [cluster="Hangfire.Dashboard.RazorPage.Write(object)", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.RazorPage.Write(object)", span="113-113"];
m1_52 [cluster="double.ToString(string)", file="LayoutPage.generated.cs", label="Entry double.ToString(string)", span="0-0"];
m1_46 [cluster="Hangfire.Dashboard.UrlHelper.To(string)", file="LayoutPage.generated.cs", label="Entry Hangfire.Dashboard.UrlHelper.To(string)", span="43-43"];
m1_54 [file="LayoutPage.generated.cs", label="Hangfire.Dashboard.Pages.LayoutPage", span=""];
m2_7 [cluster="Hangfire.SqlServer.SqlCommandSet.SqlCommandSet()", file="SqlCommandBatch.cs", label="Entry Hangfire.SqlServer.SqlCommandSet.SqlCommandSet()", span="68-68"];
m2_43 [cluster="Hangfire.SqlServer.SqlCommandSet.ExecuteNonQuery()", file="SqlCommandBatch.cs", label="Entry Hangfire.SqlServer.SqlCommandSet.ExecuteNonQuery()", span="97-97"];
m2_23 [cluster="System.Collections.Generic.List<T>.Add(T)", file="SqlCommandBatch.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m2_24 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", file="SqlCommandBatch.cs", label="Entry Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", span="75-75"];
m2_25 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="_commandSet != null && _commandSet.CommandCount > 0", prediction=5, span="77-77"];
m2_26 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="_commandSet.Connection = Connection as SqlConnection", prediction=6, span="79-79"];
m2_35 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label=_commandList, prediction=5, span="98-98"];
m2_27 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="_commandSet.Transaction = Transaction as SqlTransaction", prediction=8, span="80-80"];
m2_34 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="_commandSet.ExecuteNonQuery()", prediction=5, span="95-95"];
m2_40 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="command.ExecuteNonQuery()", prediction=10, span="108-108"];
m2_36 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="command.Connection = Connection", prediction=11, span="100-100"];
m2_28 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="var batchTimeout = CommandTimeout ?? _defaultTimeout", prediction=12, span="82-82"];
m2_29 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="batchTimeout > 0", prediction=13, span="84-84"];
m2_30 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="batchTimeout = batchTimeout * _commandSet.CommandCount", prediction=14, span="86-86"];
m2_33 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="_commandSet.BatchCommand.CommandTimeout = batchTimeout", prediction=15, span="94-94"];
m2_31 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="CommandBatchMaxTimeout.HasValue", prediction=5, span="88-88"];
m2_32 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="batchTimeout = Math.Min(CommandBatchMaxTimeout.Value, batchTimeout)", prediction=17, span="90-90"];
m2_37 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="command.Transaction = Transaction", prediction=10, span="101-101"];
m2_38 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="CommandTimeout.HasValue", prediction=5, span="103-103"];
m2_39 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs", label="command.CommandTimeout = CommandTimeout.Value", prediction=20, span="105-105"];
m2_41 [cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", file="SqlCommandBatch.cs", label="Exit Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", span="75-75"];
m2_17 [cluster="Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", file="SqlCommandBatch.cs", label="Entry Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", span="63-63"];
m2_18 [cluster="Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", color=green, community=0, file="SqlCommandBatch.cs", label="_commandSet != null && command is SqlCommand", prediction=5, span="65-65"];
m2_19 [cluster="Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", color=green, community=0, file="SqlCommandBatch.cs", label="_commandSet.Append((SqlCommand)command)", prediction=5, span="67-67"];
m2_20 [cluster="Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", color=green, community=0, file="SqlCommandBatch.cs", label="_commandList.Add(command)", prediction=5, span="71-71"];
m2_21 [cluster="Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", file="SqlCommandBatch.cs", label="Exit Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", span="63-63"];
m2_42 [cluster="System.Math.Min(int, int)", file="SqlCommandBatch.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m2_22 [cluster="Hangfire.SqlServer.SqlCommandSet.Append(SqlCommand)", file="SqlCommandBatch.cs", label="Entry Hangfire.SqlServer.SqlCommandSet.Append(SqlCommand)", span="91-91"];
m2_14 [cluster="SqlCommand.cstr", file="SqlCommandBatch.cs", label="Entry SqlCommand.cstr", span=""];
m2_44 [cluster="Unk.ExecuteNonQuery", file="SqlCommandBatch.cs", label="Entry Unk.ExecuteNonQuery", span=""];
m2_0 [cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", file="SqlCommandBatch.cs", label="Entry Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", span="29-29"];
m2_1 [cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", color=green, community=0, file="SqlCommandBatch.cs", label="SqlCommandSet.IsAvailable && preferBatching", prediction=24, span="31-31"];
m2_2 [cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", color=green, community=0, file="SqlCommandBatch.cs", label="_commandSet = new SqlCommandSet()", prediction=25, span="35-35"];
m2_3 [cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", color=green, community=0, file="SqlCommandBatch.cs", label="_defaultTimeout = _commandSet.BatchCommand.CommandTimeout", prediction=26, span="36-36"];
m2_4 [cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", color=green, community=0, file="SqlCommandBatch.cs", label=Exception, prediction=27, span="38-38"];
m2_5 [cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", color=green, community=0, file="SqlCommandBatch.cs", label="_commandSet = null", prediction=28, span="40-40"];
m2_6 [cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", file="SqlCommandBatch.cs", label="Exit Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", span="29-29"];
m2_8 [cluster="Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", file="SqlCommandBatch.cs", label="Entry Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", span="51-51"];
m2_9 [cluster="Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", color=green, community=0, file="SqlCommandBatch.cs", label="var command = new SqlCommand(commandText)", prediction=5, span="53-53"];
m2_10 [cluster="Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", color=green, community=0, file="SqlCommandBatch.cs", label=parameters, prediction=30, span="55-55"];
m2_11 [cluster="Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", color=green, community=0, file="SqlCommandBatch.cs", label="command.Parameters.Add(parameter)", prediction=5, span="57-57"];
m2_12 [cluster="Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", color=green, community=0, file="SqlCommandBatch.cs", label="Append(command)", prediction=5, span="60-60"];
m2_13 [cluster="Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", file="SqlCommandBatch.cs", label="Exit Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", span="51-51"];
m2_16 [cluster="Unk.Append", file="SqlCommandBatch.cs", label="Entry Unk.Append", span=""];
m2_15 [cluster="Unk.Add", file="SqlCommandBatch.cs", label="Entry Unk.Add", span=""];
m2_45 [file="SqlCommandBatch.cs", label="Hangfire.SqlServer.SqlCommandBatch", span=""];
m3_6 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlCommandSet.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m3_8 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlCommandSet.cs", label="Entry HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="54-54"];
m3_9 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", color=green, community=0, file="SqlCommandSet.cs", label="transaction.IncrementCounter(''stats:succeeded'')", prediction=33, span="56-56"];
m3_10 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlCommandSet.cs", label="Exit HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="54-54"];
m3_11 [cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="SqlCommandSet.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="33-33"];
m3_3 [cluster="HangFire.States.SucceededState.SerializeData()", file="SqlCommandSet.cs", label="Entry HangFire.States.SucceededState.SerializeData()", span="44-44"];
m3_4 [cluster="HangFire.States.SucceededState.SerializeData()", color=green, community=0, file="SqlCommandSet.cs", label="return new Dictionary<string, string>\r\n            {\r\n                { ''SucceededAt'',  JobHelper.ToStringTimestamp(SucceededAt)}\r\n            };", prediction=34, span="46-49"];
m3_5 [cluster="HangFire.States.SucceededState.SerializeData()", file="SqlCommandSet.cs", label="Exit HangFire.States.SucceededState.SerializeData()", span="44-44"];
m3_15 [cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="SqlCommandSet.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="35-35"];
m3_0 [cluster="HangFire.States.SucceededState.SucceededState()", file="SqlCommandSet.cs", label="Entry HangFire.States.SucceededState.SucceededState()", span="27-27"];
m3_1 [cluster="HangFire.States.SucceededState.SucceededState()", color=green, community=0, file="SqlCommandSet.cs", label="SucceededAt = DateTime.UtcNow", prediction=35, span="29-29"];
m3_2 [cluster="HangFire.States.SucceededState.SucceededState()", file="SqlCommandSet.cs", label="Exit HangFire.States.SucceededState.SucceededState()", span="27-27"];
m3_7 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="SqlCommandSet.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m3_12 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlCommandSet.cs", label="Entry HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="59-59"];
m3_13 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", color=green, community=0, file="SqlCommandSet.cs", label="transaction.DecrementCounter(''stats:succeeded'')", prediction=36, span="61-61"];
m3_14 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlCommandSet.cs", label="Exit HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="59-59"];
m3_16 [file="SqlCommandSet.cs", label="HangFire.States.SucceededState", span=""];
m4_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerConnection.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_26 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m4_28 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerConnection.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m4_44 [cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerConnection.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="43-43"];
m4_6 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="Entry HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", span="40-40"];
m4_7 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="recurringJobId == null", span="45-45"];
m4_9 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="job == null", span="46-46"];
m4_11 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="cronExpression == null", span="47-47"];
m4_13 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="CrontabSchedule.Parse(cronExpression)", span="49-49"];
m4_16 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="var invocationData = InvocationData.Serialize(job)", span="54-54"];
m4_18 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="recurringJob[''Cron''] = cronExpression", span="57-57"];
m4_20 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="transaction.SetRangeInHash(\r\n                        String.Format(''recurring-job:{0}'', recurringJobId), \r\n                        recurringJob)", span="61-63"];
m4_21 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="transaction.AddToSet(''recurring-jobs'', recurringJobId)", span="65-65"];
m4_8 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''recurringJobId'');", span="45-45"];
m4_10 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''job'');", span="46-46"];
m4_12 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''cronExpression'');", span="47-47"];
m4_14 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="var connection = _storage.GetConnection()", span="51-51"];
m4_15 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="var recurringJob = new Dictionary<string, string>()", span="53-53"];
m4_19 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="var transaction = connection.CreateWriteTransaction()", span="59-59"];
m4_17 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="recurringJob[''Job''] = JobHelper.ToJson(invocationData)", span="56-56"];
m4_22 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="transaction.Commit()", span="67-67"];
m4_23 [cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs", label="Exit HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", span="40-40"];
m4_29 [cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="SqlServerConnection.cs", label="Entry HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27"];
m4_33 [cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="SqlServerConnection.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.Commit()", span="54-54"];
m4_43 [cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveHash(string)", file="SqlServerConnection.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveHash(string)", span="52-52"];
m4_0 [cluster="HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", file="SqlServerConnection.cs", label="Entry HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", span="33-33"];
m4_1 [cluster="HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", file="SqlServerConnection.cs", label="storage == null", span="35-35"];
m4_3 [cluster="HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", file="SqlServerConnection.cs", label="_storage = storage", span="37-37"];
m4_2 [cluster="HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''storage'');", span="35-35"];
m4_4 [cluster="HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", file="SqlServerConnection.cs", label="Exit HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", span="33-33"];
m4_31 [cluster="HangFire.Storage.IWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="51-51"];
m4_32 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerConnection.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", span="41-41"];
m4_30 [cluster="string.Format(string, object)", file="SqlServerConnection.cs", label="Entry string.Format(string, object)", span="0-0"];
m4_24 [cluster="Unk.Parse", file="SqlServerConnection.cs", label="Entry Unk.Parse", span=""];
m4_27 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="SqlServerConnection.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m4_34 [cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs", label="Entry HangFire.RecurringJobManager.RemoveIfExists(string)", span="72-72"];
m4_35 [cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs", label="recurringJobId == null", span="74-74"];
m4_39 [cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs", label="transaction.RemoveHash(String.Format(''recurring-job:{0}'', recurringJobId))", span="79-79"];
m4_40 [cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs", label="transaction.RemoveFromSet(''recurring-jobs'', recurringJobId)", span="80-80"];
m4_36 [cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''recurringJobId'');", span="74-74"];
m4_37 [cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs", label="var connection = _storage.GetConnection()", span="76-76"];
m4_38 [cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs", label="var transaction = connection.CreateWriteTransaction()", span="77-77"];
m4_41 [cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs", label="transaction.Commit()", span="82-82"];
m4_42 [cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs", label="Exit HangFire.RecurringJobManager.RemoveIfExists(string)", span="72-72"];
m4_45 [file="SqlServerConnection.cs", label="HangFire.RecurringJobManager", span=""];
m5_0 [cluster="HangFire.Filters.PerformingContext.PerformingContext(HangFire.Filters.PerformContext)", file="SqlServerDistributedLock.cs", label="Entry HangFire.Filters.PerformingContext.PerformingContext(HangFire.Filters.PerformContext)", span="4-4"];
m5_1 [cluster="HangFire.Filters.PerformingContext.PerformingContext(HangFire.Filters.PerformContext)", file="SqlServerDistributedLock.cs", label="Exit HangFire.Filters.PerformingContext.PerformingContext(HangFire.Filters.PerformContext)", span="4-4"];
m6_110 [cluster="Unk.OnClientException", file="SqlServerJobQueue.cs", label="Entry Unk.OnClientException", span=""];
m6_31 [cluster="Unk.GetFilters", file="SqlServerJobQueue.cs", label="Entry Unk.GetFilters", span=""];
m6_17 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(job.InvocationData)", span="69-69"];
m6_15 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="return null;", span="64-64"];
m6_0 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", span="21-21"];
m6_1 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs", label="var storage = new Mock<JobStorage>()", span="23-23"];
m6_2 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs", label="var connection = new Mock<IStorageConnection>()", span="24-24"];
m6_3 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs", label="var job = Job.FromExpression(() => TestMethod())", span="25-25"];
m6_27 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="35-35"];
m6_26 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="SqlServerJobQueue.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m6_363 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.TestMethod()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.TestMethod()", span="381-381"];
m6_75 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", span="84-84"];
m6_76 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="86-86"];
m6_77 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerJobQueue.cs", label="var result = process.Run(_context.Object)", span="88-88"];
m6_78 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerJobQueue.cs", label="Assert.Equal(JobId, result)", span="90-90"];
m6_79 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", span="84-84"];
m6_311 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", span="334-334"];
m6_313 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="_filters.Add(filter.Object)", span="338-338"];
m6_315 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws(exception)", span="341-342"];
m6_317 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="347-347"];
m6_318 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="var jobId = process.Run(_context.Object)", span="350-350"];
m6_312 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="var filter = new Mock<IClientFilter>()", span="337-337"];
m6_314 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="var exception = new InvalidOperationException()", span="340-340"];
m6_316 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="filter.Setup(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception)))\r\n                .Callback((CreatedContext x) => x.ExceptionHandled = true)", span="344-345"];
m6_319 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="Assert.Null(jobId)", span="353-353"];
m6_320 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", span="334-334"];
m6_222 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="243-243"];
m6_225 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs", label="_filters.Add(outerFilter.Object)", span="249-249"];
m6_226 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs", label="_filters.Add(innerFilter.Object)", span="250-250"];
m6_228 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="255-255"];
m6_229 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs", label="process.Run(_context.Object)", span="258-258"];
m6_223 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs", label="var outerFilter = new Mock<IClientFilter>()", span="246-246"];
m6_224 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs", label="var innerFilter = new Mock<IClientFilter>()", span="247-247"];
m6_227 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs", label="innerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Callback((CreatingContext context) => context.Canceled = true)", span="252-253"];
m6_230 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Canceled)))", span="261-261"];
m6_231 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="243-243"];
m6_28 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.GetFilters(It.IsNotNull<Job>())", span="35-35"];
m6_16 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="job == null", span="67-67"];
m6_333 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="357-357"];
m6_336 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs", label="_filters.Add(outerFilter.Object)", span="363-363"];
m6_337 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs", label="_filters.Add(innerFilter.Object)", span="364-364"];
m6_338 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs", label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="366-367"];
m6_340 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="372-372"];
m6_341 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs", label="Assert.DoesNotThrow(() => process.Run(_context.Object))", span="375-375"];
m6_334 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs", label="var outerFilter = new Mock<IClientFilter>()", span="360-360"];
m6_335 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs", label="var innerFilter = new Mock<IClientFilter>()", span="361-361"];
m6_339 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs", label="innerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>()))\r\n                .Callback((CreatedContext x) => x.ExceptionHandled = true)", span="369-370"];
m6_342 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception != null)))", span="378-378"];
m6_343 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="357-357"];
m6_13 [cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="job == null", span="60-60"];
m6_22 [cluster="DynamicParameters.cstr", file="SqlServerJobQueue.cs", label="Entry DynamicParameters.cstr", span=""];
m6_344 [cluster="Unk.DoesNotThrow", file="SqlServerJobQueue.cs", label="Entry Unk.DoesNotThrow", span=""];
m6_39 [cluster="Unk.Run", file="SqlServerJobQueue.cs", label="Entry Unk.Run", span=""];
m6_49 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenInnerProcessIsNull()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenInnerProcessIsNull()", span="52-52"];
m6_50 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenInnerProcessIsNull()", file="SqlServerJobQueue.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new JobCreationProcess(_filterProvider.Object, null))", span="54-55"];
m6_51 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenInnerProcessIsNull()", file="SqlServerJobQueue.cs", label="Assert.Equal(''innerProcess'', exception.ParamName)", span="57-57"];
m6_52 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenInnerProcessIsNull()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenInnerProcessIsNull()", span="52-52"];
m6_274 [cluster="System.InvalidOperationException.InvalidOperationException()", file="SqlServerJobQueue.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m6_30 [cluster="Unk.>", file="SqlServerJobQueue.cs", label="HangFire.SqlServer.SqlServerFetcher", span=""];
m6_24 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="TestMethod()", span="25-25"];
m6_99 [cluster="Mock<IClientExceptionFilter>.cstr", file="SqlServerJobQueue.cs", label="Entry Mock<IClientExceptionFilter>.cstr", span=""];
m6_40 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenFilterProviderIsNull()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenFilterProviderIsNull()", span="43-43"];
m6_41 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenFilterProviderIsNull()", file="SqlServerJobQueue.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new JobCreationProcess(null, _innerProcess.Object))", span="45-46"];
m6_42 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenFilterProviderIsNull()", file="SqlServerJobQueue.cs", label="Assert.Equal(''filterProvider'', exception.ParamName)", span="48-48"];
m6_43 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenFilterProviderIsNull()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenFilterProviderIsNull()", span="43-43"];
m6_29 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="35-35"];
m6_61 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", span="385-385"];
m6_364 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", file="SqlServerJobQueue.cs", label="return new JobCreationProcess(_filterProvider.Object, _innerProcess.Object);", span="387-387"];
m6_365 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", span="385-385"];
m6_25 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="25-25"];
m6_176 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="195-195"];
m6_179 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs", label="_filters.Add(outerFilter.Object)", span="201-201"];
m6_180 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs", label="_filters.Add(innerFilter.Object)", span="202-202"];
m6_185 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="209-209"];
m6_186 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs", label="process.Run(_context.Object)", span="212-212"];
m6_177 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs", label="var outerFilter = new Mock<IClientFilter>()", span="198-198"];
m6_178 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs", label="var innerFilter = new Mock<IClientFilter>()", span="199-199"];
m6_181 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs", label="outerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>())).InSequence()", span="204-204"];
m6_184 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs", label="outerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>())).InSequence()", span="207-207"];
m6_182 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs", label="innerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>())).InSequence()", span="205-205"];
m6_183 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs", label="innerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>())).InSequence()", span="206-206"];
m6_187 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="195-195"];
m6_20 [cluster="Unk.Select", file="SqlServerJobQueue.cs", label="Entry Unk.Select", span=""];
m6_175 [cluster="Unk.OnCreated", file="SqlServerJobQueue.cs", label="Entry Unk.OnCreated", span=""];
m6_91 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", span="105-105"];
m6_93 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs", label="_filters.Add(filter.Object)", span="109-109"];
m6_94 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs", label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="111-112"];
m6_95 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="114-114"];
m6_96 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="117-118"];
m6_92 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs", label="var filter = new Mock<IClientExceptionFilter>()", span="108-108"];
m6_97 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs", label="filter.Verify(x => x.OnClientException(\r\n                It.IsNotNull<ClientExceptionContext>()))", span="121-122"];
m6_98 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", span="105-105"];
m6_4 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs", label="var state = new Mock<IState>()", span="26-26"];
m6_5 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs", label="_context = new Mock<CreateContext>(storage.Object, connection.Object, job, state.Object)\r\n            {\r\n                CallBase = true\r\n            }", span="28-31"];
m6_14 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerJobQueue.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="187-187"];
m6_6 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs", label="_filters = new List<object>()", span="33-33"];
m6_18 [cluster="Mock<IJobFilterProvider>.cstr", file="SqlServerJobQueue.cs", label="Entry Mock<IJobFilterProvider>.cstr", span=""];
m6_7 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs", label="_filterProvider = new Mock<IJobFilterProvider>()", span="34-34"];
m6_8 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs", label="_filterProvider.Setup(x => x.GetFilters(It.IsNotNull<Job>())).Returns(\r\n                _filters.Select(f => new JobFilter(f, JobFilterScope.Type, null)))", span="35-36"];
m6_10 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs", label="_innerProcess.Setup(x => x.Run((_context.Object))).Returns(JobId)", span="39-39"];
m6_12 [cluster="Mock<JobStorage>.cstr", file="SqlServerJobQueue.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m6_9 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs", label="_innerProcess = new Mock<IJobCreationProcess>()", span="38-38"];
m6_11 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", span="21-21"];
m6_19 [cluster="Unk.Setup", file="SqlServerJobQueue.cs", label="Entry Unk.Setup", span=""];
m6_265 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", span="289-289"];
m6_267 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="_filters.Add(filter.Object)", span="293-293"];
m6_269 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws(exception)", span="296-297"];
m6_270 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="299-299"];
m6_271 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="302-303"];
m6_266 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="var filter = new Mock<IClientFilter>()", span="292-292"];
m6_268 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="var exception = new InvalidOperationException()", span="295-295"];
m6_272 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="filter.Verify(x => x.OnCreated(It.Is<CreatedContext>(\r\n                context => context.Exception == exception)))", span="306-307"];
m6_273 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", span="289-289"];
m6_288 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="311-311"];
m6_291 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs", label="_filters.Add(outerFilter.Object)", span="317-317"];
m6_292 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs", label="_filters.Add(innerFilter.Object)", span="318-318"];
m6_294 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs", label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws(exception)", span="321-322"];
m6_295 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="324-324"];
m6_296 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="327-328"];
m6_289 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs", label="var outerFilter = new Mock<IClientFilter>()", span="314-314"];
m6_290 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs", label="var innerFilter = new Mock<IClientFilter>()", span="315-315"];
m6_293 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs", label="var exception = new InvalidOperationException()", span="320-320"];
m6_297 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception)))", span="330-330"];
m6_298 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="311-311"];
m6_100 [cluster="Unk.Add", file="SqlServerJobQueue.cs", label="Entry Unk.Add", span=""];
m6_23 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="25-25"];
m6_244 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", span="265-265"];
m6_246 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs", label="_filters.Add(filter.Object)", span="269-269"];
m6_248 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="274-274"];
m6_249 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="277-278"];
m6_250 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs", label="_innerProcess.Verify(\r\n                x => x.Run(It.IsAny<CreateContext>()), \r\n                Times.Never)", span="281-283"];
m6_247 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs", label="filter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Throws<InvalidOperationException>()", span="271-272"];
m6_245 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs", label="var filter = new Mock<IClientFilter>()", span="268-268"];
m6_251 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs", label="filter.Verify(x => x.OnCreated(It.IsAny<CreatedContext>()), Times.Never)", span="285-285"];
m6_252 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", span="265-265"];
m6_122 [cluster="Unk.InSequence", file="SqlServerJobQueue.cs", label="Entry Unk.InSequence", span=""];
m6_48 [cluster="JobCreationProcess.cstr", file="SqlServerJobQueue.cs", label="Entry JobCreationProcess.cstr", span=""];
m6_65 [cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="SqlServerJobQueue.cs", label="Entry Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", span="51-51"];
m6_275 [cluster="Unk.Throws", file="SqlServerJobQueue.cs", label="Entry Unk.Throws", span=""];
m6_145 [cluster="Unk.Null", file="SqlServerJobQueue.cs", label="Entry Unk.Null", span=""];
m6_111 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="126-126"];
m6_116 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs", label="_filters.Add(filter1.Object)", span="135-135"];
m6_117 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs", label="_filters.Add(filter2.Object)", span="136-136"];
m6_118 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs", label="_innerProcess\r\n                .Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="138-140"];
m6_119 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="142-142"];
m6_120 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="145-146"];
m6_112 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs", label="var filter1 = new Mock<IClientExceptionFilter>()", span="129-129"];
m6_115 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs", label="filter1.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>())).InSequence()", span="133-133"];
m6_113 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs", label="var filter2 = new Mock<IClientExceptionFilter>()", span="130-130"];
m6_114 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs", label="filter2.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>())).InSequence()", span="132-132"];
m6_121 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="126-126"];
m6_351 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="370-370"];
m6_88 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="101-101"];
m6_89 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueue.cs", label="process.Run(_context.Object)", prediction=37, span="101-101"];
m6_90 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="101-101"];
m6_37 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Run((_context.Object))", span="39-39"];
m6_46 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="new JobCreationProcess(null, _innerProcess.Object)", span="46-46"];
m6_54 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="new JobCreationProcess(_filterProvider.Object, null)", span="55-55"];
m6_73 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Run(_context.Object)", span="79-79"];
m6_105 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="process.Run(_context.Object)", span="118-118"];
m6_133 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="process.Run(_context.Object)", span="146-146"];
m6_257 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="process.Run(_context.Object)", span="278-278"];
m6_280 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="process.Run(_context.Object)", span="303-303"];
m6_303 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="process.Run(_context.Object)", span="328-328"];
m6_355 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="process.Run(_context.Object)", span="375-375"];
m6_86 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Run(It.IsAny<CreateContext>())", span="96-96"];
m6_102 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Run(It.IsAny<CreateContext>())", span="111-111"];
m6_108 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnClientException(\r\n                It.IsNotNull<ClientExceptionContext>())", span="121-122"];
m6_124 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="132-132"];
m6_127 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="133-133"];
m6_130 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Run(It.IsAny<CreateContext>())", span="139-139"];
m6_147 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Run(It.IsAny<CreateContext>())", span="155-155"];
m6_150 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="159-159"];
m6_166 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreating(It.IsNotNull<CreatingContext>())", span="179-179"];
m6_170 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Run(It.IsAny<CreateContext>())", span="181-181"];
m6_173 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreated(It.IsNotNull<CreatedContext>())", span="184-184"];
m6_189 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="204-204"];
m6_192 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="205-205"];
m6_195 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="206-206"];
m6_198 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="207-207"];
m6_211 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="224-224"];
m6_217 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Run(It.IsAny<CreateContext>())", span="236-236"];
m6_220 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="239-239"];
m6_233 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="252-252"];
m6_239 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Canceled))", span="261-261"];
m6_254 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="271-271"];
m6_260 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Run(It.IsAny<CreateContext>())", span="282-282"];
m6_263 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="285-285"];
m6_283 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreated(It.Is<CreatedContext>(\r\n                context => context.Exception == exception))", span="306-307"];
m6_277 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Run(It.IsAny<CreateContext>())", span="296-296"];
m6_306 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception))", span="330-330"];
m6_300 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Run(It.IsAny<CreateContext>())", span="321-321"];
m6_325 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception))", span="344-344"];
m6_322 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Run(It.IsAny<CreateContext>())", span="341-341"];
m6_346 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Run(It.IsAny<CreateContext>())", span="366-366"];
m6_349 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="369-369"];
m6_358 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception != null))", span="378-378"];
m6_32 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="36-36"];
m6_36 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="39-39"];
m6_38 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="39-39"];
m6_45 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="46-46"];
m6_47 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="46-46"];
m6_53 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="55-55"];
m6_55 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="55-55"];
m6_63 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="process.Run(null)", span="66-66"];
m6_72 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="79-79"];
m6_74 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="79-79"];
m6_85 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="96-96"];
m6_101 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="111-111"];
m6_104 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="118-118"];
m6_106 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="118-118"];
m6_129 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="139-139"];
m6_132 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="146-146"];
m6_134 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="146-146"];
m6_146 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="155-155"];
m6_169 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="181-181"];
m6_216 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="236-236"];
m6_256 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="278-278"];
m6_258 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="278-278"];
m6_259 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="282-282"];
m6_276 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="296-296"];
m6_279 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="303-303"];
m6_281 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="303-303"];
m6_299 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="321-321"];
m6_302 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="328-328"];
m6_304 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="328-328"];
m6_321 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="341-341"];
m6_345 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="366-366"];
m6_354 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="375-375"];
m6_356 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="375-375"];
m6_62 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="66-66"];
m6_87 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="96-96"];
m6_103 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="111-111"];
m6_107 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="121-122"];
m6_109 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="121-122"];
m6_123 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="132-132"];
m6_125 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="132-132"];
m6_126 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="133-133"];
m6_128 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="133-133"];
m6_131 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="139-139"];
m6_148 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="155-155"];
m6_149 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="159-159"];
m6_151 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="159-159"];
m6_165 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="179-179"];
m6_167 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="179-179"];
m6_171 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="181-181"];
m6_172 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="184-184"];
m6_174 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="184-184"];
m6_188 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="204-204"];
m6_190 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="204-204"];
m6_191 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="205-205"];
m6_193 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="205-205"];
m6_194 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="206-206"];
m6_196 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="206-206"];
m6_197 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="207-207"];
m6_199 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="207-207"];
m6_210 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="224-224"];
m6_212 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="224-224"];
m6_218 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="236-236"];
m6_219 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="239-239"];
m6_221 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="239-239"];
m6_232 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="252-252"];
m6_234 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="252-252"];
m6_238 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="261-261"];
m6_240 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="261-261"];
m6_241 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="261-261"];
m6_253 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="271-271"];
m6_255 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="271-271"];
m6_261 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="282-282"];
m6_262 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="285-285"];
m6_264 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="285-285"];
m6_282 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="306-307"];
m6_284 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="306-307"];
m6_285 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="307-307"];
m6_278 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="296-296"];
m6_305 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="330-330"];
m6_307 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="330-330"];
m6_308 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="330-330"];
m6_301 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="321-321"];
m6_324 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="344-344"];
m6_326 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="344-344"];
m6_327 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="344-344"];
m6_323 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="341-341"];
m6_347 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="366-366"];
m6_348 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="369-369"];
m6_350 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="369-369"];
m6_357 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="378-378"];
m6_359 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="378-378"];
m6_360 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="378-378"];
m6_34 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="36-36"];
m6_33 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="new JobFilter(f, JobFilterScope.Type, null)", span="36-36"];
m6_64 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="66-66"];
m6_152 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="160-160"];
m6_213 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="225-225"];
m6_235 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="253-253"];
m6_286 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="context.Exception == exception", span="307-307"];
m6_309 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="context.Exception == exception", span="330-330"];
m6_328 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="context.Exception == exception", span="344-344"];
m6_330 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="345-345"];
m6_243 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="261-261"];
m6_242 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="context.Canceled", span="261-261"];
m6_287 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="307-307"];
m6_310 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="330-330"];
m6_329 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="344-344"];
m6_362 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="378-378"];
m6_361 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="context.Exception != null", span="378-378"];
m6_154 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="160-160"];
m6_153 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.ExceptionHandled = true", span="160-160"];
m6_215 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="225-225"];
m6_214 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Canceled = true", span="225-225"];
m6_237 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="253-253"];
m6_236 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="context.Canceled = true", span="253-253"];
m6_332 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="345-345"];
m6_331 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.ExceptionHandled = true", span="345-345"];
m6_352 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.ExceptionHandled = true", span="370-370"];
m6_353 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="370-370"];
m6_135 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", span="152-152"];
m6_136 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="155-156"];
m6_139 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="_filters.Add(filter.Object)", span="162-162"];
m6_140 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="164-164"];
m6_141 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="var jobId = process.Run(_context.Object)", span="167-167"];
m6_137 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="var filter = new Mock<IClientExceptionFilter>()", span="158-158"];
m6_138 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="filter.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>()))\r\n                .Callback((ClientExceptionContext x) => x.ExceptionHandled = true)", span="159-160"];
m6_142 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="Assert.Null(jobId)", span="169-169"];
m6_143 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", span="152-152"];
m6_71 [cluster="Unk.Verify", file="SqlServerJobQueue.cs", label="Entry Unk.Verify", span=""];
m6_80 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", span="94-94"];
m6_83 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", color=green, community=0, file="SqlServerJobQueue.cs", label="Assert.Throws<InvalidOperationException>(() => process.Run(_context.Object))", prediction=37, span="101-101"];
m6_82 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="99-99"];
m6_81 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerJobQueue.cs", label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="96-97"];
m6_84 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", span="94-94"];
m6_168 [cluster="Unk.OnCreating", file="SqlServerJobQueue.cs", label="Entry Unk.OnCreating", span=""];
m6_56 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="61-61"];
m6_57 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="63-63"];
m6_58 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerJobQueue.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => process.Run(null))", span="65-66"];
m6_59 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerJobQueue.cs", label="Assert.Equal(''context'', exception.ParamName)", span="68-68"];
m6_60 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="61-61"];
m6_66 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", span="72-72"];
m6_67 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="74-74"];
m6_68 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", file="SqlServerJobQueue.cs", label="process.Run(_context.Object)", span="76-76"];
m6_69 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", file="SqlServerJobQueue.cs", label="_innerProcess.Verify(\r\n                x => x.Run(_context.Object), \r\n                Times.Once)", span="78-80"];
m6_70 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", span="72-72"];
m6_144 [cluster="Unk.Callback", file="SqlServerJobQueue.cs", label="Entry Unk.Callback", span=""];
m6_155 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", span="173-173"];
m6_157 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="_filters.Add(filter.Object)", span="177-177"];
m6_159 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .InSequence()", span="181-182"];
m6_161 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="186-186"];
m6_162 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="process.Run(_context.Object)", span="189-189"];
m6_156 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="var filter = new Mock<IClientFilter>()", span="176-176"];
m6_158 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="filter.Setup(x => x.OnCreating(It.IsNotNull<CreatingContext>())).InSequence()", span="179-179"];
m6_160 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="filter.Setup(x => x.OnCreated(It.IsNotNull<CreatedContext>())).InSequence()", span="184-184"];
m6_163 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", span="173-173"];
m6_21 [cluster="Unk.SingleOrDefault", file="SqlServerJobQueue.cs", label="Entry Unk.SingleOrDefault", span=""];
m6_164 [cluster="Mock<IClientFilter>.cstr", file="SqlServerJobQueue.cs", label="Entry Mock<IClientFilter>.cstr", span=""];
m6_35 [cluster="Hangfire.Common.JobFilter.JobFilter(object, Hangfire.Common.JobFilterScope, int?)", file="SqlServerJobQueue.cs", label="Entry Hangfire.Common.JobFilter.JobFilter(object, Hangfire.Common.JobFilterScope, int?)", span="38-38"];
m6_200 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", span="218-218"];
m6_202 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="_filters.Add(filter.Object)", span="222-222"];
m6_204 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="var process = CreateProcess()", span="227-227"];
m6_205 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="var jobId = process.Run(_context.Object)", span="230-230"];
m6_207 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="_innerProcess.Verify(\r\n                x => x.Run(It.IsAny<CreateContext>()), \r\n                Times.Never)", span="235-237"];
m6_201 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="var filter = new Mock<IClientFilter>()", span="221-221"];
m6_203 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="filter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Callback((CreatingContext x) => x.Canceled = true)", span="224-225"];
m6_206 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="Assert.Null(jobId)", span="233-233"];
m6_208 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="filter.Verify(x => x.OnCreated(It.IsAny<CreatedContext>()), Times.Never)", span="239-239"];
m6_209 [cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs", label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", span="218-218"];
m6_366 [file="SqlServerJobQueue.cs", label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", span=""];
m6_368 [file="SqlServerJobQueue.cs", label=process, span=""];
m6_369 [file="SqlServerJobQueue.cs", label=process, span=""];
m6_370 [file="SqlServerJobQueue.cs", label=process, span=""];
m6_371 [file="SqlServerJobQueue.cs", label=process, span=""];
m6_372 [file="SqlServerJobQueue.cs", label=process, span=""];
m6_374 [file="SqlServerJobQueue.cs", label=process, span=""];
m6_377 [file="SqlServerJobQueue.cs", label=process, span=""];
m6_373 [file="SqlServerJobQueue.cs", label=exception, span=""];
m6_375 [file="SqlServerJobQueue.cs", label=exception, span=""];
m6_376 [file="SqlServerJobQueue.cs", label=exception, span=""];
m6_367 [file="SqlServerJobQueue.cs", label=process, span=""];
m7_67 [cluster="Unk.>", file="SqlServerJobQueueMonitoringApi.cs", label=int, span=""];
m7_123 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255"];
m7_124 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="257-257"];
m7_126 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs", label="toScore < fromScore", span="258-258"];
m7_128 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="260-263"];
m7_125 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="257-257"];
m7_127 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="258-258"];
m7_129 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255"];
m7_2 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(nameof(storage));", span="44-44"];
m7_3 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerJobQueueMonitoringApi.cs", label="_storage = storage", span="45-45"];
m7_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m7_7 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", span="48-48"];
m7_8 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="SqlServerJobQueueMonitoringApi.cs", label="string sqlQuery = $@''select distinct(Queue) from [{_storage.SchemaName}].JobQueue with (nolock)''", span="50-50"];
m7_9 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="SqlServerJobQueueMonitoringApi.cs", label=_cacheLock, span="52-52"];
m7_10 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="SqlServerJobQueueMonitoringApi.cs", label="_queuesCache.Count == 0 || _cacheUpdated.Add(QueuesCacheTimeout) < DateTime.UtcNow", span="54-54"];
m7_4 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", span="42-42"];
m7_6 [cluster="Unk.nameof", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.nameof", span=""];
m7_11 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="var result = _storage.UseConnection(null, connection =>\r\n                    {\r\n                        return connection.Query(sqlQuery, commandTimeout: _storage.CommandTimeout).Select(x => (string) x.Queue).ToList();\r\n                    })", prediction=39, span="56-59"];
m7_12 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="SqlServerJobQueueMonitoringApi.cs", label="_queuesCache = result", span="61-61"];
m7_88 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="40-40"];
m7_219 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="416-416"];
m7_220 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="418-418"];
m7_223 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="424-424"];
m7_221 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="418-418"];
m7_222 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.Hash\r\nwhere [Key] = @key''", span="420-422"];
m7_224 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="!result.HasValue", span="425-425"];
m7_226 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return result.Value - DateTime.UtcNow;", span="427-427"];
m7_225 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return TimeSpan.FromSeconds(-1);", span="425-425"];
m7_227 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="416-416"];
m7_13 [cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.Dispose()", span="63-63"];
m7_14 [cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerJobQueueMonitoringApi.cs", label=OwnsConnection, span="65-65"];
m7_15 [cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerJobQueueMonitoringApi.cs", label="_connection.Dispose()", span="67-67"];
m7_157 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="301-301"];
m7_158 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs", label="serverId == null", span="303-303"];
m7_160 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs", label="context == null", span="304-304"];
m7_162 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="306-311"];
m7_163 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server with (holdlock) as Target ''\r\n                + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                + @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", span="313-319"];
m7_159 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''serverId'');", span="303-303"];
m7_161 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''context'');", span="304-304"];
m7_164 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="301-301"];
m7_27 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="58-58"];
m7_28 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="69-69"];
m7_30 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="return _storage.UseConnection(null, connection =>\r\n            {\r\n                // TODO: Remove cast to `int` to support `bigint`.\r\n                return connection.Query<JobIdDto>(\r\n                    sqlQuery,\r\n                    new { queue = queue, start = from + 1, end = @from + perPage },\r\n                    commandTimeout: _storage.CommandTimeout)\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();\r\n            });", prediction=40, span="79-89"];
m7_32 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="79-89"];
m7_34 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="79-89"];
m7_29 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="var sqlQuery =\r\n$@''select r.JobId from (\r\n  select jq.JobId, row_number() over (order by jq.Id) as row_num \r\n  from [{_storage.SchemaName}].JobQueue jq with (nolock, forceseek)\r\n  where jq.Queue = @queue and jq.FetchedAt is null\r\n) as r\r\nwhere r.row_num between @start and @end''", span="71-77"];
m7_31 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="69-69"];
m7_33 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="return connection.Query<JobIdDto>(\r\n                    sqlQuery,\r\n                    new { queue = queue, start = from + 1, end = @from + perPage },\r\n                    commandTimeout: _storage.CommandTimeout)\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();", span="82-88"];
m7_35 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="84-84"];
m7_46 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="109-109"];
m7_150 [cluster="Unk.ToDictionary", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.ToDictionary", span=""];
m7_16 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m7_171 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="331-331"];
m7_172 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerJobQueueMonitoringApi.cs", label="serverId == null", span="333-333"];
m7_174 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerJobQueueMonitoringApi.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="335-337"];
m7_173 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''serverId'');", span="333-333"];
m7_175 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="331-331"];
m7_190 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="361-361"];
m7_191 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="363-363"];
m7_194 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="return _connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList();", span="372-374"];
m7_192 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="363-363"];
m7_193 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="var query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] ASC) as row_num \r\n	from Hangfire.[Set]\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="365-370"];
m7_195 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="361-361"];
m7_242 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="453-453"];
m7_243 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="455-455"];
m7_246 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="461-461"];
m7_244 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="455-455"];
m7_245 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.List\r\nwhere [Key] = @key''", span="457-459"];
m7_247 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="!result.HasValue", span="462-462"];
m7_249 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return result.Value - DateTime.UtcNow;", span="464-464"];
m7_248 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return TimeSpan.FromSeconds(-1);", span="462-462"];
m7_250 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="453-453"];
m7_101 [cluster="Hangfire.Storage.StateData.StateData()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.Storage.StateData.StateData()", span="21-21"];
m7_213 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="405-405"];
m7_214 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="407-407"];
m7_217 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return _connection.Query<long>(query, new { key = key }).Single();", span="413-413"];
m7_215 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="407-407"];
m7_216 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="string query = @''\r\nselect count([Id]) from HangFire.Hash\r\nwhere [Key] = @key''", span="409-411"];
m7_218 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="405-405"];
m7_165 [cluster="Hangfire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m7_257 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="483-483"];
m7_258 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="485-485"];
m7_261 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return _connection.Query<string>(query, new { key = key }).ToList();", span="492-492"];
m7_259 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="485-485"];
m7_260 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerJobQueueMonitoringApi.cs", label="string query = @''\r\nselect [Value] from Hangfire.List\r\nwhere [Key] = @key\r\norder by [Id] desc''", span="487-490"];
m7_262 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="483-483"];
m7_26 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="(string) x.Queue", span="58-58"];
m7_21 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="56-59"];
m7_71 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="154-154"];
m7_72 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="id == null", span="156-156"];
m7_75 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="161-162"];
m7_73 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''id'');", span="156-156"];
m7_74 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="string sql = \r\n                @''select InvocationData, StateName, Arguments, CreatedAt from HangFire.Job where Id = @id''", span="158-159"];
m7_76 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="jobData == null", span="164-164"];
m7_78 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", span="167-167"];
m7_79 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="invocationData.Arguments = jobData.Arguments", span="168-168"];
m7_85 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = jobData.StateName,\r\n                CreatedAt = jobData.CreatedAt,\r\n                LoadException = loadException\r\n            };", span="182-188"];
m7_77 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return null;", span="164-164"];
m7_82 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="job = invocationData.Deserialize()", span="175-175"];
m7_80 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Job job = null", span="170-170"];
m7_81 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="JobLoadException loadException = null", span="171-171"];
m7_83 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label=JobLoadException, span="177-177"];
m7_84 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="loadException = ex", span="179-179"];
m7_86 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="154-154"];
m7_144 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="289-289"];
m7_145 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="291-291"];
m7_147 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var result = _connection.Query<SqlHash>(\r\n                ''select Field, Value from HangFire.Hash with (forceseek) where [Key] = @key'',\r\n                new { key })\r\n                .ToDictionary(x => x.Field, x => x.Value)", span="293-296"];
m7_146 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="291-291"];
m7_148 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return result.Count != 0 ? result : null;", span="298-298"];
m7_149 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="289-289"];
m7_49 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''job'');", span="110-110"];
m7_51 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''parameters'');", prediction=41, span="111-111"];
m7_50 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label="parameters == null", span="111-111"];
m7_52 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="113-116"];
m7_22 [cluster="Unk.Query", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Query", span=""];
m7_24 [cluster="Unk.ToList", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.ToList", span=""];
m7_183 [cluster="System.TimeSpan.Negate()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m7_102 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="219-219"];
m7_103 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="id == null", span="221-221"];
m7_105 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="name == null", span="222-222"];
m7_107 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="_connection.Execute(\r\n                @''merge HangFire.JobParameter with (holdlock) as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="224-230"];
m7_104 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''id'');", span="221-221"];
m7_106 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''name'');", span="222-222"];
m7_108 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="219-219"];
m7_39 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m7_41 [cluster="Unk.GetJobQueue", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.GetJobQueue", prediction=41, span=""];
m7_40 [cluster="string.Join(string, params string[])", file="SqlServerJobQueueMonitoringApi.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m7_42 [cluster="Unk.Dequeue", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Dequeue", span=""];
m7_130 [cluster="System.ArgumentException.ArgumentException(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m7_206 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m7_64 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="SqlServerJobQueueMonitoringApi.cs", label=sqlQuery, span=""];
m7_142 [cluster="TransactionScope.cstr", file="SqlServerJobQueueMonitoringApi.cs", label="Entry TransactionScope.cstr", span=""];
m7_197 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="377-377"];
m7_198 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="379-379"];
m7_201 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="385-385"];
m7_199 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="379-379"];
m7_200 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.[Set]\r\nwhere [Key] = @key''", span="381-383"];
m7_202 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="!result.HasValue", span="386-386"];
m7_204 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return result.Value - DateTime.UtcNow;", span="388-388"];
m7_203 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return TimeSpan.FromSeconds(-1);", span="386-386"];
m7_205 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="377-377"];
m7_38 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="87-87"];
m7_207 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="391-391"];
m7_208 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="393-393"];
m7_211 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return _connection.Query<long?>(query, new { key = key }).Single() ?? 0;", span="402-402"];
m7_209 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="393-393"];
m7_210 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerJobQueueMonitoringApi.cs", label="string query = @''\r\nselect sum(s.[Value]) from (select sum([Value]) as [Value] from HangFire.Counter\r\nwhere [Key] = @key\r\nunion all\r\nselect [Value] from HangFire.AggregatedCounter\r\nwhere [Key] = @key) as s''", span="395-400"];
m7_212 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="391-391"];
m7_25 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="58-58"];
m7_69 [cluster="Unk.ToString", file="SqlServerJobQueueMonitoringApi.cs", label=string, span=""];
m7_100 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
m7_66 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label=int, span=""];
m7_109 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="233-233"];
m7_110 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="id == null", span="235-235"];
m7_112 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="name == null", span="236-236"];
m7_114 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="238-241"];
m7_111 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''id'');", span="235-235"];
m7_113 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''name'');", span="236-236"];
m7_115 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="233-233"];
m7_143 [cluster="Unk.Complete", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Complete", span=""];
m7_166 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="322-322"];
m7_167 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerJobQueueMonitoringApi.cs", label="serverId == null", span="324-324"];
m7_169 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerJobQueueMonitoringApi.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="326-328"];
m7_168 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''serverId'');", span="324-324"];
m7_170 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="322-322"];
m7_90 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="191-191"];
m7_91 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="jobId == null", span="193-193"];
m7_94 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var sqlState = _connection.Query<SqlState>(sql, new { jobId = jobId }).SingleOrDefault()", span="201-201"];
m7_92 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''jobId'');", span="193-193"];
m7_93 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="string sql = @''\r\nselect s.Name, s.Reason, s.Data\r\nfrom HangFire.State s\r\ninner join HangFire.Job j on j.StateId = s.Id\r\nwhere j.Id = @jobId''", span="195-199"];
m7_95 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="sqlState == null", span="202-202"];
m7_97 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var data = new Dictionary<string, string>(\r\n                JobHelper.FromJson<Dictionary<string, string>>(sqlState.Data),\r\n                StringComparer.OrdinalIgnoreCase)", span="207-209"];
m7_98 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return new StateData\r\n            {\r\n                Name = sqlState.Name,\r\n                Reason = sqlState.Reason,\r\n                Data = data\r\n            };", span="211-216"];
m7_96 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return null;", span="204-204"];
m7_99 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="191-191"];
m7_17 [cluster="Unk.Dispose", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Dispose", span=""];
m7_58 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label=parameters, span="134-134"];
m7_251 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="467-467"];
m7_252 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="469-469"];
m7_255 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="return _connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList();", span="478-480"];
m7_253 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="469-469"];
m7_254 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="string query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] desc) as row_num \r\n	from Hangfire.List\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="471-476"];
m7_256 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="467-467"];
m7_18 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="71-71"];
m7_181 [cluster="System.TimeSpan.Duration()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m7_47 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="(int)x.JobId", span="109-109"];
m7_48 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="109-109"];
m7_53 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="126-135"];
m7_55 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="return new EnqueuedAndFetchedCountDto\r\n                {\r\n                    EnqueuedCount = result.EnqueuedCount,\r\n                    FetchedCount = result.FetchedCount\r\n                };", span="130-134"];
m7_56 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="126-135"];
m7_59 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", span=""];
m7_62 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label=int, span=""];
m7_57 [cluster="Unk.Single", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Single", span=""];
m7_61 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label=string, span=""];
m7_60 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label=sqlQuery, span=""];
m7_63 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label=int, span=""];
m7_65 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerJobQueueMonitoringApi.cs", label=string, span=""];
m7_37 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="(int)x.JobId", span="87-87"];
m7_43 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="102-111"];
m7_44 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="return connection.Query<JobIdDto>(\r\n                        fetchedJobsSql,\r\n                        new { queue = queue, start = from + 1, end = @from + perPage })\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();", span="105-110"];
m7_45 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="102-111"];
m7_151 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="296-296"];
m7_154 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Entry lambda expression", span="296-296"];
m7_152 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.Field", span="296-296"];
m7_153 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="296-296"];
m7_155 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="x.Value", span="296-296"];
m7_156 [cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs", label="Exit lambda expression", span="296-296"];
m7_19 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerJobQueueMonitoringApi.cs", label="return new SqlServerWriteOnlyTransaction(_connection, _isolationLevel, _queueProviders);", span="73-73"];
m7_20 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="71-71"];
m7_36 [cluster="Unk.Select", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.Select", span=""];
m7_131 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266"];
m7_132 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="268-268"];
m7_134 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs", label="keyValuePairs == null", span="269-269"];
m7_138 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs", label=keyValuePairs, span="280-280"];
m7_139 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs", label="_connection.Execute(sql, new { key = key, field = keyValuePair.Key, value = keyValuePair.Value })", span="282-282"];
m7_133 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="268-268"];
m7_135 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''keyValuePairs'');", span="269-269"];
m7_136 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs", label="string sql = @''\r\nmerge HangFire.Hash with (holdlock) as Target\r\nusing (VALUES (@key, @field, @value)) as Source ([Key], Field, Value)\r\non Target.[Key] = Source.[Key] and Target.Field = Source.Field\r\nwhen matched then update set Value = Source.Value\r\nwhen not matched then insert ([Key], Field, Value) values (Source.[Key], Source.Field, Source.Value);''", span="271-276"];
m7_137 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs", label="var transaction = new TransactionScope()", span="278-278"];
m7_140 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs", label="transaction.Complete()", span="285-285"];
m7_141 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266"];
m7_89 [cluster="Hangfire.Storage.JobData.JobData()", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.Storage.JobData.JobData()", span="21-21"];
m7_189 [cluster="Unk.First", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.First", span=""];
m7_228 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="430-430"];
m7_229 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="432-432"];
m7_231 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="name == null", span="433-433"];
m7_234 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="return _connection.Query<string>(query, new { key = key, field = name }).SingleOrDefault();", span="439-439"];
m7_230 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="432-432"];
m7_232 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''name'');", span="433-433"];
m7_233 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="string query = @''\r\nselect [Value] from HangFire.Hash\r\nwhere [Key] = @key and [Field] = @field''", span="435-437"];
m7_235 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="430-430"];
m7_184 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="352-352"];
m7_185 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="354-354"];
m7_187 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return _connection.Query<int>(\r\n                ''select count([Key]) from HangFire.[Set] where [Key] = @key'',\r\n                new { key = key }).First();", span="356-358"];
m7_186 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="354-354"];
m7_188 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="352-352"];
m7_68 [cluster="Unk.Single", file="SqlServerJobQueueMonitoringApi.cs", label=fetchedJobsSql, span=""];
m7_182 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m7_0 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="36-36"];
m7_1 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="36-36"];
m7_196 [cluster="Unk.ToList", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.ToList", span=""];
m7_70 [cluster="Unk.Execute", file="SqlServerJobQueueMonitoringApi.cs", label=sqlQuery, span=""];
m7_122 [cluster="HashSet<string>.cstr", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HashSet<string>.cstr", span=""];
m7_116 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="244-244"];
m7_117 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="246-246"];
m7_119 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerJobQueueMonitoringApi.cs", label="var result = _connection.Query<string>(\r\n                @''select Value from HangFire.[Set] where [Key] = @key'',\r\n                new { key })", span="248-250"];
m7_118 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="246-246"];
m7_120 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return new HashSet<string>(result);", span="252-252"];
m7_121 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="244-244"];
m7_236 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="442-442"];
m7_237 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="key == null", span="444-444"];
m7_240 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="return _connection.Query<long>(query, new { key = key }).Single();", span="450-450"];
m7_238 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="444-444"];
m7_239 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="string query = @''\r\nselect count([Id]) from HangFire.List\r\nwhere [Key] = @key''", span="446-448"];
m7_241 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="442-442"];
m7_87 [cluster="Unk.SingleOrDefault", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Unk.SingleOrDefault", span=""];
m7_176 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="340-340"];
m7_177 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label="timeOut.Duration() != timeOut", span="342-342"];
m7_178 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="344-344"];
m7_179 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="347-349"];
m7_180 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="340-340"];
m7_263 [file="SqlServerJobQueueMonitoringApi.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m10_11 [cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.Before(System.Reflection.MethodInfo)", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.SqlServer.Tests.CleanDatabaseAttribute.Before(System.Reflection.MethodInfo)", span="28-28"];
m10_16 [cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="instance = scope.Resolve(context.BackgroundJob.Job.Type)", span="49-49"];
m10_17 [cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", color=green, community=0, file="SqlServerTimeoutJob.cs", label="instance == null", prediction=43, span="51-51"];
m10_18 [cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="throw new InvalidOperationException(\r\n                            String.Format(''JobActivator returned NULL instance of the '{0}' type.'', context.BackgroundJob.Job.Type));", span="53-54"];
m10_28 [cluster="SqlConnection.cstr", file="SqlServerTimeoutJob.cs", label="Entry SqlConnection.cstr", span=""];
m10_29 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.GetMasterConnectionString()", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.GetMasterConnectionString()", span="21-21"];
m10_31 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26"];
m10_35 [cluster="Hangfire.Server.CoreJobPerformanceProcess.InvokeMethod(System.Reflection.MethodInfo, object, object[])", file="SqlServerTimeoutJob.cs", label="throw new JobPerformanceException(\r\n                    ''An exception occurred during performance of the job.'',\r\n                    ex.InnerException);", span="87-89"];
m10_34 [cluster="Hangfire.Server.CoreJobPerformanceProcess.InvokeMethod(System.Reflection.MethodInfo, object, object[])", file="SqlServerTimeoutJob.cs", label="throw ex.InnerException;", span="84-84"];
m10_30 [cluster="Unk.Execute", file="SqlServerTimeoutJob.cs", label="Entry Unk.Execute", span=""];
m10_33 [cluster="Hangfire.Server.CoreJobPerformanceProcess.InvokeMethod(System.Reflection.MethodInfo, object, object[])", file="SqlServerTimeoutJob.cs", label="Hangfire.SqlServer.Tests.CleanDatabaseAttribute", span=""];
m10_32 [cluster="Hangfire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="35-35"];
m10_36 [cluster="Hangfire.Server.CoreJobPerformanceProcess.InvokeMethod(System.Reflection.MethodInfo, object, object[])", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.Server.CoreJobPerformanceProcess.InvokeMethod(System.Reflection.MethodInfo, object, object[])", span="65-65"];
m10_24 [cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.RecreateDatabaseAndInstallObjects()", file="SqlServerTimeoutJob.cs", label="SqlServerObjectsInstaller.Install(connection)", span="71-71"];
m10_26 [cluster="string.Format(string, object)", file="SqlServerTimeoutJob.cs", label="Entry string.Format(string, object)", span="0-0"];
m10_27 [cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", span="93-93"];
m10_5 [cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.Before(System.Reflection.MethodInfo)", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.SqlServer.Tests.CleanDatabaseAttribute.Before(System.Reflection.MethodInfo)", span="28-28"];
m10_6 [cluster="Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", span="35-35"];
m10_7 [cluster="Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", file="SqlServerTimeoutJob.cs", label="activator == null", span="37-37"];
m10_8 [cluster="Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", file="SqlServerTimeoutJob.cs", label="throw new ArgumentNullException(''activator'');", span="37-37"];
m10_10 [cluster="Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", span="35-35"];
m10_9 [cluster="Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", file="SqlServerTimeoutJob.cs", label="_activator = activator", span="38-38"];
m10_52 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="SqlServerTimeoutJob.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m10_53 [cluster="System.Func<T, TResult>.Invoke(T)", file="SqlServerTimeoutJob.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m10_0 [cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute()", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute()", span="18-18"];
m10_1 [cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute()", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute()", span="18-18"];
m10_23 [cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.RecreateDatabaseAndInstallObjects()", file="SqlServerTimeoutJob.cs", label="var connection = new SqlConnection(\r\n                ConnectionUtils.GetConnectionString())", span="68-69"];
m10_14 [cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="object instance = null", span="45-45"];
m10_2 [cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute(IsolationLevel)", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute(IsolationLevel)", span="23-23"];
m10_3 [cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute(IsolationLevel)", file="SqlServerTimeoutJob.cs", label="_isolationLevel = isolationLevel", span="25-25"];
m10_4 [cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute(IsolationLevel)", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute(IsolationLevel)", span="23-23"];
m10_25 [cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.RecreateDatabaseAndInstallObjects()", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.SqlServer.Tests.CleanDatabaseAttribute.RecreateDatabaseAndInstallObjects()", span="56-56"];
m10_13 [cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="var scope = _activator.BeginScope()", span="43-43"];
m10_20 [cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="var result = InvokeMethod(context.BackgroundJob.Job.Method, instance, arguments)", span="59-59"];
m10_21 [cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="return result;", span="61-61"];
m10_22 [cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", span="41-41"];
m10_12 [cluster="System.Threading.Monitor.Enter(object)", file="SqlServerTimeoutJob.cs", label="Entry System.Threading.Monitor.Enter(object)", span="0-0"];
m10_19 [cluster="Unk.Dispose", file="SqlServerTimeoutJob.cs", label="Entry Unk.Dispose", span=""];
m10_15 [cluster="TransactionOptions.cstr", file="SqlServerTimeoutJob.cs", label="Entry TransactionOptions.cstr", span=""];
m10_37 [cluster="System.Reflection.MethodBase.Invoke(object, object[])", file="SqlServerTimeoutJob.cs", label="Entry System.Reflection.MethodBase.Invoke(object, object[])", span="0-0"];
m10_55 [cluster="System.Collections.Generic.List<T>.ToArray()", file="SqlServerTimeoutJob.cs", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
m10_45 [cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", color=green, community=0, file="SqlServerTimeoutJob.cs", label="var value = Substitutions.ContainsKey(parameter.ParameterType) \r\n                    ? Substitutions[parameter.ParameterType](context) \r\n                    : argument", prediction=44, span="103-105"];
m10_44 [cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="var argument = context.BackgroundJob.Job.Args[i]", span="101-101"];
m10_43 [cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="var parameter = parameters[i]", span="100-100"];
m10_46 [cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="result.Add(value)", span="107-107"];
m10_39 [cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="var parameters = context.BackgroundJob.Job.Method.GetParameters()", span="95-95"];
m10_40 [cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="var result = new List<object>(context.BackgroundJob.Job.Args.Count)", span="96-96"];
m10_41 [cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="var i = 0", span="98-98"];
m10_42 [cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="i < parameters.Length", span="98-98"];
m10_47 [cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="i++", span="98-98"];
m10_48 [cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="return result.ToArray();", span="110-110"];
m10_49 [cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", span="93-93"];
m10_51 [cluster="System.Collections.Generic.List<T>.List(int)", file="SqlServerTimeoutJob.cs", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
m10_54 [cluster="System.Collections.Generic.List<T>.Add(T)", file="SqlServerTimeoutJob.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m10_38 [cluster="Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22"];
m10_50 [cluster="System.Reflection.MethodBase.GetParameters()", file="SqlServerTimeoutJob.cs", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
m10_56 [file="SqlServerTimeoutJob.cs", label="Hangfire.Server.CoreJobPerformanceProcess", span=""];
m12_580 [cluster="System.Collections.Generic.List<T>.List()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m12_145 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="154-154"];
m12_146 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="156-156"];
m12_147 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="157-157"];
m12_148 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="correctProvider.Setup(x => x.GetJobQueue())\r\n                .Returns(correctJobQueue.Object)", span="158-159"];
m12_149 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="_queueProviders.Add(correctProvider.Object, new[] { ''default'' })", span="161-161"];
m12_151 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="154-154"];
m12_719 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="357-357"];
m12_620 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="714-714"];
m12_621 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score]) values (@key, @value, 0.0)''", span="716-717"];
m12_623 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="714-714"];
m12_111 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="121-121"];
m12_112 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="123-126"];
m12_114 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="121-121"];
m12_386 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="446-446"];
m12_388 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="446-446"];
m12_607 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="704-704"];
m12_609 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="704-704"];
m12_204 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="163-163"];
m12_412 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="481-481"];
m12_414 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="481-481"];
m12_311 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="195-195"];
m12_40 [cluster="Unk.ToString", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToString", span=""];
m12_144 [cluster="Unk.AddJobState", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.AddJobState", span=""];
m12_469 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="556-556"];
m12_471 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="556-556"];
m12_775 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="889-889"];
m12_777 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="889-889"];
m12_648 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="327-327"];
m12_312 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="347-347"];
m12_314 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="347-347"];
m12_552 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="645-645"];
m12_554 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="645-645"];
m12_582 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="678-678"];
m12_584 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="678-678"];
m12_630 [cluster="Unk.Execute", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Execute", span=""];
m12_400 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="464-464"];
m12_402 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="464-464"];
m12_170 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="171-171"];
m12_171 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="return connection\r\n                .Query(''select * from HangFire.Job where Id = @id'', new { id = jobId })\r\n                .Single();", span="173-175"];
m12_172 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="171-171"];
m12_754 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="372-372"];
m12_336 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="212-212"];
m12_42 [cluster="Unk.GetTestJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.GetTestJob", span=""];
m12_7 [cluster="Mock<IPersistentJobQueue>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<IPersistentJobQueue>.cstr", span=""];
m12_809 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="927-927"];
m12_811 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="927-927"];
m12_260 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="283-283"];
m12_262 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="283-283"];
m12_822 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="402-402"];
m12_186 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="154-154"];
m12_788 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="387-387"];
m12_507 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="602-602"];
m12_509 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="602-602"];
m12_684 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="342-342"];
m12_855 [cluster="SqlServerWriteOnlyTransaction.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry SqlServerWriteOnlyTransaction.cstr", span=""];
m12_273 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="190-190"];
m12_187 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="194-194"];
m12_189 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="194-194"];
m12_286 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="315-315"];
m12_288 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="315-315"];
m12_506 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="261-261"];
m12_434 [cluster="Unk.ToArray", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToArray", span=""];
m12_44 [cluster="System.DateTime.AddDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m12_670 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="774-774"];
m12_672 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="774-774"];
m12_5 [cluster="Mock<IPersistentJobQueueProvider>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<IPersistentJobQueueProvider>.cstr", span=""];
m12_0 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="18-18"];
m12_1 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="var defaultProvider = new Mock<IPersistentJobQueueProvider>()", span="20-20"];
m12_2 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="defaultProvider.Setup(x => x.GetJobQueue())\r\n                .Returns(new Mock<IPersistentJobQueue>().Object)", span="21-22"];
m12_3 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="_queueProviders = new PersistentJobQueueProviderCollection(defaultProvider.Object)", span="24-24"];
m12_4 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="18-18"];
m12_823 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="939-939"];
m12_824 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="941-943"];
m12_826 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="939-939"];
m12_685 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="786-786"];
m12_686 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="788-790"];
m12_688 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="786-786"];
m12_857 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="977-977"];
m12_10 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="21-21"];
m12_11 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.GetJobQueue()", span="21-21"];
m12_12 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="21-21"];
m12_20 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="31-31"];
m12_22 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="31-31"];
m12_30 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="46-46"];
m12_31 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="47-47"];
m12_29 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="44-56"];
m12_33 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="51-51"];
m12_35 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="54-54"];
m12_47 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="49-49"];
m12_34 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1))", span="52-52"];
m12_36 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.ExpireAt)", span="55-55"];
m12_37 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="44-56"];
m12_49 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="49-49"];
m12_57 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="69-69"];
m12_58 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="70-70"];
m12_56 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="67-79"];
m12_60 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="74-74"];
m12_62 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="77-77"];
m12_66 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="72-72"];
m12_61 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.ExpireAt)", span="75-75"];
m12_63 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(anotherJob.ExpireAt)", span="78-78"];
m12_64 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="67-79"];
m12_68 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="72-72"];
m12_75 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="92-92"];
m12_76 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="93-93"];
m12_74 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="90-117"];
m12_82 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="103-103"];
m12_85 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="107-107"];
m12_88 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="111-111"];
m12_89 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="112-112"];
m12_77 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="95-95"];
m12_78 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="96-96"];
m12_79 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="97-97"];
m12_80 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="98-99"];
m12_97 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="96-96"];
m12_100 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="97-97"];
m12_103 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="98-98"];
m12_107 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="101-101"];
m12_83 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', job.StateName)", span="104-104"];
m12_84 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(job.StateId)", span="105-105"];
m12_86 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.StateName)", span="108-108"];
m12_87 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.StateId)", span="109-109"];
m12_90 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="113-113"];
m12_91 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="114-114"];
m12_92 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="115-115"];
m12_93 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="116-116"];
m12_94 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="90-117"];
m12_98 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="96-96"];
m12_99 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="96-96"];
m12_101 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="97-97"];
m12_102 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="97-97"];
m12_104 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="98-98"];
m12_105 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="98-98"];
m12_109 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="101-101"];
m12_116 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="130-130"];
m12_115 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="128-150"];
m12_122 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="140-140"];
m12_125 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="144-144"];
m12_117 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="132-132"];
m12_126 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="145-145"];
m12_118 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="133-133"];
m12_119 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="134-134"];
m12_120 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="135-136"];
m12_132 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="133-133"];
m12_135 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="134-134"];
m12_138 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="135-135"];
m12_141 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="138-138"];
m12_123 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateName)", span="141-141"];
m12_124 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateId)", span="142-142"];
m12_127 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="146-146"];
m12_128 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="147-147"];
m12_129 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="148-148"];
m12_130 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="149-149"];
m12_131 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="128-150"];
m12_133 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="133-133"];
m12_134 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="133-133"];
m12_136 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="134-134"];
m12_137 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="134-134"];
m12_139 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="135-135"];
m12_140 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="135-135"];
m12_143 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="138-138"];
m12_159 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="correctJobQueue.Verify(x => x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1''))", span="167-167"];
m12_154 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="158-158"];
m12_157 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="163-168"];
m12_155 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.GetJobQueue()", span="158-158"];
m12_156 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="158-158"];
m12_162 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="165-165"];
m12_160 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="163-168"];
m12_166 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="167-167"];
m12_164 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="165-165"];
m12_167 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1'')", span="167-167"];
m12_168 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="167-167"];
m12_176 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="181-190"];
m12_178 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="185-185"];
m12_183 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="183-183"];
m12_179 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="187-187"];
m12_180 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="188-188"];
m12_181 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="189-189"];
m12_182 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="181-190"];
m12_185 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="183-183"];
m12_190 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="196-210"];
m12_192 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="200-200"];
m12_201 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="198-198"];
m12_193 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="202-202"];
m12_194 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="203-203"];
m12_195 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="204-204"];
m12_196 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var expireAt = (DateTime) record.ExpireAt", span="206-206"];
m12_197 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="208-208"];
m12_198 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="209-209"];
m12_199 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="196-210"];
m12_203 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="198-198"];
m12_208 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="216-227"];
m12_210 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="224-224"];
m12_213 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="218-222"];
m12_211 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="226-226"];
m12_212 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="216-227"];
m12_214 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="220-220"];
m12_215 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="221-221"];
m12_216 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="218-222"];
m12_220 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="233-242"];
m12_222 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="237-237"];
m12_227 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="235-235"];
m12_223 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="239-239"];
m12_224 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="240-240"];
m12_225 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="241-241"];
m12_226 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="233-242"];
m12_229 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="235-235"];
m12_234 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="248-262"];
m12_236 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="252-252"];
m12_244 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="250-250"];
m12_237 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="254-254"];
m12_238 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="255-255"];
m12_239 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="256-256"];
m12_240 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var expireAt = (DateTime)record.ExpireAt", span="258-258"];
m12_241 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="260-260"];
m12_242 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="261-261"];
m12_243 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="248-262"];
m12_246 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="250-250"];
m12_251 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="268-279"];
m12_253 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="276-276"];
m12_256 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="270-274"];
m12_254 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="278-278"];
m12_255 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="268-279"];
m12_257 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="272-272"];
m12_258 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="273-273"];
m12_259 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="270-274"];
m12_263 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="285-294"];
m12_265 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="289-289"];
m12_270 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="287-287"];
m12_266 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="291-291"];
m12_267 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="292-292"];
m12_268 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0.0, record.Score, 2)", span="293-293"];
m12_269 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="285-294"];
m12_272 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="287-287"];
m12_277 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="300-311"];
m12_279 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="308-308"];
m12_282 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="302-306"];
m12_280 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="310-310"];
m12_281 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="300-311"];
m12_283 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="304-304"];
m12_284 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''another-value'')", span="305-305"];
m12_285 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="302-306"];
m12_289 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="317-328"];
m12_291 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="325-325"];
m12_294 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="319-323"];
m12_292 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="327-327"];
m12_293 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="317-328"];
m12_295 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="321-321"];
m12_296 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="322-322"];
m12_297 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="319-323"];
m12_301 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="334-343"];
m12_303 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="338-338"];
m12_308 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="336-336"];
m12_304 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="340-340"];
m12_305 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="341-341"];
m12_306 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="342-342"];
m12_307 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="334-343"];
m12_310 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="336-336"];
m12_315 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="349-360"];
m12_317 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="357-357"];
m12_320 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="351-355"];
m12_318 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="359-359"];
m12_319 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="349-360"];
m12_321 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="353-353"];
m12_322 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="354-354"];
m12_323 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="351-355"];
m12_327 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="366-377"];
m12_329 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="374-374"];
m12_332 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="368-372"];
m12_330 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="376-376"];
m12_331 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="366-377"];
m12_333 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="370-370"];
m12_334 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''my-value'')", span="371-371"];
m12_335 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="368-372"];
m12_340 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="383-394"];
m12_342 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="391-391"];
m12_345 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="385-389"];
m12_343 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="393-393"];
m12_344 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="383-394"];
m12_346 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="387-387"];
m12_347 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''different-value'')", span="388-388"];
m12_348 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="385-389"];
m12_352 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="400-411"];
m12_354 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="408-408"];
m12_357 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="402-406"];
m12_355 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="410-410"];
m12_356 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="400-411"];
m12_358 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="404-404"];
m12_359 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''different-key'', ''my-value'')", span="405-405"];
m12_360 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="402-406"];
m12_364 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="417-425"];
m12_366 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.List'').Single()", span="421-421"];
m12_370 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="419-419"];
m12_367 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="423-423"];
m12_368 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="424-424"];
m12_369 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="417-425"];
m12_372 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="419-419"];
m12_377 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="431-442"];
m12_379 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="439-439"];
m12_382 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="433-437"];
m12_380 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="441-441"];
m12_381 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="431-442"];
m12_383 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="435-435"];
m12_384 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="436-436"];
m12_385 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="433-437"];
m12_389 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="448-460"];
m12_391 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="457-457"];
m12_394 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="450-455"];
m12_392 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="459-459"];
m12_393 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="448-460"];
m12_395 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="452-452"];
m12_396 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="453-453"];
m12_397 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''my-value'')", span="454-454"];
m12_398 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="450-455"];
m12_403 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="466-477"];
m12_405 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="474-474"];
m12_408 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="468-472"];
m12_406 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="476-476"];
m12_407 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="466-477"];
m12_409 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="470-470"];
m12_410 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''different-value'')", span="471-471"];
m12_411 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="468-472"];
m12_415 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="483-494"];
m12_417 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="491-491"];
m12_420 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="485-489"];
m12_418 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="493-493"];
m12_419 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="483-494"];
m12_421 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="487-487"];
m12_422 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''different-key'', ''my-value'')", span="488-488"];
m12_423 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="485-489"];
m12_427 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="500-516"];
m12_429 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="511-511"];
m12_435 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="502-509"];
m12_430 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, records.Length)", span="513-513"];
m12_431 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''1'', records[0].Value)", span="514-514"];
m12_432 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''2'', records[1].Value)", span="515-515"];
m12_433 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="500-516"];
m12_436 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="504-504"];
m12_437 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="505-505"];
m12_438 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="506-506"];
m12_439 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''3'')", span="507-507"];
m12_440 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 2)", span="508-508"];
m12_441 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="502-509"];
m12_446 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="522-535"];
m12_448 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="532-532"];
m12_451 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="524-530"];
m12_449 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="534-534"];
m12_450 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="522-535"];
m12_452 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="526-526"];
m12_453 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="527-527"];
m12_454 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="528-528"];
m12_455 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="529-529"];
m12_456 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="524-530"];
m12_460 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="541-552"];
m12_462 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="549-549"];
m12_465 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="543-547"];
m12_463 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="551-551"];
m12_464 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="541-552"];
m12_466 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="545-545"];
m12_467 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="546-546"];
m12_468 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="543-547"];
m12_472 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="558-569"];
m12_474 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="566-566"];
m12_477 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="560-564"];
m12_475 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="568-568"];
m12_476 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="558-569"];
m12_478 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="562-562"];
m12_479 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 0)", span="563-563"];
m12_480 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="560-564"];
m12_484 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="575-586"];
m12_486 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="583-583"];
m12_489 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="577-581"];
m12_487 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="585-585"];
m12_488 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="575-586"];
m12_490 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="579-579"];
m12_491 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''another-key'', 1, 0)", span="580-580"];
m12_492 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="577-581"];
m12_496 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="592-598"];
m12_498 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="597-597"];
m12_500 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="595-595"];
m12_499 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="592-598"];
m12_502 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="595-595"];
m12_503 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="595-595"];
m12_505 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="595-595"];
m12_510 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="604-610"];
m12_512 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="609-609"];
m12_514 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="607-607"];
m12_513 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="604-610"];
m12_516 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="607-607"];
m12_517 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="607-607"];
m12_519 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="607-607"];
m12_523 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="616-631"];
m12_525 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="624-627"];
m12_530 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="618-622"];
m12_526 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="629-629"];
m12_533 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="627-627"];
m12_536 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="627-627"];
m12_527 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="630-630"];
m12_528 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="616-631"];
m12_532 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="618-622"];
m12_534 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Field", span="627-627"];
m12_535 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="627-627"];
m12_537 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Value", span="627-627"];
m12_538 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="627-627"];
m12_542 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="637-641"];
m12_544 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="637-641"];
m12_545 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="640-640"];
m12_547 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="640-640"];
m12_548 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="640-640"];
m12_550 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="640-640"];
m12_555 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="647-662"];
m12_558 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single()", span="660-660"];
m12_561 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="650-654"];
m12_564 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="657-657"];
m12_559 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, count)", span="661-661"];
m12_560 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="647-662"];
m12_563 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="650-654"];
m12_566 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="657-657"];
m12_570 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="668-674"];
m12_572 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="673-673"];
m12_574 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="671-671"];
m12_573 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="668-674"];
m12_576 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="671-671"];
m12_577 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="671-671"];
m12_579 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="671-671"];
m12_585 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="680-686"];
m12_587 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''items'', exception.ParamName)", span="685-685"];
m12_589 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="683-683"];
m12_588 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="680-686"];
m12_591 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="683-683"];
m12_592 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="683-683"];
m12_594 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="683-683"];
m12_598 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="692-700"];
m12_599 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var items = new List<string> { ''1'', ''2'', ''3'' }", span="694-694"];
m12_601 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''')", span="698-698"];
m12_602 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(items, records)", span="699-699"];
m12_604 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="696-696"];
m12_603 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="692-700"];
m12_606 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="696-696"];
m12_610 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="706-710"];
m12_612 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="706-710"];
m12_613 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="709-709"];
m12_615 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="709-709"];
m12_616 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="709-709"];
m12_618 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="709-709"];
m12_625 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="721-725"];
m12_624 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="719-731"];
m12_627 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="729-729"];
m12_631 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="727-727"];
m12_628 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''set-2'', record.Key)", span="730-730"];
m12_629 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="719-731"];
m12_633 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="727-727"];
m12_637 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="737-743"];
m12_639 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="742-742"];
m12_641 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="740-740"];
m12_640 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="737-743"];
m12_643 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="740-740"];
m12_644 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="740-740"];
m12_646 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="740-740"];
m12_654 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                })", span="756-760"];
m12_653 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="753-770"];
m12_656 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="766-766"];
m12_661 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="763-763"];
m12_657 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1''])", span="767-767"];
m12_664 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="766-766"];
m12_667 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="766-766"];
m12_658 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61))", span="768-768"];
m12_659 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''hash-2''])", span="769-769"];
m12_660 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="753-770"];
m12_663 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="763-763"];
m12_665 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="766-766"];
m12_666 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="766-766"];
m12_668 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="766-766"];
m12_669 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="766-766"];
m12_673 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="776-782"];
m12_675 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="781-781"];
m12_677 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="779-779"];
m12_676 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="776-782"];
m12_679 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="779-779"];
m12_680 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="779-779"];
m12_682 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="779-779"];
m12_690 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="795-799"];
m12_689 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="792-809"];
m12_692 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="805-805"];
m12_697 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="802-802"];
m12_693 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1''])", span="806-806"];
m12_700 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="805-805"];
m12_703 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="805-805"];
m12_694 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61))", span="807-807"];
m12_695 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''set-2''])", span="808-808"];
m12_696 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="792-809"];
m12_699 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="802-802"];
m12_701 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="805-805"];
m12_702 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="805-805"];
m12_704 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="805-805"];
m12_705 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="805-805"];
m12_709 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="815-821"];
m12_711 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="820-820"];
m12_713 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="818-818"];
m12_712 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="815-821"];
m12_715 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="818-818"];
m12_716 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="818-818"];
m12_718 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="818-818"];
m12_725 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                })", span="833-837"];
m12_724 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="830-847"];
m12_727 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="843-843"];
m12_732 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="840-840"];
m12_728 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1''])", span="844-844"];
m12_735 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="843-843"];
m12_738 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="843-843"];
m12_729 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61))", span="845-845"];
m12_730 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''list-2''])", span="846-846"];
m12_731 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="830-847"];
m12_734 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="840-840"];
m12_736 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="843-843"];
m12_737 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="843-843"];
m12_739 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="843-843"];
m12_740 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="843-843"];
m12_744 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="853-859"];
m12_746 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="858-858"];
m12_748 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="856-856"];
m12_747 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="853-859"];
m12_750 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="856-856"];
m12_751 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="856-856"];
m12_753 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="856-856"];
m12_760 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="872-876"];
m12_759 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="869-885"];
m12_762 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="882-882"];
m12_766 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="879-879"];
m12_763 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''hash-1''])", span="883-883"];
m12_769 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="882-882"];
m12_772 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="882-882"];
m12_764 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''hash-2''])", span="884-884"];
m12_765 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="869-885"];
m12_768 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="879-879"];
m12_770 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="882-882"];
m12_771 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="882-882"];
m12_773 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="882-882"];
m12_774 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="882-882"];
m12_778 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="891-897"];
m12_780 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="896-896"];
m12_782 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="894-894"];
m12_781 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="891-897"];
m12_784 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="894-894"];
m12_785 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="894-894"];
m12_787 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="894-894"];
m12_794 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="910-914"];
m12_793 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="907-923"];
m12_796 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="920-920"];
m12_800 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="917-917"];
m12_797 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''set-1''])", span="921-921"];
m12_803 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="920-920"];
m12_806 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="920-920"];
m12_798 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''set-2''])", span="922-922"];
m12_799 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="907-923"];
m12_802 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="917-917"];
m12_804 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="920-920"];
m12_805 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="920-920"];
m12_807 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="920-920"];
m12_808 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="920-920"];
m12_812 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="929-935"];
m12_814 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="934-934"];
m12_816 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="932-932"];
m12_815 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="929-935"];
m12_818 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="932-932"];
m12_819 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="932-932"];
m12_821 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="932-932"];
m12_828 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="948-952"];
m12_827 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="945-961"];
m12_830 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="958-958"];
m12_834 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="955-955"];
m12_831 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''list-1''])", span="959-959"];
m12_837 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="958-958"];
m12_840 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="958-958"];
m12_832 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''list-2''])", span="960-960"];
m12_833 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="945-961"];
m12_836 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="955-955"];
m12_838 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="958-958"];
m12_839 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="958-958"];
m12_841 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="958-958"];
m12_842 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="958-958"];
m12_858 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.QueueProviders", span="977-977"];
m12_859 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="977-977"];
m12_581 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="295-295"];
m12_374 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="429-429"];
m12_376 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="429-429"];
m12_361 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="415-415"];
m12_363 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="415-415"];
m12_595 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="690-690"];
m12_597 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="690-690"];
m12_399 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="234-234"];
m12_8 [cluster="Unk.Returns", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Returns", span=""];
m12_789 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="901-901"];
m12_790 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="903-905"];
m12_792 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="901-901"];
m12_349 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="398-398"];
m12_351 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="398-398"];
m12_706 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="813-813"];
m12_708 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="813-813"];
m12_95 [cluster="Mock<IState>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<IState>.cstr", span=""];
m12_43 [cluster="System.DateTime.AddMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m12_217 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="231-231"];
m12_219 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="231-231"];
m12_856 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="49-49"];
m12_28 [cluster="Unk.UseConnection", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.UseConnection", span=""];
m12_230 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="172-172"];
m12_110 [cluster="Unk.SetJobState", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.SetJobState", span=""];
m12_481 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="573-573"];
m12_483 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="573-573"];
m12_846 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m12_51 [cluster="Unk.ExpireJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ExpireJob", span=""];
m12_854 [cluster="Mock<SqlServerStorage>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<SqlServerStorage>.cstr", span=""];
m12_324 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="364-364"];
m12_326 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="364-364"];
m12_298 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="332-332"];
m12_300 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="332-332"];
m12_38 [cluster="Unk.Query", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Query", span=""];
m12_847 [cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m12_551 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="281-281"];
m12_231 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="246-246"];
m12_233 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="246-246"];
m12_493 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="590-590"];
m12_495 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="590-590"];
m12_152 [cluster="Unk.Add", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Add", span=""];
m12_720 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="825-825"];
m12_721 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key]) values (@key)''", span="827-828"];
m12_723 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="825-825"];
m12_65 [cluster="Unk.NotNull", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.NotNull", span=""];
m12_755 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="863-863"];
m12_756 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="865-867"];
m12_758 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="863-863"];
m12_41 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="972-972"];
m12_851 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="action(transaction)", span="981-981"];
m12_849 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="storage.Setup(x => x.QueueProviders).Returns(_queueProviders)", span="977-977"];
m12_852 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="transaction.Commit()", span="982-982"];
m12_853 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="972-972"];
m12_173 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="179-179"];
m12_175 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="179-179"];
m12_6 [cluster="Unk.Setup", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Setup", span=""];
m12_46 [cluster="Unk.Null", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Null", span=""];
m12_9 [cluster="PersistentJobQueueProviderCollection.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry PersistentJobQueueProviderCollection.cstr", span=""];
m12_153 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="964-964"];
m12_843 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="966-966"];
m12_844 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="action(connection)", span="968-968"];
m12_845 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="964-964"];
m12_649 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="747-747"];
m12_650 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="749-751"];
m12_652 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="747-747"];
m12_457 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="539-539"];
m12_459 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="539-539"];
m12_200 [cluster="System.DateTime.AddHours(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m12_205 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="214-214"];
m12_207 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="214-214"];
m12_741 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="851-851"];
m12_743 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="851-851"];
m12_13 [cluster="Unk.GetJobQueue", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.GetJobQueue", span=""];
m12_443 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="520-520"];
m12_445 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="520-520"];
m12_424 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="498-498"];
m12_426 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="498-498"];
m12_161 [cluster="Unk.Verify", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Verify", span=""];
m12_248 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="266-266"];
m12_250 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="266-266"];
m12_442 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="244-244"];
m12_647 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m12_529 [cluster="Unk.ToDictionary", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToDictionary", span=""];
m12_274 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="298-298"];
m12_276 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="298-298"];
m12_70 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="83-83"];
m12_71 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="85-88"];
m12_73 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="83-83"];
m12_52 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="60-60"];
m12_53 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="62-65"];
m12_55 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="60-60"];
m12_247 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="181-181"];
m12_619 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="313-313"];
m12_18 [cluster="Unk.>", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.>", span=""];
m12_14 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28"];
m12_16 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="33-33"];
m12_17 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28"];
m12_683 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m12_165 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="135-135"];
m12_50 [cluster="System.TimeSpan.FromDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m12_169 [cluster="Unk.Enqueue", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Enqueue", span=""];
m12_520 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="614-614"];
m12_522 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="614-614"];
m12_96 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m12_567 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="666-666"];
m12_569 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="666-666"];
m12_23 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", span="42-42"];
m12_106 [cluster="Unk.SerializeData", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.SerializeData", span=""];
m12_337 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="381-381"];
m12_339 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="381-381"];
m12_634 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="735-735"];
m12_636 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="735-735"];
m12_39 [cluster="Unk.Single", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Single", span=""];
m12_45 [cluster="Unk.True", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.True", span=""];
m12_69 [cluster="Unk.PersistJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.PersistJob", span=""];
m12_24 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="37-37"];
m12_25 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="39-42"];
m12_27 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="37-37"];
m12_373 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="224-224"];
m12_539 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="635-635"];
m12_541 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="635-635"];
m12_860 [file="SqlServerWriteOnlyTransactionFacts.cs", label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span=""];
m12_861 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_862 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m12_863 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_864 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m12_865 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_866 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m12_867 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m12_868 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_869 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m12_870 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m12_871 [file="SqlServerWriteOnlyTransactionFacts.cs", label=correctJobQueue, span=""];
m12_872 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_873 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_874 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_875 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_876 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_877 [file="SqlServerWriteOnlyTransactionFacts.cs", label=items, span=""];
m12_878 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_879 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_880 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_881 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_882 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_883 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_884 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_885 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_886 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_887 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_888 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_889 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_890 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_891 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
n44 -> n25  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts", style=dashed];
n44 -> n26  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts", style=dashed];
n44 -> n37  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts", style=dashed];
n44 -> n42  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts", style=dashed];
n45 -> n42  [color=darkseagreen4, key=1, label=handler, style=dashed];
n46 -> n42  [color=darkseagreen4, key=1, label=context, style=dashed];
n1 -> n13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n26 -> n30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n35 -> n37  [color=darkseagreen4, key=1, label=handler, style=dashed];
n35 -> n42  [color=darkseagreen4, key=1, label=handler, style=dashed];
n37 -> n41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d12 -> d22  [color=green, key=1, label="lambda expression", style=dashed];
d31 -> d12  [color=green, key=1, label="HangFire.Server.Components.ServerWatchdog", style=dashed];
d31 -> d23  [color=green, key=1, label="HangFire.Server.Components.ServerWatchdog", style=dashed];
d31 -> d13  [color=darkseagreen4, key=1, label="HangFire.Server.Components.ServerWatchdog", style=dashed];
d31 -> d26  [color=darkseagreen4, key=1, label="HangFire.Server.Components.ServerWatchdog", style=dashed];
d3 -> d5  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
d25 -> d27  [color=darkseagreen4, key=1, label="System.Threading.Thread", style=dashed];
m0_73 -> m0_42  [color=darkseagreen4, key=1, label="System.Action<DbConnection>", style=dashed];
m0_24 -> m0_31  [color=darkseagreen4, key=1, label=concurrency, style=dashed];
m0_26 -> m0_54  [color=darkseagreen4, key=1, label="params SqlParameter[]", style=dashed];
m0_26 -> m0_56  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_32 -> m0_42  [color=darkseagreen4, key=1, label="System.Action<DbConnection>", style=dashed];
m0_33 -> m0_40  [color=green, key=1, label="lambda expression", style=dashed];
m0_34 -> m0_42  [color=darkseagreen4, key=1, label=count, style=dashed];
m0_42 -> m0_42  [color=darkseagreen4, key=1, label=count, style=dashed];
m0_55 -> m0_57  [color=darkseagreen4, key=1, label=command, style=dashed];
m0_36 -> m0_38  [color=darkseagreen4, key=1, label=command, style=dashed];
m0_36 -> m0_39  [color=darkseagreen4, key=1, label=command, style=dashed];
m0_36 -> m0_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_36 -> m0_48  [color=darkseagreen4, key=1, label=command, style=dashed];
m0_36 -> m0_54  [color=darkseagreen4, key=1, label=command, style=dashed];
m0_36 -> m0_56  [color=darkseagreen4, key=1, label=command, style=dashed];
m0_39 -> m0_41  [color=darkseagreen4, key=1, label=workCount, style=dashed];
m0_56 -> m0_56  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_56 -> m0_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_56 -> m0_59  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_40 -> m0_43  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_40 -> m0_33  [color=green, key=1, label=DbConnection, style=dashed];
m0_40 -> m0_42  [color=darkseagreen4, key=1, label=DbConnection, style=dashed];
m0_43 -> m0_43  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_59 -> m0_59  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_8 -> m0_11  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_8 -> m0_13  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_11 -> m0_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_13 -> m0_13  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_9 -> m0_11  [color=darkseagreen4, key=1, label=table, style=dashed];
m0_9 -> m0_12  [color=darkseagreen4, key=1, label=table, style=dashed];
m0_0 -> m0_2  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m0_3 -> m0_6  [color=darkseagreen4, key=1, label=time, style=dashed];
m0_70 -> m0_36  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.ExpirationManager", style=dashed];
m0_70 -> m0_11  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.ExpirationManager", style=dashed];
m0_70 -> m0_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.ExpirationManager", style=dashed];
m0_70 -> m0_28  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.ExpirationManager", style=dashed];
m0_70 -> m0_48  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.ExpirationManager", style=dashed];
m0_75 -> m0_7  [color=darkseagreen4, key=1, label="ConsoleSample.ConsoleJob", style=dashed];
m1_7 -> m1_24  [color=green, key=1, label=version, style=dashed];
m1_7 -> m1_9  [color=darkseagreen4, key=1, label=version, style=dashed];
m1_7 -> m1_38  [color=darkseagreen4, key=1, label=version, style=dashed];
m1_54 -> m1_24  [color=green, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_23  [color=green, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_1  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_2  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_3  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_4  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_5  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_6  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_8  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_9  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_10  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_11  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_12  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_13  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_14  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_15  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_16  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_17  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_18  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_19  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_20  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_21  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_22  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_25  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_26  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_27  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_28  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_29  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_30  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_31  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_32  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_33  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_34  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_35  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_36  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_37  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_38  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m1_54 -> m1_39  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.Pages.LayoutPage", style=dashed];
m2_37 -> m2_40  [color=green, key=1, label=command, style=dashed];
m2_17 -> m2_19  [color=green, key=1, label=DbCommand, style=dashed];
m2_17 -> m2_20  [color=green, key=1, label=DbCommand, style=dashed];
m2_8 -> m2_10  [color=green, key=1, label="params SqlParameter[]", style=dashed];
m2_9 -> m2_11  [color=green, key=1, label=command, style=dashed];
m2_9 -> m2_12  [color=green, key=1, label=command, style=dashed];
m2_45 -> m2_12  [color=green, key=1, label="Hangfire.SqlServer.SqlCommandBatch", style=dashed];
m2_45 -> m2_18  [color=green, key=1, label="Hangfire.SqlServer.SqlCommandBatch", style=dashed];
m2_45 -> m2_19  [color=green, key=1, label="Hangfire.SqlServer.SqlCommandBatch", style=dashed];
m2_45 -> m2_20  [color=green, key=1, label="Hangfire.SqlServer.SqlCommandBatch", style=dashed];
m2_45 -> m2_25  [color=green, key=1, label="Hangfire.SqlServer.SqlCommandBatch", style=dashed];
m2_45 -> m2_35  [color=green, key=1, label="Hangfire.SqlServer.SqlCommandBatch", style=dashed];
m2_45 -> m2_31  [color=green, key=1, label="Hangfire.SqlServer.SqlCommandBatch", style=dashed];
m2_45 -> m2_34  [color=green, key=1, label="Hangfire.SqlServer.SqlCommandBatch", style=dashed];
m2_45 -> m2_38  [color=green, key=1, label="Hangfire.SqlServer.SqlCommandBatch", style=dashed];
m3_16 -> m3_4  [color=green, key=1, label="HangFire.States.SucceededState", style=dashed];
m4_6 -> m4_9  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
m4_6 -> m4_11  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_6 -> m4_13  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_6 -> m4_20  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_6 -> m4_21  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_15 -> m4_20  [color=darkseagreen4, key=1, label=recurringJob, style=dashed];
m4_19 -> m4_21  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m4_19 -> m4_22  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m4_34 -> m4_39  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_34 -> m4_40  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_38 -> m4_40  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m4_38 -> m4_41  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m6_3 -> m6_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_315 -> m6_321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_314 -> m6_325  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_314 -> m6_328  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_316 -> m6_324  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_316 -> m6_330  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_223 -> m6_225  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_223 -> m6_230  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_224 -> m6_226  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_227 -> m6_232  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_227 -> m6_235  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_230 -> m6_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_338 -> m6_345  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_340 -> m6_355  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_341 -> m6_354  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_334 -> m6_336  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_334 -> m6_342  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_335 -> m6_337  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_339 -> m6_348  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_339 -> m6_351  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_342 -> m6_357  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_50 -> m6_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_30 -> m6_11  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerFetcher", style=dashed];
m6_41 -> m6_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_177 -> m6_179  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_177 -> m6_181  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_177 -> m6_184  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_178 -> m6_180  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_178 -> m6_182  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_178 -> m6_183  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_181 -> m6_188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_184 -> m6_197  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_182 -> m6_191  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_183 -> m6_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_94 -> m6_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_95 -> m6_105  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_96 -> m6_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_92 -> m6_97  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_97 -> m6_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_4 -> m6_14  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m6_5 -> m6_13  [color=darkseagreen4, key=1, label=job, style=dashed];
m6_5 -> m6_16  [color=darkseagreen4, key=1, label=job, style=dashed];
m6_5 -> m6_18  [color=darkseagreen4, key=1, label=job, style=dashed];
m6_14 -> m6_14  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m6_6 -> m6_18  [color=darkseagreen4, key=1, label=queueName, style=dashed];
m6_7 -> m6_10  [color=darkseagreen4, key=1, label=idAndQueue, style=dashed];
m6_7 -> m6_12  [color=darkseagreen4, key=1, label=idAndQueue, style=dashed];
m6_8 -> m6_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_8 -> m6_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_10 -> m6_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_12 -> m6_18  [color=darkseagreen4, key=1, label=queueName, style=dashed];
m6_9 -> m6_11  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m6_11 -> m6_13  [color=darkseagreen4, key=1, label=job, style=dashed];
m6_11 -> m6_16  [color=darkseagreen4, key=1, label=job, style=dashed];
m6_11 -> m6_18  [color=darkseagreen4, key=1, label=job, style=dashed];
m6_269 -> m6_276  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_270 -> m6_280  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_271 -> m6_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_266 -> m6_272  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_268 -> m6_283  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_268 -> m6_272  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_268 -> m6_286  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_272 -> m6_282  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_294 -> m6_299  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_295 -> m6_303  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_296 -> m6_302  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_289 -> m6_291  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_289 -> m6_297  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m6_290 -> m6_292  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m6_293 -> m6_306  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_293 -> m6_297  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_293 -> m6_309  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_297 -> m6_305  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_248 -> m6_257  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_249 -> m6_256  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_250 -> m6_259  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_247 -> m6_253  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_245 -> m6_247  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_245 -> m6_251  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_251 -> m6_262  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_118 -> m6_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_119 -> m6_133  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_120 -> m6_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_112 -> m6_116  [color=darkseagreen4, key=1, label=filter1, style=dashed];
m6_112 -> m6_115  [color=darkseagreen4, key=1, label=filter1, style=dashed];
m6_115 -> m6_126  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_113 -> m6_117  [color=darkseagreen4, key=1, label=filter2, style=dashed];
m6_114 -> m6_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_239 -> m6_241  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_283 -> m6_285  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_306 -> m6_308  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_325 -> m6_327  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_358 -> m6_360  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_136 -> m6_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_137 -> m6_139  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_138 -> m6_149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_138 -> m6_152  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_83 -> m6_88  [color=green, key=1, label="lambda expression", style=dashed];
m6_82 -> m6_89  [color=green, key=1, label=process, style=dashed];
m6_81 -> m6_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_57 -> m6_63  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_58 -> m6_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_69 -> m6_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_159 -> m6_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_156 -> m6_158  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_156 -> m6_160  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_158 -> m6_165  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_160 -> m6_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_207 -> m6_216  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_201 -> m6_208  [color=darkseagreen4, key=1, label=filter, style=dashed];
m6_203 -> m6_210  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_203 -> m6_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_208 -> m6_219  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_366 -> m6_83  [color=green, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_89  [color=green, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_24  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_8  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_10  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_37  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_46  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_54  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_68  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_69  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_73  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_81  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_93  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_94  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_96  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_105  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_116  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_117  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_118  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_120  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_133  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_136  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_139  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_157  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_159  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_162  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_179  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_180  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_186  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_202  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_207  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_225  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_226  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_229  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_246  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_249  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_257  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_250  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_267  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_269  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_271  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_280  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_291  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_292  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_294  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_296  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_303  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_313  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_315  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_336  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_337  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_338  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_341  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_355  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_366 -> m6_364  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", style=dashed];
m6_368 -> m6_89  [color=green, key=1, label=process, style=dashed];
m6_369 -> m6_105  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_370 -> m6_133  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_371 -> m6_257  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_372 -> m6_280  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_374 -> m6_303  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_377 -> m6_355  [color=darkseagreen4, key=1, label=process, style=dashed];
m6_373 -> m6_283  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_373 -> m6_286  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_375 -> m6_306  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_375 -> m6_309  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_376 -> m6_325  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_376 -> m6_328  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_367 -> m6_63  [color=darkseagreen4, key=1, label=process, style=dashed];
m7_123 -> m7_126  [color=darkseagreen4, key=1, label=double, style=dashed];
m7_2 -> m7_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.PersistentJobQueueProviderCollection", style=dashed];
m7_2 -> m7_7  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_2 -> m7_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.PersistentJobQueueProviderCollection", style=dashed];
m7_2 -> m7_10  [color=darkseagreen4, key=1, label=bool, style=dashed];
m7_8 -> m7_20  [color=darkseagreen4, key=1, label=sqlQuery, style=dashed];
m7_11 -> m7_19  [color=green, key=1, label="lambda expression", style=dashed];
m7_223 -> m7_226  [color=darkseagreen4, key=1, label=result, style=dashed];
m7_157 -> m7_160  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerContext", style=dashed];
m7_27 -> m7_32  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m7_27 -> m7_34  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m7_30 -> m7_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_30 -> m7_32  [color=green, key=1, label="lambda expression", style=dashed];
m7_33 -> m7_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_246 -> m7_249  [color=darkseagreen4, key=1, label=result, style=dashed];
m7_147 -> m7_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_147 -> m7_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_49 -> m7_51  [color=green, key=1, label=string, style=dashed];
m7_51 -> m7_53  [color=green, key=1, label="lambda expression", style=dashed];
m7_102 -> m7_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_39 -> m7_41  [color=green, key=1, label=string, style=dashed];
m7_41 -> m7_43  [color=green, key=1, label="lambda expression", style=dashed];
m7_201 -> m7_204  [color=darkseagreen4, key=1, label=result, style=dashed];
m7_109 -> m7_112  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_47 -> m7_50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m7_47 -> m7_53  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m7_47 -> m7_56  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m7_47 -> m7_58  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m7_56 -> m7_59  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m7_56 -> m7_61  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m7_59 -> m7_59  [color=darkseagreen4, key=1, label=parameterIndex, style=dashed];
m7_59 -> m7_41  [color=green, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m7_59 -> m7_51  [color=green, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m7_59 -> m7_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m7_59 -> m7_10  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m7_59 -> m7_20  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m7_59 -> m7_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m7_59 -> m7_14  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m7_59 -> m7_40  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m7_59 -> m7_50  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m7_57 -> m7_59  [color=darkseagreen4, key=1, label=parameterIndex, style=dashed];
m7_60 -> m7_20  [color=darkseagreen4, key=1, label=sqlQuery, style=dashed];
m7_20 -> m7_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_131 -> m7_134  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m7_131 -> m7_138  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m7_137 -> m7_140  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m7_228 -> m7_231  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_0 -> m7_2  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m7_177 -> m7_177  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m7_263 -> m7_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m7_263 -> m7_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m7_263 -> m7_10  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m7_263 -> m7_14  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m7_263 -> m7_15  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m7_263 -> m7_19  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m7_263 -> m7_61  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m10_33 -> m10_10  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.CleanDatabaseAttribute", style=dashed];
m10_33 -> m10_17  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.CleanDatabaseAttribute", style=dashed];
m10_20 -> m10_22  [color=darkseagreen4, key=1, label=recreateDatabaseSql, style=dashed];
m10_12 -> m10_18  [color=darkseagreen4, key=1, label="Hangfire.Server.PerformContext", style=dashed];
m10_12 -> m10_19  [color=darkseagreen4, key=1, label="Hangfire.Server.PerformContext", style=dashed];
m10_12 -> m10_15  [color=darkseagreen4, key=1, label="Hangfire.Server.PerformContext", style=dashed];
m10_39 -> m10_42  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m10_40 -> m10_46  [color=darkseagreen4, key=1, label=result, style=dashed];
m10_40 -> m10_48  [color=darkseagreen4, key=1, label=result, style=dashed];
m10_41 -> m10_47  [color=darkseagreen4, key=1, label=i, style=dashed];
m10_47 -> m10_47  [color=darkseagreen4, key=1, label=i, style=dashed];
m12_146 -> m12_148  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m12_146 -> m12_159  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m12_147 -> m12_149  [color=darkseagreen4, key=1, label=correctProvider, style=dashed];
m12_148 -> m12_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_2 -> m12_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_75 -> m12_89  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_82 -> m12_84  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_85 -> m12_87  [color=darkseagreen4, key=1, label=anotherJob, style=dashed];
m12_88 -> m12_90  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_88 -> m12_91  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_88 -> m12_92  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_88 -> m12_93  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_77 -> m12_79  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_77 -> m12_80  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_78 -> m12_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_79 -> m12_100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_80 -> m12_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_116 -> m12_126  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_122 -> m12_124  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_125 -> m12_127  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_125 -> m12_128  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_125 -> m12_129  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_125 -> m12_130  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_117 -> m12_119  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_117 -> m12_120  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_118 -> m12_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_119 -> m12_135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_120 -> m12_138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_159 -> m12_166  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_178 -> m12_180  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_178 -> m12_181  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_192 -> m12_194  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_192 -> m12_195  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_196 -> m12_198  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m12_213 -> m12_215  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_222 -> m12_224  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_222 -> m12_225  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_236 -> m12_238  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_236 -> m12_239  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_240 -> m12_242  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m12_256 -> m12_258  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_265 -> m12_267  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_265 -> m12_268  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_282 -> m12_284  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_294 -> m12_296  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_303 -> m12_305  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_303 -> m12_306  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_320 -> m12_322  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_332 -> m12_334  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_345 -> m12_347  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_357 -> m12_359  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_366 -> m12_368  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_382 -> m12_384  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_394 -> m12_396  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_394 -> m12_397  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_408 -> m12_410  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_420 -> m12_422  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_429 -> m12_431  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_429 -> m12_432  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_435 -> m12_437  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_435 -> m12_438  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_435 -> m12_439  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_435 -> m12_440  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_451 -> m12_453  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_451 -> m12_454  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_451 -> m12_455  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_465 -> m12_467  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_477 -> m12_479  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_489 -> m12_491  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_525 -> m12_533  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_525 -> m12_536  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_525 -> m12_527  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_599 -> m12_602  [color=darkseagreen4, key=1, label=items, style=dashed];
m12_656 -> m12_664  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_656 -> m12_667  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_656 -> m12_658  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_656 -> m12_659  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_692 -> m12_700  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_692 -> m12_703  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_692 -> m12_694  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_692 -> m12_695  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_727 -> m12_735  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_727 -> m12_738  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_727 -> m12_729  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_727 -> m12_730  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_762 -> m12_769  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_762 -> m12_772  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_762 -> m12_764  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_796 -> m12_803  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_796 -> m12_806  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_796 -> m12_798  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_830 -> m12_837  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_830 -> m12_840  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_830 -> m12_832  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_41 -> m12_851  [color=darkseagreen4, key=1, label="System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>", style=dashed];
m12_849 -> m12_857  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_153 -> m12_844  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m12_860 -> m12_149  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_849  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_871 -> m12_159  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
}
