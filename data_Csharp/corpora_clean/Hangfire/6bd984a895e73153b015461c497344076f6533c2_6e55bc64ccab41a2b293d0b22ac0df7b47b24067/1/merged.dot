digraph  {
n44 [label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts", span=""];
n45 [label=handler, span=""];
n46 [label=context, span=""];
n0 [label="Entry HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()", span="19-19", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()"];
n1 [label="var job = Job.FromExpression(() => Console.WriteLine())", span="21-21", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()"];
n2 [label="_transaction = new Mock<IWriteOnlyTransaction>()", span="23-23", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()"];
n7 [label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="125-125", cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)"];
n13 [label="Entry lambda expression", span="21-21", cluster="lambda expression"];
n4 [label="_stateContext = new StateContext(JobId, job)", span="25-25", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()"];
n3 [label="_connection = new Mock<IStorageConnection>()", span="24-24", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()"];
n8 [label="Entry Mock<IWriteOnlyTransaction>.cstr", span="", cluster="Mock<IWriteOnlyTransaction>.cstr"];
n9 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr"];
n5 [label="_context = new ApplyStateContext(\r\n                _connection.Object,\r\n                _stateContext, \r\n                new EnqueuedState { Queue = Queue }, \r\n                null)", span="27-31", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()"];
n10 [label="Entry HangFire.States.StateContext.StateContext(string, HangFire.Common.Job)", span="23-23", cluster="HangFire.States.StateContext.StateContext(string, HangFire.Common.Job)"];
n6 [label="Exit HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()", span="19-19", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.EnqueuedStateHandlerFacts()"];
n11 [label="Entry ApplyStateContext.cstr", span="", cluster="ApplyStateContext.cstr"];
n12 [label="Entry HangFire.States.EnqueuedState.EnqueuedState()", span="31-31", cluster="HangFire.States.EnqueuedState.EnqueuedState()"];
n14 [label="Console.WriteLine()", span="21-21", cluster="lambda expression"];
n15 [label="Exit lambda expression", span="21-21", cluster="lambda expression"];
n16 [label="Entry System.Console.WriteLine()", span="0-0", cluster="System.Console.WriteLine()"];
n17 [label="Entry HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.HandlerShouldBeRegistered_ForTheEnqueuedState()", span="35-35", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.HandlerShouldBeRegistered_ForTheEnqueuedState()"];
n18 [label="var handler = new EnqueuedState.Handler()", span="37-37", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.HandlerShouldBeRegistered_ForTheEnqueuedState()"];
n19 [label="Assert.Equal(EnqueuedState.StateName, handler.StateName)", span="38-38", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.HandlerShouldBeRegistered_ForTheEnqueuedState()"];
n21 [label="Entry HangFire.States.EnqueuedState.Handler.Handler()", span="77-77", cluster="HangFire.States.EnqueuedState.Handler.Handler()"];
n20 [label="Exit HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.HandlerShouldBeRegistered_ForTheEnqueuedState()", span="35-35", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.HandlerShouldBeRegistered_ForTheEnqueuedState()"];
n22 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n23 [label="Entry HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()", span="42-42", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()"];
n24 [label="var handler = new EnqueuedState.Handler()", span="44-44", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()"];
n25 [label="handler.Apply(_context, _transaction.Object)", span="46-46", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()"];
n26 [label="_transaction.Verify(x => x.AddToQueue(Queue, JobId))", span="48-48", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()"];
n28 [label="Entry Unk.Apply", span="", cluster="Unk.Apply"];
n27 [label="Exit HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()", span="42-42", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_AddsJob_ToTheSpecifiedQueue()"];
n29 [label="Entry Unk.Verify", span="", cluster="Unk.Verify"];
n30 [label="Entry lambda expression", span="48-48", cluster="lambda expression"];
n31 [label="x.AddToQueue(Queue, JobId)", span="48-48", cluster="lambda expression"];
n32 [label="Exit lambda expression", span="48-48", cluster="lambda expression"];
n33 [label="Entry Unk.AddToQueue", span="", cluster="Unk.AddToQueue"];
n34 [label="Entry HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_ThrowsAnException_WhenOtherThanEnqueuedStateGiven()", span="52-52", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_ThrowsAnException_WhenOtherThanEnqueuedStateGiven()"];
n35 [label="var handler = new EnqueuedState.Handler()", span="54-54", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_ThrowsAnException_WhenOtherThanEnqueuedStateGiven()"];
n36 [label="var context = new ApplyStateContext(\r\n                _connection.Object, _stateContext, new Mock<State>().Object, null)", span="55-56", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_ThrowsAnException_WhenOtherThanEnqueuedStateGiven()", color=red, community=0];
n37 [label="Assert.Throws<InvalidOperationException>(\r\n                () => handler.Apply(context, _transaction.Object))", span="58-59", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_ThrowsAnException_WhenOtherThanEnqueuedStateGiven()"];
n42 [label="handler.Apply(context, _transaction.Object)", span="59-59", cluster="lambda expression"];
n39 [label="Entry Mock<State>.cstr", span="", cluster="Mock<State>.cstr"];
n38 [label="Exit HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_ThrowsAnException_WhenOtherThanEnqueuedStateGiven()", span="52-52", cluster="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts.Apply_ThrowsAnException_WhenOtherThanEnqueuedStateGiven()"];
n40 [label="Entry Unk.>", span="", cluster="Unk.>"];
n41 [label="Entry lambda expression", span="59-59", cluster="lambda expression"];
n43 [label="Exit lambda expression", span="59-59", cluster="lambda expression"];
d12 [label="JobServer.RetryOnException(\r\n                        () => RemoveTimedOutServers(ServerTimeout), \r\n                        _stopped)", span="54-56", cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", color=green, community=0];
d31 [label="HangFire.Server.Components.ServerWatchdog", span=""];
d11 [label=true, span="52-52", cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()"];
d13 [label="_stopped.WaitOne(CheckInterval)", span="58-58", cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()"];
d19 [label="Entry HangFire.Server.JobServer.RetryOnException(System.Action, System.Threading.WaitHandle)", span="151-151", cluster="HangFire.Server.JobServer.RetryOnException(System.Action, System.Threading.WaitHandle)"];
d22 [label="Entry lambda expression", span="55-55", cluster="lambda expression"];
d23 [label="RemoveTimedOutServers(ServerTimeout)", span="55-55", cluster="lambda expression", color=green, community=0];
d24 [label="Exit lambda expression", span="55-55", cluster="lambda expression"];
d3 [label="Entry HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", span="38-38", cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)"];
d1 [label="_storage = storage", span="35-35", cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)"];
d4 [label="var connection = _storage.GetConnection()", span="40-40", cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)"];
d26 [label="_stopped.Set()", span="74-74", cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)"];
d10 [label="Logger.Info(''Server watchdog has been started.'')", span="50-50", cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()"];
d14 [label="Logger.Info(''Server watchdog has been stopped.'')", span="64-64", cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()"];
d20 [label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0", cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)"];
d6 [label="Exit HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", span="38-38", cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)"];
d5 [label="connection.RemoveTimedOutServers(timeout)", span="42-42", cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)"];
d0 [label="Entry HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="33-33", cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)"];
d2 [label="Exit HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="33-33", cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)"];
d7 [label="Entry HangFire.JobStorage.GetConnection()", span="45-45", cluster="HangFire.JobStorage.GetConnection()"];
d25 [label="Entry HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="72-72", cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)"];
d27 [label="thread.Join()", span="75-75", cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)"];
d29 [label="Entry System.Threading.EventWaitHandle.Set()", span="0-0", cluster="System.Threading.EventWaitHandle.Set()"];
d9 [label="Entry HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", span="46-46", cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()"];
d18 [label="Entry Unk.Info", span="", cluster="Unk.Info"];
d15 [label=Exception, span="66-66", cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()"];
d17 [label="Exit HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", span="46-46", cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()"];
d8 [label="Entry HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="26-26", cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)"];
d28 [label="Exit HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="72-72", cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)"];
d30 [label="Entry System.Threading.Thread.Join()", span="0-0", cluster="System.Threading.Thread.Join()"];
d16 [label="Logger.Fatal(''Unexpected exception caught.'', ex)", span="68-68", cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()"];
d21 [label="Entry Unk.Fatal", span="", cluster="Unk.Fatal"];
m0_6 [label="Thread.Sleep(TimeSpan.FromSeconds(5 + time))", span="30-30", cluster="ConsoleSample.ConsoleJob.Perform()", file="ExpirationManager.cs"];
m0_73 [label="System.Action<DbConnection>", span="", cluster="HangFire.Perform.In<TJob>(System.TimeSpan, object)", file="ExpirationManager.cs"];
m0_63 [label="Entry Unk.AddRange", span="", cluster="Unk.AddRange", file="ExpirationManager.cs"];
m0_65 [label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(params string[])", span="14-14", cluster="HangFire.BackgroundJobServer.BackgroundJobServer(params string[])", file="ExpirationManager.cs"];
m0_27 [label="RedisFactory.Db = 3", span="62-62", cluster="ConsoleSample.Program.Main()", file="ExpirationManager.cs"];
m0_28 [label="GlobalJobFilters.Filters.Add(new HistoryStatisticsFilter())", span="64-64", cluster="ConsoleSample.Program.Main()", file="ExpirationManager.cs"];
m0_29 [label="GlobalJobFilters.Filters.Add(new RetryJobsFilter())", span="65-65", cluster="ConsoleSample.Program.Main()", file="ExpirationManager.cs"];
m0_20 [label="int affected", span="70-70", cluster="lambda expression", file="ExpirationManager.cs"];
m0_21 [label="affected = ExecuteNonQuery(\r\n                            connection,\r\n                            GetQuery(_storage.SchemaName, table),\r\n                            cancellationToken,\r\n                            new SqlParameter(''@count'', NumberOfRecordsInSinglePass),\r\n                            new SqlParameter(''@now'', DateTime.UtcNow))", span="74-79", cluster="lambda expression", file="ExpirationManager.cs"];
m0_22 [label="affected == NumberOfRecordsInSinglePass", span="81-81", cluster="lambda expression", file="ExpirationManager.cs"];
m0_23 [label="Exit lambda expression", span="68-82", cluster="lambda expression", file="ExpirationManager.cs"];
m0_24 [label="Entry Hangfire.SqlServer.ExpirationManager.GetQuery(string, string)", span="125-125", cluster="Hangfire.SqlServer.ExpirationManager.GetQuery(string, string)", file="ExpirationManager.cs"];
m0_25 [label="Entry SqlParameter.cstr", span="", cluster="SqlParameter.cstr", file="ExpirationManager.cs"];
m0_31 [label="Entry System.Type.ToString()", span="0-0", cluster="System.Type.ToString()", file="ExpirationManager.cs"];
m0_26 [label="Entry Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", span="156-156", cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs"];
m0_30 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="ExpirationManager.cs"];
m0_32 [label="Entry Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", span="95-95", cluster="Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", file="ExpirationManager.cs"];
m0_33 [label="storage.UseConnection(null, connection =>\r\n                {\r\n                    SqlServerDistributedLock.Acquire(connection, DistributedLockKey, DefaultLockTimeout);\r\n\r\n                    try\r\n                    {\r\n                        action(connection);\r\n                    }\r\n                    finally\r\n                    {\r\n                        SqlServerDistributedLock.Release(connection, DistributedLockKey);\r\n                    }\r\n                })", span="99-111", cluster="Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", file="ExpirationManager.cs", color=green, community=0];
m0_34 [label=DistributedLockTimeoutException, span="113-113", cluster="Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", file="ExpirationManager.cs"];
m0_35 [label="e.Resource == DistributedLockKey", span="113-113", cluster="Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", file="ExpirationManager.cs"];
m0_42 [label="action(connection)", span="105-105", cluster="lambda expression", file="ExpirationManager.cs"];
m0_55 [label="command.CommandTimeout = 0", span="166-166", cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs"];
m0_36 [label="Logger.Log(\r\n                    LogLevel.Debug,\r\n                    () => $@''An exception was thrown during acquiring distributed lock on the {DistributedLockKey} resource within {DefaultLockTimeout.TotalSeconds} seconds. Outdated records were not removed.\r\nIt will be retried in {_checkInterval.TotalSeconds} seconds.'',\r\n                    e)", span="117-121", cluster="Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", file="ExpirationManager.cs"];
m0_37 [label="Exit Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", span="95-95", cluster="Hangfire.SqlServer.ExpirationManager.UseConnectionDistributedLock(Hangfire.SqlServer.SqlServerStorage, System.Action<DbConnection>)", file="ExpirationManager.cs"];
m0_38 [label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection, System.Action<DbConnection>)", span="171-171", cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection, System.Action<DbConnection>)", file="ExpirationManager.cs"];
m0_39 [label="Entry Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", span="56-56", cluster="Hangfire.Logging.ILog.Log(Hangfire.Logging.LogLevel, System.Func<string>, System.Exception)", file="ExpirationManager.cs"];
m0_47 [label="Entry lambda expression", span="119-120", cluster="lambda expression", file="ExpirationManager.cs"];
m0_48 [label="$@''An exception was thrown during acquiring distributed lock on the {DistributedLockKey} resource within {DefaultLockTimeout.TotalSeconds} seconds. Outdated records were not removed.\r\nIt will be retried in {_checkInterval.TotalSeconds} seconds.''", span="119-120", cluster="lambda expression", file="ExpirationManager.cs"];
m0_53 [label="command.CommandText = commandText", span="164-164", cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs"];
m0_54 [label="command.Parameters.AddRange(parameters)", span="165-165", cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs"];
m0_56 [label="cancellationToken.Register(state => ((SqlCommand)state).Cancel(), command)", span="168-168", cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs"];
m0_40 [label="Entry lambda expression", span="99-111", cluster="lambda expression", file="ExpirationManager.cs"];
m0_41 [label="SqlServerDistributedLock.Acquire(connection, DistributedLockKey, DefaultLockTimeout)", span="101-101", cluster="lambda expression", file="ExpirationManager.cs"];
m0_43 [label="Exit lambda expression", span="99-111", cluster="lambda expression", file="ExpirationManager.cs"];
m0_44 [label="Entry Unk.Acquire", span="", cluster="Unk.Acquire", file="ExpirationManager.cs"];
m0_45 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="ExpirationManager.cs"];
m0_46 [label="Entry Unk.Release", span="", cluster="Unk.Release", file="ExpirationManager.cs"];
m0_49 [label="Exit lambda expression", span="119-120", cluster="lambda expression", file="ExpirationManager.cs"];
m0_50 [label="return\r\n$@''set transaction isolation level read committed;\r\ndelete top (@count) from [{schemaName}].[{table}] with (readpast) \r\nwhere ExpireAt < @now\r\noption (loop join, optimize for (@count = 20000));'';", span="149-153", cluster="Hangfire.SqlServer.ExpirationManager.GetQuery(string, string)", file="ExpirationManager.cs"];
m0_52 [label="var command = connection.CreateCommand()", span="162-162", cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs"];
m0_51 [label="Exit Hangfire.SqlServer.ExpirationManager.GetQuery(string, string)", span="125-125", cluster="Hangfire.SqlServer.ExpirationManager.GetQuery(string, string)", file="ExpirationManager.cs"];
m0_57 [label="return command.ExecuteNonQuery();", span="172-172", cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs"];
m0_58 [label=SqlException, span="174-174", cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs"];
m0_59 [label="cancellationToken.IsCancellationRequested", span="174-174", cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs"];
m0_64 [label="Entry HangFire.RecurringJobsFilter.RecurringJobsFilter()", span="18-18", cluster="HangFire.RecurringJobsFilter.RecurringJobsFilter()", file="ExpirationManager.cs"];
m0_10 [label="Logger.Debug($''Removing outdated records from the '{table}' table...'')", span="66-66", cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManager.cs"];
m0_74 [label="Entry HangFire.Perform.Async<TJob>()", span="11-11", cluster="HangFire.Perform.Async<TJob>()", file="ExpirationManager.cs"];
m0_8 [label="Exit ConsoleSample.ConsoleJob.Perform()", span="17-17", cluster="ConsoleSample.ConsoleJob.Perform()", file="ExpirationManager.cs"];
m0_11 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="ExpirationManager.cs"];
m0_13 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="ExpirationManager.cs"];
m0_9 [label="Entry System.Random.Next(int)", span="0-0", cluster="System.Random.Next(int)", file="ExpirationManager.cs"];
m0_12 [label="Entry System.Threading.Thread.Sleep(System.TimeSpan)", span="0-0", cluster="System.Threading.Thread.Sleep(System.TimeSpan)", file="ExpirationManager.cs"];
m0_14 [label="Entry ConsoleSample.ErrorJob.Perform()", span="38-38", cluster="ConsoleSample.ErrorJob.Perform()", file="ExpirationManager.cs"];
m0_72 [label=table, span="", cluster="HangFire.Perform.Async<TJob>(object)", file="ExpirationManager.cs"];
m0_19 [label="Entry lambda expression", span="68-82", cluster="lambda expression", file="ExpirationManager.cs"];
m0_71 [label="System.Threading.CancellationToken", span="", cluster="int.Parse(string)", file="ExpirationManager.cs"];
m0_61 [label="Exit Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", span="156-156", cluster="Hangfire.SqlServer.ExpirationManager.ExecuteNonQuery(DbConnection, string, System.Threading.CancellationToken, params SqlParameter[])", file="ExpirationManager.cs"];
m0_0 [label="Entry Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="54-54", cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs"];
m0_1 [label="storage == null", span="56-56", cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs"];
m0_2 [label="throw new ArgumentNullException(nameof(storage));", span="56-56", cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs"];
m0_3 [label="_storage = storage", span="58-58", cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs"];
m0_4 [label="_checkInterval = checkInterval", span="59-59", cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs"];
m0_5 [label="Exit Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="54-54", cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="ExpirationManager.cs"];
m0_7 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="ExpirationManager.cs"];
m0_62 [label="Entry HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", span="17-17", cluster="HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", file="ExpirationManager.cs"];
m0_69 [label="Entry Unk.Cancel", span="", cluster="Unk.Cancel", file="ExpirationManager.cs"];
m0_18 [label="Entry System.InvalidOperationException.InvalidOperationException(string, System.Exception)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string, System.Exception)", file="ExpirationManager.cs"];
m0_67 [label="((SqlCommand)state).Cancel()", span="168-168", cluster="lambda expression", file="ExpirationManager.cs"];
m0_17 [label="Exit ConsoleSample.ErrorJob.Perform()", span="38-38", cluster="ConsoleSample.ErrorJob.Perform()", file="ExpirationManager.cs"];
m0_68 [label="Exit lambda expression", span="168-168", cluster="lambda expression", file="ExpirationManager.cs"];
m0_66 [label="Entry HangFire.BackgroundJobServer.Start()", span="51-51", cluster="HangFire.BackgroundJobServer.Start()", file="ExpirationManager.cs"];
m0_15 [label="Console.WriteLine(''Beginning error task...'')", span="40-40", cluster="ConsoleSample.ErrorJob.Perform()", file="ExpirationManager.cs"];
m0_16 [label="throw new InvalidOperationException(null, new FileLoadException());", span="41-41", cluster="ConsoleSample.ErrorJob.Perform()", file="ExpirationManager.cs"];
m0_60 [label="Entry ConsoleLogFactory.cstr", span="", cluster="ConsoleLogFactory.cstr", file="ExpirationManager.cs"];
m0_70 [label="Hangfire.SqlServer.ExpirationManager", span="", cluster="string.Substring(int)", file="ExpirationManager.cs"];
m0_75 [label="ConsoleSample.ConsoleJob", span="", file="ExpirationManager.cs"];
m1_47 [label="Entry Hangfire.Dashboard.UrlHelper.Home()", span="53-53", cluster="Hangfire.Dashboard.UrlHelper.Home()", file="LayoutPage.generated.cs"];
m1_50 [label="Entry Hangfire.Dashboard.RazorPage.RenderBody()", span="121-121", cluster="Hangfire.Dashboard.RazorPage.RenderBody()", file="LayoutPage.generated.cs"];
m1_51 [label="Entry Hangfire.Dashboard.HtmlHelper.LocalTime(System.DateTime)", span="156-156", cluster="Hangfire.Dashboard.HtmlHelper.LocalTime(System.DateTime)", file="LayoutPage.generated.cs"];
m1_53 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="LayoutPage.generated.cs"];
m1_41 [label="Entry Hangfire.Dashboard.RazorPage.WriteLiteral(string)", span="105-105", cluster="Hangfire.Dashboard.RazorPage.WriteLiteral(string)", file="LayoutPage.generated.cs"];
m1_48 [label="Entry Hangfire.Dashboard.Pages.Navigation.Navigation()", span="25-25", cluster="Hangfire.Dashboard.Pages.Navigation.Navigation()", file="LayoutPage.generated.cs"];
m1_0 [label="Entry Hangfire.Dashboard.Pages.LayoutPage.Execute()", span="58-58", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_24 [label="Write($''{version.Major}.{version.Minor}.{version.Build}'')", span="218-218", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", color=green, community=0, file="LayoutPage.generated.cs"];
m1_7 [label="var version = GetType().GetTypeInfo().Assembly.GetName().Version", span="98-98", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_23 [label="WriteLiteral(@''\r\n            </div>\r\n        </div>\r\n\r\n        <div id=''''footer''''>\r\n            <div class=''''container''''>\r\n                <ul class=''''list-inline credit''''>\r\n                    <li>\r\n                        <a href=''''http://hangfire.io/'''' target=''''_blank''''>Hangfire '')", span="205-213", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", color=green, community=0, file="LayoutPage.generated.cs"];
m1_25 [label="WriteLiteral(''\r\n                        </a>\r\n                    </li>\r\n                    <l'' +\r\n''i>'')", span="223-224", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_22 [label="Write(RenderBody())", span="200-200", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_1 [label="WriteLiteral(''\r\n'')", span="62-62", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_2 [label="WriteLiteral(''<!DOCTYPE html>\r\n<html lang=\'''')", span="71-71", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_3 [label="Write(CultureInfo.CurrentUICulture.TwoLetterISOLanguageName)", span="76-76", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_4 [label="WriteLiteral(''\''>\r\n<head>\r\n    <title>'')", span="81-81", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_5 [label="Write(Title)", span="86-86", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_6 [label="WriteLiteral('' - Hangfire</title>\r\n    <meta http-equiv=\''X-UA-Compatible\'' content=\''IE=edge\''>\r\n '' +\r\n''   <meta charset=\''utf-8\''>\r\n    <meta name=\''viewport\'' content=\''width=device-width'' +\r\n'', initial-scale=1.0\''>\r\n'')", span="91-93", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_8 [label="WriteLiteral(''    <link rel=\''stylesheet\'' href=\'''')", span="103-103", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_9 [label="Write(Url.To($''/css{version.Major}{version.Minor}{version.Build}''))", span="108-108", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_10 [label="WriteLiteral(@''''''>\r\n</head>\r\n    <body>\r\n        <!-- Wrap all page content here -->\r\n        <div id=''''wrap''''>\r\n\r\n            <!-- Fixed navbar -->\r\n            <div class=''''navbar navbar-default navbar-fixed-top''''>\r\n                <div class=''''container''''>\r\n                    <div class=''''navbar-header''''>\r\n                        <button type=''''button'''' class=''''navbar-toggle'''' data-toggle=''''collapse'''' data-target=''''.navbar-collapse''''>\r\n                            <span class=''''icon-bar''''></span>\r\n                            <span class=''''icon-bar''''></span>\r\n                            <span class=''''icon-bar''''></span>\r\n                        </button>\r\n                        <a class=''''navbar-brand'''' href='''''')", span="113-128", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_11 [label="Write(Url.Home())", span="133-133", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_12 [label="WriteLiteral(''\''>Hangfire Dashboard</a>\r\n                    </div>\r\n                    <div cl'' +\r\n''ass=\''collapse navbar-collapse\''>\r\n                        '')", span="138-139", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_13 [label="Write(Html.RenderPartial(new Navigation()))", span="144-144", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_14 [label="WriteLiteral(''\r\n'')", span="149-149", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_15 [label="@AppPath != null", span="154-154", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_16 [label="WriteLiteral(''                            <ul class=\''nav navbar-nav navbar-right\''>\r\n           '' +\r\n''                     <li>\r\n                                    <a href=\'''')", span="159-160", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_17 [label="Write(AppPath)", span="165-165", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_18 [label="WriteLiteral(''\''>\r\n                                        <span class=\''glyphicon glyphicon-log-'' +\r\n''out\''></span>\r\n                                        '')", span="170-171", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_19 [label="Write(Strings.LayoutPage_Back)", span="176-176", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_20 [label="WriteLiteral(''\r\n                                    </a>\r\n                                </li>'' +\r\n''\r\n                            </ul>\r\n'')", span="181-182", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_21 [label="WriteLiteral(''                    </div>\r\n                    <!--/.nav-collapse -->\r\n         '' +\r\n''       </div>\r\n            </div>\r\n\r\n            <!-- Begin page content -->\r\n  '' +\r\n''          <div class=\''container\'' style=\''margin-bottom: 20px;\''>\r\n                '' +\r\n'''')", span="192-195", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_26 [label="Write(Storage)", span="229-229", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_27 [label="WriteLiteral(''</li>\r\n                    <li>'')", span="234-234", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_28 [label="Write(Strings.LayoutPage_Footer_Time)", span="239-239", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_29 [label="WriteLiteral('' '')", span="244-244", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_30 [label="Write(Html.LocalTime(DateTime.UtcNow))", span="249-249", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_31 [label="WriteLiteral(''</li>\r\n                    <li>'')", span="254-254", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_32 [label="Write(String.Format(Strings.LayoutPage_Footer_Generatedms, GenerationTime.Elapsed.TotalMilliseconds.ToString(''N'')))", span="259-259", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_33 [label="WriteLiteral(''</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        \r\n     '' +\r\n''   <div id=\''hangfireConfig\''\r\n             data-pollinterval=\'''')", span="264-265", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_34 [label="Write(StatsPollingInterval)", span="270-270", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_35 [label="WriteLiteral(''\''\r\n             data-pollurl=\'''')", span="275-275", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_36 [label="Write(Url.To(''/stats''))", span="280-280", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_37 [label="WriteLiteral(''\''>\r\n        </div>\r\n\r\n        <script src=\'''')", span="285-285", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_38 [label="Write(Url.To($''/js{version.Major}{version.Minor}{version.Build}''))", span="290-290", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_39 [label="WriteLiteral(''\''></script>\r\n    </body>\r\n</html>\r\n'')", span="295-295", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_40 [label="Exit Hangfire.Dashboard.Pages.LayoutPage.Execute()", span="58-58", cluster="Hangfire.Dashboard.Pages.LayoutPage.Execute()", file="LayoutPage.generated.cs"];
m1_45 [label="Entry System.Reflection.Assembly.GetName()", span="0-0", cluster="System.Reflection.Assembly.GetName()", file="LayoutPage.generated.cs"];
m1_43 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="LayoutPage.generated.cs"];
m1_49 [label="Entry Hangfire.Dashboard.HtmlHelper.RenderPartial(Hangfire.Dashboard.RazorPage)", span="82-82", cluster="Hangfire.Dashboard.HtmlHelper.RenderPartial(Hangfire.Dashboard.RazorPage)", file="LayoutPage.generated.cs"];
m1_44 [label="Entry System.Type.GetTypeInfo()", span="0-0", cluster="System.Type.GetTypeInfo()", file="LayoutPage.generated.cs"];
m1_42 [label="Entry Hangfire.Dashboard.RazorPage.Write(object)", span="113-113", cluster="Hangfire.Dashboard.RazorPage.Write(object)", file="LayoutPage.generated.cs"];
m1_52 [label="Entry double.ToString(string)", span="0-0", cluster="double.ToString(string)", file="LayoutPage.generated.cs"];
m1_46 [label="Entry Hangfire.Dashboard.UrlHelper.To(string)", span="43-43", cluster="Hangfire.Dashboard.UrlHelper.To(string)", file="LayoutPage.generated.cs"];
m1_54 [label="Hangfire.Dashboard.Pages.LayoutPage", span="", file="LayoutPage.generated.cs"];
m2_7 [label="Entry Hangfire.SqlServer.SqlCommandSet.SqlCommandSet()", span="68-68", cluster="Hangfire.SqlServer.SqlCommandSet.SqlCommandSet()", file="SqlCommandBatch.cs"];
m2_43 [label="Entry Hangfire.SqlServer.SqlCommandSet.ExecuteNonQuery()", span="97-97", cluster="Hangfire.SqlServer.SqlCommandSet.ExecuteNonQuery()", file="SqlCommandBatch.cs"];
m2_23 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="SqlCommandBatch.cs"];
m2_24 [label="Entry Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", span="75-75", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", file="SqlCommandBatch.cs"];
m2_25 [label="_commandSet != null && _commandSet.CommandCount > 0", span="77-77", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_26 [label="_commandSet.Connection = Connection as SqlConnection", span="79-79", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_35 [label=_commandList, span="98-98", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_27 [label="_commandSet.Transaction = Transaction as SqlTransaction", span="80-80", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_34 [label="_commandSet.ExecuteNonQuery()", span="95-95", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_40 [label="command.ExecuteNonQuery()", span="108-108", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_36 [label="command.Connection = Connection", span="100-100", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_28 [label="var batchTimeout = CommandTimeout ?? _defaultTimeout", span="82-82", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_29 [label="batchTimeout > 0", span="84-84", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_30 [label="batchTimeout = batchTimeout * _commandSet.CommandCount", span="86-86", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_33 [label="_commandSet.BatchCommand.CommandTimeout = batchTimeout", span="94-94", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_31 [label="CommandBatchMaxTimeout.HasValue", span="88-88", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_32 [label="batchTimeout = Math.Min(CommandBatchMaxTimeout.Value, batchTimeout)", span="90-90", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_37 [label="command.Transaction = Transaction", span="101-101", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_38 [label="CommandTimeout.HasValue", span="103-103", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_39 [label="command.CommandTimeout = CommandTimeout.Value", span="105-105", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", color=green, community=0, file="SqlCommandBatch.cs"];
m2_41 [label="Exit Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", span="75-75", cluster="Hangfire.SqlServer.SqlCommandBatch.ExecuteNonQuery()", file="SqlCommandBatch.cs"];
m2_17 [label="Entry Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", span="63-63", cluster="Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", file="SqlCommandBatch.cs"];
m2_18 [label="_commandSet != null && command is SqlCommand", span="65-65", cluster="Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", color=green, community=0, file="SqlCommandBatch.cs"];
m2_19 [label="_commandSet.Append((SqlCommand)command)", span="67-67", cluster="Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", color=green, community=0, file="SqlCommandBatch.cs"];
m2_20 [label="_commandList.Add(command)", span="71-71", cluster="Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", color=green, community=0, file="SqlCommandBatch.cs"];
m2_21 [label="Exit Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", span="63-63", cluster="Hangfire.SqlServer.SqlCommandBatch.Append(DbCommand)", file="SqlCommandBatch.cs"];
m2_42 [label="Entry System.Math.Min(int, int)", span="0-0", cluster="System.Math.Min(int, int)", file="SqlCommandBatch.cs"];
m2_22 [label="Entry Hangfire.SqlServer.SqlCommandSet.Append(SqlCommand)", span="91-91", cluster="Hangfire.SqlServer.SqlCommandSet.Append(SqlCommand)", file="SqlCommandBatch.cs"];
m2_14 [label="Entry SqlCommand.cstr", span="", cluster="SqlCommand.cstr", file="SqlCommandBatch.cs"];
m2_44 [label="Entry Unk.ExecuteNonQuery", span="", cluster="Unk.ExecuteNonQuery", file="SqlCommandBatch.cs"];
m2_0 [label="Entry Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", span="29-29", cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", file="SqlCommandBatch.cs"];
m2_1 [label="SqlCommandSet.IsAvailable && preferBatching", span="31-31", cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", color=green, community=0, file="SqlCommandBatch.cs"];
m2_2 [label="_commandSet = new SqlCommandSet()", span="35-35", cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", color=green, community=0, file="SqlCommandBatch.cs"];
m2_3 [label="_defaultTimeout = _commandSet.BatchCommand.CommandTimeout", span="36-36", cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", color=green, community=0, file="SqlCommandBatch.cs"];
m2_4 [label=Exception, span="38-38", cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", color=green, community=0, file="SqlCommandBatch.cs"];
m2_5 [label="_commandSet = null", span="40-40", cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", color=green, community=0, file="SqlCommandBatch.cs"];
m2_6 [label="Exit Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", span="29-29", cluster="Hangfire.SqlServer.SqlCommandBatch.SqlCommandBatch(bool)", file="SqlCommandBatch.cs"];
m2_8 [label="Entry Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", span="51-51", cluster="Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", file="SqlCommandBatch.cs"];
m2_9 [label="var command = new SqlCommand(commandText)", span="53-53", cluster="Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", color=green, community=0, file="SqlCommandBatch.cs"];
m2_10 [label=parameters, span="55-55", cluster="Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", color=green, community=0, file="SqlCommandBatch.cs"];
m2_11 [label="command.Parameters.Add(parameter)", span="57-57", cluster="Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", color=green, community=0, file="SqlCommandBatch.cs"];
m2_12 [label="Append(command)", span="60-60", cluster="Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", color=green, community=0, file="SqlCommandBatch.cs"];
m2_13 [label="Exit Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", span="51-51", cluster="Hangfire.SqlServer.SqlCommandBatch.Append(string, params SqlParameter[])", file="SqlCommandBatch.cs"];
m2_16 [label="Entry Unk.Append", span="", cluster="Unk.Append", file="SqlCommandBatch.cs"];
m2_15 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="SqlCommandBatch.cs"];
m2_45 [label="Hangfire.SqlServer.SqlCommandBatch", span="", file="SqlCommandBatch.cs"];
m3_6 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlCommandSet.cs"];
m3_8 [label="Entry HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="54-54", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlCommandSet.cs"];
m3_9 [label="transaction.IncrementCounter(''stats:succeeded'')", span="56-56", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", color=green, community=0, file="SqlCommandSet.cs"];
m3_10 [label="Exit HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="54-54", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlCommandSet.cs"];
m3_11 [label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="33-33", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="SqlCommandSet.cs"];
m3_3 [label="Entry HangFire.States.SucceededState.SerializeData()", span="44-44", cluster="HangFire.States.SucceededState.SerializeData()", file="SqlCommandSet.cs"];
m3_4 [label="return new Dictionary<string, string>\r\n            {\r\n                { ''SucceededAt'',  JobHelper.ToStringTimestamp(SucceededAt)}\r\n            };", span="46-49", cluster="HangFire.States.SucceededState.SerializeData()", color=green, community=0, file="SqlCommandSet.cs"];
m3_5 [label="Exit HangFire.States.SucceededState.SerializeData()", span="44-44", cluster="HangFire.States.SucceededState.SerializeData()", file="SqlCommandSet.cs"];
m3_15 [label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="35-35", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="SqlCommandSet.cs"];
m3_0 [label="Entry HangFire.States.SucceededState.SucceededState()", span="27-27", cluster="HangFire.States.SucceededState.SucceededState()", file="SqlCommandSet.cs"];
m3_1 [label="SucceededAt = DateTime.UtcNow", span="29-29", cluster="HangFire.States.SucceededState.SucceededState()", color=green, community=0, file="SqlCommandSet.cs"];
m3_2 [label="Exit HangFire.States.SucceededState.SucceededState()", span="27-27", cluster="HangFire.States.SucceededState.SucceededState()", file="SqlCommandSet.cs"];
m3_7 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="SqlCommandSet.cs"];
m3_12 [label="Entry HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="59-59", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlCommandSet.cs"];
m3_13 [label="transaction.DecrementCounter(''stats:succeeded'')", span="61-61", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", color=green, community=0, file="SqlCommandSet.cs"];
m3_14 [label="Exit HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="59-59", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlCommandSet.cs"];
m3_16 [label="HangFire.States.SucceededState", span="", file="SqlCommandSet.cs"];
m4_5 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerConnection.cs"];
m4_26 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerConnection.cs"];
m4_28 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerConnection.cs"];
m4_44 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="43-43", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerConnection.cs"];
m4_6 [label="Entry HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", span="40-40", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_7 [label="recurringJobId == null", span="45-45", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_9 [label="job == null", span="46-46", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_11 [label="cronExpression == null", span="47-47", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_13 [label="CrontabSchedule.Parse(cronExpression)", span="49-49", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_16 [label="var invocationData = InvocationData.Serialize(job)", span="54-54", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_18 [label="recurringJob[''Cron''] = cronExpression", span="57-57", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_20 [label="transaction.SetRangeInHash(\r\n                        String.Format(''recurring-job:{0}'', recurringJobId), \r\n                        recurringJob)", span="61-63", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_21 [label="transaction.AddToSet(''recurring-jobs'', recurringJobId)", span="65-65", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_8 [label="throw new ArgumentNullException(''recurringJobId'');", span="45-45", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_10 [label="throw new ArgumentNullException(''job'');", span="46-46", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_12 [label="throw new ArgumentNullException(''cronExpression'');", span="47-47", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_14 [label="var connection = _storage.GetConnection()", span="51-51", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_15 [label="var recurringJob = new Dictionary<string, string>()", span="53-53", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_19 [label="var transaction = connection.CreateWriteTransaction()", span="59-59", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_17 [label="recurringJob[''Job''] = JobHelper.ToJson(invocationData)", span="56-56", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_22 [label="transaction.Commit()", span="67-67", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_23 [label="Exit HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", span="40-40", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="SqlServerConnection.cs"];
m4_29 [label="Entry HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27", cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="SqlServerConnection.cs"];
m4_33 [label="Entry HangFire.Storage.IWriteOnlyTransaction.Commit()", span="54-54", cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="SqlServerConnection.cs"];
m4_43 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveHash(string)", span="52-52", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveHash(string)", file="SqlServerConnection.cs"];
m4_0 [label="Entry HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", span="33-33", cluster="HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", file="SqlServerConnection.cs"];
m4_1 [label="storage == null", span="35-35", cluster="HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", file="SqlServerConnection.cs"];
m4_3 [label="_storage = storage", span="37-37", cluster="HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", file="SqlServerConnection.cs"];
m4_2 [label="throw new ArgumentNullException(''storage'');", span="35-35", cluster="HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", file="SqlServerConnection.cs"];
m4_4 [label="Exit HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", span="33-33", cluster="HangFire.RecurringJobManager.RecurringJobManager(HangFire.JobStorage)", file="SqlServerConnection.cs"];
m4_31 [label="Entry HangFire.Storage.IWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="51-51", cluster="HangFire.Storage.IWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs"];
m4_32 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", span="41-41", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerConnection.cs"];
m4_30 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SqlServerConnection.cs"];
m4_24 [label="Entry Unk.Parse", span="", cluster="Unk.Parse", file="SqlServerConnection.cs"];
m4_27 [label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65", cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="SqlServerConnection.cs"];
m4_34 [label="Entry HangFire.RecurringJobManager.RemoveIfExists(string)", span="72-72", cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs"];
m4_35 [label="recurringJobId == null", span="74-74", cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs"];
m4_39 [label="transaction.RemoveHash(String.Format(''recurring-job:{0}'', recurringJobId))", span="79-79", cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs"];
m4_40 [label="transaction.RemoveFromSet(''recurring-jobs'', recurringJobId)", span="80-80", cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs"];
m4_36 [label="throw new ArgumentNullException(''recurringJobId'');", span="74-74", cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs"];
m4_37 [label="var connection = _storage.GetConnection()", span="76-76", cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs"];
m4_38 [label="var transaction = connection.CreateWriteTransaction()", span="77-77", cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs"];
m4_41 [label="transaction.Commit()", span="82-82", cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs"];
m4_42 [label="Exit HangFire.RecurringJobManager.RemoveIfExists(string)", span="72-72", cluster="HangFire.RecurringJobManager.RemoveIfExists(string)", file="SqlServerConnection.cs"];
m4_45 [label="HangFire.RecurringJobManager", span="", file="SqlServerConnection.cs"];
m5_0 [label="Entry HangFire.Filters.PerformingContext.PerformingContext(HangFire.Filters.PerformContext)", span="4-4", cluster="HangFire.Filters.PerformingContext.PerformingContext(HangFire.Filters.PerformContext)", file="SqlServerDistributedLock.cs"];
m5_1 [label="Exit HangFire.Filters.PerformingContext.PerformingContext(HangFire.Filters.PerformContext)", span="4-4", cluster="HangFire.Filters.PerformingContext.PerformingContext(HangFire.Filters.PerformContext)", file="SqlServerDistributedLock.cs"];
m6_110 [label="Entry Unk.OnClientException", span="", cluster="Unk.OnClientException", file="SqlServerJobQueue.cs"];
m6_31 [label="Entry Unk.GetFilters", span="", cluster="Unk.GetFilters", file="SqlServerJobQueue.cs"];
m6_17 [label="var invocationData = JobHelper.FromJson<InvocationData>(job.InvocationData)", span="69-69", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m6_15 [label="return null;", span="64-64", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m6_0 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", span="21-21", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs"];
m6_1 [label="var storage = new Mock<JobStorage>()", span="23-23", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs"];
m6_2 [label="var connection = new Mock<IStorageConnection>()", span="24-24", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs"];
m6_3 [label="var job = Job.FromExpression(() => TestMethod())", span="25-25", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs"];
m6_27 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_26 [label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0", cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="SqlServerJobQueue.cs"];
m6_363 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.TestMethod()", span="381-381", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.TestMethod()", file="SqlServerJobQueue.cs"];
m6_75 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", span="84-84", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_76 [label="var process = CreateProcess()", span="86-86", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_77 [label="var result = process.Run(_context.Object)", span="88-88", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_78 [label="Assert.Equal(JobId, result)", span="90-90", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_79 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", span="84-84", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_311 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", span="334-334", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_313 [label="_filters.Add(filter.Object)", span="338-338", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_315 [label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws(exception)", span="341-342", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_317 [label="var process = CreateProcess()", span="347-347", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_318 [label="var jobId = process.Run(_context.Object)", span="350-350", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_312 [label="var filter = new Mock<IClientFilter>()", span="337-337", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_314 [label="var exception = new InvalidOperationException()", span="340-340", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_316 [label="filter.Setup(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception)))\r\n                .Callback((CreatedContext x) => x.ExceptionHandled = true)", span="344-345", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_319 [label="Assert.Null(jobId)", span="353-353", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_320 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", span="334-334", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_222 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="243-243", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs"];
m6_225 [label="_filters.Add(outerFilter.Object)", span="249-249", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs"];
m6_226 [label="_filters.Add(innerFilter.Object)", span="250-250", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs"];
m6_228 [label="var process = CreateProcess()", span="255-255", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs"];
m6_229 [label="process.Run(_context.Object)", span="258-258", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs"];
m6_223 [label="var outerFilter = new Mock<IClientFilter>()", span="246-246", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs"];
m6_224 [label="var innerFilter = new Mock<IClientFilter>()", span="247-247", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs"];
m6_227 [label="innerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Callback((CreatingContext context) => context.Canceled = true)", span="252-253", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs"];
m6_230 [label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Canceled)))", span="261-261", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs"];
m6_231 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="243-243", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="SqlServerJobQueue.cs"];
m6_28 [label="x.GetFilters(It.IsNotNull<Job>())", span="35-35", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_16 [label="job == null", span="67-67", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m6_333 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="357-357", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs"];
m6_336 [label="_filters.Add(outerFilter.Object)", span="363-363", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs"];
m6_337 [label="_filters.Add(innerFilter.Object)", span="364-364", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs"];
m6_338 [label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="366-367", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs"];
m6_340 [label="var process = CreateProcess()", span="372-372", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs"];
m6_341 [label="Assert.DoesNotThrow(() => process.Run(_context.Object))", span="375-375", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs"];
m6_334 [label="var outerFilter = new Mock<IClientFilter>()", span="360-360", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs"];
m6_335 [label="var innerFilter = new Mock<IClientFilter>()", span="361-361", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs"];
m6_339 [label="innerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>()))\r\n                .Callback((CreatedContext x) => x.ExceptionHandled = true)", span="369-370", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs"];
m6_342 [label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception != null)))", span="378-378", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs"];
m6_343 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="357-357", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="SqlServerJobQueue.cs"];
m6_13 [label="job == null", span="60-60", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m6_22 [label="Entry DynamicParameters.cstr", span="", cluster="DynamicParameters.cstr", file="SqlServerJobQueue.cs"];
m6_344 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="SqlServerJobQueue.cs"];
m6_39 [label="Entry Unk.Run", span="", cluster="Unk.Run", file="SqlServerJobQueue.cs"];
m6_49 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenInnerProcessIsNull()", span="52-52", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenInnerProcessIsNull()", file="SqlServerJobQueue.cs"];
m6_50 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new JobCreationProcess(_filterProvider.Object, null))", span="54-55", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenInnerProcessIsNull()", file="SqlServerJobQueue.cs"];
m6_51 [label="Assert.Equal(''innerProcess'', exception.ParamName)", span="57-57", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenInnerProcessIsNull()", file="SqlServerJobQueue.cs"];
m6_52 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenInnerProcessIsNull()", span="52-52", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenInnerProcessIsNull()", file="SqlServerJobQueue.cs"];
m6_274 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="SqlServerJobQueue.cs"];
m6_30 [label="HangFire.SqlServer.SqlServerFetcher", span="", cluster="Unk.>", file="SqlServerJobQueue.cs"];
m6_24 [label="TestMethod()", span="25-25", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_99 [label="Entry Mock<IClientExceptionFilter>.cstr", span="", cluster="Mock<IClientExceptionFilter>.cstr", file="SqlServerJobQueue.cs"];
m6_40 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenFilterProviderIsNull()", span="43-43", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenFilterProviderIsNull()", file="SqlServerJobQueue.cs"];
m6_41 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new JobCreationProcess(null, _innerProcess.Object))", span="45-46", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenFilterProviderIsNull()", file="SqlServerJobQueue.cs"];
m6_42 [label="Assert.Equal(''filterProvider'', exception.ParamName)", span="48-48", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenFilterProviderIsNull()", file="SqlServerJobQueue.cs"];
m6_43 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenFilterProviderIsNull()", span="43-43", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Ctor_ThrowsAnException_WhenFilterProviderIsNull()", file="SqlServerJobQueue.cs"];
m6_29 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_61 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", span="385-385", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", file="SqlServerJobQueue.cs"];
m6_364 [label="return new JobCreationProcess(_filterProvider.Object, _innerProcess.Object);", span="387-387", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", file="SqlServerJobQueue.cs"];
m6_365 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", span="385-385", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.CreateProcess()", file="SqlServerJobQueue.cs"];
m6_25 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_176 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="195-195", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs"];
m6_179 [label="_filters.Add(outerFilter.Object)", span="201-201", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs"];
m6_180 [label="_filters.Add(innerFilter.Object)", span="202-202", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs"];
m6_185 [label="var process = CreateProcess()", span="209-209", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs"];
m6_186 [label="process.Run(_context.Object)", span="212-212", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs"];
m6_177 [label="var outerFilter = new Mock<IClientFilter>()", span="198-198", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs"];
m6_178 [label="var innerFilter = new Mock<IClientFilter>()", span="199-199", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs"];
m6_181 [label="outerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>())).InSequence()", span="204-204", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs"];
m6_184 [label="outerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>())).InSequence()", span="207-207", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs"];
m6_182 [label="innerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>())).InSequence()", span="205-205", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs"];
m6_183 [label="innerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>())).InSequence()", span="206-206", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs"];
m6_187 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="195-195", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="SqlServerJobQueue.cs"];
m6_20 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SqlServerJobQueue.cs"];
m6_175 [label="Entry Unk.OnCreated", span="", cluster="Unk.OnCreated", file="SqlServerJobQueue.cs"];
m6_91 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", span="105-105", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs"];
m6_93 [label="_filters.Add(filter.Object)", span="109-109", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs"];
m6_94 [label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="111-112", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs"];
m6_95 [label="var process = CreateProcess()", span="114-114", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs"];
m6_96 [label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="117-118", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs"];
m6_92 [label="var filter = new Mock<IClientExceptionFilter>()", span="108-108", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs"];
m6_97 [label="filter.Verify(x => x.OnClientException(\r\n                It.IsNotNull<ClientExceptionContext>()))", span="121-122", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs"];
m6_98 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", span="105-105", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="SqlServerJobQueue.cs"];
m6_4 [label="var state = new Mock<IState>()", span="26-26", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs"];
m6_5 [label="_context = new Mock<CreateContext>(storage.Object, connection.Object, job, state.Object)\r\n            {\r\n                CallBase = true\r\n            }", span="28-31", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs"];
m6_14 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="187-187", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerJobQueue.cs"];
m6_6 [label="_filters = new List<object>()", span="33-33", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs"];
m6_18 [label="Entry Mock<IJobFilterProvider>.cstr", span="", cluster="Mock<IJobFilterProvider>.cstr", file="SqlServerJobQueue.cs"];
m6_7 [label="_filterProvider = new Mock<IJobFilterProvider>()", span="34-34", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs"];
m6_8 [label="_filterProvider.Setup(x => x.GetFilters(It.IsNotNull<Job>())).Returns(\r\n                _filters.Select(f => new JobFilter(f, JobFilterScope.Type, null)))", span="35-36", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs"];
m6_10 [label="_innerProcess.Setup(x => x.Run((_context.Object))).Returns(JobId)", span="39-39", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs"];
m6_12 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="SqlServerJobQueue.cs"];
m6_9 [label="_innerProcess = new Mock<IJobCreationProcess>()", span="38-38", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs"];
m6_11 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", span="21-21", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.JobCreationProcessFacts()", file="SqlServerJobQueue.cs"];
m6_19 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="SqlServerJobQueue.cs"];
m6_265 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", span="289-289", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_267 [label="_filters.Add(filter.Object)", span="293-293", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_269 [label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws(exception)", span="296-297", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_270 [label="var process = CreateProcess()", span="299-299", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_271 [label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="302-303", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_266 [label="var filter = new Mock<IClientFilter>()", span="292-292", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_268 [label="var exception = new InvalidOperationException()", span="295-295", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_272 [label="filter.Verify(x => x.OnCreated(It.Is<CreatedContext>(\r\n                context => context.Exception == exception)))", span="306-307", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_273 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", span="289-289", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_288 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="311-311", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs"];
m6_291 [label="_filters.Add(outerFilter.Object)", span="317-317", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs"];
m6_292 [label="_filters.Add(innerFilter.Object)", span="318-318", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs"];
m6_294 [label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws(exception)", span="321-322", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs"];
m6_295 [label="var process = CreateProcess()", span="324-324", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs"];
m6_296 [label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="327-328", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs"];
m6_289 [label="var outerFilter = new Mock<IClientFilter>()", span="314-314", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs"];
m6_290 [label="var innerFilter = new Mock<IClientFilter>()", span="315-315", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs"];
m6_293 [label="var exception = new InvalidOperationException()", span="320-320", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs"];
m6_297 [label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception)))", span="330-330", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs"];
m6_298 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="311-311", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="SqlServerJobQueue.cs"];
m6_100 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="SqlServerJobQueue.cs"];
m6_23 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_244 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", span="265-265", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs"];
m6_246 [label="_filters.Add(filter.Object)", span="269-269", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs"];
m6_248 [label="var process = CreateProcess()", span="274-274", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs"];
m6_249 [label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="277-278", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs"];
m6_250 [label="_innerProcess.Verify(\r\n                x => x.Run(It.IsAny<CreateContext>()), \r\n                Times.Never)", span="281-283", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs"];
m6_247 [label="filter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Throws<InvalidOperationException>()", span="271-272", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs"];
m6_245 [label="var filter = new Mock<IClientFilter>()", span="268-268", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs"];
m6_251 [label="filter.Verify(x => x.OnCreated(It.IsAny<CreatedContext>()), Times.Never)", span="285-285", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs"];
m6_252 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", span="265-265", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="SqlServerJobQueue.cs"];
m6_122 [label="Entry Unk.InSequence", span="", cluster="Unk.InSequence", file="SqlServerJobQueue.cs"];
m6_48 [label="Entry JobCreationProcess.cstr", span="", cluster="JobCreationProcess.cstr", file="SqlServerJobQueue.cs"];
m6_65 [label="Entry Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", span="51-51", cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="SqlServerJobQueue.cs"];
m6_275 [label="Entry Unk.Throws", span="", cluster="Unk.Throws", file="SqlServerJobQueue.cs"];
m6_145 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="SqlServerJobQueue.cs"];
m6_111 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="126-126", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs"];
m6_116 [label="_filters.Add(filter1.Object)", span="135-135", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs"];
m6_117 [label="_filters.Add(filter2.Object)", span="136-136", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs"];
m6_118 [label="_innerProcess\r\n                .Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="138-140", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs"];
m6_119 [label="var process = CreateProcess()", span="142-142", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs"];
m6_120 [label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="145-146", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs"];
m6_112 [label="var filter1 = new Mock<IClientExceptionFilter>()", span="129-129", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs"];
m6_115 [label="filter1.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>())).InSequence()", span="133-133", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs"];
m6_113 [label="var filter2 = new Mock<IClientExceptionFilter>()", span="130-130", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs"];
m6_114 [label="filter2.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>())).InSequence()", span="132-132", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs"];
m6_121 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="126-126", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="SqlServerJobQueue.cs"];
m6_351 [label="Entry lambda expression", span="370-370", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_88 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_89 [label="process.Run(_context.Object)", span="101-101", cluster="lambda expression", color=green, community=0, file="SqlServerJobQueue.cs"];
m6_90 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_37 [label="x.Run((_context.Object))", span="39-39", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_46 [label="new JobCreationProcess(null, _innerProcess.Object)", span="46-46", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_54 [label="new JobCreationProcess(_filterProvider.Object, null)", span="55-55", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_73 [label="x.Run(_context.Object)", span="79-79", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_105 [label="process.Run(_context.Object)", span="118-118", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_133 [label="process.Run(_context.Object)", span="146-146", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_257 [label="process.Run(_context.Object)", span="278-278", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_280 [label="process.Run(_context.Object)", span="303-303", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_303 [label="process.Run(_context.Object)", span="328-328", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_355 [label="process.Run(_context.Object)", span="375-375", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_86 [label="x.Run(It.IsAny<CreateContext>())", span="96-96", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_102 [label="x.Run(It.IsAny<CreateContext>())", span="111-111", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_108 [label="x.OnClientException(\r\n                It.IsNotNull<ClientExceptionContext>())", span="121-122", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_124 [label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="132-132", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_127 [label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="133-133", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_130 [label="x.Run(It.IsAny<CreateContext>())", span="139-139", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_147 [label="x.Run(It.IsAny<CreateContext>())", span="155-155", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_150 [label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="159-159", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_166 [label="x.OnCreating(It.IsNotNull<CreatingContext>())", span="179-179", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_170 [label="x.Run(It.IsAny<CreateContext>())", span="181-181", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_173 [label="x.OnCreated(It.IsNotNull<CreatedContext>())", span="184-184", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_189 [label="x.OnCreating(It.IsAny<CreatingContext>())", span="204-204", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_192 [label="x.OnCreating(It.IsAny<CreatingContext>())", span="205-205", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_195 [label="x.OnCreated(It.IsAny<CreatedContext>())", span="206-206", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_198 [label="x.OnCreated(It.IsAny<CreatedContext>())", span="207-207", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_211 [label="x.OnCreating(It.IsAny<CreatingContext>())", span="224-224", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_217 [label="x.Run(It.IsAny<CreateContext>())", span="236-236", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_220 [label="x.OnCreated(It.IsAny<CreatedContext>())", span="239-239", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_233 [label="x.OnCreating(It.IsAny<CreatingContext>())", span="252-252", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_239 [label="x.OnCreated(It.Is<CreatedContext>(context => context.Canceled))", span="261-261", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_254 [label="x.OnCreating(It.IsAny<CreatingContext>())", span="271-271", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_260 [label="x.Run(It.IsAny<CreateContext>())", span="282-282", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_263 [label="x.OnCreated(It.IsAny<CreatedContext>())", span="285-285", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_283 [label="x.OnCreated(It.Is<CreatedContext>(\r\n                context => context.Exception == exception))", span="306-307", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_277 [label="x.Run(It.IsAny<CreateContext>())", span="296-296", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_306 [label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception))", span="330-330", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_300 [label="x.Run(It.IsAny<CreateContext>())", span="321-321", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_325 [label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception))", span="344-344", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_322 [label="x.Run(It.IsAny<CreateContext>())", span="341-341", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_346 [label="x.Run(It.IsAny<CreateContext>())", span="366-366", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_349 [label="x.OnCreated(It.IsAny<CreatedContext>())", span="369-369", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_358 [label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception != null))", span="378-378", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_32 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_36 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_38 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_45 [label="Entry lambda expression", span="46-46", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_47 [label="Exit lambda expression", span="46-46", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_53 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_55 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_63 [label="process.Run(null)", span="66-66", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_72 [label="Entry lambda expression", span="79-79", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_74 [label="Exit lambda expression", span="79-79", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_85 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_101 [label="Entry lambda expression", span="111-111", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_104 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_106 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_129 [label="Entry lambda expression", span="139-139", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_132 [label="Entry lambda expression", span="146-146", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_134 [label="Exit lambda expression", span="146-146", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_146 [label="Entry lambda expression", span="155-155", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_169 [label="Entry lambda expression", span="181-181", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_216 [label="Entry lambda expression", span="236-236", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_256 [label="Entry lambda expression", span="278-278", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_258 [label="Exit lambda expression", span="278-278", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_259 [label="Entry lambda expression", span="282-282", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_276 [label="Entry lambda expression", span="296-296", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_279 [label="Entry lambda expression", span="303-303", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_281 [label="Exit lambda expression", span="303-303", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_299 [label="Entry lambda expression", span="321-321", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_302 [label="Entry lambda expression", span="328-328", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_304 [label="Exit lambda expression", span="328-328", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_321 [label="Entry lambda expression", span="341-341", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_345 [label="Entry lambda expression", span="366-366", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_354 [label="Entry lambda expression", span="375-375", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_356 [label="Exit lambda expression", span="375-375", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_62 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_87 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_103 [label="Exit lambda expression", span="111-111", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_107 [label="Entry lambda expression", span="121-122", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_109 [label="Exit lambda expression", span="121-122", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_123 [label="Entry lambda expression", span="132-132", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_125 [label="Exit lambda expression", span="132-132", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_126 [label="Entry lambda expression", span="133-133", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_128 [label="Exit lambda expression", span="133-133", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_131 [label="Exit lambda expression", span="139-139", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_148 [label="Exit lambda expression", span="155-155", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_149 [label="Entry lambda expression", span="159-159", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_151 [label="Exit lambda expression", span="159-159", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_165 [label="Entry lambda expression", span="179-179", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_167 [label="Exit lambda expression", span="179-179", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_171 [label="Exit lambda expression", span="181-181", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_172 [label="Entry lambda expression", span="184-184", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_174 [label="Exit lambda expression", span="184-184", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_188 [label="Entry lambda expression", span="204-204", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_190 [label="Exit lambda expression", span="204-204", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_191 [label="Entry lambda expression", span="205-205", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_193 [label="Exit lambda expression", span="205-205", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_194 [label="Entry lambda expression", span="206-206", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_196 [label="Exit lambda expression", span="206-206", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_197 [label="Entry lambda expression", span="207-207", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_199 [label="Exit lambda expression", span="207-207", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_210 [label="Entry lambda expression", span="224-224", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_212 [label="Exit lambda expression", span="224-224", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_218 [label="Exit lambda expression", span="236-236", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_219 [label="Entry lambda expression", span="239-239", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_221 [label="Exit lambda expression", span="239-239", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_232 [label="Entry lambda expression", span="252-252", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_234 [label="Exit lambda expression", span="252-252", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_238 [label="Entry lambda expression", span="261-261", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_240 [label="Exit lambda expression", span="261-261", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_241 [label="Entry lambda expression", span="261-261", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_253 [label="Entry lambda expression", span="271-271", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_255 [label="Exit lambda expression", span="271-271", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_261 [label="Exit lambda expression", span="282-282", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_262 [label="Entry lambda expression", span="285-285", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_264 [label="Exit lambda expression", span="285-285", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_282 [label="Entry lambda expression", span="306-307", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_284 [label="Exit lambda expression", span="306-307", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_285 [label="Entry lambda expression", span="307-307", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_278 [label="Exit lambda expression", span="296-296", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_305 [label="Entry lambda expression", span="330-330", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_307 [label="Exit lambda expression", span="330-330", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_308 [label="Entry lambda expression", span="330-330", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_301 [label="Exit lambda expression", span="321-321", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_324 [label="Entry lambda expression", span="344-344", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_326 [label="Exit lambda expression", span="344-344", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_327 [label="Entry lambda expression", span="344-344", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_323 [label="Exit lambda expression", span="341-341", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_347 [label="Exit lambda expression", span="366-366", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_348 [label="Entry lambda expression", span="369-369", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_350 [label="Exit lambda expression", span="369-369", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_357 [label="Entry lambda expression", span="378-378", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_359 [label="Exit lambda expression", span="378-378", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_360 [label="Entry lambda expression", span="378-378", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_34 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_33 [label="new JobFilter(f, JobFilterScope.Type, null)", span="36-36", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_64 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_152 [label="Entry lambda expression", span="160-160", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_213 [label="Entry lambda expression", span="225-225", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_235 [label="Entry lambda expression", span="253-253", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_286 [label="context.Exception == exception", span="307-307", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_309 [label="context.Exception == exception", span="330-330", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_328 [label="context.Exception == exception", span="344-344", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_330 [label="Entry lambda expression", span="345-345", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_243 [label="Exit lambda expression", span="261-261", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_242 [label="context.Canceled", span="261-261", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_287 [label="Exit lambda expression", span="307-307", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_310 [label="Exit lambda expression", span="330-330", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_329 [label="Exit lambda expression", span="344-344", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_362 [label="Exit lambda expression", span="378-378", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_361 [label="context.Exception != null", span="378-378", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_154 [label="Exit lambda expression", span="160-160", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_153 [label="x.ExceptionHandled = true", span="160-160", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_215 [label="Exit lambda expression", span="225-225", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_214 [label="x.Canceled = true", span="225-225", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_237 [label="Exit lambda expression", span="253-253", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_236 [label="context.Canceled = true", span="253-253", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_332 [label="Exit lambda expression", span="345-345", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_331 [label="x.ExceptionHandled = true", span="345-345", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_352 [label="x.ExceptionHandled = true", span="370-370", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_353 [label="Exit lambda expression", span="370-370", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m6_135 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", span="152-152", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_136 [label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="155-156", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_139 [label="_filters.Add(filter.Object)", span="162-162", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_140 [label="var process = CreateProcess()", span="164-164", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_141 [label="var jobId = process.Run(_context.Object)", span="167-167", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_137 [label="var filter = new Mock<IClientExceptionFilter>()", span="158-158", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_138 [label="filter.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>()))\r\n                .Callback((ClientExceptionContext x) => x.ExceptionHandled = true)", span="159-160", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_142 [label="Assert.Null(jobId)", span="169-169", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_143 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", span="152-152", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_71 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SqlServerJobQueue.cs"];
m6_80 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", span="94-94", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerJobQueue.cs"];
m6_83 [label="Assert.Throws<InvalidOperationException>(() => process.Run(_context.Object))", span="101-101", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", color=green, community=0, file="SqlServerJobQueue.cs"];
m6_82 [label="var process = CreateProcess()", span="99-99", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerJobQueue.cs"];
m6_81 [label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="96-97", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerJobQueue.cs"];
m6_84 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", span="94-94", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="SqlServerJobQueue.cs"];
m6_168 [label="Entry Unk.OnCreating", span="", cluster="Unk.OnCreating", file="SqlServerJobQueue.cs"];
m6_56 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="61-61", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerJobQueue.cs"];
m6_57 [label="var process = CreateProcess()", span="63-63", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerJobQueue.cs"];
m6_58 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => process.Run(null))", span="65-66", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerJobQueue.cs"];
m6_59 [label="Assert.Equal(''context'', exception.ParamName)", span="68-68", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerJobQueue.cs"];
m6_60 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="61-61", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="SqlServerJobQueue.cs"];
m6_66 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", span="72-72", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", file="SqlServerJobQueue.cs"];
m6_67 [label="var process = CreateProcess()", span="74-74", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", file="SqlServerJobQueue.cs"];
m6_68 [label="process.Run(_context.Object)", span="76-76", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", file="SqlServerJobQueue.cs"];
m6_69 [label="_innerProcess.Verify(\r\n                x => x.Run(_context.Object), \r\n                Times.Once)", span="78-80", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", file="SqlServerJobQueue.cs"];
m6_70 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", span="72-72", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsInnerProcess_ToCreateAJob()", file="SqlServerJobQueue.cs"];
m6_144 [label="Entry Unk.Callback", span="", cluster="Unk.Callback", file="SqlServerJobQueue.cs"];
m6_155 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", span="173-173", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_157 [label="_filters.Add(filter.Object)", span="177-177", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_159 [label="_innerProcess.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .InSequence()", span="181-182", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_161 [label="var process = CreateProcess()", span="186-186", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_162 [label="process.Run(_context.Object)", span="189-189", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_156 [label="var filter = new Mock<IClientFilter>()", span="176-176", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_158 [label="filter.Setup(x => x.OnCreating(It.IsNotNull<CreatingContext>())).InSequence()", span="179-179", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_160 [label="filter.Setup(x => x.OnCreated(It.IsNotNull<CreatedContext>())).InSequence()", span="184-184", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_163 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", span="173-173", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="SqlServerJobQueue.cs"];
m6_21 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="SqlServerJobQueue.cs"];
m6_164 [label="Entry Mock<IClientFilter>.cstr", span="", cluster="Mock<IClientFilter>.cstr", file="SqlServerJobQueue.cs"];
m6_35 [label="Entry Hangfire.Common.JobFilter.JobFilter(object, Hangfire.Common.JobFilterScope, int?)", span="38-38", cluster="Hangfire.Common.JobFilter.JobFilter(object, Hangfire.Common.JobFilterScope, int?)", file="SqlServerJobQueue.cs"];
m6_200 [label="Entry Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", span="218-218", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_202 [label="_filters.Add(filter.Object)", span="222-222", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_204 [label="var process = CreateProcess()", span="227-227", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_205 [label="var jobId = process.Run(_context.Object)", span="230-230", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_207 [label="_innerProcess.Verify(\r\n                x => x.Run(It.IsAny<CreateContext>()), \r\n                Times.Never)", span="235-237", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_201 [label="var filter = new Mock<IClientFilter>()", span="221-221", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_203 [label="filter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Callback((CreatingContext x) => x.Canceled = true)", span="224-225", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_206 [label="Assert.Null(jobId)", span="233-233", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_208 [label="filter.Verify(x => x.OnCreated(It.IsAny<CreatedContext>()), Times.Never)", span="239-239", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_209 [label="Exit Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", span="218-218", cluster="Hangfire.Core.Tests.Client.JobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="SqlServerJobQueue.cs"];
m6_366 [label="Hangfire.Core.Tests.Client.JobCreationProcessFacts", span="", file="SqlServerJobQueue.cs"];
m6_368 [label=process, span="", file="SqlServerJobQueue.cs"];
m6_369 [label=process, span="", file="SqlServerJobQueue.cs"];
m6_370 [label=process, span="", file="SqlServerJobQueue.cs"];
m6_371 [label=process, span="", file="SqlServerJobQueue.cs"];
m6_372 [label=process, span="", file="SqlServerJobQueue.cs"];
m6_374 [label=process, span="", file="SqlServerJobQueue.cs"];
m6_377 [label=process, span="", file="SqlServerJobQueue.cs"];
m6_373 [label=exception, span="", file="SqlServerJobQueue.cs"];
m6_375 [label=exception, span="", file="SqlServerJobQueue.cs"];
m6_376 [label=exception, span="", file="SqlServerJobQueue.cs"];
m6_367 [label=process, span="", file="SqlServerJobQueue.cs"];
m7_67 [label=int, span="", cluster="Unk.>", file="SqlServerJobQueueMonitoringApi.cs"];
m7_123 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_124 [label="key == null", span="257-257", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_126 [label="toScore < fromScore", span="258-258", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_128 [label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="260-263", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_125 [label="throw new ArgumentNullException(''key'');", span="257-257", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_127 [label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="258-258", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_129 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_2 [label="throw new ArgumentNullException(nameof(storage));", span="44-44", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_3 [label="_storage = storage", span="45-45", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_5 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_7 [label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", span="48-48", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_8 [label="string sqlQuery = $@''select distinct(Queue) from [{_storage.SchemaName}].JobQueue with (nolock)''", span="50-50", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_9 [label=_cacheLock, span="52-52", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_10 [label="_queuesCache.Count == 0 || _cacheUpdated.Add(QueuesCacheTimeout) < DateTime.UtcNow", span="54-54", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_4 [label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", span="42-42", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_6 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="SqlServerJobQueueMonitoringApi.cs"];
m7_11 [label="var result = _storage.UseConnection(null, connection =>\r\n                    {\r\n                        return connection.Query(sqlQuery, commandTimeout: _storage.CommandTimeout).Select(x => (string) x.Queue).ToList();\r\n                    })", span="56-59", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="SqlServerJobQueueMonitoringApi.cs", color=green, community=0];
m7_12 [label="_queuesCache = result", span="61-61", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_88 [label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="40-40", cluster="Hangfire.Storage.InvocationData.Deserialize()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_219 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="416-416", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_220 [label="key == null", span="418-418", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_223 [label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="424-424", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_221 [label="throw new ArgumentNullException(''key'');", span="418-418", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_222 [label="string query = @''\r\nselect min([ExpireAt]) from HangFire.Hash\r\nwhere [Key] = @key''", span="420-422", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_224 [label="!result.HasValue", span="425-425", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_226 [label="return result.Value - DateTime.UtcNow;", span="427-427", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_225 [label="return TimeSpan.FromSeconds(-1);", span="425-425", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_227 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="416-416", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_13 [label="Entry Hangfire.SqlServer.SqlServerConnection.Dispose()", span="63-63", cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_14 [label=OwnsConnection, span="65-65", cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_15 [label="_connection.Dispose()", span="67-67", cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_157 [label="Entry Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="301-301", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_158 [label="serverId == null", span="303-303", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_160 [label="context == null", span="304-304", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_162 [label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="306-311", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_163 [label="_connection.Execute(\r\n                @''merge HangFire.Server with (holdlock) as Target ''\r\n                + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                + @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", span="313-319", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_159 [label="throw new ArgumentNullException(''serverId'');", span="303-303", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_161 [label="throw new ArgumentNullException(''context'');", span="304-304", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_164 [label="Exit Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="301-301", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_27 [label="Exit lambda expression", span="58-58", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_28 [label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="69-69", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_30 [label="return _storage.UseConnection(null, connection =>\r\n            {\r\n                // TODO: Remove cast to `int` to support `bigint`.\r\n                return connection.Query<JobIdDto>(\r\n                    sqlQuery,\r\n                    new { queue = queue, start = from + 1, end = @from + perPage },\r\n                    commandTimeout: _storage.CommandTimeout)\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();\r\n            });", span="79-89", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs", color=green, community=0];
m7_32 [label="Entry lambda expression", span="79-89", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_34 [label="Exit lambda expression", span="79-89", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_29 [label="var sqlQuery =\r\n$@''select r.JobId from (\r\n  select jq.JobId, row_number() over (order by jq.Id) as row_num \r\n  from [{_storage.SchemaName}].JobQueue jq with (nolock, forceseek)\r\n  where jq.Queue = @queue and jq.FetchedAt is null\r\n) as r\r\nwhere r.row_num between @start and @end''", span="71-77", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_31 [label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="69-69", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_33 [label="return connection.Query<JobIdDto>(\r\n                    sqlQuery,\r\n                    new { queue = queue, start = from + 1, end = @from + perPage },\r\n                    commandTimeout: _storage.CommandTimeout)\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();", span="82-88", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_35 [label="Exit Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="84-84", cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_46 [label="Entry lambda expression", span="109-109", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_150 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="SqlServerJobQueueMonitoringApi.cs"];
m7_16 [label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0", cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_171 [label="Entry Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="331-331", cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_172 [label="serverId == null", span="333-333", cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_174 [label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="335-337", cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_173 [label="throw new ArgumentNullException(''serverId'');", span="333-333", cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_175 [label="Exit Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="331-331", cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_190 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="361-361", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_191 [label="key == null", span="363-363", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_194 [label="return _connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList();", span="372-374", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_192 [label="throw new ArgumentNullException(''key'');", span="363-363", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_193 [label="var query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] ASC) as row_num \r\n	from Hangfire.[Set]\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="365-370", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_195 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="361-361", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_242 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="453-453", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_243 [label="key == null", span="455-455", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_246 [label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="461-461", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_244 [label="throw new ArgumentNullException(''key'');", span="455-455", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_245 [label="string query = @''\r\nselect min([ExpireAt]) from HangFire.List\r\nwhere [Key] = @key''", span="457-459", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_247 [label="!result.HasValue", span="462-462", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_249 [label="return result.Value - DateTime.UtcNow;", span="464-464", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_248 [label="return TimeSpan.FromSeconds(-1);", span="462-462", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_250 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="453-453", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_101 [label="Entry Hangfire.Storage.StateData.StateData()", span="21-21", cluster="Hangfire.Storage.StateData.StateData()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_213 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="405-405", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_214 [label="key == null", span="407-407", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_217 [label="return _connection.Query<long>(query, new { key = key }).Single();", span="413-413", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_215 [label="throw new ArgumentNullException(''key'');", span="407-407", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_216 [label="string query = @''\r\nselect count([Id]) from HangFire.Hash\r\nwhere [Key] = @key''", span="409-411", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_218 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="405-405", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_165 [label="Entry Hangfire.SqlServer.Entities.ServerData.ServerData()", span="20-20", cluster="Hangfire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_257 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="483-483", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_258 [label="key == null", span="485-485", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_261 [label="return _connection.Query<string>(query, new { key = key }).ToList();", span="492-492", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_259 [label="throw new ArgumentNullException(''key'');", span="485-485", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_260 [label="string query = @''\r\nselect [Value] from Hangfire.List\r\nwhere [Key] = @key\r\norder by [Id] desc''", span="487-490", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_262 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="483-483", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_26 [label="(string) x.Queue", span="58-58", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_21 [label="Exit lambda expression", span="56-59", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_71 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="154-154", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_72 [label="id == null", span="156-156", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_75 [label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="161-162", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_73 [label="throw new ArgumentNullException(''id'');", span="156-156", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_74 [label="string sql = \r\n                @''select InvocationData, StateName, Arguments, CreatedAt from HangFire.Job where Id = @id''", span="158-159", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_76 [label="jobData == null", span="164-164", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_78 [label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", span="167-167", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_79 [label="invocationData.Arguments = jobData.Arguments", span="168-168", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_85 [label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = jobData.StateName,\r\n                CreatedAt = jobData.CreatedAt,\r\n                LoadException = loadException\r\n            };", span="182-188", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_77 [label="return null;", span="164-164", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_82 [label="job = invocationData.Deserialize()", span="175-175", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_80 [label="Job job = null", span="170-170", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_81 [label="JobLoadException loadException = null", span="171-171", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_83 [label=JobLoadException, span="177-177", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_84 [label="loadException = ex", span="179-179", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_86 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="154-154", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_144 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="289-289", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_145 [label="key == null", span="291-291", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_147 [label="var result = _connection.Query<SqlHash>(\r\n                ''select Field, Value from HangFire.Hash with (forceseek) where [Key] = @key'',\r\n                new { key })\r\n                .ToDictionary(x => x.Field, x => x.Value)", span="293-296", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_146 [label="throw new ArgumentNullException(''key'');", span="291-291", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_148 [label="return result.Count != 0 ? result : null;", span="298-298", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_149 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="289-289", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_49 [label="throw new ArgumentNullException(''job'');", span="110-110", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_51 [label="throw new ArgumentNullException(''parameters'');", span="111-111", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_50 [label="parameters == null", span="111-111", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_52 [label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="113-116", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_22 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="SqlServerJobQueueMonitoringApi.cs"];
m7_23 [label="Entry Unk.Select", span="", cluster="Unk.Select", color=red, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_24 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="SqlServerJobQueueMonitoringApi.cs"];
m7_183 [label="Entry System.TimeSpan.Negate()", span="0-0", cluster="System.TimeSpan.Negate()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_102 [label="Entry Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="219-219", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_103 [label="id == null", span="221-221", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_105 [label="name == null", span="222-222", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_107 [label="_connection.Execute(\r\n                @''merge HangFire.JobParameter with (holdlock) as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="224-230", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_104 [label="throw new ArgumentNullException(''id'');", span="221-221", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_106 [label="throw new ArgumentNullException(''name'');", span="222-222", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_108 [label="Exit Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="219-219", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_39 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_41 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", color=green, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_40 [label="Entry string.Join(string, params string[])", span="0-0", cluster="string.Join(string, params string[])", file="SqlServerJobQueueMonitoringApi.cs"];
m7_42 [label="Entry Unk.Dequeue", span="", cluster="Unk.Dequeue", file="SqlServerJobQueueMonitoringApi.cs"];
m7_130 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_206 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_64 [label=sqlQuery, span="", cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_142 [label="Entry TransactionScope.cstr", span="", cluster="TransactionScope.cstr", file="SqlServerJobQueueMonitoringApi.cs"];
m7_197 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="377-377", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_198 [label="key == null", span="379-379", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_201 [label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="385-385", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_199 [label="throw new ArgumentNullException(''key'');", span="379-379", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_200 [label="string query = @''\r\nselect min([ExpireAt]) from HangFire.[Set]\r\nwhere [Key] = @key''", span="381-383", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_202 [label="!result.HasValue", span="386-386", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_204 [label="return result.Value - DateTime.UtcNow;", span="388-388", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_203 [label="return TimeSpan.FromSeconds(-1);", span="386-386", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_205 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="377-377", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_38 [label="Exit lambda expression", span="87-87", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_207 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="391-391", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_208 [label="key == null", span="393-393", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_211 [label="return _connection.Query<long?>(query, new { key = key }).Single() ?? 0;", span="402-402", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_209 [label="throw new ArgumentNullException(''key'');", span="393-393", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_210 [label="string query = @''\r\nselect sum(s.[Value]) from (select sum([Value]) as [Value] from HangFire.Counter\r\nwhere [Key] = @key\r\nunion all\r\nselect [Value] from HangFire.AggregatedCounter\r\nwhere [Key] = @key) as s''", span="395-400", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_212 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="391-391", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_25 [label="Entry lambda expression", span="58-58", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_69 [label=string, span="", cluster="Unk.ToString", file="SqlServerJobQueueMonitoringApi.cs"];
m7_100 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_66 [label=int, span="", cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_109 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="233-233", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_110 [label="id == null", span="235-235", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_112 [label="name == null", span="236-236", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_114 [label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="238-241", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_111 [label="throw new ArgumentNullException(''id'');", span="235-235", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_113 [label="throw new ArgumentNullException(''name'');", span="236-236", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_115 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="233-233", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_143 [label="Entry Unk.Complete", span="", cluster="Unk.Complete", file="SqlServerJobQueueMonitoringApi.cs"];
m7_166 [label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="322-322", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_167 [label="serverId == null", span="324-324", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_169 [label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="326-328", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_168 [label="throw new ArgumentNullException(''serverId'');", span="324-324", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_170 [label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="322-322", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_90 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="191-191", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_91 [label="jobId == null", span="193-193", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_94 [label="var sqlState = _connection.Query<SqlState>(sql, new { jobId = jobId }).SingleOrDefault()", span="201-201", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_92 [label="throw new ArgumentNullException(''jobId'');", span="193-193", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_93 [label="string sql = @''\r\nselect s.Name, s.Reason, s.Data\r\nfrom HangFire.State s\r\ninner join HangFire.Job j on j.StateId = s.Id\r\nwhere j.Id = @jobId''", span="195-199", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_95 [label="sqlState == null", span="202-202", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_97 [label="var data = new Dictionary<string, string>(\r\n                JobHelper.FromJson<Dictionary<string, string>>(sqlState.Data),\r\n                StringComparer.OrdinalIgnoreCase)", span="207-209", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_98 [label="return new StateData\r\n            {\r\n                Name = sqlState.Name,\r\n                Reason = sqlState.Reason,\r\n                Data = data\r\n            };", span="211-216", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_96 [label="return null;", span="204-204", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_99 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="191-191", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_17 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="SqlServerJobQueueMonitoringApi.cs"];
m7_58 [label=parameters, span="134-134", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_251 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="467-467", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_252 [label="key == null", span="469-469", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_255 [label="return _connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList();", span="478-480", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_253 [label="throw new ArgumentNullException(''key'');", span="469-469", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_254 [label="string query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] desc) as row_num \r\n	from Hangfire.List\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="471-476", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_256 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="467-467", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_18 [label="Entry Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="71-71", cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_181 [label="Entry System.TimeSpan.Duration()", span="0-0", cluster="System.TimeSpan.Duration()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_47 [label="(int)x.JobId", span="109-109", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_48 [label="Exit lambda expression", span="109-109", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_53 [label="Entry lambda expression", span="126-135", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_54 [label="var result = connection.Query(sqlQuery, new { queue = queue }).Single()", span="128-128", cluster="lambda expression", color=red, community=0, file="SqlServerJobQueueMonitoringApi.cs"];
m7_55 [label="return new EnqueuedAndFetchedCountDto\r\n                {\r\n                    EnqueuedCount = result.EnqueuedCount,\r\n                    FetchedCount = result.FetchedCount\r\n                };", span="130-134", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_56 [label="Exit lambda expression", span="126-135", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_59 [label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", span="", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_62 [label=int, span="", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_57 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SqlServerJobQueueMonitoringApi.cs"];
m7_61 [label=string, span="", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_60 [label=sqlQuery, span="", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_63 [label=int, span="", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_65 [label=string, span="", cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_37 [label="(int)x.JobId", span="87-87", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_43 [label="Entry lambda expression", span="102-111", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_44 [label="return connection.Query<JobIdDto>(\r\n                        fetchedJobsSql,\r\n                        new { queue = queue, start = from + 1, end = @from + perPage })\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();", span="105-110", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_45 [label="Exit lambda expression", span="102-111", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_151 [label="Entry lambda expression", span="296-296", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_154 [label="Entry lambda expression", span="296-296", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_152 [label="x.Field", span="296-296", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_153 [label="Exit lambda expression", span="296-296", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_155 [label="x.Value", span="296-296", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_156 [label="Exit lambda expression", span="296-296", cluster="lambda expression", file="SqlServerJobQueueMonitoringApi.cs"];
m7_19 [label="return new SqlServerWriteOnlyTransaction(_connection, _isolationLevel, _queueProviders);", span="73-73", cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_20 [label="Exit Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="71-71", cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_36 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SqlServerJobQueueMonitoringApi.cs"];
m7_131 [label="Entry Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_132 [label="key == null", span="268-268", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_134 [label="keyValuePairs == null", span="269-269", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_138 [label=keyValuePairs, span="280-280", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_139 [label="_connection.Execute(sql, new { key = key, field = keyValuePair.Key, value = keyValuePair.Value })", span="282-282", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_133 [label="throw new ArgumentNullException(''key'');", span="268-268", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_135 [label="throw new ArgumentNullException(''keyValuePairs'');", span="269-269", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_136 [label="string sql = @''\r\nmerge HangFire.Hash with (holdlock) as Target\r\nusing (VALUES (@key, @field, @value)) as Source ([Key], Field, Value)\r\non Target.[Key] = Source.[Key] and Target.Field = Source.Field\r\nwhen matched then update set Value = Source.Value\r\nwhen not matched then insert ([Key], Field, Value) values (Source.[Key], Source.Field, Source.Value);''", span="271-276", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_137 [label="var transaction = new TransactionScope()", span="278-278", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_140 [label="transaction.Complete()", span="285-285", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_141 [label="Exit Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_89 [label="Entry Hangfire.Storage.JobData.JobData()", span="21-21", cluster="Hangfire.Storage.JobData.JobData()", file="SqlServerJobQueueMonitoringApi.cs"];
m7_189 [label="Entry Unk.First", span="", cluster="Unk.First", file="SqlServerJobQueueMonitoringApi.cs"];
m7_228 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="430-430", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_229 [label="key == null", span="432-432", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_231 [label="name == null", span="433-433", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_234 [label="return _connection.Query<string>(query, new { key = key, field = name }).SingleOrDefault();", span="439-439", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_230 [label="throw new ArgumentNullException(''key'');", span="432-432", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_232 [label="throw new ArgumentNullException(''name'');", span="433-433", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_233 [label="string query = @''\r\nselect [Value] from HangFire.Hash\r\nwhere [Key] = @key and [Field] = @field''", span="435-437", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_235 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="430-430", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_184 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="352-352", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_185 [label="key == null", span="354-354", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_187 [label="return _connection.Query<int>(\r\n                ''select count([Key]) from HangFire.[Set] where [Key] = @key'',\r\n                new { key = key }).First();", span="356-358", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_186 [label="throw new ArgumentNullException(''key'');", span="354-354", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_188 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="352-352", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_68 [label=fetchedJobsSql, span="", cluster="Unk.Single", file="SqlServerJobQueueMonitoringApi.cs"];
m7_182 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_0 [label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="36-36", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_1 [label="Exit Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="36-36", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_196 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="SqlServerJobQueueMonitoringApi.cs"];
m7_70 [label=sqlQuery, span="", cluster="Unk.Execute", file="SqlServerJobQueueMonitoringApi.cs"];
m7_122 [label="Entry HashSet<string>.cstr", span="", cluster="HashSet<string>.cstr", file="SqlServerJobQueueMonitoringApi.cs"];
m7_116 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="244-244", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_117 [label="key == null", span="246-246", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_119 [label="var result = _connection.Query<string>(\r\n                @''select Value from HangFire.[Set] where [Key] = @key'',\r\n                new { key })", span="248-250", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_118 [label="throw new ArgumentNullException(''key'');", span="246-246", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_120 [label="return new HashSet<string>(result);", span="252-252", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_121 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="244-244", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_236 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="442-442", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_237 [label="key == null", span="444-444", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_240 [label="return _connection.Query<long>(query, new { key = key }).Single();", span="450-450", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_238 [label="throw new ArgumentNullException(''key'');", span="444-444", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_239 [label="string query = @''\r\nselect count([Id]) from HangFire.List\r\nwhere [Key] = @key''", span="446-448", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_241 [label="Exit Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="442-442", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_87 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="SqlServerJobQueueMonitoringApi.cs"];
m7_176 [label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="340-340", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_177 [label="timeOut.Duration() != timeOut", span="342-342", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_178 [label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="344-344", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_179 [label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="347-349", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_180 [label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="340-340", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerJobQueueMonitoringApi.cs"];
m7_263 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerJobQueueMonitoringApi.cs"];
m10_11 [label="Exit Hangfire.SqlServer.Tests.CleanDatabaseAttribute.Before(System.Reflection.MethodInfo)", span="28-28", cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.Before(System.Reflection.MethodInfo)", file="SqlServerTimeoutJob.cs"];
m10_16 [label="instance = scope.Resolve(context.BackgroundJob.Job.Type)", span="49-49", cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_17 [label="instance == null", span="51-51", cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs", color=green, community=0];
m10_18 [label="throw new InvalidOperationException(\r\n                            String.Format(''JobActivator returned NULL instance of the '{0}' type.'', context.BackgroundJob.Job.Type));", span="53-54", cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_28 [label="Entry SqlConnection.cstr", span="", cluster="SqlConnection.cstr", file="SqlServerTimeoutJob.cs"];
m10_29 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.GetMasterConnectionString()", span="21-21", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.GetMasterConnectionString()", file="SqlServerTimeoutJob.cs"];
m10_31 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="SqlServerTimeoutJob.cs"];
m10_35 [label="throw new JobPerformanceException(\r\n                    ''An exception occurred during performance of the job.'',\r\n                    ex.InnerException);", span="87-89", cluster="Hangfire.Server.CoreJobPerformanceProcess.InvokeMethod(System.Reflection.MethodInfo, object, object[])", file="SqlServerTimeoutJob.cs"];
m10_34 [label="throw ex.InnerException;", span="84-84", cluster="Hangfire.Server.CoreJobPerformanceProcess.InvokeMethod(System.Reflection.MethodInfo, object, object[])", file="SqlServerTimeoutJob.cs"];
m10_30 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerTimeoutJob.cs"];
m10_33 [label="Hangfire.SqlServer.Tests.CleanDatabaseAttribute", span="", cluster="Hangfire.Server.CoreJobPerformanceProcess.InvokeMethod(System.Reflection.MethodInfo, object, object[])", file="SqlServerTimeoutJob.cs"];
m10_32 [label="Entry Hangfire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="35-35", cluster="Hangfire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerTimeoutJob.cs"];
m10_36 [label="Exit Hangfire.Server.CoreJobPerformanceProcess.InvokeMethod(System.Reflection.MethodInfo, object, object[])", span="65-65", cluster="Hangfire.Server.CoreJobPerformanceProcess.InvokeMethod(System.Reflection.MethodInfo, object, object[])", file="SqlServerTimeoutJob.cs"];
m10_24 [label="SqlServerObjectsInstaller.Install(connection)", span="71-71", cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.RecreateDatabaseAndInstallObjects()", file="SqlServerTimeoutJob.cs"];
m10_26 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SqlServerTimeoutJob.cs"];
m10_27 [label="Entry Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", span="93-93", cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_5 [label="Entry Hangfire.SqlServer.Tests.CleanDatabaseAttribute.Before(System.Reflection.MethodInfo)", span="28-28", cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.Before(System.Reflection.MethodInfo)", file="SqlServerTimeoutJob.cs"];
m10_6 [label="Entry Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", span="35-35", cluster="Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", file="SqlServerTimeoutJob.cs"];
m10_7 [label="activator == null", span="37-37", cluster="Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", file="SqlServerTimeoutJob.cs"];
m10_8 [label="throw new ArgumentNullException(''activator'');", span="37-37", cluster="Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", file="SqlServerTimeoutJob.cs"];
m10_10 [label="Exit Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", span="35-35", cluster="Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", file="SqlServerTimeoutJob.cs"];
m10_9 [label="_activator = activator", span="38-38", cluster="Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", file="SqlServerTimeoutJob.cs"];
m10_52 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="SqlServerTimeoutJob.cs"];
m10_53 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="SqlServerTimeoutJob.cs"];
m10_0 [label="Entry Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute()", span="18-18", cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute()", file="SqlServerTimeoutJob.cs"];
m10_1 [label="Exit Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute()", span="18-18", cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute()", file="SqlServerTimeoutJob.cs"];
m10_23 [label="var connection = new SqlConnection(\r\n                ConnectionUtils.GetConnectionString())", span="68-69", cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.RecreateDatabaseAndInstallObjects()", file="SqlServerTimeoutJob.cs"];
m10_14 [label="object instance = null", span="45-45", cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_2 [label="Entry Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute(IsolationLevel)", span="23-23", cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute(IsolationLevel)", file="SqlServerTimeoutJob.cs"];
m10_3 [label="_isolationLevel = isolationLevel", span="25-25", cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute(IsolationLevel)", file="SqlServerTimeoutJob.cs"];
m10_4 [label="Exit Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute(IsolationLevel)", span="23-23", cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.CleanDatabaseAttribute(IsolationLevel)", file="SqlServerTimeoutJob.cs"];
m10_25 [label="Exit Hangfire.SqlServer.Tests.CleanDatabaseAttribute.RecreateDatabaseAndInstallObjects()", span="56-56", cluster="Hangfire.SqlServer.Tests.CleanDatabaseAttribute.RecreateDatabaseAndInstallObjects()", file="SqlServerTimeoutJob.cs"];
m10_13 [label="var scope = _activator.BeginScope()", span="43-43", cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_20 [label="var result = InvokeMethod(context.BackgroundJob.Job.Method, instance, arguments)", span="59-59", cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_21 [label="return result;", span="61-61", cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_22 [label="Exit Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", span="41-41", cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_12 [label="Entry System.Threading.Monitor.Enter(object)", span="0-0", cluster="System.Threading.Monitor.Enter(object)", file="SqlServerTimeoutJob.cs"];
m10_19 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="SqlServerTimeoutJob.cs"];
m10_15 [label="Entry TransactionOptions.cstr", span="", cluster="TransactionOptions.cstr", file="SqlServerTimeoutJob.cs"];
m10_37 [label="Entry System.Reflection.MethodBase.Invoke(object, object[])", span="0-0", cluster="System.Reflection.MethodBase.Invoke(object, object[])", file="SqlServerTimeoutJob.cs"];
m10_55 [label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0", cluster="System.Collections.Generic.List<T>.ToArray()", file="SqlServerTimeoutJob.cs"];
m10_45 [label="var value = Substitutions.ContainsKey(parameter.ParameterType) \r\n                    ? Substitutions[parameter.ParameterType](context) \r\n                    : argument", span="103-105", cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", color=green, community=0, file="SqlServerTimeoutJob.cs"];
m10_44 [label="var argument = context.BackgroundJob.Job.Args[i]", span="101-101", cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_43 [label="var parameter = parameters[i]", span="100-100", cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_46 [label="result.Add(value)", span="107-107", cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_39 [label="var parameters = context.BackgroundJob.Job.Method.GetParameters()", span="95-95", cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_40 [label="var result = new List<object>(context.BackgroundJob.Job.Args.Count)", span="96-96", cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_41 [label="var i = 0", span="98-98", cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_42 [label="i < parameters.Length", span="98-98", cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_47 [label="i++", span="98-98", cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_48 [label="return result.ToArray();", span="110-110", cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_49 [label="Exit Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", span="93-93", cluster="Hangfire.Server.CoreJobPerformanceProcess.SubstituteArguments(Hangfire.Server.PerformContext)", file="SqlServerTimeoutJob.cs"];
m10_51 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)", file="SqlServerTimeoutJob.cs"];
m10_54 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="SqlServerTimeoutJob.cs"];
m10_38 [label="Entry Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22", cluster="Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="SqlServerTimeoutJob.cs"];
m10_50 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="SqlServerTimeoutJob.cs"];
m10_56 [label="Hangfire.Server.CoreJobPerformanceProcess", span="", file="SqlServerTimeoutJob.cs"];
m12_580 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_145 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="154-154", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_146 [label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="156-156", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_147 [label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="157-157", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_148 [label="correctProvider.Setup(x => x.GetJobQueue())\r\n                .Returns(correctJobQueue.Object)", span="158-159", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_150 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''));\r\n\r\n                correctJobQueue.Verify(x => x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1''));\r\n            })", span="163-168", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_149 [label="_queueProviders.Add(correctProvider.Object, new[] { ''default'' })", span="161-161", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_151 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="154-154", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_719 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="357-357", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_620 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="714-714", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_621 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score]) values (@key, @value, 0.0)''", span="716-717", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_622 [label="UseConnection(sql =>\r\n            {\r\n                sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                Commit(sql, x => x.RemoveSet(''set-1''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n                Assert.Equal(''set-2'', record.Key);\r\n            })", span="719-731", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_623 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="714-714", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_111 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="121-121", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_112 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="123-126", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_113 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="128-150", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_114 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="121-121", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_386 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="446-446", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_387 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="448-460", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_388 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="446-446", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_607 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="704-704", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_608 [label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)));\r\n            })", span="706-710", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_609 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="704-704", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_204 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="163-163", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_412 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="481-481", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_413 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="483-494", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_414 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="481-481", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_311 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="195-195", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_40 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_144 [label="Entry Unk.AddJobState", span="", cluster="Unk.AddJobState", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_469 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="556-556", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_470 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="558-569", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_471 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="556-556", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_775 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="889-889", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_776 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="891-897", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_777 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="889-889", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_648 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="327-327", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_312 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="347-347", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_313 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="349-360", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_314 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="347-347", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_552 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="645-645", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_553 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                // Act\r\n                Commit(sql, x => x.RemoveHash(''some-hash''));\r\n\r\n                // Assert\r\n                var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="647-662", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_554 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="645-645", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_582 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="678-678", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_583 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)));\r\n\r\n                Assert.Equal(''items'', exception.ParamName);\r\n            })", span="680-686", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_584 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="678-678", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_630 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_400 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="464-464", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_401 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="466-477", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_402 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="464-464", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_170 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="171-171", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_171 [label="return connection\r\n                .Query(''select * from HangFire.Job where Id = @id'', new { id = jobId })\r\n                .Single();", span="173-175", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_172 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="171-171", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_754 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="372-372", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_336 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="212-212", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_42 [label="Entry Unk.GetTestJob", span="", cluster="Unk.GetTestJob", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_7 [label="Entry Mock<IPersistentJobQueue>.cstr", span="", cluster="Mock<IPersistentJobQueue>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_809 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="927-927", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_810 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="929-935", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_811 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="927-927", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_260 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="283-283", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_261 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="285-294", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_262 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="283-283", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_822 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="402-402", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_186 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="154-154", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_788 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="387-387", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_507 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="602-602", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_508 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="604-610", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_509 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="602-602", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_684 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="342-342", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_855 [label="Entry SqlServerWriteOnlyTransaction.cstr", span="", cluster="SqlServerWriteOnlyTransaction.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_273 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="190-190", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_187 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="194-194", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_188 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="196-210", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_189 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="194-194", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_286 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="315-315", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_287 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="317-328", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_288 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="315-315", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_506 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="261-261", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_434 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_44 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_670 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="774-774", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_671 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="776-782", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_672 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="774-774", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_5 [label="Entry Mock<IPersistentJobQueueProvider>.cstr", span="", cluster="Mock<IPersistentJobQueueProvider>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_0 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="18-18", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_1 [label="var defaultProvider = new Mock<IPersistentJobQueueProvider>()", span="20-20", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_2 [label="defaultProvider.Setup(x => x.GetJobQueue())\r\n                .Returns(new Mock<IPersistentJobQueue>().Object)", span="21-22", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_3 [label="_queueProviders = new PersistentJobQueueProviderCollection(defaultProvider.Object)", span="24-24", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_4 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="18-18", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_823 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="939-939", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_824 [label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="941-943", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_825 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistList(''list-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''list-1'']);\r\n                Assert.NotNull(records[''list-2'']);\r\n            })", span="945-961", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_826 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="939-939", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_685 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="786-786", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_686 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="788-790", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_687 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1'']);\r\n                Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''set-2'']);\r\n            })", span="792-809", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_688 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="786-786", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_857 [label="Entry lambda expression", span="977-977", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_10 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_11 [label="x.GetJobQueue()", span="21-21", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_12 [label="Exit lambda expression", span="21-21", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_20 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_21 [label="new SqlServerWriteOnlyTransaction(null)", span="31-31", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_22 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_30 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="46-46", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_31 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="47-47", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_29 [label="Entry lambda expression", span="44-56", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_32 [label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)))", span="49-49", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_33 [label="var job = GetTestJob(sql, jobId)", span="51-51", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_35 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="54-54", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_48 [label="x.ExpireJob(jobId, TimeSpan.FromDays(1))", span="49-49", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_47 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_34 [label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1))", span="52-52", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_36 [label="Assert.Null(anotherJob.ExpireAt)", span="55-55", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_37 [label="Exit lambda expression", span="44-56", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_49 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_57 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="69-69", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_58 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="70-70", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_56 [label="Entry lambda expression", span="67-79", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_59 [label="Commit(sql, x => x.PersistJob(jobId))", span="72-72", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_60 [label="var job = GetTestJob(sql, jobId)", span="74-74", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_62 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="77-77", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_67 [label="x.PersistJob(jobId)", span="72-72", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_66 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_61 [label="Assert.Null(job.ExpireAt)", span="75-75", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_63 [label="Assert.NotNull(anotherJob.ExpireAt)", span="78-78", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_64 [label="Exit lambda expression", span="67-79", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_68 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_75 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="92-92", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_76 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="93-93", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_74 [label="Entry lambda expression", span="90-117", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_81 [label="Commit(sql, x => x.SetJobState(jobId, state.Object))", span="101-101", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_82 [label="var job = GetTestJob(sql, jobId)", span="103-103", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_85 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="107-107", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_88 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="111-111", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_108 [label="x.SetJobState(jobId, state.Object)", span="101-101", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_89 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="112-112", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_77 [label="var state = new Mock<IState>()", span="95-95", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_78 [label="state.Setup(x => x.Name).Returns(''State'')", span="96-96", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_79 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="97-97", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_80 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="98-99", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_97 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_100 [label="Entry lambda expression", span="97-97", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_103 [label="Entry lambda expression", span="98-98", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_107 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_83 [label="Assert.Equal(''State'', job.StateName)", span="104-104", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_84 [label="Assert.NotNull(job.StateId)", span="105-105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_86 [label="Assert.Null(anotherJob.StateName)", span="108-108", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_87 [label="Assert.Null(anotherJob.StateId)", span="109-109", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_90 [label="Assert.Equal(''State'', jobState.Name)", span="113-113", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_91 [label="Assert.Equal(''Reason'', jobState.Reason)", span="114-114", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_92 [label="Assert.NotNull(jobState.CreatedAt)", span="115-115", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_93 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="116-116", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_94 [label="Exit lambda expression", span="90-117", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_98 [label="x.Name", span="96-96", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_99 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_101 [label="x.Reason", span="97-97", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_102 [label="Exit lambda expression", span="97-97", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_104 [label="x.SerializeData()", span="98-98", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_105 [label="Exit lambda expression", span="98-98", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_109 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_116 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="130-130", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_115 [label="Entry lambda expression", span="128-150", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_121 [label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="138-138", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_122 [label="var job = GetTestJob(sql, jobId)", span="140-140", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_125 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="144-144", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_117 [label="var state = new Mock<IState>()", span="132-132", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_142 [label="x.AddJobState(jobId, state.Object)", span="138-138", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_126 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="145-145", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_118 [label="state.Setup(x => x.Name).Returns(''State'')", span="133-133", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_119 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="134-134", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_120 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="135-136", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_132 [label="Entry lambda expression", span="133-133", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_135 [label="Entry lambda expression", span="134-134", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_138 [label="Entry lambda expression", span="135-135", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_141 [label="Entry lambda expression", span="138-138", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_123 [label="Assert.Null(job.StateName)", span="141-141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_124 [label="Assert.Null(job.StateId)", span="142-142", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_127 [label="Assert.Equal(''State'', jobState.Name)", span="146-146", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_128 [label="Assert.Equal(''Reason'', jobState.Reason)", span="147-147", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_129 [label="Assert.NotNull(jobState.CreatedAt)", span="148-148", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_130 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="149-149", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_131 [label="Exit lambda expression", span="128-150", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_133 [label="x.Name", span="133-133", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_134 [label="Exit lambda expression", span="133-133", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_136 [label="x.Reason", span="134-134", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_137 [label="Exit lambda expression", span="134-134", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_139 [label="x.SerializeData()", span="135-135", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_140 [label="Exit lambda expression", span="135-135", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_143 [label="Exit lambda expression", span="138-138", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_159 [label="correctJobQueue.Verify(x => x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1''))", span="167-167", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_154 [label="Entry lambda expression", span="158-158", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_157 [label="Entry lambda expression", span="163-168", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_155 [label="x.GetJobQueue()", span="158-158", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_156 [label="Exit lambda expression", span="158-158", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_158 [label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="165-165", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_162 [label="Entry lambda expression", span="165-165", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_160 [label="Exit lambda expression", span="163-168", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_166 [label="Entry lambda expression", span="167-167", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_163 [label="x.AddToQueue(''default'', ''1'')", span="165-165", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_164 [label="Exit lambda expression", span="165-165", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_167 [label="x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1'')", span="167-167", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_168 [label="Exit lambda expression", span="167-167", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_176 [label="Entry lambda expression", span="181-190", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_177 [label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="183-183", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_178 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="185-185", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_183 [label="Entry lambda expression", span="183-183", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_179 [label="Assert.Equal(''my-key'', record.Key)", span="187-187", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_180 [label="Assert.Equal(1, record.Value)", span="188-188", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_181 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="189-189", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_182 [label="Exit lambda expression", span="181-190", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_184 [label="x.IncrementCounter(''my-key'')", span="183-183", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_185 [label="Exit lambda expression", span="183-183", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_190 [label="Entry lambda expression", span="196-210", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_191 [label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="198-198", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_192 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="200-200", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_201 [label="Entry lambda expression", span="198-198", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_193 [label="Assert.Equal(''my-key'', record.Key)", span="202-202", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_194 [label="Assert.Equal(1, record.Value)", span="203-203", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_195 [label="Assert.NotNull(record.ExpireAt)", span="204-204", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_196 [label="var expireAt = (DateTime) record.ExpireAt", span="206-206", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_197 [label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="208-208", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_198 [label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="209-209", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_199 [label="Exit lambda expression", span="196-210", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_202 [label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="198-198", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_203 [label="Exit lambda expression", span="198-198", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_208 [label="Entry lambda expression", span="216-227", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_209 [label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                })", span="218-222", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_210 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="224-224", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_213 [label="Entry lambda expression", span="218-222", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_211 [label="Assert.Equal(2, recordCount)", span="226-226", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_212 [label="Exit lambda expression", span="216-227", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_214 [label="x.IncrementCounter(''my-key'')", span="220-220", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_215 [label="x.IncrementCounter(''my-key'')", span="221-221", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_216 [label="Exit lambda expression", span="218-222", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_220 [label="Entry lambda expression", span="233-242", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_221 [label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="235-235", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_222 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="237-237", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_227 [label="Entry lambda expression", span="235-235", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_223 [label="Assert.Equal(''my-key'', record.Key)", span="239-239", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_224 [label="Assert.Equal(-1, record.Value)", span="240-240", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_225 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="241-241", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_226 [label="Exit lambda expression", span="233-242", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_228 [label="x.DecrementCounter(''my-key'')", span="235-235", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_229 [label="Exit lambda expression", span="235-235", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_234 [label="Entry lambda expression", span="248-262", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_235 [label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="250-250", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_236 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="252-252", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_244 [label="Entry lambda expression", span="250-250", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_237 [label="Assert.Equal(''my-key'', record.Key)", span="254-254", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_238 [label="Assert.Equal(-1, record.Value)", span="255-255", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_239 [label="Assert.NotNull(record.ExpireAt)", span="256-256", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_240 [label="var expireAt = (DateTime)record.ExpireAt", span="258-258", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_241 [label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="260-260", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_242 [label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="261-261", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_243 [label="Exit lambda expression", span="248-262", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_245 [label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="250-250", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_246 [label="Exit lambda expression", span="250-250", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_251 [label="Entry lambda expression", span="268-279", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_252 [label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="270-274", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_253 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="276-276", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_256 [label="Entry lambda expression", span="270-274", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_254 [label="Assert.Equal(2, recordCount)", span="278-278", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_255 [label="Exit lambda expression", span="268-279", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_257 [label="x.DecrementCounter(''my-key'')", span="272-272", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_258 [label="x.DecrementCounter(''my-key'')", span="273-273", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_259 [label="Exit lambda expression", span="270-274", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_263 [label="Entry lambda expression", span="285-294", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_264 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="287-287", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_265 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="289-289", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_270 [label="Entry lambda expression", span="287-287", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_266 [label="Assert.Equal(''my-key'', record.Key)", span="291-291", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_267 [label="Assert.Equal(''my-value'', record.Value)", span="292-292", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_268 [label="Assert.Equal(0.0, record.Score, 2)", span="293-293", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_269 [label="Exit lambda expression", span="285-294", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_271 [label="x.AddToSet(''my-key'', ''my-value'')", span="287-287", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_272 [label="Exit lambda expression", span="287-287", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_277 [label="Entry lambda expression", span="300-311", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_278 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="302-306", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_279 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="308-308", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_282 [label="Entry lambda expression", span="302-306", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_280 [label="Assert.Equal(2, recordCount)", span="310-310", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_281 [label="Exit lambda expression", span="300-311", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_283 [label="x.AddToSet(''my-key'', ''my-value'')", span="304-304", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_284 [label="x.AddToSet(''my-key'', ''another-value'')", span="305-305", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_285 [label="Exit lambda expression", span="302-306", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_289 [label="Entry lambda expression", span="317-328", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_290 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                })", span="319-323", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_291 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="325-325", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_294 [label="Entry lambda expression", span="319-323", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_292 [label="Assert.Equal(1, recordCount)", span="327-327", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_293 [label="Exit lambda expression", span="317-328", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_295 [label="x.AddToSet(''my-key'', ''my-value'')", span="321-321", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_296 [label="x.AddToSet(''my-key'', ''my-value'')", span="322-322", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_297 [label="Exit lambda expression", span="319-323", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_301 [label="Entry lambda expression", span="334-343", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_302 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="336-336", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_303 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="338-338", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_308 [label="Entry lambda expression", span="336-336", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_304 [label="Assert.Equal(''my-key'', record.Key)", span="340-340", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_305 [label="Assert.Equal(''my-value'', record.Value)", span="341-341", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_306 [label="Assert.Equal(3.2, record.Score, 3)", span="342-342", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_307 [label="Exit lambda expression", span="334-343", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_309 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="336-336", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_310 [label="Exit lambda expression", span="336-336", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_315 [label="Entry lambda expression", span="349-360", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_316 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="351-355", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_317 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="357-357", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_320 [label="Entry lambda expression", span="351-355", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_318 [label="Assert.Equal(3.2, record.Score, 3)", span="359-359", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_319 [label="Exit lambda expression", span="349-360", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_321 [label="x.AddToSet(''my-key'', ''my-value'')", span="353-353", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_322 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="354-354", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_323 [label="Exit lambda expression", span="351-355", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_327 [label="Entry lambda expression", span="366-377", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_328 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="368-372", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_329 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="374-374", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_332 [label="Entry lambda expression", span="368-372", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_330 [label="Assert.Equal(0, recordCount)", span="376-376", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_331 [label="Exit lambda expression", span="366-377", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_333 [label="x.AddToSet(''my-key'', ''my-value'')", span="370-370", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_334 [label="x.RemoveFromSet(''my-key'', ''my-value'')", span="371-371", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_335 [label="Exit lambda expression", span="368-372", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_340 [label="Entry lambda expression", span="383-394", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_341 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="385-389", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_342 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="391-391", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_345 [label="Entry lambda expression", span="385-389", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_343 [label="Assert.Equal(1, recordCount)", span="393-393", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_344 [label="Exit lambda expression", span="383-394", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_346 [label="x.AddToSet(''my-key'', ''my-value'')", span="387-387", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_347 [label="x.RemoveFromSet(''my-key'', ''different-value'')", span="388-388", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_348 [label="Exit lambda expression", span="385-389", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_352 [label="Entry lambda expression", span="400-411", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_353 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="402-406", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_354 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="408-408", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_357 [label="Entry lambda expression", span="402-406", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_355 [label="Assert.Equal(1, recordCount)", span="410-410", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_356 [label="Exit lambda expression", span="400-411", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_358 [label="x.AddToSet(''my-key'', ''my-value'')", span="404-404", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_359 [label="x.RemoveFromSet(''different-key'', ''my-value'')", span="405-405", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_360 [label="Exit lambda expression", span="402-406", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_364 [label="Entry lambda expression", span="417-425", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_365 [label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="419-419", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_366 [label="var record = sql.Query(''select * from HangFire.List'').Single()", span="421-421", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_370 [label="Entry lambda expression", span="419-419", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_367 [label="Assert.Equal(''my-key'', record.Key)", span="423-423", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_368 [label="Assert.Equal(''my-value'', record.Value)", span="424-424", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_369 [label="Exit lambda expression", span="417-425", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_371 [label="x.InsertToList(''my-key'', ''my-value'')", span="419-419", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_372 [label="Exit lambda expression", span="419-419", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_377 [label="Entry lambda expression", span="431-442", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_378 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="433-437", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_379 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="439-439", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_382 [label="Entry lambda expression", span="433-437", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_380 [label="Assert.Equal(2, recordCount)", span="441-441", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_381 [label="Exit lambda expression", span="431-442", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_383 [label="x.InsertToList(''my-key'', ''my-value'')", span="435-435", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_384 [label="x.InsertToList(''my-key'', ''my-value'')", span="436-436", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_385 [label="Exit lambda expression", span="433-437", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_389 [label="Entry lambda expression", span="448-460", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_390 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="450-455", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_391 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="457-457", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_394 [label="Entry lambda expression", span="450-455", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_392 [label="Assert.Equal(0, recordCount)", span="459-459", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_393 [label="Exit lambda expression", span="448-460", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_395 [label="x.InsertToList(''my-key'', ''my-value'')", span="452-452", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_396 [label="x.InsertToList(''my-key'', ''my-value'')", span="453-453", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_397 [label="x.RemoveFromList(''my-key'', ''my-value'')", span="454-454", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_398 [label="Exit lambda expression", span="450-455", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_403 [label="Entry lambda expression", span="466-477", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_404 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="468-472", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_405 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="474-474", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_408 [label="Entry lambda expression", span="468-472", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_406 [label="Assert.Equal(1, recordCount)", span="476-476", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_407 [label="Exit lambda expression", span="466-477", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_409 [label="x.InsertToList(''my-key'', ''my-value'')", span="470-470", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_410 [label="x.RemoveFromList(''my-key'', ''different-value'')", span="471-471", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_411 [label="Exit lambda expression", span="468-472", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_415 [label="Entry lambda expression", span="483-494", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_416 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="485-489", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_417 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="491-491", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_420 [label="Entry lambda expression", span="485-489", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_418 [label="Assert.Equal(1, recordCount)", span="493-493", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_419 [label="Exit lambda expression", span="483-494", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_421 [label="x.InsertToList(''my-key'', ''my-value'')", span="487-487", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_422 [label="x.RemoveFromList(''different-key'', ''my-value'')", span="488-488", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_423 [label="Exit lambda expression", span="485-489", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_427 [label="Entry lambda expression", span="500-516", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_428 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="502-509", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_429 [label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="511-511", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_435 [label="Entry lambda expression", span="502-509", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_430 [label="Assert.Equal(2, records.Length)", span="513-513", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_431 [label="Assert.Equal(''1'', records[0].Value)", span="514-514", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_432 [label="Assert.Equal(''2'', records[1].Value)", span="515-515", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_433 [label="Exit lambda expression", span="500-516", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_436 [label="x.InsertToList(''my-key'', ''0'')", span="504-504", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_437 [label="x.InsertToList(''my-key'', ''1'')", span="505-505", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_438 [label="x.InsertToList(''my-key'', ''2'')", span="506-506", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_439 [label="x.InsertToList(''my-key'', ''3'')", span="507-507", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_440 [label="x.TrimList(''my-key'', 1, 2)", span="508-508", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_441 [label="Exit lambda expression", span="502-509", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_446 [label="Entry lambda expression", span="522-535", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_447 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="524-530", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_448 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="532-532", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_451 [label="Entry lambda expression", span="524-530", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_449 [label="Assert.Equal(2, recordCount)", span="534-534", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_450 [label="Exit lambda expression", span="522-535", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_452 [label="x.InsertToList(''my-key'', ''0'')", span="526-526", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_453 [label="x.InsertToList(''my-key'', ''1'')", span="527-527", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_454 [label="x.InsertToList(''my-key'', ''2'')", span="528-528", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_455 [label="x.TrimList(''my-key'', 1, 100)", span="529-529", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_456 [label="Exit lambda expression", span="524-530", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_460 [label="Entry lambda expression", span="541-552", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_461 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="543-547", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_462 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="549-549", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_465 [label="Entry lambda expression", span="543-547", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_463 [label="Assert.Equal(0, recordCount)", span="551-551", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_464 [label="Exit lambda expression", span="541-552", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_466 [label="x.InsertToList(''my-key'', ''0'')", span="545-545", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_467 [label="x.TrimList(''my-key'', 1, 100)", span="546-546", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_468 [label="Exit lambda expression", span="543-547", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_472 [label="Entry lambda expression", span="558-569", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_473 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="560-564", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_474 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="566-566", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_477 [label="Entry lambda expression", span="560-564", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_475 [label="Assert.Equal(0, recordCount)", span="568-568", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_476 [label="Exit lambda expression", span="558-569", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_478 [label="x.InsertToList(''my-key'', ''0'')", span="562-562", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_479 [label="x.TrimList(''my-key'', 1, 0)", span="563-563", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_480 [label="Exit lambda expression", span="560-564", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_484 [label="Entry lambda expression", span="575-586", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_485 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="577-581", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_486 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="583-583", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_489 [label="Entry lambda expression", span="577-581", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_487 [label="Assert.Equal(1, recordCount)", span="585-585", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_488 [label="Exit lambda expression", span="575-586", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_490 [label="x.InsertToList(''my-key'', ''0'')", span="579-579", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_491 [label="x.TrimList(''another-key'', 1, 0)", span="580-580", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_492 [label="Exit lambda expression", span="577-581", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_496 [label="Entry lambda expression", span="592-598", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_497 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())))", span="594-595", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_501 [label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()))", span="595-595", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_498 [label="Assert.Equal(''key'', exception.ParamName)", span="597-597", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_500 [label="Entry lambda expression", span="595-595", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_499 [label="Exit lambda expression", span="592-598", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_502 [label="Exit lambda expression", span="595-595", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_503 [label="Entry lambda expression", span="595-595", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_504 [label="x.SetRangeInHash(null, new Dictionary<string, string>())", span="595-595", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_505 [label="Exit lambda expression", span="595-595", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_510 [label="Entry lambda expression", span="604-610", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_511 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)))", span="606-607", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_515 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null))", span="607-607", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_512 [label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="609-609", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_514 [label="Entry lambda expression", span="607-607", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_513 [label="Exit lambda expression", span="604-610", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_516 [label="Exit lambda expression", span="607-607", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_517 [label="Entry lambda expression", span="607-607", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_518 [label="x.SetRangeInHash(''some-hash'', null)", span="607-607", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_519 [label="Exit lambda expression", span="607-607", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_523 [label="Entry lambda expression", span="616-631", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_524 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="618-622", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_525 [label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="624-627", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_530 [label="Entry lambda expression", span="618-622", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_526 [label="Assert.Equal(''Value1'', result[''Key1''])", span="629-629", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_533 [label="Entry lambda expression", span="627-627", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_536 [label="Entry lambda expression", span="627-627", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_527 [label="Assert.Equal(''Value2'', result[''Key2''])", span="630-630", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_528 [label="Exit lambda expression", span="616-631", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_531 [label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="618-622", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_532 [label="Exit lambda expression", span="618-622", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_534 [label="(string)x.Field", span="627-627", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_535 [label="Exit lambda expression", span="627-627", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_537 [label="(string)x.Value", span="627-627", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_538 [label="Exit lambda expression", span="627-627", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_542 [label="Entry lambda expression", span="637-641", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_543 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)))", span="639-640", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_546 [label="Commit(sql, x => x.RemoveHash(null))", span="640-640", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_544 [label="Exit lambda expression", span="637-641", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_545 [label="Entry lambda expression", span="640-640", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_547 [label="Exit lambda expression", span="640-640", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_548 [label="Entry lambda expression", span="640-640", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_549 [label="x.RemoveHash(null)", span="640-640", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_550 [label="Exit lambda expression", span="640-640", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_555 [label="Entry lambda expression", span="647-662", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_556 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="650-654", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_557 [label="Commit(sql, x => x.RemoveHash(''some-hash''))", span="657-657", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_558 [label="var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single()", span="660-660", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_561 [label="Entry lambda expression", span="650-654", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_564 [label="Entry lambda expression", span="657-657", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_559 [label="Assert.Equal(0, count)", span="661-661", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_560 [label="Exit lambda expression", span="647-662", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_562 [label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="650-654", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_563 [label="Exit lambda expression", span="650-654", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_565 [label="x.RemoveHash(''some-hash'')", span="657-657", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_566 [label="Exit lambda expression", span="657-657", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_570 [label="Entry lambda expression", span="668-674", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_571 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())))", span="670-671", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_575 [label="Commit(sql, x => x.AddRangeToSet(null, new List<string>()))", span="671-671", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_572 [label="Assert.Equal(''key'', exception.ParamName)", span="673-673", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_574 [label="Entry lambda expression", span="671-671", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_573 [label="Exit lambda expression", span="668-674", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_576 [label="Exit lambda expression", span="671-671", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_577 [label="Entry lambda expression", span="671-671", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_578 [label="x.AddRangeToSet(null, new List<string>())", span="671-671", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_579 [label="Exit lambda expression", span="671-671", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_585 [label="Entry lambda expression", span="680-686", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_586 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)))", span="682-683", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_590 [label="Commit(sql, x => x.AddRangeToSet(''my-set'', null))", span="683-683", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_587 [label="Assert.Equal(''items'', exception.ParamName)", span="685-685", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_589 [label="Entry lambda expression", span="683-683", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_588 [label="Exit lambda expression", span="680-686", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_591 [label="Exit lambda expression", span="683-683", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_592 [label="Entry lambda expression", span="683-683", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_593 [label="x.AddRangeToSet(''my-set'', null)", span="683-683", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_594 [label="Exit lambda expression", span="683-683", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_598 [label="Entry lambda expression", span="692-700", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_599 [label="var items = new List<string> { ''1'', ''2'', ''3'' }", span="694-694", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_600 [label="Commit(sql, x => x.AddRangeToSet(''my-set'', items))", span="696-696", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_601 [label="var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''')", span="698-698", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_605 [label="x.AddRangeToSet(''my-set'', items)", span="696-696", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_602 [label="Assert.Equal(items, records)", span="699-699", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_604 [label="Entry lambda expression", span="696-696", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_603 [label="Exit lambda expression", span="692-700", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_606 [label="Exit lambda expression", span="696-696", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_610 [label="Entry lambda expression", span="706-710", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_611 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)))", span="708-709", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_614 [label="Commit(sql, x => x.RemoveSet(null))", span="709-709", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_612 [label="Exit lambda expression", span="706-710", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_613 [label="Entry lambda expression", span="709-709", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_615 [label="Exit lambda expression", span="709-709", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_616 [label="Entry lambda expression", span="709-709", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_617 [label="x.RemoveSet(null)", span="709-709", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_618 [label="Exit lambda expression", span="709-709", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_625 [label="sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="721-725", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_624 [label="Entry lambda expression", span="719-731", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_626 [label="Commit(sql, x => x.RemoveSet(''set-1''))", span="727-727", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_627 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="729-729", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_631 [label="Entry lambda expression", span="727-727", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_628 [label="Assert.Equal(''set-2'', record.Key)", span="730-730", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_629 [label="Exit lambda expression", span="719-731", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_632 [label="x.RemoveSet(''set-1'')", span="727-727", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_633 [label="Exit lambda expression", span="727-727", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_637 [label="Entry lambda expression", span="737-743", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_638 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))))", span="739-740", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_642 [label="Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)))", span="740-740", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_639 [label="Assert.Equal(''key'', exception.ParamName)", span="742-742", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_641 [label="Entry lambda expression", span="740-740", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_640 [label="Exit lambda expression", span="737-743", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_643 [label="Exit lambda expression", span="740-740", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_644 [label="Entry lambda expression", span="740-740", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_645 [label="x.ExpireHash(null, TimeSpan.FromMinutes(5))", span="740-740", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_646 [label="Exit lambda expression", span="740-740", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_654 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                })", span="756-760", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_653 [label="Entry lambda expression", span="753-770", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_655 [label="Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)))", span="763-763", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_656 [label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="766-766", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_661 [label="Entry lambda expression", span="763-763", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_657 [label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1''])", span="767-767", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_664 [label="Entry lambda expression", span="766-766", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_667 [label="Entry lambda expression", span="766-766", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_658 [label="Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61))", span="768-768", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_659 [label="Assert.Null(records[''hash-2''])", span="769-769", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_660 [label="Exit lambda expression", span="753-770", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_662 [label="x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60))", span="763-763", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_663 [label="Exit lambda expression", span="763-763", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_665 [label="(string)x.Key", span="766-766", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_666 [label="Exit lambda expression", span="766-766", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_668 [label="(DateTime?)x.ExpireAt", span="766-766", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_669 [label="Exit lambda expression", span="766-766", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_673 [label="Entry lambda expression", span="776-782", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_674 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))))", span="778-779", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_678 [label="Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)))", span="779-779", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_675 [label="Assert.Equal(''key'', exception.ParamName)", span="781-781", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_677 [label="Entry lambda expression", span="779-779", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_676 [label="Exit lambda expression", span="776-782", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_679 [label="Exit lambda expression", span="779-779", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_680 [label="Entry lambda expression", span="779-779", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_681 [label="x.ExpireSet(null, TimeSpan.FromSeconds(45))", span="779-779", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_682 [label="Exit lambda expression", span="779-779", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_690 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="795-799", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_689 [label="Entry lambda expression", span="792-809", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_691 [label="Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)))", span="802-802", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_692 [label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="805-805", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_697 [label="Entry lambda expression", span="802-802", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_693 [label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1''])", span="806-806", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_700 [label="Entry lambda expression", span="805-805", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_703 [label="Entry lambda expression", span="805-805", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_694 [label="Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61))", span="807-807", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_695 [label="Assert.Null(records[''set-2''])", span="808-808", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_696 [label="Exit lambda expression", span="792-809", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_698 [label="x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60))", span="802-802", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_699 [label="Exit lambda expression", span="802-802", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_701 [label="(string)x.Key", span="805-805", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_702 [label="Exit lambda expression", span="805-805", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_704 [label="(DateTime?)x.ExpireAt", span="805-805", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_705 [label="Exit lambda expression", span="805-805", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_709 [label="Entry lambda expression", span="815-821", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_710 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))))", span="817-818", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_714 [label="Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)))", span="818-818", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_711 [label="Assert.Equal(''key'', exception.ParamName)", span="820-820", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_713 [label="Entry lambda expression", span="818-818", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_712 [label="Exit lambda expression", span="815-821", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_715 [label="Exit lambda expression", span="818-818", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_716 [label="Entry lambda expression", span="818-818", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_717 [label="x.ExpireList(null, TimeSpan.FromSeconds(45))", span="818-818", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_718 [label="Exit lambda expression", span="818-818", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_725 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                })", span="833-837", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_724 [label="Entry lambda expression", span="830-847", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_726 [label="Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)))", span="840-840", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_727 [label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="843-843", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_732 [label="Entry lambda expression", span="840-840", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_728 [label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1''])", span="844-844", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_735 [label="Entry lambda expression", span="843-843", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_738 [label="Entry lambda expression", span="843-843", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_729 [label="Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61))", span="845-845", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_730 [label="Assert.Null(records[''list-2''])", span="846-846", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_731 [label="Exit lambda expression", span="830-847", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_733 [label="x.ExpireList(''list-1'', TimeSpan.FromMinutes(60))", span="840-840", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_734 [label="Exit lambda expression", span="840-840", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_736 [label="(string)x.Key", span="843-843", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_737 [label="Exit lambda expression", span="843-843", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_739 [label="(DateTime?)x.ExpireAt", span="843-843", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_740 [label="Exit lambda expression", span="843-843", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_744 [label="Entry lambda expression", span="853-859", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_745 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)))", span="855-856", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_749 [label="Commit(sql, x => x.PersistHash(null))", span="856-856", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_746 [label="Assert.Equal(''key'', exception.ParamName)", span="858-858", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_748 [label="Entry lambda expression", span="856-856", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_747 [label="Exit lambda expression", span="853-859", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_750 [label="Exit lambda expression", span="856-856", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_751 [label="Entry lambda expression", span="856-856", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_752 [label="x.PersistHash(null)", span="856-856", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_753 [label="Exit lambda expression", span="856-856", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_760 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="872-876", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_759 [label="Entry lambda expression", span="869-885", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_761 [label="Commit(sql, x => x.PersistHash(''hash-1''))", span="879-879", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_762 [label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="882-882", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_766 [label="Entry lambda expression", span="879-879", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_763 [label="Assert.Null(records[''hash-1''])", span="883-883", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_769 [label="Entry lambda expression", span="882-882", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_772 [label="Entry lambda expression", span="882-882", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_764 [label="Assert.NotNull(records[''hash-2''])", span="884-884", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_765 [label="Exit lambda expression", span="869-885", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_767 [label="x.PersistHash(''hash-1'')", span="879-879", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_768 [label="Exit lambda expression", span="879-879", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_770 [label="(string)x.Key", span="882-882", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_771 [label="Exit lambda expression", span="882-882", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_773 [label="(DateTime?)x.ExpireAt", span="882-882", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_774 [label="Exit lambda expression", span="882-882", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_778 [label="Entry lambda expression", span="891-897", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_779 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)))", span="893-894", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_783 [label="Commit(sql, x => x.PersistSet(null))", span="894-894", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_780 [label="Assert.Equal(''key'', exception.ParamName)", span="896-896", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_782 [label="Entry lambda expression", span="894-894", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_781 [label="Exit lambda expression", span="891-897", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_784 [label="Exit lambda expression", span="894-894", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_785 [label="Entry lambda expression", span="894-894", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_786 [label="x.PersistSet(null)", span="894-894", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_787 [label="Exit lambda expression", span="894-894", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_794 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="910-914", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_793 [label="Entry lambda expression", span="907-923", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_795 [label="Commit(sql, x => x.PersistSet(''set-1''))", span="917-917", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_796 [label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="920-920", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_800 [label="Entry lambda expression", span="917-917", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_797 [label="Assert.Null(records[''set-1''])", span="921-921", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_803 [label="Entry lambda expression", span="920-920", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_806 [label="Entry lambda expression", span="920-920", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_798 [label="Assert.NotNull(records[''set-2''])", span="922-922", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_799 [label="Exit lambda expression", span="907-923", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_801 [label="x.PersistSet(''set-1'')", span="917-917", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_802 [label="Exit lambda expression", span="917-917", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_804 [label="(string)x.Key", span="920-920", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_805 [label="Exit lambda expression", span="920-920", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_807 [label="(DateTime?)x.ExpireAt", span="920-920", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_808 [label="Exit lambda expression", span="920-920", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_812 [label="Entry lambda expression", span="929-935", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_813 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)))", span="931-932", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_817 [label="Commit(sql, x => x.PersistList(null))", span="932-932", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_814 [label="Assert.Equal(''key'', exception.ParamName)", span="934-934", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_816 [label="Entry lambda expression", span="932-932", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_815 [label="Exit lambda expression", span="929-935", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_818 [label="Exit lambda expression", span="932-932", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_819 [label="Entry lambda expression", span="932-932", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_820 [label="x.PersistList(null)", span="932-932", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_821 [label="Exit lambda expression", span="932-932", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_828 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="948-952", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_827 [label="Entry lambda expression", span="945-961", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_829 [label="Commit(sql, x => x.PersistList(''list-1''))", span="955-955", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_830 [label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="958-958", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_834 [label="Entry lambda expression", span="955-955", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_831 [label="Assert.Null(records[''list-1''])", span="959-959", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_837 [label="Entry lambda expression", span="958-958", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_840 [label="Entry lambda expression", span="958-958", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_832 [label="Assert.NotNull(records[''list-2''])", span="960-960", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_833 [label="Exit lambda expression", span="945-961", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_835 [label="x.PersistList(''list-1'')", span="955-955", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_836 [label="Exit lambda expression", span="955-955", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_838 [label="(string)x.Key", span="958-958", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_839 [label="Exit lambda expression", span="958-958", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_841 [label="(DateTime?)x.ExpireAt", span="958-958", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_842 [label="Exit lambda expression", span="958-958", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_858 [label="x.QueueProviders", span="977-977", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_859 [label="Exit lambda expression", span="977-977", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_581 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="295-295", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_374 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="429-429", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_375 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="431-442", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_376 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="429-429", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_361 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="415-415", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_362 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="417-425", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_363 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="415-415", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_595 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="690-690", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_596 [label="UseConnection(sql =>\r\n            {\r\n                var items = new List<string> { ''1'', ''2'', ''3'' };\r\n\r\n                Commit(sql, x => x.AddRangeToSet(''my-set'', items));\r\n\r\n                var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''');\r\n                Assert.Equal(items, records);\r\n            })", span="692-700", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_597 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="690-690", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_399 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="234-234", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_8 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_789 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="901-901", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_790 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="903-905", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_791 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistSet(''set-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''set-1'']);\r\n                Assert.NotNull(records[''set-2'']);\r\n            })", span="907-923", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_792 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="901-901", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_349 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="398-398", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_350 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="400-411", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_351 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="398-398", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_706 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="813-813", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_707 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="815-821", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_708 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="813-813", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_95 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_43 [label="Entry System.DateTime.AddMinutes(double)", span="0-0", cluster="System.DateTime.AddMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_217 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="231-231", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_218 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="233-242", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_219 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="231-231", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_856 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="49-49", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_28 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_230 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="172-172", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_110 [label="Entry Unk.SetJobState", span="", cluster="Unk.SetJobState", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_481 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="573-573", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_482 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="575-586", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_483 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="573-573", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_846 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_51 [label="Entry Unk.ExpireJob", span="", cluster="Unk.ExpireJob", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_854 [label="Entry Mock<SqlServerStorage>.cstr", span="", cluster="Mock<SqlServerStorage>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_324 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="364-364", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_325 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="366-377", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_326 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="364-364", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_298 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="332-332", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_299 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="334-343", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_300 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="332-332", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_38 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_847 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_551 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="281-281", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_231 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="246-246", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_232 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="248-262", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_233 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="246-246", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_493 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="590-590", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_494 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="592-598", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_495 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="590-590", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_152 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_720 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="825-825", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_721 [label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key]) values (@key)''", span="827-828", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_722 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1'']);\r\n                Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''list-2'']);\r\n            })", span="830-847", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_723 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="825-825", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_65 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_755 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="863-863", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_756 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="865-867", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_757 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistHash(''hash-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''hash-1'']);\r\n                Assert.NotNull(records[''hash-2'']);\r\n            })", span="869-885", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_758 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="863-863", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_41 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="972-972", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_848 [label="var storage = new Mock<SqlServerStorage>(connection)", span="976-976", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_851 [label="action(transaction)", span="981-981", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_849 [label="storage.Setup(x => x.QueueProviders).Returns(_queueProviders)", span="977-977", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_850 [label="var transaction = new SqlServerWriteOnlyTransaction(storage.Object)", span="979-979", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_852 [label="transaction.Commit()", span="982-982", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_853 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="972-972", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_173 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="179-179", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_174 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="181-190", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_175 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="179-179", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_6 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_46 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_9 [label="Entry PersistentJobQueueProviderCollection.cstr", span="", cluster="PersistentJobQueueProviderCollection.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_153 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="964-964", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_843 [label="var connection = ConnectionUtils.CreateConnection()", span="966-966", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_844 [label="action(connection)", span="968-968", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_845 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="964-964", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_649 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="747-747", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_650 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="749-751", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_651 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1'']);\r\n                Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''hash-2'']);\r\n            })", span="753-770", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_652 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="747-747", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_457 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="539-539", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_458 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="541-552", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_459 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="539-539", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_200 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_205 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="214-214", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_206 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="216-227", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_207 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="214-214", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_741 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="851-851", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_742 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="853-859", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_743 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="851-851", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_13 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_443 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="520-520", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_444 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="522-535", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_445 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="520-520", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_424 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="498-498", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_425 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="500-516", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_426 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="498-498", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_161 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_248 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="266-266", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_249 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="268-279", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_250 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="266-266", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_442 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="244-244", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_647 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_529 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_274 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="298-298", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_275 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="300-311", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_276 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="298-298", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_70 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="83-83", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_71 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="85-88", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_72 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="90-117", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_73 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="83-83", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_52 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="60-60", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_53 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="62-65", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_54 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="67-79", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_55 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="60-60", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_247 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="181-181", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_619 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="313-313", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_18 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_14 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_15 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(null))", span="30-31", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_16 [label="Assert.Equal(''storage'', exception.ParamName)", span="33-33", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_17 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_683 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_165 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="135-135", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_50 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_169 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_520 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="614-614", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_521 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="616-631", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_522 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="614-614", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_96 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_567 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="666-666", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_568 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="668-674", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_569 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="666-666", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_23 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", span="42-42", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_106 [label="Entry Unk.SerializeData", span="", cluster="Unk.SerializeData", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_337 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="381-381", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_338 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="383-394", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_339 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="381-381", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_634 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="735-735", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_635 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="737-743", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_636 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="735-735", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_39 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_45 [label="Entry Unk.True", span="", cluster="Unk.True", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_69 [label="Entry Unk.PersistJob", span="", cluster="Unk.PersistJob", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_24 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="37-37", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_25 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="39-42", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_26 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="44-56", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_27 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="37-37", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_373 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="224-224", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_539 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="635-635", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_540 [label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)));\r\n            })", span="637-641", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_541 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="635-635", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_860 [label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_861 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_862 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_863 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_864 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_865 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_866 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_867 [label=state, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_868 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_869 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_870 [label=state, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_871 [label=correctJobQueue, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_872 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_873 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_874 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_875 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_876 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_877 [label=items, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_878 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_879 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_880 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_881 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_882 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_883 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_884 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_885 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_886 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_887 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_888 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_889 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_890 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_891 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
n44 -> n2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts"];
n44 -> n3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts"];
n44 -> n4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts"];
n44 -> n5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts"];
n44 -> n25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts"];
n44 -> n26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts"];
n44 -> n36  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts"];
n44 -> n37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts"];
n44 -> n42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.EnqueuedStateHandlerFacts"];
n45 -> n42  [key=1, style=dashed, color=darkseagreen4, label=handler];
n46 -> n42  [key=1, style=dashed, color=darkseagreen4, label=context];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n7  [key=2, style=dotted];
n1 -> n13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label=job];
n2 -> n3  [key=0, style=solid];
n2 -> n8  [key=2, style=dotted];
n13 -> n14  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n4 -> n10  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n3 -> n9  [key=2, style=dotted];
n5 -> n6  [key=0, style=solid];
n5 -> n11  [key=2, style=dotted];
n5 -> n12  [key=2, style=dotted];
n6 -> n0  [key=0, style=bold, color=blue];
n14 -> n15  [key=0, style=solid];
n14 -> n16  [key=2, style=dotted];
n15 -> n13  [key=0, style=bold, color=blue];
n17 -> n18  [key=0, style=solid];
n18 -> n19  [key=0, style=solid];
n18 -> n21  [key=2, style=dotted];
n19 -> n20  [key=0, style=solid];
n19 -> n22  [key=2, style=dotted];
n20 -> n17  [key=0, style=bold, color=blue];
n23 -> n24  [key=0, style=solid];
n24 -> n25  [key=0, style=solid];
n24 -> n21  [key=2, style=dotted];
n25 -> n26  [key=0, style=solid];
n25 -> n28  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n26 -> n29  [key=2, style=dotted];
n26 -> n30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n27 -> n23  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n31 -> n32  [key=0, style=solid];
n31 -> n33  [key=2, style=dotted];
n32 -> n30  [key=0, style=bold, color=blue];
n34 -> n35  [key=0, style=solid];
n35 -> n36  [key=0, style=solid, color=red];
n35 -> n21  [key=2, style=dotted];
n35 -> n37  [key=1, style=dashed, color=darkseagreen4, label=handler];
n35 -> n42  [key=1, style=dashed, color=darkseagreen4, label=handler];
n36 -> n37  [key=0, style=solid, color=red];
n36 -> n11  [key=2, style=dotted, color=red];
n36 -> n39  [key=2, style=dotted, color=red];
n36 -> n42  [key=1, style=dashed, color=red, label=context];
n37 -> n38  [key=0, style=solid];
n37 -> n40  [key=2, style=dotted];
n37 -> n41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n42 -> n43  [key=0, style=solid];
n42 -> n28  [key=2, style=dotted];
n38 -> n34  [key=0, style=bold, color=blue];
n41 -> n42  [key=0, style=solid];
n43 -> n41  [key=0, style=bold, color=blue];
d12 -> d13  [key=0, style=solid, color=green];
d12 -> d19  [key=2, style=dotted, color=green];
d12 -> d22  [key=1, style=dashed, color=green, label="lambda expression"];
d31 -> d12  [key=1, style=dashed, color=green, label="HangFire.Server.Components.ServerWatchdog"];
d31 -> d23  [key=1, style=dashed, color=green, label="HangFire.Server.Components.ServerWatchdog"];
d31 -> d1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.Components.ServerWatchdog"];
d31 -> d4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.Components.ServerWatchdog"];
d31 -> d13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.Components.ServerWatchdog"];
d31 -> d26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.Components.ServerWatchdog"];
d11 -> d12  [key=0, style=solid, color=green];
d11 -> d14  [key=0, style=solid];
d13 -> d11  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d13 -> d20  [key=2, style=dotted];
d22 -> d23  [key=0, style=solid, color=green];
d23 -> d24  [key=0, style=solid, color=green];
d23 -> d3  [key=2, style=dotted, color=green];
d24 -> d22  [key=0, style=bold, color=blue];
d3 -> d4  [key=0, style=solid];
d3 -> d5  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
d1 -> d2  [key=0, style=solid];
d4 -> d5  [key=0, style=solid];
d4 -> d7  [key=2, style=dotted];
d26 -> d27  [key=0, style=solid];
d26 -> d29  [key=2, style=dotted];
d10 -> d11  [key=0, style=solid];
d10 -> d18  [key=2, style=dotted];
d14 -> d15  [key=0, style=solid];
d14 -> d17  [key=0, style=solid];
d14 -> d18  [key=2, style=dotted];
d6 -> d3  [key=0, style=bold, color=blue];
d5 -> d6  [key=0, style=solid];
d5 -> d8  [key=2, style=dotted];
d0 -> d1  [key=0, style=solid];
d2 -> d0  [key=0, style=bold, color=blue];
d25 -> d26  [key=0, style=solid];
d25 -> d27  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.Thread"];
d27 -> d28  [key=0, style=solid];
d27 -> d30  [key=2, style=dotted];
d9 -> d10  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d17 -> d9  [key=0, style=bold, color=blue];
d28 -> d25  [key=0, style=bold, color=blue];
d16 -> d17  [key=0, style=solid];
d16 -> d21  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_11  [key=2, style=dotted];
m0_6 -> m0_12  [key=2, style=dotted];
m0_73 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="System.Action<DbConnection>"];
m0_27 -> m0_28  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_30  [key=2, style=dotted];
m0_28 -> m0_31  [key=2, style=dotted];
m0_28 -> m0_61  [key=2, style=dotted];
m0_28 -> m0_62  [key=2, style=dotted];
m0_29 -> m0_27  [key=0, style=bold, color=blue];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_63  [key=2, style=dotted];
m0_29 -> m0_62  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_13  [key=2, style=dotted];
m0_21 -> m0_24  [key=2, style=dotted];
m0_21 -> m0_25  [key=2, style=dotted];
m0_21 -> m0_26  [key=2, style=dotted];
m0_22 -> m0_20  [key=0, style=solid, color=blue];
m0_22 -> m0_23  [key=0, style=solid];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_19  [key=0, style=bold, color=blue];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label=concurrency];
m0_24 -> m0_50  [key=0, style=solid];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_60  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_65  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_52  [key=0, style=solid];
m0_26 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_26 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="params SqlParameter[]"];
m0_26 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_64  [key=2, style=dotted];
m0_30 -> m0_62  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid, color=green];
m0_32 -> m0_66  [key=2, style=dotted];
m0_32 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="System.Action<DbConnection>"];
m0_33 -> m0_34  [key=0, style=solid, color=green];
m0_33 -> m0_13  [key=2, style=dotted];
m0_33 -> m0_37  [key=0, style=solid, color=green];
m0_33 -> m0_38  [key=2, style=dotted, color=green];
m0_33 -> m0_46  [key=2, style=dotted, color=green];
m0_33 -> m0_40  [key=1, style=dashed, color=green, label="lambda expression"];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label=count];
m0_34 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label=count];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_59  [key=0, style=solid];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_72  [key=2, style=dotted];
m0_42 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label=count];
m0_42 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label=count];
m0_42 -> m0_45  [key=2, style=dotted];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_11  [key=2, style=dotted];
m0_55 -> m0_73  [key=2, style=dotted];
m0_55 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label=command];
m0_55 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label=command];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_67  [key=2, style=dotted];
m0_36 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label=command];
m0_36 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label=command];
m0_36 -> m0_47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_36 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label=command];
m0_36 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label=command];
m0_36 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label=command];
m0_36 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=command];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_59  [key=0, style=solid];
m0_37 -> m0_68  [key=2, style=dotted];
m0_37 -> m0_32  [key=0, style=bold, color=blue];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_47  [key=0, style=solid];
m0_38 -> m0_69  [key=2, style=dotted];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_70  [key=2, style=dotted];
m0_39 -> m0_71  [key=2, style=dotted];
m0_39 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label=workCount];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_53  [key=0, style=solid];
m0_47 -> m0_69  [key=2, style=dotted];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_70  [key=2, style=dotted];
m0_48 -> m0_71  [key=2, style=dotted];
m0_48 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label=workCount];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_56  [key=0, style=solid];
m0_53 -> m0_69  [key=2, style=dotted];
m0_53 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label=command];
m0_53 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label=command];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_70  [key=2, style=dotted];
m0_54 -> m0_71  [key=2, style=dotted];
m0_54 -> m0_63  [key=2, style=dotted];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_35  [key=0, style=solid];
m0_56 -> m0_69  [key=2, style=dotted];
m0_56 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m0_56 -> m0_64  [key=2, style=dotted];
m0_56 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_56 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_40 -> m0_33  [key=1, style=dashed, color=green, label=DbConnection];
m0_40 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_44  [key=0, style=solid];
m0_43 -> m0_41  [key=0, style=solid];
m0_43 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_43 -> m0_40  [key=0, style=bold, color=blue];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_47  [key=0, style=solid];
m0_44 -> m0_13  [key=2, style=dotted];
m0_45 -> m0_46  [key=0, style=solid];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_13  [key=2, style=dotted];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_49 -> m0_47  [key=0, style=bold, color=blue];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_53  [key=0, style=solid];
m0_52 -> m0_50  [key=0, style=solid];
m0_52 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_62  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_72  [key=2, style=dotted];
m0_51 -> m0_24  [key=0, style=bold, color=blue];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_74  [key=2, style=dotted];
m0_57 -> m0_61  [key=0, style=solid];
m0_57 -> m0_65  [key=2, style=dotted];
m0_58 -> m0_35  [key=0, style=solid];
m0_58 -> m0_13  [key=2, style=dotted];
m0_58 -> m0_59  [key=0, style=solid];
m0_59 -> m0_23  [key=0, style=bold, color=blue];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_15  [key=2, style=dotted];
m0_74 -> m0_74  [key=3, color=darkorchid, style=bold, label="Field variable long _combinedHash64"];
m0_8 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m0_8 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m0_8 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_0  [key=0, style=bold, color=blue];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_16  [key=2, style=dotted];
m0_11 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_13 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> d20  [key=2, style=dotted];
m0_9 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label=table];
m0_9 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label=table];
m0_9 -> m0_13  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label=table];
m0_12 -> m0_9  [key=0, style=solid];
m0_12 -> m0_17  [key=2, style=dotted];
m0_14 -> m0_8  [key=0, style=bold, color=blue];
m0_14 -> m0_15  [key=0, style=solid];
m0_72 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label=table];
m0_19 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m0_19 -> m0_20  [key=0, style=solid];
m0_71 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m0_61 -> m0_26  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
m0_0 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m0_0 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=0, style=solid];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_5  [key=0, style=solid];
m0_2 -> m0_6  [key=2, style=dotted];
m0_2 -> m0_7  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label=time];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [key=0, style=solid];
m0_5 -> m0_8  [key=0, style=solid];
m0_5 -> m0_10  [key=2, style=dotted];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_13  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_69  [key=2, style=dotted];
m0_17 -> m0_14  [key=0, style=bold, color=blue];
m0_68 -> m0_66  [key=0, style=bold, color=blue];
m0_66 -> m0_67  [key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_13  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=2, style=dotted];
m0_16 -> m0_19  [key=2, style=dotted];
m0_60 -> m0_61  [key=0, style=solid];
m0_70 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.ExpirationManager"];
m0_70 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.ExpirationManager"];
m0_70 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.ExpirationManager"];
m0_70 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.ExpirationManager"];
m0_70 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.ExpirationManager"];
m0_70 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.ExpirationManager"];
m0_70 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.ExpirationManager"];
m0_70 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.ExpirationManager"];
m0_75 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="ConsoleSample.ConsoleJob"];
m1_0 -> m1_1  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid, color=green];
m1_24 -> m1_42  [key=2, style=dotted, color=green];
m1_7 -> m1_24  [key=1, style=dashed, color=green, label=version];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_43  [key=2, style=dotted];
m1_7 -> m1_44  [key=2, style=dotted];
m1_7 -> m1_45  [key=2, style=dotted];
m1_7 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label=version];
m1_7 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label=version];
m1_23 -> m1_24  [key=0, style=solid, color=green];
m1_23 -> m1_41  [key=2, style=dotted, color=green];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_41  [key=2, style=dotted];
m1_22 -> m1_23  [key=0, style=solid, color=green];
m1_22 -> m1_42  [key=2, style=dotted];
m1_22 -> m1_50  [key=2, style=dotted];
m1_1 -> m1_41  [key=2, style=dotted];
m1_1 -> m1_2  [key=0, style=solid];
m1_2 -> m1_41  [key=2, style=dotted];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_42  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_4 -> m1_41  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_42  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_41  [key=2, style=dotted];
m1_8 -> m1_41  [key=2, style=dotted];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_42  [key=2, style=dotted];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_46  [key=2, style=dotted];
m1_10 -> m1_41  [key=2, style=dotted];
m1_10 -> m1_11  [key=0, style=solid];
m1_11 -> m1_42  [key=2, style=dotted];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_47  [key=2, style=dotted];
m1_12 -> m1_41  [key=2, style=dotted];
m1_12 -> m1_13  [key=0, style=solid];
m1_13 -> m1_42  [key=2, style=dotted];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_48  [key=2, style=dotted];
m1_13 -> m1_49  [key=2, style=dotted];
m1_14 -> m1_41  [key=2, style=dotted];
m1_14 -> m1_15  [key=0, style=solid];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_21  [key=0, style=solid];
m1_16 -> m1_41  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_17 -> m1_42  [key=2, style=dotted];
m1_17 -> m1_18  [key=0, style=solid];
m1_18 -> m1_41  [key=2, style=dotted];
m1_18 -> m1_19  [key=0, style=solid];
m1_19 -> m1_42  [key=2, style=dotted];
m1_19 -> m1_20  [key=0, style=solid];
m1_20 -> m1_41  [key=2, style=dotted];
m1_20 -> m1_21  [key=0, style=solid];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_41  [key=2, style=dotted];
m1_26 -> m1_42  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_27 -> m1_41  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_28 -> m1_42  [key=2, style=dotted];
m1_28 -> m1_29  [key=0, style=solid];
m1_29 -> m1_41  [key=2, style=dotted];
m1_29 -> m1_30  [key=0, style=solid];
m1_30 -> m1_42  [key=2, style=dotted];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_51  [key=2, style=dotted];
m1_31 -> m1_41  [key=2, style=dotted];
m1_31 -> m1_32  [key=0, style=solid];
m1_32 -> m1_42  [key=2, style=dotted];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_52  [key=2, style=dotted];
m1_32 -> m1_53  [key=2, style=dotted];
m1_33 -> m1_41  [key=2, style=dotted];
m1_33 -> m1_34  [key=0, style=solid];
m1_34 -> m1_42  [key=2, style=dotted];
m1_34 -> m1_35  [key=0, style=solid];
m1_35 -> m1_41  [key=2, style=dotted];
m1_35 -> m1_36  [key=0, style=solid];
m1_36 -> m1_42  [key=2, style=dotted];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_46  [key=2, style=dotted];
m1_37 -> m1_41  [key=2, style=dotted];
m1_37 -> m1_38  [key=0, style=solid];
m1_38 -> m1_42  [key=2, style=dotted];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_46  [key=2, style=dotted];
m1_39 -> m1_41  [key=2, style=dotted];
m1_39 -> m1_40  [key=0, style=solid];
m1_40 -> m1_0  [key=0, style=bold, color=blue];
m1_54 -> m1_24  [key=1, style=dashed, color=green, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_23  [key=1, style=dashed, color=green, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_22  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_37  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m1_54 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.Pages.LayoutPage"];
m2_24 -> m2_25  [key=0, style=solid, color=green];
m2_25 -> m2_26  [key=0, style=solid, color=green];
m2_25 -> m2_35  [key=0, style=solid, color=green];
m2_26 -> m2_27  [key=0, style=solid, color=green];
m2_35 -> m2_36  [key=0, style=solid, color=green];
m2_35 -> m2_41  [key=0, style=solid, color=green];
m2_27 -> m2_28  [key=0, style=solid, color=green];
m2_34 -> m2_35  [key=0, style=solid, color=green];
m2_34 -> m2_43  [key=2, style=dotted, color=green];
m2_40 -> m2_35  [key=0, style=solid, color=green];
m2_40 -> m2_44  [key=2, style=dotted, color=green];
m2_36 -> m2_36  [key=1, style=dashed, color=green, label=command];
m2_36 -> m2_37  [key=0, style=solid, color=green];
m2_28 -> m2_29  [key=0, style=solid, color=green];
m2_28 -> m2_30  [key=1, style=dashed, color=green, label=batchTimeout];
m2_28 -> m2_33  [key=1, style=dashed, color=green, label=batchTimeout];
m2_29 -> m2_30  [key=0, style=solid, color=green];
m2_29 -> m2_33  [key=0, style=solid, color=green];
m2_30 -> m2_30  [key=1, style=dashed, color=green, label=batchTimeout];
m2_30 -> m2_31  [key=0, style=solid, color=green];
m2_30 -> m2_32  [key=1, style=dashed, color=green, label=batchTimeout];
m2_30 -> m2_33  [key=1, style=dashed, color=green, label=batchTimeout];
m2_33 -> m2_34  [key=0, style=solid, color=green];
m2_31 -> m2_33  [key=0, style=solid, color=green];
m2_31 -> m2_32  [key=0, style=solid, color=green];
m2_32 -> m2_33  [key=0, style=solid, color=green];
m2_32 -> m2_32  [key=1, style=dashed, color=green, label=batchTimeout];
m2_32 -> m2_42  [key=2, style=dotted, color=green];
m2_37 -> m2_37  [key=1, style=dashed, color=green, label=command];
m2_37 -> m2_38  [key=0, style=solid, color=green];
m2_37 -> m2_39  [key=1, style=dashed, color=green, label=command];
m2_37 -> m2_40  [key=1, style=dashed, color=green, label=command];
m2_38 -> m2_39  [key=0, style=solid, color=green];
m2_38 -> m2_40  [key=0, style=solid, color=green];
m2_39 -> m2_39  [key=1, style=dashed, color=green, label=command];
m2_39 -> m2_40  [key=0, style=solid, color=green];
m2_41 -> m2_24  [key=0, style=bold, color=blue];
m2_17 -> m2_18  [key=0, style=solid, color=green];
m2_17 -> m2_19  [key=1, style=dashed, color=green, label=DbCommand];
m2_17 -> m2_20  [key=1, style=dashed, color=green, label=DbCommand];
m2_18 -> m2_19  [key=0, style=solid, color=green];
m2_18 -> m2_20  [key=0, style=solid, color=green];
m2_19 -> m2_21  [key=0, style=solid, color=green];
m2_19 -> m2_22  [key=2, style=dotted, color=green];
m2_20 -> m2_21  [key=0, style=solid, color=green];
m2_20 -> m2_23  [key=2, style=dotted, color=green];
m2_21 -> m2_17  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_1 -> m2_6  [key=0, style=solid, color=green];
m2_2 -> m2_3  [key=0, style=solid, color=green];
m2_2 -> m2_7  [key=2, style=dotted, color=green];
m2_3 -> m2_4  [key=0, style=solid, color=green];
m2_3 -> m2_6  [key=0, style=solid, color=green];
m2_4 -> m2_5  [key=0, style=solid, color=green];
m2_5 -> m2_6  [key=0, style=solid, color=green];
m2_6 -> m2_0  [key=0, style=bold, color=blue];
m2_8 -> m2_9  [key=0, style=solid, color=green];
m2_8 -> m2_10  [key=1, style=dashed, color=green, label="params SqlParameter[]"];
m2_9 -> m2_10  [key=0, style=solid, color=green];
m2_9 -> m2_14  [key=2, style=dotted, color=green];
m2_9 -> m2_11  [key=1, style=dashed, color=green, label=command];
m2_9 -> m2_12  [key=1, style=dashed, color=green, label=command];
m2_10 -> m2_11  [key=0, style=solid, color=green];
m2_10 -> m2_12  [key=0, style=solid, color=green];
m2_11 -> m2_10  [key=0, style=solid, color=green];
m2_11 -> m2_15  [key=2, style=dotted, color=green];
m2_12 -> m2_13  [key=0, style=solid, color=green];
m2_12 -> m2_16  [key=2, style=dotted, color=green];
m2_13 -> m2_8  [key=0, style=bold, color=blue];
m2_45 -> m2_2  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_3  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_5  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_12  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_18  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_19  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_20  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_25  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_26  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_35  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_27  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_28  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_30  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_33  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_31  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_32  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_34  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_36  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_37  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_38  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m2_45 -> m2_39  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlCommandBatch"];
m3_8 -> m3_9  [key=0, style=solid, color=green];
m3_9 -> m3_10  [key=0, style=solid, color=green];
m3_9 -> m3_11  [key=2, style=dotted, color=green];
m3_10 -> m3_8  [key=0, style=bold, color=blue];
m3_3 -> m3_4  [key=0, style=solid, color=green];
m3_4 -> m3_5  [key=0, style=solid, color=green];
m3_4 -> m3_6  [key=2, style=dotted, color=green];
m3_4 -> m3_7  [key=2, style=dotted, color=green];
m3_5 -> m3_3  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid, color=green];
m3_1 -> m3_2  [key=0, style=solid, color=green];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_12 -> m3_13  [key=0, style=solid, color=green];
m3_13 -> m3_14  [key=0, style=solid, color=green];
m3_13 -> m3_15  [key=2, style=dotted, color=green];
m3_14 -> m3_12  [key=0, style=bold, color=blue];
m3_16 -> m3_1  [key=1, style=dashed, color=green, label="HangFire.States.SucceededState"];
m3_16 -> m3_4  [key=1, style=dashed, color=green, label="HangFire.States.SucceededState"];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.Job"];
m4_6 -> m4_11  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_6 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_6 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.Job"];
m4_6 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_6 -> m4_20  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_6 -> m4_21  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_9  [key=0, style=solid];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_11  [key=0, style=solid];
m4_11 -> m4_12  [key=0, style=solid];
m4_11 -> m4_13  [key=0, style=solid];
m4_13 -> m4_14  [key=0, style=solid];
m4_13 -> m4_24  [key=2, style=dotted];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_27  [key=2, style=dotted];
m4_18 -> m4_19  [key=0, style=solid];
m4_20 -> m4_21  [key=0, style=solid];
m4_20 -> m4_30  [key=2, style=dotted];
m4_20 -> m4_31  [key=2, style=dotted];
m4_21 -> m4_22  [key=0, style=solid];
m4_21 -> m4_32  [key=2, style=dotted];
m4_8 -> m4_23  [key=0, style=solid];
m4_8 -> m4_5  [key=2, style=dotted];
m4_10 -> m4_23  [key=0, style=solid];
m4_10 -> m4_5  [key=2, style=dotted];
m4_12 -> m4_23  [key=0, style=solid];
m4_12 -> m4_5  [key=2, style=dotted];
m4_14 -> m4_15  [key=0, style=solid];
m4_14 -> d7  [key=2, style=dotted];
m4_14 -> m4_19  [key=1, style=dashed, color=darkseagreen4, label=connection];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_26  [key=2, style=dotted];
m4_15 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label=recurringJob];
m4_15 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label=recurringJob];
m4_15 -> m4_20  [key=1, style=dashed, color=darkseagreen4, label=recurringJob];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_29  [key=2, style=dotted];
m4_19 -> m4_21  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m4_19 -> m4_22  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_28  [key=2, style=dotted];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_33  [key=2, style=dotted];
m4_23 -> m4_6  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.JobStorage"];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [key=0, style=solid];
m4_3 -> m4_4  [key=0, style=solid];
m4_2 -> m4_4  [key=0, style=solid];
m4_2 -> m4_5  [key=2, style=dotted];
m4_4 -> m4_0  [key=0, style=bold, color=blue];
m4_34 -> m4_35  [key=0, style=solid];
m4_34 -> m4_39  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_34 -> m4_40  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_37  [key=0, style=solid];
m4_39 -> m4_40  [key=0, style=solid];
m4_39 -> m4_30  [key=2, style=dotted];
m4_39 -> m4_43  [key=2, style=dotted];
m4_40 -> m4_41  [key=0, style=solid];
m4_40 -> m4_44  [key=2, style=dotted];
m4_36 -> m4_42  [key=0, style=solid];
m4_36 -> m4_5  [key=2, style=dotted];
m4_37 -> m4_38  [key=0, style=solid];
m4_37 -> d7  [key=2, style=dotted];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_29  [key=2, style=dotted];
m4_38 -> m4_40  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m4_38 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_33  [key=2, style=dotted];
m4_42 -> m4_34  [key=0, style=bold, color=blue];
m4_45 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.RecurringJobManager"];
m4_45 -> m4_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.RecurringJobManager"];
m4_45 -> m4_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.RecurringJobManager"];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_0  [key=0, style=bold, color=blue];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_27  [key=2, style=dotted];
m6_15 -> m6_19  [key=0, style=solid];
m6_0 -> m6_1  [key=0, style=solid];
m6_0 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_5  [key=1, style=dashed, color=darkseagreen4, label=storage];
m6_1 -> m6_12  [key=2, style=dotted];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_5  [key=1, style=dashed, color=darkseagreen4, label=connection];
m6_2 -> m6_13  [key=2, style=dotted];
m6_3 -> m6_0  [key=0, style=bold, color=blue];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_14  [key=2, style=dotted];
m6_3 -> m6_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_3 -> m6_5  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_27 -> m6_28  [key=0, style=solid];
m6_26 -> m6_363  [key=0, style=solid];
m6_363 -> m6_26  [key=0, style=bold, color=blue];
m6_75 -> m6_76  [key=0, style=solid];
m6_76 -> m6_77  [key=0, style=solid];
m6_76 -> m6_61  [key=2, style=dotted];
m6_77 -> m6_39  [key=2, style=dotted];
m6_77 -> m6_78  [key=0, style=solid];
m6_78 -> m6_79  [key=0, style=solid];
m6_78 -> n22  [key=2, style=dotted];
m6_79 -> m6_75  [key=0, style=bold, color=blue];
m6_311 -> m6_312  [key=0, style=solid];
m6_313 -> m6_314  [key=0, style=solid];
m6_313 -> m6_100  [key=2, style=dotted];
m6_315 -> m6_316  [key=0, style=solid];
m6_315 -> m6_19  [key=2, style=dotted];
m6_315 -> m6_275  [key=2, style=dotted];
m6_315 -> m6_321  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_317 -> m6_318  [key=0, style=solid];
m6_317 -> m6_61  [key=2, style=dotted];
m6_318 -> m6_39  [key=2, style=dotted];
m6_318 -> m6_319  [key=0, style=solid];
m6_312 -> m6_313  [key=0, style=solid];
m6_312 -> m6_164  [key=2, style=dotted];
m6_312 -> m6_316  [key=1, style=dashed, color=darkseagreen4, label=filter];
m6_314 -> m6_315  [key=0, style=solid];
m6_314 -> m6_325  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_314 -> m6_274  [key=2, style=dotted];
m6_314 -> m6_316  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_314 -> m6_328  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_316 -> m6_317  [key=0, style=solid];
m6_316 -> m6_19  [key=2, style=dotted];
m6_316 -> m6_144  [key=2, style=dotted];
m6_316 -> m6_324  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_316 -> m6_330  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_319 -> m6_320  [key=0, style=solid];
m6_319 -> m6_145  [key=2, style=dotted];
m6_320 -> m6_311  [key=0, style=bold, color=blue];
m6_222 -> m6_223  [key=0, style=solid];
m6_225 -> m6_226  [key=0, style=solid];
m6_225 -> m6_100  [key=2, style=dotted];
m6_226 -> m6_227  [key=0, style=solid];
m6_226 -> m6_100  [key=2, style=dotted];
m6_228 -> m6_229  [key=0, style=solid];
m6_228 -> m6_61  [key=2, style=dotted];
m6_229 -> m6_39  [key=2, style=dotted];
m6_229 -> m6_230  [key=0, style=solid];
m6_223 -> m6_225  [key=1, style=dashed, color=darkseagreen4, label=outerFilter];
m6_223 -> m6_224  [key=0, style=solid];
m6_223 -> m6_164  [key=2, style=dotted];
m6_223 -> m6_230  [key=1, style=dashed, color=darkseagreen4, label=outerFilter];
m6_224 -> m6_225  [key=0, style=solid];
m6_224 -> m6_226  [key=1, style=dashed, color=darkseagreen4, label=innerFilter];
m6_224 -> m6_164  [key=2, style=dotted];
m6_224 -> m6_227  [key=1, style=dashed, color=darkseagreen4, label=innerFilter];
m6_227 -> m6_228  [key=0, style=solid];
m6_227 -> m6_19  [key=2, style=dotted];
m6_227 -> m6_144  [key=2, style=dotted];
m6_227 -> m6_232  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_227 -> m6_235  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_230 -> m6_71  [key=2, style=dotted];
m6_230 -> m6_231  [key=0, style=solid];
m6_230 -> m6_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_231 -> m6_222  [key=0, style=bold, color=blue];
m6_28 -> m6_30  [key=2, style=dotted];
m6_28 -> m6_29  [key=0, style=solid];
m6_28 -> m6_31  [key=2, style=dotted];
m6_16 -> m6_6  [key=0, style=solid];
m6_16 -> m6_17  [key=0, style=solid];
m6_333 -> m6_334  [key=0, style=solid];
m6_336 -> m6_337  [key=0, style=solid];
m6_336 -> m6_100  [key=2, style=dotted];
m6_337 -> m6_338  [key=0, style=solid];
m6_337 -> m6_100  [key=2, style=dotted];
m6_338 -> m6_30  [key=2, style=dotted];
m6_338 -> m6_339  [key=0, style=solid];
m6_338 -> m6_19  [key=2, style=dotted];
m6_338 -> m6_345  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_340 -> m6_341  [key=0, style=solid];
m6_340 -> m6_61  [key=2, style=dotted];
m6_340 -> m6_355  [key=1, style=dashed, color=darkseagreen4, label=process];
m6_341 -> m6_342  [key=0, style=solid];
m6_341 -> m6_344  [key=2, style=dotted];
m6_341 -> m6_354  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_334 -> m6_336  [key=1, style=dashed, color=darkseagreen4, label=outerFilter];
m6_334 -> m6_335  [key=0, style=solid];
m6_334 -> m6_164  [key=2, style=dotted];
m6_334 -> m6_342  [key=1, style=dashed, color=darkseagreen4, label=outerFilter];
m6_335 -> m6_336  [key=0, style=solid];
m6_335 -> m6_337  [key=1, style=dashed, color=darkseagreen4, label=innerFilter];
m6_335 -> m6_164  [key=2, style=dotted];
m6_335 -> m6_339  [key=1, style=dashed, color=darkseagreen4, label=innerFilter];
m6_339 -> m6_340  [key=0, style=solid];
m6_339 -> m6_19  [key=2, style=dotted];
m6_339 -> m6_144  [key=2, style=dotted];
m6_339 -> m6_348  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_339 -> m6_351  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_342 -> m6_71  [key=2, style=dotted];
m6_342 -> m6_343  [key=0, style=solid];
m6_342 -> m6_357  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_343 -> m6_333  [key=0, style=bold, color=blue];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_16  [key=0, style=solid];
m6_49 -> m6_50  [key=0, style=solid];
m6_50 -> m6_30  [key=2, style=dotted];
m6_50 -> m6_51  [key=0, style=solid];
m6_50 -> m6_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_51 -> m6_52  [key=0, style=solid];
m6_51 -> n22  [key=2, style=dotted];
m6_52 -> m6_49  [key=0, style=bold, color=blue];
m6_30 -> m6_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerFetcher"];
m6_30 -> m6_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerFetcher"];
m6_30 -> m6_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerFetcher"];
m6_30 -> m6_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerFetcher"];
m6_24 -> m6_25  [key=0, style=solid];
m6_24 -> m6_26  [key=2, style=dotted];
m6_40 -> m6_41  [key=0, style=solid];
m6_41 -> m6_30  [key=2, style=dotted];
m6_41 -> m6_42  [key=0, style=solid];
m6_41 -> m6_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_42 -> m6_43  [key=0, style=solid];
m6_42 -> n22  [key=2, style=dotted];
m6_43 -> m6_40  [key=0, style=bold, color=blue];
m6_29 -> m6_27  [key=0, style=bold, color=blue];
m6_61 -> m6_364  [key=0, style=solid];
m6_364 -> m6_365  [key=0, style=solid];
m6_364 -> m6_48  [key=2, style=dotted];
m6_365 -> m6_61  [key=0, style=bold, color=blue];
m6_25 -> m6_23  [key=0, style=bold, color=blue];
m6_176 -> m6_177  [key=0, style=solid];
m6_179 -> m6_180  [key=0, style=solid];
m6_179 -> m6_100  [key=2, style=dotted];
m6_180 -> m6_181  [key=0, style=solid];
m6_180 -> m6_100  [key=2, style=dotted];
m6_185 -> m6_186  [key=0, style=solid];
m6_185 -> m6_61  [key=2, style=dotted];
m6_186 -> m6_39  [key=2, style=dotted];
m6_186 -> m6_187  [key=0, style=solid];
m6_177 -> m6_179  [key=1, style=dashed, color=darkseagreen4, label=outerFilter];
m6_177 -> m6_178  [key=0, style=solid];
m6_177 -> m6_164  [key=2, style=dotted];
m6_177 -> m6_181  [key=1, style=dashed, color=darkseagreen4, label=outerFilter];
m6_177 -> m6_184  [key=1, style=dashed, color=darkseagreen4, label=outerFilter];
m6_178 -> m6_179  [key=0, style=solid];
m6_178 -> m6_180  [key=1, style=dashed, color=darkseagreen4, label=innerFilter];
m6_178 -> m6_164  [key=2, style=dotted];
m6_178 -> m6_182  [key=1, style=dashed, color=darkseagreen4, label=innerFilter];
m6_178 -> m6_183  [key=1, style=dashed, color=darkseagreen4, label=innerFilter];
m6_181 -> m6_19  [key=2, style=dotted];
m6_181 -> m6_122  [key=2, style=dotted];
m6_181 -> m6_182  [key=0, style=solid];
m6_181 -> m6_188  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_184 -> m6_185  [key=0, style=solid];
m6_184 -> m6_19  [key=2, style=dotted];
m6_184 -> m6_122  [key=2, style=dotted];
m6_184 -> m6_197  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_182 -> m6_19  [key=2, style=dotted];
m6_182 -> m6_122  [key=2, style=dotted];
m6_182 -> m6_191  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_182 -> m6_183  [key=0, style=solid];
m6_183 -> m6_19  [key=2, style=dotted];
m6_183 -> m6_122  [key=2, style=dotted];
m6_183 -> m6_184  [key=0, style=solid];
m6_183 -> m6_194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_187 -> m6_176  [key=0, style=bold, color=blue];
m6_91 -> m6_92  [key=0, style=solid];
m6_93 -> m6_94  [key=0, style=solid];
m6_93 -> m6_100  [key=2, style=dotted];
m6_94 -> m6_30  [key=2, style=dotted];
m6_94 -> m6_95  [key=0, style=solid];
m6_94 -> m6_19  [key=2, style=dotted];
m6_94 -> m6_101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_95 -> m6_96  [key=0, style=solid];
m6_95 -> m6_61  [key=2, style=dotted];
m6_95 -> m6_105  [key=1, style=dashed, color=darkseagreen4, label=process];
m6_96 -> m6_30  [key=2, style=dotted];
m6_96 -> m6_97  [key=0, style=solid];
m6_96 -> m6_104  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_92 -> m6_93  [key=0, style=solid];
m6_92 -> m6_99  [key=2, style=dotted];
m6_92 -> m6_97  [key=1, style=dashed, color=darkseagreen4, label=filter];
m6_97 -> m6_71  [key=2, style=dotted];
m6_97 -> m6_98  [key=0, style=solid];
m6_97 -> m6_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_98 -> m6_91  [key=0, style=bold, color=blue];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_14  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m6_4 -> m6_15  [key=2, style=dotted];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_13  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_5 -> m6_16  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_5 -> m6_17  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_5 -> m6_18  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_5 -> m6_5  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.SqlServer.Entities.Job job"];
m6_14 -> m6_15  [key=0, style=solid];
m6_14 -> m6_16  [key=0, style=solid];
m6_14 -> m6_25  [key=2, style=dotted];
m6_14 -> m6_26  [key=2, style=dotted];
m6_14 -> m6_14  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> m6_18  [key=1, style=dashed, color=darkseagreen4, label=queueName];
m6_6 -> m6_5  [key=3, color=darkorchid, style=bold, label="Local variable string queueName"];
m6_6 -> m6_17  [key=2, style=dotted];
m6_18 -> m6_19  [key=0, style=solid];
m6_18 -> m6_28  [key=2, style=dotted];
m6_18 -> m6_29  [key=2, style=dotted];
m6_7 -> m6_8  [key=0, style=solid];
m6_7 -> m6_20  [key=2, style=dotted];
m6_7 -> m6_21  [key=2, style=dotted];
m6_7 -> m6_10  [key=1, style=dashed, color=darkseagreen4, label=idAndQueue];
m6_7 -> m6_12  [key=1, style=dashed, color=darkseagreen4, label=idAndQueue];
m6_7 -> m6_18  [key=2, style=dotted];
m6_8 -> m6_9  [key=0, style=solid];
m6_8 -> m6_13  [key=0, style=solid];
m6_8 -> m6_19  [key=2, style=dotted];
m6_8 -> m6_20  [key=2, style=dotted];
m6_8 -> m6_21  [key=2, style=dotted];
m6_8 -> m6_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_8 -> m6_32  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_10 -> m6_11  [key=0, style=solid];
m6_10 -> m6_23  [key=2, style=dotted];
m6_10 -> m6_19  [key=2, style=dotted];
m6_10 -> m6_21  [key=2, style=dotted];
m6_10 -> m6_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_12 -> m6_13  [key=0, style=solid];
m6_12 -> m6_18  [key=1, style=dashed, color=darkseagreen4, label=queueName];
m6_9 -> m6_10  [key=0, style=solid];
m6_9 -> m6_22  [key=2, style=dotted];
m6_9 -> m6_11  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m6_11 -> m6_12  [key=0, style=solid];
m6_11 -> m6_24  [key=2, style=dotted];
m6_11 -> m6_21  [key=2, style=dotted];
m6_11 -> m6_13  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_11 -> m6_16  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_11 -> m6_17  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_11 -> m6_18  [key=1, style=dashed, color=darkseagreen4, label=job];
m6_11 -> m6_0  [key=0, style=bold, color=blue];
m6_19 -> m6_4  [key=0, style=bold, color=blue];
m6_265 -> m6_266  [key=0, style=solid];
m6_267 -> m6_268  [key=0, style=solid];
m6_267 -> m6_100  [key=2, style=dotted];
m6_269 -> m6_270  [key=0, style=solid];
m6_269 -> m6_19  [key=2, style=dotted];
m6_269 -> m6_275  [key=2, style=dotted];
m6_269 -> m6_276  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_270 -> m6_271  [key=0, style=solid];
m6_270 -> m6_61  [key=2, style=dotted];
m6_270 -> m6_280  [key=1, style=dashed, color=darkseagreen4, label=process];
m6_271 -> m6_30  [key=2, style=dotted];
m6_271 -> m6_272  [key=0, style=solid];
m6_271 -> m6_279  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_266 -> m6_267  [key=0, style=solid];
m6_266 -> m6_164  [key=2, style=dotted];
m6_266 -> m6_272  [key=1, style=dashed, color=darkseagreen4, label=filter];
m6_268 -> m6_269  [key=0, style=solid];
m6_268 -> m6_283  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_268 -> m6_274  [key=2, style=dotted];
m6_268 -> m6_272  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_268 -> m6_286  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_272 -> m6_71  [key=2, style=dotted];
m6_272 -> m6_273  [key=0, style=solid];
m6_272 -> m6_282  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_273 -> m6_265  [key=0, style=bold, color=blue];
m6_288 -> m6_289  [key=0, style=solid];
m6_291 -> m6_292  [key=0, style=solid];
m6_291 -> m6_100  [key=2, style=dotted];
m6_292 -> m6_293  [key=0, style=solid];
m6_292 -> m6_100  [key=2, style=dotted];
m6_294 -> m6_295  [key=0, style=solid];
m6_294 -> m6_19  [key=2, style=dotted];
m6_294 -> m6_275  [key=2, style=dotted];
m6_294 -> m6_299  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_295 -> m6_296  [key=0, style=solid];
m6_295 -> m6_61  [key=2, style=dotted];
m6_295 -> m6_303  [key=1, style=dashed, color=darkseagreen4, label=process];
m6_296 -> m6_30  [key=2, style=dotted];
m6_296 -> m6_297  [key=0, style=solid];
m6_296 -> m6_302  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_289 -> m6_291  [key=1, style=dashed, color=darkseagreen4, label=outerFilter];
m6_289 -> m6_290  [key=0, style=solid];
m6_289 -> m6_164  [key=2, style=dotted];
m6_289 -> m6_297  [key=1, style=dashed, color=darkseagreen4, label=outerFilter];
m6_290 -> m6_291  [key=0, style=solid];
m6_290 -> m6_292  [key=1, style=dashed, color=darkseagreen4, label=innerFilter];
m6_290 -> m6_164  [key=2, style=dotted];
m6_293 -> m6_294  [key=0, style=solid];
m6_293 -> m6_306  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_293 -> m6_274  [key=2, style=dotted];
m6_293 -> m6_297  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_293 -> m6_309  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_297 -> m6_71  [key=2, style=dotted];
m6_297 -> m6_298  [key=0, style=solid];
m6_297 -> m6_305  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_298 -> m6_288  [key=0, style=bold, color=blue];
m6_23 -> m6_24  [key=0, style=solid];
m6_244 -> m6_245  [key=0, style=solid];
m6_246 -> m6_247  [key=0, style=solid];
m6_246 -> m6_100  [key=2, style=dotted];
m6_248 -> m6_249  [key=0, style=solid];
m6_248 -> m6_61  [key=2, style=dotted];
m6_248 -> m6_257  [key=1, style=dashed, color=darkseagreen4, label=process];
m6_249 -> m6_30  [key=2, style=dotted];
m6_249 -> m6_250  [key=0, style=solid];
m6_249 -> m6_256  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_250 -> m6_251  [key=0, style=solid];
m6_250 -> m6_71  [key=2, style=dotted];
m6_250 -> m6_259  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_247 -> m6_30  [key=2, style=dotted];
m6_247 -> m6_248  [key=0, style=solid];
m6_247 -> m6_19  [key=2, style=dotted];
m6_247 -> m6_253  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_245 -> m6_246  [key=0, style=solid];
m6_245 -> m6_247  [key=1, style=dashed, color=darkseagreen4, label=filter];
m6_245 -> m6_164  [key=2, style=dotted];
m6_245 -> m6_251  [key=1, style=dashed, color=darkseagreen4, label=filter];
m6_251 -> m6_71  [key=2, style=dotted];
m6_251 -> m6_252  [key=0, style=solid];
m6_251 -> m6_262  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_252 -> m6_244  [key=0, style=bold, color=blue];
m6_111 -> m6_112  [key=0, style=solid];
m6_116 -> m6_117  [key=0, style=solid];
m6_116 -> m6_100  [key=2, style=dotted];
m6_117 -> m6_118  [key=0, style=solid];
m6_117 -> m6_100  [key=2, style=dotted];
m6_118 -> m6_30  [key=2, style=dotted];
m6_118 -> m6_119  [key=0, style=solid];
m6_118 -> m6_19  [key=2, style=dotted];
m6_118 -> m6_129  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_119 -> m6_120  [key=0, style=solid];
m6_119 -> m6_61  [key=2, style=dotted];
m6_119 -> m6_133  [key=1, style=dashed, color=darkseagreen4, label=process];
m6_120 -> m6_30  [key=2, style=dotted];
m6_120 -> m6_121  [key=0, style=solid];
m6_120 -> m6_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_112 -> m6_116  [key=1, style=dashed, color=darkseagreen4, label=filter1];
m6_112 -> m6_113  [key=0, style=solid];
m6_112 -> m6_99  [key=2, style=dotted];
m6_112 -> m6_115  [key=1, style=dashed, color=darkseagreen4, label=filter1];
m6_115 -> m6_116  [key=0, style=solid];
m6_115 -> m6_19  [key=2, style=dotted];
m6_115 -> m6_122  [key=2, style=dotted];
m6_115 -> m6_126  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_113 -> m6_117  [key=1, style=dashed, color=darkseagreen4, label=filter2];
m6_113 -> m6_114  [key=0, style=solid];
m6_113 -> m6_99  [key=2, style=dotted];
m6_114 -> m6_19  [key=2, style=dotted];
m6_114 -> m6_115  [key=0, style=solid];
m6_114 -> m6_122  [key=2, style=dotted];
m6_114 -> m6_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_121 -> m6_111  [key=0, style=bold, color=blue];
m6_351 -> m6_352  [key=0, style=solid];
m6_88 -> m6_89  [key=0, style=solid, color=green];
m6_89 -> m6_90  [key=0, style=solid, color=green];
m6_89 -> m6_39  [key=2, style=dotted, color=green];
m6_90 -> m6_88  [key=0, style=bold, color=blue];
m6_37 -> m6_39  [key=2, style=dotted];
m6_37 -> m6_38  [key=0, style=solid];
m6_46 -> m6_47  [key=0, style=solid];
m6_46 -> m6_48  [key=2, style=dotted];
m6_54 -> m6_55  [key=0, style=solid];
m6_54 -> m6_48  [key=2, style=dotted];
m6_73 -> m6_39  [key=2, style=dotted];
m6_73 -> m6_74  [key=0, style=solid];
m6_105 -> m6_39  [key=2, style=dotted];
m6_105 -> m6_106  [key=0, style=solid];
m6_133 -> m6_39  [key=2, style=dotted];
m6_133 -> m6_134  [key=0, style=solid];
m6_257 -> m6_39  [key=2, style=dotted];
m6_257 -> m6_258  [key=0, style=solid];
m6_280 -> m6_39  [key=2, style=dotted];
m6_280 -> m6_281  [key=0, style=solid];
m6_303 -> m6_39  [key=2, style=dotted];
m6_303 -> m6_304  [key=0, style=solid];
m6_355 -> m6_39  [key=2, style=dotted];
m6_355 -> m6_356  [key=0, style=solid];
m6_86 -> m6_30  [key=2, style=dotted];
m6_86 -> m6_39  [key=2, style=dotted];
m6_86 -> m6_87  [key=0, style=solid];
m6_102 -> m6_30  [key=2, style=dotted];
m6_102 -> m6_39  [key=2, style=dotted];
m6_102 -> m6_103  [key=0, style=solid];
m6_108 -> m6_30  [key=2, style=dotted];
m6_108 -> m6_109  [key=0, style=solid];
m6_108 -> m6_110  [key=2, style=dotted];
m6_124 -> m6_30  [key=2, style=dotted];
m6_124 -> m6_125  [key=0, style=solid];
m6_124 -> m6_110  [key=2, style=dotted];
m6_127 -> m6_30  [key=2, style=dotted];
m6_127 -> m6_128  [key=0, style=solid];
m6_127 -> m6_110  [key=2, style=dotted];
m6_130 -> m6_30  [key=2, style=dotted];
m6_130 -> m6_39  [key=2, style=dotted];
m6_130 -> m6_131  [key=0, style=solid];
m6_147 -> m6_30  [key=2, style=dotted];
m6_147 -> m6_39  [key=2, style=dotted];
m6_147 -> m6_148  [key=0, style=solid];
m6_150 -> m6_30  [key=2, style=dotted];
m6_150 -> m6_151  [key=0, style=solid];
m6_150 -> m6_110  [key=2, style=dotted];
m6_166 -> m6_30  [key=2, style=dotted];
m6_166 -> m6_167  [key=0, style=solid];
m6_166 -> m6_168  [key=2, style=dotted];
m6_170 -> m6_30  [key=2, style=dotted];
m6_170 -> m6_39  [key=2, style=dotted];
m6_170 -> m6_171  [key=0, style=solid];
m6_173 -> m6_30  [key=2, style=dotted];
m6_173 -> m6_174  [key=0, style=solid];
m6_173 -> m6_175  [key=2, style=dotted];
m6_189 -> m6_30  [key=2, style=dotted];
m6_189 -> m6_190  [key=0, style=solid];
m6_189 -> m6_168  [key=2, style=dotted];
m6_192 -> m6_30  [key=2, style=dotted];
m6_192 -> m6_193  [key=0, style=solid];
m6_192 -> m6_168  [key=2, style=dotted];
m6_195 -> m6_30  [key=2, style=dotted];
m6_195 -> m6_196  [key=0, style=solid];
m6_195 -> m6_175  [key=2, style=dotted];
m6_198 -> m6_30  [key=2, style=dotted];
m6_198 -> m6_199  [key=0, style=solid];
m6_198 -> m6_175  [key=2, style=dotted];
m6_211 -> m6_30  [key=2, style=dotted];
m6_211 -> m6_212  [key=0, style=solid];
m6_211 -> m6_168  [key=2, style=dotted];
m6_217 -> m6_30  [key=2, style=dotted];
m6_217 -> m6_39  [key=2, style=dotted];
m6_217 -> m6_218  [key=0, style=solid];
m6_220 -> m6_30  [key=2, style=dotted];
m6_220 -> m6_221  [key=0, style=solid];
m6_220 -> m6_175  [key=2, style=dotted];
m6_233 -> m6_30  [key=2, style=dotted];
m6_233 -> m6_234  [key=0, style=solid];
m6_233 -> m6_168  [key=2, style=dotted];
m6_239 -> m6_30  [key=2, style=dotted];
m6_239 -> m6_240  [key=0, style=solid];
m6_239 -> m6_175  [key=2, style=dotted];
m6_239 -> m6_241  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_254 -> m6_30  [key=2, style=dotted];
m6_254 -> m6_255  [key=0, style=solid];
m6_254 -> m6_168  [key=2, style=dotted];
m6_260 -> m6_30  [key=2, style=dotted];
m6_260 -> m6_39  [key=2, style=dotted];
m6_260 -> m6_261  [key=0, style=solid];
m6_263 -> m6_30  [key=2, style=dotted];
m6_263 -> m6_264  [key=0, style=solid];
m6_263 -> m6_175  [key=2, style=dotted];
m6_283 -> m6_30  [key=2, style=dotted];
m6_283 -> m6_284  [key=0, style=solid];
m6_283 -> m6_175  [key=2, style=dotted];
m6_283 -> m6_285  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_277 -> m6_30  [key=2, style=dotted];
m6_277 -> m6_39  [key=2, style=dotted];
m6_277 -> m6_278  [key=0, style=solid];
m6_306 -> m6_30  [key=2, style=dotted];
m6_306 -> m6_307  [key=0, style=solid];
m6_306 -> m6_175  [key=2, style=dotted];
m6_306 -> m6_308  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_300 -> m6_30  [key=2, style=dotted];
m6_300 -> m6_39  [key=2, style=dotted];
m6_300 -> m6_301  [key=0, style=solid];
m6_325 -> m6_30  [key=2, style=dotted];
m6_325 -> m6_326  [key=0, style=solid];
m6_325 -> m6_175  [key=2, style=dotted];
m6_325 -> m6_327  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_322 -> m6_30  [key=2, style=dotted];
m6_322 -> m6_39  [key=2, style=dotted];
m6_322 -> m6_323  [key=0, style=solid];
m6_346 -> m6_30  [key=2, style=dotted];
m6_346 -> m6_39  [key=2, style=dotted];
m6_346 -> m6_347  [key=0, style=solid];
m6_349 -> m6_30  [key=2, style=dotted];
m6_349 -> m6_350  [key=0, style=solid];
m6_349 -> m6_175  [key=2, style=dotted];
m6_358 -> m6_30  [key=2, style=dotted];
m6_358 -> m6_359  [key=0, style=solid];
m6_358 -> m6_175  [key=2, style=dotted];
m6_358 -> m6_360  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_32 -> m6_33  [key=0, style=solid];
m6_36 -> m6_37  [key=0, style=solid];
m6_38 -> m6_36  [key=0, style=bold, color=blue];
m6_45 -> m6_46  [key=0, style=solid];
m6_47 -> m6_45  [key=0, style=bold, color=blue];
m6_53 -> m6_54  [key=0, style=solid];
m6_55 -> m6_53  [key=0, style=bold, color=blue];
m6_63 -> m6_64  [key=0, style=solid];
m6_63 -> m6_65  [key=2, style=dotted];
m6_72 -> m6_73  [key=0, style=solid];
m6_74 -> m6_72  [key=0, style=bold, color=blue];
m6_85 -> m6_86  [key=0, style=solid];
m6_101 -> m6_102  [key=0, style=solid];
m6_104 -> m6_105  [key=0, style=solid];
m6_106 -> m6_104  [key=0, style=bold, color=blue];
m6_129 -> m6_130  [key=0, style=solid];
m6_132 -> m6_133  [key=0, style=solid];
m6_134 -> m6_132  [key=0, style=bold, color=blue];
m6_146 -> m6_147  [key=0, style=solid];
m6_169 -> m6_170  [key=0, style=solid];
m6_216 -> m6_217  [key=0, style=solid];
m6_256 -> m6_257  [key=0, style=solid];
m6_258 -> m6_256  [key=0, style=bold, color=blue];
m6_259 -> m6_260  [key=0, style=solid];
m6_276 -> m6_277  [key=0, style=solid];
m6_279 -> m6_280  [key=0, style=solid];
m6_281 -> m6_279  [key=0, style=bold, color=blue];
m6_299 -> m6_300  [key=0, style=solid];
m6_302 -> m6_303  [key=0, style=solid];
m6_304 -> m6_302  [key=0, style=bold, color=blue];
m6_321 -> m6_322  [key=0, style=solid];
m6_345 -> m6_346  [key=0, style=solid];
m6_354 -> m6_355  [key=0, style=solid];
m6_356 -> m6_354  [key=0, style=bold, color=blue];
m6_62 -> m6_63  [key=0, style=solid];
m6_87 -> m6_85  [key=0, style=bold, color=blue];
m6_103 -> m6_101  [key=0, style=bold, color=blue];
m6_107 -> m6_108  [key=0, style=solid];
m6_109 -> m6_107  [key=0, style=bold, color=blue];
m6_123 -> m6_124  [key=0, style=solid];
m6_125 -> m6_123  [key=0, style=bold, color=blue];
m6_126 -> m6_127  [key=0, style=solid];
m6_128 -> m6_126  [key=0, style=bold, color=blue];
m6_131 -> m6_129  [key=0, style=bold, color=blue];
m6_148 -> m6_146  [key=0, style=bold, color=blue];
m6_149 -> m6_150  [key=0, style=solid];
m6_151 -> m6_149  [key=0, style=bold, color=blue];
m6_165 -> m6_166  [key=0, style=solid];
m6_167 -> m6_165  [key=0, style=bold, color=blue];
m6_171 -> m6_169  [key=0, style=bold, color=blue];
m6_172 -> m6_173  [key=0, style=solid];
m6_174 -> m6_172  [key=0, style=bold, color=blue];
m6_188 -> m6_189  [key=0, style=solid];
m6_190 -> m6_188  [key=0, style=bold, color=blue];
m6_191 -> m6_192  [key=0, style=solid];
m6_193 -> m6_191  [key=0, style=bold, color=blue];
m6_194 -> m6_195  [key=0, style=solid];
m6_196 -> m6_194  [key=0, style=bold, color=blue];
m6_197 -> m6_198  [key=0, style=solid];
m6_199 -> m6_197  [key=0, style=bold, color=blue];
m6_210 -> m6_211  [key=0, style=solid];
m6_212 -> m6_210  [key=0, style=bold, color=blue];
m6_218 -> m6_216  [key=0, style=bold, color=blue];
m6_219 -> m6_220  [key=0, style=solid];
m6_221 -> m6_219  [key=0, style=bold, color=blue];
m6_232 -> m6_233  [key=0, style=solid];
m6_234 -> m6_232  [key=0, style=bold, color=blue];
m6_238 -> m6_239  [key=0, style=solid];
m6_240 -> m6_238  [key=0, style=bold, color=blue];
m6_241 -> m6_242  [key=0, style=solid];
m6_253 -> m6_254  [key=0, style=solid];
m6_255 -> m6_253  [key=0, style=bold, color=blue];
m6_261 -> m6_259  [key=0, style=bold, color=blue];
m6_262 -> m6_263  [key=0, style=solid];
m6_264 -> m6_262  [key=0, style=bold, color=blue];
m6_282 -> m6_283  [key=0, style=solid];
m6_284 -> m6_282  [key=0, style=bold, color=blue];
m6_285 -> m6_286  [key=0, style=solid];
m6_278 -> m6_276  [key=0, style=bold, color=blue];
m6_305 -> m6_306  [key=0, style=solid];
m6_307 -> m6_305  [key=0, style=bold, color=blue];
m6_308 -> m6_309  [key=0, style=solid];
m6_301 -> m6_299  [key=0, style=bold, color=blue];
m6_324 -> m6_325  [key=0, style=solid];
m6_326 -> m6_324  [key=0, style=bold, color=blue];
m6_327 -> m6_328  [key=0, style=solid];
m6_323 -> m6_321  [key=0, style=bold, color=blue];
m6_347 -> m6_345  [key=0, style=bold, color=blue];
m6_348 -> m6_349  [key=0, style=solid];
m6_350 -> m6_348  [key=0, style=bold, color=blue];
m6_357 -> m6_358  [key=0, style=solid];
m6_359 -> m6_357  [key=0, style=bold, color=blue];
m6_360 -> m6_361  [key=0, style=solid];
m6_34 -> m6_32  [key=0, style=bold, color=blue];
m6_33 -> m6_34  [key=0, style=solid];
m6_33 -> m6_35  [key=2, style=dotted];
m6_64 -> m6_62  [key=0, style=bold, color=blue];
m6_152 -> m6_153  [key=0, style=solid];
m6_213 -> m6_214  [key=0, style=solid];
m6_235 -> m6_236  [key=0, style=solid];
m6_286 -> m6_287  [key=0, style=solid];
m6_309 -> m6_310  [key=0, style=solid];
m6_328 -> m6_329  [key=0, style=solid];
m6_330 -> m6_331  [key=0, style=solid];
m6_243 -> m6_241  [key=0, style=bold, color=blue];
m6_242 -> m6_243  [key=0, style=solid];
m6_287 -> m6_285  [key=0, style=bold, color=blue];
m6_310 -> m6_308  [key=0, style=bold, color=blue];
m6_329 -> m6_327  [key=0, style=bold, color=blue];
m6_362 -> m6_360  [key=0, style=bold, color=blue];
m6_361 -> m6_362  [key=0, style=solid];
m6_154 -> m6_152  [key=0, style=bold, color=blue];
m6_153 -> m6_154  [key=0, style=solid];
m6_215 -> m6_213  [key=0, style=bold, color=blue];
m6_214 -> m6_215  [key=0, style=solid];
m6_237 -> m6_235  [key=0, style=bold, color=blue];
m6_236 -> m6_237  [key=0, style=solid];
m6_332 -> m6_330  [key=0, style=bold, color=blue];
m6_331 -> m6_332  [key=0, style=solid];
m6_352 -> m6_353  [key=0, style=solid];
m6_353 -> m6_351  [key=0, style=bold, color=blue];
m6_135 -> m6_136  [key=0, style=solid];
m6_136 -> m6_30  [key=2, style=dotted];
m6_136 -> m6_137  [key=0, style=solid];
m6_136 -> m6_19  [key=2, style=dotted];
m6_136 -> m6_146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_139 -> m6_140  [key=0, style=solid];
m6_139 -> m6_100  [key=2, style=dotted];
m6_140 -> m6_141  [key=0, style=solid];
m6_140 -> m6_61  [key=2, style=dotted];
m6_141 -> m6_39  [key=2, style=dotted];
m6_141 -> m6_142  [key=0, style=solid];
m6_137 -> m6_139  [key=1, style=dashed, color=darkseagreen4, label=filter];
m6_137 -> m6_138  [key=0, style=solid];
m6_137 -> m6_99  [key=2, style=dotted];
m6_138 -> m6_139  [key=0, style=solid];
m6_138 -> m6_19  [key=2, style=dotted];
m6_138 -> m6_144  [key=2, style=dotted];
m6_138 -> m6_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_138 -> m6_152  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_142 -> m6_143  [key=0, style=solid];
m6_142 -> m6_145  [key=2, style=dotted];
m6_143 -> m6_135  [key=0, style=bold, color=blue];
m6_80 -> m6_81  [key=0, style=solid];
m6_83 -> m6_84  [key=0, style=solid, color=green];
m6_83 -> m6_30  [key=2, style=dotted, color=green];
m6_83 -> m6_88  [key=1, style=dashed, color=green, label="lambda expression"];
m6_82 -> m6_83  [key=0, style=solid, color=green];
m6_82 -> m6_89  [key=1, style=dashed, color=green, label=process];
m6_82 -> m6_61  [key=2, style=dotted];
m6_81 -> m6_82  [key=0, style=solid];
m6_81 -> m6_30  [key=2, style=dotted];
m6_81 -> m6_19  [key=2, style=dotted];
m6_81 -> m6_85  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_84 -> m6_80  [key=0, style=bold, color=blue];
m6_56 -> m6_57  [key=0, style=solid];
m6_57 -> m6_58  [key=0, style=solid];
m6_57 -> m6_61  [key=2, style=dotted];
m6_57 -> m6_63  [key=1, style=dashed, color=darkseagreen4, label=process];
m6_58 -> m6_30  [key=2, style=dotted];
m6_58 -> m6_59  [key=0, style=solid];
m6_58 -> m6_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_59 -> m6_60  [key=0, style=solid];
m6_59 -> n22  [key=2, style=dotted];
m6_60 -> m6_56  [key=0, style=bold, color=blue];
m6_66 -> m6_67  [key=0, style=solid];
m6_67 -> m6_68  [key=0, style=solid];
m6_67 -> m6_61  [key=2, style=dotted];
m6_68 -> m6_39  [key=2, style=dotted];
m6_68 -> m6_69  [key=0, style=solid];
m6_69 -> m6_70  [key=0, style=solid];
m6_69 -> m6_71  [key=2, style=dotted];
m6_69 -> m6_72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_70 -> m6_66  [key=0, style=bold, color=blue];
m6_155 -> m6_156  [key=0, style=solid];
m6_157 -> m6_158  [key=0, style=solid];
m6_157 -> m6_100  [key=2, style=dotted];
m6_159 -> m6_160  [key=0, style=solid];
m6_159 -> m6_19  [key=2, style=dotted];
m6_159 -> m6_122  [key=2, style=dotted];
m6_159 -> m6_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_161 -> m6_162  [key=0, style=solid];
m6_161 -> m6_61  [key=2, style=dotted];
m6_162 -> m6_39  [key=2, style=dotted];
m6_162 -> m6_163  [key=0, style=solid];
m6_156 -> m6_157  [key=0, style=solid];
m6_156 -> m6_164  [key=2, style=dotted];
m6_156 -> m6_158  [key=1, style=dashed, color=darkseagreen4, label=filter];
m6_156 -> m6_160  [key=1, style=dashed, color=darkseagreen4, label=filter];
m6_158 -> m6_159  [key=0, style=solid];
m6_158 -> m6_19  [key=2, style=dotted];
m6_158 -> m6_122  [key=2, style=dotted];
m6_158 -> m6_165  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_160 -> m6_161  [key=0, style=solid];
m6_160 -> m6_19  [key=2, style=dotted];
m6_160 -> m6_122  [key=2, style=dotted];
m6_160 -> m6_172  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_163 -> m6_155  [key=0, style=bold, color=blue];
m6_200 -> m6_201  [key=0, style=solid];
m6_202 -> m6_203  [key=0, style=solid];
m6_202 -> m6_100  [key=2, style=dotted];
m6_204 -> m6_205  [key=0, style=solid];
m6_204 -> m6_61  [key=2, style=dotted];
m6_205 -> m6_39  [key=2, style=dotted];
m6_205 -> m6_206  [key=0, style=solid];
m6_207 -> m6_208  [key=0, style=solid];
m6_207 -> m6_71  [key=2, style=dotted];
m6_207 -> m6_216  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_201 -> m6_202  [key=0, style=solid];
m6_201 -> m6_164  [key=2, style=dotted];
m6_201 -> m6_203  [key=1, style=dashed, color=darkseagreen4, label=filter];
m6_201 -> m6_208  [key=1, style=dashed, color=darkseagreen4, label=filter];
m6_203 -> m6_204  [key=0, style=solid];
m6_203 -> m6_19  [key=2, style=dotted];
m6_203 -> m6_144  [key=2, style=dotted];
m6_203 -> m6_210  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_203 -> m6_213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_206 -> m6_207  [key=0, style=solid];
m6_206 -> m6_145  [key=2, style=dotted];
m6_208 -> m6_71  [key=2, style=dotted];
m6_208 -> m6_209  [key=0, style=solid];
m6_208 -> m6_219  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_209 -> m6_200  [key=0, style=bold, color=blue];
m6_366 -> m6_83  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_89  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_37  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_46  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_54  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_57  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_67  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_68  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_69  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_76  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_77  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_81  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_82  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_93  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_94  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_95  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_96  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_105  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_116  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_117  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_118  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_119  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_120  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_133  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_136  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_139  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_140  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_141  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_157  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_159  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_161  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_162  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_179  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_180  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_185  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_186  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_202  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_204  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_205  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_207  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_225  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_226  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_228  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_229  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_246  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_248  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_249  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_257  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_250  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_267  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_269  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_270  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_271  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_280  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_291  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_292  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_294  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_295  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_296  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_303  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_313  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_315  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_317  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_318  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_336  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_337  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_338  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_340  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_341  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_355  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_366 -> m6_364  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Client.JobCreationProcessFacts"];
m6_368 -> m6_89  [key=1, style=dashed, color=green, label=process];
m6_369 -> m6_105  [key=1, style=dashed, color=darkseagreen4, label=process];
m6_370 -> m6_133  [key=1, style=dashed, color=darkseagreen4, label=process];
m6_371 -> m6_257  [key=1, style=dashed, color=darkseagreen4, label=process];
m6_372 -> m6_280  [key=1, style=dashed, color=darkseagreen4, label=process];
m6_374 -> m6_303  [key=1, style=dashed, color=darkseagreen4, label=process];
m6_377 -> m6_355  [key=1, style=dashed, color=darkseagreen4, label=process];
m6_373 -> m6_283  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_373 -> m6_286  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_375 -> m6_306  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_375 -> m6_309  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_376 -> m6_325  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_376 -> m6_328  [key=1, style=dashed, color=darkseagreen4, label=exception];
m6_367 -> m6_63  [key=1, style=dashed, color=darkseagreen4, label=process];
m7_67 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_123 -> m7_124  [key=0, style=solid];
m7_123 -> m7_126  [key=1, style=dashed, color=darkseagreen4, label=double];
m7_123 -> m7_128  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_124 -> m7_125  [key=0, style=solid];
m7_124 -> m7_126  [key=0, style=solid];
m7_126 -> m7_127  [key=0, style=solid];
m7_126 -> m7_128  [key=0, style=solid];
m7_128 -> m7_129  [key=0, style=solid];
m7_128 -> m7_67  [key=2, style=dotted];
m7_128 -> m7_87  [key=2, style=dotted];
m7_125 -> m7_129  [key=0, style=solid];
m7_125 -> m7_12  [key=2, style=dotted];
m7_127 -> m7_129  [key=0, style=solid];
m7_127 -> m7_130  [key=2, style=dotted];
m7_129 -> m7_123  [key=0, style=bold, color=blue];
m7_2 -> m7_3  [key=0, style=solid];
m7_2 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.PersistentJobQueueProviderCollection"];
m7_2 -> m7_7  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_2 -> m7_8  [key=1, style=dashed, color=darkseagreen4, label=IsolationLevel];
m7_2 -> m7_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.PersistentJobQueueProviderCollection"];
m7_2 -> m7_10  [key=1, style=dashed, color=darkseagreen4, label=bool];
m7_2 -> m7_4  [key=0, style=solid];
m7_2 -> m7_6  [key=2, style=dotted];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_5  [key=0, style=solid];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_7  [key=0, style=solid];
m7_7 -> m7_8  [key=0, style=solid];
m7_8 -> m7_9  [key=0, style=solid];
m7_8 -> m7_11  [key=1, style=dashed, color=green, label=sqlQuery];
m7_8 -> m7_20  [key=1, style=dashed, color=darkseagreen4, label=sqlQuery];
m7_9 -> m7_10  [key=0, style=solid];
m7_10 -> m7_11  [key=0, style=solid, color=green];
m7_10 -> m7_14  [key=0, style=solid];
m7_10 -> m7_16  [key=2, style=dotted];
m7_4 -> m7_11  [key=0, style=solid];
m7_4 -> m7_12  [key=2, style=dotted];
m7_4 -> m7_0  [key=0, style=bold, color=blue];
m7_6 -> m7_11  [key=0, style=solid];
m7_6 -> m7_12  [key=2, style=dotted];
m7_11 -> m7_2  [key=0, style=bold, color=blue];
m7_11 -> m7_12  [key=0, style=solid, color=green];
m7_11 -> m7_17  [key=2, style=dotted, color=green];
m7_11 -> m7_19  [key=1, style=dashed, color=green, label="lambda expression"];
m7_12 -> m7_13  [key=0, style=solid];
m7_219 -> m7_220  [key=0, style=solid];
m7_219 -> m7_223  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_220 -> m7_221  [key=0, style=solid];
m7_220 -> m7_222  [key=0, style=solid];
m7_223 -> m7_224  [key=0, style=solid];
m7_223 -> m7_67  [key=2, style=dotted];
m7_223 -> m7_68  [key=2, style=dotted];
m7_223 -> m7_226  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_221 -> m7_227  [key=0, style=solid];
m7_221 -> m7_12  [key=2, style=dotted];
m7_222 -> m7_223  [key=0, style=solid];
m7_222 -> m7_222  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m7_224 -> m7_225  [key=0, style=solid];
m7_224 -> m7_226  [key=0, style=solid];
m7_226 -> m7_227  [key=0, style=solid];
m7_225 -> m7_227  [key=0, style=solid];
m7_225 -> m7_206  [key=2, style=dotted];
m7_227 -> m7_219  [key=0, style=bold, color=blue];
m7_13 -> m7_14  [key=0, style=solid];
m7_14 -> m7_15  [key=0, style=solid];
m7_14 -> m7_18  [key=2, style=dotted];
m7_14 -> m7_16  [key=0, style=solid];
m7_15 -> m7_7  [key=0, style=bold, color=blue];
m7_15 -> m7_16  [key=0, style=solid];
m7_15 -> m7_17  [key=2, style=dotted];
m7_157 -> m7_158  [key=0, style=solid];
m7_157 -> m7_160  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerContext"];
m7_157 -> m7_162  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerContext"];
m7_157 -> m7_163  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_158 -> m7_159  [key=0, style=solid];
m7_158 -> m7_160  [key=0, style=solid];
m7_160 -> m7_161  [key=0, style=solid];
m7_160 -> m7_162  [key=0, style=solid];
m7_162 -> m7_163  [key=0, style=solid];
m7_162 -> m7_165  [key=2, style=dotted];
m7_163 -> m7_164  [key=0, style=solid];
m7_163 -> m7_65  [key=2, style=dotted];
m7_163 -> m7_70  [key=2, style=dotted];
m7_159 -> m7_164  [key=0, style=solid];
m7_159 -> m7_12  [key=2, style=dotted];
m7_161 -> m7_164  [key=0, style=solid];
m7_161 -> m7_12  [key=2, style=dotted];
m7_164 -> m7_157  [key=0, style=bold, color=blue];
m7_27 -> m7_28  [key=0, style=solid];
m7_27 -> m7_30  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_27 -> m7_32  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_27 -> m7_34  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_27 -> m7_25  [key=0, style=bold, color=blue];
m7_28 -> m7_29  [key=0, style=solid];
m7_28 -> m7_30  [key=0, style=solid];
m7_28 -> m7_33  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_30 -> m7_31  [key=0, style=solid, color=green];
m7_30 -> m7_36  [key=2, style=dotted];
m7_30 -> m7_37  [key=2, style=dotted];
m7_30 -> m7_38  [key=2, style=dotted];
m7_30 -> m7_43  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_30 -> m7_33  [key=1, style=dashed, color=darkseagreen4, label=providers];
m7_30 -> m7_17  [key=2, style=dotted, color=green];
m7_30 -> m7_32  [key=1, style=dashed, color=green, label="lambda expression"];
m7_32 -> m7_35  [key=0, style=solid];
m7_32 -> m7_39  [key=2, style=dotted];
m7_32 -> m7_40  [key=2, style=dotted];
m7_32 -> m7_26  [key=2, style=dotted];
m7_32 -> m7_33  [key=0, style=solid];
m7_34 -> m7_35  [key=0, style=solid];
m7_34 -> m7_42  [key=2, style=dotted];
m7_34 -> m7_32  [key=0, style=bold, color=blue];
m7_29 -> m7_35  [key=0, style=solid];
m7_29 -> m7_12  [key=2, style=dotted];
m7_29 -> m7_30  [key=0, style=solid, color=green];
m7_29 -> m7_33  [key=1, style=dashed, color=darkseagreen4, label=sqlQuery];
m7_31 -> m7_32  [key=0, style=solid];
m7_31 -> m7_33  [key=0, style=solid];
m7_31 -> m7_28  [key=0, style=bold, color=blue];
m7_33 -> m7_34  [key=0, style=solid];
m7_33 -> m7_41  [key=2, style=dotted];
m7_33 -> n40  [key=2, style=dotted];
m7_33 -> m7_24  [key=2, style=dotted];
m7_33 -> m7_23  [key=2, style=dotted];
m7_33 -> m7_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_35 -> m7_27  [key=0, style=bold, color=blue];
m7_46 -> m7_47  [key=0, style=solid];
m7_16 -> m7_13  [key=0, style=bold, color=blue];
m7_171 -> m7_172  [key=0, style=solid];
m7_171 -> m7_174  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_172 -> m7_173  [key=0, style=solid];
m7_172 -> m7_174  [key=0, style=solid];
m7_174 -> m7_175  [key=0, style=solid];
m7_174 -> m7_70  [key=2, style=dotted];
m7_173 -> m7_175  [key=0, style=solid];
m7_173 -> m7_12  [key=2, style=dotted];
m7_175 -> m7_171  [key=0, style=bold, color=blue];
m7_190 -> m7_191  [key=0, style=solid];
m7_190 -> m7_194  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_191 -> m7_192  [key=0, style=solid];
m7_191 -> m7_193  [key=0, style=solid];
m7_194 -> m7_195  [key=0, style=solid];
m7_194 -> m7_67  [key=2, style=dotted];
m7_194 -> m7_196  [key=2, style=dotted];
m7_192 -> m7_195  [key=0, style=solid];
m7_192 -> m7_12  [key=2, style=dotted];
m7_193 -> m7_194  [key=0, style=solid];
m7_193 -> m7_193  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m7_195 -> m7_190  [key=0, style=bold, color=blue];
m7_242 -> m7_243  [key=0, style=solid];
m7_242 -> m7_246  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_243 -> m7_244  [key=0, style=solid];
m7_243 -> m7_245  [key=0, style=solid];
m7_246 -> m7_247  [key=0, style=solid];
m7_246 -> m7_67  [key=2, style=dotted];
m7_246 -> m7_68  [key=2, style=dotted];
m7_246 -> m7_249  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_244 -> m7_250  [key=0, style=solid];
m7_244 -> m7_12  [key=2, style=dotted];
m7_245 -> m7_246  [key=0, style=solid];
m7_245 -> m7_245  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m7_247 -> m7_248  [key=0, style=solid];
m7_247 -> m7_249  [key=0, style=solid];
m7_249 -> m7_250  [key=0, style=solid];
m7_248 -> m7_250  [key=0, style=solid];
m7_248 -> m7_206  [key=2, style=dotted];
m7_250 -> m7_242  [key=0, style=bold, color=blue];
m7_213 -> m7_214  [key=0, style=solid];
m7_213 -> m7_217  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_214 -> m7_215  [key=0, style=solid];
m7_214 -> m7_216  [key=0, style=solid];
m7_217 -> m7_218  [key=0, style=solid];
m7_217 -> m7_67  [key=2, style=dotted];
m7_217 -> m7_68  [key=2, style=dotted];
m7_215 -> m7_218  [key=0, style=solid];
m7_215 -> m7_12  [key=2, style=dotted];
m7_216 -> m7_217  [key=0, style=solid];
m7_216 -> m7_216  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m7_218 -> m7_213  [key=0, style=bold, color=blue];
m7_257 -> m7_258  [key=0, style=solid];
m7_257 -> m7_261  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_258 -> m7_259  [key=0, style=solid];
m7_258 -> m7_260  [key=0, style=solid];
m7_261 -> m7_262  [key=0, style=solid];
m7_261 -> m7_67  [key=2, style=dotted];
m7_261 -> m7_196  [key=2, style=dotted];
m7_259 -> m7_262  [key=0, style=solid];
m7_259 -> m7_12  [key=2, style=dotted];
m7_260 -> m7_261  [key=0, style=solid];
m7_260 -> m7_260  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m7_262 -> m7_257  [key=0, style=bold, color=blue];
m7_26 -> m7_27  [key=0, style=solid];
m7_21 -> m7_19  [key=0, style=bold, color=blue];
m7_71 -> m7_72  [key=0, style=solid];
m7_71 -> m7_75  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_71 -> m7_76  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.JobData GetJobData"];
m7_72 -> m7_73  [key=0, style=solid];
m7_72 -> m7_74  [key=0, style=solid];
m7_75 -> m7_76  [key=0, style=solid];
m7_75 -> m7_67  [key=2, style=dotted];
m7_75 -> m7_87  [key=2, style=dotted];
m7_75 -> m7_78  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m7_75 -> m7_79  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m7_75 -> m7_85  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m7_73 -> m7_86  [key=0, style=solid];
m7_73 -> m7_12  [key=2, style=dotted];
m7_74 -> m7_75  [key=0, style=solid];
m7_74 -> m7_74  [key=3, color=darkorchid, style=bold, label="Local variable string sql"];
m7_76 -> m7_77  [key=0, style=solid];
m7_76 -> m7_78  [key=0, style=solid];
m7_78 -> m7_79  [key=0, style=solid];
m7_78 -> m7_67  [key=2, style=dotted];
m7_78 -> m7_82  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m7_79 -> m7_80  [key=0, style=solid];
m7_85 -> m7_86  [key=0, style=solid];
m7_85 -> m7_89  [key=2, style=dotted];
m7_77 -> m7_86  [key=0, style=solid];
m7_82 -> m7_83  [key=0, style=solid];
m7_82 -> m7_85  [key=0, style=solid];
m7_82 -> m7_88  [key=2, style=dotted];
m7_80 -> m7_81  [key=0, style=solid];
m7_80 -> m7_76  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.Common.Job job"];
m7_81 -> m7_82  [key=0, style=solid];
m7_81 -> m7_76  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.Common.JobLoadException loadException"];
m7_81 -> m7_83  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.Common.JobLoadException loadException"];
m7_83 -> m7_84  [key=0, style=solid];
m7_84 -> m7_85  [key=0, style=solid];
m7_86 -> m7_71  [key=0, style=bold, color=blue];
m7_144 -> m7_145  [key=0, style=solid];
m7_144 -> m7_147  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_145 -> m7_146  [key=0, style=solid];
m7_145 -> m7_147  [key=0, style=solid];
m7_147 -> m7_148  [key=0, style=solid];
m7_147 -> m7_67  [key=2, style=dotted];
m7_147 -> m7_150  [key=2, style=dotted];
m7_147 -> m7_151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_147 -> m7_154  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_146 -> m7_149  [key=0, style=solid];
m7_146 -> m7_12  [key=2, style=dotted];
m7_148 -> m7_149  [key=0, style=solid];
m7_149 -> m7_144  [key=0, style=bold, color=blue];
m7_49 -> m7_51  [key=1, style=dashed, color=green, label=string];
m7_49 -> m7_50  [key=0, style=solid];
m7_49 -> m7_54  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_49 -> m7_63  [key=0, style=solid];
m7_49 -> m7_12  [key=2, style=dotted];
m7_51 -> m7_52  [key=0, style=solid, color=green];
m7_51 -> m7_17  [key=2, style=dotted, color=green];
m7_51 -> m7_53  [key=1, style=dashed, color=green, label="lambda expression"];
m7_51 -> m7_63  [key=0, style=solid];
m7_51 -> m7_12  [key=2, style=dotted];
m7_50 -> m7_51  [key=0, style=solid, color=green];
m7_50 -> m7_54  [key=1, style=dashed, color=darkseagreen4, label=sqlQuery];
m7_50 -> m7_52  [key=0, style=solid];
m7_52 -> m7_49  [key=0, style=bold, color=blue];
m7_52 -> m7_53  [key=0, style=solid];
m7_52 -> m7_54  [key=1, style=dashed, color=red, label=createJobSql];
m7_52 -> m7_52  [key=3, color=darkorchid, style=bold, label="Local variable string createJobSql"];
m7_22 -> m7_23  [key=0, style=solid, color=red];
m7_23 -> m7_24  [key=0, style=solid, color=red];
m7_23 -> m7_25  [key=2, style=dotted, color=red];
m7_23 -> m7_26  [key=2, style=dotted, color=red];
m7_24 -> m7_22  [key=0, style=bold, color=blue];
m7_102 -> m7_103  [key=0, style=solid];
m7_102 -> m7_105  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_102 -> m7_107  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_103 -> m7_104  [key=0, style=solid];
m7_103 -> m7_105  [key=0, style=solid];
m7_105 -> m7_106  [key=0, style=solid];
m7_105 -> m7_107  [key=0, style=solid];
m7_107 -> m7_108  [key=0, style=solid];
m7_107 -> m7_70  [key=2, style=dotted];
m7_104 -> m7_108  [key=0, style=solid];
m7_104 -> m7_12  [key=2, style=dotted];
m7_106 -> m7_108  [key=0, style=solid];
m7_106 -> m7_12  [key=2, style=dotted];
m7_108 -> m7_102  [key=0, style=bold, color=blue];
m7_39 -> m7_41  [key=1, style=dashed, color=green, label=string];
m7_39 -> m7_40  [key=0, style=solid];
m7_39 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_41 -> m7_42  [key=0, style=solid, color=green];
m7_41 -> m7_17  [key=2, style=dotted, color=green];
m7_41 -> m7_43  [key=1, style=dashed, color=green, label="lambda expression"];
m7_40 -> m7_41  [key=0, style=solid, color=green];
m7_40 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobsSql];
m7_42 -> m7_39  [key=0, style=bold, color=blue];
m7_64 -> m7_33  [key=1, style=dashed, color=darkseagreen4, label=sqlQuery];
m7_197 -> m7_198  [key=0, style=solid];
m7_197 -> m7_201  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_198 -> m7_199  [key=0, style=solid];
m7_198 -> m7_200  [key=0, style=solid];
m7_201 -> m7_202  [key=0, style=solid];
m7_201 -> m7_67  [key=2, style=dotted];
m7_201 -> m7_68  [key=2, style=dotted];
m7_201 -> m7_204  [key=1, style=dashed, color=darkseagreen4, label=result];
m7_199 -> m7_205  [key=0, style=solid];
m7_199 -> m7_12  [key=2, style=dotted];
m7_200 -> m7_201  [key=0, style=solid];
m7_200 -> m7_200  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m7_202 -> m7_203  [key=0, style=solid];
m7_202 -> m7_204  [key=0, style=solid];
m7_204 -> m7_205  [key=0, style=solid];
m7_203 -> m7_205  [key=0, style=solid];
m7_203 -> m7_206  [key=2, style=dotted];
m7_205 -> m7_197  [key=0, style=bold, color=blue];
m7_38 -> m7_36  [key=0, style=bold, color=blue];
m7_207 -> m7_208  [key=0, style=solid];
m7_207 -> m7_211  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_208 -> m7_209  [key=0, style=solid];
m7_208 -> m7_210  [key=0, style=solid];
m7_211 -> m7_212  [key=0, style=solid];
m7_211 -> m7_67  [key=2, style=dotted];
m7_211 -> m7_68  [key=2, style=dotted];
m7_209 -> m7_212  [key=0, style=solid];
m7_209 -> m7_12  [key=2, style=dotted];
m7_210 -> m7_211  [key=0, style=solid];
m7_210 -> m7_210  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m7_212 -> m7_207  [key=0, style=bold, color=blue];
m7_25 -> m7_26  [key=0, style=solid];
m7_69 -> m7_54  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_66 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_109 -> m7_110  [key=0, style=solid];
m7_109 -> m7_112  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_109 -> m7_114  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_110 -> m7_111  [key=0, style=solid];
m7_110 -> m7_112  [key=0, style=solid];
m7_112 -> m7_113  [key=0, style=solid];
m7_112 -> m7_114  [key=0, style=solid];
m7_114 -> m7_115  [key=0, style=solid];
m7_114 -> m7_67  [key=2, style=dotted];
m7_114 -> m7_87  [key=2, style=dotted];
m7_111 -> m7_115  [key=0, style=solid];
m7_111 -> m7_12  [key=2, style=dotted];
m7_113 -> m7_115  [key=0, style=solid];
m7_113 -> m7_12  [key=2, style=dotted];
m7_115 -> m7_109  [key=0, style=bold, color=blue];
m7_166 -> m7_167  [key=0, style=solid];
m7_166 -> m7_169  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_167 -> m7_168  [key=0, style=solid];
m7_167 -> m7_169  [key=0, style=solid];
m7_169 -> m7_170  [key=0, style=solid];
m7_169 -> m7_70  [key=2, style=dotted];
m7_168 -> m7_170  [key=0, style=solid];
m7_168 -> m7_12  [key=2, style=dotted];
m7_170 -> m7_166  [key=0, style=bold, color=blue];
m7_90 -> m7_91  [key=0, style=solid];
m7_90 -> m7_94  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_90 -> m7_76  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.StateData GetStateData"];
m7_91 -> m7_92  [key=0, style=solid];
m7_91 -> m7_93  [key=0, style=solid];
m7_94 -> m7_95  [key=0, style=solid];
m7_94 -> m7_67  [key=2, style=dotted];
m7_94 -> m7_87  [key=2, style=dotted];
m7_94 -> m7_97  [key=1, style=dashed, color=darkseagreen4, label=sqlState];
m7_94 -> m7_98  [key=1, style=dashed, color=darkseagreen4, label=sqlState];
m7_92 -> m7_99  [key=0, style=solid];
m7_92 -> m7_12  [key=2, style=dotted];
m7_93 -> m7_94  [key=0, style=solid];
m7_93 -> m7_93  [key=3, color=darkorchid, style=bold, label="Local variable string sql"];
m7_95 -> m7_96  [key=0, style=solid];
m7_95 -> m7_97  [key=0, style=solid];
m7_97 -> m7_98  [key=0, style=solid];
m7_97 -> m7_100  [key=2, style=dotted];
m7_97 -> m7_67  [key=2, style=dotted];
m7_98 -> m7_99  [key=0, style=solid];
m7_98 -> m7_101  [key=2, style=dotted];
m7_96 -> m7_99  [key=0, style=solid];
m7_99 -> m7_90  [key=0, style=bold, color=blue];
m7_58 -> m7_59  [key=0, style=solid];
m7_58 -> m7_60  [key=0, style=solid];
m7_251 -> m7_252  [key=0, style=solid];
m7_251 -> m7_255  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_252 -> m7_253  [key=0, style=solid];
m7_252 -> m7_254  [key=0, style=solid];
m7_255 -> m7_256  [key=0, style=solid];
m7_255 -> m7_67  [key=2, style=dotted];
m7_255 -> m7_196  [key=2, style=dotted];
m7_253 -> m7_256  [key=0, style=solid];
m7_253 -> m7_12  [key=2, style=dotted];
m7_254 -> m7_255  [key=0, style=solid];
m7_254 -> m7_254  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m7_256 -> m7_251  [key=0, style=bold, color=blue];
m7_18 -> m7_19  [key=0, style=solid];
m7_47 -> m7_48  [key=0, style=solid];
m7_47 -> m7_50  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m7_47 -> m7_53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m7_47 -> m7_54  [key=1, style=dashed, color=red, label="System.DateTime"];
m7_47 -> m7_55  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m7_47 -> m7_56  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m7_47 -> m7_58  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m7_48 -> m7_49  [key=0, style=solid];
m7_48 -> m7_50  [key=0, style=solid];
m7_48 -> m7_46  [key=0, style=bold, color=blue];
m7_53 -> m7_54  [key=0, style=solid, color=red];
m7_53 -> m7_64  [key=2, style=dotted];
m7_54 -> m7_55  [key=0, style=solid, color=red];
m7_54 -> m7_65  [key=2, style=dotted, color=red];
m7_54 -> m7_66  [key=2, style=dotted, color=red];
m7_54 -> m7_67  [key=2, style=dotted, color=red];
m7_54 -> m7_68  [key=2, style=dotted, color=red];
m7_54 -> m7_69  [key=2, style=dotted, color=red];
m7_54 -> m7_59  [key=1, style=dashed, color=red, label=jobId];
m7_54 -> m7_62  [key=1, style=dashed, color=red, label=jobId];
m7_54 -> m7_22  [key=2, style=dotted];
m7_54 -> m7_57  [key=2, style=dotted];
m7_55 -> m7_56  [key=0, style=solid];
m7_55 -> m7_62  [key=0, style=solid];
m7_55 -> m7_58  [key=2, style=dotted];
m7_56 -> m7_57  [key=0, style=solid];
m7_56 -> m7_59  [key=1, style=dashed, color=darkseagreen4, label=parameterArray];
m7_56 -> m7_61  [key=1, style=dashed, color=darkseagreen4, label=parameterArray];
m7_56 -> m7_53  [key=0, style=bold, color=blue];
m7_59 -> m7_58  [key=0, style=solid];
m7_59 -> m7_59  [key=1, style=dashed, color=darkseagreen4, label=parameterIndex];
m7_59 -> m7_11  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_30  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_41  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_51  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_40  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_59 -> m7_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
m7_62 -> m7_63  [key=0, style=solid];
m7_62 -> m7_33  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_57 -> m7_58  [key=0, style=solid];
m7_57 -> m7_59  [key=1, style=dashed, color=darkseagreen4, label=parameterIndex];
m7_57 -> m7_57  [key=3, color=darkorchid, style=bold, label="Local variable int parameterIndex"];
m7_61 -> m7_62  [key=0, style=solid];
m7_61 -> m7_70  [key=2, style=dotted];
m7_61 -> m7_33  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_60 -> m7_61  [key=0, style=solid];
m7_60 -> m7_60  [key=3, color=darkorchid, style=bold, label="Local variable string insertParameterSql"];
m7_60 -> m7_20  [key=1, style=dashed, color=darkseagreen4, label=sqlQuery];
m7_63 -> m7_47  [key=0, style=bold, color=blue];
m7_63 -> m7_33  [key=1, style=dashed, color=darkseagreen4, label=int];
m7_65 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_37 -> m7_38  [key=0, style=solid];
m7_43 -> m7_44  [key=0, style=solid];
m7_44 -> m7_45  [key=0, style=solid];
m7_44 -> m7_46  [key=2, style=dotted];
m7_44 -> n40  [key=2, style=dotted];
m7_44 -> m7_24  [key=2, style=dotted];
m7_44 -> m7_23  [key=2, style=dotted];
m7_45 -> m7_43  [key=0, style=bold, color=blue];
m7_151 -> m7_152  [key=0, style=solid];
m7_154 -> m7_155  [key=0, style=solid];
m7_152 -> m7_153  [key=0, style=solid];
m7_153 -> m7_151  [key=0, style=bold, color=blue];
m7_155 -> m7_156  [key=0, style=solid];
m7_156 -> m7_154  [key=0, style=bold, color=blue];
m7_19 -> m7_20  [key=0, style=solid];
m7_19 -> m7_21  [key=2, style=dotted];
m7_20 -> m7_21  [key=0, style=solid];
m7_20 -> m7_22  [key=2, style=dotted];
m7_20 -> m7_23  [key=2, style=dotted];
m7_20 -> m7_24  [key=2, style=dotted];
m7_20 -> m7_25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_20 -> m7_18  [key=0, style=bold, color=blue];
m7_36 -> m7_37  [key=0, style=solid];
m7_131 -> m7_132  [key=0, style=solid];
m7_131 -> m7_134  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>"];
m7_131 -> m7_138  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>"];
m7_131 -> m7_139  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_132 -> m7_133  [key=0, style=solid];
m7_132 -> m7_134  [key=0, style=solid];
m7_134 -> m7_135  [key=0, style=solid];
m7_134 -> m7_136  [key=0, style=solid];
m7_138 -> m7_139  [key=0, style=solid];
m7_138 -> m7_140  [key=0, style=solid];
m7_139 -> m7_138  [key=0, style=solid];
m7_139 -> m7_70  [key=2, style=dotted];
m7_139 -> m7_139  [key=1, style=dashed, color=darkseagreen4, label=keyValuePair];
m7_133 -> m7_141  [key=0, style=solid];
m7_133 -> m7_12  [key=2, style=dotted];
m7_135 -> m7_141  [key=0, style=solid];
m7_135 -> m7_12  [key=2, style=dotted];
m7_136 -> m7_137  [key=0, style=solid];
m7_136 -> m7_139  [key=1, style=dashed, color=darkseagreen4, label=sql];
m7_136 -> m7_136  [key=3, color=darkorchid, style=bold, label="Local variable string sql"];
m7_137 -> m7_138  [key=0, style=solid];
m7_137 -> m7_142  [key=2, style=dotted];
m7_137 -> m7_140  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m7_140 -> m7_141  [key=0, style=solid];
m7_140 -> m7_143  [key=2, style=dotted];
m7_141 -> m7_131  [key=0, style=bold, color=blue];
m7_228 -> m7_229  [key=0, style=solid];
m7_228 -> m7_231  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_228 -> m7_234  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_229 -> m7_230  [key=0, style=solid];
m7_229 -> m7_231  [key=0, style=solid];
m7_231 -> m7_232  [key=0, style=solid];
m7_231 -> m7_233  [key=0, style=solid];
m7_234 -> m7_235  [key=0, style=solid];
m7_234 -> m7_67  [key=2, style=dotted];
m7_234 -> m7_87  [key=2, style=dotted];
m7_230 -> m7_235  [key=0, style=solid];
m7_230 -> m7_12  [key=2, style=dotted];
m7_232 -> m7_235  [key=0, style=solid];
m7_232 -> m7_12  [key=2, style=dotted];
m7_233 -> m7_234  [key=0, style=solid];
m7_233 -> m7_233  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m7_235 -> m7_228  [key=0, style=bold, color=blue];
m7_184 -> m7_185  [key=0, style=solid];
m7_184 -> m7_187  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_185 -> m7_186  [key=0, style=solid];
m7_185 -> m7_187  [key=0, style=solid];
m7_187 -> m7_188  [key=0, style=solid];
m7_187 -> m7_67  [key=2, style=dotted];
m7_187 -> m7_189  [key=2, style=dotted];
m7_186 -> m7_188  [key=0, style=solid];
m7_186 -> m7_12  [key=2, style=dotted];
m7_188 -> m7_184  [key=0, style=bold, color=blue];
m7_68 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobsSql];
m7_0 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
m7_1 -> m7_3  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_0  [key=0, style=bold, color=blue];
m7_70 -> m7_54  [key=1, style=dashed, color=darkseagreen4, label=sqlQuery];
m7_116 -> m7_117  [key=0, style=solid];
m7_116 -> m7_119  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_117 -> m7_118  [key=0, style=solid];
m7_117 -> m7_119  [key=0, style=solid];
m7_119 -> m7_120  [key=0, style=solid];
m7_119 -> m7_67  [key=2, style=dotted];
m7_118 -> m7_121  [key=0, style=solid];
m7_118 -> m7_12  [key=2, style=dotted];
m7_120 -> m7_121  [key=0, style=solid];
m7_120 -> m7_122  [key=2, style=dotted];
m7_121 -> m7_116  [key=0, style=bold, color=blue];
m7_236 -> m7_237  [key=0, style=solid];
m7_236 -> m7_240  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_237 -> m7_238  [key=0, style=solid];
m7_237 -> m7_239  [key=0, style=solid];
m7_240 -> m7_241  [key=0, style=solid];
m7_240 -> m7_67  [key=2, style=dotted];
m7_240 -> m7_68  [key=2, style=dotted];
m7_238 -> m7_241  [key=0, style=solid];
m7_238 -> m7_12  [key=2, style=dotted];
m7_239 -> m7_240  [key=0, style=solid];
m7_239 -> m7_239  [key=3, color=darkorchid, style=bold, label="Local variable string query"];
m7_241 -> m7_236  [key=0, style=bold, color=blue];
m7_176 -> m7_177  [key=0, style=solid];
m7_177 -> m7_178  [key=0, style=solid];
m7_177 -> m7_179  [key=0, style=solid];
m7_177 -> m7_181  [key=2, style=dotted];
m7_177 -> m7_177  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m7_178 -> m7_180  [key=0, style=solid];
m7_178 -> m7_182  [key=2, style=dotted];
m7_179 -> m7_180  [key=0, style=solid];
m7_179 -> m7_183  [key=2, style=dotted];
m7_179 -> m7_66  [key=2, style=dotted];
m7_179 -> m7_70  [key=2, style=dotted];
m7_179 -> m7_179  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m7_180 -> m7_176  [key=0, style=bold, color=blue];
m7_263 -> m7_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_23  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_30  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_54  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_61  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_94  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_107  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_114  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_119  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_128  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_139  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_147  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_163  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_169  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_174  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_179  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_187  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_194  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_201  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_211  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_217  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_223  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_234  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_240  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_246  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_255  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m7_263 -> m7_261  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m10_11 -> m10_5  [key=0, style=bold, color=blue];
m10_16 -> m10_17  [key=0, style=solid, color=green];
m10_16 -> m10_24  [key=2, style=dotted];
m10_16 -> m10_20  [key=1, style=dashed, color=darkseagreen4, label=instance];
m10_17 -> m10_18  [key=0, style=solid, color=green];
m10_17 -> m10_19  [key=2, style=dotted];
m10_18 -> m10_16  [key=0, style=bold, color=blue];
m10_18 -> m10_22  [key=0, style=solid];
m10_18 -> m10_25  [key=2, style=dotted];
m10_18 -> m10_26  [key=2, style=dotted];
m10_28 -> m10_19  [key=3, color=darkorchid, style=bold, label="Parameter variable object[] arguments"];
m10_28 -> m10_29  [key=0, style=solid];
m10_28 -> m10_14  [key=3, color=darkorchid, style=bold, label="Parameter variable object instance"];
m10_29 -> m10_36  [key=0, style=solid];
m10_29 -> m10_37  [key=2, style=dotted];
m10_31 -> m10_38  [key=2, style=dotted];
m10_31 -> m10_36  [key=0, style=solid];
m10_35 -> m10_38  [key=2, style=dotted];
m10_35 -> m10_36  [key=0, style=solid];
m10_34 -> m10_36  [key=0, style=solid];
m10_30 -> m10_31  [key=0, style=solid];
m10_33 -> m10_35  [key=0, style=solid];
m10_33 -> m10_34  [key=0, style=solid];
m10_33 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.CleanDatabaseAttribute"];
m10_33 -> m10_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.CleanDatabaseAttribute"];
m10_33 -> m10_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.CleanDatabaseAttribute"];
m10_32 -> m10_33  [key=0, style=solid];
m10_36 -> m10_28  [key=0, style=bold, color=blue];
m10_24 -> m10_25  [key=0, style=solid];
m10_24 -> m10_32  [key=2, style=dotted];
m10_27 -> m10_45  [key=1, style=dashed, color=green, label="Hangfire.Server.PerformContext"];
m10_27 -> m10_39  [key=0, style=solid];
m10_27 -> m10_40  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.PerformContext"];
m10_27 -> m10_44  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.PerformContext"];
m10_27 -> m10_12  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Server.PerformContext context"];
m10_5 -> m10_6  [key=0, style=solid];
m10_6 -> m10_7  [key=0, style=solid];
m10_6 -> m10_12  [key=2, style=dotted];
m10_6 -> m10_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobActivator"];
m10_7 -> m10_8  [key=0, style=solid];
m10_7 -> m10_10  [key=0, style=solid];
m10_7 -> m10_9  [key=0, style=solid];
m10_8 -> m10_9  [key=0, style=solid];
m10_8 -> m10_13  [key=2, style=dotted];
m10_8 -> m10_10  [key=0, style=solid];
m10_8 -> m10_11  [key=2, style=dotted];
m10_10 -> m10_11  [key=0, style=solid];
m10_10 -> m10_14  [key=2, style=dotted];
m10_10 -> m10_15  [key=2, style=dotted];
m10_10 -> m10_31  [key=3, color=darkorchid, style=bold, label="Local variable int count"];
m10_10 -> m10_6  [key=0, style=bold, color=blue];
m10_9 -> m10_10  [key=0, style=solid];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_0  [key=0, style=bold, color=blue];
m10_23 -> m10_24  [key=0, style=solid];
m10_23 -> m10_28  [key=2, style=dotted];
m10_23 -> m10_31  [key=2, style=dotted];
m10_14 -> m10_15  [key=0, style=solid];
m10_14 -> m10_20  [key=1, style=dashed, color=darkseagreen4, label=instance];
m10_14 -> m10_14  [key=3, color=darkorchid, style=bold, label="Local variable object instance"];
m10_2 -> m10_3  [key=0, style=solid];
m10_3 -> m10_4  [key=0, style=solid];
m10_4 -> m10_2  [key=0, style=bold, color=blue];
m10_25 -> m10_13  [key=0, style=bold, color=blue];
m10_13 -> m10_20  [key=0, style=solid];
m10_13 -> m10_16  [key=1, style=dashed, color=darkseagreen4, label=scope];
m10_13 -> m10_14  [key=0, style=solid];
m10_13 -> m10_23  [key=2, style=dotted];
m10_13 -> m10_38  [key=3, color=darkorchid, style=bold, label="Property variable long Id"];
m10_20 -> m10_21  [key=0, style=solid];
m10_20 -> m10_26  [key=2, style=dotted];
m10_20 -> m10_27  [key=2, style=dotted];
m10_20 -> m10_22  [key=1, style=dashed, color=darkseagreen4, label=recreateDatabaseSql];
m10_20 -> m10_28  [key=2, style=dotted];
m10_21 -> m10_22  [key=0, style=solid];
m10_21 -> m10_28  [key=2, style=dotted];
m10_21 -> m10_29  [key=2, style=dotted];
m10_22 -> m10_23  [key=0, style=solid];
m10_22 -> m10_30  [key=2, style=dotted];
m10_22 -> m10_12  [key=0, style=bold, color=blue];
m10_12 -> m10_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.PerformContext"];
m10_12 -> m10_18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.PerformContext"];
m10_12 -> m10_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.PerformContext"];
m10_12 -> m10_13  [key=0, style=solid];
m10_12 -> m10_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.PerformContext"];
m10_12 -> m10_20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.PerformContext"];
m10_19 -> m10_20  [key=0, style=solid];
m10_19 -> m10_27  [key=2, style=dotted];
m10_15 -> m10_16  [key=0, style=solid];
m10_15 -> m10_19  [key=0, style=solid];
m10_45 -> m10_46  [key=0, style=solid, color=green];
m10_45 -> m10_52  [key=2, style=dotted, color=green];
m10_45 -> m10_53  [key=2, style=dotted, color=green];
m10_44 -> m10_45  [key=0, style=solid, color=green];
m10_43 -> m10_45  [key=1, style=dashed, color=green, label=parameter];
m10_43 -> m10_44  [key=0, style=solid];
m10_46 -> m10_47  [key=0, style=solid];
m10_46 -> m10_54  [key=2, style=dotted];
m10_39 -> m10_43  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m10_39 -> m10_40  [key=0, style=solid];
m10_39 -> m10_50  [key=2, style=dotted];
m10_39 -> m10_42  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m10_40 -> m10_46  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_40 -> m10_41  [key=0, style=solid];
m10_40 -> m10_51  [key=2, style=dotted];
m10_40 -> m10_48  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_41 -> m10_44  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_41 -> m10_43  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_41 -> m10_42  [key=0, style=solid];
m10_41 -> m10_47  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_42 -> m10_43  [key=0, style=solid];
m10_42 -> m10_42  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m10_42 -> m10_48  [key=0, style=solid];
m10_47 -> m10_42  [key=0, style=solid];
m10_47 -> m10_47  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_48 -> m10_49  [key=0, style=solid];
m10_48 -> m10_55  [key=2, style=dotted];
m10_49 -> m10_27  [key=0, style=bold, color=blue];
m10_56 -> m10_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.CoreJobPerformanceProcess"];
m10_56 -> m10_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.CoreJobPerformanceProcess"];
m12_145 -> m12_146  [key=0, style=solid];
m12_146 -> m12_147  [key=0, style=solid];
m12_146 -> m12_7  [key=2, style=dotted];
m12_146 -> m12_148  [key=1, style=dashed, color=darkseagreen4, label=correctJobQueue];
m12_146 -> m12_150  [key=1, style=dashed, color=red, label=correctJobQueue];
m12_146 -> m12_159  [key=1, style=dashed, color=darkseagreen4, label=correctJobQueue];
m12_147 -> m12_148  [key=0, style=solid];
m12_147 -> m12_5  [key=2, style=dotted];
m12_147 -> m12_149  [key=1, style=dashed, color=darkseagreen4, label=correctProvider];
m12_148 -> m12_149  [key=0, style=solid];
m12_148 -> m12_6  [key=2, style=dotted];
m12_148 -> m12_8  [key=2, style=dotted];
m12_148 -> m12_154  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_150 -> m12_151  [key=0, style=solid, color=red];
m12_150 -> m12_153  [key=2, style=dotted, color=red];
m12_150 -> m12_157  [key=1, style=dashed, color=red, label="lambda expression"];
m12_149 -> m12_150  [key=0, style=solid, color=red];
m12_149 -> m12_152  [key=2, style=dotted];
m12_151 -> m12_145  [key=0, style=bold, color=blue];
m12_620 -> m12_621  [key=0, style=solid];
m12_621 -> m12_622  [key=0, style=solid, color=red];
m12_621 -> m12_625  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_621 -> m12_621  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_622 -> m12_623  [key=0, style=solid, color=red];
m12_622 -> m12_28  [key=2, style=dotted, color=red];
m12_622 -> m12_624  [key=1, style=dashed, color=red, label="lambda expression"];
m12_623 -> m12_620  [key=0, style=bold, color=blue];
m12_111 -> m12_112  [key=0, style=solid];
m12_112 -> m12_113  [key=0, style=solid, color=red];
m12_112 -> m12_116  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_112 -> m12_25  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_113 -> m12_114  [key=0, style=solid, color=red];
m12_113 -> m12_28  [key=2, style=dotted, color=red];
m12_113 -> m12_115  [key=1, style=dashed, color=red, label="lambda expression"];
m12_114 -> m12_111  [key=0, style=bold, color=blue];
m12_386 -> m12_387  [key=0, style=solid, color=red];
m12_387 -> m12_388  [key=0, style=solid, color=red];
m12_387 -> m12_28  [key=2, style=dotted, color=red];
m12_387 -> m12_389  [key=1, style=dashed, color=red, label="lambda expression"];
m12_388 -> m12_386  [key=0, style=bold, color=blue];
m12_607 -> m12_608  [key=0, style=solid, color=red];
m12_608 -> m12_609  [key=0, style=solid, color=red];
m12_608 -> m12_28  [key=2, style=dotted, color=red];
m12_608 -> m12_610  [key=1, style=dashed, color=red, label="lambda expression"];
m12_609 -> m12_607  [key=0, style=bold, color=blue];
m12_412 -> m12_413  [key=0, style=solid, color=red];
m12_413 -> m12_414  [key=0, style=solid, color=red];
m12_413 -> m12_28  [key=2, style=dotted, color=red];
m12_413 -> m12_415  [key=1, style=dashed, color=red, label="lambda expression"];
m12_414 -> m12_412  [key=0, style=bold, color=blue];
m12_469 -> m12_470  [key=0, style=solid, color=red];
m12_470 -> m12_471  [key=0, style=solid, color=red];
m12_470 -> m12_28  [key=2, style=dotted, color=red];
m12_470 -> m12_472  [key=1, style=dashed, color=red, label="lambda expression"];
m12_471 -> m12_469  [key=0, style=bold, color=blue];
m12_775 -> m12_776  [key=0, style=solid, color=red];
m12_776 -> m12_777  [key=0, style=solid, color=red];
m12_776 -> m12_28  [key=2, style=dotted, color=red];
m12_776 -> m12_778  [key=1, style=dashed, color=red, label="lambda expression"];
m12_777 -> m12_775  [key=0, style=bold, color=blue];
m12_312 -> m12_313  [key=0, style=solid, color=red];
m12_313 -> m12_314  [key=0, style=solid, color=red];
m12_313 -> m12_28  [key=2, style=dotted, color=red];
m12_313 -> m12_315  [key=1, style=dashed, color=red, label="lambda expression"];
m12_314 -> m12_312  [key=0, style=bold, color=blue];
m12_552 -> m12_553  [key=0, style=solid, color=red];
m12_553 -> m12_554  [key=0, style=solid, color=red];
m12_553 -> m12_28  [key=2, style=dotted, color=red];
m12_553 -> m12_555  [key=1, style=dashed, color=red, label="lambda expression"];
m12_554 -> m12_552  [key=0, style=bold, color=blue];
m12_582 -> m12_583  [key=0, style=solid, color=red];
m12_583 -> m12_584  [key=0, style=solid, color=red];
m12_583 -> m12_28  [key=2, style=dotted, color=red];
m12_583 -> m12_585  [key=1, style=dashed, color=red, label="lambda expression"];
m12_584 -> m12_582  [key=0, style=bold, color=blue];
m12_400 -> m12_401  [key=0, style=solid, color=red];
m12_401 -> m12_402  [key=0, style=solid, color=red];
m12_401 -> m12_28  [key=2, style=dotted, color=red];
m12_401 -> m12_403  [key=1, style=dashed, color=red, label="lambda expression"];
m12_402 -> m12_400  [key=0, style=bold, color=blue];
m12_170 -> m12_171  [key=0, style=solid];
m12_171 -> m12_172  [key=0, style=solid];
m12_171 -> m12_38  [key=2, style=dotted];
m12_171 -> m12_39  [key=2, style=dotted];
m12_172 -> m12_170  [key=0, style=bold, color=blue];
m12_809 -> m12_810  [key=0, style=solid, color=red];
m12_810 -> m12_811  [key=0, style=solid, color=red];
m12_810 -> m12_28  [key=2, style=dotted, color=red];
m12_810 -> m12_812  [key=1, style=dashed, color=red, label="lambda expression"];
m12_811 -> m12_809  [key=0, style=bold, color=blue];
m12_260 -> m12_261  [key=0, style=solid, color=red];
m12_261 -> m12_262  [key=0, style=solid, color=red];
m12_261 -> m12_28  [key=2, style=dotted, color=red];
m12_261 -> m12_263  [key=1, style=dashed, color=red, label="lambda expression"];
m12_262 -> m12_260  [key=0, style=bold, color=blue];
m12_507 -> m12_508  [key=0, style=solid, color=red];
m12_508 -> m12_509  [key=0, style=solid, color=red];
m12_508 -> m12_28  [key=2, style=dotted, color=red];
m12_508 -> m12_510  [key=1, style=dashed, color=red, label="lambda expression"];
m12_509 -> m12_507  [key=0, style=bold, color=blue];
m12_187 -> m12_188  [key=0, style=solid, color=red];
m12_188 -> m12_189  [key=0, style=solid, color=red];
m12_188 -> m12_28  [key=2, style=dotted, color=red];
m12_188 -> m12_190  [key=1, style=dashed, color=red, label="lambda expression"];
m12_189 -> m12_187  [key=0, style=bold, color=blue];
m12_286 -> m12_287  [key=0, style=solid, color=red];
m12_287 -> m12_288  [key=0, style=solid, color=red];
m12_287 -> m12_28  [key=2, style=dotted, color=red];
m12_287 -> m12_289  [key=1, style=dashed, color=red, label="lambda expression"];
m12_288 -> m12_286  [key=0, style=bold, color=blue];
m12_670 -> m12_671  [key=0, style=solid, color=red];
m12_671 -> m12_672  [key=0, style=solid, color=red];
m12_671 -> m12_28  [key=2, style=dotted, color=red];
m12_671 -> m12_673  [key=1, style=dashed, color=red, label="lambda expression"];
m12_672 -> m12_670  [key=0, style=bold, color=blue];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_5  [key=2, style=dotted];
m12_1 -> m12_3  [key=1, style=dashed, color=darkseagreen4, label=defaultProvider];
m12_2 -> m12_3  [key=0, style=solid];
m12_2 -> m12_6  [key=2, style=dotted];
m12_2 -> m12_7  [key=2, style=dotted];
m12_2 -> m12_8  [key=2, style=dotted];
m12_2 -> m12_10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_3 -> m12_4  [key=0, style=solid];
m12_3 -> m12_9  [key=2, style=dotted];
m12_4 -> m12_0  [key=0, style=bold, color=blue];
m12_823 -> m12_824  [key=0, style=solid];
m12_824 -> m12_825  [key=0, style=solid, color=red];
m12_824 -> m12_828  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_824 -> m12_824  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_825 -> m12_826  [key=0, style=solid, color=red];
m12_825 -> m12_28  [key=2, style=dotted, color=red];
m12_825 -> m12_827  [key=1, style=dashed, color=red, label="lambda expression"];
m12_826 -> m12_823  [key=0, style=bold, color=blue];
m12_685 -> m12_686  [key=0, style=solid];
m12_686 -> m12_687  [key=0, style=solid, color=red];
m12_686 -> m12_690  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_686 -> m12_686  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_687 -> m12_688  [key=0, style=solid, color=red];
m12_687 -> m12_28  [key=2, style=dotted, color=red];
m12_687 -> m12_689  [key=1, style=dashed, color=red, label="lambda expression"];
m12_688 -> m12_685  [key=0, style=bold, color=blue];
m12_857 -> m12_858  [key=0, style=solid];
m12_10 -> m12_11  [key=0, style=solid];
m12_11 -> m12_12  [key=0, style=solid];
m12_11 -> m12_13  [key=2, style=dotted];
m12_12 -> m12_10  [key=0, style=bold, color=blue];
m12_20 -> m12_21  [key=0, style=solid, color=red];
m12_21 -> m12_22  [key=0, style=solid, color=red];
m12_21 -> m12_23  [key=2, style=dotted, color=red];
m12_22 -> m12_20  [key=0, style=bold, color=blue];
m12_30 -> m12_31  [key=0, style=solid];
m12_30 -> m12_38  [key=2, style=dotted];
m12_30 -> m12_39  [key=2, style=dotted];
m12_30 -> m12_40  [key=2, style=dotted];
m12_30 -> m12_32  [key=1, style=dashed, color=red, label=jobId];
m12_30 -> m12_48  [key=1, style=dashed, color=red, label=jobId];
m12_30 -> m12_33  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_31 -> m12_32  [key=0, style=solid, color=red];
m12_31 -> m12_38  [key=2, style=dotted];
m12_31 -> m12_39  [key=2, style=dotted];
m12_31 -> m12_40  [key=2, style=dotted];
m12_31 -> m12_35  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m12_29 -> m12_30  [key=0, style=solid];
m12_29 -> m12_31  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_29 -> m12_32  [key=1, style=dashed, color=red, label=SqlConnection];
m12_29 -> m12_33  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_29 -> m12_35  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_32 -> m12_33  [key=0, style=solid, color=red];
m12_32 -> m12_41  [key=2, style=dotted, color=red];
m12_32 -> m12_47  [key=1, style=dashed, color=red, label="lambda expression"];
m12_33 -> m12_34  [key=0, style=solid];
m12_33 -> m12_42  [key=2, style=dotted];
m12_35 -> m12_36  [key=0, style=solid];
m12_35 -> m12_42  [key=2, style=dotted];
m12_48 -> m12_49  [key=0, style=solid, color=red];
m12_48 -> m12_50  [key=2, style=dotted, color=red];
m12_48 -> m12_51  [key=2, style=dotted, color=red];
m12_47 -> m12_48  [key=0, style=solid, color=red];
m12_34 -> m12_35  [key=0, style=solid];
m12_34 -> m12_43  [key=2, style=dotted];
m12_34 -> m12_44  [key=2, style=dotted];
m12_34 -> m12_45  [key=2, style=dotted];
m12_36 -> m12_37  [key=0, style=solid];
m12_36 -> m12_46  [key=2, style=dotted];
m12_37 -> m12_29  [key=0, style=bold, color=blue];
m12_49 -> m12_47  [key=0, style=bold, color=blue];
m12_57 -> m12_58  [key=0, style=solid];
m12_57 -> m12_38  [key=2, style=dotted];
m12_57 -> m12_39  [key=2, style=dotted];
m12_57 -> m12_40  [key=2, style=dotted];
m12_57 -> m12_59  [key=1, style=dashed, color=red, label=jobId];
m12_57 -> m12_67  [key=1, style=dashed, color=red, label=jobId];
m12_57 -> m12_60  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_58 -> m12_59  [key=0, style=solid, color=red];
m12_58 -> m12_38  [key=2, style=dotted];
m12_58 -> m12_39  [key=2, style=dotted];
m12_58 -> m12_40  [key=2, style=dotted];
m12_58 -> m12_62  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m12_56 -> m12_57  [key=0, style=solid];
m12_56 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_56 -> m12_59  [key=1, style=dashed, color=red, label=SqlConnection];
m12_56 -> m12_60  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_56 -> m12_62  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_59 -> m12_60  [key=0, style=solid, color=red];
m12_59 -> m12_41  [key=2, style=dotted, color=red];
m12_59 -> m12_66  [key=1, style=dashed, color=red, label="lambda expression"];
m12_60 -> m12_61  [key=0, style=solid];
m12_60 -> m12_42  [key=2, style=dotted];
m12_62 -> m12_63  [key=0, style=solid];
m12_62 -> m12_42  [key=2, style=dotted];
m12_67 -> m12_68  [key=0, style=solid, color=red];
m12_67 -> m12_69  [key=2, style=dotted, color=red];
m12_66 -> m12_67  [key=0, style=solid, color=red];
m12_61 -> m12_62  [key=0, style=solid];
m12_61 -> m12_46  [key=2, style=dotted];
m12_63 -> m12_64  [key=0, style=solid];
m12_63 -> m12_65  [key=2, style=dotted];
m12_64 -> m12_56  [key=0, style=bold, color=blue];
m12_68 -> m12_66  [key=0, style=bold, color=blue];
m12_75 -> m12_76  [key=0, style=solid];
m12_75 -> m12_38  [key=2, style=dotted];
m12_75 -> m12_39  [key=2, style=dotted];
m12_75 -> m12_40  [key=2, style=dotted];
m12_75 -> m12_81  [key=1, style=dashed, color=red, label=jobId];
m12_75 -> m12_108  [key=1, style=dashed, color=red, label=jobId];
m12_75 -> m12_82  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_75 -> m12_89  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_76 -> m12_77  [key=0, style=solid];
m12_76 -> m12_38  [key=2, style=dotted];
m12_76 -> m12_39  [key=2, style=dotted];
m12_76 -> m12_40  [key=2, style=dotted];
m12_76 -> m12_85  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m12_74 -> m12_75  [key=0, style=solid];
m12_74 -> m12_76  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_74 -> m12_81  [key=1, style=dashed, color=red, label=SqlConnection];
m12_74 -> m12_82  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_74 -> m12_85  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_74 -> m12_88  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_81 -> m12_82  [key=0, style=solid, color=red];
m12_81 -> m12_41  [key=2, style=dotted, color=red];
m12_81 -> m12_107  [key=1, style=dashed, color=red, label="lambda expression"];
m12_82 -> m12_83  [key=0, style=solid];
m12_82 -> m12_42  [key=2, style=dotted];
m12_82 -> m12_84  [key=1, style=dashed, color=darkseagreen4, label=job];
m12_85 -> m12_86  [key=0, style=solid];
m12_85 -> m12_42  [key=2, style=dotted];
m12_85 -> m12_87  [key=1, style=dashed, color=darkseagreen4, label=anotherJob];
m12_88 -> m12_89  [key=0, style=solid];
m12_88 -> m12_38  [key=2, style=dotted];
m12_88 -> m12_39  [key=2, style=dotted];
m12_88 -> m12_90  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_88 -> m12_91  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_88 -> m12_92  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_88 -> m12_93  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_108 -> m12_109  [key=0, style=solid, color=red];
m12_108 -> m12_110  [key=2, style=dotted, color=red];
m12_89 -> m12_90  [key=0, style=solid];
m12_89 -> m12_40  [key=2, style=dotted];
m12_89 -> n22  [key=2, style=dotted];
m12_77 -> m12_78  [key=0, style=solid];
m12_77 -> m12_95  [key=2, style=dotted];
m12_77 -> m12_79  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_77 -> m12_80  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_77 -> m12_81  [key=1, style=dashed, color=red, label=state];
m12_77 -> m12_108  [key=1, style=dashed, color=red, label=state];
m12_78 -> m12_79  [key=0, style=solid];
m12_78 -> m12_6  [key=2, style=dotted];
m12_78 -> m12_8  [key=2, style=dotted];
m12_78 -> m12_97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_79 -> m12_80  [key=0, style=solid];
m12_79 -> m12_6  [key=2, style=dotted];
m12_79 -> m12_8  [key=2, style=dotted];
m12_79 -> m12_100  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_80 -> m12_81  [key=0, style=solid, color=red];
m12_80 -> m12_6  [key=2, style=dotted];
m12_80 -> m12_96  [key=2, style=dotted];
m12_80 -> m12_8  [key=2, style=dotted];
m12_80 -> m12_103  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_97 -> m12_98  [key=0, style=solid];
m12_100 -> m12_101  [key=0, style=solid];
m12_103 -> m12_104  [key=0, style=solid];
m12_107 -> m12_108  [key=0, style=solid, color=red];
m12_83 -> m12_84  [key=0, style=solid];
m12_83 -> n22  [key=2, style=dotted];
m12_84 -> m12_85  [key=0, style=solid];
m12_84 -> m12_65  [key=2, style=dotted];
m12_86 -> m12_87  [key=0, style=solid];
m12_86 -> m12_46  [key=2, style=dotted];
m12_87 -> m12_88  [key=0, style=solid];
m12_87 -> m12_46  [key=2, style=dotted];
m12_90 -> m12_91  [key=0, style=solid];
m12_90 -> n22  [key=2, style=dotted];
m12_91 -> m12_92  [key=0, style=solid];
m12_91 -> n22  [key=2, style=dotted];
m12_92 -> m12_93  [key=0, style=solid];
m12_92 -> m12_65  [key=2, style=dotted];
m12_93 -> m12_94  [key=0, style=solid];
m12_93 -> n22  [key=2, style=dotted];
m12_94 -> m12_74  [key=0, style=bold, color=blue];
m12_98 -> m12_99  [key=0, style=solid];
m12_99 -> m12_97  [key=0, style=bold, color=blue];
m12_101 -> m12_102  [key=0, style=solid];
m12_102 -> m12_100  [key=0, style=bold, color=blue];
m12_104 -> m12_105  [key=0, style=solid];
m12_104 -> m12_106  [key=2, style=dotted];
m12_105 -> m12_103  [key=0, style=bold, color=blue];
m12_109 -> m12_107  [key=0, style=bold, color=blue];
m12_116 -> m12_117  [key=0, style=solid];
m12_116 -> m12_38  [key=2, style=dotted];
m12_116 -> m12_39  [key=2, style=dotted];
m12_116 -> m12_40  [key=2, style=dotted];
m12_116 -> m12_121  [key=1, style=dashed, color=red, label=jobId];
m12_116 -> m12_142  [key=1, style=dashed, color=red, label=jobId];
m12_116 -> m12_122  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_116 -> m12_126  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_115 -> m12_116  [key=0, style=solid];
m12_115 -> m12_121  [key=1, style=dashed, color=red, label=SqlConnection];
m12_115 -> m12_122  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_115 -> m12_125  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_121 -> m12_122  [key=0, style=solid, color=red];
m12_121 -> m12_41  [key=2, style=dotted, color=red];
m12_121 -> m12_141  [key=1, style=dashed, color=red, label="lambda expression"];
m12_122 -> m12_123  [key=0, style=solid];
m12_122 -> m12_42  [key=2, style=dotted];
m12_122 -> m12_124  [key=1, style=dashed, color=darkseagreen4, label=job];
m12_125 -> m12_126  [key=0, style=solid];
m12_125 -> m12_38  [key=2, style=dotted];
m12_125 -> m12_39  [key=2, style=dotted];
m12_125 -> m12_127  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_125 -> m12_128  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_125 -> m12_129  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_125 -> m12_130  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_117 -> m12_118  [key=0, style=solid];
m12_117 -> m12_95  [key=2, style=dotted];
m12_117 -> m12_119  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_117 -> m12_120  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_117 -> m12_121  [key=1, style=dashed, color=red, label=state];
m12_117 -> m12_142  [key=1, style=dashed, color=red, label=state];
m12_142 -> m12_143  [key=0, style=solid, color=red];
m12_142 -> m12_144  [key=2, style=dotted, color=red];
m12_126 -> m12_127  [key=0, style=solid];
m12_126 -> m12_40  [key=2, style=dotted];
m12_126 -> n22  [key=2, style=dotted];
m12_118 -> m12_119  [key=0, style=solid];
m12_118 -> m12_6  [key=2, style=dotted];
m12_118 -> m12_8  [key=2, style=dotted];
m12_118 -> m12_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_119 -> m12_120  [key=0, style=solid];
m12_119 -> m12_6  [key=2, style=dotted];
m12_119 -> m12_8  [key=2, style=dotted];
m12_119 -> m12_135  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_120 -> m12_121  [key=0, style=solid, color=red];
m12_120 -> m12_6  [key=2, style=dotted];
m12_120 -> m12_96  [key=2, style=dotted];
m12_120 -> m12_8  [key=2, style=dotted];
m12_120 -> m12_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_132 -> m12_133  [key=0, style=solid];
m12_135 -> m12_136  [key=0, style=solid];
m12_138 -> m12_139  [key=0, style=solid];
m12_141 -> m12_142  [key=0, style=solid, color=red];
m12_123 -> m12_124  [key=0, style=solid];
m12_123 -> m12_46  [key=2, style=dotted];
m12_124 -> m12_125  [key=0, style=solid];
m12_124 -> m12_46  [key=2, style=dotted];
m12_127 -> m12_128  [key=0, style=solid];
m12_127 -> n22  [key=2, style=dotted];
m12_128 -> m12_129  [key=0, style=solid];
m12_128 -> n22  [key=2, style=dotted];
m12_129 -> m12_130  [key=0, style=solid];
m12_129 -> m12_65  [key=2, style=dotted];
m12_130 -> m12_131  [key=0, style=solid];
m12_130 -> n22  [key=2, style=dotted];
m12_131 -> m12_115  [key=0, style=bold, color=blue];
m12_133 -> m12_134  [key=0, style=solid];
m12_134 -> m12_132  [key=0, style=bold, color=blue];
m12_136 -> m12_137  [key=0, style=solid];
m12_137 -> m12_135  [key=0, style=bold, color=blue];
m12_139 -> m12_140  [key=0, style=solid];
m12_139 -> m12_106  [key=2, style=dotted];
m12_140 -> m12_138  [key=0, style=bold, color=blue];
m12_143 -> m12_141  [key=0, style=bold, color=blue];
m12_159 -> m12_160  [key=0, style=solid];
m12_159 -> m12_161  [key=2, style=dotted];
m12_159 -> m12_166  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_154 -> m12_155  [key=0, style=solid];
m12_157 -> m12_158  [key=0, style=solid, color=red];
m12_155 -> m12_156  [key=0, style=solid];
m12_155 -> m12_13  [key=2, style=dotted];
m12_156 -> m12_154  [key=0, style=bold, color=blue];
m12_158 -> m12_159  [key=0, style=solid, color=red];
m12_158 -> m12_41  [key=2, style=dotted, color=red];
m12_158 -> m12_162  [key=1, style=dashed, color=red, label="lambda expression"];
m12_162 -> m12_163  [key=0, style=solid, color=red];
m12_160 -> m12_157  [key=0, style=bold, color=blue];
m12_166 -> m12_167  [key=0, style=solid];
m12_163 -> m12_164  [key=0, style=solid, color=red];
m12_163 -> m12_165  [key=2, style=dotted, color=red];
m12_164 -> m12_162  [key=0, style=bold, color=blue];
m12_167 -> m12_168  [key=0, style=solid];
m12_167 -> m12_18  [key=2, style=dotted];
m12_167 -> m12_169  [key=2, style=dotted];
m12_168 -> m12_166  [key=0, style=bold, color=blue];
m12_176 -> m12_177  [key=0, style=solid, color=red];
m12_176 -> m12_178  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_177 -> m12_178  [key=0, style=solid, color=red];
m12_177 -> m12_41  [key=2, style=dotted, color=red];
m12_177 -> m12_183  [key=1, style=dashed, color=red, label="lambda expression"];
m12_178 -> m12_179  [key=0, style=solid];
m12_178 -> m12_38  [key=2, style=dotted];
m12_178 -> m12_39  [key=2, style=dotted];
m12_178 -> m12_180  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_178 -> m12_181  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_183 -> m12_184  [key=0, style=solid, color=red];
m12_179 -> m12_180  [key=0, style=solid];
m12_179 -> n22  [key=2, style=dotted];
m12_180 -> m12_181  [key=0, style=solid];
m12_180 -> n22  [key=2, style=dotted];
m12_181 -> m12_182  [key=0, style=solid];
m12_181 -> n22  [key=2, style=dotted];
m12_182 -> m12_176  [key=0, style=bold, color=blue];
m12_184 -> m12_185  [key=0, style=solid, color=red];
m12_184 -> m12_186  [key=2, style=dotted, color=red];
m12_185 -> m12_183  [key=0, style=bold, color=blue];
m12_190 -> m12_191  [key=0, style=solid, color=red];
m12_190 -> m12_192  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_191 -> m12_192  [key=0, style=solid, color=red];
m12_191 -> m12_41  [key=2, style=dotted, color=red];
m12_191 -> m12_201  [key=1, style=dashed, color=red, label="lambda expression"];
m12_192 -> m12_193  [key=0, style=solid];
m12_192 -> m12_38  [key=2, style=dotted];
m12_192 -> m12_39  [key=2, style=dotted];
m12_192 -> m12_194  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_192 -> m12_195  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_192 -> m12_196  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_201 -> m12_202  [key=0, style=solid, color=red];
m12_193 -> m12_194  [key=0, style=solid];
m12_193 -> n22  [key=2, style=dotted];
m12_194 -> m12_195  [key=0, style=solid];
m12_194 -> n22  [key=2, style=dotted];
m12_195 -> m12_196  [key=0, style=solid];
m12_195 -> m12_65  [key=2, style=dotted];
m12_196 -> m12_197  [key=0, style=solid];
m12_196 -> m12_198  [key=1, style=dashed, color=darkseagreen4, label=expireAt];
m12_197 -> m12_198  [key=0, style=solid];
m12_197 -> m12_200  [key=2, style=dotted];
m12_197 -> m12_45  [key=2, style=dotted];
m12_198 -> m12_199  [key=0, style=solid];
m12_198 -> m12_200  [key=2, style=dotted];
m12_198 -> m12_45  [key=2, style=dotted];
m12_199 -> m12_190  [key=0, style=bold, color=blue];
m12_202 -> m12_203  [key=0, style=solid, color=red];
m12_202 -> m12_50  [key=2, style=dotted, color=red];
m12_202 -> m12_204  [key=2, style=dotted, color=red];
m12_203 -> m12_201  [key=0, style=bold, color=blue];
m12_208 -> m12_209  [key=0, style=solid, color=red];
m12_208 -> m12_210  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_209 -> m12_210  [key=0, style=solid, color=red];
m12_209 -> m12_41  [key=2, style=dotted, color=red];
m12_209 -> m12_213  [key=1, style=dashed, color=red, label="lambda expression"];
m12_210 -> m12_211  [key=0, style=solid];
m12_210 -> m12_18  [key=2, style=dotted];
m12_210 -> m12_39  [key=2, style=dotted];
m12_213 -> m12_214  [key=0, style=solid];
m12_213 -> m12_215  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_211 -> m12_212  [key=0, style=solid];
m12_211 -> n22  [key=2, style=dotted];
m12_212 -> m12_208  [key=0, style=bold, color=blue];
m12_214 -> m12_215  [key=0, style=solid];
m12_214 -> m12_186  [key=2, style=dotted];
m12_215 -> m12_216  [key=0, style=solid];
m12_215 -> m12_186  [key=2, style=dotted];
m12_216 -> m12_213  [key=0, style=bold, color=blue];
m12_220 -> m12_221  [key=0, style=solid, color=red];
m12_220 -> m12_222  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_221 -> m12_222  [key=0, style=solid, color=red];
m12_221 -> m12_41  [key=2, style=dotted, color=red];
m12_221 -> m12_227  [key=1, style=dashed, color=red, label="lambda expression"];
m12_222 -> m12_223  [key=0, style=solid];
m12_222 -> m12_38  [key=2, style=dotted];
m12_222 -> m12_39  [key=2, style=dotted];
m12_222 -> m12_224  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_222 -> m12_225  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_227 -> m12_228  [key=0, style=solid, color=red];
m12_223 -> m12_224  [key=0, style=solid];
m12_223 -> n22  [key=2, style=dotted];
m12_224 -> m12_225  [key=0, style=solid];
m12_224 -> n22  [key=2, style=dotted];
m12_225 -> m12_226  [key=0, style=solid];
m12_225 -> n22  [key=2, style=dotted];
m12_226 -> m12_220  [key=0, style=bold, color=blue];
m12_228 -> m12_229  [key=0, style=solid, color=red];
m12_228 -> m12_230  [key=2, style=dotted, color=red];
m12_229 -> m12_227  [key=0, style=bold, color=blue];
m12_234 -> m12_235  [key=0, style=solid, color=red];
m12_234 -> m12_236  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_235 -> m12_236  [key=0, style=solid, color=red];
m12_235 -> m12_41  [key=2, style=dotted, color=red];
m12_235 -> m12_244  [key=1, style=dashed, color=red, label="lambda expression"];
m12_236 -> m12_237  [key=0, style=solid];
m12_236 -> m12_38  [key=2, style=dotted];
m12_236 -> m12_39  [key=2, style=dotted];
m12_236 -> m12_238  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_236 -> m12_239  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_236 -> m12_240  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_244 -> m12_245  [key=0, style=solid, color=red];
m12_237 -> m12_238  [key=0, style=solid];
m12_237 -> n22  [key=2, style=dotted];
m12_238 -> m12_239  [key=0, style=solid];
m12_238 -> n22  [key=2, style=dotted];
m12_239 -> m12_240  [key=0, style=solid];
m12_239 -> m12_65  [key=2, style=dotted];
m12_240 -> m12_241  [key=0, style=solid];
m12_240 -> m12_242  [key=1, style=dashed, color=darkseagreen4, label=expireAt];
m12_241 -> m12_242  [key=0, style=solid];
m12_241 -> m12_200  [key=2, style=dotted];
m12_241 -> m12_45  [key=2, style=dotted];
m12_242 -> m12_243  [key=0, style=solid];
m12_242 -> m12_200  [key=2, style=dotted];
m12_242 -> m12_45  [key=2, style=dotted];
m12_243 -> m12_234  [key=0, style=bold, color=blue];
m12_245 -> m12_246  [key=0, style=solid, color=red];
m12_245 -> m12_50  [key=2, style=dotted, color=red];
m12_245 -> m12_247  [key=2, style=dotted, color=red];
m12_246 -> m12_244  [key=0, style=bold, color=blue];
m12_251 -> m12_252  [key=0, style=solid, color=red];
m12_251 -> m12_253  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_252 -> m12_253  [key=0, style=solid, color=red];
m12_252 -> m12_41  [key=2, style=dotted, color=red];
m12_252 -> m12_256  [key=1, style=dashed, color=red, label="lambda expression"];
m12_253 -> m12_254  [key=0, style=solid];
m12_253 -> m12_18  [key=2, style=dotted];
m12_253 -> m12_39  [key=2, style=dotted];
m12_256 -> m12_257  [key=0, style=solid];
m12_256 -> m12_258  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_254 -> m12_255  [key=0, style=solid];
m12_254 -> n22  [key=2, style=dotted];
m12_255 -> m12_251  [key=0, style=bold, color=blue];
m12_257 -> m12_258  [key=0, style=solid];
m12_257 -> m12_230  [key=2, style=dotted];
m12_258 -> m12_259  [key=0, style=solid];
m12_258 -> m12_230  [key=2, style=dotted];
m12_259 -> m12_256  [key=0, style=bold, color=blue];
m12_263 -> m12_264  [key=0, style=solid, color=red];
m12_263 -> m12_265  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_264 -> m12_265  [key=0, style=solid, color=red];
m12_264 -> m12_41  [key=2, style=dotted, color=red];
m12_264 -> m12_270  [key=1, style=dashed, color=red, label="lambda expression"];
m12_265 -> m12_266  [key=0, style=solid];
m12_265 -> m12_38  [key=2, style=dotted];
m12_265 -> m12_39  [key=2, style=dotted];
m12_265 -> m12_267  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_265 -> m12_268  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_270 -> m12_271  [key=0, style=solid, color=red];
m12_266 -> m12_267  [key=0, style=solid];
m12_266 -> n22  [key=2, style=dotted];
m12_267 -> m12_268  [key=0, style=solid];
m12_267 -> n22  [key=2, style=dotted];
m12_268 -> m12_269  [key=0, style=solid];
m12_268 -> n22  [key=2, style=dotted];
m12_269 -> m12_263  [key=0, style=bold, color=blue];
m12_271 -> m12_272  [key=0, style=solid, color=red];
m12_271 -> m12_273  [key=2, style=dotted, color=red];
m12_272 -> m12_270  [key=0, style=bold, color=blue];
m12_277 -> m12_278  [key=0, style=solid, color=red];
m12_277 -> m12_279  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_278 -> m12_279  [key=0, style=solid, color=red];
m12_278 -> m12_41  [key=2, style=dotted, color=red];
m12_278 -> m12_282  [key=1, style=dashed, color=red, label="lambda expression"];
m12_279 -> m12_280  [key=0, style=solid];
m12_279 -> m12_18  [key=2, style=dotted];
m12_279 -> m12_39  [key=2, style=dotted];
m12_282 -> m12_283  [key=0, style=solid];
m12_282 -> m12_284  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_280 -> m12_281  [key=0, style=solid];
m12_280 -> n22  [key=2, style=dotted];
m12_281 -> m12_277  [key=0, style=bold, color=blue];
m12_283 -> m12_284  [key=0, style=solid];
m12_283 -> m12_273  [key=2, style=dotted];
m12_284 -> m12_285  [key=0, style=solid];
m12_284 -> m12_273  [key=2, style=dotted];
m12_285 -> m12_282  [key=0, style=bold, color=blue];
m12_289 -> m12_290  [key=0, style=solid, color=red];
m12_289 -> m12_291  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_290 -> m12_291  [key=0, style=solid, color=red];
m12_290 -> m12_41  [key=2, style=dotted, color=red];
m12_290 -> m12_294  [key=1, style=dashed, color=red, label="lambda expression"];
m12_291 -> m12_292  [key=0, style=solid];
m12_291 -> m12_18  [key=2, style=dotted];
m12_291 -> m12_39  [key=2, style=dotted];
m12_294 -> m12_295  [key=0, style=solid];
m12_294 -> m12_296  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_292 -> m12_293  [key=0, style=solid];
m12_292 -> n22  [key=2, style=dotted];
m12_293 -> m12_289  [key=0, style=bold, color=blue];
m12_295 -> m12_296  [key=0, style=solid];
m12_295 -> m12_273  [key=2, style=dotted];
m12_296 -> m12_297  [key=0, style=solid];
m12_296 -> m12_273  [key=2, style=dotted];
m12_297 -> m12_294  [key=0, style=bold, color=blue];
m12_301 -> m12_302  [key=0, style=solid, color=red];
m12_301 -> m12_303  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_302 -> m12_303  [key=0, style=solid, color=red];
m12_302 -> m12_41  [key=2, style=dotted, color=red];
m12_302 -> m12_308  [key=1, style=dashed, color=red, label="lambda expression"];
m12_303 -> m12_304  [key=0, style=solid];
m12_303 -> m12_38  [key=2, style=dotted];
m12_303 -> m12_39  [key=2, style=dotted];
m12_303 -> m12_305  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_303 -> m12_306  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_308 -> m12_309  [key=0, style=solid, color=red];
m12_304 -> m12_305  [key=0, style=solid];
m12_304 -> n22  [key=2, style=dotted];
m12_305 -> m12_306  [key=0, style=solid];
m12_305 -> n22  [key=2, style=dotted];
m12_306 -> m12_307  [key=0, style=solid];
m12_306 -> n22  [key=2, style=dotted];
m12_307 -> m12_301  [key=0, style=bold, color=blue];
m12_309 -> m12_310  [key=0, style=solid, color=red];
m12_309 -> m12_311  [key=2, style=dotted, color=red];
m12_310 -> m12_308  [key=0, style=bold, color=blue];
m12_315 -> m12_316  [key=0, style=solid, color=red];
m12_315 -> m12_317  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_316 -> m12_317  [key=0, style=solid, color=red];
m12_316 -> m12_41  [key=2, style=dotted, color=red];
m12_316 -> m12_320  [key=1, style=dashed, color=red, label="lambda expression"];
m12_317 -> m12_318  [key=0, style=solid];
m12_317 -> m12_38  [key=2, style=dotted];
m12_317 -> m12_39  [key=2, style=dotted];
m12_320 -> m12_321  [key=0, style=solid];
m12_320 -> m12_322  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_318 -> m12_319  [key=0, style=solid];
m12_318 -> n22  [key=2, style=dotted];
m12_319 -> m12_315  [key=0, style=bold, color=blue];
m12_321 -> m12_322  [key=0, style=solid];
m12_321 -> m12_273  [key=2, style=dotted];
m12_322 -> m12_323  [key=0, style=solid];
m12_322 -> m12_311  [key=2, style=dotted];
m12_323 -> m12_320  [key=0, style=bold, color=blue];
m12_327 -> m12_328  [key=0, style=solid, color=red];
m12_327 -> m12_329  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_328 -> m12_329  [key=0, style=solid, color=red];
m12_328 -> m12_41  [key=2, style=dotted, color=red];
m12_328 -> m12_332  [key=1, style=dashed, color=red, label="lambda expression"];
m12_329 -> m12_330  [key=0, style=solid];
m12_329 -> m12_18  [key=2, style=dotted];
m12_329 -> m12_39  [key=2, style=dotted];
m12_332 -> m12_333  [key=0, style=solid];
m12_332 -> m12_334  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_330 -> m12_331  [key=0, style=solid];
m12_330 -> n22  [key=2, style=dotted];
m12_331 -> m12_327  [key=0, style=bold, color=blue];
m12_333 -> m12_334  [key=0, style=solid];
m12_333 -> m12_273  [key=2, style=dotted];
m12_334 -> m12_335  [key=0, style=solid];
m12_334 -> m12_336  [key=2, style=dotted];
m12_335 -> m12_332  [key=0, style=bold, color=blue];
m12_340 -> m12_341  [key=0, style=solid, color=red];
m12_340 -> m12_342  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_341 -> m12_342  [key=0, style=solid, color=red];
m12_341 -> m12_41  [key=2, style=dotted, color=red];
m12_341 -> m12_345  [key=1, style=dashed, color=red, label="lambda expression"];
m12_342 -> m12_343  [key=0, style=solid];
m12_342 -> m12_18  [key=2, style=dotted];
m12_342 -> m12_39  [key=2, style=dotted];
m12_345 -> m12_346  [key=0, style=solid];
m12_345 -> m12_347  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_343 -> m12_344  [key=0, style=solid];
m12_343 -> n22  [key=2, style=dotted];
m12_344 -> m12_340  [key=0, style=bold, color=blue];
m12_346 -> m12_347  [key=0, style=solid];
m12_346 -> m12_273  [key=2, style=dotted];
m12_347 -> m12_348  [key=0, style=solid];
m12_347 -> m12_336  [key=2, style=dotted];
m12_348 -> m12_345  [key=0, style=bold, color=blue];
m12_352 -> m12_353  [key=0, style=solid, color=red];
m12_352 -> m12_354  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_353 -> m12_354  [key=0, style=solid, color=red];
m12_353 -> m12_41  [key=2, style=dotted, color=red];
m12_353 -> m12_357  [key=1, style=dashed, color=red, label="lambda expression"];
m12_354 -> m12_355  [key=0, style=solid];
m12_354 -> m12_18  [key=2, style=dotted];
m12_354 -> m12_39  [key=2, style=dotted];
m12_357 -> m12_358  [key=0, style=solid];
m12_357 -> m12_359  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_355 -> m12_356  [key=0, style=solid];
m12_355 -> n22  [key=2, style=dotted];
m12_356 -> m12_352  [key=0, style=bold, color=blue];
m12_358 -> m12_359  [key=0, style=solid];
m12_358 -> m12_273  [key=2, style=dotted];
m12_359 -> m12_360  [key=0, style=solid];
m12_359 -> m12_336  [key=2, style=dotted];
m12_360 -> m12_357  [key=0, style=bold, color=blue];
m12_364 -> m12_365  [key=0, style=solid, color=red];
m12_364 -> m12_366  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_365 -> m12_366  [key=0, style=solid, color=red];
m12_365 -> m12_41  [key=2, style=dotted, color=red];
m12_365 -> m12_370  [key=1, style=dashed, color=red, label="lambda expression"];
m12_366 -> m12_367  [key=0, style=solid];
m12_366 -> m12_38  [key=2, style=dotted];
m12_366 -> m12_39  [key=2, style=dotted];
m12_366 -> m12_368  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_370 -> m12_371  [key=0, style=solid, color=red];
m12_367 -> m12_368  [key=0, style=solid];
m12_367 -> n22  [key=2, style=dotted];
m12_368 -> m12_369  [key=0, style=solid];
m12_368 -> n22  [key=2, style=dotted];
m12_369 -> m12_364  [key=0, style=bold, color=blue];
m12_371 -> m12_372  [key=0, style=solid, color=red];
m12_371 -> m12_373  [key=2, style=dotted, color=red];
m12_372 -> m12_370  [key=0, style=bold, color=blue];
m12_377 -> m12_378  [key=0, style=solid, color=red];
m12_377 -> m12_379  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_378 -> m12_379  [key=0, style=solid, color=red];
m12_378 -> m12_41  [key=2, style=dotted, color=red];
m12_378 -> m12_382  [key=1, style=dashed, color=red, label="lambda expression"];
m12_379 -> m12_380  [key=0, style=solid];
m12_379 -> m12_18  [key=2, style=dotted];
m12_379 -> m12_39  [key=2, style=dotted];
m12_382 -> m12_383  [key=0, style=solid];
m12_382 -> m12_384  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_380 -> m12_381  [key=0, style=solid];
m12_380 -> n22  [key=2, style=dotted];
m12_381 -> m12_377  [key=0, style=bold, color=blue];
m12_383 -> m12_384  [key=0, style=solid];
m12_383 -> m12_373  [key=2, style=dotted];
m12_384 -> m12_385  [key=0, style=solid];
m12_384 -> m12_373  [key=2, style=dotted];
m12_385 -> m12_382  [key=0, style=bold, color=blue];
m12_389 -> m12_390  [key=0, style=solid, color=red];
m12_389 -> m12_391  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_390 -> m12_391  [key=0, style=solid, color=red];
m12_390 -> m12_41  [key=2, style=dotted, color=red];
m12_390 -> m12_394  [key=1, style=dashed, color=red, label="lambda expression"];
m12_391 -> m12_392  [key=0, style=solid];
m12_391 -> m12_18  [key=2, style=dotted];
m12_391 -> m12_39  [key=2, style=dotted];
m12_394 -> m12_395  [key=0, style=solid];
m12_394 -> m12_396  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_394 -> m12_397  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_392 -> m12_393  [key=0, style=solid];
m12_392 -> n22  [key=2, style=dotted];
m12_393 -> m12_389  [key=0, style=bold, color=blue];
m12_395 -> m12_396  [key=0, style=solid];
m12_395 -> m12_373  [key=2, style=dotted];
m12_396 -> m12_397  [key=0, style=solid];
m12_396 -> m12_373  [key=2, style=dotted];
m12_397 -> m12_398  [key=0, style=solid];
m12_397 -> m12_399  [key=2, style=dotted];
m12_398 -> m12_394  [key=0, style=bold, color=blue];
m12_403 -> m12_404  [key=0, style=solid, color=red];
m12_403 -> m12_405  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_404 -> m12_405  [key=0, style=solid, color=red];
m12_404 -> m12_41  [key=2, style=dotted, color=red];
m12_404 -> m12_408  [key=1, style=dashed, color=red, label="lambda expression"];
m12_405 -> m12_406  [key=0, style=solid];
m12_405 -> m12_18  [key=2, style=dotted];
m12_405 -> m12_39  [key=2, style=dotted];
m12_408 -> m12_409  [key=0, style=solid];
m12_408 -> m12_410  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_406 -> m12_407  [key=0, style=solid];
m12_406 -> n22  [key=2, style=dotted];
m12_407 -> m12_403  [key=0, style=bold, color=blue];
m12_409 -> m12_410  [key=0, style=solid];
m12_409 -> m12_373  [key=2, style=dotted];
m12_410 -> m12_411  [key=0, style=solid];
m12_410 -> m12_399  [key=2, style=dotted];
m12_411 -> m12_408  [key=0, style=bold, color=blue];
m12_415 -> m12_416  [key=0, style=solid, color=red];
m12_415 -> m12_417  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_416 -> m12_417  [key=0, style=solid, color=red];
m12_416 -> m12_41  [key=2, style=dotted, color=red];
m12_416 -> m12_420  [key=1, style=dashed, color=red, label="lambda expression"];
m12_417 -> m12_418  [key=0, style=solid];
m12_417 -> m12_18  [key=2, style=dotted];
m12_417 -> m12_39  [key=2, style=dotted];
m12_420 -> m12_421  [key=0, style=solid];
m12_420 -> m12_422  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_418 -> m12_419  [key=0, style=solid];
m12_418 -> n22  [key=2, style=dotted];
m12_419 -> m12_415  [key=0, style=bold, color=blue];
m12_421 -> m12_422  [key=0, style=solid];
m12_421 -> m12_373  [key=2, style=dotted];
m12_422 -> m12_423  [key=0, style=solid];
m12_422 -> m12_399  [key=2, style=dotted];
m12_423 -> m12_420  [key=0, style=bold, color=blue];
m12_427 -> m12_428  [key=0, style=solid, color=red];
m12_427 -> m12_429  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_428 -> m12_429  [key=0, style=solid, color=red];
m12_428 -> m12_41  [key=2, style=dotted, color=red];
m12_428 -> m12_435  [key=1, style=dashed, color=red, label="lambda expression"];
m12_429 -> m12_430  [key=0, style=solid];
m12_429 -> m12_38  [key=2, style=dotted];
m12_429 -> m12_434  [key=2, style=dotted];
m12_429 -> m12_431  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_429 -> m12_432  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_435 -> m12_436  [key=0, style=solid];
m12_435 -> m12_437  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_435 -> m12_438  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_435 -> m12_439  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_435 -> m12_440  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_430 -> m12_431  [key=0, style=solid];
m12_430 -> n22  [key=2, style=dotted];
m12_431 -> m12_432  [key=0, style=solid];
m12_431 -> n22  [key=2, style=dotted];
m12_432 -> m12_433  [key=0, style=solid];
m12_432 -> n22  [key=2, style=dotted];
m12_433 -> m12_427  [key=0, style=bold, color=blue];
m12_436 -> m12_437  [key=0, style=solid];
m12_436 -> m12_373  [key=2, style=dotted];
m12_437 -> m12_438  [key=0, style=solid];
m12_437 -> m12_373  [key=2, style=dotted];
m12_438 -> m12_439  [key=0, style=solid];
m12_438 -> m12_373  [key=2, style=dotted];
m12_439 -> m12_440  [key=0, style=solid];
m12_439 -> m12_373  [key=2, style=dotted];
m12_440 -> m12_441  [key=0, style=solid];
m12_440 -> m12_442  [key=2, style=dotted];
m12_441 -> m12_435  [key=0, style=bold, color=blue];
m12_446 -> m12_447  [key=0, style=solid, color=red];
m12_446 -> m12_448  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_447 -> m12_448  [key=0, style=solid, color=red];
m12_447 -> m12_41  [key=2, style=dotted, color=red];
m12_447 -> m12_451  [key=1, style=dashed, color=red, label="lambda expression"];
m12_448 -> m12_449  [key=0, style=solid];
m12_448 -> m12_18  [key=2, style=dotted];
m12_448 -> m12_39  [key=2, style=dotted];
m12_451 -> m12_452  [key=0, style=solid];
m12_451 -> m12_453  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_451 -> m12_454  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_451 -> m12_455  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_449 -> m12_450  [key=0, style=solid];
m12_449 -> n22  [key=2, style=dotted];
m12_450 -> m12_446  [key=0, style=bold, color=blue];
m12_452 -> m12_453  [key=0, style=solid];
m12_452 -> m12_373  [key=2, style=dotted];
m12_453 -> m12_454  [key=0, style=solid];
m12_453 -> m12_373  [key=2, style=dotted];
m12_454 -> m12_455  [key=0, style=solid];
m12_454 -> m12_373  [key=2, style=dotted];
m12_455 -> m12_456  [key=0, style=solid];
m12_455 -> m12_442  [key=2, style=dotted];
m12_456 -> m12_451  [key=0, style=bold, color=blue];
m12_460 -> m12_461  [key=0, style=solid, color=red];
m12_460 -> m12_462  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_461 -> m12_462  [key=0, style=solid, color=red];
m12_461 -> m12_41  [key=2, style=dotted, color=red];
m12_461 -> m12_465  [key=1, style=dashed, color=red, label="lambda expression"];
m12_462 -> m12_463  [key=0, style=solid];
m12_462 -> m12_18  [key=2, style=dotted];
m12_462 -> m12_39  [key=2, style=dotted];
m12_465 -> m12_466  [key=0, style=solid];
m12_465 -> m12_467  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_463 -> m12_464  [key=0, style=solid];
m12_463 -> n22  [key=2, style=dotted];
m12_464 -> m12_460  [key=0, style=bold, color=blue];
m12_466 -> m12_467  [key=0, style=solid];
m12_466 -> m12_373  [key=2, style=dotted];
m12_467 -> m12_468  [key=0, style=solid];
m12_467 -> m12_442  [key=2, style=dotted];
m12_468 -> m12_465  [key=0, style=bold, color=blue];
m12_472 -> m12_473  [key=0, style=solid, color=red];
m12_472 -> m12_474  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_473 -> m12_474  [key=0, style=solid, color=red];
m12_473 -> m12_41  [key=2, style=dotted, color=red];
m12_473 -> m12_477  [key=1, style=dashed, color=red, label="lambda expression"];
m12_474 -> m12_475  [key=0, style=solid];
m12_474 -> m12_18  [key=2, style=dotted];
m12_474 -> m12_39  [key=2, style=dotted];
m12_477 -> m12_478  [key=0, style=solid];
m12_477 -> m12_479  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_475 -> m12_476  [key=0, style=solid];
m12_475 -> n22  [key=2, style=dotted];
m12_476 -> m12_472  [key=0, style=bold, color=blue];
m12_478 -> m12_479  [key=0, style=solid];
m12_478 -> m12_373  [key=2, style=dotted];
m12_479 -> m12_480  [key=0, style=solid];
m12_479 -> m12_442  [key=2, style=dotted];
m12_480 -> m12_477  [key=0, style=bold, color=blue];
m12_484 -> m12_485  [key=0, style=solid, color=red];
m12_484 -> m12_486  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_485 -> m12_486  [key=0, style=solid, color=red];
m12_485 -> m12_41  [key=2, style=dotted, color=red];
m12_485 -> m12_489  [key=1, style=dashed, color=red, label="lambda expression"];
m12_486 -> m12_487  [key=0, style=solid];
m12_486 -> m12_18  [key=2, style=dotted];
m12_486 -> m12_39  [key=2, style=dotted];
m12_489 -> m12_490  [key=0, style=solid];
m12_489 -> m12_491  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_487 -> m12_488  [key=0, style=solid];
m12_487 -> n22  [key=2, style=dotted];
m12_488 -> m12_484  [key=0, style=bold, color=blue];
m12_490 -> m12_491  [key=0, style=solid];
m12_490 -> m12_373  [key=2, style=dotted];
m12_491 -> m12_492  [key=0, style=solid];
m12_491 -> m12_442  [key=2, style=dotted];
m12_492 -> m12_489  [key=0, style=bold, color=blue];
m12_496 -> m12_497  [key=0, style=solid, color=red];
m12_496 -> m12_501  [key=1, style=dashed, color=red, label=SqlConnection];
m12_497 -> m12_498  [key=0, style=solid, color=red];
m12_497 -> m12_18  [key=2, style=dotted, color=red];
m12_497 -> m12_500  [key=1, style=dashed, color=red, label="lambda expression"];
m12_501 -> m12_502  [key=0, style=solid, color=red];
m12_501 -> m12_41  [key=2, style=dotted, color=red];
m12_501 -> m12_503  [key=1, style=dashed, color=red, label="lambda expression"];
m12_498 -> m12_499  [key=0, style=solid];
m12_498 -> n22  [key=2, style=dotted];
m12_500 -> m12_501  [key=0, style=solid, color=red];
m12_499 -> m12_496  [key=0, style=bold, color=blue];
m12_502 -> m12_500  [key=0, style=bold, color=blue];
m12_503 -> m12_504  [key=0, style=solid, color=red];
m12_504 -> m12_505  [key=0, style=solid, color=red];
m12_504 -> m12_96  [key=2, style=dotted, color=red];
m12_504 -> m12_506  [key=2, style=dotted, color=red];
m12_505 -> m12_503  [key=0, style=bold, color=blue];
m12_510 -> m12_511  [key=0, style=solid, color=red];
m12_510 -> m12_515  [key=1, style=dashed, color=red, label=SqlConnection];
m12_511 -> m12_512  [key=0, style=solid, color=red];
m12_511 -> m12_18  [key=2, style=dotted, color=red];
m12_511 -> m12_514  [key=1, style=dashed, color=red, label="lambda expression"];
m12_515 -> m12_516  [key=0, style=solid, color=red];
m12_515 -> m12_41  [key=2, style=dotted, color=red];
m12_515 -> m12_517  [key=1, style=dashed, color=red, label="lambda expression"];
m12_512 -> m12_513  [key=0, style=solid];
m12_512 -> n22  [key=2, style=dotted];
m12_514 -> m12_515  [key=0, style=solid, color=red];
m12_513 -> m12_510  [key=0, style=bold, color=blue];
m12_516 -> m12_514  [key=0, style=bold, color=blue];
m12_517 -> m12_518  [key=0, style=solid, color=red];
m12_518 -> m12_519  [key=0, style=solid, color=red];
m12_518 -> m12_506  [key=2, style=dotted, color=red];
m12_519 -> m12_517  [key=0, style=bold, color=blue];
m12_523 -> m12_524  [key=0, style=solid, color=red];
m12_523 -> m12_525  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_524 -> m12_525  [key=0, style=solid, color=red];
m12_524 -> m12_41  [key=2, style=dotted, color=red];
m12_524 -> m12_530  [key=1, style=dashed, color=red, label="lambda expression"];
m12_525 -> m12_526  [key=0, style=solid];
m12_525 -> m12_38  [key=2, style=dotted];
m12_525 -> m12_529  [key=2, style=dotted];
m12_525 -> m12_533  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_525 -> m12_536  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_525 -> m12_527  [key=1, style=dashed, color=darkseagreen4, label=result];
m12_530 -> m12_531  [key=0, style=solid, color=red];
m12_526 -> m12_527  [key=0, style=solid];
m12_526 -> n22  [key=2, style=dotted];
m12_533 -> m12_534  [key=0, style=solid];
m12_536 -> m12_537  [key=0, style=solid];
m12_527 -> m12_528  [key=0, style=solid];
m12_527 -> n22  [key=2, style=dotted];
m12_528 -> m12_523  [key=0, style=bold, color=blue];
m12_531 -> m12_532  [key=0, style=solid, color=red];
m12_531 -> m12_96  [key=2, style=dotted, color=red];
m12_531 -> m12_506  [key=2, style=dotted, color=red];
m12_532 -> m12_530  [key=0, style=bold, color=blue];
m12_534 -> m12_535  [key=0, style=solid];
m12_535 -> m12_533  [key=0, style=bold, color=blue];
m12_537 -> m12_538  [key=0, style=solid];
m12_538 -> m12_536  [key=0, style=bold, color=blue];
m12_542 -> m12_543  [key=0, style=solid, color=red];
m12_542 -> m12_546  [key=1, style=dashed, color=red, label=SqlConnection];
m12_543 -> m12_544  [key=0, style=solid, color=red];
m12_543 -> m12_18  [key=2, style=dotted, color=red];
m12_543 -> m12_545  [key=1, style=dashed, color=red, label="lambda expression"];
m12_546 -> m12_547  [key=0, style=solid, color=red];
m12_546 -> m12_41  [key=2, style=dotted, color=red];
m12_546 -> m12_548  [key=1, style=dashed, color=red, label="lambda expression"];
m12_544 -> m12_542  [key=0, style=bold, color=blue];
m12_545 -> m12_546  [key=0, style=solid, color=red];
m12_547 -> m12_545  [key=0, style=bold, color=blue];
m12_548 -> m12_549  [key=0, style=solid, color=red];
m12_549 -> m12_550  [key=0, style=solid, color=red];
m12_549 -> m12_551  [key=2, style=dotted, color=red];
m12_550 -> m12_548  [key=0, style=bold, color=blue];
m12_555 -> m12_556  [key=0, style=solid, color=red];
m12_555 -> m12_557  [key=1, style=dashed, color=red, label=SqlConnection];
m12_555 -> m12_558  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_556 -> m12_557  [key=0, style=solid, color=red];
m12_556 -> m12_41  [key=2, style=dotted, color=red];
m12_556 -> m12_561  [key=1, style=dashed, color=red, label="lambda expression"];
m12_557 -> m12_558  [key=0, style=solid, color=red];
m12_557 -> m12_41  [key=2, style=dotted, color=red];
m12_557 -> m12_564  [key=1, style=dashed, color=red, label="lambda expression"];
m12_558 -> m12_559  [key=0, style=solid];
m12_558 -> m12_18  [key=2, style=dotted];
m12_558 -> m12_39  [key=2, style=dotted];
m12_561 -> m12_562  [key=0, style=solid, color=red];
m12_564 -> m12_565  [key=0, style=solid, color=red];
m12_559 -> m12_560  [key=0, style=solid];
m12_559 -> n22  [key=2, style=dotted];
m12_560 -> m12_555  [key=0, style=bold, color=blue];
m12_562 -> m12_563  [key=0, style=solid, color=red];
m12_562 -> m12_96  [key=2, style=dotted, color=red];
m12_562 -> m12_506  [key=2, style=dotted, color=red];
m12_563 -> m12_561  [key=0, style=bold, color=blue];
m12_565 -> m12_566  [key=0, style=solid, color=red];
m12_565 -> m12_551  [key=2, style=dotted, color=red];
m12_566 -> m12_564  [key=0, style=bold, color=blue];
m12_570 -> m12_571  [key=0, style=solid, color=red];
m12_570 -> m12_575  [key=1, style=dashed, color=red, label=SqlConnection];
m12_571 -> m12_572  [key=0, style=solid, color=red];
m12_571 -> m12_18  [key=2, style=dotted, color=red];
m12_571 -> m12_574  [key=1, style=dashed, color=red, label="lambda expression"];
m12_575 -> m12_576  [key=0, style=solid, color=red];
m12_575 -> m12_41  [key=2, style=dotted, color=red];
m12_575 -> m12_577  [key=1, style=dashed, color=red, label="lambda expression"];
m12_572 -> m12_573  [key=0, style=solid];
m12_572 -> n22  [key=2, style=dotted];
m12_574 -> m12_575  [key=0, style=solid, color=red];
m12_573 -> m12_570  [key=0, style=bold, color=blue];
m12_576 -> m12_574  [key=0, style=bold, color=blue];
m12_577 -> m12_578  [key=0, style=solid, color=red];
m12_578 -> m12_579  [key=0, style=solid, color=red];
m12_578 -> m12_580  [key=2, style=dotted, color=red];
m12_578 -> m12_581  [key=2, style=dotted, color=red];
m12_579 -> m12_577  [key=0, style=bold, color=blue];
m12_585 -> m12_586  [key=0, style=solid, color=red];
m12_585 -> m12_590  [key=1, style=dashed, color=red, label=SqlConnection];
m12_586 -> m12_587  [key=0, style=solid, color=red];
m12_586 -> m12_18  [key=2, style=dotted, color=red];
m12_586 -> m12_589  [key=1, style=dashed, color=red, label="lambda expression"];
m12_590 -> m12_591  [key=0, style=solid, color=red];
m12_590 -> m12_41  [key=2, style=dotted, color=red];
m12_590 -> m12_592  [key=1, style=dashed, color=red, label="lambda expression"];
m12_587 -> m12_588  [key=0, style=solid];
m12_587 -> n22  [key=2, style=dotted];
m12_589 -> m12_590  [key=0, style=solid, color=red];
m12_588 -> m12_585  [key=0, style=bold, color=blue];
m12_591 -> m12_589  [key=0, style=bold, color=blue];
m12_592 -> m12_593  [key=0, style=solid, color=red];
m12_593 -> m12_594  [key=0, style=solid, color=red];
m12_593 -> m12_581  [key=2, style=dotted, color=red];
m12_594 -> m12_592  [key=0, style=bold, color=blue];
m12_598 -> m12_599  [key=0, style=solid];
m12_598 -> m12_600  [key=1, style=dashed, color=red, label=SqlConnection];
m12_598 -> m12_601  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_599 -> m12_600  [key=0, style=solid, color=red];
m12_599 -> m12_580  [key=2, style=dotted];
m12_599 -> m12_605  [key=1, style=dashed, color=red, label=items];
m12_599 -> m12_602  [key=1, style=dashed, color=darkseagreen4, label=items];
m12_600 -> m12_601  [key=0, style=solid, color=red];
m12_600 -> m12_41  [key=2, style=dotted, color=red];
m12_600 -> m12_604  [key=1, style=dashed, color=red, label="lambda expression"];
m12_601 -> m12_602  [key=0, style=solid];
m12_601 -> m12_18  [key=2, style=dotted];
m12_605 -> m12_606  [key=0, style=solid, color=red];
m12_605 -> m12_581  [key=2, style=dotted, color=red];
m12_602 -> m12_603  [key=0, style=solid];
m12_602 -> n22  [key=2, style=dotted];
m12_604 -> m12_605  [key=0, style=solid, color=red];
m12_603 -> m12_598  [key=0, style=bold, color=blue];
m12_606 -> m12_604  [key=0, style=bold, color=blue];
m12_610 -> m12_611  [key=0, style=solid, color=red];
m12_610 -> m12_614  [key=1, style=dashed, color=red, label=SqlConnection];
m12_611 -> m12_612  [key=0, style=solid, color=red];
m12_611 -> m12_18  [key=2, style=dotted, color=red];
m12_611 -> m12_613  [key=1, style=dashed, color=red, label="lambda expression"];
m12_614 -> m12_615  [key=0, style=solid, color=red];
m12_614 -> m12_41  [key=2, style=dotted, color=red];
m12_614 -> m12_616  [key=1, style=dashed, color=red, label="lambda expression"];
m12_612 -> m12_610  [key=0, style=bold, color=blue];
m12_613 -> m12_614  [key=0, style=solid, color=red];
m12_615 -> m12_613  [key=0, style=bold, color=blue];
m12_616 -> m12_617  [key=0, style=solid, color=red];
m12_617 -> m12_618  [key=0, style=solid, color=red];
m12_617 -> m12_619  [key=2, style=dotted, color=red];
m12_618 -> m12_616  [key=0, style=bold, color=blue];
m12_625 -> m12_626  [key=0, style=solid, color=red];
m12_625 -> m12_630  [key=2, style=dotted];
m12_624 -> m12_625  [key=0, style=solid];
m12_624 -> m12_626  [key=1, style=dashed, color=red, label=SqlConnection];
m12_624 -> m12_627  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_626 -> m12_627  [key=0, style=solid, color=red];
m12_626 -> m12_41  [key=2, style=dotted, color=red];
m12_626 -> m12_631  [key=1, style=dashed, color=red, label="lambda expression"];
m12_627 -> m12_628  [key=0, style=solid];
m12_627 -> m12_38  [key=2, style=dotted];
m12_627 -> m12_39  [key=2, style=dotted];
m12_631 -> m12_632  [key=0, style=solid, color=red];
m12_628 -> m12_629  [key=0, style=solid];
m12_628 -> n22  [key=2, style=dotted];
m12_629 -> m12_624  [key=0, style=bold, color=blue];
m12_632 -> m12_633  [key=0, style=solid, color=red];
m12_632 -> m12_619  [key=2, style=dotted, color=red];
m12_633 -> m12_631  [key=0, style=bold, color=blue];
m12_637 -> m12_638  [key=0, style=solid, color=red];
m12_637 -> m12_642  [key=1, style=dashed, color=red, label=SqlConnection];
m12_638 -> m12_639  [key=0, style=solid, color=red];
m12_638 -> m12_18  [key=2, style=dotted, color=red];
m12_638 -> m12_641  [key=1, style=dashed, color=red, label="lambda expression"];
m12_642 -> m12_643  [key=0, style=solid, color=red];
m12_642 -> m12_41  [key=2, style=dotted, color=red];
m12_642 -> m12_644  [key=1, style=dashed, color=red, label="lambda expression"];
m12_639 -> m12_640  [key=0, style=solid];
m12_639 -> n22  [key=2, style=dotted];
m12_641 -> m12_642  [key=0, style=solid, color=red];
m12_640 -> m12_637  [key=0, style=bold, color=blue];
m12_643 -> m12_641  [key=0, style=bold, color=blue];
m12_644 -> m12_645  [key=0, style=solid, color=red];
m12_645 -> m12_646  [key=0, style=solid, color=red];
m12_645 -> m12_647  [key=2, style=dotted, color=red];
m12_645 -> m12_648  [key=2, style=dotted, color=red];
m12_646 -> m12_644  [key=0, style=bold, color=blue];
m12_654 -> m12_655  [key=0, style=solid, color=red];
m12_654 -> m12_630  [key=2, style=dotted];
m12_653 -> m12_654  [key=0, style=solid];
m12_653 -> m12_655  [key=1, style=dashed, color=red, label=SqlConnection];
m12_653 -> m12_656  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_655 -> m12_656  [key=0, style=solid, color=red];
m12_655 -> m12_41  [key=2, style=dotted, color=red];
m12_655 -> m12_661  [key=1, style=dashed, color=red, label="lambda expression"];
m12_656 -> m12_657  [key=0, style=solid];
m12_656 -> m12_38  [key=2, style=dotted];
m12_656 -> m12_529  [key=2, style=dotted];
m12_656 -> m12_664  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_656 -> m12_667  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_656 -> m12_658  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_656 -> m12_659  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_661 -> m12_662  [key=0, style=solid, color=red];
m12_657 -> m12_658  [key=0, style=solid];
m12_657 -> m12_43  [key=2, style=dotted];
m12_657 -> m12_45  [key=2, style=dotted];
m12_664 -> m12_665  [key=0, style=solid];
m12_667 -> m12_668  [key=0, style=solid];
m12_658 -> m12_659  [key=0, style=solid];
m12_658 -> m12_43  [key=2, style=dotted];
m12_658 -> m12_45  [key=2, style=dotted];
m12_659 -> m12_660  [key=0, style=solid];
m12_659 -> m12_46  [key=2, style=dotted];
m12_660 -> m12_653  [key=0, style=bold, color=blue];
m12_662 -> m12_663  [key=0, style=solid, color=red];
m12_662 -> m12_647  [key=2, style=dotted, color=red];
m12_662 -> m12_648  [key=2, style=dotted, color=red];
m12_663 -> m12_661  [key=0, style=bold, color=blue];
m12_665 -> m12_666  [key=0, style=solid];
m12_666 -> m12_664  [key=0, style=bold, color=blue];
m12_668 -> m12_669  [key=0, style=solid];
m12_669 -> m12_667  [key=0, style=bold, color=blue];
m12_673 -> m12_674  [key=0, style=solid, color=red];
m12_673 -> m12_678  [key=1, style=dashed, color=red, label=SqlConnection];
m12_674 -> m12_675  [key=0, style=solid, color=red];
m12_674 -> m12_18  [key=2, style=dotted, color=red];
m12_674 -> m12_677  [key=1, style=dashed, color=red, label="lambda expression"];
m12_678 -> m12_679  [key=0, style=solid, color=red];
m12_678 -> m12_41  [key=2, style=dotted, color=red];
m12_678 -> m12_680  [key=1, style=dashed, color=red, label="lambda expression"];
m12_675 -> m12_676  [key=0, style=solid];
m12_675 -> n22  [key=2, style=dotted];
m12_677 -> m12_678  [key=0, style=solid, color=red];
m12_676 -> m12_673  [key=0, style=bold, color=blue];
m12_679 -> m12_677  [key=0, style=bold, color=blue];
m12_680 -> m12_681  [key=0, style=solid, color=red];
m12_681 -> m12_682  [key=0, style=solid, color=red];
m12_681 -> m12_683  [key=2, style=dotted, color=red];
m12_681 -> m12_684  [key=2, style=dotted, color=red];
m12_682 -> m12_680  [key=0, style=bold, color=blue];
m12_690 -> m12_691  [key=0, style=solid, color=red];
m12_690 -> m12_630  [key=2, style=dotted];
m12_689 -> m12_690  [key=0, style=solid];
m12_689 -> m12_691  [key=1, style=dashed, color=red, label=SqlConnection];
m12_689 -> m12_692  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_691 -> m12_692  [key=0, style=solid, color=red];
m12_691 -> m12_41  [key=2, style=dotted, color=red];
m12_691 -> m12_697  [key=1, style=dashed, color=red, label="lambda expression"];
m12_692 -> m12_693  [key=0, style=solid];
m12_692 -> m12_38  [key=2, style=dotted];
m12_692 -> m12_529  [key=2, style=dotted];
m12_692 -> m12_700  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_692 -> m12_703  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_692 -> m12_694  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_692 -> m12_695  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_697 -> m12_698  [key=0, style=solid, color=red];
m12_693 -> m12_694  [key=0, style=solid];
m12_693 -> m12_43  [key=2, style=dotted];
m12_693 -> m12_45  [key=2, style=dotted];
m12_700 -> m12_701  [key=0, style=solid];
m12_703 -> m12_704  [key=0, style=solid];
m12_694 -> m12_695  [key=0, style=solid];
m12_694 -> m12_43  [key=2, style=dotted];
m12_694 -> m12_45  [key=2, style=dotted];
m12_695 -> m12_696  [key=0, style=solid];
m12_695 -> m12_46  [key=2, style=dotted];
m12_696 -> m12_689  [key=0, style=bold, color=blue];
m12_698 -> m12_699  [key=0, style=solid, color=red];
m12_698 -> m12_647  [key=2, style=dotted, color=red];
m12_698 -> m12_684  [key=2, style=dotted, color=red];
m12_699 -> m12_697  [key=0, style=bold, color=blue];
m12_701 -> m12_702  [key=0, style=solid];
m12_702 -> m12_700  [key=0, style=bold, color=blue];
m12_704 -> m12_705  [key=0, style=solid];
m12_705 -> m12_703  [key=0, style=bold, color=blue];
m12_709 -> m12_710  [key=0, style=solid, color=red];
m12_709 -> m12_714  [key=1, style=dashed, color=red, label=SqlConnection];
m12_710 -> m12_711  [key=0, style=solid, color=red];
m12_710 -> m12_18  [key=2, style=dotted, color=red];
m12_710 -> m12_713  [key=1, style=dashed, color=red, label="lambda expression"];
m12_714 -> m12_715  [key=0, style=solid, color=red];
m12_714 -> m12_41  [key=2, style=dotted, color=red];
m12_714 -> m12_716  [key=1, style=dashed, color=red, label="lambda expression"];
m12_711 -> m12_712  [key=0, style=solid];
m12_711 -> n22  [key=2, style=dotted];
m12_713 -> m12_714  [key=0, style=solid, color=red];
m12_712 -> m12_709  [key=0, style=bold, color=blue];
m12_715 -> m12_713  [key=0, style=bold, color=blue];
m12_716 -> m12_717  [key=0, style=solid, color=red];
m12_717 -> m12_718  [key=0, style=solid, color=red];
m12_717 -> m12_683  [key=2, style=dotted, color=red];
m12_717 -> m12_719  [key=2, style=dotted, color=red];
m12_718 -> m12_716  [key=0, style=bold, color=blue];
m12_725 -> m12_726  [key=0, style=solid, color=red];
m12_725 -> m12_630  [key=2, style=dotted];
m12_724 -> m12_725  [key=0, style=solid];
m12_724 -> m12_726  [key=1, style=dashed, color=red, label=SqlConnection];
m12_724 -> m12_727  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_726 -> m12_727  [key=0, style=solid, color=red];
m12_726 -> m12_41  [key=2, style=dotted, color=red];
m12_726 -> m12_732  [key=1, style=dashed, color=red, label="lambda expression"];
m12_727 -> m12_728  [key=0, style=solid];
m12_727 -> m12_38  [key=2, style=dotted];
m12_727 -> m12_529  [key=2, style=dotted];
m12_727 -> m12_735  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_727 -> m12_738  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_727 -> m12_729  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_727 -> m12_730  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_732 -> m12_733  [key=0, style=solid, color=red];
m12_728 -> m12_729  [key=0, style=solid];
m12_728 -> m12_43  [key=2, style=dotted];
m12_728 -> m12_45  [key=2, style=dotted];
m12_735 -> m12_736  [key=0, style=solid];
m12_738 -> m12_739  [key=0, style=solid];
m12_729 -> m12_730  [key=0, style=solid];
m12_729 -> m12_43  [key=2, style=dotted];
m12_729 -> m12_45  [key=2, style=dotted];
m12_730 -> m12_731  [key=0, style=solid];
m12_730 -> m12_46  [key=2, style=dotted];
m12_731 -> m12_724  [key=0, style=bold, color=blue];
m12_733 -> m12_734  [key=0, style=solid, color=red];
m12_733 -> m12_647  [key=2, style=dotted, color=red];
m12_733 -> m12_719  [key=2, style=dotted, color=red];
m12_734 -> m12_732  [key=0, style=bold, color=blue];
m12_736 -> m12_737  [key=0, style=solid];
m12_737 -> m12_735  [key=0, style=bold, color=blue];
m12_739 -> m12_740  [key=0, style=solid];
m12_740 -> m12_738  [key=0, style=bold, color=blue];
m12_744 -> m12_745  [key=0, style=solid, color=red];
m12_744 -> m12_749  [key=1, style=dashed, color=red, label=SqlConnection];
m12_745 -> m12_746  [key=0, style=solid, color=red];
m12_745 -> m12_18  [key=2, style=dotted, color=red];
m12_745 -> m12_748  [key=1, style=dashed, color=red, label="lambda expression"];
m12_749 -> m12_750  [key=0, style=solid, color=red];
m12_749 -> m12_41  [key=2, style=dotted, color=red];
m12_749 -> m12_751  [key=1, style=dashed, color=red, label="lambda expression"];
m12_746 -> m12_747  [key=0, style=solid];
m12_746 -> n22  [key=2, style=dotted];
m12_748 -> m12_749  [key=0, style=solid, color=red];
m12_747 -> m12_744  [key=0, style=bold, color=blue];
m12_750 -> m12_748  [key=0, style=bold, color=blue];
m12_751 -> m12_752  [key=0, style=solid, color=red];
m12_752 -> m12_753  [key=0, style=solid, color=red];
m12_752 -> m12_754  [key=2, style=dotted, color=red];
m12_753 -> m12_751  [key=0, style=bold, color=blue];
m12_760 -> m12_761  [key=0, style=solid, color=red];
m12_760 -> m12_44  [key=2, style=dotted];
m12_760 -> m12_630  [key=2, style=dotted];
m12_759 -> m12_760  [key=0, style=solid];
m12_759 -> m12_761  [key=1, style=dashed, color=red, label=SqlConnection];
m12_759 -> m12_762  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_761 -> m12_762  [key=0, style=solid, color=red];
m12_761 -> m12_41  [key=2, style=dotted, color=red];
m12_761 -> m12_766  [key=1, style=dashed, color=red, label="lambda expression"];
m12_762 -> m12_763  [key=0, style=solid];
m12_762 -> m12_38  [key=2, style=dotted];
m12_762 -> m12_529  [key=2, style=dotted];
m12_762 -> m12_769  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_762 -> m12_772  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_762 -> m12_764  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_766 -> m12_767  [key=0, style=solid, color=red];
m12_763 -> m12_764  [key=0, style=solid];
m12_763 -> m12_46  [key=2, style=dotted];
m12_769 -> m12_770  [key=0, style=solid];
m12_772 -> m12_773  [key=0, style=solid];
m12_764 -> m12_765  [key=0, style=solid];
m12_764 -> m12_65  [key=2, style=dotted];
m12_765 -> m12_759  [key=0, style=bold, color=blue];
m12_767 -> m12_768  [key=0, style=solid, color=red];
m12_767 -> m12_754  [key=2, style=dotted, color=red];
m12_768 -> m12_766  [key=0, style=bold, color=blue];
m12_770 -> m12_771  [key=0, style=solid];
m12_771 -> m12_769  [key=0, style=bold, color=blue];
m12_773 -> m12_774  [key=0, style=solid];
m12_774 -> m12_772  [key=0, style=bold, color=blue];
m12_778 -> m12_779  [key=0, style=solid, color=red];
m12_778 -> m12_783  [key=1, style=dashed, color=red, label=SqlConnection];
m12_779 -> m12_780  [key=0, style=solid, color=red];
m12_779 -> m12_18  [key=2, style=dotted, color=red];
m12_779 -> m12_782  [key=1, style=dashed, color=red, label="lambda expression"];
m12_783 -> m12_784  [key=0, style=solid, color=red];
m12_783 -> m12_41  [key=2, style=dotted, color=red];
m12_783 -> m12_785  [key=1, style=dashed, color=red, label="lambda expression"];
m12_780 -> m12_781  [key=0, style=solid];
m12_780 -> n22  [key=2, style=dotted];
m12_782 -> m12_783  [key=0, style=solid, color=red];
m12_781 -> m12_778  [key=0, style=bold, color=blue];
m12_784 -> m12_782  [key=0, style=bold, color=blue];
m12_785 -> m12_786  [key=0, style=solid, color=red];
m12_786 -> m12_787  [key=0, style=solid, color=red];
m12_786 -> m12_788  [key=2, style=dotted, color=red];
m12_787 -> m12_785  [key=0, style=bold, color=blue];
m12_794 -> m12_795  [key=0, style=solid, color=red];
m12_794 -> m12_44  [key=2, style=dotted];
m12_794 -> m12_630  [key=2, style=dotted];
m12_793 -> m12_794  [key=0, style=solid];
m12_793 -> m12_795  [key=1, style=dashed, color=red, label=SqlConnection];
m12_793 -> m12_796  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_795 -> m12_796  [key=0, style=solid, color=red];
m12_795 -> m12_41  [key=2, style=dotted, color=red];
m12_795 -> m12_800  [key=1, style=dashed, color=red, label="lambda expression"];
m12_796 -> m12_797  [key=0, style=solid];
m12_796 -> m12_38  [key=2, style=dotted];
m12_796 -> m12_529  [key=2, style=dotted];
m12_796 -> m12_803  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_796 -> m12_806  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_796 -> m12_798  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_800 -> m12_801  [key=0, style=solid, color=red];
m12_797 -> m12_798  [key=0, style=solid];
m12_797 -> m12_46  [key=2, style=dotted];
m12_803 -> m12_804  [key=0, style=solid];
m12_806 -> m12_807  [key=0, style=solid];
m12_798 -> m12_799  [key=0, style=solid];
m12_798 -> m12_65  [key=2, style=dotted];
m12_799 -> m12_793  [key=0, style=bold, color=blue];
m12_801 -> m12_802  [key=0, style=solid, color=red];
m12_801 -> m12_788  [key=2, style=dotted, color=red];
m12_802 -> m12_800  [key=0, style=bold, color=blue];
m12_804 -> m12_805  [key=0, style=solid];
m12_805 -> m12_803  [key=0, style=bold, color=blue];
m12_807 -> m12_808  [key=0, style=solid];
m12_808 -> m12_806  [key=0, style=bold, color=blue];
m12_812 -> m12_813  [key=0, style=solid, color=red];
m12_812 -> m12_817  [key=1, style=dashed, color=red, label=SqlConnection];
m12_813 -> m12_814  [key=0, style=solid, color=red];
m12_813 -> m12_18  [key=2, style=dotted, color=red];
m12_813 -> m12_816  [key=1, style=dashed, color=red, label="lambda expression"];
m12_817 -> m12_818  [key=0, style=solid, color=red];
m12_817 -> m12_41  [key=2, style=dotted, color=red];
m12_817 -> m12_819  [key=1, style=dashed, color=red, label="lambda expression"];
m12_814 -> m12_815  [key=0, style=solid];
m12_814 -> n22  [key=2, style=dotted];
m12_816 -> m12_817  [key=0, style=solid, color=red];
m12_815 -> m12_812  [key=0, style=bold, color=blue];
m12_818 -> m12_816  [key=0, style=bold, color=blue];
m12_819 -> m12_820  [key=0, style=solid, color=red];
m12_820 -> m12_821  [key=0, style=solid, color=red];
m12_820 -> m12_822  [key=2, style=dotted, color=red];
m12_821 -> m12_819  [key=0, style=bold, color=blue];
m12_828 -> m12_829  [key=0, style=solid, color=red];
m12_828 -> m12_44  [key=2, style=dotted];
m12_828 -> m12_630  [key=2, style=dotted];
m12_827 -> m12_828  [key=0, style=solid];
m12_827 -> m12_829  [key=1, style=dashed, color=red, label=SqlConnection];
m12_827 -> m12_830  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_829 -> m12_830  [key=0, style=solid, color=red];
m12_829 -> m12_41  [key=2, style=dotted, color=red];
m12_829 -> m12_834  [key=1, style=dashed, color=red, label="lambda expression"];
m12_830 -> m12_831  [key=0, style=solid];
m12_830 -> m12_38  [key=2, style=dotted];
m12_830 -> m12_529  [key=2, style=dotted];
m12_830 -> m12_837  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_830 -> m12_840  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_830 -> m12_832  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_834 -> m12_835  [key=0, style=solid, color=red];
m12_831 -> m12_832  [key=0, style=solid];
m12_831 -> m12_46  [key=2, style=dotted];
m12_837 -> m12_838  [key=0, style=solid];
m12_840 -> m12_841  [key=0, style=solid];
m12_832 -> m12_833  [key=0, style=solid];
m12_832 -> m12_65  [key=2, style=dotted];
m12_833 -> m12_827  [key=0, style=bold, color=blue];
m12_835 -> m12_836  [key=0, style=solid, color=red];
m12_835 -> m12_822  [key=2, style=dotted, color=red];
m12_836 -> m12_834  [key=0, style=bold, color=blue];
m12_838 -> m12_839  [key=0, style=solid];
m12_839 -> m12_837  [key=0, style=bold, color=blue];
m12_841 -> m12_842  [key=0, style=solid];
m12_842 -> m12_840  [key=0, style=bold, color=blue];
m12_858 -> m12_859  [key=0, style=solid];
m12_859 -> m12_857  [key=0, style=bold, color=blue];
m12_374 -> m12_375  [key=0, style=solid, color=red];
m12_375 -> m12_376  [key=0, style=solid, color=red];
m12_375 -> m12_28  [key=2, style=dotted, color=red];
m12_375 -> m12_377  [key=1, style=dashed, color=red, label="lambda expression"];
m12_376 -> m12_374  [key=0, style=bold, color=blue];
m12_361 -> m12_362  [key=0, style=solid, color=red];
m12_362 -> m12_363  [key=0, style=solid, color=red];
m12_362 -> m12_28  [key=2, style=dotted, color=red];
m12_362 -> m12_364  [key=1, style=dashed, color=red, label="lambda expression"];
m12_363 -> m12_361  [key=0, style=bold, color=blue];
m12_595 -> m12_596  [key=0, style=solid, color=red];
m12_596 -> m12_597  [key=0, style=solid, color=red];
m12_596 -> m12_28  [key=2, style=dotted, color=red];
m12_596 -> m12_598  [key=1, style=dashed, color=red, label="lambda expression"];
m12_597 -> m12_595  [key=0, style=bold, color=blue];
m12_789 -> m12_790  [key=0, style=solid];
m12_790 -> m12_791  [key=0, style=solid, color=red];
m12_790 -> m12_794  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_790 -> m12_790  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_791 -> m12_792  [key=0, style=solid, color=red];
m12_791 -> m12_28  [key=2, style=dotted, color=red];
m12_791 -> m12_793  [key=1, style=dashed, color=red, label="lambda expression"];
m12_792 -> m12_789  [key=0, style=bold, color=blue];
m12_349 -> m12_350  [key=0, style=solid, color=red];
m12_350 -> m12_351  [key=0, style=solid, color=red];
m12_350 -> m12_28  [key=2, style=dotted, color=red];
m12_350 -> m12_352  [key=1, style=dashed, color=red, label="lambda expression"];
m12_351 -> m12_349  [key=0, style=bold, color=blue];
m12_706 -> m12_707  [key=0, style=solid, color=red];
m12_707 -> m12_708  [key=0, style=solid, color=red];
m12_707 -> m12_28  [key=2, style=dotted, color=red];
m12_707 -> m12_709  [key=1, style=dashed, color=red, label="lambda expression"];
m12_708 -> m12_706  [key=0, style=bold, color=blue];
m12_217 -> m12_218  [key=0, style=solid, color=red];
m12_218 -> m12_219  [key=0, style=solid, color=red];
m12_218 -> m12_28  [key=2, style=dotted, color=red];
m12_218 -> m12_220  [key=1, style=dashed, color=red, label="lambda expression"];
m12_219 -> m12_217  [key=0, style=bold, color=blue];
m12_481 -> m12_482  [key=0, style=solid, color=red];
m12_482 -> m12_483  [key=0, style=solid, color=red];
m12_482 -> m12_28  [key=2, style=dotted, color=red];
m12_482 -> m12_484  [key=1, style=dashed, color=red, label="lambda expression"];
m12_483 -> m12_481  [key=0, style=bold, color=blue];
m12_324 -> m12_325  [key=0, style=solid, color=red];
m12_325 -> m12_326  [key=0, style=solid, color=red];
m12_325 -> m12_28  [key=2, style=dotted, color=red];
m12_325 -> m12_327  [key=1, style=dashed, color=red, label="lambda expression"];
m12_326 -> m12_324  [key=0, style=bold, color=blue];
m12_298 -> m12_299  [key=0, style=solid, color=red];
m12_299 -> m12_300  [key=0, style=solid, color=red];
m12_299 -> m12_28  [key=2, style=dotted, color=red];
m12_299 -> m12_301  [key=1, style=dashed, color=red, label="lambda expression"];
m12_300 -> m12_298  [key=0, style=bold, color=blue];
m12_231 -> m12_232  [key=0, style=solid, color=red];
m12_232 -> m12_233  [key=0, style=solid, color=red];
m12_232 -> m12_28  [key=2, style=dotted, color=red];
m12_232 -> m12_234  [key=1, style=dashed, color=red, label="lambda expression"];
m12_233 -> m12_231  [key=0, style=bold, color=blue];
m12_493 -> m12_494  [key=0, style=solid, color=red];
m12_494 -> m12_495  [key=0, style=solid, color=red];
m12_494 -> m12_28  [key=2, style=dotted, color=red];
m12_494 -> m12_496  [key=1, style=dashed, color=red, label="lambda expression"];
m12_495 -> m12_493  [key=0, style=bold, color=blue];
m12_720 -> m12_721  [key=0, style=solid];
m12_721 -> m12_722  [key=0, style=solid, color=red];
m12_721 -> m12_725  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_721 -> m12_721  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_722 -> m12_723  [key=0, style=solid, color=red];
m12_722 -> m12_28  [key=2, style=dotted, color=red];
m12_722 -> m12_724  [key=1, style=dashed, color=red, label="lambda expression"];
m12_723 -> m12_720  [key=0, style=bold, color=blue];
m12_755 -> m12_756  [key=0, style=solid];
m12_756 -> m12_757  [key=0, style=solid, color=red];
m12_756 -> m12_760  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_756 -> m12_756  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_757 -> m12_758  [key=0, style=solid, color=red];
m12_757 -> m12_28  [key=2, style=dotted, color=red];
m12_757 -> m12_759  [key=1, style=dashed, color=red, label="lambda expression"];
m12_758 -> m12_755  [key=0, style=bold, color=blue];
m12_41 -> m12_848  [key=0, style=solid, color=red];
m12_41 -> m12_851  [key=1, style=dashed, color=darkseagreen4, label="System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>"];
m12_848 -> m12_849  [key=0, style=solid, color=red];
m12_848 -> m12_854  [key=2, style=dotted, color=red];
m12_848 -> m12_850  [key=1, style=dashed, color=red, label=storage];
m12_851 -> m12_852  [key=0, style=solid];
m12_851 -> m12_847  [key=2, style=dotted];
m12_849 -> m12_850  [key=0, style=solid, color=red];
m12_849 -> m12_6  [key=2, style=dotted];
m12_849 -> m12_8  [key=2, style=dotted];
m12_849 -> m12_857  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_850 -> m12_851  [key=0, style=solid, color=red];
m12_850 -> m12_855  [key=2, style=dotted, color=red];
m12_850 -> m12_852  [key=1, style=dashed, color=red, label=transaction];
m12_852 -> m12_853  [key=0, style=solid];
m12_852 -> m12_856  [key=2, style=dotted];
m12_853 -> m12_41  [key=0, style=bold, color=blue];
m12_173 -> m12_174  [key=0, style=solid, color=red];
m12_174 -> m12_175  [key=0, style=solid, color=red];
m12_174 -> m12_28  [key=2, style=dotted, color=red];
m12_174 -> m12_176  [key=1, style=dashed, color=red, label="lambda expression"];
m12_175 -> m12_173  [key=0, style=bold, color=blue];
m12_153 -> m12_843  [key=0, style=solid];
m12_153 -> m12_844  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection>"];
m12_153 -> m12_150  [key=3, color=red, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m12_843 -> m12_844  [key=0, style=solid];
m12_843 -> m12_846  [key=2, style=dotted];
m12_844 -> m12_845  [key=0, style=solid];
m12_844 -> m12_847  [key=2, style=dotted];
m12_845 -> m12_153  [key=0, style=bold, color=blue];
m12_649 -> m12_650  [key=0, style=solid];
m12_650 -> m12_651  [key=0, style=solid, color=red];
m12_650 -> m12_654  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_650 -> m12_650  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_651 -> m12_652  [key=0, style=solid, color=red];
m12_651 -> m12_28  [key=2, style=dotted, color=red];
m12_651 -> m12_653  [key=1, style=dashed, color=red, label="lambda expression"];
m12_652 -> m12_649  [key=0, style=bold, color=blue];
m12_457 -> m12_458  [key=0, style=solid, color=red];
m12_458 -> m12_459  [key=0, style=solid, color=red];
m12_458 -> m12_28  [key=2, style=dotted, color=red];
m12_458 -> m12_460  [key=1, style=dashed, color=red, label="lambda expression"];
m12_459 -> m12_457  [key=0, style=bold, color=blue];
m12_205 -> m12_206  [key=0, style=solid, color=red];
m12_206 -> m12_207  [key=0, style=solid, color=red];
m12_206 -> m12_28  [key=2, style=dotted, color=red];
m12_206 -> m12_208  [key=1, style=dashed, color=red, label="lambda expression"];
m12_207 -> m12_205  [key=0, style=bold, color=blue];
m12_741 -> m12_742  [key=0, style=solid, color=red];
m12_742 -> m12_743  [key=0, style=solid, color=red];
m12_742 -> m12_28  [key=2, style=dotted, color=red];
m12_742 -> m12_744  [key=1, style=dashed, color=red, label="lambda expression"];
m12_743 -> m12_741  [key=0, style=bold, color=blue];
m12_443 -> m12_444  [key=0, style=solid, color=red];
m12_444 -> m12_445  [key=0, style=solid, color=red];
m12_444 -> m12_28  [key=2, style=dotted, color=red];
m12_444 -> m12_446  [key=1, style=dashed, color=red, label="lambda expression"];
m12_445 -> m12_443  [key=0, style=bold, color=blue];
m12_424 -> m12_425  [key=0, style=solid, color=red];
m12_425 -> m12_426  [key=0, style=solid, color=red];
m12_425 -> m12_28  [key=2, style=dotted, color=red];
m12_425 -> m12_427  [key=1, style=dashed, color=red, label="lambda expression"];
m12_426 -> m12_424  [key=0, style=bold, color=blue];
m12_248 -> m12_249  [key=0, style=solid, color=red];
m12_249 -> m12_250  [key=0, style=solid, color=red];
m12_249 -> m12_28  [key=2, style=dotted, color=red];
m12_249 -> m12_251  [key=1, style=dashed, color=red, label="lambda expression"];
m12_250 -> m12_248  [key=0, style=bold, color=blue];
m12_274 -> m12_275  [key=0, style=solid, color=red];
m12_275 -> m12_276  [key=0, style=solid, color=red];
m12_275 -> m12_28  [key=2, style=dotted, color=red];
m12_275 -> m12_277  [key=1, style=dashed, color=red, label="lambda expression"];
m12_276 -> m12_274  [key=0, style=bold, color=blue];
m12_70 -> m12_71  [key=0, style=solid];
m12_71 -> m12_72  [key=0, style=solid, color=red];
m12_71 -> m12_75  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_71 -> m12_76  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_71 -> m12_25  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_72 -> m12_73  [key=0, style=solid, color=red];
m12_72 -> m12_28  [key=2, style=dotted, color=red];
m12_72 -> m12_74  [key=1, style=dashed, color=red, label="lambda expression"];
m12_73 -> m12_70  [key=0, style=bold, color=blue];
m12_52 -> m12_53  [key=0, style=solid];
m12_53 -> m12_54  [key=0, style=solid, color=red];
m12_53 -> m12_57  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_53 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_53 -> m12_53  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_54 -> m12_55  [key=0, style=solid, color=red];
m12_54 -> m12_28  [key=2, style=dotted, color=red];
m12_54 -> m12_56  [key=1, style=dashed, color=red, label="lambda expression"];
m12_55 -> m12_52  [key=0, style=bold, color=blue];
m12_14 -> m12_15  [key=0, style=solid, color=red];
m12_15 -> m12_16  [key=0, style=solid, color=red];
m12_15 -> m12_18  [key=2, style=dotted, color=red];
m12_15 -> m12_20  [key=1, style=dashed, color=red, label="lambda expression"];
m12_16 -> m12_17  [key=0, style=solid];
m12_16 -> n22  [key=2, style=dotted];
m12_17 -> m12_14  [key=0, style=bold, color=blue];
m12_520 -> m12_521  [key=0, style=solid, color=red];
m12_521 -> m12_522  [key=0, style=solid, color=red];
m12_521 -> m12_28  [key=2, style=dotted, color=red];
m12_521 -> m12_523  [key=1, style=dashed, color=red, label="lambda expression"];
m12_522 -> m12_520  [key=0, style=bold, color=blue];
m12_567 -> m12_568  [key=0, style=solid, color=red];
m12_568 -> m12_569  [key=0, style=solid, color=red];
m12_568 -> m12_28  [key=2, style=dotted, color=red];
m12_568 -> m12_570  [key=1, style=dashed, color=red, label="lambda expression"];
m12_569 -> m12_567  [key=0, style=bold, color=blue];
m12_337 -> m12_338  [key=0, style=solid, color=red];
m12_338 -> m12_339  [key=0, style=solid, color=red];
m12_338 -> m12_28  [key=2, style=dotted, color=red];
m12_338 -> m12_340  [key=1, style=dashed, color=red, label="lambda expression"];
m12_339 -> m12_337  [key=0, style=bold, color=blue];
m12_634 -> m12_635  [key=0, style=solid, color=red];
m12_635 -> m12_636  [key=0, style=solid, color=red];
m12_635 -> m12_28  [key=2, style=dotted, color=red];
m12_635 -> m12_637  [key=1, style=dashed, color=red, label="lambda expression"];
m12_636 -> m12_634  [key=0, style=bold, color=blue];
m12_24 -> m12_25  [key=0, style=solid];
m12_25 -> m12_26  [key=0, style=solid, color=red];
m12_25 -> m12_30  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_25 -> m12_31  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_25 -> m12_25  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_26 -> m12_27  [key=0, style=solid, color=red];
m12_26 -> m12_28  [key=2, style=dotted, color=red];
m12_26 -> m12_29  [key=1, style=dashed, color=red, label="lambda expression"];
m12_27 -> m12_24  [key=0, style=bold, color=blue];
m12_539 -> m12_540  [key=0, style=solid, color=red];
m12_540 -> m12_541  [key=0, style=solid, color=red];
m12_540 -> m12_28  [key=2, style=dotted, color=red];
m12_540 -> m12_542  [key=1, style=dashed, color=red, label="lambda expression"];
m12_541 -> m12_539  [key=0, style=bold, color=blue];
m12_860 -> m12_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_26  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_32  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_54  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_59  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_60  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_62  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_72  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_81  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_82  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_85  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_113  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_121  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_122  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_149  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_150  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_158  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_174  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_177  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_188  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_191  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_206  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_209  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_218  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_221  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_232  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_235  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_249  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_252  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_261  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_264  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_275  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_278  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_287  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_290  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_299  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_302  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_313  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_316  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_325  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_328  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_338  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_341  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_350  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_353  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_362  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_365  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_375  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_378  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_387  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_390  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_401  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_404  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_413  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_416  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_425  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_428  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_444  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_447  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_458  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_461  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_470  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_473  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_482  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_485  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_494  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_497  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_501  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_508  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_511  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_515  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_521  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_524  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_540  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_543  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_546  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_553  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_556  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_557  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_568  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_571  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_575  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_583  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_586  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_590  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_596  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_600  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_608  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_611  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_614  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_622  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_626  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_635  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_638  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_642  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_651  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_655  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_671  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_674  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_678  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_687  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_691  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_707  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_710  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_714  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_722  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_726  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_742  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_745  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_749  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_757  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_761  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_776  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_779  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_783  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_791  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_795  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_810  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_813  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_817  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_825  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_829  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_849  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_861 -> m12_30  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_861 -> m12_31  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_862 -> m12_48  [key=1, style=dashed, color=red, label=jobId];
m12_863 -> m12_57  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_863 -> m12_58  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_864 -> m12_67  [key=1, style=dashed, color=red, label=jobId];
m12_865 -> m12_75  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_865 -> m12_76  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_866 -> m12_108  [key=1, style=dashed, color=red, label=jobId];
m12_867 -> m12_108  [key=1, style=dashed, color=red, label=state];
m12_868 -> m12_116  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_869 -> m12_142  [key=1, style=dashed, color=red, label=jobId];
m12_870 -> m12_142  [key=1, style=dashed, color=red, label=state];
m12_871 -> m12_159  [key=1, style=dashed, color=darkseagreen4, label=correctJobQueue];
m12_872 -> m12_501  [key=1, style=dashed, color=red, label=SqlConnection];
m12_873 -> m12_515  [key=1, style=dashed, color=red, label=SqlConnection];
m12_874 -> m12_546  [key=1, style=dashed, color=red, label=SqlConnection];
m12_875 -> m12_575  [key=1, style=dashed, color=red, label=SqlConnection];
m12_876 -> m12_590  [key=1, style=dashed, color=red, label=SqlConnection];
m12_877 -> m12_605  [key=1, style=dashed, color=red, label=items];
m12_878 -> m12_614  [key=1, style=dashed, color=red, label=SqlConnection];
m12_879 -> m12_625  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_880 -> m12_642  [key=1, style=dashed, color=red, label=SqlConnection];
m12_881 -> m12_654  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_882 -> m12_678  [key=1, style=dashed, color=red, label=SqlConnection];
m12_883 -> m12_690  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_884 -> m12_714  [key=1, style=dashed, color=red, label=SqlConnection];
m12_885 -> m12_725  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_886 -> m12_749  [key=1, style=dashed, color=red, label=SqlConnection];
m12_887 -> m12_760  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_888 -> m12_783  [key=1, style=dashed, color=red, label=SqlConnection];
m12_889 -> m12_794  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_890 -> m12_817  [key=1, style=dashed, color=red, label=SqlConnection];
m12_891 -> m12_828  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
}
