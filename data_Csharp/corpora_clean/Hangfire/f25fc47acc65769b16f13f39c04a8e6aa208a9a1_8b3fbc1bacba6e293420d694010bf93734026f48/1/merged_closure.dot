digraph  {
n4 [label="Hangfire.Server.ServerWatchdogOptions", span=""];
n0 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", label="Entry Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="23-23"];
n1 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", label="ServerTimeout = ServerWatchdog.DefaultServerTimeout", span="25-25"];
n2 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", label="CheckInterval = ServerWatchdog.DefaultCheckInterval", span="26-26"];
n3 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", label="Exit Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="23-23"];
m0_25 [cluster="Unk.ErrorFormat", file="BackgroundJobServer.cs", label="Entry Unk.ErrorFormat", span=""];
m0_4 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label="Entry HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", span="35-35"];
m0_5 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label="var failedState = context.CandidateState as FailedState", span="37-37"];
m0_8 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label="var retryAttempt = context.GetJobParameter<int>(''RetryCount'') + 1", span="44-44"];
m0_11 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label="context.SetJobParameter(''RetryCount'', retryAttempt)", span="50-50"];
m0_12 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label="context.CandidateState = new ScheduledState(delay)\r\n                {\r\n                    Reason = String.Format(''Retry attempt {0} of {1}'', retryAttempt, Attempts)\r\n                }", span="54-57"];
m0_14 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label="Logger.WarnFormat(\r\n                        ''Failed to process the job '{0}': an exception occurred. Retry attempt {1} of {2} will be performed in {3}.'',\r\n                        failedState.Exception,\r\n                        context.JobId,\r\n                        retryAttempt,\r\n                        Attempts,\r\n                        delay)", span="61-67"];
m0_16 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label="Logger.ErrorFormat(\r\n                        ''Failed to process the job '{0}': an exception occurred.'',\r\n                        failedState.Exception,\r\n                        context.JobId)", span="74-77"];
m0_6 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label="failedState == null", span="38-38"];
m0_7 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label="return;", span="41-41"];
m0_9 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label="retryAttempt <= Attempts", span="46-46"];
m0_10 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label="var delay = TimeSpan.FromSeconds(SecondsToDelay(retryAttempt))", span="48-48"];
m0_15 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label=LogEvents, span="72-72"];
m0_13 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label=LogEvents, span="59-59"];
m0_17 [cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs", label="Exit HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", span="35-35"];
m0_23 [cluster="string.Format(string, object, object)", file="BackgroundJobServer.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m0_0 [cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="BackgroundJobServer.cs", label="Entry HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", span="14-14"];
m0_1 [cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="BackgroundJobServer.cs", label="Attempts = DefaultRetryAttempts", span="16-16"];
m0_2 [cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="BackgroundJobServer.cs", label="LogEvents = true", span="17-17"];
m0_3 [cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="BackgroundJobServer.cs", label="Exit HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", span="14-14"];
m0_22 [cluster="HangFire.States.ScheduledState.ScheduledState(System.TimeSpan)", file="BackgroundJobServer.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(System.TimeSpan)", span="27-27"];
m0_18 [cluster="HangFire.States.ElectStateContext.GetJobParameter<T>(string)", file="BackgroundJobServer.cs", label="Entry HangFire.States.ElectStateContext.GetJobParameter<T>(string)", span="54-54"];
m0_20 [cluster="System.TimeSpan.FromSeconds(double)", file="BackgroundJobServer.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m0_29 [cluster="System.Random.Random()", file="BackgroundJobServer.cs", label="Entry System.Random.Random()", span="0-0"];
m0_19 [cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="BackgroundJobServer.cs", label="Entry HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", span="83-83"];
m0_26 [cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="BackgroundJobServer.cs", label="var random = new Random()", span="85-85"];
m0_28 [cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="BackgroundJobServer.cs", label="Exit HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", span="83-83"];
m0_24 [cluster="Unk.WarnFormat", file="BackgroundJobServer.cs", label="Entry Unk.WarnFormat", span=""];
m0_31 [cluster="System.Random.Next(int)", file="BackgroundJobServer.cs", label="Entry System.Random.Next(int)", span="0-0"];
m0_32 [cluster="System.Math.Round(double)", file="BackgroundJobServer.cs", label="Entry System.Math.Round(double)", span="0-0"];
m0_30 [cluster="System.Math.Pow(double, double)", file="BackgroundJobServer.cs", label="Entry System.Math.Pow(double, double)", span="0-0"];
m0_21 [cluster="HangFire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="BackgroundJobServer.cs", label="Entry HangFire.States.ElectStateContext.SetJobParameter<T>(string, T)", span="49-49"];
m0_33 [file="BackgroundJobServer.cs", label="HangFire.AutomaticRetryAttribute", span=""];
m1_20 [cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="DashboardContext.cs", label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55"];
m1_21 [cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="DashboardContext.cs", label="return FromTimestamp(long.Parse(value));", span="57-57"];
m1_22 [cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="DashboardContext.cs", label="Exit HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55"];
m1_8 [cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="DashboardContext.cs", label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="39-39"];
m1_19 [cluster="long.ToString()", file="DashboardContext.cs", label="Entry long.ToString()", span="0-0"];
m1_23 [cluster="long.Parse(string)", file="DashboardContext.cs", label="Entry long.Parse(string)", span="0-0"];
m1_24 [cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="DashboardContext.cs", label="Entry HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="60-60"];
m1_27 [cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="DashboardContext.cs", label="return FromStringTimestamp(value);", span="67-67"];
m1_25 [cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="DashboardContext.cs", label="String.IsNullOrEmpty(value)", span="62-62"];
m1_26 [cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="DashboardContext.cs", label="return null;", span="64-64"];
m1_28 [cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="DashboardContext.cs", label="Exit HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="60-60"];
m1_9 [cluster="Unk.nameof", color=green, community=0, file="DashboardContext.cs", label="Entry Unk.nameof", prediction=0, span=""];
m1_10 [cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", color=green, community=0, file="DashboardContext.cs", label="Hangfire.Dashboard.DashboardContext", prediction=1, span=""];
m1_11 [cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="DashboardContext.cs", label="Exit HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="39-39"];
m1_29 [cluster="string.IsNullOrEmpty(string)", file="DashboardContext.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m1_15 [cluster="System.DateTime.AddSeconds(double)", file="DashboardContext.cs", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
m1_0 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="Entry Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", span="24-24"];
m1_1 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="storage == null", span="26-26"];
m1_2 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="throw new ArgumentNullException(nameof(storage));", span="26-26"];
m1_3 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="options == null", span="27-27"];
m1_4 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="throw new ArgumentNullException(nameof(options));", span="27-27"];
m1_5 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="Storage = storage", span="29-29"];
m1_6 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="Options = options", span="30-30"];
m1_7 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs", label="Exit Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", span="24-24"];
m1_12 [cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="DashboardContext.cs", label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="45-45"];
m1_13 [cluster="HangFire.Common.JobHelper.FromTimestamp(long)", color=green, community=0, file="DashboardContext.cs", label="return Epoch.AddSeconds(value);", prediction=2, span="47-47"];
m1_14 [cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="DashboardContext.cs", label="Exit HangFire.Common.JobHelper.FromTimestamp(long)", span="45-45"];
m1_16 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="DashboardContext.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m1_17 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="DashboardContext.cs", label="return ToTimestamp(value).ToString();", span="52-52"];
m1_18 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="DashboardContext.cs", label="Exit HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m2_73 [cluster="int.ToString(System.IFormatProvider)", file="DashboardRoutes.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m2_132 [cluster="Unk.FromNullableStringTimestamp", file="DashboardRoutes.cs", label="Entry Unk.FromNullableStringTimestamp", span=""];
m2_20 [cluster="HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", file="DashboardRoutes.cs", label="Entry HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", span="17-17"];
m2_51 [cluster="Unk.SetRangeInHash", file="DashboardRoutes.cs", label="Entry Unk.SetRangeInHash", span=""];
m2_26 [cluster="System.TimeSpan.FromMinutes(double)", file="DashboardRoutes.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m2_12 [cluster="HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", file="DashboardRoutes.cs", label="Entry HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", span="29-29"];
m2_13 [cluster="HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", file="DashboardRoutes.cs", label="return new RedisWriteOnlyTransaction(_redis.CreateTransaction());", span="31-31"];
m2_14 [cluster="HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", file="DashboardRoutes.cs", label="Exit HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", span="29-29"];
m2_6 [cluster="HangFire.Redis.DataTypes.RedisJob.RedisJob(IRedisClient)", file="DashboardRoutes.cs", label="Entry HangFire.Redis.DataTypes.RedisJob.RedisJob(IRedisClient)", span="12-12"];
m2_131 [cluster="Unk.FromStringTimestamp", file="DashboardRoutes.cs", label="Entry Unk.FromStringTimestamp", span=""];
m2_98 [cluster="Unk.SetEntryInHash", file="DashboardRoutes.cs", label="Entry Unk.SetEntryInHash", span=""];
m2_68 [cluster="Unk.AddItemToSet", file="DashboardRoutes.cs", label="Entry Unk.AddItemToSet", span=""];
m2_25 [cluster="string.Format(string, object)", file="DashboardRoutes.cs", label="Entry string.Format(string, object)", span="0-0"];
m2_148 [cluster="Unk.RemoveEntryFromHash", file="DashboardRoutes.cs", label="Entry Unk.RemoveEntryFromHash", span=""];
m2_94 [cluster="Unk.RemoveEntry", file="DashboardRoutes.cs", label="Entry Unk.RemoveEntry", span=""];
m2_28 [cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs", label="Entry HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="50-50"];
m2_36 [cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    parameters))", span="66-68"];
m2_37 [cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn))", span="70-72"];
m2_35 [cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs", label="var transaction = _redis.CreateTransaction()", span="64-64"];
m2_29 [cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs", label="var jobId = Guid.NewGuid().ToString()", span="56-56"];
m2_38 [cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs", label="transaction.Commit()", span="75-75"];
m2_34 [cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs", label="parameters.Add(''CreatedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="62-62"];
m2_30 [cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs", label="parameters.Add(''Type'', invocationData.Type)", span="58-58"];
m2_31 [cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs", label="parameters.Add(''Method'', invocationData.Method)", span="59-59"];
m2_32 [cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs", label="parameters.Add(''ParameterTypes'', invocationData.ParameterTypes)", span="60-60"];
m2_33 [cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs", label="parameters.Add(''Arguments'', JobHelper.ToJson(arguments))", span="61-61"];
m2_39 [cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs", label="return jobId;", span="78-78"];
m2_40 [cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs", label="Exit HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="50-50"];
m2_95 [cluster="HangFire.Redis.RedisStorageConnection.Heartbeat(string)", file="DashboardRoutes.cs", label="Entry HangFire.Redis.RedisStorageConnection.Heartbeat(string)", span="129-129"];
m2_96 [cluster="HangFire.Redis.RedisStorageConnection.Heartbeat(string)", file="DashboardRoutes.cs", label="_redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="131-134"];
m2_97 [cluster="HangFire.Redis.RedisStorageConnection.Heartbeat(string)", file="DashboardRoutes.cs", label="Exit HangFire.Redis.RedisStorageConnection.Heartbeat(string)", span="129-129"];
m2_7 [cluster="HangFire.Redis.DataTypes.RedisSet.RedisSet(IRedisClient)", file="DashboardRoutes.cs", label="Entry HangFire.Redis.DataTypes.RedisSet.RedisSet(IRedisClient)", span="11-11"];
m2_21 [cluster="System.TimeSpan.FromSeconds(double)", file="DashboardRoutes.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m2_55 [cluster="Unk.ExpireEntryIn", file="DashboardRoutes.cs", label="Entry Unk.ExpireEntryIn", span=""];
m2_0 [cluster="HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", file="DashboardRoutes.cs", label="Entry HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", span="15-15"];
m2_1 [cluster="HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", file="DashboardRoutes.cs", label="_redis = redis", span="17-17"];
m2_2 [cluster="HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", file="DashboardRoutes.cs", label="Jobs = new RedisJob(redis)", span="19-19"];
m2_3 [cluster="HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", file="DashboardRoutes.cs", label="Sets = new RedisSet(redis)", span="20-20"];
m2_4 [cluster="HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", file="DashboardRoutes.cs", label="Storage = storage", span="21-21"];
m2_5 [cluster="HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", file="DashboardRoutes.cs", label="Exit HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", span="15-15"];
m2_134 [cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs", label="Entry HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", span="180-180"];
m2_136 [cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs", label="transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    jobId,\r\n                    -1))", span="187-190"];
m2_137 [cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs", label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Fetched''))", span="192-194"];
m2_138 [cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs", label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Checked''))", span="195-197"];
m2_135 [cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs", label="var transaction = redis.CreateTransaction()", span="185-185"];
m2_139 [cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs", label="transaction.Commit()", span="199-199"];
m2_140 [cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs", label="Exit HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", span="180-180"];
m2_118 [cluster="Unk.Flush", file="DashboardRoutes.cs", label="Entry Unk.Flush", span=""];
m2_42 [cluster="System.Guid.ToString()", file="DashboardRoutes.cs", label="Entry System.Guid.ToString()", span="0-0"];
m2_15 [cluster="RedisWriteOnlyTransaction.cstr", file="DashboardRoutes.cs", label="Entry RedisWriteOnlyTransaction.cstr", span=""];
m2_133 [cluster="Unk.Add", file="DashboardRoutes.cs", label="Entry Unk.Add", span=""];
m2_121 [cluster="System.DateTime.Add(System.TimeSpan)", file="DashboardRoutes.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m2_99 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="Entry HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="137-137"];
m2_106 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", color=green, community=0, file="DashboardRoutes.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat''),\r\n                        x => heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1]))))", prediction=3, span="150-158"];
m2_101 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="var heartbeats = new Dictionary<string, Tuple<DateTime, DateTime?>>()", span="140-140"];
m2_103 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="var pipeline = _redis.CreatePipeline()", span="144-144"];
m2_105 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="var name = serverName", span="148-148"];
m2_104 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label=serverNames, span="146-146"];
m2_100 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="var serverNames = _redis.GetAllItemsFromSet(RedisStorage.Prefix + ''servers'')", span="139-139"];
m2_102 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="var utcNow = DateTime.UtcNow", span="142-142"];
m2_109 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label=heartbeats, span="165-165"];
m2_107 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="pipeline.Flush()", span="161-161"];
m2_111 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="utcNow > maxTime.Add(timeOut)", span="170-170"];
m2_108 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="var removedServerCount = 0", span="164-164"];
m2_113 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="removedServerCount++", span="173-173"];
m2_110 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="var maxTime = new DateTime(\r\n                    Math.Max(heartbeat.Value.Item1.Ticks, (heartbeat.Value.Item2 ?? DateTime.MinValue).Ticks))", span="167-168"];
m2_114 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="return removedServerCount;", span="177-177"];
m2_112 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="RemoveServer(_redis, heartbeat.Key)", span="172-172"];
m2_115 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs", label="Exit HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="137-137"];
m2_72 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="DashboardRoutes.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m2_130 [cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="DashboardRoutes.cs", label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0"];
m2_56 [cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs", label="Entry HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="81-81"];
m2_58 [cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs", label="transaction.QueueCommand(x => x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId))", span="85-86"];
m2_59 [cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', workerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        }))", span="88-94"];
m2_62 [cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs", label="transaction.QueueCommand(x => x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1))", span="99-101"];
m2_57 [cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs", label="var transaction = _redis.CreateTransaction()", span="83-83"];
m2_60 [cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs", label=queues, span="96-96"];
m2_61 [cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs", label="var queue1 = queue", span="98-98"];
m2_63 [cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs", label="transaction.Commit()", span="104-104"];
m2_64 [cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs", label="Exit HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="81-81"];
m2_77 [cluster="Unk.AddItemToList", file="DashboardRoutes.cs", label="Entry Unk.AddItemToList", span=""];
m2_11 [cluster="Unk.Dispose", file="DashboardRoutes.cs", label="Entry Unk.Dispose", span=""];
m2_119 [cluster="System.DateTime.DateTime(long)", file="DashboardRoutes.cs", label="Entry System.DateTime.DateTime(long)", span="0-0"];
m2_90 [cluster="Unk.RemoveItemFromSet", file="DashboardRoutes.cs", label="Entry Unk.RemoveItemFromSet", span=""];
m2_120 [cluster="System.Math.Max(long, long)", file="DashboardRoutes.cs", label="Entry System.Math.Max(long, long)", span="0-0"];
m2_8 [cluster="HangFire.Redis.RedisStorageConnection.Dispose()", file="DashboardRoutes.cs", label="Entry HangFire.Redis.RedisStorageConnection.Dispose()", span="24-24"];
m2_9 [cluster="HangFire.Redis.RedisStorageConnection.Dispose()", file="DashboardRoutes.cs", label="_redis.Dispose()", span="26-26"];
m2_10 [cluster="HangFire.Redis.RedisStorageConnection.Dispose()", file="DashboardRoutes.cs", label="Exit HangFire.Redis.RedisStorageConnection.Dispose()", span="24-24"];
m2_150 [cluster="lambda expression", file="DashboardRoutes.cs", label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Checked'')", span="195-197"];
m2_122 [cluster="lambda expression", file="DashboardRoutes.cs", label="Entry lambda expression", span="151-153"];
m2_127 [cluster="lambda expression", file="DashboardRoutes.cs", label="Entry lambda expression", span="154-158"];
m2_128 [cluster="lambda expression", color=green, community=0, file="DashboardRoutes.cs", label="heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1])))", prediction=3, span="154-158"];
m2_129 [cluster="lambda expression", file="DashboardRoutes.cs", label="Exit lambda expression", span="154-158"];
m2_123 [cluster="lambda expression", file="DashboardRoutes.cs", label="x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat'')", span="151-153"];
m2_124 [cluster="lambda expression", file="DashboardRoutes.cs", label="Exit lambda expression", span="151-153"];
m2_70 [cluster="lambda expression", file="DashboardRoutes.cs", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', workerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        })", span="88-94"];
m2_48 [cluster="lambda expression", file="DashboardRoutes.cs", label="Entry lambda expression", span="66-68"];
m2_52 [cluster="lambda expression", file="DashboardRoutes.cs", label="Entry lambda expression", span="70-72"];
m2_65 [cluster="lambda expression", file="DashboardRoutes.cs", label="Entry lambda expression", span="85-86"];
m2_69 [cluster="lambda expression", file="DashboardRoutes.cs", label="Entry lambda expression", span="88-94"];
m2_74 [cluster="lambda expression", file="DashboardRoutes.cs", label="Entry lambda expression", span="99-101"];
m2_87 [cluster="lambda expression", file="DashboardRoutes.cs", label="Entry lambda expression", span="117-119"];
m2_91 [cluster="lambda expression", file="DashboardRoutes.cs", label="Entry lambda expression", span="121-123"];
m2_141 [cluster="lambda expression", file="DashboardRoutes.cs", label="Entry lambda expression", span="187-190"];
m2_145 [cluster="lambda expression", file="DashboardRoutes.cs", label="Entry lambda expression", span="192-194"];
m2_149 [cluster="lambda expression", file="DashboardRoutes.cs", label="Entry lambda expression", span="195-197"];
m2_71 [cluster="lambda expression", file="DashboardRoutes.cs", label="Exit lambda expression", span="88-94"];
m2_49 [cluster="lambda expression", file="DashboardRoutes.cs", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    parameters)", span="66-68"];
m2_53 [cluster="lambda expression", file="DashboardRoutes.cs", label="x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn)", span="70-72"];
m2_50 [cluster="lambda expression", file="DashboardRoutes.cs", label="Exit lambda expression", span="66-68"];
m2_54 [cluster="lambda expression", file="DashboardRoutes.cs", label="Exit lambda expression", span="70-72"];
m2_66 [cluster="lambda expression", file="DashboardRoutes.cs", label="x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId)", span="85-86"];
m2_75 [cluster="lambda expression", file="DashboardRoutes.cs", label="x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1)", span="99-101"];
m2_67 [cluster="lambda expression", file="DashboardRoutes.cs", label="Exit lambda expression", span="85-86"];
m2_76 [cluster="lambda expression", file="DashboardRoutes.cs", label="Exit lambda expression", span="99-101"];
m2_88 [cluster="lambda expression", file="DashboardRoutes.cs", label="x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId)", span="117-119"];
m2_92 [cluster="lambda expression", file="DashboardRoutes.cs", label="x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId))", span="121-123"];
m2_89 [cluster="lambda expression", file="DashboardRoutes.cs", label="Exit lambda expression", span="117-119"];
m2_93 [cluster="lambda expression", file="DashboardRoutes.cs", label="Exit lambda expression", span="121-123"];
m2_142 [cluster="lambda expression", file="DashboardRoutes.cs", label="x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    jobId,\r\n                    -1)", span="187-190"];
m2_146 [cluster="lambda expression", file="DashboardRoutes.cs", label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Fetched'')", span="192-194"];
m2_143 [cluster="lambda expression", file="DashboardRoutes.cs", label="Exit lambda expression", span="187-190"];
m2_147 [cluster="lambda expression", file="DashboardRoutes.cs", label="Exit lambda expression", span="192-194"];
m2_151 [cluster="lambda expression", file="DashboardRoutes.cs", label="Exit lambda expression", span="195-197"];
m2_45 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="DashboardRoutes.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
m2_78 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(string)", file="DashboardRoutes.cs", label="Entry HangFire.Redis.RedisStorageConnection.RemoveServer(string)", span="108-108"];
m2_79 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(string)", file="DashboardRoutes.cs", label="RemoveServer(_redis, serverId)", span="110-110"];
m2_80 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(string)", file="DashboardRoutes.cs", label="Exit HangFire.Redis.RedisStorageConnection.RemoveServer(string)", span="108-108"];
m2_144 [cluster="Unk.RemoveItemFromList", file="DashboardRoutes.cs", label="Entry Unk.RemoveItemFromList", span=""];
m2_117 [cluster="Unk.CreatePipeline", file="DashboardRoutes.cs", label="Entry Unk.CreatePipeline", span=""];
m2_41 [cluster="System.Guid.NewGuid()", file="DashboardRoutes.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m2_44 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="DashboardRoutes.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m2_47 [cluster="Unk.Commit", file="DashboardRoutes.cs", label="Entry Unk.Commit", span=""];
m2_116 [cluster="Unk.GetAllItemsFromSet", file="DashboardRoutes.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m2_81 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="DashboardRoutes.cs", label="Entry HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", span="113-113"];
m2_83 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="DashboardRoutes.cs", label="transaction.QueueCommand(x => x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId))", span="117-119"];
m2_84 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="DashboardRoutes.cs", label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId)))", span="121-123"];
m2_82 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="DashboardRoutes.cs", label="var transaction = redis.CreateTransaction()", span="115-115"];
m2_85 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="DashboardRoutes.cs", label="transaction.Commit()", span="125-125"];
m2_86 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="DashboardRoutes.cs", label="Exit HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", span="113-113"];
m2_126 [cluster="Unk.GetValuesFromHash", file="DashboardRoutes.cs", label="Entry Unk.GetValuesFromHash", span=""];
m2_125 [cluster="Unk.Format", file="DashboardRoutes.cs", label="Entry Unk.Format", span=""];
m2_46 [cluster="Unk.QueueCommand", file="DashboardRoutes.cs", label="Entry Unk.QueueCommand", span=""];
m2_43 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="DashboardRoutes.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m2_17 [cluster="HangFire.Redis.RedisStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs", label="Entry HangFire.Redis.RedisStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="34-34"];
m2_18 [cluster="HangFire.Redis.RedisStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs", label="return new RedisJobFetcher(_redis, queueNames, TimeSpan.FromSeconds(1));", span="36-36"];
m2_19 [cluster="HangFire.Redis.RedisStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs", label="Exit HangFire.Redis.RedisStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="34-34"];
m2_22 [cluster="HangFire.Redis.RedisStorageConnection.AcquireJobLock(string)", file="DashboardRoutes.cs", label="Entry HangFire.Redis.RedisStorageConnection.AcquireJobLock(string)", span="39-39"];
m2_23 [cluster="HangFire.Redis.RedisStorageConnection.AcquireJobLock(string)", file="DashboardRoutes.cs", label="return _redis.AcquireLock(\r\n                RedisStorage.Prefix + String.Format(''job:{0}:state-lock'', jobId),\r\n                TimeSpan.FromMinutes(1));", span="41-43"];
m2_24 [cluster="HangFire.Redis.RedisStorageConnection.AcquireJobLock(string)", file="DashboardRoutes.cs", label="Exit HangFire.Redis.RedisStorageConnection.AcquireJobLock(string)", span="39-39"];
m2_27 [cluster="Unk.AcquireLock", file="DashboardRoutes.cs", label="Entry Unk.AcquireLock", span=""];
m2_16 [cluster="Unk.CreateTransaction", file="DashboardRoutes.cs", label="Entry Unk.CreateTransaction", span=""];
m2_160 [file="DashboardRoutes.cs", label=name, span=""];
m2_161 [file="DashboardRoutes.cs", label=heartbeats, span=""];
m2_152 [file="DashboardRoutes.cs", label="HangFire.Redis.RedisStorageConnection", span=""];
m2_156 [file="DashboardRoutes.cs", label=string, span=""];
m2_157 [file="DashboardRoutes.cs", label=int, span=""];
m2_153 [file="DashboardRoutes.cs", label="System.Collections.Generic.IDictionary<string, string>", span=""];
m2_154 [file="DashboardRoutes.cs", label=jobId, span=""];
m2_155 [file="DashboardRoutes.cs", label="System.TimeSpan", span=""];
m2_158 [file="DashboardRoutes.cs", label=queue1, span=""];
m2_159 [file="DashboardRoutes.cs", label=string, span=""];
m2_162 [file="DashboardRoutes.cs", label=string, span=""];
m2_163 [file="DashboardRoutes.cs", label=string, span=""];
m3_6 [cluster="HangFire.Server.WorkerPool.WorkerPool(int, string)", file="HangfireApplicationBuilderExtensions.cs", label="Entry HangFire.Server.WorkerPool.WorkerPool(int, string)", span="16-16"];
m3_0 [cluster="MvcSample.HangFireConfig.Start()", file="HangfireApplicationBuilderExtensions.cs", label="Entry MvcSample.HangFireConfig.Start()", span="17-17"];
m3_1 [cluster="MvcSample.HangFireConfig.Start()", file="HangfireApplicationBuilderExtensions.cs", label="RedisFactory.Db = 3", span="21-21"];
m3_2 [cluster="MvcSample.HangFireConfig.Start()", file="HangfireApplicationBuilderExtensions.cs", label="_server = new AspNetBackgroundJobServer(\r\n                new WorkerPool(Environment.ProcessorCount, ''default''))\r\n            {\r\n                MachineName = Environment.MachineName\r\n            }", span="23-27"];
m3_3 [cluster="MvcSample.HangFireConfig.Start()", file="HangfireApplicationBuilderExtensions.cs", label="GlobalJobFilters.Filters.Add(new PreserveCultureFilter())", span="29-29"];
m3_4 [cluster="MvcSample.HangFireConfig.Start()", file="HangfireApplicationBuilderExtensions.cs", label="Exit MvcSample.HangFireConfig.Start()", span="17-17"];
m3_8 [cluster="HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", file="HangfireApplicationBuilderExtensions.cs", label="Entry HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", span="17-17"];
m3_9 [cluster="MvcSample.HangFireConfig.Stop()", file="HangfireApplicationBuilderExtensions.cs", label="Entry MvcSample.HangFireConfig.Stop()", span="34-34"];
m3_10 [cluster="MvcSample.HangFireConfig.Stop()", file="HangfireApplicationBuilderExtensions.cs", label="_server.Stop()", span="36-36"];
m3_11 [cluster="MvcSample.HangFireConfig.Stop()", file="HangfireApplicationBuilderExtensions.cs", label="Exit MvcSample.HangFireConfig.Stop()", span="34-34"];
m3_7 [cluster="HangFire.PreserveCultureFilter.PreserveCultureFilter()", file="HangfireApplicationBuilderExtensions.cs", label="Entry HangFire.PreserveCultureFilter.PreserveCultureFilter()", span="8-8"];
m3_5 [cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(params HangFire.Server.WorkerPool[])", file="HangfireApplicationBuilderExtensions.cs", label="Entry HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(params HangFire.Server.WorkerPool[])", span="11-11"];
m3_12 [cluster="HangFire.Web.AspNetBackgroundJobServer.Stop()", file="HangfireApplicationBuilderExtensions.cs", label="Entry HangFire.Web.AspNetBackgroundJobServer.Stop()", span="30-30"];
m5_0 [cluster="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.ConstantExpressionFingerprint(System.Linq.Expressions.ExpressionType, System.Type)", file="Job.cs", label="Entry HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.ConstantExpressionFingerprint(System.Linq.Expressions.ExpressionType, System.Type)", span="20-20"];
m5_1 [cluster="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.ConstantExpressionFingerprint(System.Linq.Expressions.ExpressionType, System.Type)", file="Job.cs", label="Exit HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.ConstantExpressionFingerprint(System.Linq.Expressions.ExpressionType, System.Type)", span="20-20"];
m5_2 [cluster="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.Equals(object)", file="Job.cs", label="Entry HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.Equals(object)", span="27-27"];
m5_3 [cluster="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.Equals(object)", file="Job.cs", label="ConstantExpressionFingerprint other = obj as ConstantExpressionFingerprint", span="29-29"];
m5_4 [cluster="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.Equals(object)", file="Job.cs", label="return (other != null)\r\n                   && this.Equals(other);", span="30-31"];
m5_5 [cluster="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.Equals(object)", file="Job.cs", label="Exit HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.Equals(object)", span="27-27"];
m5_6 [cluster="HangFire.Common.ExpressionUtil.ExpressionFingerprint.Equals(HangFire.Common.ExpressionUtil.ExpressionFingerprint)", file="Job.cs", label="Entry HangFire.Common.ExpressionUtil.ExpressionFingerprint.Equals(HangFire.Common.ExpressionUtil.ExpressionFingerprint)", span="30-30"];
m5_7 [file="Job.cs", label="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint", span=""];
m8_9 [cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", file="RouteCollectionExtensions.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="45-45"];
m8_5 [cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", file="RouteCollectionExtensions.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="46-46"];
m8_6 [cluster="HangFire.Redis.SucceededStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs", label="Entry HangFire.Redis.SucceededStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="30-30"];
m8_7 [cluster="HangFire.Redis.SucceededStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs", label="transaction.RemoveFromList(''succeeded'', context.JobId)", span="33-33"];
m8_8 [cluster="HangFire.Redis.SucceededStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs", label="Exit HangFire.Redis.SucceededStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="30-30"];
m8_0 [cluster="HangFire.Redis.SucceededStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs", label="Entry HangFire.Redis.SucceededStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="23-23"];
m8_1 [cluster="HangFire.Redis.SucceededStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs", label="transaction.InsertToList(''succeeded'', context.JobId)", span="26-26"];
m8_2 [cluster="HangFire.Redis.SucceededStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs", label="transaction.TrimList(''succeeded'', 0, 99)", span="27-27"];
m8_3 [cluster="HangFire.Redis.SucceededStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs", label="Exit HangFire.Redis.SucceededStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="23-23"];
m8_4 [cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", file="RouteCollectionExtensions.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="44-44"];
m9_629 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_CanCreateFieldsWithNullValues(bool)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_CanCreateFieldsWithNullValues(bool)", span="886-886"];
m9_630 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_CanCreateFieldsWithNullValues(bool)", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                });\r\n\r\n                var result = sql.Query(\r\n                        ''select * from HangFire.Hash where [Key] = @key'',\r\n                        new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(null, result[''Key1'']);\r\n            }, useBatching)", span="888-901"];
m9_631 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_CanCreateFieldsWithNullValues(bool)", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_CanCreateFieldsWithNullValues(bool)", span="886-886"];
m9_427 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255"];
m9_699 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", span="992-992"];
m9_700 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetRangeFromSet(null, 0, 1));\r\n            })", span="994-997"];
m9_701 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", span="992-992"];
m9_202 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="45-45"];
m9_698 [cluster="System.Collections.Generic.List<T>.List()", file="SqlServerConnectionFacts.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m9_95 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", span="118-118"];
m9_96 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs", label="var releaseLock = new ManualResetEventSlim(false)", span="120-120"];
m9_97 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs", label="var lockAcquired = new ManualResetEventSlim(false)", span="121-121"];
m9_98 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs", label="var thread = new Thread(\r\n                () => UseConnection(connection1 =>\r\n                {\r\n                    using (connection1.AcquireDistributedLock(''exclusive'', TimeSpan.FromSeconds(5)))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                }))", span="123-131"];
m9_102 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs", label="releaseLock.Set()", span="147-147"];
m9_100 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs", label="lockAcquired.Wait()", span="134-134"];
m9_99 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs", label="thread.Start()", span="132-132"];
m9_103 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs", label="thread.Join()", span="148-148"];
m9_101 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection2 =>\r\n            {\r\n                Assert.Throws<DistributedLockTimeoutException>(\r\n                    () =>\r\n                    {\r\n                        using (connection2.AcquireDistributedLock(''exclusive'', TimeSpan.FromSeconds(5)))\r\n                        {\r\n                        }\r\n                    });\r\n            })", span="136-145"];
m9_104 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", span="118-118"];
m9_465 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="315-315"];
m9_36 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="65-65"];
m9_887 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", span="1307-1307"];
m9_888 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [Value])\r\nvalues (@key, @field, @value)''", span="1309-1311"];
m9_889 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'', value = ''1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'', value = ''2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetValueFromHash(''hash-1'', ''field-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(''1'', result);\r\n            })", span="1313-1328"];
m9_890 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", span="1307-1307"];
m9_542 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="760-760"];
m9_543 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="762-763"];
m9_544 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="760-760"];
m9_107 [cluster="System.Threading.Thread.Start()", file="SqlServerConnectionFacts.cs", label="Entry System.Threading.Thread.Start()", span="0-0"];
m9_524 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="353-353"];
m9_428 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="608-608"];
m9_429 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="610-611"];
m9_430 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="608-608"];
m9_816 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", span="1193-1193"];
m9_817 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetListCount(''my-list'');\r\n                Assert.Equal(0, result);\r\n            })", span="1195-1199"];
m9_818 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", span="1193-1193"];
m9_744 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", span="1071-1071"];
m9_745 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.AggregatedCounter ([Key], [Value])\r\nvalues (@key, @value)''", span="1073-1075"];
m9_746 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 12 },\r\n                    new { key = ''counter-2'', value = 15 }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetCounter(''counter-1'');\r\n\r\n                Assert.Equal(12, result);\r\n            })", span="1077-1090"];
m9_747 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", span="1071-1071"];
m9_109 [cluster="System.Threading.ManualResetEventSlim.Set()", file="SqlServerConnectionFacts.cs", label="Entry System.Threading.ManualResetEventSlim.Set()", span="0-0"];
m9_941 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", span="1401-1401"];
m9_942 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], Value)\r\nvalues (@key, @value)''", span="1403-1405"];
m9_943 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromList(''list-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(new [] { ''3'', ''1'' }, result);\r\n            })", span="1407-1422"];
m9_944 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", span="1401-1401"];
m9_652 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="299-299"];
m9_335 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="456-456"];
m9_336 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="458-464"];
m9_337 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="456-456"];
m9_407 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="572-572"];
m9_408 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="574-581"];
m9_409 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="583-592"];
m9_410 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="572-572"];
m9_986 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="SqlServerConnectionFacts.cs", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
m9_368 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="515-515"];
m9_369 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="517-520"];
m9_370 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="522-534"];
m9_371 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="515-515"];
m9_200 [cluster="Unk.ToString", file="SqlServerConnectionFacts.cs", label="Entry Unk.ToString", span=""];
m9_125 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_Dispose_ReleasesExclusiveApplicationLock()", span="152-152"];
m9_126 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var distributedLock = connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5));\r\n                distributedLock.Dispose();\r\n\r\n                var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single();\r\n\r\n                Assert.Equal(''NoLock'', lockMode);\r\n            })", span="154-163"];
m9_127 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_Dispose_ReleasesExclusiveApplicationLock()", span="152-152"];
m9_934 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1391-1391"];
m9_935 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromList(''my-list'');\r\n                Assert.Empty(result);\r\n            })", span="1393-1397"];
m9_936 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1391-1391"];
m9_994 [cluster="SqlServerConnection.cstr", file="SqlServerConnectionFacts.cs", label="Entry SqlServerConnection.cstr", span=""];
m9_273 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="329-329"];
m9_274 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(\r\n                connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null)))", span="331-333"];
m9_275 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="329-329"];
m9_960 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", span="1435-1435"];
m9_961 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetSetTtl(''my-set'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1437-1441"];
m9_962 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", span="1435-1435"];
m9_514 [cluster="Unk.NotEqual", file="SqlServerConnectionFacts.cs", label="Entry Unk.NotEqual", span=""];
m9_906 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="502-502"];
m9_85 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_AcquiresExclusiveApplicationLock_OnSession()", span="103-103"];
m9_86 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                using (connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5)))\r\n                {\r\n                    var lockMode = sql.Query<string>(\r\n                        ''select applock_mode('public', 'HangFire:hello', 'session')'').Single();\r\n\r\n                    Assert.Equal(''Exclusive'', lockMode);\r\n                }\r\n            })", span="105-114"];
m9_87 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_AcquiresExclusiveApplicationLock_OnSession()", span="103-103"];
m9_796 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", span="1158-1158"];
m9_797 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="1160-1162"];
m9_798 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetHashTtl(''hash-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1164-1179"];
m9_799 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", span="1158-1158"];
m9_345 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="468-468"];
m9_346 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="470-473"];
m9_347 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="475-487"];
m9_348 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="468-468"];
m9_417 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="596-596"];
m9_418 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="598-604"];
m9_419 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="596-596"];
m9_869 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="460-460"];
m9_494 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="703-703"];
m9_495 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="705-706"];
m9_496 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="703-703"];
m9_849 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", span="1248-1248"];
m9_850 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="1250-1252"];
m9_851 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''list-2'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetListTtl(''list-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1254-1269"];
m9_852 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", span="1248-1248"];
m9_453 [cluster="Unk.Execute", file="SqlServerConnectionFacts.cs", label="Entry Unk.Execute", span=""];
m9_303 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", span="384-384"];
m9_304 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues ('', '', '', getutcdate());\r\ndeclare @JobId int;\r\nset @JobId = scope_identity();\r\ninsert into HangFire.State (JobId, Name, CreatedAt)\r\nvalues (@JobId, 'old-state', getutcdate());\r\ninsert into HangFire.State (JobId, Name, Reason, Data, CreatedAt)\r\nvalues (@JobId, @name, @reason, @data, getutcdate());\r\ndeclare @StateId int;\r\nset @StateId = scope_identity();\r\nupdate HangFire.Job set StateId = @StateId;\r\nselect @JobId as Id;''", span="386-398"];
m9_305 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var data = new Dictionary<string, string>\r\n                {\r\n                    { ''key'', ''Value'' }\r\n                };\r\n\r\n                var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id;\r\n\r\n                var result = connection.GetStateData(jobId.ToString());\r\n                Assert.NotNull(result);\r\n\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="400-415"];
m9_306 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", span="384-384"];
m9_735 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", span="1046-1046"];
m9_736 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Counter ([Key], [Value])\r\nvalues (@key, @value)''", span="1048-1050"];
m9_737 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 1 },\r\n                    new { key = ''counter-2'', value = 1 },\r\n                    new { key = ''counter-1'', value = 1 }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetCounter(''counter-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="1052-1067"];
m9_738 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", span="1046-1046"];
m9_323 [cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", span="31-31"];
m9_215 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CanCreateParametersWithNullValues(bool)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CanCreateParametersWithNullValues(bool)", span="258-258"];
m9_216 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CanCreateParametersWithNullValues(bool)", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var createdAt = new DateTime(2012, 12, 12);\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', null } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1));\r\n\r\n                var parameters = sql.Query(\r\n                        ''select * from HangFire.JobParameter where JobId = @id'',\r\n                        new { id = jobId })\r\n                    .ToDictionary(x => (string)x.Name, x => (string)x.Value);\r\n\r\n                Assert.Equal(null, parameters[''Key1'']);\r\n            }, useBatching)", span="260-275"];
m9_217 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CanCreateParametersWithNullValues(bool)", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CanCreateParametersWithNullValues(bool)", span="258-258"];
m9_134 [cluster="System.IDisposable.Dispose()", file="SqlServerConnectionFacts.cs", label="Entry System.IDisposable.Dispose()", span="0-0"];
m9_924 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", span="1381-1381"];
m9_925 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetAllItemsFromList(null));\r\n            })", span="1383-1387"];
m9_926 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", span="1381-1381"];
m9_551 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="366-366"];
m9_106 [cluster="System.Threading.Thread.Thread(System.Threading.ThreadStart)", file="SqlServerConnectionFacts.cs", label="Entry System.Threading.Thread.Thread(System.Threading.ThreadStart)", span="0-0"];
m9_6 [cluster="Mock<IPersistentJobQueue>.cstr", file="SqlServerConnectionFacts.cs", label="Entry Mock<IPersistentJobQueue>.cstr", span=""];
m9_466 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="660-660"];
m9_467 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="662-668"];
m9_468 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="660-660"];
m9_841 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="485-485"];
m9_762 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="435-435"];
m9_269 [cluster="int.ToString()", file="SqlServerConnectionFacts.cs", label="Entry int.ToString()", span="0-0"];
m9_390 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="550-550"];
m9_391 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="552-558"];
m9_392 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="550-550"];
m9_267 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="70-70"];
m9_314 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="419-419"];
m9_315 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="421-424"];
m9_316 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result.LoadException);\r\n            })", span="426-440"];
m9_317 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="419-419"];
m9_727 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="420-420"];
m9_967 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", span="1445-1445"];
m9_968 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="1447-1449"];
m9_969 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) },\r\n                    new { key = ''set-2'', value = ''2'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetSetTtl(''set-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1451-1466"];
m9_970 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", span="1445-1445"];
m9_203 [cluster="System.DateTime.AddDays(double)", file="SqlServerConnectionFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m9_503 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="340-340"];
m9_7 [cluster="Mock<IPersistentJobQueueProvider>.cstr", file="SqlServerConnectionFacts.cs", label="Entry Mock<IPersistentJobQueueProvider>.cstr", span=""];
m9_201 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
m9_643 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="905-905"];
m9_644 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null)))", span="907-908"];
m9_645 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="905-905"];
m9_574 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", span="798-798"];
m9_575 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(0, result.Count);\r\n            })", span="800-806"];
m9_576 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", span="798-798"];
m9_283 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", span="337-337"];
m9_284 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetStateData(''1'');\r\n                Assert.Null(result);\r\n            })", span="339-343"];
m9_285 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", span="337-337"];
m9_653 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", span="912-912"];
m9_654 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n                Assert.Null(result);\r\n            })", span="914-918"];
m9_655 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", span="912-912"];
m9_504 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="710-710"];
m9_505 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues \r\n('Server1', '', getutcdate()),\r\n('Server2', '', getutcdate())''", span="712-716"];
m9_506 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="718-726"];
m9_507 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="710-710"];
m9_15 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="34-34"];
m9_16 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(null))", span="36-37"];
m9_17 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="39-39"];
m9_18 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="34-34"];
m9_105 [cluster="System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", file="SqlServerConnectionFacts.cs", label="Entry System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", span="0-0"];
m9_660 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", span="922-922"];
m9_661 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [Value])\r\nvalues (@key, @field, @value)''", span="924-926"];
m9_662 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-hash'', field = ''Key1'', value = ''Value1'' },\r\n                    new { key = ''some-hash'', field = ''Key2'', value = ''Value2'' },\r\n                    new { key = ''another-hash'', field = ''Key3'', value = ''Value3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n\r\n                // Assert\r\n                Assert.NotNull(result);\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="928-946"];
m9_663 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", span="922-922"];
m9_859 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", span="1273-1273"];
m9_860 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(null, ''name''));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1275-1281"];
m9_861 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", span="1273-1273"];
m9_789 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", span="1148-1148"];
m9_790 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetHashTtl(''my-hash'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1150-1154"];
m9_791 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", span="1148-1148"];
m9_870 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", span="1285-1285"];
m9_871 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(''key'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="1287-1293"];
m9_872 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", span="1285-1285"];
m9_984 [cluster="SqlServerStorage.cstr", file="SqlServerConnectionFacts.cs", label="Entry SqlServerStorage.cstr", span=""];
m9_41 [cluster="Unk.Dequeue", file="SqlServerConnectionFacts.cs", label="Entry Unk.Dequeue", span=""];
m9_996 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1486-1486"];
m9_11 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="27-27"];
m9_12 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="x.GetJobQueue()", span="27-27"];
m9_13 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="27-27"];
m9_21 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="37-37"];
m9_22 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="new SqlServerConnection(null)", span="37-37"];
m9_23 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="37-37"];
m9_29 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="45-53"];
m9_30 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var token = new CancellationToken()", span="47-47"];
m9_32 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.FetchNextJob(queues, token)", span="50-50"];
m9_31 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var queues = new[] { ''default'' }", span="48-48"];
m9_33 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="_queue.Verify(x => x.Dequeue(queues, token))", span="52-52"];
m9_39 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="x.Dequeue(queues, token)", span="52-52"];
m9_34 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="45-53"];
m9_38 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="52-52"];
m9_40 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="52-52"];
m9_46 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="59-67"];
m9_47 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var token = new CancellationToken()", span="61-61"];
m9_50 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<InvalidOperationException>(\r\n                    () => connection.FetchNextJob(new[] { ''critical'', ''default'' }, token))", span="65-66"];
m9_54 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.FetchNextJob(new[] { ''critical'', ''default'' }, token)", span="66-66"];
m9_48 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var anotherProvider = new Mock<IPersistentJobQueueProvider>()", span="62-62"];
m9_49 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="_providers.Add(anotherProvider.Object, new [] { ''critical'' })", span="63-63"];
m9_51 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="59-67"];
m9_53 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="66-66"];
m9_55 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="66-66"];
m9_59 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="73-77"];
m9_60 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var transaction = connection.CreateWriteTransaction()", span="75-75"];
m9_61 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(transaction)", span="76-76"];
m9_62 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="73-77"];
m9_68 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="83-87"];
m9_69 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var @lock = connection.AcquireDistributedLock(''1'', TimeSpan.FromSeconds(1))", span="85-85"];
m9_70 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(@lock)", span="86-86"];
m9_71 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="83-87"];
m9_77 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="93-99"];
m9_78 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => connection.AcquireDistributedLock('''', TimeSpan.FromMinutes(5)))", span="95-96"];
m9_82 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AcquireDistributedLock('''', TimeSpan.FromMinutes(5))", span="96-96"];
m9_79 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''resource'', exception.ParamName)", span="98-98"];
m9_81 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="96-96"];
m9_80 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="93-99"];
m9_83 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="96-96"];
m9_89 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="105-114"];
m9_90 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5))", span="107-107"];
m9_91 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var lockMode = sql.Query<string>(\r\n                        ''select applock_mode('public', 'HangFire:hello', 'session')'').Single()", span="109-110"];
m9_92 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Exclusive'', lockMode)", span="112-112"];
m9_93 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="105-114"];
m9_112 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="UseConnection(connection1 =>\r\n                {\r\n                    using (connection1.AcquireDistributedLock(''exclusive'', TimeSpan.FromSeconds(5)))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                })", span="124-131"];
m9_117 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="releaseLock.Wait()", span="129-129"];
m9_116 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="lockAcquired.Set()", span="128-128"];
m9_119 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="136-145"];
m9_111 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="124-131"];
m9_113 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="124-131"];
m9_114 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="124-131"];
m9_115 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection1.AcquireDistributedLock(''exclusive'', TimeSpan.FromSeconds(5))", span="126-126"];
m9_118 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="124-131"];
m9_120 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<DistributedLockTimeoutException>(\r\n                    () =>\r\n                    {\r\n                        using (connection2.AcquireDistributedLock(''exclusive'', TimeSpan.FromSeconds(5)))\r\n                        {\r\n                        }\r\n                    })", span="138-144"];
m9_123 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection2.AcquireDistributedLock(''exclusive'', TimeSpan.FromSeconds(5))", span="141-141"];
m9_121 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="136-145"];
m9_122 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="139-144"];
m9_124 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="139-144"];
m9_128 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="154-163"];
m9_129 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var distributedLock = connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5))", span="156-156"];
m9_131 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single()", span="159-160"];
m9_130 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="distributedLock.Dispose()", span="157-157"];
m9_132 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''NoLock'', lockMode)", span="162-162"];
m9_133 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="154-163"];
m9_138 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="169-176"];
m9_139 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5))", span="171-171"];
m9_140 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5))", span="172-172"];
m9_141 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(true)", span="174-174"];
m9_142 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="169-176"];
m9_147 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="182-192"];
m9_148 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero))", span="184-189"];
m9_152 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero)", span="185-189"];
m9_149 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''job'', exception.ParamName)", span="191-191"];
m9_151 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="185-189"];
m9_150 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="182-192"];
m9_153 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="185-189"];
m9_159 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="198-208"];
m9_160 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero))", span="200-205"];
m9_164 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero)", span="201-205"];
m9_161 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''parameters'', exception.ParamName)", span="207-207"];
m9_163 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="201-205"];
m9_162 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="198-208"];
m9_165 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="201-205"];
m9_167 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="202-202"];
m9_168 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="SampleMethod(''hello'')", span="202-202"];
m9_169 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="202-202"];
m9_174 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="216-252"];
m9_175 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var createdAt = new DateTime(2012, 12, 12)", span="218-218"];
m9_176 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1))", span="219-223"];
m9_179 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="228-228"];
m9_192 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="245-248"];
m9_181 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(createdAt, sqlJob.CreatedAt)", span="230-230"];
m9_190 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.ExpireAt)", span="242-242"];
m9_191 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(sqlJob.ExpireAt < createdAt.AddDays(1).AddMinutes(1))", span="243-243"];
m9_177 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(jobId)", span="225-225"];
m9_206 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="220-220"];
m9_178 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotEmpty(jobId)", span="226-226"];
m9_180 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="229-229"];
m9_182 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(null, (int?) sqlJob.StateId)", span="231-231"];
m9_183 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(null, (string) sqlJob.StateName)", span="232-232"];
m9_184 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="234-234"];
m9_185 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="invocationData.Arguments = sqlJob.Arguments", span="235-235"];
m9_186 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = invocationData.Deserialize()", span="237-237"];
m9_187 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(typeof(SqlServerConnectionFacts), job.Type)", span="238-238"];
m9_188 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="239-239"];
m9_189 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Hello'', job.Args[0])", span="240-240"];
m9_193 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value1'', parameters[''Key1''])", span="250-250"];
m9_209 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="248-248"];
m9_212 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="248-248"];
m9_194 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value2'', parameters[''Key2''])", span="251-251"];
m9_195 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="216-252"];
m9_207 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="SampleMethod(''Hello'')", span="220-220"];
m9_208 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="220-220"];
m9_210 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string) x.Name", span="248-248"];
m9_211 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="248-248"];
m9_213 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string) x.Value", span="248-248"];
m9_214 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="248-248"];
m9_218 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="260-275"];
m9_219 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var createdAt = new DateTime(2012, 12, 12)", span="262-262"];
m9_220 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', null } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1))", span="263-267"];
m9_221 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var parameters = sql.Query(\r\n                        ''select * from HangFire.JobParameter where JobId = @id'',\r\n                        new { id = jobId })\r\n                    .ToDictionary(x => (string)x.Name, x => (string)x.Value)", span="269-272"];
m9_224 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="264-264"];
m9_222 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(null, parameters[''Key1''])", span="274-274"];
m9_227 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="272-272"];
m9_230 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="272-272"];
m9_223 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="260-275"];
m9_225 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="SampleMethod(''Hello'')", span="264-264"];
m9_226 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="264-264"];
m9_228 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string)x.Name", span="272-272"];
m9_229 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="272-272"];
m9_231 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string)x.Value", span="272-272"];
m9_232 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="272-272"];
m9_236 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="281-282"];
m9_237 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="281-282"];
m9_240 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetJobData(null)", span="282-282"];
m9_238 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="281-282"];
m9_239 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="282-282"];
m9_241 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="282-282"];
m9_246 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="288-292"];
m9_247 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetJobData(''1'')", span="290-290"];
m9_248 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result)", span="291-291"];
m9_249 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="288-292"];
m9_257 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="307-314"];
m9_255 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="303-325"];
m9_256 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="305-305"];
m9_258 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="316-316"];
m9_270 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="305-305"];
m9_259 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result)", span="318-318"];
m9_260 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result.Job)", span="319-319"];
m9_261 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Succeeded'', result.State)", span="320-320"];
m9_262 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Arguments'', result.Job.Args[0])", span="321-321"];
m9_263 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result.LoadException)", span="322-322"];
m9_264 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < result.CreatedAt)", span="323-323"];
m9_265 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result.CreatedAt < DateTime.UtcNow.AddMinutes(1))", span="324-324"];
m9_266 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="303-325"];
m9_271 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="SampleMethod(''wrong'')", span="305-305"];
m9_272 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="305-305"];
m9_276 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="332-333"];
m9_277 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null))", span="332-333"];
m9_280 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetStateData(null)", span="333-333"];
m9_278 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="332-333"];
m9_279 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="333-333"];
m9_281 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="333-333"];
m9_286 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="339-343"];
m9_287 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetStateData(''1'')", span="341-341"];
m9_288 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result)", span="342-342"];
m9_289 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="339-343"];
m9_296 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id", span="370-372"];
m9_294 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="363-380"];
m9_295 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var data = new Dictionary<string, string>\r\n                {\r\n                    { ''Key'', ''Value'' }\r\n                }", span="365-368"];
m9_297 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetStateData(jobId.ToString())", span="374-374"];
m9_298 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result)", span="375-375"];
m9_299 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Name'', result.Name)", span="377-377"];
m9_300 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Reason'', result.Reason)", span="378-378"];
m9_301 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value'', result.Data[''Key''])", span="379-379"];
m9_302 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="363-380"];
m9_309 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id", span="407-409"];
m9_307 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="400-415"];
m9_308 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var data = new Dictionary<string, string>\r\n                {\r\n                    { ''key'', ''Value'' }\r\n                }", span="402-405"];
m9_310 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetStateData(jobId.ToString())", span="411-411"];
m9_311 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result)", span="412-412"];
m9_312 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value'', result.Data[''Key''])", span="414-414"];
m9_313 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="400-415"];
m9_319 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="428-435"];
m9_318 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="426-440"];
m9_320 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="437-437"];
m9_321 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result.LoadException)", span="439-439"];
m9_322 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="426-440"];
m9_327 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="446-452"];
m9_328 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="448-449"];
m9_332 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(null, ''name'', ''value'')", span="449-449"];
m9_329 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''id'', exception.ParamName)", span="451-451"];
m9_331 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="449-449"];
m9_330 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="446-452"];
m9_333 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="449-449"];
m9_338 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="458-464"];
m9_339 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="460-461"];
m9_343 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(''1'', null, ''value'')", span="461-461"];
m9_340 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''name'', exception.ParamName)", span="463-463"];
m9_342 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="461-461"];
m9_341 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="458-464"];
m9_344 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="461-461"];
m9_350 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = sql.Query(arrangeSql).Single()", span="477-477"];
m9_349 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="475-487"];
m9_352 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="480-480"];
m9_353 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="482-484"];
m9_351 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="string jobId = job.Id.ToString()", span="478-478"];
m9_354 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value'', parameter.Value)", span="486-486"];
m9_355 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="475-487"];
m9_361 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = sql.Query(arrangeSql).Single()", span="500-500"];
m9_360 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="498-511"];
m9_363 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="503-503"];
m9_364 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="504-504"];
m9_365 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="506-508"];
m9_362 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="string jobId = job.Id.ToString()", span="501-501"];
m9_366 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''AnotherValue'', parameter.Value)", span="510-510"];
m9_367 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="498-511"];
m9_373 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = sql.Query(arrangeSql).Single()", span="524-524"];
m9_372 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="522-534"];
m9_375 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(jobId, ''Name'', null)", span="527-527"];
m9_376 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="529-531"];
m9_374 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="string jobId = job.Id.ToString()", span="525-525"];
m9_377 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal((string) null, parameter.Value)", span="533-533"];
m9_378 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="522-534"];
m9_382 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="540-546"];
m9_383 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="542-543"];
m9_387 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetJobParameter(null, ''hello'')", span="543-543"];
m9_384 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''id'', exception.ParamName)", span="545-545"];
m9_386 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="543-543"];
m9_385 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="540-546"];
m9_388 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="543-543"];
m9_393 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="552-558"];
m9_394 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="554-555"];
m9_398 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetJobParameter(''1'', null)", span="555-555"];
m9_395 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''name'', exception.ParamName)", span="557-557"];
m9_397 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="555-555"];
m9_396 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="552-558"];
m9_399 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="555-555"];
m9_403 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="564-568"];
m9_404 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var value = connection.GetJobParameter(''1'', ''hello'')", span="566-566"];
m9_405 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(value)", span="567-567"];
m9_406 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="564-568"];
m9_412 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="585-587"];
m9_411 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="583-592"];
m9_413 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="589-589"];
m9_414 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''value'', value)", span="591-591"];
m9_415 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="583-592"];
m9_420 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="598-604"];
m9_421 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="600-601"];
m9_425 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="601-601"];
m9_422 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="603-603"];
m9_424 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="601-601"];
m9_423 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="598-604"];
m9_426 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="601-601"];
m9_431 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="610-611"];
m9_432 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="610-611"];
m9_435 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="611-611"];
m9_433 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="610-611"];
m9_434 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="611-611"];
m9_436 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="611-611"];
m9_440 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="617-623"];
m9_441 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="619-620"];
m9_442 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result)", span="622-622"];
m9_443 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="617-623"];
m9_449 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql)", span="639-639"];
m9_448 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="637-644"];
m9_450 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="641-641"];
m9_451 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''-1.0'', result)", span="643-643"];
m9_452 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="637-644"];
m9_457 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="650-656"];
m9_458 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="652-653"];
m9_462 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AnnounceServer(null, new ServerContext())", span="653-653"];
m9_459 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''serverId'', exception.ParamName)", span="655-655"];
m9_461 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="653-653"];
m9_460 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="650-656"];
m9_463 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="653-653"];
m9_469 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="662-668"];
m9_470 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="664-665"];
m9_474 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AnnounceServer(''server'', null)", span="665-665"];
m9_471 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''context'', exception.ParamName)", span="667-667"];
m9_473 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="665-665"];
m9_472 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="662-668"];
m9_475 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="665-665"];
m9_479 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="674-699"];
m9_480 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="676-680"];
m9_481 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AnnounceServer(''server'', context1)", span="681-681"];
m9_482 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="683-683"];
m9_487 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AnnounceServer(''server'', context2)", span="695-695"];
m9_488 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="696-696"];
m9_483 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''server'', server.Id)", span="684-684"];
m9_484 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="685-687"];
m9_485 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(server.LastHeartbeat)", span="688-688"];
m9_486 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="690-694"];
m9_489 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''server'', sameServer.Id)", span="697-697"];
m9_490 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Contains(''1000'', sameServer.Data)", span="698-698"];
m9_491 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="674-699"];
m9_497 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="705-706"];
m9_498 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="705-706"];
m9_501 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.RemoveServer(null)", span="706-706"];
m9_499 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="705-706"];
m9_500 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="706-706"];
m9_502 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="706-706"];
m9_509 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql)", span="720-720"];
m9_508 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="718-726"];
m9_510 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.RemoveServer(''Server1'')", span="722-722"];
m9_511 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="724-724"];
m9_512 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="725-725"];
m9_513 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="718-726"];
m9_518 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="732-733"];
m9_519 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="732-733"];
m9_522 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.Heartbeat(null)", span="733-733"];
m9_520 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="732-733"];
m9_521 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="733-733"];
m9_523 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="733-733"];
m9_530 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql)", span="747-747"];
m9_529 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="745-756"];
m9_531 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.Heartbeat(''server1'')", span="749-749"];
m9_532 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat)", span="751-752"];
m9_533 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotEqual(2012, servers[''server1''].Year)", span="754-754"];
m9_536 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="752-752"];
m9_539 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="752-752"];
m9_534 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2012, servers[''server2''].Year)", span="755-755"];
m9_535 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="745-756"];
m9_537 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string)x.Id", span="752-752"];
m9_538 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="752-752"];
m9_540 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(DateTime)x.LastHeartbeat", span="752-752"];
m9_541 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="752-752"];
m9_545 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="762-763"];
m9_546 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="762-763"];
m9_549 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="763-763"];
m9_547 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="762-763"];
m9_548 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="763-763"];
m9_550 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="763-763"];
m9_557 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="775-781"];
m9_556 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="773-787"];
m9_558 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="783-783"];
m9_559 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="785-785"];
m9_560 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''server2'', liveServer.Id)", span="786-786"];
m9_561 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="773-787"];
m9_567 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="793-794"];
m9_568 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null))", span="794-794"];
m9_571 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetAllItemsFromSet(null)", span="794-794"];
m9_569 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="793-794"];
m9_570 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="794-794"];
m9_572 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="794-794"];
m9_577 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="800-806"];
m9_578 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetAllItemsFromSet(''some-set'')", span="802-802"];
m9_579 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result)", span="804-804"];
m9_580 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(0, result.Count)", span="805-805"];
m9_581 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="800-806"];
m9_587 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-set'', value = ''1'' },\r\n                    new { key = ''some-set'', value = ''2'' },\r\n                    new { key = ''another-set'', value = ''3'' }\r\n                })", span="819-824"];
m9_586 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="816-833"];
m9_588 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetAllItemsFromSet(''some-set'')", span="827-827"];
m9_589 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2, result.Count)", span="830-830"];
m9_590 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Contains(''1'', result)", span="831-831"];
m9_591 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Contains(''2'', result)", span="832-832"];
m9_592 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="816-833"];
m9_596 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="839-845"];
m9_597 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()))", span="841-842"];
m9_601 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetRangeInHash(null, new Dictionary<string, string>())", span="842-842"];
m9_598 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="844-844"];
m9_600 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="842-842"];
m9_599 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="839-845"];
m9_602 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="842-842"];
m9_607 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="851-857"];
m9_608 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null))", span="853-854"];
m9_612 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetRangeInHash(''some-hash'', null)", span="854-854"];
m9_609 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="856-856"];
m9_611 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="854-854"];
m9_610 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="851-857"];
m9_613 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="854-854"];
m9_617 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="865-880"];
m9_618 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="867-871"];
m9_619 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="873-876"];
m9_620 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="878-878"];
m9_623 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="876-876"];
m9_626 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="876-876"];
m9_621 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="879-879"];
m9_622 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="865-880"];
m9_624 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string)x.Field", span="876-876"];
m9_625 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="876-876"];
m9_627 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string)x.Value", span="876-876"];
m9_628 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="876-876"];
m9_632 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="888-901"];
m9_633 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                })", span="890-893"];
m9_634 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = sql.Query(\r\n                        ''select * from HangFire.Hash where [Key] = @key'',\r\n                        new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="895-898"];
m9_635 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(null, result[''Key1''])", span="900-900"];
m9_637 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="898-898"];
m9_640 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="898-898"];
m9_636 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="888-901"];
m9_638 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string)x.Field", span="898-898"];
m9_639 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="898-898"];
m9_641 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string)x.Value", span="898-898"];
m9_642 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="898-898"];
m9_646 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="907-908"];
m9_647 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null))", span="908-908"];
m9_650 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetAllEntriesFromHash(null)", span="908-908"];
m9_648 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="907-908"];
m9_649 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="908-908"];
m9_651 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="908-908"];
m9_656 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="914-918"];
m9_657 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="916-916"];
m9_658 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result)", span="917-917"];
m9_659 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="914-918"];
m9_665 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-hash'', field = ''Key1'', value = ''Value1'' },\r\n                    new { key = ''some-hash'', field = ''Key2'', value = ''Value2'' },\r\n                    new { key = ''another-hash'', field = ''Key3'', value = ''Value3'' }\r\n                })", span="931-936"];
m9_664 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="928-946"];
m9_666 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="939-939"];
m9_667 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result)", span="942-942"];
m9_668 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2, result.Count)", span="943-943"];
m9_669 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="944-944"];
m9_670 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="945-945"];
m9_671 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="928-946"];
m9_675 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="952-956"];
m9_676 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetSetCount(null))", span="954-955"];
m9_679 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetSetCount(null)", span="955-955"];
m9_677 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="952-956"];
m9_678 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="955-955"];
m9_680 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="955-955"];
m9_685 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="962-966"];
m9_686 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetSetCount(''my-set'')", span="964-964"];
m9_687 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(0, result)", span="965-965"];
m9_688 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="962-966"];
m9_694 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { key = ''set-1'', value = ''value-1'' },\r\n                    new { key = ''set-2'', value = ''value-1'' },\r\n                    new { key = ''set-1'', value = ''value-2'' }\r\n                })", span="978-983"];
m9_693 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="976-988"];
m9_695 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetSetCount(''set-1'')", span="985-985"];
m9_696 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2, result)", span="987-987"];
m9_697 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="976-988"];
m9_702 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="994-997"];
m9_703 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetRangeFromSet(null, 0, 1))", span="996-996"];
m9_706 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetRangeFromSet(null, 0, 1)", span="996-996"];
m9_704 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="994-997"];
m9_705 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="996-996"];
m9_707 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="996-996"];
m9_714 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { Key = ''set-1'', Value = ''1'' },\r\n                    new { Key = ''set-1'', Value = ''2'' },\r\n                    new { Key = ''set-1'', Value = ''3'' },\r\n                    new { Key = ''set-1'', Value = ''4'' },\r\n                    new { Key = ''set-2'', Value = ''4'' },\r\n                    new { Key = ''set-1'', Value = ''5'' }\r\n                })", span="1009-1017"];
m9_713 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1007-1022"];
m9_715 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetRangeFromSet(''set-1'', 2, 3)", span="1019-1019"];
m9_716 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(new [] { ''3'', ''4'' }, result)", span="1021-1021"];
m9_717 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1007-1022"];
m9_721 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1028-1032"];
m9_722 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetCounter(null))", span="1030-1031"];
m9_725 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetCounter(null)", span="1031-1031"];
m9_723 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1028-1032"];
m9_724 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1031-1031"];
m9_726 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1031-1031"];
m9_731 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1038-1042"];
m9_732 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetCounter(''my-counter'')", span="1040-1040"];
m9_733 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(0, result)", span="1041-1041"];
m9_734 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1038-1042"];
m9_740 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 1 },\r\n                    new { key = ''counter-2'', value = 1 },\r\n                    new { key = ''counter-1'', value = 1 }\r\n                })", span="1055-1060"];
m9_739 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1052-1067"];
m9_741 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetCounter(''counter-1'')", span="1063-1063"];
m9_742 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2, result)", span="1066-1066"];
m9_743 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1052-1067"];
m9_749 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 12 },\r\n                    new { key = ''counter-2'', value = 15 }\r\n                })", span="1080-1084"];
m9_748 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1077-1090"];
m9_750 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetCounter(''counter-1'')", span="1087-1087"];
m9_751 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(12, result)", span="1089-1089"];
m9_752 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1077-1090"];
m9_756 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1096-1099"];
m9_757 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetHashCount(null))", span="1098-1098"];
m9_760 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetHashCount(null)", span="1098-1098"];
m9_758 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1096-1099"];
m9_759 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1098-1098"];
m9_761 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1098-1098"];
m9_766 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1105-1109"];
m9_767 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetHashCount(''my-hash'')", span="1107-1107"];
m9_768 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(0, result)", span="1108-1108"];
m9_769 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1105-1109"];
m9_775 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'' }\r\n                })", span="1122-1127"];
m9_774 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1119-1134"];
m9_776 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetHashCount(''hash-1'')", span="1130-1130"];
m9_777 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2, result)", span="1133-1133"];
m9_778 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1119-1134"];
m9_782 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1140-1144"];
m9_783 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetHashTtl(null))", span="1142-1143"];
m9_786 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetHashTtl(null)", span="1143-1143"];
m9_784 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1140-1144"];
m9_785 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1143-1143"];
m9_787 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1143-1143"];
m9_792 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1150-1154"];
m9_793 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetHashTtl(''my-hash'')", span="1152-1152"];
m9_794 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result < TimeSpan.Zero)", span="1153-1153"];
m9_795 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1150-1154"];
m9_801 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = (DateTime?) null }\r\n                })", span="1167-1171"];
m9_800 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1164-1179"];
m9_802 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetHashTtl(''hash-1'')", span="1174-1174"];
m9_803 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1177-1177"];
m9_804 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1178-1178"];
m9_805 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1164-1179"];
m9_809 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1185-1189"];
m9_810 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListCount(null))", span="1187-1188"];
m9_813 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetListCount(null)", span="1188-1188"];
m9_811 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1185-1189"];
m9_812 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1188-1188"];
m9_814 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1188-1188"];
m9_819 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1195-1199"];
m9_820 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetListCount(''my-list'')", span="1197-1197"];
m9_821 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(0, result)", span="1198-1198"];
m9_822 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1195-1199"];
m9_828 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-2'' }\r\n                })", span="1212-1217"];
m9_827 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1209-1224"];
m9_829 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetListCount(''list-1'')", span="1220-1220"];
m9_830 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2, result)", span="1223-1223"];
m9_831 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1209-1224"];
m9_835 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1230-1234"];
m9_836 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListTtl(null))", span="1232-1233"];
m9_839 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetListTtl(null)", span="1233-1233"];
m9_837 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1230-1234"];
m9_838 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1233-1233"];
m9_840 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1233-1233"];
m9_845 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1240-1244"];
m9_846 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetListTtl(''my-list'')", span="1242-1242"];
m9_847 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result < TimeSpan.Zero)", span="1243-1243"];
m9_848 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1240-1244"];
m9_854 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''list-2'', expireAt = (DateTime?) null }\r\n                })", span="1257-1261"];
m9_853 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1254-1269"];
m9_855 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetListTtl(''list-1'')", span="1264-1264"];
m9_856 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1267-1267"];
m9_857 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1268-1268"];
m9_858 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1254-1269"];
m9_862 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1275-1281"];
m9_863 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(null, ''name''))", span="1277-1278"];
m9_867 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetValueFromHash(null, ''name'')", span="1278-1278"];
m9_864 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1280-1280"];
m9_866 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1278-1278"];
m9_865 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1275-1281"];
m9_868 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1278-1278"];
m9_873 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1287-1293"];
m9_874 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(''key'', null))", span="1289-1290"];
m9_878 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetValueFromHash(''key'', null)", span="1290-1290"];
m9_875 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''name'', exception.ParamName)", span="1292-1292"];
m9_877 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1290-1290"];
m9_876 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1287-1293"];
m9_879 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1290-1290"];
m9_883 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1299-1303"];
m9_884 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetValueFromHash(''my-hash'', ''name'')", span="1301-1301"];
m9_885 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result)", span="1302-1302"];
m9_886 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1299-1303"];
m9_892 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'', value = ''1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'', value = ''2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'', value = ''3'' }\r\n                })", span="1316-1321"];
m9_891 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1313-1328"];
m9_893 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetValueFromHash(''hash-1'', ''field-1'')", span="1324-1324"];
m9_894 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''1'', result)", span="1327-1327"];
m9_895 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1313-1328"];
m9_899 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1334-1340"];
m9_900 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetRangeFromList(null, 0, 1))", span="1336-1337"];
m9_904 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetRangeFromList(null, 0, 1)", span="1337-1337"];
m9_901 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1339-1339"];
m9_903 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1337-1337"];
m9_902 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1334-1340"];
m9_905 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1337-1337"];
m9_910 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1346-1350"];
m9_911 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetRangeFromList(''my-list'', 0, 1)", span="1348-1348"];
m9_912 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Empty(result)", span="1349-1349"];
m9_913 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1346-1350"];
m9_920 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' },\r\n                    new { key = ''list-1'', value = ''4'' },\r\n                    new { key = ''list-1'', value = ''5'' }\r\n                })", span="1363-1370"];
m9_919 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1360-1377"];
m9_921 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetRangeFromList(''list-1'', 1, 2)", span="1373-1373"];
m9_922 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(new [] { ''4'', ''3'' }, result)", span="1376-1376"];
m9_923 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1360-1377"];
m9_927 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1383-1387"];
m9_928 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetAllItemsFromList(null))", span="1385-1386"];
m9_931 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetAllItemsFromList(null)", span="1386-1386"];
m9_929 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1383-1387"];
m9_930 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1386-1386"];
m9_932 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1386-1386"];
m9_937 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1393-1397"];
m9_938 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetAllItemsFromList(''my-list'')", span="1395-1395"];
m9_939 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Empty(result)", span="1396-1396"];
m9_940 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1393-1397"];
m9_946 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' }\r\n                })", span="1410-1415"];
m9_945 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1407-1422"];
m9_947 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetAllItemsFromList(''list-1'')", span="1418-1418"];
m9_948 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(new [] { ''3'', ''1'' }, result)", span="1421-1421"];
m9_949 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1407-1422"];
m9_953 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1428-1431"];
m9_954 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetSetTtl(null))", span="1430-1430"];
m9_957 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetSetTtl(null)", span="1430-1430"];
m9_955 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1428-1431"];
m9_956 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1430-1430"];
m9_958 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1430-1430"];
m9_963 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1437-1441"];
m9_964 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetSetTtl(''my-set'')", span="1439-1439"];
m9_965 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result < TimeSpan.Zero)", span="1440-1440"];
m9_966 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1437-1441"];
m9_972 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) },\r\n                    new { key = ''set-2'', value = ''2'', expireAt = (DateTime?) null }\r\n                })", span="1454-1458"];
m9_971 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="1451-1466"];
m9_973 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetSetTtl(''set-1'')", span="1461-1461"];
m9_974 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1464-1464"];
m9_975 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1465-1465"];
m9_976 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1451-1466"];
m9_997 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="x.QueueProviders", span="1486-1486"];
m9_998 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="1486-1486"];
m9_88 [cluster="Unk.UseConnections", file="SqlServerConnectionFacts.cs", label="Entry Unk.UseConnections", span=""];
m9_476 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="672-672"];
m9_477 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.NotNull(server.LastHeartbeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="674-699"];
m9_478 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="672-672"];
m9_603 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266"];
m9_63 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="54-54"];
m9_770 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", span="1113-1113"];
m9_771 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="1115-1117"];
m9_772 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetHashCount(''hash-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="1119-1134"];
m9_773 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", span="1113-1113"];
m9_24 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", span="39-39"];
m9_9 [cluster="Unk.Returns", file="SqlServerConnectionFacts.cs", label="Entry Unk.Returns", span=""];
m9_454 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="648-648"];
m9_455 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="650-656"];
m9_456 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="648-648"];
m9_166 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="233-233"];
m9_564 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="791-791"];
m9_565 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null)))", span="793-794"];
m9_566 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="791-791"];
m9_788 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="445-445"];
m9_110 [cluster="System.Threading.Thread.Join()", file="SqlServerConnectionFacts.cs", label="Entry System.Threading.Thread.Join()", span="0-0"];
m9_324 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="444-444"];
m9_325 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="446-452"];
m9_326 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="444-444"];
m9_243 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="286-286"];
m9_244 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="288-292"];
m9_245 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="286-286"];
m9_56 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="71-71"];
m9_57 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="73-77"];
m9_58 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="71-71"];
m9_204 [cluster="System.DateTime.AddMinutes(double)", file="SqlServerConnectionFacts.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m9_400 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="562-562"];
m9_401 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="564-568"];
m9_402 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="562-562"];
m9_977 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", span="1469-1469"];
m9_978 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", file="SqlServerConnectionFacts.cs", label="var sqlConnection = ConnectionUtils.CreateConnection()", span="1471-1471"];
m9_979 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", file="SqlServerConnectionFacts.cs", label="var storage = new SqlServerStorage(sqlConnection, new SqlServerStorageOptions { CommandBatchMaxTimeout = useBatching ? TimeSpan.FromMinutes(1) : (TimeSpan?)null })", span="1473-1473"];
m9_981 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", file="SqlServerConnectionFacts.cs", label="action(sqlConnection, connection)", span="1476-1476"];
m9_980 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", file="SqlServerConnectionFacts.cs", label="var connection = new SqlServerConnection(storage)", span="1474-1474"];
m9_982 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", span="1469-1469"];
m9_45 [cluster="Unk.UseConnection", file="SqlServerConnectionFacts.cs", label="Entry Unk.UseConnection", span=""];
m9_20 [cluster="Unk.Equal", file="SqlServerConnectionFacts.cs", label="Entry Unk.Equal", span=""];
m9_170 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="1495-1495"];
m9_999 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="1495-1495"];
m9_614 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords(bool)", span="863-863"];
m9_615 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            }, useBatching)", span="865-880"];
m9_616 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords(bool)", span="863-863"];
m9_708 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="389-389"];
m9_35 [cluster="System.Threading.CancellationToken.CancellationToken()", file="SqlServerConnectionFacts.cs", label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0"];
m9_806 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", span="1183-1183"];
m9_807 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListCount(null));\r\n            })", span="1185-1189"];
m9_808 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", span="1183-1183"];
m9_985 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="31-31"];
m9_593 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="837-837"];
m9_594 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="839-845"];
m9_595 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="837-837"];
m9_0 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", span="22-22"];
m9_1 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs", label="_queue = new Mock<IPersistentJobQueue>()", span="24-24"];
m9_2 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs", label="var provider = new Mock<IPersistentJobQueueProvider>()", span="26-26"];
m9_3 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs", label="provider.Setup(x => x.GetJobQueue())\r\n                .Returns(_queue.Object)", span="27-28"];
m9_4 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs", label="_providers = new PersistentJobQueueProviderCollection(provider.Object)", span="30-30"];
m9_5 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", span="22-22"];
m9_983 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m9_242 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="140-140"];
m9_993 [cluster="Mock<SqlServerStorage>.cstr", file="SqlServerConnectionFacts.cs", label="Entry Mock<SqlServerStorage>.cstr", span=""];
m9_73 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="59-59"];
m9_156 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", span="196-196"];
m9_157 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="198-208"];
m9_158 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", span="196-196"];
m9_689 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", span="970-970"];
m9_690 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="972-974"];
m9_691 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { key = ''set-1'', value = ''value-1'' },\r\n                    new { key = ''set-2'', value = ''value-1'' },\r\n                    new { key = ''set-1'', value = ''value-2'' }\r\n                });\r\n\r\n                var result = connection.GetSetCount(''set-1'');\r\n\r\n                Assert.Equal(2, result);\r\n            })", span="976-988"];
m9_692 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", span="970-970"];
m9_842 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", span="1238-1238"];
m9_843 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetListTtl(''my-list'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1240-1244"];
m9_844 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", span="1238-1238"];
m9_199 [cluster="Unk.Query", file="SqlServerConnectionFacts.cs", label="Entry Unk.Query", span=""];
m9_552 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="767-767"];
m9_553 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="769-771"];
m9_554 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="773-787"];
m9_555 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="767-767"];
m9_832 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", span="1228-1228"];
m9_833 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListTtl(null));\r\n            })", span="1230-1234"];
m9_834 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", span="1228-1228"];
m9_995 [cluster="System.Action<T>.Invoke(T)", file="SqlServerConnectionFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m9_290 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", span="347-347"];
m9_291 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues ('', '', '', getutcdate());\r\ndeclare @JobId int;\r\nset @JobId = scope_identity();\r\ninsert into HangFire.State (JobId, Name, CreatedAt)\r\nvalues (@JobId, 'old-state', getutcdate());\r\ninsert into HangFire.State (JobId, Name, Reason, Data, CreatedAt)\r\nvalues (@JobId, @name, @reason, @data, getutcdate());\r\ndeclare @StateId int;\r\nset @StateId = scope_identity();\r\nupdate HangFire.Job set StateId = @StateId;\r\nselect @JobId as Id;''", span="349-361"];
m9_292 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var data = new Dictionary<string, string>\r\n                {\r\n                    { ''Key'', ''Value'' }\r\n                };\r\n\r\n                var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id;\r\n\r\n                var result = connection.GetStateData(jobId.ToString());\r\n                Assert.NotNull(result);\r\n\r\n                Assert.Equal(''Name'', result.Name);\r\n                Assert.Equal(''Reason'', result.Reason);\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="363-380"];
m9_293 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", span="347-347"];
m9_880 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", span="1297-1297"];
m9_881 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetValueFromHash(''my-hash'', ''name'');\r\n                Assert.Null(result);\r\n            })", span="1299-1303"];
m9_882 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", span="1297-1297"];
m9_52 [cluster="Unk.Add", file="SqlServerConnectionFacts.cs", label="Entry Unk.Add", span=""];
m9_64 [cluster="Unk.NotNull", file="SqlServerConnectionFacts.cs", label="Entry Unk.NotNull", span=""];
m9_42 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", span="57-57"];
m9_43 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var token = new CancellationToken();\r\n                var anotherProvider = new Mock<IPersistentJobQueueProvider>();\r\n                _providers.Add(anotherProvider.Object, new [] { ''critical'' });\r\n\r\n                Assert.Throws<InvalidOperationException>(\r\n                    () => connection.FetchNextJob(new[] { ''critical'', ''default'' }, token));\r\n            })", span="59-67"];
m9_44 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", span="57-57"];
m9_171 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters(bool)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters(bool)", span="214-214"];
m9_172 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters(bool)", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var createdAt = new DateTime(2012, 12, 12);\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1));\r\n\r\n                Assert.NotNull(jobId);\r\n                Assert.NotEmpty(jobId);\r\n\r\n                var sqlJob = sql.Query(''select * from HangFire.Job'').Single();\r\n                Assert.Equal(jobId, sqlJob.Id.ToString());\r\n                Assert.Equal(createdAt, sqlJob.CreatedAt);\r\n                Assert.Equal(null, (int?) sqlJob.StateId);\r\n                Assert.Equal(null, (string) sqlJob.StateName);\r\n\r\n                var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData);\r\n                invocationData.Arguments = sqlJob.Arguments;\r\n\r\n                var job = invocationData.Deserialize();\r\n                Assert.Equal(typeof(SqlServerConnectionFacts), job.Type);\r\n                Assert.Equal(''SampleMethod'', job.Method.Name);\r\n                Assert.Equal(''Hello'', job.Args[0]);\r\n\r\n                Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.ExpireAt);\r\n                Assert.True(sqlJob.ExpireAt < createdAt.AddDays(1).AddMinutes(1));\r\n\r\n                var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value);\r\n\r\n                Assert.Equal(''Value1'', parameters[''Key1'']);\r\n                Assert.Equal(''Value2'', parameters[''Key2'']);\r\n            }, useBatching)", span="216-252"];
m9_173 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters(bool)", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters(bool)", span="214-214"];
m9_8 [cluster="Unk.Setup", file="SqlServerConnectionFacts.cs", label="Entry Unk.Setup", span=""];
m9_753 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", span="1094-1094"];
m9_754 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetHashCount(null));\r\n            })", span="1096-1099"];
m9_755 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", span="1094-1094"];
m9_250 [cluster="Unk.Null", file="SqlServerConnectionFacts.cs", label="Entry Unk.Null", span=""];
m9_25 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="43-43"];
m9_26 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var token = new CancellationToken();\r\n                var queues = new[] { ''default'' };\r\n\r\n                connection.FetchNextJob(queues, token);\r\n\r\n                _queue.Verify(x => x.Dequeue(queues, token));\r\n            })", span="45-53"];
m9_27 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="43-43"];
m9_582 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="810-810"];
m9_583 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues (@key, 0.0, @value)''", span="812-814"];
m9_584 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-set'', value = ''1'' },\r\n                    new { key = ''some-set'', value = ''2'' },\r\n                    new { key = ''another-set'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Contains(''1'', result);\r\n                Assert.Contains(''2'', result);\r\n            })", span="816-833"];
m9_585 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="810-810"];
m9_10 [cluster="PersistentJobQueueProviderCollection.cstr", file="SqlServerConnectionFacts.cs", label="Entry PersistentJobQueueProviderCollection.cstr", span=""];
m9_155 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="84-84"];
m9_268 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m9_562 [cluster="System.DateTime.AddHours(double)", file="SqlServerConnectionFacts.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m9_198 [cluster="Unk.NotEmpty", file="SqlServerConnectionFacts.cs", label="Entry Unk.NotEmpty", span=""];
m9_14 [cluster="Unk.GetJobQueue", file="SqlServerConnectionFacts.cs", label="Entry Unk.GetJobQueue", span=""];
m9_135 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_IsReentrant_FromTheSameConnection_OnTheSameResource()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_IsReentrant_FromTheSameConnection_OnTheSameResource()", span="167-167"];
m9_136 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_IsReentrant_FromTheSameConnection_OnTheSameResource()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                using (connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5)))\r\n                using (connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5)))\r\n                {\r\n                    Assert.True(true);\r\n                }\r\n            })", span="169-176"];
m9_137 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_IsReentrant_FromTheSameConnection_OnTheSameResource()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_IsReentrant_FromTheSameConnection_OnTheSameResource()", span="167-167"];
m9_914 [cluster="Unk.Empty", file="SqlServerConnectionFacts.cs", label="Entry Unk.Empty", span=""];
m9_604 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="849-849"];
m9_605 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="851-857"];
m9_606 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="849-849"];
m9_763 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", span="1103-1103"];
m9_764 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetHashCount(''my-hash'');\r\n                Assert.Equal(0, result);\r\n            })", span="1105-1109"];
m9_765 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", span="1103-1103"];
m9_779 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", span="1138-1138"];
m9_780 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetHashTtl(null));\r\n            })", span="1140-1144"];
m9_781 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", span="1138-1138"];
m9_28 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", span="1481-1481"];
m9_987 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="var sql = ConnectionUtils.CreateConnection()", span="1483-1483"];
m9_991 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="action(connection)", span="1490-1490"];
m9_988 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="var storage = new Mock<SqlServerStorage>(sql)", span="1485-1485"];
m9_989 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="storage.Setup(x => x.QueueProviders).Returns(_providers)", span="1486-1486"];
m9_990 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="var connection = new SqlServerConnection(storage.Object)", span="1488-1488"];
m9_992 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", span="1481-1481"];
m9_573 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="240-240"];
m9_37 [cluster="Unk.Verify", file="SqlServerConnectionFacts.cs", label="Entry Unk.Verify", span=""];
m9_718 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", span="1026-1026"];
m9_719 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetCounter(null));\r\n            })", span="1028-1032"];
m9_720 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", span="1026-1026"];
m9_896 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", span="1332-1332"];
m9_897 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetRangeFromList(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1334-1340"];
m9_898 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", span="1332-1332"];
m9_379 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="538-538"];
m9_380 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="540-546"];
m9_381 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="538-538"];
m9_492 [cluster="string.StartsWith(string)", file="SqlServerConnectionFacts.cs", label="Entry string.StartsWith(string)", span="0-0"];
m9_84 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerConnectionFacts.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m9_915 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", span="1354-1354"];
m9_916 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], [Value])\r\nvalues (@key, @value)''", span="1356-1358"];
m9_917 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' },\r\n                    new { key = ''list-1'', value = ''4'' },\r\n                    new { key = ''list-1'', value = ''5'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetRangeFromList(''list-1'', 1, 2);\r\n                \r\n                // Assert\r\n                Assert.Equal(new [] { ''4'', ''3'' }, result);\r\n            })", span="1360-1377"];
m9_918 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", span="1354-1354"];
m9_205 [cluster="Unk.ToDictionary", file="SqlServerConnectionFacts.cs", label="Entry Unk.ToDictionary", span=""];
m9_563 [cluster="System.TimeSpan.FromHours(double)", file="SqlServerConnectionFacts.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m9_144 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="180-180"];
m9_145 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="182-192"];
m9_146 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="180-180"];
m9_728 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", span="1036-1036"];
m9_729 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetCounter(''my-counter'');\r\n                Assert.Equal(0, result);\r\n            })", span="1038-1042"];
m9_730 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", span="1036-1036"];
m9_933 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="518-518"];
m9_950 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", span="1426-1426"];
m9_951 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetSetTtl(null));\r\n            })", span="1428-1431"];
m9_952 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", span="1426-1426"];
m9_65 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", span="81-81"];
m9_66 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireDistributedLock(''1'', TimeSpan.FromSeconds(1));\r\n                Assert.NotNull(@lock);\r\n            })", span="83-87"];
m9_67 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", span="81-81"];
m9_196 [cluster="System.DateTime.DateTime(int, int, int)", file="SqlServerConnectionFacts.cs", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
m9_19 [cluster="Unk.>", file="SqlServerConnectionFacts.cs", label="Entry Unk.>", span=""];
m9_334 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="211-211"];
m9_672 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", span="950-950"];
m9_673 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetSetCount(null));\r\n            })", span="952-956"];
m9_674 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", span="950-950"];
m9_72 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerConnectionFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m9_444 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="627-627"];
m9_445 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="629-635"];
m9_446 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="637-644"];
m9_447 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="627-627"];
m9_709 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", span="1001-1001"];
m9_710 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@Key, @Value, 0.0)''", span="1003-1005"];
m9_711 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { Key = ''set-1'', Value = ''1'' },\r\n                    new { Key = ''set-1'', Value = ''2'' },\r\n                    new { Key = ''set-1'', Value = ''3'' },\r\n                    new { Key = ''set-1'', Value = ''4'' },\r\n                    new { Key = ''set-2'', Value = ''4'' },\r\n                    new { Key = ''set-1'', Value = ''5'' }\r\n                });\r\n\r\n                var result = connection.GetRangeFromSet(''set-1'', 2, 3);\r\n\r\n                Assert.Equal(new [] { ''3'', ''4'' }, result);\r\n            })", span="1007-1022"];
m9_712 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", span="1001-1001"];
m9_197 [cluster="System.TimeSpan.FromDays(double)", file="SqlServerConnectionFacts.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m9_356 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="491-491"];
m9_357 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="493-496"];
m9_358 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="498-511"];
m9_359 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="491-491"];
m9_959 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="405-405"];
m9_389 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="229-229"];
m9_464 [cluster="Hangfire.Server.ServerContext.ServerContext()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.Server.ServerContext.ServerContext()", span="20-20"];
m9_154 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerConnectionFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m9_282 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="180-180"];
m9_416 [cluster="Unk.GetJobParameter", file="SqlServerConnectionFacts.cs", label="Entry Unk.GetJobParameter", span=""];
m9_108 [cluster="System.Threading.ManualResetEventSlim.Wait()", file="SqlServerConnectionFacts.cs", label="Entry System.Threading.ManualResetEventSlim.Wait()", span="0-0"];
m9_525 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="737-737"];
m9_526 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues\r\n('server1', '', '2012-12-12 12:12:12'),\r\n('server2', '', '2012-12-12 12:12:12')''", span="739-743"];
m9_527 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat);\r\n\r\n                Assert.NotEqual(2012, servers[''server1''].Year);\r\n                Assert.Equal(2012, servers[''server2''].Year);\r\n            })", span="745-756"];
m9_528 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="737-737"];
m9_907 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1344-1344"];
m9_908 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetRangeFromList(''my-list'', 0, 1);\r\n                Assert.Empty(result);\r\n            })", span="1346-1350"];
m9_909 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1344-1344"];
m9_74 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_WhenResourceIsNullOrEmpty()", span="91-91"];
m9_75 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                () => connection.AcquireDistributedLock('''', TimeSpan.FromMinutes(5)));\r\n\r\n                Assert.Equal(''resource'', exception.ParamName);\r\n            })", span="93-99"];
m9_76 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_WhenResourceIsNullOrEmpty()", span="91-91"];
m9_251 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="296-296"];
m9_252 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="298-301"];
m9_253 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Args[0]);\r\n                Assert.Null(result.LoadException);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < result.CreatedAt);\r\n                Assert.True(result.CreatedAt < DateTime.UtcNow.AddMinutes(1));\r\n            })", span="303-325"];
m9_254 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="296-296"];
m9_493 [cluster="Unk.Contains", file="SqlServerConnectionFacts.cs", label="Entry Unk.Contains", span=""];
m9_515 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="730-730"];
m9_516 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="732-733"];
m9_517 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="730-730"];
m9_823 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", span="1203-1203"];
m9_824 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key])\r\nvalues (@key)''", span="1205-1207"];
m9_825 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-2'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetListCount(''list-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="1209-1224"];
m9_826 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", span="1203-1203"];
m9_681 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="379-379"];
m9_94 [cluster="Unk.Single", file="SqlServerConnectionFacts.cs", label="Entry Unk.Single", span=""];
m9_233 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="279-279"];
m9_234 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="281-282"];
m9_235 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="279-279"];
m9_143 [cluster="Unk.True", file="SqlServerConnectionFacts.cs", label="Entry Unk.True", span=""];
m9_437 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="615-615"];
m9_438 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="617-623"];
m9_439 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="615-615"];
m9_815 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="473-473"];
m9_682 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", span="960-960"];
m9_683 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetSetCount(''my-set'');\r\n                Assert.Equal(0, result);\r\n            })", span="962-966"];
m9_684 [cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", span="960-960"];
m9_1000 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", span=""];
m9_1001 [file="SqlServerConnectionFacts.cs", label=token, span=""];
m9_1002 [file="SqlServerConnectionFacts.cs", label=queues, span=""];
m9_1003 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1004 [file="SqlServerConnectionFacts.cs", label=token, span=""];
m9_1005 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1006 [file="SqlServerConnectionFacts.cs", label=releaseLock, span=""];
m9_1007 [file="SqlServerConnectionFacts.cs", label=lockAcquired, span=""];
m9_1008 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1009 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1010 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1011 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1012 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1013 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1014 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1015 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1016 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1017 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1018 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1019 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1020 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1021 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1022 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1023 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1024 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1025 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1026 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1027 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1028 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1029 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1030 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1031 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1032 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1033 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1034 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1035 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1036 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1037 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1038 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1039 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1040 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1041 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1042 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1043 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1044 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1045 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1046 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1047 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1048 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1049 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1050 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1051 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1052 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1053 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1054 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1055 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1056 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1057 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1058 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1059 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1060 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1061 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1062 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1063 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_1064 [file="SqlServerConnectionFacts.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m9_1065 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m10_85 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs", label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", span="79-79"];
m10_86 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs", label="_process\r\n                .Setup(x => x.ChangeState(It.IsAny<StateChangeContext>()))\r\n                .Returns<IState>(null)", span="81-83"];
m10_87 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs", label="var scheduler = CreateScheduler()", span="85-85"];
m10_88 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs", label="scheduler.Execute(_context.Object)", span="87-87"];
m10_89 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs", label="_transaction.Verify(x => x.RemoveFromSet(''schedule'', JobId))", span="89-89"];
m10_90 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs", label="_transaction.Verify(x => x.Commit())", span="90-90"];
m10_91 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs", label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", span="79-79"];
m10_12 [cluster="object.Equals(object, object)", file="TypeExtensions.cs", label="Entry object.Equals(object, object)", span="0-0"];
m10_18 [cluster="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain.GetHashCode()", file="TypeExtensions.cs", label="Elements.ForEach(combiner.AddFingerprint)", span="83-83"];
m10_49 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", file="TypeExtensions.cs", label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", span="50-50"];
m10_53 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", color=green, community=0, file="TypeExtensions.cs", label="_connection.Verify(x => x.Dispose())", prediction=5, span="61-61"];
m10_52 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", file="TypeExtensions.cs", label="_process.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is EnqueuedState &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ScheduledState.StateName }))))", span="56-59"];
m10_50 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", file="TypeExtensions.cs", label="var scheduler = CreateScheduler()", span="52-52"];
m10_51 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", file="TypeExtensions.cs", label="scheduler.Execute(_context.Object)", span="54-54"];
m10_54 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", file="TypeExtensions.cs", label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", span="50-50"];
m10_0 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs", label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", span="19-19"];
m10_1 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs", label="_context = new BackgroundProcessContextMock()", span="21-21"];
m10_3 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs", label="_connection = new Mock<IStorageConnection>()", span="24-24"];
m10_7 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs", label="_connection.Setup(x => x.CreateWriteTransaction()).Returns(_transaction.Object)", span="29-29"];
m10_2 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs", label="_context.CancellationTokenSource.Cancel()", span="22-22"];
m10_5 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs", label="_process = new Mock<IStateChangeProcess>()", span="27-27"];
m10_6 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs", label="_transaction = new Mock<IWriteOnlyTransaction>()", span="28-28"];
m10_9 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs", label="_connection\r\n                .Setup(x => x.AcquireDistributedLock(''locks:schedulepoller'', It.IsAny<TimeSpan>()))\r\n                .Returns(_distributedLock.Object)", span="32-34"];
m10_10 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs", label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns(JobId)", span="36-37"];
m10_8 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs", label="_distributedLock = new Mock<IDisposable>()", span="31-31"];
m10_11 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs", label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", span="19-19"];
m10_22 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="25-25"];
m10_44 [cluster="Unk.Equal", file="TypeExtensions.cs", label="Entry Unk.Equal", span=""];
m10_13 [cluster="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain.Equals(object)", file="TypeExtensions.cs", label="Entry HangFire.Common.ExpressionUtil.ExpressionFingerprintChain.Equals(object)", span="75-75"];
m10_31 [cluster="Unk.>", file="TypeExtensions.cs", label="Entry Unk.>", span=""];
m10_40 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Ctor_ThrowsAnException_WhenProcessIsNull()", file="TypeExtensions.cs", label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.Ctor_ThrowsAnException_WhenProcessIsNull()", span="41-41"];
m10_41 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Ctor_ThrowsAnException_WhenProcessIsNull()", file="TypeExtensions.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Hangfire.Server.DelayedJobScheduler(Timeout.InfiniteTimeSpan, null))", span="43-44"];
m10_42 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Ctor_ThrowsAnException_WhenProcessIsNull()", file="TypeExtensions.cs", label="Assert.Equal(''process'', exception.ParamName)", span="46-46"];
m10_43 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Ctor_ThrowsAnException_WhenProcessIsNull()", file="TypeExtensions.cs", label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.Ctor_ThrowsAnException_WhenProcessIsNull()", span="41-41"];
m10_36 [cluster="Unk.GetFirstByLowestScoreFromSet", file="TypeExtensions.cs", label="Entry Unk.GetFirstByLowestScoreFromSet", span=""];
m10_23 [cluster="Unk.GetConnection", file="TypeExtensions.cs", label="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain", span=""];
m10_103 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", file="TypeExtensions.cs", label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", span="94-94"];
m10_104 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", file="TypeExtensions.cs", label="var scheduler = CreateScheduler()", span="96-96"];
m10_105 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", file="TypeExtensions.cs", label="scheduler.Execute(_context.Object)", span="98-98"];
m10_106 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", file="TypeExtensions.cs", label="_connection.Verify(x => x.AcquireDistributedLock(It.IsAny<string>(), It.IsAny<TimeSpan>()))", span="100-100"];
m10_107 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", file="TypeExtensions.cs", label="_distributedLock.Verify(x => x.Dispose())", span="101-101"];
m10_108 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", file="TypeExtensions.cs", label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", span="94-94"];
m10_16 [cluster="Unk.Returns", file="TypeExtensions.cs", label="Entry Unk.Returns", span=""];
m10_17 [cluster="Mock<IStateChangeProcess>.cstr", file="TypeExtensions.cs", label="Entry Mock<IStateChangeProcess>.cstr", span=""];
m10_19 [cluster="Mock<IDisposable>.cstr", file="TypeExtensions.cs", label="Entry Mock<IDisposable>.cstr", span=""];
m10_20 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="25-25"];
m10_61 [cluster="Unk.ChangeState", file="TypeExtensions.cs", label="Entry Unk.ChangeState", span=""];
m10_55 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.CreateScheduler()", file="TypeExtensions.cs", label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.CreateScheduler()", span="104-104"];
m10_115 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.CreateScheduler()", file="TypeExtensions.cs", label="return new Hangfire.Server.DelayedJobScheduler(Timeout.InfiniteTimeSpan, _process.Object);", span="106-106"];
m10_116 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.CreateScheduler()", file="TypeExtensions.cs", label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.CreateScheduler()", span="104-104"];
m10_21 [cluster="lambda expression", file="TypeExtensions.cs", label="x.GetConnection()", span="25-25"];
m10_65 [cluster="Unk.SequenceEqual", file="TypeExtensions.cs", label="Entry Unk.SequenceEqual", span=""];
m10_48 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IStateChangeProcess)", file="TypeExtensions.cs", label="Entry Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IStateChangeProcess)", span="45-45"];
m10_15 [cluster="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain.Equals(object)", file="TypeExtensions.cs", label="Exit HangFire.Common.ExpressionUtil.ExpressionFingerprintChain.Equals(object)", span="75-75"];
m10_69 [cluster="Unk.Dispose", file="TypeExtensions.cs", label="Entry Unk.Dispose", span=""];
m10_32 [cluster="Unk.AcquireDistributedLock", file="TypeExtensions.cs", label="Entry Unk.AcquireDistributedLock", span=""];
m10_45 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="44-44"];
m10_66 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="61-61"];
m10_67 [cluster="lambda expression", color=green, community=0, file="TypeExtensions.cs", label="x.Dispose()", prediction=6, span="61-61"];
m10_68 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="61-61"];
m10_58 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="56-59"];
m10_113 [cluster="lambda expression", file="TypeExtensions.cs", label="x.Dispose()", span="101-101"];
m10_24 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="29-29"];
m10_28 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="33-33"];
m10_33 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="36-37"];
m10_76 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="67-68"];
m10_82 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="74-74"];
m10_92 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="82-82"];
m10_95 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="89-89"];
m10_99 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="90-90"];
m10_109 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="100-100"];
m10_112 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="101-101"];
m10_60 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="56-59"];
m10_59 [cluster="lambda expression", file="TypeExtensions.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is EnqueuedState &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ScheduledState.StateName })))", span="56-59"];
m10_114 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="101-101"];
m10_26 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="29-29"];
m10_25 [cluster="lambda expression", file="TypeExtensions.cs", label="x.CreateWriteTransaction()", span="29-29"];
m10_30 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="33-33"];
m10_29 [cluster="lambda expression", file="TypeExtensions.cs", label="x.AcquireDistributedLock(''locks:schedulepoller'', It.IsAny<TimeSpan>())", span="33-33"];
m10_35 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="36-37"];
m10_34 [cluster="lambda expression", file="TypeExtensions.cs", label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="36-37"];
m10_78 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="67-68"];
m10_77 [cluster="lambda expression", file="TypeExtensions.cs", label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="67-68"];
m10_84 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="74-74"];
m10_83 [cluster="lambda expression", file="TypeExtensions.cs", label="x.ChangeState(It.IsAny<StateChangeContext>())", span="74-74"];
m10_93 [cluster="lambda expression", file="TypeExtensions.cs", label="x.ChangeState(It.IsAny<StateChangeContext>())", span="82-82"];
m10_110 [cluster="lambda expression", file="TypeExtensions.cs", label="x.AcquireDistributedLock(It.IsAny<string>(), It.IsAny<TimeSpan>())", span="100-100"];
m10_94 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="82-82"];
m10_97 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="89-89"];
m10_96 [cluster="lambda expression", file="TypeExtensions.cs", label="x.RemoveFromSet(''schedule'', JobId)", span="89-89"];
m10_101 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="90-90"];
m10_100 [cluster="lambda expression", file="TypeExtensions.cs", label="x.Commit()", span="90-90"];
m10_111 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="100-100"];
m10_62 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="56-59"];
m10_37 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="37-37"];
m10_79 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="68-68"];
m10_64 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="56-59"];
m10_63 [cluster="lambda expression", file="TypeExtensions.cs", label="ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is EnqueuedState &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ScheduledState.StateName })", span="57-59"];
m10_39 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="37-37"];
m10_38 [cluster="lambda expression", file="TypeExtensions.cs", label="time > 0", span="37-37"];
m10_81 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="68-68"];
m10_80 [cluster="lambda expression", file="TypeExtensions.cs", label="time > 0", span="68-68"];
m10_46 [cluster="lambda expression", file="TypeExtensions.cs", label="new Hangfire.Server.DelayedJobScheduler(Timeout.InfiniteTimeSpan, null)", span="44-44"];
m10_47 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="44-44"];
m10_57 [cluster="Unk.Verify", file="TypeExtensions.cs", label="Entry Unk.Verify", span=""];
m10_102 [cluster="Unk.Commit", file="TypeExtensions.cs", label="Entry Unk.Commit", span=""];
m10_27 [cluster="Unk.CreateWriteTransaction", file="TypeExtensions.cs", label="Entry Unk.CreateWriteTransaction", span=""];
m10_98 [cluster="Unk.RemoveFromSet", file="TypeExtensions.cs", label="Entry Unk.RemoveFromSet", span=""];
m10_70 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", file="TypeExtensions.cs", label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", span="65-65"];
m10_71 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", file="TypeExtensions.cs", label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns((string)null)", span="67-68"];
m10_72 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", file="TypeExtensions.cs", label="var scheduler = CreateScheduler()", span="69-69"];
m10_73 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", file="TypeExtensions.cs", label="scheduler.Execute(_context.Object)", span="71-71"];
m10_74 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", file="TypeExtensions.cs", label="_process.Verify(\r\n                x => x.ChangeState(It.IsAny<StateChangeContext>()),\r\n                Times.Never)", span="73-75"];
m10_75 [cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", file="TypeExtensions.cs", label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", span="65-65"];
m10_117 [cluster="Hangfire.Server.DelayedJobScheduler.cstr", file="TypeExtensions.cs", label="Entry Hangfire.Server.DelayedJobScheduler.cstr", span=""];
m10_56 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="TypeExtensions.cs", label="Entry Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="53-53"];
m10_14 [cluster="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain.Equals(object)", file="TypeExtensions.cs", label="return Equals(obj as ExpressionFingerprintChain);", span="77-77"];
m10_118 [file="TypeExtensions.cs", label="Hangfire.Core.Tests.Server.DelayedJobScheduler", span=""];
m0_4 -> m0_11  [color=darkseagreen4, key=1, label="HangFire.States.ElectStateContext", style=dashed];
m0_4 -> m0_14  [color=darkseagreen4, key=1, label="HangFire.States.ElectStateContext", style=dashed];
m0_4 -> m0_16  [color=darkseagreen4, key=1, label="HangFire.States.ElectStateContext", style=dashed];
m0_5 -> m0_14  [color=darkseagreen4, key=1, label=failedState, style=dashed];
m0_5 -> m0_16  [color=darkseagreen4, key=1, label=failedState, style=dashed];
m0_8 -> m0_11  [color=darkseagreen4, key=1, label=retryAttempt, style=dashed];
m0_8 -> m0_14  [color=darkseagreen4, key=1, label=retryAttempt, style=dashed];
m0_10 -> m0_14  [color=darkseagreen4, key=1, label=delay, style=dashed];
m0_33 -> m0_9  [color=darkseagreen4, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m0_33 -> m0_13  [color=darkseagreen4, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m0_33 -> m0_14  [color=darkseagreen4, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m0_33 -> m0_15  [color=darkseagreen4, key=1, label="HangFire.AutomaticRetryAttribute", style=dashed];
m1_24 -> m1_27  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_10 -> m1_10  [color=green, key=1, label=elapsedTime, style=dashed];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="Hangfire.DashboardOptions", style=dashed];
m1_0 -> m1_4  [color=darkseagreen4, key=1, label="Hangfire.DashboardOptions", style=dashed];
m2_28 -> m2_36  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m2_28 -> m2_37  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_28 -> m2_30  [color=darkseagreen4, key=1, label="HangFire.Storage.InvocationData", style=dashed];
m2_28 -> m2_31  [color=darkseagreen4, key=1, label="HangFire.Storage.InvocationData", style=dashed];
m2_28 -> m2_32  [color=darkseagreen4, key=1, label="HangFire.Storage.InvocationData", style=dashed];
m2_28 -> m2_33  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m2_28 -> m2_34  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m2_28 -> m2_49  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m2_28 -> m2_53  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_36 -> m2_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_37 -> m2_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_35 -> m2_37  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_35 -> m2_38  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_29 -> m2_36  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_29 -> m2_37  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_29 -> m2_49  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_29 -> m2_53  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_29 -> m2_39  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_134 -> m2_136  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_134 -> m2_137  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_134 -> m2_138  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_134 -> m2_142  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_134 -> m2_146  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_134 -> m2_150  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_136 -> m2_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_137 -> m2_145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_138 -> m2_149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_135 -> m2_137  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_135 -> m2_138  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_135 -> m2_139  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_99 -> m2_111  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_106 -> m2_122  [color=green, key=1, label="lambda expression", style=dashed];
m2_106 -> m2_127  [color=green, key=1, label="lambda expression", style=dashed];
m2_101 -> m2_106  [color=green, key=1, label=heartbeats, style=dashed];
m2_101 -> m2_128  [color=green, key=1, label=heartbeats, style=dashed];
m2_101 -> m2_109  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m2_103 -> m2_106  [color=green, key=1, label=pipeline, style=dashed];
m2_103 -> m2_107  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m2_105 -> m2_128  [color=green, key=1, label=name, style=dashed];
m2_105 -> m2_123  [color=darkseagreen4, key=1, label=name, style=dashed];
m2_100 -> m2_104  [color=darkseagreen4, key=1, label=serverNames, style=dashed];
m2_102 -> m2_111  [color=darkseagreen4, key=1, label=utcNow, style=dashed];
m2_108 -> m2_113  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m2_108 -> m2_114  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m2_113 -> m2_113  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m2_113 -> m2_114  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m2_110 -> m2_112  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m2_112 -> m2_112  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m2_56 -> m2_58  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_56 -> m2_59  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_56 -> m2_62  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_56 -> m2_70  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_56 -> m2_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_56 -> m2_60  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m2_56 -> m2_75  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_58 -> m2_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_59 -> m2_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_62 -> m2_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_57 -> m2_59  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_57 -> m2_62  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_57 -> m2_63  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_61 -> m2_75  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m2_81 -> m2_83  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_81 -> m2_84  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_81 -> m2_88  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_81 -> m2_92  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_83 -> m2_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_84 -> m2_91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_82 -> m2_84  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_82 -> m2_85  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_160 -> m2_128  [color=green, key=1, label=name, style=dashed];
m2_160 -> m2_123  [color=darkseagreen4, key=1, label=name, style=dashed];
m2_161 -> m2_128  [color=green, key=1, label=heartbeats, style=dashed];
m2_152 -> m2_9  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m2_152 -> m2_13  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m2_152 -> m2_18  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m2_152 -> m2_23  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m2_152 -> m2_79  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m2_152 -> m2_96  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m2_152 -> m2_112  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m2_156 -> m2_70  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_156 -> m2_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_156 -> m2_75  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_157 -> m2_70  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_153 -> m2_49  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m2_154 -> m2_49  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_154 -> m2_53  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_155 -> m2_53  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_158 -> m2_75  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m2_159 -> m2_88  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_159 -> m2_92  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_162 -> m2_142  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_163 -> m2_142  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_163 -> m2_146  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_163 -> m2_150  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_7 -> m5_4  [color=darkseagreen4, key=1, label="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint", style=dashed];
m8_0 -> m8_2  [color=darkseagreen4, key=1, label="HangFire.Storage.IWriteOnlyTransaction", style=dashed];
m9_630 -> m9_632  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_700 -> m9_702  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_96 -> m9_112  [color=darkseagreen4, key=1, label=releaseLock, style=dashed];
m9_96 -> m9_117  [color=darkseagreen4, key=1, label=releaseLock, style=dashed];
m9_96 -> m9_102  [color=darkseagreen4, key=1, label=releaseLock, style=dashed];
m9_97 -> m9_112  [color=darkseagreen4, key=1, label=lockAcquired, style=dashed];
m9_97 -> m9_116  [color=darkseagreen4, key=1, label=lockAcquired, style=dashed];
m9_97 -> m9_100  [color=darkseagreen4, key=1, label=lockAcquired, style=dashed];
m9_98 -> m9_103  [color=darkseagreen4, key=1, label=thread, style=dashed];
m9_101 -> m9_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_889 -> m9_891  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_543 -> m9_545  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_429 -> m9_431  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_817 -> m9_819  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_746 -> m9_748  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_943 -> m9_945  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_336 -> m9_338  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_409 -> m9_411  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_370 -> m9_372  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_126 -> m9_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_935 -> m9_937  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_274 -> m9_276  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_961 -> m9_963  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_86 -> m9_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_798 -> m9_800  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_347 -> m9_349  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_418 -> m9_420  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_495 -> m9_497  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_851 -> m9_853  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_305 -> m9_307  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_737 -> m9_739  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_216 -> m9_218  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_925 -> m9_927  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_467 -> m9_469  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_391 -> m9_393  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_316 -> m9_318  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_969 -> m9_971  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_644 -> m9_646  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_575 -> m9_577  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_284 -> m9_286  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_654 -> m9_656  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_505 -> m9_509  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m9_506 -> m9_508  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_16 -> m9_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_662 -> m9_664  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_860 -> m9_862  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_790 -> m9_792  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_871 -> m9_873  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_29 -> m9_32  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_30 -> m9_32  [color=darkseagreen4, key=1, label=token, style=dashed];
m9_30 -> m9_33  [color=darkseagreen4, key=1, label=token, style=dashed];
m9_30 -> m9_39  [color=darkseagreen4, key=1, label=token, style=dashed];
m9_31 -> m9_33  [color=darkseagreen4, key=1, label=queues, style=dashed];
m9_31 -> m9_39  [color=darkseagreen4, key=1, label=queues, style=dashed];
m9_33 -> m9_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_46 -> m9_50  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_46 -> m9_54  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_47 -> m9_50  [color=darkseagreen4, key=1, label=token, style=dashed];
m9_47 -> m9_54  [color=darkseagreen4, key=1, label=token, style=dashed];
m9_50 -> m9_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_77 -> m9_82  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_78 -> m9_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_112 -> m9_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_119 -> m9_123  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_120 -> m9_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_138 -> m9_140  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_147 -> m9_152  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_148 -> m9_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_159 -> m9_164  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_160 -> m9_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_164 -> m9_167  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_175 -> m9_181  [color=darkseagreen4, key=1, label=createdAt, style=dashed];
m9_175 -> m9_190  [color=darkseagreen4, key=1, label=createdAt, style=dashed];
m9_175 -> m9_191  [color=darkseagreen4, key=1, label=createdAt, style=dashed];
m9_176 -> m9_206  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_176 -> m9_178  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_176 -> m9_180  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_179 -> m9_181  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m9_179 -> m9_182  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m9_179 -> m9_183  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m9_179 -> m9_190  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m9_179 -> m9_191  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m9_192 -> m9_209  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_192 -> m9_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_192 -> m9_194  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m9_186 -> m9_188  [color=darkseagreen4, key=1, label=job, style=dashed];
m9_186 -> m9_189  [color=darkseagreen4, key=1, label=job, style=dashed];
m9_220 -> m9_224  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_221 -> m9_227  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_221 -> m9_230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_236 -> m9_240  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_237 -> m9_239  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_256 -> m9_270  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_258 -> m9_260  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_258 -> m9_261  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_258 -> m9_262  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_258 -> m9_263  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_258 -> m9_264  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_258 -> m9_265  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_276 -> m9_280  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_277 -> m9_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_297 -> m9_299  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_297 -> m9_300  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_297 -> m9_301  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_310 -> m9_312  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_327 -> m9_332  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_328 -> m9_331  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_338 -> m9_343  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_339 -> m9_342  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_349 -> m9_352  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_360 -> m9_363  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_360 -> m9_364  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_362 -> m9_364  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_372 -> m9_375  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_382 -> m9_387  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_383 -> m9_386  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_393 -> m9_398  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_394 -> m9_397  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_420 -> m9_425  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_421 -> m9_424  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_431 -> m9_435  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_432 -> m9_434  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_457 -> m9_462  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_458 -> m9_461  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_469 -> m9_474  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_470 -> m9_473  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_479 -> m9_481  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_479 -> m9_487  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_482 -> m9_484  [color=darkseagreen4, key=1, label=server, style=dashed];
m9_482 -> m9_485  [color=darkseagreen4, key=1, label=server, style=dashed];
m9_488 -> m9_490  [color=darkseagreen4, key=1, label=sameServer, style=dashed];
m9_497 -> m9_501  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_498 -> m9_500  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_508 -> m9_510  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_518 -> m9_522  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_519 -> m9_521  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_529 -> m9_531  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_532 -> m9_536  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_532 -> m9_539  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_532 -> m9_534  [color=darkseagreen4, key=1, label=servers, style=dashed];
m9_545 -> m9_549  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_546 -> m9_548  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_556 -> m9_558  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_567 -> m9_571  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_568 -> m9_570  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_578 -> m9_580  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_588 -> m9_590  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_588 -> m9_591  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_596 -> m9_601  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_597 -> m9_600  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_607 -> m9_612  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_608 -> m9_611  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_619 -> m9_623  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_619 -> m9_626  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_619 -> m9_621  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_634 -> m9_637  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_634 -> m9_640  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_646 -> m9_650  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_647 -> m9_649  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_666 -> m9_668  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_666 -> m9_669  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_666 -> m9_670  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_675 -> m9_679  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_676 -> m9_678  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_702 -> m9_706  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_703 -> m9_705  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_721 -> m9_725  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_722 -> m9_724  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_756 -> m9_760  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_757 -> m9_759  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_782 -> m9_786  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_783 -> m9_785  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_802 -> m9_804  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_809 -> m9_813  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_810 -> m9_812  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_835 -> m9_839  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_836 -> m9_838  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_855 -> m9_857  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_862 -> m9_867  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_863 -> m9_866  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_873 -> m9_878  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_874 -> m9_877  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_899 -> m9_904  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_900 -> m9_903  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_927 -> m9_931  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_928 -> m9_930  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_953 -> m9_957  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_954 -> m9_956  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_973 -> m9_975  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_477 -> m9_479  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_772 -> m9_774  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_455 -> m9_457  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_565 -> m9_567  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_325 -> m9_327  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_244 -> m9_246  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_57 -> m9_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_401 -> m9_403  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_977 -> m9_981  [color=darkseagreen4, key=1, label="System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>", style=dashed];
m9_978 -> m9_981  [color=darkseagreen4, key=1, label=sqlConnection, style=dashed];
m9_615 -> m9_617  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_807 -> m9_809  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_594 -> m9_596  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_3 -> m9_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_157 -> m9_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_691 -> m9_693  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_843 -> m9_845  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_554 -> m9_556  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_833 -> m9_835  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_292 -> m9_294  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_881 -> m9_883  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_43 -> m9_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_172 -> m9_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_754 -> m9_756  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_26 -> m9_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_584 -> m9_586  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_136 -> m9_138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_605 -> m9_607  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_764 -> m9_766  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_780 -> m9_782  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_28 -> m9_991  [color=darkseagreen4, key=1, label="System.Action<Hangfire.SqlServer.SqlServerConnection>", style=dashed];
m9_989 -> m9_996  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_719 -> m9_721  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_897 -> m9_899  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_380 -> m9_382  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_917 -> m9_919  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_145 -> m9_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_729 -> m9_731  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_951 -> m9_953  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_66 -> m9_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_673 -> m9_675  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_445 -> m9_449  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m9_446 -> m9_448  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_711 -> m9_713  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_358 -> m9_360  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_526 -> m9_530  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m9_527 -> m9_529  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_908 -> m9_910  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_75 -> m9_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_253 -> m9_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_516 -> m9_518  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_825 -> m9_827  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_234 -> m9_236  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_438 -> m9_440  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_683 -> m9_685  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_1000 -> m9_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_33  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_49  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_112  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_101  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_136  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_234  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_274  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_429  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_495  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_516  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_543  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_565  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_644  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_673  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_700  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_719  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_754  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_780  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_807  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_833  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_925  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_951  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1000 -> m9_989  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_1001 -> m9_39  [color=darkseagreen4, key=1, label=token, style=dashed];
m9_1002 -> m9_39  [color=darkseagreen4, key=1, label=queues, style=dashed];
m9_1003 -> m9_54  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1004 -> m9_54  [color=darkseagreen4, key=1, label=token, style=dashed];
m9_1005 -> m9_82  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1006 -> m9_112  [color=darkseagreen4, key=1, label=releaseLock, style=dashed];
m9_1006 -> m9_117  [color=darkseagreen4, key=1, label=releaseLock, style=dashed];
m9_1007 -> m9_112  [color=darkseagreen4, key=1, label=lockAcquired, style=dashed];
m9_1007 -> m9_116  [color=darkseagreen4, key=1, label=lockAcquired, style=dashed];
m9_1008 -> m9_123  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1009 -> m9_152  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1010 -> m9_164  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1011 -> m9_240  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1013 -> m9_280  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1017 -> m9_332  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1018 -> m9_343  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1022 -> m9_387  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1023 -> m9_398  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1025 -> m9_425  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1026 -> m9_435  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1027 -> m9_449  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m9_1028 -> m9_462  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1029 -> m9_474  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1030 -> m9_501  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1031 -> m9_509  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m9_1032 -> m9_522  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1033 -> m9_530  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m9_1034 -> m9_549  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1036 -> m9_571  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1038 -> m9_601  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1039 -> m9_612  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1040 -> m9_650  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1042 -> m9_679  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1044 -> m9_706  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1046 -> m9_725  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1049 -> m9_760  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1051 -> m9_786  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1053 -> m9_813  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1055 -> m9_839  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1057 -> m9_867  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1058 -> m9_878  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1060 -> m9_904  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1062 -> m9_931  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m9_1064 -> m9_957  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m10_86 -> m10_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_89 -> m10_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_90 -> m10_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_53 -> m10_66  [color=green, key=1, label="lambda expression", style=dashed];
m10_52 -> m10_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_0 -> m10_7  [color=darkseagreen4, key=1, label="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain", style=dashed];
m10_7 -> m10_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_5 -> m10_7  [color=darkseagreen4, key=1, label=i, style=dashed];
m10_5 -> m10_9  [color=darkseagreen4, key=1, label=i, style=dashed];
m10_9 -> m10_9  [color=darkseagreen4, key=1, label=i, style=dashed];
m10_9 -> m10_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_10 -> m10_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_41 -> m10_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_23 -> m10_7  [color=darkseagreen4, key=1, label="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain", style=dashed];
m10_23 -> m10_14  [color=darkseagreen4, key=1, label="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain", style=dashed];
m10_23 -> m10_18  [color=darkseagreen4, key=1, label="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain", style=dashed];
m10_106 -> m10_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_107 -> m10_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_17 -> m10_19  [color=darkseagreen4, key=1, label=combiner, style=dashed];
m10_59 -> m10_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_34 -> m10_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_77 -> m10_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_71 -> m10_76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_74 -> m10_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_118 -> m10_53  [color=green, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_2  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_9  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_10  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_51  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_52  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_71  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_73  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_74  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_86  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_88  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_89  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_90  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_105  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_106  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_107  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
m10_118 -> m10_115  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.DelayedJobScheduler", style=dashed];
}
