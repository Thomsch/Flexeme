digraph  {
n4 [label="Hangfire.Server.ServerWatchdogOptions", span=""];
n0 [label="Entry Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="23-23", cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()"];
n1 [label="ServerTimeout = ServerWatchdog.DefaultServerTimeout", span="25-25", cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()"];
n2 [label="CheckInterval = ServerWatchdog.DefaultCheckInterval", span="26-26", cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()"];
n3 [label="Exit Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="23-23", cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()"];
m0_25 [label="Entry Unk.ErrorFormat", span="", cluster="Unk.ErrorFormat", file="BackgroundJobServer.cs"];
m0_4 [label="Entry HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", span="35-35", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_5 [label="var failedState = context.CandidateState as FailedState", span="37-37", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_8 [label="var retryAttempt = context.GetJobParameter<int>(''RetryCount'') + 1", span="44-44", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_11 [label="context.SetJobParameter(''RetryCount'', retryAttempt)", span="50-50", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_12 [label="context.CandidateState = new ScheduledState(delay)\r\n                {\r\n                    Reason = String.Format(''Retry attempt {0} of {1}'', retryAttempt, Attempts)\r\n                }", span="54-57", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_14 [label="Logger.WarnFormat(\r\n                        ''Failed to process the job '{0}': an exception occurred. Retry attempt {1} of {2} will be performed in {3}.'',\r\n                        failedState.Exception,\r\n                        context.JobId,\r\n                        retryAttempt,\r\n                        Attempts,\r\n                        delay)", span="61-67", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_16 [label="Logger.ErrorFormat(\r\n                        ''Failed to process the job '{0}': an exception occurred.'',\r\n                        failedState.Exception,\r\n                        context.JobId)", span="74-77", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_6 [label="failedState == null", span="38-38", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_7 [label="return;", span="41-41", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_9 [label="retryAttempt <= Attempts", span="46-46", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_10 [label="var delay = TimeSpan.FromSeconds(SecondsToDelay(retryAttempt))", span="48-48", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_15 [label=LogEvents, span="72-72", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_13 [label=LogEvents, span="59-59", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_17 [label="Exit HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", span="35-35", cluster="HangFire.AutomaticRetryAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="BackgroundJobServer.cs"];
m0_23 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="BackgroundJobServer.cs"];
m0_0 [label="Entry HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", span="14-14", cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="BackgroundJobServer.cs"];
m0_1 [label="Attempts = DefaultRetryAttempts", span="16-16", cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="BackgroundJobServer.cs"];
m0_2 [label="LogEvents = true", span="17-17", cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="BackgroundJobServer.cs"];
m0_3 [label="Exit HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", span="14-14", cluster="HangFire.AutomaticRetryAttribute.AutomaticRetryAttribute()", file="BackgroundJobServer.cs"];
m0_22 [label="Entry HangFire.States.ScheduledState.ScheduledState(System.TimeSpan)", span="27-27", cluster="HangFire.States.ScheduledState.ScheduledState(System.TimeSpan)", file="BackgroundJobServer.cs"];
m0_18 [label="Entry HangFire.States.ElectStateContext.GetJobParameter<T>(string)", span="54-54", cluster="HangFire.States.ElectStateContext.GetJobParameter<T>(string)", file="BackgroundJobServer.cs"];
m0_20 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="BackgroundJobServer.cs"];
m0_29 [label="Entry System.Random.Random()", span="0-0", cluster="System.Random.Random()", file="BackgroundJobServer.cs"];
m0_19 [label="Entry HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", span="83-83", cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="BackgroundJobServer.cs"];
m0_26 [label="var random = new Random()", span="85-85", cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="BackgroundJobServer.cs"];
m0_27 [label="return (int)Math.Round(\r\n                Math.Pow(retryCount - 1, 4) + 15 + (random.Next(30) * (retryCount)));", span="86-87", cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", color=red, community=0, file="BackgroundJobServer.cs"];
m0_28 [label="Exit HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", span="83-83", cluster="HangFire.AutomaticRetryAttribute.SecondsToDelay(long)", file="BackgroundJobServer.cs"];
m0_24 [label="Entry Unk.WarnFormat", span="", cluster="Unk.WarnFormat", file="BackgroundJobServer.cs"];
m0_31 [label="Entry System.Random.Next(int)", span="0-0", cluster="System.Random.Next(int)", file="BackgroundJobServer.cs"];
m0_32 [label="Entry System.Math.Round(double)", span="0-0", cluster="System.Math.Round(double)", file="BackgroundJobServer.cs"];
m0_30 [label="Entry System.Math.Pow(double, double)", span="0-0", cluster="System.Math.Pow(double, double)", file="BackgroundJobServer.cs"];
m0_21 [label="Entry HangFire.States.ElectStateContext.SetJobParameter<T>(string, T)", span="49-49", cluster="HangFire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="BackgroundJobServer.cs"];
m0_33 [label="HangFire.AutomaticRetryAttribute", span="", file="BackgroundJobServer.cs"];
m1_20 [label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55", cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="DashboardContext.cs"];
m1_21 [label="return FromTimestamp(long.Parse(value));", span="57-57", cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="DashboardContext.cs"];
m1_22 [label="Exit HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55", cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="DashboardContext.cs"];
m1_8 [label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="39-39", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="DashboardContext.cs"];
m1_19 [label="Entry long.ToString()", span="0-0", cluster="long.ToString()", file="DashboardContext.cs"];
m1_23 [label="Entry long.Parse(string)", span="0-0", cluster="long.Parse(string)", file="DashboardContext.cs"];
m1_24 [label="Entry HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="60-60", cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="DashboardContext.cs"];
m1_27 [label="return FromStringTimestamp(value);", span="67-67", cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="DashboardContext.cs"];
m1_25 [label="String.IsNullOrEmpty(value)", span="62-62", cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="DashboardContext.cs"];
m1_26 [label="return null;", span="64-64", cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="DashboardContext.cs"];
m1_28 [label="Exit HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="60-60", cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="DashboardContext.cs"];
m1_9 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", color=green, community=0, file="DashboardContext.cs"];
m1_10 [label="Hangfire.Dashboard.DashboardContext", span="", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", color=green, community=0, file="DashboardContext.cs"];
m1_11 [label="Exit HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="39-39", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="DashboardContext.cs"];
m1_29 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="DashboardContext.cs"];
m1_15 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)", file="DashboardContext.cs"];
m1_0 [label="Entry Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", span="24-24", cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs"];
m1_1 [label="storage == null", span="26-26", cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs"];
m1_2 [label="throw new ArgumentNullException(nameof(storage));", span="26-26", cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs"];
m1_3 [label="options == null", span="27-27", cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs"];
m1_4 [label="throw new ArgumentNullException(nameof(options));", span="27-27", cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs"];
m1_5 [label="Storage = storage", span="29-29", cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs"];
m1_6 [label="Options = options", span="30-30", cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs"];
m1_7 [label="Exit Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", span="24-24", cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="DashboardContext.cs"];
m1_12 [label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="45-45", cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="DashboardContext.cs"];
m1_13 [label="return Epoch.AddSeconds(value);", span="47-47", cluster="HangFire.Common.JobHelper.FromTimestamp(long)", color=green, community=0, file="DashboardContext.cs"];
m1_14 [label="Exit HangFire.Common.JobHelper.FromTimestamp(long)", span="45-45", cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="DashboardContext.cs"];
m1_16 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="DashboardContext.cs"];
m1_17 [label="return ToTimestamp(value).ToString();", span="52-52", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="DashboardContext.cs"];
m1_18 [label="Exit HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="DashboardContext.cs"];
m2_73 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="DashboardRoutes.cs"];
m2_132 [label="Entry Unk.FromNullableStringTimestamp", span="", cluster="Unk.FromNullableStringTimestamp", file="DashboardRoutes.cs"];
m2_20 [label="Entry HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", span="17-17", cluster="HangFire.Redis.RedisJobFetcher.RedisJobFetcher(IRedisClient, System.Collections.Generic.IEnumerable<string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_51 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="DashboardRoutes.cs"];
m2_26 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="DashboardRoutes.cs"];
m2_12 [label="Entry HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", span="29-29", cluster="HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", file="DashboardRoutes.cs"];
m2_13 [label="return new RedisWriteOnlyTransaction(_redis.CreateTransaction());", span="31-31", cluster="HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", file="DashboardRoutes.cs"];
m2_14 [label="Exit HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", span="29-29", cluster="HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", file="DashboardRoutes.cs"];
m2_6 [label="Entry HangFire.Redis.DataTypes.RedisJob.RedisJob(IRedisClient)", span="12-12", cluster="HangFire.Redis.DataTypes.RedisJob.RedisJob(IRedisClient)", file="DashboardRoutes.cs"];
m2_131 [label="Entry Unk.FromStringTimestamp", span="", cluster="Unk.FromStringTimestamp", file="DashboardRoutes.cs"];
m2_98 [label="Entry Unk.SetEntryInHash", span="", cluster="Unk.SetEntryInHash", file="DashboardRoutes.cs"];
m2_68 [label="Entry Unk.AddItemToSet", span="", cluster="Unk.AddItemToSet", file="DashboardRoutes.cs"];
m2_25 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="DashboardRoutes.cs"];
m2_148 [label="Entry Unk.RemoveEntryFromHash", span="", cluster="Unk.RemoveEntryFromHash", file="DashboardRoutes.cs"];
m2_94 [label="Entry Unk.RemoveEntry", span="", cluster="Unk.RemoveEntry", file="DashboardRoutes.cs"];
m2_28 [label="Entry HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="50-50", cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_36 [label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    parameters))", span="66-68", cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_37 [label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn))", span="70-72", cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_35 [label="var transaction = _redis.CreateTransaction()", span="64-64", cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_29 [label="var jobId = Guid.NewGuid().ToString()", span="56-56", cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_38 [label="transaction.Commit()", span="75-75", cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_34 [label="parameters.Add(''CreatedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="62-62", cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_30 [label="parameters.Add(''Type'', invocationData.Type)", span="58-58", cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_31 [label="parameters.Add(''Method'', invocationData.Method)", span="59-59", cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_32 [label="parameters.Add(''ParameterTypes'', invocationData.ParameterTypes)", span="60-60", cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_33 [label="parameters.Add(''Arguments'', JobHelper.ToJson(arguments))", span="61-61", cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_39 [label="return jobId;", span="78-78", cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_40 [label="Exit HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="50-50", cluster="HangFire.Redis.RedisStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="DashboardRoutes.cs"];
m2_95 [label="Entry HangFire.Redis.RedisStorageConnection.Heartbeat(string)", span="129-129", cluster="HangFire.Redis.RedisStorageConnection.Heartbeat(string)", file="DashboardRoutes.cs"];
m2_96 [label="_redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="131-134", cluster="HangFire.Redis.RedisStorageConnection.Heartbeat(string)", file="DashboardRoutes.cs"];
m2_97 [label="Exit HangFire.Redis.RedisStorageConnection.Heartbeat(string)", span="129-129", cluster="HangFire.Redis.RedisStorageConnection.Heartbeat(string)", file="DashboardRoutes.cs"];
m2_7 [label="Entry HangFire.Redis.DataTypes.RedisSet.RedisSet(IRedisClient)", span="11-11", cluster="HangFire.Redis.DataTypes.RedisSet.RedisSet(IRedisClient)", file="DashboardRoutes.cs"];
m2_21 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="DashboardRoutes.cs"];
m2_55 [label="Entry Unk.ExpireEntryIn", span="", cluster="Unk.ExpireEntryIn", file="DashboardRoutes.cs"];
m2_0 [label="Entry HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", span="15-15", cluster="HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", file="DashboardRoutes.cs"];
m2_1 [label="_redis = redis", span="17-17", cluster="HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", file="DashboardRoutes.cs"];
m2_2 [label="Jobs = new RedisJob(redis)", span="19-19", cluster="HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", file="DashboardRoutes.cs"];
m2_3 [label="Sets = new RedisSet(redis)", span="20-20", cluster="HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", file="DashboardRoutes.cs"];
m2_4 [label="Storage = storage", span="21-21", cluster="HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", file="DashboardRoutes.cs"];
m2_5 [label="Exit HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", span="15-15", cluster="HangFire.Redis.RedisStorageConnection.RedisStorageConnection(HangFire.Redis.RedisStorage, IRedisClient)", file="DashboardRoutes.cs"];
m2_134 [label="Entry HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", span="180-180", cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs"];
m2_136 [label="transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    jobId,\r\n                    -1))", span="187-190", cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs"];
m2_137 [label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Fetched''))", span="192-194", cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs"];
m2_138 [label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Checked''))", span="195-197", cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs"];
m2_135 [label="var transaction = redis.CreateTransaction()", span="185-185", cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs"];
m2_139 [label="transaction.Commit()", span="199-199", cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs"];
m2_140 [label="Exit HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", span="180-180", cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="DashboardRoutes.cs"];
m2_118 [label="Entry Unk.Flush", span="", cluster="Unk.Flush", file="DashboardRoutes.cs"];
m2_42 [label="Entry System.Guid.ToString()", span="0-0", cluster="System.Guid.ToString()", file="DashboardRoutes.cs"];
m2_15 [label="Entry RedisWriteOnlyTransaction.cstr", span="", cluster="RedisWriteOnlyTransaction.cstr", file="DashboardRoutes.cs"];
m2_133 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="DashboardRoutes.cs"];
m2_121 [label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0", cluster="System.DateTime.Add(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_99 [label="Entry HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="137-137", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_106 [label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat''),\r\n                        x => heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1]))))", span="150-158", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", color=green, community=0, file="DashboardRoutes.cs"];
m2_101 [label="var heartbeats = new Dictionary<string, Tuple<DateTime, DateTime?>>()", span="140-140", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_103 [label="var pipeline = _redis.CreatePipeline()", span="144-144", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_105 [label="var name = serverName", span="148-148", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_104 [label=serverNames, span="146-146", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_100 [label="var serverNames = _redis.GetAllItemsFromSet(RedisStorage.Prefix + ''servers'')", span="139-139", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_102 [label="var utcNow = DateTime.UtcNow", span="142-142", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_109 [label=heartbeats, span="165-165", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_107 [label="pipeline.Flush()", span="161-161", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_111 [label="utcNow > maxTime.Add(timeOut)", span="170-170", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_108 [label="var removedServerCount = 0", span="164-164", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_113 [label="removedServerCount++", span="173-173", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_110 [label="var maxTime = new DateTime(\r\n                    Math.Max(heartbeat.Value.Item1.Ticks, (heartbeat.Value.Item2 ?? DateTime.MinValue).Ticks))", span="167-168", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_114 [label="return removedServerCount;", span="177-177", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_112 [label="RemoveServer(_redis, heartbeat.Key)", span="172-172", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_115 [label="Exit HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="137-137", cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="DashboardRoutes.cs"];
m2_72 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="DashboardRoutes.cs"];
m2_130 [label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0", cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="DashboardRoutes.cs"];
m2_56 [label="Entry HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="81-81", cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs"];
m2_58 [label="transaction.QueueCommand(x => x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId))", span="85-86", cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs"];
m2_59 [label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', workerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        }))", span="88-94", cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs"];
m2_62 [label="transaction.QueueCommand(x => x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1))", span="99-101", cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs"];
m2_57 [label="var transaction = _redis.CreateTransaction()", span="83-83", cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs"];
m2_60 [label=queues, span="96-96", cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs"];
m2_61 [label="var queue1 = queue", span="98-98", cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs"];
m2_63 [label="transaction.Commit()", span="104-104", cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs"];
m2_64 [label="Exit HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="81-81", cluster="HangFire.Redis.RedisStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs"];
m2_77 [label="Entry Unk.AddItemToList", span="", cluster="Unk.AddItemToList", file="DashboardRoutes.cs"];
m2_11 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="DashboardRoutes.cs"];
m2_119 [label="Entry System.DateTime.DateTime(long)", span="0-0", cluster="System.DateTime.DateTime(long)", file="DashboardRoutes.cs"];
m2_90 [label="Entry Unk.RemoveItemFromSet", span="", cluster="Unk.RemoveItemFromSet", file="DashboardRoutes.cs"];
m2_120 [label="Entry System.Math.Max(long, long)", span="0-0", cluster="System.Math.Max(long, long)", file="DashboardRoutes.cs"];
m2_8 [label="Entry HangFire.Redis.RedisStorageConnection.Dispose()", span="24-24", cluster="HangFire.Redis.RedisStorageConnection.Dispose()", file="DashboardRoutes.cs"];
m2_9 [label="_redis.Dispose()", span="26-26", cluster="HangFire.Redis.RedisStorageConnection.Dispose()", file="DashboardRoutes.cs"];
m2_10 [label="Exit HangFire.Redis.RedisStorageConnection.Dispose()", span="24-24", cluster="HangFire.Redis.RedisStorageConnection.Dispose()", file="DashboardRoutes.cs"];
m2_150 [label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Checked'')", span="195-197", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_122 [label="Entry lambda expression", span="151-153", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_127 [label="Entry lambda expression", span="154-158", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_128 [label="heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1])))", span="154-158", cluster="lambda expression", color=green, community=0, file="DashboardRoutes.cs"];
m2_129 [label="Exit lambda expression", span="154-158", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_123 [label="x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat'')", span="151-153", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_124 [label="Exit lambda expression", span="151-153", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_70 [label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', workerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        })", span="88-94", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_48 [label="Entry lambda expression", span="66-68", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_52 [label="Entry lambda expression", span="70-72", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_65 [label="Entry lambda expression", span="85-86", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_69 [label="Entry lambda expression", span="88-94", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_74 [label="Entry lambda expression", span="99-101", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_87 [label="Entry lambda expression", span="117-119", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_91 [label="Entry lambda expression", span="121-123", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_141 [label="Entry lambda expression", span="187-190", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_145 [label="Entry lambda expression", span="192-194", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_149 [label="Entry lambda expression", span="195-197", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_71 [label="Exit lambda expression", span="88-94", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_49 [label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    parameters)", span="66-68", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_53 [label="x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn)", span="70-72", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_50 [label="Exit lambda expression", span="66-68", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_54 [label="Exit lambda expression", span="70-72", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_66 [label="x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId)", span="85-86", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_75 [label="x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1)", span="99-101", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_67 [label="Exit lambda expression", span="85-86", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_76 [label="Exit lambda expression", span="99-101", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_88 [label="x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId)", span="117-119", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_92 [label="x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId))", span="121-123", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_89 [label="Exit lambda expression", span="117-119", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_93 [label="Exit lambda expression", span="121-123", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_142 [label="x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    jobId,\r\n                    -1)", span="187-190", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_146 [label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    ''Fetched'')", span="192-194", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_143 [label="Exit lambda expression", span="187-190", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_147 [label="Exit lambda expression", span="192-194", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_151 [label="Exit lambda expression", span="195-197", cluster="lambda expression", file="DashboardRoutes.cs"];
m2_45 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="DashboardRoutes.cs"];
m2_78 [label="Entry HangFire.Redis.RedisStorageConnection.RemoveServer(string)", span="108-108", cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(string)", file="DashboardRoutes.cs"];
m2_79 [label="RemoveServer(_redis, serverId)", span="110-110", cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(string)", file="DashboardRoutes.cs"];
m2_80 [label="Exit HangFire.Redis.RedisStorageConnection.RemoveServer(string)", span="108-108", cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(string)", file="DashboardRoutes.cs"];
m2_144 [label="Entry Unk.RemoveItemFromList", span="", cluster="Unk.RemoveItemFromList", file="DashboardRoutes.cs"];
m2_117 [label="Entry Unk.CreatePipeline", span="", cluster="Unk.CreatePipeline", file="DashboardRoutes.cs"];
m2_41 [label="Entry System.Guid.NewGuid()", span="0-0", cluster="System.Guid.NewGuid()", file="DashboardRoutes.cs"];
m2_44 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="DashboardRoutes.cs"];
m2_47 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="DashboardRoutes.cs"];
m2_116 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="DashboardRoutes.cs"];
m2_81 [label="Entry HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", span="113-113", cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="DashboardRoutes.cs"];
m2_83 [label="transaction.QueueCommand(x => x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId))", span="117-119", cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="DashboardRoutes.cs"];
m2_84 [label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId)))", span="121-123", cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="DashboardRoutes.cs"];
m2_82 [label="var transaction = redis.CreateTransaction()", span="115-115", cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="DashboardRoutes.cs"];
m2_85 [label="transaction.Commit()", span="125-125", cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="DashboardRoutes.cs"];
m2_86 [label="Exit HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", span="113-113", cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="DashboardRoutes.cs"];
m2_126 [label="Entry Unk.GetValuesFromHash", span="", cluster="Unk.GetValuesFromHash", file="DashboardRoutes.cs"];
m2_125 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="DashboardRoutes.cs"];
m2_46 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="DashboardRoutes.cs"];
m2_43 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="DashboardRoutes.cs"];
m2_17 [label="Entry HangFire.Redis.RedisStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="34-34", cluster="HangFire.Redis.RedisStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs"];
m2_18 [label="return new RedisJobFetcher(_redis, queueNames, TimeSpan.FromSeconds(1));", span="36-36", cluster="HangFire.Redis.RedisStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs"];
m2_19 [label="Exit HangFire.Redis.RedisStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="34-34", cluster="HangFire.Redis.RedisStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="DashboardRoutes.cs"];
m2_22 [label="Entry HangFire.Redis.RedisStorageConnection.AcquireJobLock(string)", span="39-39", cluster="HangFire.Redis.RedisStorageConnection.AcquireJobLock(string)", file="DashboardRoutes.cs"];
m2_23 [label="return _redis.AcquireLock(\r\n                RedisStorage.Prefix + String.Format(''job:{0}:state-lock'', jobId),\r\n                TimeSpan.FromMinutes(1));", span="41-43", cluster="HangFire.Redis.RedisStorageConnection.AcquireJobLock(string)", file="DashboardRoutes.cs"];
m2_24 [label="Exit HangFire.Redis.RedisStorageConnection.AcquireJobLock(string)", span="39-39", cluster="HangFire.Redis.RedisStorageConnection.AcquireJobLock(string)", file="DashboardRoutes.cs"];
m2_27 [label="Entry Unk.AcquireLock", span="", cluster="Unk.AcquireLock", file="DashboardRoutes.cs"];
m2_16 [label="Entry Unk.CreateTransaction", span="", cluster="Unk.CreateTransaction", file="DashboardRoutes.cs"];
m2_160 [label=name, span="", file="DashboardRoutes.cs"];
m2_161 [label=heartbeats, span="", file="DashboardRoutes.cs"];
m2_152 [label="HangFire.Redis.RedisStorageConnection", span="", file="DashboardRoutes.cs"];
m2_156 [label=string, span="", file="DashboardRoutes.cs"];
m2_157 [label=int, span="", file="DashboardRoutes.cs"];
m2_153 [label="System.Collections.Generic.IDictionary<string, string>", span="", file="DashboardRoutes.cs"];
m2_154 [label=jobId, span="", file="DashboardRoutes.cs"];
m2_155 [label="System.TimeSpan", span="", file="DashboardRoutes.cs"];
m2_158 [label=queue1, span="", file="DashboardRoutes.cs"];
m2_159 [label=string, span="", file="DashboardRoutes.cs"];
m2_162 [label=string, span="", file="DashboardRoutes.cs"];
m2_163 [label=string, span="", file="DashboardRoutes.cs"];
m3_6 [label="Entry HangFire.Server.WorkerPool.WorkerPool(int, string)", span="16-16", cluster="HangFire.Server.WorkerPool.WorkerPool(int, string)", file="HangfireApplicationBuilderExtensions.cs"];
m3_0 [label="Entry MvcSample.HangFireConfig.Start()", span="17-17", cluster="MvcSample.HangFireConfig.Start()", file="HangfireApplicationBuilderExtensions.cs"];
m3_1 [label="RedisFactory.Db = 3", span="21-21", cluster="MvcSample.HangFireConfig.Start()", file="HangfireApplicationBuilderExtensions.cs"];
m3_2 [label="_server = new AspNetBackgroundJobServer(\r\n                new WorkerPool(Environment.ProcessorCount, ''default''))\r\n            {\r\n                MachineName = Environment.MachineName\r\n            }", span="23-27", cluster="MvcSample.HangFireConfig.Start()", file="HangfireApplicationBuilderExtensions.cs"];
m3_3 [label="GlobalJobFilters.Filters.Add(new PreserveCultureFilter())", span="29-29", cluster="MvcSample.HangFireConfig.Start()", file="HangfireApplicationBuilderExtensions.cs"];
m3_4 [label="Exit MvcSample.HangFireConfig.Start()", span="17-17", cluster="MvcSample.HangFireConfig.Start()", file="HangfireApplicationBuilderExtensions.cs"];
m3_8 [label="Entry HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", span="17-17", cluster="HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", file="HangfireApplicationBuilderExtensions.cs"];
m3_9 [label="Entry MvcSample.HangFireConfig.Stop()", span="34-34", cluster="MvcSample.HangFireConfig.Stop()", file="HangfireApplicationBuilderExtensions.cs"];
m3_10 [label="_server.Stop()", span="36-36", cluster="MvcSample.HangFireConfig.Stop()", file="HangfireApplicationBuilderExtensions.cs"];
m3_11 [label="Exit MvcSample.HangFireConfig.Stop()", span="34-34", cluster="MvcSample.HangFireConfig.Stop()", file="HangfireApplicationBuilderExtensions.cs"];
m3_7 [label="Entry HangFire.PreserveCultureFilter.PreserveCultureFilter()", span="8-8", cluster="HangFire.PreserveCultureFilter.PreserveCultureFilter()", file="HangfireApplicationBuilderExtensions.cs"];
m3_5 [label="Entry HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(params HangFire.Server.WorkerPool[])", span="11-11", cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(params HangFire.Server.WorkerPool[])", file="HangfireApplicationBuilderExtensions.cs"];
m3_12 [label="Entry HangFire.Web.AspNetBackgroundJobServer.Stop()", span="30-30", cluster="HangFire.Web.AspNetBackgroundJobServer.Stop()", file="HangfireApplicationBuilderExtensions.cs"];
m5_0 [label="Entry HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.ConstantExpressionFingerprint(System.Linq.Expressions.ExpressionType, System.Type)", span="20-20", cluster="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.ConstantExpressionFingerprint(System.Linq.Expressions.ExpressionType, System.Type)", file="Job.cs"];
m5_1 [label="Exit HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.ConstantExpressionFingerprint(System.Linq.Expressions.ExpressionType, System.Type)", span="20-20", cluster="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.ConstantExpressionFingerprint(System.Linq.Expressions.ExpressionType, System.Type)", file="Job.cs"];
m5_2 [label="Entry HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.Equals(object)", span="27-27", cluster="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.Equals(object)", file="Job.cs"];
m5_3 [label="ConstantExpressionFingerprint other = obj as ConstantExpressionFingerprint", span="29-29", cluster="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.Equals(object)", file="Job.cs"];
m5_4 [label="return (other != null)\r\n                   && this.Equals(other);", span="30-31", cluster="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.Equals(object)", file="Job.cs"];
m5_5 [label="Exit HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.Equals(object)", span="27-27", cluster="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint.Equals(object)", file="Job.cs"];
m5_6 [label="Entry HangFire.Common.ExpressionUtil.ExpressionFingerprint.Equals(HangFire.Common.ExpressionUtil.ExpressionFingerprint)", span="30-30", cluster="HangFire.Common.ExpressionUtil.ExpressionFingerprint.Equals(HangFire.Common.ExpressionUtil.ExpressionFingerprint)", file="Job.cs"];
m5_7 [label="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint", span="", file="Job.cs"];
m8_9 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="45-45", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", file="RouteCollectionExtensions.cs"];
m8_5 [label="Entry HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="46-46", cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", file="RouteCollectionExtensions.cs"];
m8_6 [label="Entry HangFire.Redis.SucceededStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="30-30", cluster="HangFire.Redis.SucceededStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs"];
m8_7 [label="transaction.RemoveFromList(''succeeded'', context.JobId)", span="33-33", cluster="HangFire.Redis.SucceededStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs"];
m8_8 [label="Exit HangFire.Redis.SucceededStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="30-30", cluster="HangFire.Redis.SucceededStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs"];
m8_0 [label="Entry HangFire.Redis.SucceededStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="23-23", cluster="HangFire.Redis.SucceededStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs"];
m8_1 [label="transaction.InsertToList(''succeeded'', context.JobId)", span="26-26", cluster="HangFire.Redis.SucceededStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs"];
m8_2 [label="transaction.TrimList(''succeeded'', 0, 99)", span="27-27", cluster="HangFire.Redis.SucceededStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs"];
m8_3 [label="Exit HangFire.Redis.SucceededStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="23-23", cluster="HangFire.Redis.SucceededStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="RouteCollectionExtensions.cs"];
m8_4 [label="Entry HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="44-44", cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", file="RouteCollectionExtensions.cs"];
m9_629 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_CanCreateFieldsWithNullValues(bool)", span="886-886", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_CanCreateFieldsWithNullValues(bool)", file="SqlServerConnectionFacts.cs"];
m9_630 [label="UseConnections((sql, connection) =>\r\n            {\r\n                connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                });\r\n\r\n                var result = sql.Query(\r\n                        ''select * from HangFire.Hash where [Key] = @key'',\r\n                        new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(null, result[''Key1'']);\r\n            }, useBatching)", span="888-901", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_CanCreateFieldsWithNullValues(bool)", file="SqlServerConnectionFacts.cs"];
m9_631 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_CanCreateFieldsWithNullValues(bool)", span="886-886", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_CanCreateFieldsWithNullValues(bool)", file="SqlServerConnectionFacts.cs"];
m9_427 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnectionFacts.cs"];
m9_699 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", span="992-992", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_700 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetRangeFromSet(null, 0, 1));\r\n            })", span="994-997", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_701 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", span="992-992", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_202 [label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="45-45", cluster="Hangfire.Storage.InvocationData.Deserialize()", file="SqlServerConnectionFacts.cs"];
m9_698 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SqlServerConnectionFacts.cs"];
m9_95 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", span="118-118", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs"];
m9_96 [label="var releaseLock = new ManualResetEventSlim(false)", span="120-120", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs"];
m9_97 [label="var lockAcquired = new ManualResetEventSlim(false)", span="121-121", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs"];
m9_98 [label="var thread = new Thread(\r\n                () => UseConnection(connection1 =>\r\n                {\r\n                    using (connection1.AcquireDistributedLock(''exclusive'', TimeSpan.FromSeconds(5)))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                }))", span="123-131", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs"];
m9_102 [label="releaseLock.Set()", span="147-147", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs"];
m9_100 [label="lockAcquired.Wait()", span="134-134", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs"];
m9_99 [label="thread.Start()", span="132-132", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs"];
m9_103 [label="thread.Join()", span="148-148", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs"];
m9_101 [label="UseConnection(connection2 =>\r\n            {\r\n                Assert.Throws<DistributedLockTimeoutException>(\r\n                    () =>\r\n                    {\r\n                        using (connection2.AcquireDistributedLock(''exclusive'', TimeSpan.FromSeconds(5)))\r\n                        {\r\n                        }\r\n                    });\r\n            })", span="136-145", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs"];
m9_104 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", span="118-118", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerConnectionFacts.cs"];
m9_465 [label="Entry Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="315-315", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnectionFacts.cs"];
m9_36 [label="Entry Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="65-65", cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnectionFacts.cs"];
m9_887 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", span="1307-1307", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SqlServerConnectionFacts.cs"];
m9_888 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [Value])\r\nvalues (@key, @field, @value)''", span="1309-1311", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SqlServerConnectionFacts.cs"];
m9_889 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'', value = ''1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'', value = ''2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetValueFromHash(''hash-1'', ''field-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(''1'', result);\r\n            })", span="1313-1328", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SqlServerConnectionFacts.cs"];
m9_890 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", span="1307-1307", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="SqlServerConnectionFacts.cs"];
m9_542 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="760-760", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs"];
m9_543 [label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="762-763", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs"];
m9_544 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="760-760", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs"];
m9_107 [label="Entry System.Threading.Thread.Start()", span="0-0", cluster="System.Threading.Thread.Start()", file="SqlServerConnectionFacts.cs"];
m9_524 [label="Entry Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="353-353", cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnectionFacts.cs"];
m9_428 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="608-608", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs"];
m9_429 [label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="610-611", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs"];
m9_430 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="608-608", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs"];
m9_816 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", span="1193-1193", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_817 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetListCount(''my-list'');\r\n                Assert.Equal(0, result);\r\n            })", span="1195-1199", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_818 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", span="1193-1193", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_744 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", span="1071-1071", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SqlServerConnectionFacts.cs"];
m9_745 [label="string arrangeSql = @''\r\ninsert into HangFire.AggregatedCounter ([Key], [Value])\r\nvalues (@key, @value)''", span="1073-1075", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SqlServerConnectionFacts.cs"];
m9_746 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 12 },\r\n                    new { key = ''counter-2'', value = 15 }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetCounter(''counter-1'');\r\n\r\n                Assert.Equal(12, result);\r\n            })", span="1077-1090", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SqlServerConnectionFacts.cs"];
m9_747 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", span="1071-1071", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="SqlServerConnectionFacts.cs"];
m9_109 [label="Entry System.Threading.ManualResetEventSlim.Set()", span="0-0", cluster="System.Threading.ManualResetEventSlim.Set()", file="SqlServerConnectionFacts.cs"];
m9_941 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", span="1401-1401", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SqlServerConnectionFacts.cs"];
m9_942 [label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], Value)\r\nvalues (@key, @value)''", span="1403-1405", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SqlServerConnectionFacts.cs"];
m9_943 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromList(''list-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(new [] { ''3'', ''1'' }, result);\r\n            })", span="1407-1422", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SqlServerConnectionFacts.cs"];
m9_944 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", span="1401-1401", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="SqlServerConnectionFacts.cs"];
m9_652 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="299-299", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnectionFacts.cs"];
m9_335 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="456-456", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_336 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="458-464", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_337 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="456-456", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_407 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="572-572", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_408 [label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="574-581", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_409 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="583-592", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_410 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="572-572", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_986 [label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0", cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="SqlServerConnectionFacts.cs"];
m9_368 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="515-515", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs"];
m9_369 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="517-520", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs"];
m9_370 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="522-534", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs"];
m9_371 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="515-515", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs"];
m9_200 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="SqlServerConnectionFacts.cs"];
m9_125 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_Dispose_ReleasesExclusiveApplicationLock()", span="152-152", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerConnectionFacts.cs"];
m9_126 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var distributedLock = connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5));\r\n                distributedLock.Dispose();\r\n\r\n                var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single();\r\n\r\n                Assert.Equal(''NoLock'', lockMode);\r\n            })", span="154-163", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerConnectionFacts.cs"];
m9_127 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_Dispose_ReleasesExclusiveApplicationLock()", span="152-152", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerConnectionFacts.cs"];
m9_934 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1391-1391", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_935 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromList(''my-list'');\r\n                Assert.Empty(result);\r\n            })", span="1393-1397", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_936 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1391-1391", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_994 [label="Entry SqlServerConnection.cstr", span="", cluster="SqlServerConnection.cstr", file="SqlServerConnectionFacts.cs"];
m9_273 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="329-329", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_274 [label="UseConnection(\r\n                connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null)))", span="331-333", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_275 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="329-329", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_960 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", span="1435-1435", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_961 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetSetTtl(''my-set'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1437-1441", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_962 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", span="1435-1435", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_514 [label="Entry Unk.NotEqual", span="", cluster="Unk.NotEqual", file="SqlServerConnectionFacts.cs"];
m9_906 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="502-502", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnectionFacts.cs"];
m9_85 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_AcquiresExclusiveApplicationLock_OnSession()", span="103-103", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerConnectionFacts.cs"];
m9_86 [label="UseConnections((sql, connection) =>\r\n            {\r\n                using (connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5)))\r\n                {\r\n                    var lockMode = sql.Query<string>(\r\n                        ''select applock_mode('public', 'HangFire:hello', 'session')'').Single();\r\n\r\n                    Assert.Equal(''Exclusive'', lockMode);\r\n                }\r\n            })", span="105-114", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerConnectionFacts.cs"];
m9_87 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_AcquiresExclusiveApplicationLock_OnSession()", span="103-103", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerConnectionFacts.cs"];
m9_796 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", span="1158-1158", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SqlServerConnectionFacts.cs"];
m9_797 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="1160-1162", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SqlServerConnectionFacts.cs"];
m9_798 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetHashTtl(''hash-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1164-1179", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SqlServerConnectionFacts.cs"];
m9_799 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", span="1158-1158", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="SqlServerConnectionFacts.cs"];
m9_345 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="468-468", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_346 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="470-473", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_347 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="475-487", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_348 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="468-468", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_417 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="596-596", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_418 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="598-604", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_419 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="596-596", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_869 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="460-460", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnectionFacts.cs"];
m9_494 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="703-703", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_495 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="705-706", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_496 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="703-703", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_849 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", span="1248-1248", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SqlServerConnectionFacts.cs"];
m9_850 [label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="1250-1252", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SqlServerConnectionFacts.cs"];
m9_851 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''list-2'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetListTtl(''list-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1254-1269", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SqlServerConnectionFacts.cs"];
m9_852 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", span="1248-1248", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="SqlServerConnectionFacts.cs"];
m9_453 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerConnectionFacts.cs"];
m9_303 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", span="384-384", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SqlServerConnectionFacts.cs"];
m9_304 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues ('', '', '', getutcdate());\r\ndeclare @JobId int;\r\nset @JobId = scope_identity();\r\ninsert into HangFire.State (JobId, Name, CreatedAt)\r\nvalues (@JobId, 'old-state', getutcdate());\r\ninsert into HangFire.State (JobId, Name, Reason, Data, CreatedAt)\r\nvalues (@JobId, @name, @reason, @data, getutcdate());\r\ndeclare @StateId int;\r\nset @StateId = scope_identity();\r\nupdate HangFire.Job set StateId = @StateId;\r\nselect @JobId as Id;''", span="386-398", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SqlServerConnectionFacts.cs"];
m9_305 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var data = new Dictionary<string, string>\r\n                {\r\n                    { ''key'', ''Value'' }\r\n                };\r\n\r\n                var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id;\r\n\r\n                var result = connection.GetStateData(jobId.ToString());\r\n                Assert.NotNull(result);\r\n\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="400-415", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SqlServerConnectionFacts.cs"];
m9_306 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", span="384-384", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="SqlServerConnectionFacts.cs"];
m9_735 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", span="1046-1046", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SqlServerConnectionFacts.cs"];
m9_736 [label="string arrangeSql = @''\r\ninsert into HangFire.Counter ([Key], [Value])\r\nvalues (@key, @value)''", span="1048-1050", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SqlServerConnectionFacts.cs"];
m9_737 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 1 },\r\n                    new { key = ''counter-2'', value = 1 },\r\n                    new { key = ''counter-1'', value = 1 }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetCounter(''counter-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="1052-1067", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SqlServerConnectionFacts.cs"];
m9_738 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", span="1046-1046", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="SqlServerConnectionFacts.cs"];
m9_323 [label="Entry Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", span="31-31", cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", file="SqlServerConnectionFacts.cs"];
m9_215 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CanCreateParametersWithNullValues(bool)", span="258-258", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CanCreateParametersWithNullValues(bool)", file="SqlServerConnectionFacts.cs"];
m9_216 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var createdAt = new DateTime(2012, 12, 12);\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', null } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1));\r\n\r\n                var parameters = sql.Query(\r\n                        ''select * from HangFire.JobParameter where JobId = @id'',\r\n                        new { id = jobId })\r\n                    .ToDictionary(x => (string)x.Name, x => (string)x.Value);\r\n\r\n                Assert.Equal(null, parameters[''Key1'']);\r\n            }, useBatching)", span="260-275", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CanCreateParametersWithNullValues(bool)", file="SqlServerConnectionFacts.cs"];
m9_217 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CanCreateParametersWithNullValues(bool)", span="258-258", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CanCreateParametersWithNullValues(bool)", file="SqlServerConnectionFacts.cs"];
m9_134 [label="Entry System.IDisposable.Dispose()", span="0-0", cluster="System.IDisposable.Dispose()", file="SqlServerConnectionFacts.cs"];
m9_924 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", span="1381-1381", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_925 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetAllItemsFromList(null));\r\n            })", span="1383-1387", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_926 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", span="1381-1381", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_551 [label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="366-366", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnectionFacts.cs"];
m9_106 [label="Entry System.Threading.Thread.Thread(System.Threading.ThreadStart)", span="0-0", cluster="System.Threading.Thread.Thread(System.Threading.ThreadStart)", file="SqlServerConnectionFacts.cs"];
m9_6 [label="Entry Mock<IPersistentJobQueue>.cstr", span="", cluster="Mock<IPersistentJobQueue>.cstr", file="SqlServerConnectionFacts.cs"];
m9_466 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="660-660", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs"];
m9_467 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="662-668", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs"];
m9_468 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="660-660", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs"];
m9_841 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="485-485", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnectionFacts.cs"];
m9_762 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="435-435", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnectionFacts.cs"];
m9_269 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()", file="SqlServerConnectionFacts.cs"];
m9_390 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="550-550", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_391 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="552-558", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_392 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="550-550", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_267 [label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="70-70", cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="SqlServerConnectionFacts.cs"];
m9_314 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="419-419", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs"];
m9_315 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="421-424", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs"];
m9_316 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result.LoadException);\r\n            })", span="426-440", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs"];
m9_317 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="419-419", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs"];
m9_727 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="420-420", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnectionFacts.cs"];
m9_967 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", span="1445-1445", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SqlServerConnectionFacts.cs"];
m9_968 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="1447-1449", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SqlServerConnectionFacts.cs"];
m9_969 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) },\r\n                    new { key = ''set-2'', value = ''2'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetSetTtl(''set-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1451-1466", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SqlServerConnectionFacts.cs"];
m9_970 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", span="1445-1445", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="SqlServerConnectionFacts.cs"];
m9_203 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="SqlServerConnectionFacts.cs"];
m9_503 [label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="340-340", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnectionFacts.cs"];
m9_7 [label="Entry Mock<IPersistentJobQueueProvider>.cstr", span="", cluster="Mock<IPersistentJobQueueProvider>.cstr", file="SqlServerConnectionFacts.cs"];
m9_201 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="SqlServerConnectionFacts.cs"];
m9_643 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="905-905", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_644 [label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null)))", span="907-908", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_645 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="905-905", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_574 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", span="798-798", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_575 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(0, result.Count);\r\n            })", span="800-806", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_576 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", span="798-798", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_283 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", span="337-337", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="SqlServerConnectionFacts.cs"];
m9_284 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetStateData(''1'');\r\n                Assert.Null(result);\r\n            })", span="339-343", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="SqlServerConnectionFacts.cs"];
m9_285 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", span="337-337", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="SqlServerConnectionFacts.cs"];
m9_653 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", span="912-912", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_654 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n                Assert.Null(result);\r\n            })", span="914-918", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_655 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", span="912-912", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_504 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="710-710", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs"];
m9_505 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues \r\n('Server1', '', getutcdate()),\r\n('Server2', '', getutcdate())''", span="712-716", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs"];
m9_506 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="718-726", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs"];
m9_507 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="710-710", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs"];
m9_15 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="34-34", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnectionFacts.cs"];
m9_16 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(null))", span="36-37", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnectionFacts.cs"];
m9_17 [label="Assert.Equal(''storage'', exception.ParamName)", span="39-39", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnectionFacts.cs"];
m9_18 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="34-34", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerConnectionFacts.cs"];
m9_105 [label="Entry System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", span="0-0", cluster="System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", file="SqlServerConnectionFacts.cs"];
m9_660 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", span="922-922", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SqlServerConnectionFacts.cs"];
m9_661 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [Value])\r\nvalues (@key, @field, @value)''", span="924-926", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SqlServerConnectionFacts.cs"];
m9_662 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-hash'', field = ''Key1'', value = ''Value1'' },\r\n                    new { key = ''some-hash'', field = ''Key2'', value = ''Value2'' },\r\n                    new { key = ''another-hash'', field = ''Key3'', value = ''Value3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n\r\n                // Assert\r\n                Assert.NotNull(result);\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="928-946", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SqlServerConnectionFacts.cs"];
m9_663 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", span="922-922", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="SqlServerConnectionFacts.cs"];
m9_859 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", span="1273-1273", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_860 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(null, ''name''));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1275-1281", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_861 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", span="1273-1273", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_789 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", span="1148-1148", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_790 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetHashTtl(''my-hash'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1150-1154", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_791 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", span="1148-1148", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_870 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", span="1285-1285", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_871 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(''key'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="1287-1293", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_872 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", span="1285-1285", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs"];
m9_984 [label="Entry SqlServerStorage.cstr", span="", cluster="SqlServerStorage.cstr", file="SqlServerConnectionFacts.cs"];
m9_41 [label="Entry Unk.Dequeue", span="", cluster="Unk.Dequeue", file="SqlServerConnectionFacts.cs"];
m9_996 [label="Entry lambda expression", span="1486-1486", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_11 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_12 [label="x.GetJobQueue()", span="27-27", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_13 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_21 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_22 [label="new SqlServerConnection(null)", span="37-37", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_23 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_29 [label="Entry lambda expression", span="45-53", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_30 [label="var token = new CancellationToken()", span="47-47", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_32 [label="connection.FetchNextJob(queues, token)", span="50-50", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_31 [label="var queues = new[] { ''default'' }", span="48-48", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_33 [label="_queue.Verify(x => x.Dequeue(queues, token))", span="52-52", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_39 [label="x.Dequeue(queues, token)", span="52-52", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_34 [label="Exit lambda expression", span="45-53", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_38 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_40 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_46 [label="Entry lambda expression", span="59-67", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_47 [label="var token = new CancellationToken()", span="61-61", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_50 [label="Assert.Throws<InvalidOperationException>(\r\n                    () => connection.FetchNextJob(new[] { ''critical'', ''default'' }, token))", span="65-66", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_54 [label="connection.FetchNextJob(new[] { ''critical'', ''default'' }, token)", span="66-66", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_48 [label="var anotherProvider = new Mock<IPersistentJobQueueProvider>()", span="62-62", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_49 [label="_providers.Add(anotherProvider.Object, new [] { ''critical'' })", span="63-63", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_51 [label="Exit lambda expression", span="59-67", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_53 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_55 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_59 [label="Entry lambda expression", span="73-77", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_60 [label="var transaction = connection.CreateWriteTransaction()", span="75-75", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_61 [label="Assert.NotNull(transaction)", span="76-76", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_62 [label="Exit lambda expression", span="73-77", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_68 [label="Entry lambda expression", span="83-87", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_69 [label="var @lock = connection.AcquireDistributedLock(''1'', TimeSpan.FromSeconds(1))", span="85-85", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_70 [label="Assert.NotNull(@lock)", span="86-86", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_71 [label="Exit lambda expression", span="83-87", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_77 [label="Entry lambda expression", span="93-99", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_78 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => connection.AcquireDistributedLock('''', TimeSpan.FromMinutes(5)))", span="95-96", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_82 [label="connection.AcquireDistributedLock('''', TimeSpan.FromMinutes(5))", span="96-96", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_79 [label="Assert.Equal(''resource'', exception.ParamName)", span="98-98", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_81 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_80 [label="Exit lambda expression", span="93-99", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_83 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_89 [label="Entry lambda expression", span="105-114", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_90 [label="connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5))", span="107-107", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_91 [label="var lockMode = sql.Query<string>(\r\n                        ''select applock_mode('public', 'HangFire:hello', 'session')'').Single()", span="109-110", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_92 [label="Assert.Equal(''Exclusive'', lockMode)", span="112-112", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_93 [label="Exit lambda expression", span="105-114", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_112 [label="UseConnection(connection1 =>\r\n                {\r\n                    using (connection1.AcquireDistributedLock(''exclusive'', TimeSpan.FromSeconds(5)))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                })", span="124-131", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_117 [label="releaseLock.Wait()", span="129-129", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_116 [label="lockAcquired.Set()", span="128-128", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_119 [label="Entry lambda expression", span="136-145", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_111 [label="Entry lambda expression", span="124-131", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_113 [label="Exit lambda expression", span="124-131", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_114 [label="Entry lambda expression", span="124-131", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_115 [label="connection1.AcquireDistributedLock(''exclusive'', TimeSpan.FromSeconds(5))", span="126-126", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_118 [label="Exit lambda expression", span="124-131", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_120 [label="Assert.Throws<DistributedLockTimeoutException>(\r\n                    () =>\r\n                    {\r\n                        using (connection2.AcquireDistributedLock(''exclusive'', TimeSpan.FromSeconds(5)))\r\n                        {\r\n                        }\r\n                    })", span="138-144", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_123 [label="connection2.AcquireDistributedLock(''exclusive'', TimeSpan.FromSeconds(5))", span="141-141", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_121 [label="Exit lambda expression", span="136-145", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_122 [label="Entry lambda expression", span="139-144", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_124 [label="Exit lambda expression", span="139-144", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_128 [label="Entry lambda expression", span="154-163", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_129 [label="var distributedLock = connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5))", span="156-156", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_131 [label="var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single()", span="159-160", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_130 [label="distributedLock.Dispose()", span="157-157", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_132 [label="Assert.Equal(''NoLock'', lockMode)", span="162-162", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_133 [label="Exit lambda expression", span="154-163", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_138 [label="Entry lambda expression", span="169-176", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_139 [label="connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5))", span="171-171", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_140 [label="connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5))", span="172-172", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_141 [label="Assert.True(true)", span="174-174", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_142 [label="Exit lambda expression", span="169-176", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_147 [label="Entry lambda expression", span="182-192", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_148 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero))", span="184-189", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_152 [label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero)", span="185-189", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_149 [label="Assert.Equal(''job'', exception.ParamName)", span="191-191", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_151 [label="Entry lambda expression", span="185-189", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_150 [label="Exit lambda expression", span="182-192", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_153 [label="Exit lambda expression", span="185-189", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_159 [label="Entry lambda expression", span="198-208", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_160 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero))", span="200-205", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_164 [label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero)", span="201-205", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_161 [label="Assert.Equal(''parameters'', exception.ParamName)", span="207-207", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_163 [label="Entry lambda expression", span="201-205", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_162 [label="Exit lambda expression", span="198-208", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_165 [label="Exit lambda expression", span="201-205", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_167 [label="Entry lambda expression", span="202-202", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_168 [label="SampleMethod(''hello'')", span="202-202", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_169 [label="Exit lambda expression", span="202-202", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_174 [label="Entry lambda expression", span="216-252", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_175 [label="var createdAt = new DateTime(2012, 12, 12)", span="218-218", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_176 [label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1))", span="219-223", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_179 [label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="228-228", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_192 [label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="245-248", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_181 [label="Assert.Equal(createdAt, sqlJob.CreatedAt)", span="230-230", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_190 [label="Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.ExpireAt)", span="242-242", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_191 [label="Assert.True(sqlJob.ExpireAt < createdAt.AddDays(1).AddMinutes(1))", span="243-243", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_177 [label="Assert.NotNull(jobId)", span="225-225", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_206 [label="Entry lambda expression", span="220-220", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_178 [label="Assert.NotEmpty(jobId)", span="226-226", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_180 [label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="229-229", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_182 [label="Assert.Equal(null, (int?) sqlJob.StateId)", span="231-231", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_183 [label="Assert.Equal(null, (string) sqlJob.StateName)", span="232-232", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_184 [label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="234-234", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_185 [label="invocationData.Arguments = sqlJob.Arguments", span="235-235", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_186 [label="var job = invocationData.Deserialize()", span="237-237", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_187 [label="Assert.Equal(typeof(SqlServerConnectionFacts), job.Type)", span="238-238", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_188 [label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="239-239", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_189 [label="Assert.Equal(''Hello'', job.Args[0])", span="240-240", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_193 [label="Assert.Equal(''Value1'', parameters[''Key1''])", span="250-250", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_209 [label="Entry lambda expression", span="248-248", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_212 [label="Entry lambda expression", span="248-248", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_194 [label="Assert.Equal(''Value2'', parameters[''Key2''])", span="251-251", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_195 [label="Exit lambda expression", span="216-252", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_207 [label="SampleMethod(''Hello'')", span="220-220", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_208 [label="Exit lambda expression", span="220-220", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_210 [label="(string) x.Name", span="248-248", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_211 [label="Exit lambda expression", span="248-248", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_213 [label="(string) x.Value", span="248-248", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_214 [label="Exit lambda expression", span="248-248", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_218 [label="Entry lambda expression", span="260-275", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_219 [label="var createdAt = new DateTime(2012, 12, 12)", span="262-262", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_220 [label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', null } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1))", span="263-267", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_221 [label="var parameters = sql.Query(\r\n                        ''select * from HangFire.JobParameter where JobId = @id'',\r\n                        new { id = jobId })\r\n                    .ToDictionary(x => (string)x.Name, x => (string)x.Value)", span="269-272", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_224 [label="Entry lambda expression", span="264-264", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_222 [label="Assert.Equal(null, parameters[''Key1''])", span="274-274", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_227 [label="Entry lambda expression", span="272-272", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_230 [label="Entry lambda expression", span="272-272", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_223 [label="Exit lambda expression", span="260-275", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_225 [label="SampleMethod(''Hello'')", span="264-264", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_226 [label="Exit lambda expression", span="264-264", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_228 [label="(string)x.Name", span="272-272", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_229 [label="Exit lambda expression", span="272-272", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_231 [label="(string)x.Value", span="272-272", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_232 [label="Exit lambda expression", span="272-272", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_236 [label="Entry lambda expression", span="281-282", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_237 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="281-282", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_240 [label="connection.GetJobData(null)", span="282-282", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_238 [label="Exit lambda expression", span="281-282", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_239 [label="Entry lambda expression", span="282-282", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_241 [label="Exit lambda expression", span="282-282", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_246 [label="Entry lambda expression", span="288-292", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_247 [label="var result = connection.GetJobData(''1'')", span="290-290", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_248 [label="Assert.Null(result)", span="291-291", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_249 [label="Exit lambda expression", span="288-292", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_257 [label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="307-314", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_255 [label="Entry lambda expression", span="303-325", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_256 [label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="305-305", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_258 [label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="316-316", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_270 [label="Entry lambda expression", span="305-305", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_259 [label="Assert.NotNull(result)", span="318-318", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_260 [label="Assert.NotNull(result.Job)", span="319-319", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_261 [label="Assert.Equal(''Succeeded'', result.State)", span="320-320", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_262 [label="Assert.Equal(''Arguments'', result.Job.Args[0])", span="321-321", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_263 [label="Assert.Null(result.LoadException)", span="322-322", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_264 [label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < result.CreatedAt)", span="323-323", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_265 [label="Assert.True(result.CreatedAt < DateTime.UtcNow.AddMinutes(1))", span="324-324", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_266 [label="Exit lambda expression", span="303-325", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_271 [label="SampleMethod(''wrong'')", span="305-305", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_272 [label="Exit lambda expression", span="305-305", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_276 [label="Entry lambda expression", span="332-333", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_277 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null))", span="332-333", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_280 [label="connection.GetStateData(null)", span="333-333", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_278 [label="Exit lambda expression", span="332-333", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_279 [label="Entry lambda expression", span="333-333", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_281 [label="Exit lambda expression", span="333-333", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_286 [label="Entry lambda expression", span="339-343", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_287 [label="var result = connection.GetStateData(''1'')", span="341-341", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_288 [label="Assert.Null(result)", span="342-342", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_289 [label="Exit lambda expression", span="339-343", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_296 [label="var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id", span="370-372", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_294 [label="Entry lambda expression", span="363-380", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_295 [label="var data = new Dictionary<string, string>\r\n                {\r\n                    { ''Key'', ''Value'' }\r\n                }", span="365-368", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_297 [label="var result = connection.GetStateData(jobId.ToString())", span="374-374", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_298 [label="Assert.NotNull(result)", span="375-375", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_299 [label="Assert.Equal(''Name'', result.Name)", span="377-377", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_300 [label="Assert.Equal(''Reason'', result.Reason)", span="378-378", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_301 [label="Assert.Equal(''Value'', result.Data[''Key''])", span="379-379", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_302 [label="Exit lambda expression", span="363-380", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_309 [label="var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id", span="407-409", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_307 [label="Entry lambda expression", span="400-415", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_308 [label="var data = new Dictionary<string, string>\r\n                {\r\n                    { ''key'', ''Value'' }\r\n                }", span="402-405", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_310 [label="var result = connection.GetStateData(jobId.ToString())", span="411-411", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_311 [label="Assert.NotNull(result)", span="412-412", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_312 [label="Assert.Equal(''Value'', result.Data[''Key''])", span="414-414", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_313 [label="Exit lambda expression", span="400-415", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_319 [label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="428-435", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_318 [label="Entry lambda expression", span="426-440", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_320 [label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="437-437", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_321 [label="Assert.NotNull(result.LoadException)", span="439-439", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_322 [label="Exit lambda expression", span="426-440", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_327 [label="Entry lambda expression", span="446-452", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_328 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="448-449", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_332 [label="connection.SetJobParameter(null, ''name'', ''value'')", span="449-449", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_329 [label="Assert.Equal(''id'', exception.ParamName)", span="451-451", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_331 [label="Entry lambda expression", span="449-449", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_330 [label="Exit lambda expression", span="446-452", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_333 [label="Exit lambda expression", span="449-449", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_338 [label="Entry lambda expression", span="458-464", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_339 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="460-461", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_343 [label="connection.SetJobParameter(''1'', null, ''value'')", span="461-461", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_340 [label="Assert.Equal(''name'', exception.ParamName)", span="463-463", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_342 [label="Entry lambda expression", span="461-461", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_341 [label="Exit lambda expression", span="458-464", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_344 [label="Exit lambda expression", span="461-461", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_350 [label="var job = sql.Query(arrangeSql).Single()", span="477-477", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_349 [label="Entry lambda expression", span="475-487", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_352 [label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="480-480", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_353 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="482-484", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_351 [label="string jobId = job.Id.ToString()", span="478-478", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_354 [label="Assert.Equal(''Value'', parameter.Value)", span="486-486", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_355 [label="Exit lambda expression", span="475-487", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_361 [label="var job = sql.Query(arrangeSql).Single()", span="500-500", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_360 [label="Entry lambda expression", span="498-511", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_363 [label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="503-503", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_364 [label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="504-504", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_365 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="506-508", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_362 [label="string jobId = job.Id.ToString()", span="501-501", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_366 [label="Assert.Equal(''AnotherValue'', parameter.Value)", span="510-510", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_367 [label="Exit lambda expression", span="498-511", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_373 [label="var job = sql.Query(arrangeSql).Single()", span="524-524", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_372 [label="Entry lambda expression", span="522-534", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_375 [label="connection.SetJobParameter(jobId, ''Name'', null)", span="527-527", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_376 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="529-531", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_374 [label="string jobId = job.Id.ToString()", span="525-525", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_377 [label="Assert.Equal((string) null, parameter.Value)", span="533-533", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_378 [label="Exit lambda expression", span="522-534", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_382 [label="Entry lambda expression", span="540-546", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_383 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="542-543", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_387 [label="connection.GetJobParameter(null, ''hello'')", span="543-543", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_384 [label="Assert.Equal(''id'', exception.ParamName)", span="545-545", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_386 [label="Entry lambda expression", span="543-543", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_385 [label="Exit lambda expression", span="540-546", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_388 [label="Exit lambda expression", span="543-543", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_393 [label="Entry lambda expression", span="552-558", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_394 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="554-555", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_398 [label="connection.GetJobParameter(''1'', null)", span="555-555", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_395 [label="Assert.Equal(''name'', exception.ParamName)", span="557-557", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_397 [label="Entry lambda expression", span="555-555", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_396 [label="Exit lambda expression", span="552-558", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_399 [label="Exit lambda expression", span="555-555", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_403 [label="Entry lambda expression", span="564-568", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_404 [label="var value = connection.GetJobParameter(''1'', ''hello'')", span="566-566", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_405 [label="Assert.Null(value)", span="567-567", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_406 [label="Exit lambda expression", span="564-568", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_412 [label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="585-587", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_411 [label="Entry lambda expression", span="583-592", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_413 [label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="589-589", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_414 [label="Assert.Equal(''value'', value)", span="591-591", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_415 [label="Exit lambda expression", span="583-592", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_420 [label="Entry lambda expression", span="598-604", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_421 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="600-601", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_425 [label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="601-601", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_422 [label="Assert.Equal(''key'', exception.ParamName)", span="603-603", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_424 [label="Entry lambda expression", span="601-601", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_423 [label="Exit lambda expression", span="598-604", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_426 [label="Exit lambda expression", span="601-601", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_431 [label="Entry lambda expression", span="610-611", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_432 [label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="610-611", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_435 [label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="611-611", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_433 [label="Exit lambda expression", span="610-611", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_434 [label="Entry lambda expression", span="611-611", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_436 [label="Exit lambda expression", span="611-611", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_440 [label="Entry lambda expression", span="617-623", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_441 [label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="619-620", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_442 [label="Assert.Null(result)", span="622-622", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_443 [label="Exit lambda expression", span="617-623", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_449 [label="sql.Execute(arrangeSql)", span="639-639", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_448 [label="Entry lambda expression", span="637-644", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_450 [label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="641-641", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_451 [label="Assert.Equal(''-1.0'', result)", span="643-643", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_452 [label="Exit lambda expression", span="637-644", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_457 [label="Entry lambda expression", span="650-656", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_458 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="652-653", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_462 [label="connection.AnnounceServer(null, new ServerContext())", span="653-653", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_459 [label="Assert.Equal(''serverId'', exception.ParamName)", span="655-655", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_461 [label="Entry lambda expression", span="653-653", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_460 [label="Exit lambda expression", span="650-656", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_463 [label="Exit lambda expression", span="653-653", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_469 [label="Entry lambda expression", span="662-668", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_470 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="664-665", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_474 [label="connection.AnnounceServer(''server'', null)", span="665-665", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_471 [label="Assert.Equal(''context'', exception.ParamName)", span="667-667", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_473 [label="Entry lambda expression", span="665-665", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_472 [label="Exit lambda expression", span="662-668", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_475 [label="Exit lambda expression", span="665-665", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_479 [label="Entry lambda expression", span="674-699", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_480 [label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="676-680", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_481 [label="connection.AnnounceServer(''server'', context1)", span="681-681", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_482 [label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="683-683", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_487 [label="connection.AnnounceServer(''server'', context2)", span="695-695", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_488 [label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="696-696", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_483 [label="Assert.Equal(''server'', server.Id)", span="684-684", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_484 [label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="685-687", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_485 [label="Assert.NotNull(server.LastHeartbeat)", span="688-688", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_486 [label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="690-694", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_489 [label="Assert.Equal(''server'', sameServer.Id)", span="697-697", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_490 [label="Assert.Contains(''1000'', sameServer.Data)", span="698-698", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_491 [label="Exit lambda expression", span="674-699", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_497 [label="Entry lambda expression", span="705-706", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_498 [label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="705-706", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_501 [label="connection.RemoveServer(null)", span="706-706", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_499 [label="Exit lambda expression", span="705-706", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_500 [label="Entry lambda expression", span="706-706", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_502 [label="Exit lambda expression", span="706-706", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_509 [label="sql.Execute(arrangeSql)", span="720-720", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_508 [label="Entry lambda expression", span="718-726", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_510 [label="connection.RemoveServer(''Server1'')", span="722-722", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_511 [label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="724-724", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_512 [label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="725-725", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_513 [label="Exit lambda expression", span="718-726", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_518 [label="Entry lambda expression", span="732-733", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_519 [label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="732-733", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_522 [label="connection.Heartbeat(null)", span="733-733", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_520 [label="Exit lambda expression", span="732-733", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_521 [label="Entry lambda expression", span="733-733", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_523 [label="Exit lambda expression", span="733-733", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_530 [label="sql.Execute(arrangeSql)", span="747-747", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_529 [label="Entry lambda expression", span="745-756", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_531 [label="connection.Heartbeat(''server1'')", span="749-749", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_532 [label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat)", span="751-752", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_533 [label="Assert.NotEqual(2012, servers[''server1''].Year)", span="754-754", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_536 [label="Entry lambda expression", span="752-752", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_539 [label="Entry lambda expression", span="752-752", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_534 [label="Assert.Equal(2012, servers[''server2''].Year)", span="755-755", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_535 [label="Exit lambda expression", span="745-756", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_537 [label="(string)x.Id", span="752-752", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_538 [label="Exit lambda expression", span="752-752", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_540 [label="(DateTime)x.LastHeartbeat", span="752-752", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_541 [label="Exit lambda expression", span="752-752", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_545 [label="Entry lambda expression", span="762-763", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_546 [label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="762-763", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_549 [label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="763-763", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_547 [label="Exit lambda expression", span="762-763", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_548 [label="Entry lambda expression", span="763-763", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_550 [label="Exit lambda expression", span="763-763", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_557 [label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="775-781", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_556 [label="Entry lambda expression", span="773-787", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_558 [label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="783-783", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_559 [label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="785-785", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_560 [label="Assert.Equal(''server2'', liveServer.Id)", span="786-786", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_561 [label="Exit lambda expression", span="773-787", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_567 [label="Entry lambda expression", span="793-794", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_568 [label="Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null))", span="794-794", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_571 [label="connection.GetAllItemsFromSet(null)", span="794-794", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_569 [label="Exit lambda expression", span="793-794", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_570 [label="Entry lambda expression", span="794-794", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_572 [label="Exit lambda expression", span="794-794", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_577 [label="Entry lambda expression", span="800-806", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_578 [label="var result = connection.GetAllItemsFromSet(''some-set'')", span="802-802", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_579 [label="Assert.NotNull(result)", span="804-804", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_580 [label="Assert.Equal(0, result.Count)", span="805-805", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_581 [label="Exit lambda expression", span="800-806", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_587 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-set'', value = ''1'' },\r\n                    new { key = ''some-set'', value = ''2'' },\r\n                    new { key = ''another-set'', value = ''3'' }\r\n                })", span="819-824", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_586 [label="Entry lambda expression", span="816-833", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_588 [label="var result = connection.GetAllItemsFromSet(''some-set'')", span="827-827", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_589 [label="Assert.Equal(2, result.Count)", span="830-830", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_590 [label="Assert.Contains(''1'', result)", span="831-831", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_591 [label="Assert.Contains(''2'', result)", span="832-832", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_592 [label="Exit lambda expression", span="816-833", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_596 [label="Entry lambda expression", span="839-845", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_597 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()))", span="841-842", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_601 [label="connection.SetRangeInHash(null, new Dictionary<string, string>())", span="842-842", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_598 [label="Assert.Equal(''key'', exception.ParamName)", span="844-844", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_600 [label="Entry lambda expression", span="842-842", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_599 [label="Exit lambda expression", span="839-845", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_602 [label="Exit lambda expression", span="842-842", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_607 [label="Entry lambda expression", span="851-857", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_608 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null))", span="853-854", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_612 [label="connection.SetRangeInHash(''some-hash'', null)", span="854-854", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_609 [label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="856-856", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_611 [label="Entry lambda expression", span="854-854", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_610 [label="Exit lambda expression", span="851-857", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_613 [label="Exit lambda expression", span="854-854", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_617 [label="Entry lambda expression", span="865-880", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_618 [label="connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="867-871", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_619 [label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="873-876", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_620 [label="Assert.Equal(''Value1'', result[''Key1''])", span="878-878", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_623 [label="Entry lambda expression", span="876-876", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_626 [label="Entry lambda expression", span="876-876", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_621 [label="Assert.Equal(''Value2'', result[''Key2''])", span="879-879", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_622 [label="Exit lambda expression", span="865-880", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_624 [label="(string)x.Field", span="876-876", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_625 [label="Exit lambda expression", span="876-876", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_627 [label="(string)x.Value", span="876-876", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_628 [label="Exit lambda expression", span="876-876", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_632 [label="Entry lambda expression", span="888-901", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_633 [label="connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                })", span="890-893", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_634 [label="var result = sql.Query(\r\n                        ''select * from HangFire.Hash where [Key] = @key'',\r\n                        new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="895-898", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_635 [label="Assert.Equal(null, result[''Key1''])", span="900-900", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_637 [label="Entry lambda expression", span="898-898", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_640 [label="Entry lambda expression", span="898-898", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_636 [label="Exit lambda expression", span="888-901", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_638 [label="(string)x.Field", span="898-898", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_639 [label="Exit lambda expression", span="898-898", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_641 [label="(string)x.Value", span="898-898", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_642 [label="Exit lambda expression", span="898-898", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_646 [label="Entry lambda expression", span="907-908", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_647 [label="Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null))", span="908-908", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_650 [label="connection.GetAllEntriesFromHash(null)", span="908-908", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_648 [label="Exit lambda expression", span="907-908", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_649 [label="Entry lambda expression", span="908-908", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_651 [label="Exit lambda expression", span="908-908", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_656 [label="Entry lambda expression", span="914-918", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_657 [label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="916-916", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_658 [label="Assert.Null(result)", span="917-917", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_659 [label="Exit lambda expression", span="914-918", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_665 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-hash'', field = ''Key1'', value = ''Value1'' },\r\n                    new { key = ''some-hash'', field = ''Key2'', value = ''Value2'' },\r\n                    new { key = ''another-hash'', field = ''Key3'', value = ''Value3'' }\r\n                })", span="931-936", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_664 [label="Entry lambda expression", span="928-946", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_666 [label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="939-939", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_667 [label="Assert.NotNull(result)", span="942-942", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_668 [label="Assert.Equal(2, result.Count)", span="943-943", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_669 [label="Assert.Equal(''Value1'', result[''Key1''])", span="944-944", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_670 [label="Assert.Equal(''Value2'', result[''Key2''])", span="945-945", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_671 [label="Exit lambda expression", span="928-946", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_675 [label="Entry lambda expression", span="952-956", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_676 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetSetCount(null))", span="954-955", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_679 [label="connection.GetSetCount(null)", span="955-955", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_677 [label="Exit lambda expression", span="952-956", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_678 [label="Entry lambda expression", span="955-955", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_680 [label="Exit lambda expression", span="955-955", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_685 [label="Entry lambda expression", span="962-966", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_686 [label="var result = connection.GetSetCount(''my-set'')", span="964-964", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_687 [label="Assert.Equal(0, result)", span="965-965", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_688 [label="Exit lambda expression", span="962-966", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_694 [label="sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { key = ''set-1'', value = ''value-1'' },\r\n                    new { key = ''set-2'', value = ''value-1'' },\r\n                    new { key = ''set-1'', value = ''value-2'' }\r\n                })", span="978-983", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_693 [label="Entry lambda expression", span="976-988", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_695 [label="var result = connection.GetSetCount(''set-1'')", span="985-985", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_696 [label="Assert.Equal(2, result)", span="987-987", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_697 [label="Exit lambda expression", span="976-988", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_702 [label="Entry lambda expression", span="994-997", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_703 [label="Assert.Throws<ArgumentNullException>(() => connection.GetRangeFromSet(null, 0, 1))", span="996-996", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_706 [label="connection.GetRangeFromSet(null, 0, 1)", span="996-996", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_704 [label="Exit lambda expression", span="994-997", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_705 [label="Entry lambda expression", span="996-996", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_707 [label="Exit lambda expression", span="996-996", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_714 [label="sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { Key = ''set-1'', Value = ''1'' },\r\n                    new { Key = ''set-1'', Value = ''2'' },\r\n                    new { Key = ''set-1'', Value = ''3'' },\r\n                    new { Key = ''set-1'', Value = ''4'' },\r\n                    new { Key = ''set-2'', Value = ''4'' },\r\n                    new { Key = ''set-1'', Value = ''5'' }\r\n                })", span="1009-1017", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_713 [label="Entry lambda expression", span="1007-1022", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_715 [label="var result = connection.GetRangeFromSet(''set-1'', 2, 3)", span="1019-1019", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_716 [label="Assert.Equal(new [] { ''3'', ''4'' }, result)", span="1021-1021", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_717 [label="Exit lambda expression", span="1007-1022", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_721 [label="Entry lambda expression", span="1028-1032", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_722 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetCounter(null))", span="1030-1031", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_725 [label="connection.GetCounter(null)", span="1031-1031", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_723 [label="Exit lambda expression", span="1028-1032", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_724 [label="Entry lambda expression", span="1031-1031", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_726 [label="Exit lambda expression", span="1031-1031", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_731 [label="Entry lambda expression", span="1038-1042", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_732 [label="var result = connection.GetCounter(''my-counter'')", span="1040-1040", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_733 [label="Assert.Equal(0, result)", span="1041-1041", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_734 [label="Exit lambda expression", span="1038-1042", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_740 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 1 },\r\n                    new { key = ''counter-2'', value = 1 },\r\n                    new { key = ''counter-1'', value = 1 }\r\n                })", span="1055-1060", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_739 [label="Entry lambda expression", span="1052-1067", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_741 [label="var result = connection.GetCounter(''counter-1'')", span="1063-1063", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_742 [label="Assert.Equal(2, result)", span="1066-1066", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_743 [label="Exit lambda expression", span="1052-1067", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_749 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 12 },\r\n                    new { key = ''counter-2'', value = 15 }\r\n                })", span="1080-1084", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_748 [label="Entry lambda expression", span="1077-1090", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_750 [label="var result = connection.GetCounter(''counter-1'')", span="1087-1087", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_751 [label="Assert.Equal(12, result)", span="1089-1089", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_752 [label="Exit lambda expression", span="1077-1090", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_756 [label="Entry lambda expression", span="1096-1099", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_757 [label="Assert.Throws<ArgumentNullException>(() => connection.GetHashCount(null))", span="1098-1098", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_760 [label="connection.GetHashCount(null)", span="1098-1098", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_758 [label="Exit lambda expression", span="1096-1099", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_759 [label="Entry lambda expression", span="1098-1098", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_761 [label="Exit lambda expression", span="1098-1098", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_766 [label="Entry lambda expression", span="1105-1109", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_767 [label="var result = connection.GetHashCount(''my-hash'')", span="1107-1107", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_768 [label="Assert.Equal(0, result)", span="1108-1108", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_769 [label="Exit lambda expression", span="1105-1109", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_775 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'' }\r\n                })", span="1122-1127", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_774 [label="Entry lambda expression", span="1119-1134", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_776 [label="var result = connection.GetHashCount(''hash-1'')", span="1130-1130", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_777 [label="Assert.Equal(2, result)", span="1133-1133", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_778 [label="Exit lambda expression", span="1119-1134", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_782 [label="Entry lambda expression", span="1140-1144", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_783 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetHashTtl(null))", span="1142-1143", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_786 [label="connection.GetHashTtl(null)", span="1143-1143", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_784 [label="Exit lambda expression", span="1140-1144", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_785 [label="Entry lambda expression", span="1143-1143", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_787 [label="Exit lambda expression", span="1143-1143", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_792 [label="Entry lambda expression", span="1150-1154", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_793 [label="var result = connection.GetHashTtl(''my-hash'')", span="1152-1152", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_794 [label="Assert.True(result < TimeSpan.Zero)", span="1153-1153", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_795 [label="Exit lambda expression", span="1150-1154", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_801 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = (DateTime?) null }\r\n                })", span="1167-1171", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_800 [label="Entry lambda expression", span="1164-1179", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_802 [label="var result = connection.GetHashTtl(''hash-1'')", span="1174-1174", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_803 [label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1177-1177", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_804 [label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1178-1178", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_805 [label="Exit lambda expression", span="1164-1179", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_809 [label="Entry lambda expression", span="1185-1189", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_810 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListCount(null))", span="1187-1188", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_813 [label="connection.GetListCount(null)", span="1188-1188", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_811 [label="Exit lambda expression", span="1185-1189", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_812 [label="Entry lambda expression", span="1188-1188", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_814 [label="Exit lambda expression", span="1188-1188", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_819 [label="Entry lambda expression", span="1195-1199", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_820 [label="var result = connection.GetListCount(''my-list'')", span="1197-1197", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_821 [label="Assert.Equal(0, result)", span="1198-1198", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_822 [label="Exit lambda expression", span="1195-1199", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_828 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-2'' }\r\n                })", span="1212-1217", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_827 [label="Entry lambda expression", span="1209-1224", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_829 [label="var result = connection.GetListCount(''list-1'')", span="1220-1220", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_830 [label="Assert.Equal(2, result)", span="1223-1223", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_831 [label="Exit lambda expression", span="1209-1224", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_835 [label="Entry lambda expression", span="1230-1234", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_836 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListTtl(null))", span="1232-1233", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_839 [label="connection.GetListTtl(null)", span="1233-1233", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_837 [label="Exit lambda expression", span="1230-1234", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_838 [label="Entry lambda expression", span="1233-1233", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_840 [label="Exit lambda expression", span="1233-1233", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_845 [label="Entry lambda expression", span="1240-1244", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_846 [label="var result = connection.GetListTtl(''my-list'')", span="1242-1242", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_847 [label="Assert.True(result < TimeSpan.Zero)", span="1243-1243", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_848 [label="Exit lambda expression", span="1240-1244", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_854 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''list-2'', expireAt = (DateTime?) null }\r\n                })", span="1257-1261", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_853 [label="Entry lambda expression", span="1254-1269", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_855 [label="var result = connection.GetListTtl(''list-1'')", span="1264-1264", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_856 [label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1267-1267", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_857 [label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1268-1268", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_858 [label="Exit lambda expression", span="1254-1269", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_862 [label="Entry lambda expression", span="1275-1281", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_863 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(null, ''name''))", span="1277-1278", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_867 [label="connection.GetValueFromHash(null, ''name'')", span="1278-1278", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_864 [label="Assert.Equal(''key'', exception.ParamName)", span="1280-1280", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_866 [label="Entry lambda expression", span="1278-1278", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_865 [label="Exit lambda expression", span="1275-1281", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_868 [label="Exit lambda expression", span="1278-1278", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_873 [label="Entry lambda expression", span="1287-1293", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_874 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(''key'', null))", span="1289-1290", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_878 [label="connection.GetValueFromHash(''key'', null)", span="1290-1290", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_875 [label="Assert.Equal(''name'', exception.ParamName)", span="1292-1292", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_877 [label="Entry lambda expression", span="1290-1290", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_876 [label="Exit lambda expression", span="1287-1293", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_879 [label="Exit lambda expression", span="1290-1290", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_883 [label="Entry lambda expression", span="1299-1303", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_884 [label="var result = connection.GetValueFromHash(''my-hash'', ''name'')", span="1301-1301", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_885 [label="Assert.Null(result)", span="1302-1302", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_886 [label="Exit lambda expression", span="1299-1303", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_892 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'', value = ''1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'', value = ''2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'', value = ''3'' }\r\n                })", span="1316-1321", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_891 [label="Entry lambda expression", span="1313-1328", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_893 [label="var result = connection.GetValueFromHash(''hash-1'', ''field-1'')", span="1324-1324", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_894 [label="Assert.Equal(''1'', result)", span="1327-1327", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_895 [label="Exit lambda expression", span="1313-1328", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_899 [label="Entry lambda expression", span="1334-1340", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_900 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetRangeFromList(null, 0, 1))", span="1336-1337", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_904 [label="connection.GetRangeFromList(null, 0, 1)", span="1337-1337", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_901 [label="Assert.Equal(''key'', exception.ParamName)", span="1339-1339", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_903 [label="Entry lambda expression", span="1337-1337", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_902 [label="Exit lambda expression", span="1334-1340", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_905 [label="Exit lambda expression", span="1337-1337", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_910 [label="Entry lambda expression", span="1346-1350", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_911 [label="var result = connection.GetRangeFromList(''my-list'', 0, 1)", span="1348-1348", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_912 [label="Assert.Empty(result)", span="1349-1349", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_913 [label="Exit lambda expression", span="1346-1350", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_920 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' },\r\n                    new { key = ''list-1'', value = ''4'' },\r\n                    new { key = ''list-1'', value = ''5'' }\r\n                })", span="1363-1370", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_919 [label="Entry lambda expression", span="1360-1377", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_921 [label="var result = connection.GetRangeFromList(''list-1'', 1, 2)", span="1373-1373", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_922 [label="Assert.Equal(new [] { ''4'', ''3'' }, result)", span="1376-1376", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_923 [label="Exit lambda expression", span="1360-1377", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_927 [label="Entry lambda expression", span="1383-1387", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_928 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetAllItemsFromList(null))", span="1385-1386", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_931 [label="connection.GetAllItemsFromList(null)", span="1386-1386", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_929 [label="Exit lambda expression", span="1383-1387", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_930 [label="Entry lambda expression", span="1386-1386", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_932 [label="Exit lambda expression", span="1386-1386", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_937 [label="Entry lambda expression", span="1393-1397", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_938 [label="var result = connection.GetAllItemsFromList(''my-list'')", span="1395-1395", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_939 [label="Assert.Empty(result)", span="1396-1396", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_940 [label="Exit lambda expression", span="1393-1397", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_946 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' }\r\n                })", span="1410-1415", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_945 [label="Entry lambda expression", span="1407-1422", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_947 [label="var result = connection.GetAllItemsFromList(''list-1'')", span="1418-1418", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_948 [label="Assert.Equal(new [] { ''3'', ''1'' }, result)", span="1421-1421", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_949 [label="Exit lambda expression", span="1407-1422", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_953 [label="Entry lambda expression", span="1428-1431", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_954 [label="Assert.Throws<ArgumentNullException>(() => connection.GetSetTtl(null))", span="1430-1430", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_957 [label="connection.GetSetTtl(null)", span="1430-1430", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_955 [label="Exit lambda expression", span="1428-1431", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_956 [label="Entry lambda expression", span="1430-1430", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_958 [label="Exit lambda expression", span="1430-1430", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_963 [label="Entry lambda expression", span="1437-1441", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_964 [label="var result = connection.GetSetTtl(''my-set'')", span="1439-1439", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_965 [label="Assert.True(result < TimeSpan.Zero)", span="1440-1440", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_966 [label="Exit lambda expression", span="1437-1441", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_972 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) },\r\n                    new { key = ''set-2'', value = ''2'', expireAt = (DateTime?) null }\r\n                })", span="1454-1458", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_971 [label="Entry lambda expression", span="1451-1466", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_973 [label="var result = connection.GetSetTtl(''set-1'')", span="1461-1461", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_974 [label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1464-1464", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_975 [label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1465-1465", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_976 [label="Exit lambda expression", span="1451-1466", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_997 [label="x.QueueProviders", span="1486-1486", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_998 [label="Exit lambda expression", span="1486-1486", cluster="lambda expression", file="SqlServerConnectionFacts.cs"];
m9_88 [label="Entry Unk.UseConnections", span="", cluster="Unk.UseConnections", file="SqlServerConnectionFacts.cs"];
m9_476 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="672-672", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs"];
m9_477 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.NotNull(server.LastHeartbeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="674-699", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs"];
m9_478 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="672-672", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs"];
m9_603 [label="Entry Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnectionFacts.cs"];
m9_63 [label="Entry Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="54-54", cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnectionFacts.cs"];
m9_770 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", span="1113-1113", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SqlServerConnectionFacts.cs"];
m9_771 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="1115-1117", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SqlServerConnectionFacts.cs"];
m9_772 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetHashCount(''hash-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="1119-1134", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SqlServerConnectionFacts.cs"];
m9_773 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", span="1113-1113", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="SqlServerConnectionFacts.cs"];
m9_24 [label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", span="39-39", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerConnectionFacts.cs"];
m9_9 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="SqlServerConnectionFacts.cs"];
m9_454 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="648-648", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_455 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="650-656", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_456 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="648-648", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_166 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="233-233", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerConnectionFacts.cs"];
m9_564 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="791-791", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_565 [label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null)))", span="793-794", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_566 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="791-791", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_788 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="445-445", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnectionFacts.cs"];
m9_110 [label="Entry System.Threading.Thread.Join()", span="0-0", cluster="System.Threading.Thread.Join()", file="SqlServerConnectionFacts.cs"];
m9_324 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="444-444", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_325 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="446-452", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_326 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="444-444", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_243 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="286-286", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs"];
m9_244 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="288-292", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs"];
m9_245 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="286-286", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs"];
m9_56 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="71-71", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs"];
m9_57 [label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="73-77", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs"];
m9_58 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="71-71", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs"];
m9_204 [label="Entry System.DateTime.AddMinutes(double)", span="0-0", cluster="System.DateTime.AddMinutes(double)", file="SqlServerConnectionFacts.cs"];
m9_400 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="562-562", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_401 [label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="564-568", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_402 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="562-562", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs"];
m9_977 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", span="1469-1469", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", file="SqlServerConnectionFacts.cs"];
m9_978 [label="var sqlConnection = ConnectionUtils.CreateConnection()", span="1471-1471", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", file="SqlServerConnectionFacts.cs"];
m9_979 [label="var storage = new SqlServerStorage(sqlConnection, new SqlServerStorageOptions { CommandBatchMaxTimeout = useBatching ? TimeSpan.FromMinutes(1) : (TimeSpan?)null })", span="1473-1473", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", file="SqlServerConnectionFacts.cs"];
m9_981 [label="action(sqlConnection, connection)", span="1476-1476", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", file="SqlServerConnectionFacts.cs"];
m9_980 [label="var connection = new SqlServerConnection(storage)", span="1474-1474", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", file="SqlServerConnectionFacts.cs"];
m9_982 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", span="1469-1469", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>, bool)", file="SqlServerConnectionFacts.cs"];
m9_45 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="SqlServerConnectionFacts.cs"];
m9_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SqlServerConnectionFacts.cs"];
m9_170 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="1495-1495", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="SqlServerConnectionFacts.cs"];
m9_999 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="1495-1495", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="SqlServerConnectionFacts.cs"];
m9_614 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords(bool)", span="863-863", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerConnectionFacts.cs"];
m9_615 [label="UseConnections((sql, connection) =>\r\n            {\r\n                connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            }, useBatching)", span="865-880", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerConnectionFacts.cs"];
m9_616 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords(bool)", span="863-863", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerConnectionFacts.cs"];
m9_708 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="389-389", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnectionFacts.cs"];
m9_35 [label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken()", file="SqlServerConnectionFacts.cs"];
m9_806 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", span="1183-1183", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_807 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListCount(null));\r\n            })", span="1185-1189", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_808 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", span="1183-1183", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_985 [label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="31-31", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerConnectionFacts.cs"];
m9_593 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="837-837", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_594 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="839-845", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_595 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="837-837", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_0 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", span="22-22", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs"];
m9_1 [label="_queue = new Mock<IPersistentJobQueue>()", span="24-24", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs"];
m9_2 [label="var provider = new Mock<IPersistentJobQueueProvider>()", span="26-26", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs"];
m9_3 [label="provider.Setup(x => x.GetJobQueue())\r\n                .Returns(_queue.Object)", span="27-28", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs"];
m9_4 [label="_providers = new PersistentJobQueueProviderCollection(provider.Object)", span="30-30", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs"];
m9_5 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", span="22-22", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs"];
m9_983 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerConnectionFacts.cs"];
m9_242 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="140-140", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnectionFacts.cs"];
m9_993 [label="Entry Mock<SqlServerStorage>.cstr", span="", cluster="Mock<SqlServerStorage>.cstr", file="SqlServerConnectionFacts.cs"];
m9_73 [label="Entry Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="59-59", cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerConnectionFacts.cs"];
m9_156 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", span="196-196", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs"];
m9_157 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="198-208", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs"];
m9_158 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", span="196-196", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs"];
m9_689 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", span="970-970", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SqlServerConnectionFacts.cs"];
m9_690 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="972-974", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SqlServerConnectionFacts.cs"];
m9_691 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { key = ''set-1'', value = ''value-1'' },\r\n                    new { key = ''set-2'', value = ''value-1'' },\r\n                    new { key = ''set-1'', value = ''value-2'' }\r\n                });\r\n\r\n                var result = connection.GetSetCount(''set-1'');\r\n\r\n                Assert.Equal(2, result);\r\n            })", span="976-988", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SqlServerConnectionFacts.cs"];
m9_692 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", span="970-970", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="SqlServerConnectionFacts.cs"];
m9_842 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", span="1238-1238", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_843 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetListTtl(''my-list'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1240-1244", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_844 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", span="1238-1238", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_199 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="SqlServerConnectionFacts.cs"];
m9_552 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="767-767", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs"];
m9_553 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="769-771", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs"];
m9_554 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="773-787", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs"];
m9_555 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="767-767", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs"];
m9_832 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", span="1228-1228", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_833 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListTtl(null));\r\n            })", span="1230-1234", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_834 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", span="1228-1228", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_995 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="SqlServerConnectionFacts.cs"];
m9_290 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", span="347-347", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SqlServerConnectionFacts.cs"];
m9_291 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues ('', '', '', getutcdate());\r\ndeclare @JobId int;\r\nset @JobId = scope_identity();\r\ninsert into HangFire.State (JobId, Name, CreatedAt)\r\nvalues (@JobId, 'old-state', getutcdate());\r\ninsert into HangFire.State (JobId, Name, Reason, Data, CreatedAt)\r\nvalues (@JobId, @name, @reason, @data, getutcdate());\r\ndeclare @StateId int;\r\nset @StateId = scope_identity();\r\nupdate HangFire.Job set StateId = @StateId;\r\nselect @JobId as Id;''", span="349-361", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SqlServerConnectionFacts.cs"];
m9_292 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var data = new Dictionary<string, string>\r\n                {\r\n                    { ''Key'', ''Value'' }\r\n                };\r\n\r\n                var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id;\r\n\r\n                var result = connection.GetStateData(jobId.ToString());\r\n                Assert.NotNull(result);\r\n\r\n                Assert.Equal(''Name'', result.Name);\r\n                Assert.Equal(''Reason'', result.Reason);\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="363-380", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SqlServerConnectionFacts.cs"];
m9_293 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", span="347-347", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="SqlServerConnectionFacts.cs"];
m9_880 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", span="1297-1297", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_881 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetValueFromHash(''my-hash'', ''name'');\r\n                Assert.Null(result);\r\n            })", span="1299-1303", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_882 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", span="1297-1297", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_52 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="SqlServerConnectionFacts.cs"];
m9_64 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="SqlServerConnectionFacts.cs"];
m9_42 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", span="57-57", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", file="SqlServerConnectionFacts.cs"];
m9_43 [label="UseConnection(connection =>\r\n            {\r\n                var token = new CancellationToken();\r\n                var anotherProvider = new Mock<IPersistentJobQueueProvider>();\r\n                _providers.Add(anotherProvider.Object, new [] { ''critical'' });\r\n\r\n                Assert.Throws<InvalidOperationException>(\r\n                    () => connection.FetchNextJob(new[] { ''critical'', ''default'' }, token));\r\n            })", span="59-67", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", file="SqlServerConnectionFacts.cs"];
m9_44 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", span="57-57", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", file="SqlServerConnectionFacts.cs"];
m9_171 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters(bool)", span="214-214", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters(bool)", file="SqlServerConnectionFacts.cs"];
m9_172 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var createdAt = new DateTime(2012, 12, 12);\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1));\r\n\r\n                Assert.NotNull(jobId);\r\n                Assert.NotEmpty(jobId);\r\n\r\n                var sqlJob = sql.Query(''select * from HangFire.Job'').Single();\r\n                Assert.Equal(jobId, sqlJob.Id.ToString());\r\n                Assert.Equal(createdAt, sqlJob.CreatedAt);\r\n                Assert.Equal(null, (int?) sqlJob.StateId);\r\n                Assert.Equal(null, (string) sqlJob.StateName);\r\n\r\n                var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData);\r\n                invocationData.Arguments = sqlJob.Arguments;\r\n\r\n                var job = invocationData.Deserialize();\r\n                Assert.Equal(typeof(SqlServerConnectionFacts), job.Type);\r\n                Assert.Equal(''SampleMethod'', job.Method.Name);\r\n                Assert.Equal(''Hello'', job.Args[0]);\r\n\r\n                Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.ExpireAt);\r\n                Assert.True(sqlJob.ExpireAt < createdAt.AddDays(1).AddMinutes(1));\r\n\r\n                var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value);\r\n\r\n                Assert.Equal(''Value1'', parameters[''Key1'']);\r\n                Assert.Equal(''Value2'', parameters[''Key2'']);\r\n            }, useBatching)", span="216-252", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters(bool)", file="SqlServerConnectionFacts.cs"];
m9_173 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters(bool)", span="214-214", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters(bool)", file="SqlServerConnectionFacts.cs"];
m9_8 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="SqlServerConnectionFacts.cs"];
m9_753 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", span="1094-1094", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_754 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetHashCount(null));\r\n            })", span="1096-1099", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_755 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", span="1094-1094", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_250 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="SqlServerConnectionFacts.cs"];
m9_25 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="43-43", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SqlServerConnectionFacts.cs"];
m9_26 [label="UseConnection(connection =>\r\n            {\r\n                var token = new CancellationToken();\r\n                var queues = new[] { ''default'' };\r\n\r\n                connection.FetchNextJob(queues, token);\r\n\r\n                _queue.Verify(x => x.Dequeue(queues, token));\r\n            })", span="45-53", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SqlServerConnectionFacts.cs"];
m9_27 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="43-43", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SqlServerConnectionFacts.cs"];
m9_582 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="810-810", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerConnectionFacts.cs"];
m9_583 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues (@key, 0.0, @value)''", span="812-814", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerConnectionFacts.cs"];
m9_584 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-set'', value = ''1'' },\r\n                    new { key = ''some-set'', value = ''2'' },\r\n                    new { key = ''another-set'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Contains(''1'', result);\r\n                Assert.Contains(''2'', result);\r\n            })", span="816-833", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerConnectionFacts.cs"];
m9_585 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="810-810", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="SqlServerConnectionFacts.cs"];
m9_10 [label="Entry PersistentJobQueueProviderCollection.cstr", span="", cluster="PersistentJobQueueProviderCollection.cstr", file="SqlServerConnectionFacts.cs"];
m9_155 [label="Entry Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="84-84", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnectionFacts.cs"];
m9_268 [label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32", cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerConnectionFacts.cs"];
m9_562 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="SqlServerConnectionFacts.cs"];
m9_198 [label="Entry Unk.NotEmpty", span="", cluster="Unk.NotEmpty", file="SqlServerConnectionFacts.cs"];
m9_14 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="SqlServerConnectionFacts.cs"];
m9_135 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_IsReentrant_FromTheSameConnection_OnTheSameResource()", span="167-167", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_IsReentrant_FromTheSameConnection_OnTheSameResource()", file="SqlServerConnectionFacts.cs"];
m9_136 [label="UseConnection(connection =>\r\n            {\r\n                using (connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5)))\r\n                using (connection.AcquireDistributedLock(''hello'', TimeSpan.FromMinutes(5)))\r\n                {\r\n                    Assert.True(true);\r\n                }\r\n            })", span="169-176", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_IsReentrant_FromTheSameConnection_OnTheSameResource()", file="SqlServerConnectionFacts.cs"];
m9_137 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_IsReentrant_FromTheSameConnection_OnTheSameResource()", span="167-167", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_IsReentrant_FromTheSameConnection_OnTheSameResource()", file="SqlServerConnectionFacts.cs"];
m9_914 [label="Entry Unk.Empty", span="", cluster="Unk.Empty", file="SqlServerConnectionFacts.cs"];
m9_604 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="849-849", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerConnectionFacts.cs"];
m9_605 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="851-857", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerConnectionFacts.cs"];
m9_606 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="849-849", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerConnectionFacts.cs"];
m9_763 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", span="1103-1103", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_764 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetHashCount(''my-hash'');\r\n                Assert.Equal(0, result);\r\n            })", span="1105-1109", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_765 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", span="1103-1103", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_779 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", span="1138-1138", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_780 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetHashTtl(null));\r\n            })", span="1140-1144", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_781 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", span="1138-1138", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_28 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", span="1481-1481", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_987 [label="var sql = ConnectionUtils.CreateConnection()", span="1483-1483", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_991 [label="action(connection)", span="1490-1490", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_988 [label="var storage = new Mock<SqlServerStorage>(sql)", span="1485-1485", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_989 [label="storage.Setup(x => x.QueueProviders).Returns(_providers)", span="1486-1486", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_990 [label="var connection = new SqlServerConnection(storage.Object)", span="1488-1488", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_992 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", span="1481-1481", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs"];
m9_573 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="240-240", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnectionFacts.cs"];
m9_37 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SqlServerConnectionFacts.cs"];
m9_718 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", span="1026-1026", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_719 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetCounter(null));\r\n            })", span="1028-1032", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_720 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", span="1026-1026", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_896 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", span="1332-1332", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_897 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetRangeFromList(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1334-1340", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_898 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", span="1332-1332", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_379 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="538-538", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_380 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="540-546", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_381 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="538-538", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_492 [label="Entry string.StartsWith(string)", span="0-0", cluster="string.StartsWith(string)", file="SqlServerConnectionFacts.cs"];
m9_84 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerConnectionFacts.cs"];
m9_915 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", span="1354-1354", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SqlServerConnectionFacts.cs"];
m9_916 [label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], [Value])\r\nvalues (@key, @value)''", span="1356-1358", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SqlServerConnectionFacts.cs"];
m9_917 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' },\r\n                    new { key = ''list-1'', value = ''4'' },\r\n                    new { key = ''list-1'', value = ''5'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetRangeFromList(''list-1'', 1, 2);\r\n                \r\n                // Assert\r\n                Assert.Equal(new [] { ''4'', ''3'' }, result);\r\n            })", span="1360-1377", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SqlServerConnectionFacts.cs"];
m9_918 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", span="1354-1354", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="SqlServerConnectionFacts.cs"];
m9_205 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="SqlServerConnectionFacts.cs"];
m9_563 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="SqlServerConnectionFacts.cs"];
m9_144 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="180-180", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs"];
m9_145 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="182-192", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs"];
m9_146 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="180-180", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs"];
m9_728 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", span="1036-1036", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_729 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetCounter(''my-counter'');\r\n                Assert.Equal(0, result);\r\n            })", span="1038-1042", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_730 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", span="1036-1036", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_933 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="518-518", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnectionFacts.cs"];
m9_950 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", span="1426-1426", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_951 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetSetTtl(null));\r\n            })", span="1428-1431", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_952 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", span="1426-1426", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_65 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", span="81-81", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs"];
m9_66 [label="UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireDistributedLock(''1'', TimeSpan.FromSeconds(1));\r\n                Assert.NotNull(@lock);\r\n            })", span="83-87", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs"];
m9_67 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", span="81-81", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs"];
m9_196 [label="Entry System.DateTime.DateTime(int, int, int)", span="0-0", cluster="System.DateTime.DateTime(int, int, int)", file="SqlServerConnectionFacts.cs"];
m9_19 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerConnectionFacts.cs"];
m9_334 [label="Entry Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="211-211", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnectionFacts.cs"];
m9_672 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", span="950-950", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_673 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetSetCount(null));\r\n            })", span="952-956", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_674 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", span="950-950", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs"];
m9_72 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerConnectionFacts.cs"];
m9_444 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="627-627", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs"];
m9_445 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="629-635", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs"];
m9_446 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="637-644", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs"];
m9_447 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="627-627", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs"];
m9_709 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", span="1001-1001", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SqlServerConnectionFacts.cs"];
m9_710 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@Key, @Value, 0.0)''", span="1003-1005", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SqlServerConnectionFacts.cs"];
m9_711 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { Key = ''set-1'', Value = ''1'' },\r\n                    new { Key = ''set-1'', Value = ''2'' },\r\n                    new { Key = ''set-1'', Value = ''3'' },\r\n                    new { Key = ''set-1'', Value = ''4'' },\r\n                    new { Key = ''set-2'', Value = ''4'' },\r\n                    new { Key = ''set-1'', Value = ''5'' }\r\n                });\r\n\r\n                var result = connection.GetRangeFromSet(''set-1'', 2, 3);\r\n\r\n                Assert.Equal(new [] { ''3'', ''4'' }, result);\r\n            })", span="1007-1022", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SqlServerConnectionFacts.cs"];
m9_712 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", span="1001-1001", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="SqlServerConnectionFacts.cs"];
m9_197 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="SqlServerConnectionFacts.cs"];
m9_356 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="491-491", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs"];
m9_357 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="493-496", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs"];
m9_358 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="498-511", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs"];
m9_359 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="491-491", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs"];
m9_959 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="405-405", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnectionFacts.cs"];
m9_389 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="229-229", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnectionFacts.cs"];
m9_464 [label="Entry Hangfire.Server.ServerContext.ServerContext()", span="20-20", cluster="Hangfire.Server.ServerContext.ServerContext()", file="SqlServerConnectionFacts.cs"];
m9_154 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerConnectionFacts.cs"];
m9_282 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="180-180", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnectionFacts.cs"];
m9_416 [label="Entry Unk.GetJobParameter", span="", cluster="Unk.GetJobParameter", file="SqlServerConnectionFacts.cs"];
m9_108 [label="Entry System.Threading.ManualResetEventSlim.Wait()", span="0-0", cluster="System.Threading.ManualResetEventSlim.Wait()", file="SqlServerConnectionFacts.cs"];
m9_525 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="737-737", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs"];
m9_526 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues\r\n('server1', '', '2012-12-12 12:12:12'),\r\n('server2', '', '2012-12-12 12:12:12')''", span="739-743", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs"];
m9_527 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat);\r\n\r\n                Assert.NotEqual(2012, servers[''server1''].Year);\r\n                Assert.Equal(2012, servers[''server2''].Year);\r\n            })", span="745-756", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs"];
m9_528 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="737-737", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs"];
m9_907 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1344-1344", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_908 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetRangeFromList(''my-list'', 0, 1);\r\n                Assert.Empty(result);\r\n            })", span="1346-1350", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_909 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1344-1344", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_74 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_WhenResourceIsNullOrEmpty()", span="91-91", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerConnectionFacts.cs"];
m9_75 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                () => connection.AcquireDistributedLock('''', TimeSpan.FromMinutes(5)));\r\n\r\n                Assert.Equal(''resource'', exception.ParamName);\r\n            })", span="93-99", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerConnectionFacts.cs"];
m9_76 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_WhenResourceIsNullOrEmpty()", span="91-91", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireDistributedLock_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerConnectionFacts.cs"];
m9_251 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="296-296", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_252 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="298-301", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_253 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Args[0]);\r\n                Assert.Null(result.LoadException);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < result.CreatedAt);\r\n                Assert.True(result.CreatedAt < DateTime.UtcNow.AddMinutes(1));\r\n            })", span="303-325", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_254 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="296-296", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs"];
m9_493 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="SqlServerConnectionFacts.cs"];
m9_515 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="730-730", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_516 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="732-733", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_517 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="730-730", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_823 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", span="1203-1203", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SqlServerConnectionFacts.cs"];
m9_824 [label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key])\r\nvalues (@key)''", span="1205-1207", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SqlServerConnectionFacts.cs"];
m9_825 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-2'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetListCount(''list-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="1209-1224", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SqlServerConnectionFacts.cs"];
m9_826 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", span="1203-1203", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="SqlServerConnectionFacts.cs"];
m9_681 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="379-379", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnectionFacts.cs"];
m9_94 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SqlServerConnectionFacts.cs"];
m9_233 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="279-279", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_234 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="281-282", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_235 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="279-279", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs"];
m9_143 [label="Entry Unk.True", span="", cluster="Unk.True", file="SqlServerConnectionFacts.cs"];
m9_437 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="615-615", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_438 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="617-623", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_439 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="615-615", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_815 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="473-473", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnectionFacts.cs"];
m9_682 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", span="960-960", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_683 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetSetCount(''my-set'');\r\n                Assert.Equal(0, result);\r\n            })", span="962-966", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_684 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", span="960-960", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="SqlServerConnectionFacts.cs"];
m9_1000 [label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", span="", file="SqlServerConnectionFacts.cs"];
m9_1001 [label=token, span="", file="SqlServerConnectionFacts.cs"];
m9_1002 [label=queues, span="", file="SqlServerConnectionFacts.cs"];
m9_1003 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1004 [label=token, span="", file="SqlServerConnectionFacts.cs"];
m9_1005 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1006 [label=releaseLock, span="", file="SqlServerConnectionFacts.cs"];
m9_1007 [label=lockAcquired, span="", file="SqlServerConnectionFacts.cs"];
m9_1008 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1009 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1010 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1011 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1012 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1013 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1014 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1015 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1016 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1017 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1018 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1019 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1020 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1021 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1022 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1023 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1024 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1025 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1026 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1027 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1028 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1029 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1030 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1031 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1032 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1033 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1034 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1035 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1036 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1037 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1038 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1039 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1040 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1041 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1042 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1043 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1044 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1045 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1046 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1047 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1048 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1049 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1050 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1051 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1052 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1053 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1054 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1055 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1056 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1057 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1058 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1059 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1060 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1061 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1062 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1063 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m9_1064 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="SqlServerConnectionFacts.cs"];
m9_1065 [label=arrangeSql, span="", file="SqlServerConnectionFacts.cs"];
m10_85 [label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", span="79-79", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs"];
m10_86 [label="_process\r\n                .Setup(x => x.ChangeState(It.IsAny<StateChangeContext>()))\r\n                .Returns<IState>(null)", span="81-83", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs"];
m10_87 [label="var scheduler = CreateScheduler()", span="85-85", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs"];
m10_88 [label="scheduler.Execute(_context.Object)", span="87-87", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs"];
m10_89 [label="_transaction.Verify(x => x.RemoveFromSet(''schedule'', JobId))", span="89-89", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs"];
m10_90 [label="_transaction.Verify(x => x.Commit())", span="90-90", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs"];
m10_91 [label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", span="79-79", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="TypeExtensions.cs"];
m10_12 [label="Entry object.Equals(object, object)", span="0-0", cluster="object.Equals(object, object)", file="TypeExtensions.cs"];
m10_18 [label="Elements.ForEach(combiner.AddFingerprint)", span="83-83", cluster="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain.GetHashCode()", file="TypeExtensions.cs"];
m10_49 [label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", span="50-50", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", file="TypeExtensions.cs"];
m10_53 [label="_connection.Verify(x => x.Dispose())", span="61-61", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", color=green, community=0, file="TypeExtensions.cs"];
m10_52 [label="_process.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is EnqueuedState &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ScheduledState.StateName }))))", span="56-59", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", file="TypeExtensions.cs"];
m10_50 [label="var scheduler = CreateScheduler()", span="52-52", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", file="TypeExtensions.cs"];
m10_51 [label="scheduler.Execute(_context.Object)", span="54-54", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", file="TypeExtensions.cs"];
m10_54 [label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", span="50-50", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_MovesJobStateToEnqueued()", file="TypeExtensions.cs"];
m10_0 [label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", span="19-19", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs"];
m10_1 [label="_context = new BackgroundProcessContextMock()", span="21-21", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs"];
m10_3 [label="_connection = new Mock<IStorageConnection>()", span="24-24", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs"];
m10_7 [label="_connection.Setup(x => x.CreateWriteTransaction()).Returns(_transaction.Object)", span="29-29", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs"];
m10_2 [label="_context.CancellationTokenSource.Cancel()", span="22-22", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs"];
m10_4 [label="_context.Storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="25-25", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", color=red, community=0, file="TypeExtensions.cs"];
m10_5 [label="_process = new Mock<IStateChangeProcess>()", span="27-27", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs"];
m10_6 [label="_transaction = new Mock<IWriteOnlyTransaction>()", span="28-28", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs"];
m10_9 [label="_connection\r\n                .Setup(x => x.AcquireDistributedLock(''locks:schedulepoller'', It.IsAny<TimeSpan>()))\r\n                .Returns(_distributedLock.Object)", span="32-34", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs"];
m10_10 [label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns(JobId)", span="36-37", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs"];
m10_8 [label="_distributedLock = new Mock<IDisposable>()", span="31-31", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs"];
m10_11 [label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", span="19-19", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.DelayedJobScheduler()", file="TypeExtensions.cs"];
m10_22 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="TypeExtensions.cs"];
m10_44 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="TypeExtensions.cs"];
m10_13 [label="Entry HangFire.Common.ExpressionUtil.ExpressionFingerprintChain.Equals(object)", span="75-75", cluster="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain.Equals(object)", file="TypeExtensions.cs"];
m10_31 [label="Entry Unk.>", span="", cluster="Unk.>", file="TypeExtensions.cs"];
m10_40 [label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.Ctor_ThrowsAnException_WhenProcessIsNull()", span="41-41", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Ctor_ThrowsAnException_WhenProcessIsNull()", file="TypeExtensions.cs"];
m10_41 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Hangfire.Server.DelayedJobScheduler(Timeout.InfiniteTimeSpan, null))", span="43-44", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Ctor_ThrowsAnException_WhenProcessIsNull()", file="TypeExtensions.cs"];
m10_42 [label="Assert.Equal(''process'', exception.ParamName)", span="46-46", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Ctor_ThrowsAnException_WhenProcessIsNull()", file="TypeExtensions.cs"];
m10_43 [label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.Ctor_ThrowsAnException_WhenProcessIsNull()", span="41-41", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Ctor_ThrowsAnException_WhenProcessIsNull()", file="TypeExtensions.cs"];
m10_36 [label="Entry Unk.GetFirstByLowestScoreFromSet", span="", cluster="Unk.GetFirstByLowestScoreFromSet", file="TypeExtensions.cs"];
m10_23 [label="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain", span="", cluster="Unk.GetConnection", file="TypeExtensions.cs"];
m10_103 [label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", span="94-94", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", file="TypeExtensions.cs"];
m10_104 [label="var scheduler = CreateScheduler()", span="96-96", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", file="TypeExtensions.cs"];
m10_105 [label="scheduler.Execute(_context.Object)", span="98-98", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", file="TypeExtensions.cs"];
m10_106 [label="_connection.Verify(x => x.AcquireDistributedLock(It.IsAny<string>(), It.IsAny<TimeSpan>()))", span="100-100", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", file="TypeExtensions.cs"];
m10_107 [label="_distributedLock.Verify(x => x.Dispose())", span="101-101", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", file="TypeExtensions.cs"];
m10_108 [label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", span="94-94", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_ActsWithinADistributedLock()", file="TypeExtensions.cs"];
m10_16 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="TypeExtensions.cs"];
m10_17 [label="Entry Mock<IStateChangeProcess>.cstr", span="", cluster="Mock<IStateChangeProcess>.cstr", file="TypeExtensions.cs"];
m10_19 [label="Entry Mock<IDisposable>.cstr", span="", cluster="Mock<IDisposable>.cstr", file="TypeExtensions.cs"];
m10_20 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="TypeExtensions.cs"];
m10_61 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState", file="TypeExtensions.cs"];
m10_55 [label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.CreateScheduler()", span="104-104", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.CreateScheduler()", file="TypeExtensions.cs"];
m10_115 [label="return new Hangfire.Server.DelayedJobScheduler(Timeout.InfiniteTimeSpan, _process.Object);", span="106-106", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.CreateScheduler()", file="TypeExtensions.cs"];
m10_116 [label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.CreateScheduler()", span="104-104", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.CreateScheduler()", file="TypeExtensions.cs"];
m10_21 [label="x.GetConnection()", span="25-25", cluster="lambda expression", file="TypeExtensions.cs"];
m10_65 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="TypeExtensions.cs"];
m10_48 [label="Entry Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IStateChangeProcess)", span="45-45", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IStateChangeProcess)", file="TypeExtensions.cs"];
m10_15 [label="Exit HangFire.Common.ExpressionUtil.ExpressionFingerprintChain.Equals(object)", span="75-75", cluster="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain.Equals(object)", file="TypeExtensions.cs"];
m10_69 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="TypeExtensions.cs"];
m10_32 [label="Entry Unk.AcquireDistributedLock", span="", cluster="Unk.AcquireDistributedLock", file="TypeExtensions.cs"];
m10_45 [label="Entry lambda expression", span="44-44", cluster="lambda expression", file="TypeExtensions.cs"];
m10_66 [label="Entry lambda expression", span="61-61", cluster="lambda expression", file="TypeExtensions.cs"];
m10_67 [label="x.Dispose()", span="61-61", cluster="lambda expression", color=green, community=0, file="TypeExtensions.cs"];
m10_68 [label="Exit lambda expression", span="61-61", cluster="lambda expression", file="TypeExtensions.cs"];
m10_58 [label="Entry lambda expression", span="56-59", cluster="lambda expression", file="TypeExtensions.cs"];
m10_113 [label="x.Dispose()", span="101-101", cluster="lambda expression", file="TypeExtensions.cs"];
m10_24 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="TypeExtensions.cs"];
m10_28 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="TypeExtensions.cs"];
m10_33 [label="Entry lambda expression", span="36-37", cluster="lambda expression", file="TypeExtensions.cs"];
m10_76 [label="Entry lambda expression", span="67-68", cluster="lambda expression", file="TypeExtensions.cs"];
m10_82 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="TypeExtensions.cs"];
m10_92 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="TypeExtensions.cs"];
m10_95 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="TypeExtensions.cs"];
m10_99 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="TypeExtensions.cs"];
m10_109 [label="Entry lambda expression", span="100-100", cluster="lambda expression", file="TypeExtensions.cs"];
m10_112 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="TypeExtensions.cs"];
m10_60 [label="Exit lambda expression", span="56-59", cluster="lambda expression", file="TypeExtensions.cs"];
m10_59 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is EnqueuedState &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ScheduledState.StateName })))", span="56-59", cluster="lambda expression", file="TypeExtensions.cs"];
m10_114 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="TypeExtensions.cs"];
m10_26 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="TypeExtensions.cs"];
m10_25 [label="x.CreateWriteTransaction()", span="29-29", cluster="lambda expression", file="TypeExtensions.cs"];
m10_30 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="TypeExtensions.cs"];
m10_29 [label="x.AcquireDistributedLock(''locks:schedulepoller'', It.IsAny<TimeSpan>())", span="33-33", cluster="lambda expression", file="TypeExtensions.cs"];
m10_35 [label="Exit lambda expression", span="36-37", cluster="lambda expression", file="TypeExtensions.cs"];
m10_34 [label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="36-37", cluster="lambda expression", file="TypeExtensions.cs"];
m10_78 [label="Exit lambda expression", span="67-68", cluster="lambda expression", file="TypeExtensions.cs"];
m10_77 [label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="67-68", cluster="lambda expression", file="TypeExtensions.cs"];
m10_84 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="TypeExtensions.cs"];
m10_83 [label="x.ChangeState(It.IsAny<StateChangeContext>())", span="74-74", cluster="lambda expression", file="TypeExtensions.cs"];
m10_93 [label="x.ChangeState(It.IsAny<StateChangeContext>())", span="82-82", cluster="lambda expression", file="TypeExtensions.cs"];
m10_110 [label="x.AcquireDistributedLock(It.IsAny<string>(), It.IsAny<TimeSpan>())", span="100-100", cluster="lambda expression", file="TypeExtensions.cs"];
m10_94 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="TypeExtensions.cs"];
m10_97 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="TypeExtensions.cs"];
m10_96 [label="x.RemoveFromSet(''schedule'', JobId)", span="89-89", cluster="lambda expression", file="TypeExtensions.cs"];
m10_101 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="TypeExtensions.cs"];
m10_100 [label="x.Commit()", span="90-90", cluster="lambda expression", file="TypeExtensions.cs"];
m10_111 [label="Exit lambda expression", span="100-100", cluster="lambda expression", file="TypeExtensions.cs"];
m10_62 [label="Entry lambda expression", span="56-59", cluster="lambda expression", file="TypeExtensions.cs"];
m10_37 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="TypeExtensions.cs"];
m10_79 [label="Entry lambda expression", span="68-68", cluster="lambda expression", file="TypeExtensions.cs"];
m10_64 [label="Exit lambda expression", span="56-59", cluster="lambda expression", file="TypeExtensions.cs"];
m10_63 [label="ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is EnqueuedState &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ScheduledState.StateName })", span="57-59", cluster="lambda expression", file="TypeExtensions.cs"];
m10_39 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="TypeExtensions.cs"];
m10_38 [label="time > 0", span="37-37", cluster="lambda expression", file="TypeExtensions.cs"];
m10_81 [label="Exit lambda expression", span="68-68", cluster="lambda expression", file="TypeExtensions.cs"];
m10_80 [label="time > 0", span="68-68", cluster="lambda expression", file="TypeExtensions.cs"];
m10_46 [label="new Hangfire.Server.DelayedJobScheduler(Timeout.InfiniteTimeSpan, null)", span="44-44", cluster="lambda expression", file="TypeExtensions.cs"];
m10_47 [label="Exit lambda expression", span="44-44", cluster="lambda expression", file="TypeExtensions.cs"];
m10_57 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="TypeExtensions.cs"];
m10_102 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="TypeExtensions.cs"];
m10_27 [label="Entry Unk.CreateWriteTransaction", span="", cluster="Unk.CreateWriteTransaction", file="TypeExtensions.cs"];
m10_98 [label="Entry Unk.RemoveFromSet", span="", cluster="Unk.RemoveFromSet", file="TypeExtensions.cs"];
m10_70 [label="Entry Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", span="65-65", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", file="TypeExtensions.cs"];
m10_71 [label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns((string)null)", span="67-68", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", file="TypeExtensions.cs"];
m10_72 [label="var scheduler = CreateScheduler()", span="69-69", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", file="TypeExtensions.cs"];
m10_73 [label="scheduler.Execute(_context.Object)", span="71-71", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", file="TypeExtensions.cs"];
m10_74 [label="_process.Verify(\r\n                x => x.ChangeState(It.IsAny<StateChangeContext>()),\r\n                Times.Never)", span="73-75", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", file="TypeExtensions.cs"];
m10_75 [label="Exit Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", span="65-65", cluster="Hangfire.Core.Tests.Server.DelayedJobScheduler.Execute_DoesNotCallStateChangeProcess_IfThereAreNoJobsToEnqueue()", file="TypeExtensions.cs"];
m10_117 [label="Entry Hangfire.Server.DelayedJobScheduler.cstr", span="", cluster="Hangfire.Server.DelayedJobScheduler.cstr", file="TypeExtensions.cs"];
m10_56 [label="Entry Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="53-53", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="TypeExtensions.cs"];
m10_14 [label="return Equals(obj as ExpressionFingerprintChain);", span="77-77", cluster="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain.Equals(object)", file="TypeExtensions.cs"];
m10_118 [label="Hangfire.Core.Tests.Server.DelayedJobScheduler", span="", file="TypeExtensions.cs"];
n4 -> n1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerWatchdogOptions"];
n4 -> n2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerWatchdogOptions"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n2 -> n3  [key=0, style=solid];
n3 -> n0  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ElectStateContext"];
m0_4 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ElectStateContext"];
m0_4 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ElectStateContext"];
m0_4 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ElectStateContext"];
m0_4 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ElectStateContext"];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=failedState];
m0_5 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label=failedState];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_18  [key=2, style=dotted];
m0_8 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label=retryAttempt];
m0_8 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label=retryAttempt];
m0_8 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label=retryAttempt];
m0_8 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=retryAttempt];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_21  [key=2, style=dotted];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_22  [key=2, style=dotted];
m0_12 -> m0_23  [key=2, style=dotted];
m0_14 -> m0_17  [key=0, style=solid];
m0_14 -> m0_24  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_25  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_8  [key=0, style=solid];
m0_7 -> m0_17  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_15  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_19  [key=2, style=dotted];
m0_10 -> m0_20  [key=2, style=dotted];
m0_10 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label=delay];
m0_10 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=delay];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_17  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_17  [key=0, style=solid];
m0_17 -> m0_4  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_3  [key=0, style=solid];
m0_3 -> m0_0  [key=0, style=bold, color=blue];
m0_19 -> m0_26  [key=0, style=solid];
m0_19 -> m0_27  [key=1, style=dashed, color=red, label=long];
m0_26 -> m0_27  [key=0, style=solid, color=red];
m0_26 -> m0_29  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid, color=red];
m0_27 -> m0_30  [key=2, style=dotted, color=red];
m0_27 -> m0_31  [key=2, style=dotted, color=red];
m0_27 -> m0_32  [key=2, style=dotted, color=red];
m0_28 -> m0_19  [key=0, style=bold, color=blue];
m0_33 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.AutomaticRetryAttribute"];
m0_33 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.AutomaticRetryAttribute"];
m0_33 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.AutomaticRetryAttribute"];
m0_33 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.AutomaticRetryAttribute"];
m0_33 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.AutomaticRetryAttribute"];
m0_33 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.AutomaticRetryAttribute"];
m0_33 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.AutomaticRetryAttribute"];
m1_20 -> m1_21  [key=0, style=solid];
m1_21 -> m1_12  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_23  [key=2, style=dotted];
m1_22 -> m1_20  [key=0, style=bold, color=blue];
m1_8 -> m1_9  [key=0, style=solid, color=green];
m1_24 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_24 -> m1_25  [key=0, style=solid];
m1_27 -> m1_20  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_25 -> m1_27  [key=0, style=solid];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_29  [key=2, style=dotted];
m1_26 -> m1_28  [key=0, style=solid];
m1_28 -> m1_24  [key=0, style=bold, color=blue];
m1_9 -> m1_10  [key=0, style=solid, color=green];
m1_10 -> m1_10  [key=1, style=dashed, color=green, label=elapsedTime];
m1_10 -> m1_11  [key=0, style=solid, color=green];
m1_10 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.DashboardContext"];
m1_10 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Dashboard.DashboardContext"];
m1_11 -> m1_8  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m1_0 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.DashboardOptions"];
m1_0 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.DashboardOptions"];
m1_0 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m1_0 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.DashboardOptions"];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=0, style=solid];
m1_2 -> m1_7  [key=0, style=solid];
m1_2 -> m1_8  [key=2, style=dotted];
m1_2 -> m1_9  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_5  [key=0, style=solid];
m1_4 -> m1_7  [key=0, style=solid];
m1_4 -> m1_8  [key=2, style=dotted];
m1_4 -> m1_9  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_7  [key=0, style=solid];
m1_7 -> m1_0  [key=0, style=bold, color=blue];
m1_12 -> m1_13  [key=0, style=solid, color=green];
m1_13 -> m1_14  [key=0, style=solid, color=green];
m1_13 -> m1_15  [key=2, style=dotted, color=green];
m1_14 -> m1_12  [key=0, style=bold, color=blue];
m1_16 -> m1_17  [key=0, style=solid];
m1_17 -> m1_8  [key=2, style=dotted];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [key=2, style=dotted];
m1_18 -> m1_16  [key=0, style=bold, color=blue];
m2_12 -> m2_13  [key=0, style=solid];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_15  [key=2, style=dotted];
m2_13 -> m2_16  [key=2, style=dotted];
m2_14 -> m2_12  [key=0, style=bold, color=blue];
m2_28 -> m2_36  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m2_28 -> m2_37  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m2_28 -> m2_29  [key=0, style=solid];
m2_28 -> m2_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.InvocationData"];
m2_28 -> m2_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.InvocationData"];
m2_28 -> m2_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.InvocationData"];
m2_28 -> m2_33  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m2_28 -> m2_34  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m2_28 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m2_28 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m2_36 -> m2_46  [key=2, style=dotted];
m2_36 -> m2_37  [key=0, style=solid];
m2_36 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_37 -> m2_46  [key=2, style=dotted];
m2_37 -> m2_38  [key=0, style=solid];
m2_37 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_37  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_35 -> m2_16  [key=2, style=dotted];
m2_35 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_29 -> m2_36  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_29 -> m2_37  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_41  [key=2, style=dotted];
m2_29 -> m2_42  [key=2, style=dotted];
m2_29 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_29 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_29 -> m2_39  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_38 -> m2_39  [key=0, style=solid];
m2_38 -> m2_47  [key=2, style=dotted];
m2_34 -> m2_35  [key=0, style=solid];
m2_34 -> m2_45  [key=2, style=dotted];
m2_34 -> m2_43  [key=2, style=dotted];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_43  [key=2, style=dotted];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_43  [key=2, style=dotted];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_43  [key=2, style=dotted];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_44  [key=2, style=dotted];
m2_33 -> m2_43  [key=2, style=dotted];
m2_39 -> m2_40  [key=0, style=solid];
m2_40 -> m2_28  [key=0, style=bold, color=blue];
m2_95 -> m2_96  [key=0, style=solid];
m2_96 -> m2_97  [key=0, style=solid];
m2_96 -> m2_25  [key=2, style=dotted];
m2_96 -> m2_45  [key=2, style=dotted];
m2_96 -> m2_98  [key=2, style=dotted];
m2_97 -> m2_95  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m2_0 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m2_0 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m2_1 -> m2_2  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_6  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_7  [key=2, style=dotted];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_0  [key=0, style=bold, color=blue];
m2_134 -> m2_136  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_134 -> m2_137  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_134 -> m2_138  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_134 -> m2_135  [key=0, style=solid];
m2_134 -> m2_142  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_134 -> m2_146  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_134 -> m2_150  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_136 -> m2_46  [key=2, style=dotted];
m2_136 -> m2_36  [key=3, color=darkorchid, style=bold, label="Parameter variable string resourceName"];
m2_136 -> m2_37  [key=3, color=darkorchid, style=bold, label="Parameter variable string resourceName"];
m2_136 -> m2_58  [key=3, color=darkorchid, style=bold, label="Parameter variable string resourceName"];
m2_136 -> m2_137  [key=0, style=solid];
m2_136 -> m2_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_136 -> m2_56  [key=3, color=darkorchid, style=bold, label="Parameter variable string resourceName"];
m2_137 -> m2_46  [key=2, style=dotted];
m2_137 -> m2_138  [key=0, style=solid];
m2_137 -> m2_145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_138 -> m2_46  [key=2, style=dotted];
m2_138 -> m2_139  [key=0, style=solid];
m2_138 -> m2_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_135 -> m2_136  [key=0, style=solid];
m2_135 -> m2_137  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_135 -> m2_138  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_135 -> m2_16  [key=2, style=dotted];
m2_135 -> m2_139  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_135 -> m2_32  [key=3, color=darkorchid, style=bold, label="Parameter variable string contentFolder"];
m2_139 -> m2_140  [key=0, style=solid];
m2_139 -> m2_47  [key=2, style=dotted];
m2_140 -> m2_134  [key=0, style=bold, color=blue];
m2_99 -> m2_100  [key=0, style=solid];
m2_99 -> m2_111  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m2_106 -> m2_104  [key=0, style=solid, color=green];
m2_106 -> m2_46  [key=2, style=dotted, color=green];
m2_106 -> m2_122  [key=1, style=dashed, color=green, label="lambda expression"];
m2_106 -> m2_127  [key=1, style=dashed, color=green, label="lambda expression"];
m2_101 -> m2_106  [key=1, style=dashed, color=green, label=heartbeats];
m2_101 -> m2_128  [key=1, style=dashed, color=green, label=heartbeats];
m2_101 -> m2_102  [key=0, style=solid];
m2_101 -> m2_72  [key=2, style=dotted];
m2_101 -> m2_109  [key=1, style=dashed, color=darkseagreen4, label=heartbeats];
m2_103 -> m2_106  [key=1, style=dashed, color=green, label=pipeline];
m2_103 -> m2_104  [key=0, style=solid];
m2_103 -> m2_117  [key=2, style=dotted];
m2_103 -> m2_107  [key=1, style=dashed, color=darkseagreen4, label=pipeline];
m2_105 -> m2_106  [key=0, style=solid, color=green];
m2_105 -> m2_128  [key=1, style=dashed, color=green, label=name];
m2_105 -> m2_123  [key=1, style=dashed, color=darkseagreen4, label=name];
m2_104 -> m2_105  [key=0, style=solid];
m2_104 -> m2_107  [key=0, style=solid];
m2_100 -> m2_101  [key=0, style=solid];
m2_100 -> m2_104  [key=1, style=dashed, color=darkseagreen4, label=serverNames];
m2_100 -> m2_116  [key=2, style=dotted];
m2_102 -> m2_103  [key=0, style=solid];
m2_102 -> m2_111  [key=1, style=dashed, color=darkseagreen4, label=utcNow];
m2_109 -> m2_110  [key=0, style=solid];
m2_109 -> m2_114  [key=0, style=solid];
m2_107 -> m2_108  [key=0, style=solid];
m2_107 -> m2_118  [key=2, style=dotted];
m2_111 -> m2_109  [key=0, style=solid];
m2_111 -> m2_112  [key=0, style=solid];
m2_111 -> m2_121  [key=2, style=dotted];
m2_108 -> m2_109  [key=0, style=solid];
m2_108 -> m2_113  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m2_108 -> m2_114  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m2_113 -> m2_109  [key=0, style=solid];
m2_113 -> m2_113  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m2_113 -> m2_114  [key=1, style=dashed, color=darkseagreen4, label=removedServerCount];
m2_110 -> m2_111  [key=0, style=solid];
m2_110 -> m2_110  [key=1, style=dashed, color=darkseagreen4, label=heartbeat];
m2_110 -> m2_119  [key=2, style=dotted];
m2_110 -> m2_120  [key=2, style=dotted];
m2_110 -> m2_112  [key=1, style=dashed, color=darkseagreen4, label=heartbeat];
m2_114 -> m2_115  [key=0, style=solid];
m2_112 -> m2_113  [key=0, style=solid];
m2_112 -> m2_112  [key=1, style=dashed, color=darkseagreen4, label=heartbeat];
m2_112 -> m2_81  [key=2, style=dotted];
m2_115 -> m2_99  [key=0, style=bold, color=blue];
m2_56 -> m2_58  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_56 -> m2_59  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_56 -> m2_62  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_56 -> m2_70  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_56 -> m2_57  [key=0, style=solid];
m2_56 -> m2_66  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_56 -> m2_60  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<string>"];
m2_56 -> m2_75  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_58 -> m2_46  [key=2, style=dotted];
m2_58 -> m2_59  [key=0, style=solid];
m2_58 -> m2_65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_59 -> m2_46  [key=2, style=dotted];
m2_59 -> m2_60  [key=0, style=solid];
m2_59 -> m2_69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_62 -> m2_46  [key=2, style=dotted];
m2_62 -> m2_60  [key=0, style=solid];
m2_62 -> m2_74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_57 -> m2_58  [key=0, style=solid];
m2_57 -> m2_59  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_57 -> m2_62  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_57 -> m2_16  [key=2, style=dotted];
m2_57 -> m2_63  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_60 -> m2_61  [key=0, style=solid];
m2_60 -> m2_63  [key=0, style=solid];
m2_61 -> m2_62  [key=0, style=solid];
m2_61 -> m2_75  [key=1, style=dashed, color=darkseagreen4, label=queue1];
m2_63 -> m2_64  [key=0, style=solid];
m2_63 -> m2_47  [key=2, style=dotted];
m2_64 -> m2_56  [key=0, style=bold, color=blue];
m2_8 -> m2_9  [key=0, style=solid];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_11  [key=2, style=dotted];
m2_10 -> m2_8  [key=0, style=bold, color=blue];
m2_150 -> m2_25  [key=2, style=dotted];
m2_150 -> m2_151  [key=0, style=solid];
m2_150 -> m2_148  [key=2, style=dotted];
m2_122 -> m2_123  [key=0, style=solid];
m2_127 -> m2_128  [key=0, style=solid, color=green];
m2_128 -> m2_129  [key=0, style=solid, color=green];
m2_128 -> m2_130  [key=2, style=dotted, color=green];
m2_128 -> m2_131  [key=2, style=dotted, color=green];
m2_128 -> m2_132  [key=2, style=dotted, color=green];
m2_128 -> m2_133  [key=2, style=dotted, color=green];
m2_129 -> m2_127  [key=0, style=bold, color=blue];
m2_123 -> m2_124  [key=0, style=solid];
m2_123 -> m2_125  [key=2, style=dotted];
m2_123 -> m2_126  [key=2, style=dotted];
m2_124 -> m2_122  [key=0, style=bold, color=blue];
m2_70 -> m2_72  [key=2, style=dotted];
m2_70 -> m2_71  [key=0, style=solid];
m2_70 -> m2_25  [key=2, style=dotted];
m2_70 -> m2_73  [key=2, style=dotted];
m2_70 -> m2_45  [key=2, style=dotted];
m2_70 -> m2_51  [key=2, style=dotted];
m2_48 -> m2_49  [key=0, style=solid];
m2_52 -> m2_53  [key=0, style=solid];
m2_65 -> m2_66  [key=0, style=solid];
m2_69 -> m2_70  [key=0, style=solid];
m2_74 -> m2_75  [key=0, style=solid];
m2_87 -> m2_88  [key=0, style=solid];
m2_91 -> m2_92  [key=0, style=solid];
m2_141 -> m2_142  [key=0, style=solid];
m2_145 -> m2_146  [key=0, style=solid];
m2_149 -> m2_150  [key=0, style=solid];
m2_71 -> m2_69  [key=0, style=bold, color=blue];
m2_49 -> m2_25  [key=2, style=dotted];
m2_49 -> m2_51  [key=2, style=dotted];
m2_49 -> m2_50  [key=0, style=solid];
m2_53 -> m2_25  [key=2, style=dotted];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_55  [key=2, style=dotted];
m2_50 -> m2_48  [key=0, style=bold, color=blue];
m2_54 -> m2_52  [key=0, style=bold, color=blue];
m2_66 -> m2_67  [key=0, style=solid];
m2_66 -> m2_68  [key=2, style=dotted];
m2_75 -> m2_25  [key=2, style=dotted];
m2_75 -> m2_76  [key=0, style=solid];
m2_75 -> m2_77  [key=2, style=dotted];
m2_67 -> m2_65  [key=0, style=bold, color=blue];
m2_76 -> m2_74  [key=0, style=bold, color=blue];
m2_88 -> m2_89  [key=0, style=solid];
m2_88 -> m2_90  [key=2, style=dotted];
m2_92 -> m2_25  [key=2, style=dotted];
m2_92 -> m2_93  [key=0, style=solid];
m2_92 -> m2_94  [key=2, style=dotted];
m2_89 -> m2_87  [key=0, style=bold, color=blue];
m2_93 -> m2_91  [key=0, style=bold, color=blue];
m2_142 -> m2_25  [key=2, style=dotted];
m2_142 -> m2_143  [key=0, style=solid];
m2_142 -> m2_144  [key=2, style=dotted];
m2_146 -> m2_25  [key=2, style=dotted];
m2_146 -> m2_147  [key=0, style=solid];
m2_146 -> m2_148  [key=2, style=dotted];
m2_143 -> m2_141  [key=0, style=bold, color=blue];
m2_147 -> m2_145  [key=0, style=bold, color=blue];
m2_151 -> m2_149  [key=0, style=bold, color=blue];
m2_78 -> m2_79  [key=0, style=solid];
m2_79 -> m2_80  [key=0, style=solid];
m2_79 -> m2_81  [key=2, style=dotted];
m2_80 -> m2_78  [key=0, style=bold, color=blue];
m2_81 -> m2_83  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_81 -> m2_84  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_81 -> m2_82  [key=0, style=solid];
m2_81 -> m2_88  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_81 -> m2_92  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_83 -> m2_46  [key=2, style=dotted];
m2_83 -> m2_84  [key=0, style=solid];
m2_83 -> m2_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_84 -> m2_46  [key=2, style=dotted];
m2_84 -> m2_85  [key=0, style=solid];
m2_84 -> m2_91  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_82 -> m2_83  [key=0, style=solid];
m2_82 -> m2_84  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_82 -> m2_16  [key=2, style=dotted];
m2_82 -> m2_85  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m2_85 -> m2_86  [key=0, style=solid];
m2_85 -> m2_47  [key=2, style=dotted];
m2_86 -> m2_81  [key=0, style=bold, color=blue];
m2_17 -> m2_18  [key=0, style=solid];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_20  [key=2, style=dotted];
m2_18 -> m2_21  [key=2, style=dotted];
m2_19 -> m2_17  [key=0, style=bold, color=blue];
m2_22 -> m2_23  [key=0, style=solid];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_25  [key=2, style=dotted];
m2_23 -> m2_26  [key=2, style=dotted];
m2_23 -> m2_27  [key=2, style=dotted];
m2_24 -> m2_22  [key=0, style=bold, color=blue];
m2_160 -> m2_128  [key=1, style=dashed, color=green, label=name];
m2_160 -> m2_123  [key=1, style=dashed, color=darkseagreen4, label=name];
m2_161 -> m2_128  [key=1, style=dashed, color=green, label=heartbeats];
m2_152 -> m2_103  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_100  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_96  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_152 -> m2_112  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageConnection"];
m2_156 -> m2_70  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_156 -> m2_66  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_156 -> m2_75  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_157 -> m2_70  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_153 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m2_154 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_154 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m2_155 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m2_158 -> m2_75  [key=1, style=dashed, color=darkseagreen4, label=queue1];
m2_159 -> m2_88  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_159 -> m2_92  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_162 -> m2_142  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_163 -> m2_142  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_163 -> m2_146  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_163 -> m2_150  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_5  [key=2, style=dotted];
m3_2 -> m3_6  [key=2, style=dotted];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_7  [key=2, style=dotted];
m3_3 -> m3_8  [key=2, style=dotted];
m3_4 -> m3_0  [key=0, style=bold, color=blue];
m3_9 -> m3_10  [key=0, style=solid];
m3_10 -> m3_11  [key=0, style=solid];
m3_10 -> m3_12  [key=2, style=dotted];
m3_11 -> m3_9  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_0  [key=0, style=bold, color=blue];
m5_2 -> m5_3  [key=0, style=solid];
m5_3 -> m5_4  [key=0, style=solid];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_6  [key=2, style=dotted];
m5_5 -> m5_2  [key=0, style=bold, color=blue];
m5_7 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.ExpressionUtil.ConstantExpressionFingerprint"];
m8_6 -> m8_7  [key=0, style=solid];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_9  [key=2, style=dotted];
m8_8 -> m8_6  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid];
m8_0 -> m8_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.IWriteOnlyTransaction"];
m8_1 -> m8_2  [key=0, style=solid];
m8_1 -> m8_4  [key=2, style=dotted];
m8_2 -> m8_3  [key=0, style=solid];
m8_2 -> m8_5  [key=2, style=dotted];
m8_3 -> m8_0  [key=0, style=bold, color=blue];
m9_629 -> m9_630  [key=0, style=solid];
m9_630 -> m9_631  [key=0, style=solid];
m9_630 -> m9_88  [key=2, style=dotted];
m9_630 -> m9_632  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_631 -> m9_629  [key=0, style=bold, color=blue];
m9_699 -> m9_700  [key=0, style=solid];
m9_700 -> m9_701  [key=0, style=solid];
m9_700 -> m9_45  [key=2, style=dotted];
m9_700 -> m9_702  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_701 -> m9_699  [key=0, style=bold, color=blue];
m9_95 -> m9_96  [key=0, style=solid];
m9_96 -> m9_97  [key=0, style=solid];
m9_96 -> m9_105  [key=2, style=dotted];
m9_96 -> m9_98  [key=1, style=dashed, color=darkseagreen4, label=releaseLock];
m9_96 -> m9_112  [key=1, style=dashed, color=darkseagreen4, label=releaseLock];
m9_96 -> m9_117  [key=1, style=dashed, color=darkseagreen4, label=releaseLock];
m9_96 -> m9_102  [key=1, style=dashed, color=darkseagreen4, label=releaseLock];
m9_97 -> m9_98  [key=0, style=solid];
m9_97 -> m9_105  [key=2, style=dotted];
m9_97 -> m9_112  [key=1, style=dashed, color=darkseagreen4, label=lockAcquired];
m9_97 -> m9_116  [key=1, style=dashed, color=darkseagreen4, label=lockAcquired];
m9_97 -> m9_100  [key=1, style=dashed, color=darkseagreen4, label=lockAcquired];
m9_98 -> m9_99  [key=0, style=solid];
m9_98 -> m9_106  [key=2, style=dotted];
m9_98 -> m9_103  [key=1, style=dashed, color=darkseagreen4, label=thread];
m9_102 -> m9_103  [key=0, style=solid];
m9_102 -> m9_109  [key=2, style=dotted];
m9_100 -> m9_101  [key=0, style=solid];
m9_100 -> m9_108  [key=2, style=dotted];
m9_99 -> m9_100  [key=0, style=solid];
m9_99 -> m9_107  [key=2, style=dotted];
m9_103 -> m9_104  [key=0, style=solid];
m9_103 -> m9_110  [key=2, style=dotted];
m9_101 -> m9_102  [key=0, style=solid];
m9_101 -> m9_45  [key=2, style=dotted];
m9_101 -> m9_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_104 -> m9_95  [key=0, style=bold, color=blue];
m9_887 -> m9_888  [key=0, style=solid];
m9_888 -> m9_889  [key=0, style=solid];
m9_888 -> m9_892  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_888 -> m9_661  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_889 -> m9_890  [key=0, style=solid];
m9_889 -> m9_88  [key=2, style=dotted];
m9_889 -> m9_891  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_890 -> m9_887  [key=0, style=bold, color=blue];
m9_542 -> m9_543  [key=0, style=solid];
m9_543 -> m9_544  [key=0, style=solid];
m9_543 -> m9_45  [key=2, style=dotted];
m9_543 -> m9_545  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_544 -> m9_542  [key=0, style=bold, color=blue];
m9_428 -> m9_429  [key=0, style=solid];
m9_429 -> m9_430  [key=0, style=solid];
m9_429 -> m9_45  [key=2, style=dotted];
m9_429 -> m9_431  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_430 -> m9_428  [key=0, style=bold, color=blue];
m9_816 -> m9_817  [key=0, style=solid];
m9_817 -> m9_818  [key=0, style=solid];
m9_817 -> m9_45  [key=2, style=dotted];
m9_817 -> m9_819  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_818 -> m9_816  [key=0, style=bold, color=blue];
m9_744 -> m9_745  [key=0, style=solid];
m9_745 -> m9_746  [key=0, style=solid];
m9_745 -> m9_749  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_745 -> m9_745  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_746 -> m9_747  [key=0, style=solid];
m9_746 -> m9_88  [key=2, style=dotted];
m9_746 -> m9_748  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_747 -> m9_744  [key=0, style=bold, color=blue];
m9_941 -> m9_942  [key=0, style=solid];
m9_942 -> m9_943  [key=0, style=solid];
m9_942 -> m9_946  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_942 -> m9_942  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_943 -> m9_944  [key=0, style=solid];
m9_943 -> m9_88  [key=2, style=dotted];
m9_943 -> m9_945  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_944 -> m9_941  [key=0, style=bold, color=blue];
m9_335 -> m9_336  [key=0, style=solid];
m9_336 -> m9_337  [key=0, style=solid];
m9_336 -> m9_45  [key=2, style=dotted];
m9_336 -> m9_338  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_337 -> m9_335  [key=0, style=bold, color=blue];
m9_407 -> m9_408  [key=0, style=solid];
m9_408 -> m9_409  [key=0, style=solid];
m9_408 -> m9_412  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_408 -> m9_408  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_409 -> m9_410  [key=0, style=solid];
m9_409 -> m9_88  [key=2, style=dotted];
m9_409 -> m9_411  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_410 -> m9_407  [key=0, style=bold, color=blue];
m9_368 -> m9_369  [key=0, style=solid];
m9_369 -> m9_370  [key=0, style=solid];
m9_369 -> m9_373  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_369 -> m9_346  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_370 -> m9_371  [key=0, style=solid];
m9_370 -> m9_88  [key=2, style=dotted];
m9_370 -> m9_372  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_371 -> m9_368  [key=0, style=bold, color=blue];
m9_125 -> m9_126  [key=0, style=solid];
m9_126 -> m9_127  [key=0, style=solid];
m9_126 -> m9_88  [key=2, style=dotted];
m9_126 -> m9_128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_127 -> m9_125  [key=0, style=bold, color=blue];
m9_934 -> m9_935  [key=0, style=solid];
m9_935 -> m9_936  [key=0, style=solid];
m9_935 -> m9_45  [key=2, style=dotted];
m9_935 -> m9_937  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_936 -> m9_934  [key=0, style=bold, color=blue];
m9_273 -> m9_274  [key=0, style=solid];
m9_274 -> m9_275  [key=0, style=solid];
m9_274 -> m9_45  [key=2, style=dotted];
m9_274 -> m9_276  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_275 -> m9_273  [key=0, style=bold, color=blue];
m9_960 -> m9_961  [key=0, style=solid];
m9_961 -> m9_962  [key=0, style=solid];
m9_961 -> m9_45  [key=2, style=dotted];
m9_961 -> m9_963  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_962 -> m9_960  [key=0, style=bold, color=blue];
m9_85 -> m9_86  [key=0, style=solid];
m9_86 -> m9_87  [key=0, style=solid];
m9_86 -> m9_88  [key=2, style=dotted];
m9_86 -> m9_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_87 -> m9_85  [key=0, style=bold, color=blue];
m9_796 -> m9_797  [key=0, style=solid];
m9_797 -> m9_798  [key=0, style=solid];
m9_797 -> m9_801  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_797 -> m9_797  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_798 -> m9_799  [key=0, style=solid];
m9_798 -> m9_88  [key=2, style=dotted];
m9_798 -> m9_800  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_799 -> m9_796  [key=0, style=bold, color=blue];
m9_345 -> m9_346  [key=0, style=solid];
m9_346 -> m9_347  [key=0, style=solid];
m9_346 -> m9_350  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_346 -> m9_346  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_347 -> m9_348  [key=0, style=solid];
m9_347 -> m9_88  [key=2, style=dotted];
m9_347 -> m9_349  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_348 -> m9_345  [key=0, style=bold, color=blue];
m9_417 -> m9_418  [key=0, style=solid];
m9_418 -> m9_419  [key=0, style=solid];
m9_418 -> m9_45  [key=2, style=dotted];
m9_418 -> m9_420  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_419 -> m9_417  [key=0, style=bold, color=blue];
m9_494 -> m9_495  [key=0, style=solid];
m9_495 -> m9_496  [key=0, style=solid];
m9_495 -> m9_45  [key=2, style=dotted];
m9_495 -> m9_497  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_496 -> m9_494  [key=0, style=bold, color=blue];
m9_849 -> m9_850  [key=0, style=solid];
m9_850 -> m9_851  [key=0, style=solid];
m9_850 -> m9_854  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_850 -> m9_850  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_851 -> m9_852  [key=0, style=solid];
m9_851 -> m9_88  [key=2, style=dotted];
m9_851 -> m9_853  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_852 -> m9_849  [key=0, style=bold, color=blue];
m9_303 -> m9_304  [key=0, style=solid];
m9_304 -> m9_305  [key=0, style=solid];
m9_304 -> m9_309  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_304 -> m9_291  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_305 -> m9_306  [key=0, style=solid];
m9_305 -> m9_88  [key=2, style=dotted];
m9_305 -> m9_307  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_306 -> m9_303  [key=0, style=bold, color=blue];
m9_735 -> m9_736  [key=0, style=solid];
m9_736 -> m9_737  [key=0, style=solid];
m9_736 -> m9_740  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_736 -> m9_736  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_737 -> m9_738  [key=0, style=solid];
m9_737 -> m9_88  [key=2, style=dotted];
m9_737 -> m9_739  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_738 -> m9_735  [key=0, style=bold, color=blue];
m9_215 -> m9_216  [key=0, style=solid];
m9_216 -> m9_217  [key=0, style=solid];
m9_216 -> m9_88  [key=2, style=dotted];
m9_216 -> m9_218  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_217 -> m9_215  [key=0, style=bold, color=blue];
m9_924 -> m9_925  [key=0, style=solid];
m9_925 -> m9_926  [key=0, style=solid];
m9_925 -> m9_45  [key=2, style=dotted];
m9_925 -> m9_927  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_926 -> m9_924  [key=0, style=bold, color=blue];
m9_466 -> m9_467  [key=0, style=solid];
m9_467 -> m9_468  [key=0, style=solid];
m9_467 -> m9_45  [key=2, style=dotted];
m9_467 -> m9_469  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_468 -> m9_466  [key=0, style=bold, color=blue];
m9_390 -> m9_391  [key=0, style=solid];
m9_391 -> m9_392  [key=0, style=solid];
m9_391 -> m9_45  [key=2, style=dotted];
m9_391 -> m9_393  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_392 -> m9_390  [key=0, style=bold, color=blue];
m9_314 -> m9_315  [key=0, style=solid];
m9_315 -> m9_316  [key=0, style=solid];
m9_315 -> m9_319  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_315 -> m9_252  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_316 -> m9_317  [key=0, style=solid];
m9_316 -> m9_88  [key=2, style=dotted];
m9_316 -> m9_318  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_317 -> m9_314  [key=0, style=bold, color=blue];
m9_967 -> m9_968  [key=0, style=solid];
m9_968 -> m9_969  [key=0, style=solid];
m9_968 -> m9_972  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_968 -> m9_968  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_969 -> m9_970  [key=0, style=solid];
m9_969 -> m9_88  [key=2, style=dotted];
m9_969 -> m9_971  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_970 -> m9_967  [key=0, style=bold, color=blue];
m9_643 -> m9_644  [key=0, style=solid];
m9_644 -> m9_645  [key=0, style=solid];
m9_644 -> m9_45  [key=2, style=dotted];
m9_644 -> m9_646  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_645 -> m9_643  [key=0, style=bold, color=blue];
m9_574 -> m9_575  [key=0, style=solid];
m9_575 -> m9_576  [key=0, style=solid];
m9_575 -> m9_45  [key=2, style=dotted];
m9_575 -> m9_577  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_576 -> m9_574  [key=0, style=bold, color=blue];
m9_283 -> m9_284  [key=0, style=solid];
m9_284 -> m9_285  [key=0, style=solid];
m9_284 -> m9_45  [key=2, style=dotted];
m9_284 -> m9_286  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_285 -> m9_283  [key=0, style=bold, color=blue];
m9_653 -> m9_654  [key=0, style=solid];
m9_654 -> m9_655  [key=0, style=solid];
m9_654 -> m9_45  [key=2, style=dotted];
m9_654 -> m9_656  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_655 -> m9_653  [key=0, style=bold, color=blue];
m9_504 -> m9_505  [key=0, style=solid];
m9_505 -> m9_506  [key=0, style=solid];
m9_505 -> m9_509  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_505 -> m9_505  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_506 -> m9_507  [key=0, style=solid];
m9_506 -> m9_88  [key=2, style=dotted];
m9_506 -> m9_508  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_507 -> m9_504  [key=0, style=bold, color=blue];
m9_15 -> m9_16  [key=0, style=solid];
m9_16 -> m9_17  [key=0, style=solid];
m9_16 -> m9_19  [key=2, style=dotted];
m9_16 -> m9_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_17 -> m9_18  [key=0, style=solid];
m9_17 -> m9_20  [key=2, style=dotted];
m9_18 -> m9_15  [key=0, style=bold, color=blue];
m9_660 -> m9_661  [key=0, style=solid];
m9_661 -> m9_662  [key=0, style=solid];
m9_661 -> m9_665  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_661 -> m9_661  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_662 -> m9_663  [key=0, style=solid];
m9_662 -> m9_88  [key=2, style=dotted];
m9_662 -> m9_664  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_663 -> m9_660  [key=0, style=bold, color=blue];
m9_859 -> m9_860  [key=0, style=solid];
m9_860 -> m9_861  [key=0, style=solid];
m9_860 -> m9_45  [key=2, style=dotted];
m9_860 -> m9_862  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_861 -> m9_859  [key=0, style=bold, color=blue];
m9_789 -> m9_790  [key=0, style=solid];
m9_790 -> m9_791  [key=0, style=solid];
m9_790 -> m9_45  [key=2, style=dotted];
m9_790 -> m9_792  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_791 -> m9_789  [key=0, style=bold, color=blue];
m9_870 -> m9_871  [key=0, style=solid];
m9_871 -> m9_872  [key=0, style=solid];
m9_871 -> m9_45  [key=2, style=dotted];
m9_871 -> m9_873  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_872 -> m9_870  [key=0, style=bold, color=blue];
m9_996 -> m9_997  [key=0, style=solid];
m9_11 -> m9_12  [key=0, style=solid];
m9_12 -> m9_13  [key=0, style=solid];
m9_12 -> m9_14  [key=2, style=dotted];
m9_13 -> m9_11  [key=0, style=bold, color=blue];
m9_21 -> m9_22  [key=0, style=solid];
m9_22 -> m9_23  [key=0, style=solid];
m9_22 -> m9_24  [key=2, style=dotted];
m9_23 -> m9_21  [key=0, style=bold, color=blue];
m9_29 -> m9_30  [key=0, style=solid];
m9_29 -> m9_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_30 -> m9_31  [key=0, style=solid];
m9_30 -> m9_35  [key=2, style=dotted];
m9_30 -> m9_32  [key=1, style=dashed, color=darkseagreen4, label=token];
m9_30 -> m9_33  [key=1, style=dashed, color=darkseagreen4, label=token];
m9_30 -> m9_39  [key=1, style=dashed, color=darkseagreen4, label=token];
m9_32 -> m9_33  [key=0, style=solid];
m9_32 -> m9_36  [key=2, style=dotted];
m9_31 -> m9_32  [key=0, style=solid];
m9_31 -> m9_33  [key=1, style=dashed, color=darkseagreen4, label=queues];
m9_31 -> m9_39  [key=1, style=dashed, color=darkseagreen4, label=queues];
m9_33 -> m9_34  [key=0, style=solid];
m9_33 -> m9_37  [key=2, style=dotted];
m9_33 -> m9_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_39 -> m9_40  [key=0, style=solid];
m9_39 -> m9_41  [key=2, style=dotted];
m9_34 -> m9_29  [key=0, style=bold, color=blue];
m9_38 -> m9_39  [key=0, style=solid];
m9_40 -> m9_38  [key=0, style=bold, color=blue];
m9_46 -> m9_47  [key=0, style=solid];
m9_46 -> m9_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_46 -> m9_54  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_47 -> m9_48  [key=0, style=solid];
m9_47 -> m9_35  [key=2, style=dotted];
m9_47 -> m9_50  [key=1, style=dashed, color=darkseagreen4, label=token];
m9_47 -> m9_54  [key=1, style=dashed, color=darkseagreen4, label=token];
m9_50 -> m9_51  [key=0, style=solid];
m9_50 -> m9_19  [key=2, style=dotted];
m9_50 -> m9_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_54 -> m9_55  [key=0, style=solid];
m9_54 -> m9_36  [key=2, style=dotted];
m9_48 -> m9_49  [key=0, style=solid];
m9_48 -> m9_7  [key=2, style=dotted];
m9_49 -> m9_50  [key=0, style=solid];
m9_49 -> m9_52  [key=2, style=dotted];
m9_51 -> m9_46  [key=0, style=bold, color=blue];
m9_53 -> m9_54  [key=0, style=solid];
m9_55 -> m9_53  [key=0, style=bold, color=blue];
m9_59 -> m9_60  [key=0, style=solid];
m9_60 -> m9_61  [key=0, style=solid];
m9_60 -> m9_63  [key=2, style=dotted];
m9_61 -> m9_62  [key=0, style=solid];
m9_61 -> m9_64  [key=2, style=dotted];
m9_62 -> m9_59  [key=0, style=bold, color=blue];
m9_68 -> m9_69  [key=0, style=solid];
m9_69 -> m9_70  [key=0, style=solid];
m9_69 -> m9_72  [key=2, style=dotted];
m9_69 -> m9_73  [key=2, style=dotted];
m9_70 -> m9_71  [key=0, style=solid];
m9_70 -> m9_64  [key=2, style=dotted];
m9_71 -> m9_68  [key=0, style=bold, color=blue];
m9_77 -> m9_78  [key=0, style=solid];
m9_77 -> m9_82  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_78 -> m9_79  [key=0, style=solid];
m9_78 -> m9_19  [key=2, style=dotted];
m9_78 -> m9_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_82 -> m9_83  [key=0, style=solid];
m9_82 -> m9_84  [key=2, style=dotted];
m9_82 -> m9_73  [key=2, style=dotted];
m9_79 -> m9_80  [key=0, style=solid];
m9_79 -> m9_20  [key=2, style=dotted];
m9_81 -> m9_82  [key=0, style=solid];
m9_80 -> m9_77  [key=0, style=bold, color=blue];
m9_83 -> m9_81  [key=0, style=bold, color=blue];
m9_89 -> m9_90  [key=0, style=solid];
m9_89 -> m9_91  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_90 -> m9_91  [key=0, style=solid];
m9_90 -> m9_84  [key=2, style=dotted];
m9_90 -> m9_73  [key=2, style=dotted];
m9_91 -> m9_92  [key=0, style=solid];
m9_91 -> m9_19  [key=2, style=dotted];
m9_91 -> m9_94  [key=2, style=dotted];
m9_92 -> m9_93  [key=0, style=solid];
m9_92 -> m9_20  [key=2, style=dotted];
m9_93 -> m9_89  [key=0, style=bold, color=blue];
m9_112 -> m9_113  [key=0, style=solid];
m9_112 -> m9_28  [key=2, style=dotted];
m9_112 -> m9_114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_117 -> m9_118  [key=0, style=solid];
m9_117 -> m9_108  [key=2, style=dotted];
m9_116 -> m9_117  [key=0, style=solid];
m9_116 -> m9_109  [key=2, style=dotted];
m9_119 -> m9_120  [key=0, style=solid];
m9_119 -> m9_123  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_111 -> m9_112  [key=0, style=solid];
m9_113 -> m9_111  [key=0, style=bold, color=blue];
m9_114 -> m9_115  [key=0, style=solid];
m9_115 -> m9_116  [key=0, style=solid];
m9_115 -> m9_72  [key=2, style=dotted];
m9_115 -> m9_73  [key=2, style=dotted];
m9_118 -> m9_114  [key=0, style=bold, color=blue];
m9_120 -> m9_121  [key=0, style=solid];
m9_120 -> m9_19  [key=2, style=dotted];
m9_120 -> m9_122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_123 -> m9_124  [key=0, style=solid];
m9_123 -> m9_72  [key=2, style=dotted];
m9_123 -> m9_73  [key=2, style=dotted];
m9_121 -> m9_119  [key=0, style=bold, color=blue];
m9_122 -> m9_123  [key=0, style=solid];
m9_124 -> m9_122  [key=0, style=bold, color=blue];
m9_128 -> m9_129  [key=0, style=solid];
m9_128 -> m9_131  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_129 -> m9_130  [key=0, style=solid];
m9_129 -> m9_84  [key=2, style=dotted];
m9_129 -> m9_73  [key=2, style=dotted];
m9_131 -> m9_132  [key=0, style=solid];
m9_131 -> m9_19  [key=2, style=dotted];
m9_131 -> m9_94  [key=2, style=dotted];
m9_130 -> m9_131  [key=0, style=solid];
m9_130 -> m9_134  [key=2, style=dotted];
m9_132 -> m9_133  [key=0, style=solid];
m9_132 -> m9_20  [key=2, style=dotted];
m9_133 -> m9_128  [key=0, style=bold, color=blue];
m9_138 -> m9_139  [key=0, style=solid];
m9_138 -> m9_140  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_139 -> m9_140  [key=0, style=solid];
m9_139 -> m9_84  [key=2, style=dotted];
m9_139 -> m9_73  [key=2, style=dotted];
m9_140 -> m9_141  [key=0, style=solid];
m9_140 -> m9_84  [key=2, style=dotted];
m9_140 -> m9_73  [key=2, style=dotted];
m9_141 -> m9_142  [key=0, style=solid];
m9_141 -> m9_143  [key=2, style=dotted];
m9_142 -> m9_138  [key=0, style=bold, color=blue];
m9_147 -> m9_148  [key=0, style=solid];
m9_147 -> m9_152  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_148 -> m9_149  [key=0, style=solid];
m9_148 -> m9_19  [key=2, style=dotted];
m9_148 -> m9_151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_152 -> m9_153  [key=0, style=solid];
m9_152 -> m9_154  [key=2, style=dotted];
m9_152 -> m9_155  [key=2, style=dotted];
m9_149 -> m9_150  [key=0, style=solid];
m9_149 -> m9_20  [key=2, style=dotted];
m9_151 -> m9_152  [key=0, style=solid];
m9_150 -> m9_147  [key=0, style=bold, color=blue];
m9_153 -> m9_151  [key=0, style=bold, color=blue];
m9_159 -> m9_160  [key=0, style=solid];
m9_159 -> m9_164  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_160 -> m9_161  [key=0, style=solid];
m9_160 -> m9_19  [key=2, style=dotted];
m9_160 -> m9_163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_164 -> m9_165  [key=0, style=solid];
m9_164 -> m9_166  [key=2, style=dotted];
m9_164 -> m9_155  [key=2, style=dotted];
m9_164 -> m9_167  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_161 -> m9_162  [key=0, style=solid];
m9_161 -> m9_20  [key=2, style=dotted];
m9_163 -> m9_164  [key=0, style=solid];
m9_162 -> m9_159  [key=0, style=bold, color=blue];
m9_165 -> m9_163  [key=0, style=bold, color=blue];
m9_167 -> m9_168  [key=0, style=solid];
m9_168 -> m9_169  [key=0, style=solid];
m9_168 -> m9_170  [key=2, style=dotted];
m9_169 -> m9_167  [key=0, style=bold, color=blue];
m9_174 -> m9_175  [key=0, style=solid];
m9_174 -> m9_176  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_174 -> m9_179  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_174 -> m9_192  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_175 -> m9_176  [key=0, style=solid];
m9_175 -> m9_196  [key=2, style=dotted];
m9_175 -> m9_181  [key=1, style=dashed, color=darkseagreen4, label=createdAt];
m9_175 -> m9_190  [key=1, style=dashed, color=darkseagreen4, label=createdAt];
m9_175 -> m9_191  [key=1, style=dashed, color=darkseagreen4, label=createdAt];
m9_176 -> m9_177  [key=0, style=solid];
m9_176 -> m9_166  [key=2, style=dotted];
m9_176 -> m9_154  [key=2, style=dotted];
m9_176 -> m9_197  [key=2, style=dotted];
m9_176 -> m9_155  [key=2, style=dotted];
m9_176 -> m9_206  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_176 -> m9_178  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_176 -> m9_180  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_176 -> m9_192  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_179 -> m9_180  [key=0, style=solid];
m9_179 -> m9_199  [key=2, style=dotted];
m9_179 -> m9_94  [key=2, style=dotted];
m9_179 -> m9_181  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
m9_179 -> m9_182  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
m9_179 -> m9_183  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
m9_179 -> m9_184  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
m9_179 -> m9_185  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
m9_179 -> m9_190  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
m9_179 -> m9_191  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
m9_192 -> m9_193  [key=0, style=solid];
m9_192 -> m9_199  [key=2, style=dotted];
m9_192 -> m9_205  [key=2, style=dotted];
m9_192 -> m9_209  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_192 -> m9_212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_192 -> m9_194  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m9_181 -> m9_182  [key=0, style=solid];
m9_181 -> m9_20  [key=2, style=dotted];
m9_190 -> m9_191  [key=0, style=solid];
m9_190 -> m9_203  [key=2, style=dotted];
m9_190 -> m9_204  [key=2, style=dotted];
m9_190 -> m9_143  [key=2, style=dotted];
m9_191 -> m9_192  [key=0, style=solid];
m9_191 -> m9_203  [key=2, style=dotted];
m9_191 -> m9_204  [key=2, style=dotted];
m9_191 -> m9_143  [key=2, style=dotted];
m9_177 -> m9_178  [key=0, style=solid];
m9_177 -> m9_64  [key=2, style=dotted];
m9_206 -> m9_207  [key=0, style=solid];
m9_178 -> m9_179  [key=0, style=solid];
m9_178 -> m9_198  [key=2, style=dotted];
m9_180 -> m9_181  [key=0, style=solid];
m9_180 -> m9_200  [key=2, style=dotted];
m9_180 -> m9_20  [key=2, style=dotted];
m9_182 -> m9_183  [key=0, style=solid];
m9_182 -> m9_20  [key=2, style=dotted];
m9_183 -> m9_184  [key=0, style=solid];
m9_183 -> m9_20  [key=2, style=dotted];
m9_184 -> m9_185  [key=0, style=solid];
m9_184 -> m9_201  [key=2, style=dotted];
m9_184 -> m9_186  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
m9_185 -> m9_186  [key=0, style=solid];
m9_186 -> m9_187  [key=0, style=solid];
m9_186 -> m9_202  [key=2, style=dotted];
m9_186 -> m9_188  [key=1, style=dashed, color=darkseagreen4, label=job];
m9_186 -> m9_189  [key=1, style=dashed, color=darkseagreen4, label=job];
m9_187 -> m9_188  [key=0, style=solid];
m9_187 -> m9_20  [key=2, style=dotted];
m9_188 -> m9_189  [key=0, style=solid];
m9_188 -> m9_20  [key=2, style=dotted];
m9_189 -> m9_190  [key=0, style=solid];
m9_189 -> m9_20  [key=2, style=dotted];
m9_193 -> m9_194  [key=0, style=solid];
m9_193 -> m9_20  [key=2, style=dotted];
m9_209 -> m9_210  [key=0, style=solid];
m9_212 -> m9_213  [key=0, style=solid];
m9_194 -> m9_195  [key=0, style=solid];
m9_194 -> m9_20  [key=2, style=dotted];
m9_195 -> m9_174  [key=0, style=bold, color=blue];
m9_207 -> m9_208  [key=0, style=solid];
m9_207 -> m9_170  [key=2, style=dotted];
m9_208 -> m9_206  [key=0, style=bold, color=blue];
m9_210 -> m9_211  [key=0, style=solid];
m9_211 -> m9_209  [key=0, style=bold, color=blue];
m9_213 -> m9_214  [key=0, style=solid];
m9_214 -> m9_212  [key=0, style=bold, color=blue];
m9_218 -> m9_219  [key=0, style=solid];
m9_218 -> m9_220  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_218 -> m9_221  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_219 -> m9_220  [key=0, style=solid];
m9_219 -> m9_196  [key=2, style=dotted];
m9_220 -> m9_221  [key=0, style=solid];
m9_220 -> m9_166  [key=2, style=dotted];
m9_220 -> m9_154  [key=2, style=dotted];
m9_220 -> m9_197  [key=2, style=dotted];
m9_220 -> m9_155  [key=2, style=dotted];
m9_220 -> m9_224  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_221 -> m9_222  [key=0, style=solid];
m9_221 -> m9_199  [key=2, style=dotted];
m9_221 -> m9_205  [key=2, style=dotted];
m9_221 -> m9_227  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_221 -> m9_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_224 -> m9_225  [key=0, style=solid];
m9_222 -> m9_223  [key=0, style=solid];
m9_222 -> m9_20  [key=2, style=dotted];
m9_227 -> m9_228  [key=0, style=solid];
m9_230 -> m9_231  [key=0, style=solid];
m9_223 -> m9_218  [key=0, style=bold, color=blue];
m9_225 -> m9_226  [key=0, style=solid];
m9_225 -> m9_170  [key=2, style=dotted];
m9_226 -> m9_224  [key=0, style=bold, color=blue];
m9_228 -> m9_229  [key=0, style=solid];
m9_229 -> m9_227  [key=0, style=bold, color=blue];
m9_231 -> m9_232  [key=0, style=solid];
m9_232 -> m9_230  [key=0, style=bold, color=blue];
m9_236 -> m9_237  [key=0, style=solid];
m9_236 -> m9_240  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_237 -> m9_238  [key=0, style=solid];
m9_237 -> m9_19  [key=2, style=dotted];
m9_237 -> m9_239  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_240 -> m9_241  [key=0, style=solid];
m9_240 -> m9_242  [key=2, style=dotted];
m9_238 -> m9_236  [key=0, style=bold, color=blue];
m9_239 -> m9_240  [key=0, style=solid];
m9_241 -> m9_239  [key=0, style=bold, color=blue];
m9_246 -> m9_247  [key=0, style=solid];
m9_247 -> m9_248  [key=0, style=solid];
m9_247 -> m9_242  [key=2, style=dotted];
m9_248 -> m9_249  [key=0, style=solid];
m9_248 -> m9_250  [key=2, style=dotted];
m9_249 -> m9_246  [key=0, style=bold, color=blue];
m9_257 -> m9_258  [key=0, style=solid];
m9_257 -> m9_267  [key=2, style=dotted];
m9_257 -> m9_268  [key=2, style=dotted];
m9_257 -> m9_199  [key=2, style=dotted];
m9_257 -> m9_94  [key=2, style=dotted];
m9_255 -> m9_256  [key=0, style=solid];
m9_255 -> m9_257  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_255 -> m9_258  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_256 -> m9_257  [key=0, style=solid];
m9_256 -> m9_166  [key=2, style=dotted];
m9_256 -> m9_270  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_258 -> m9_259  [key=0, style=solid];
m9_258 -> m9_269  [key=2, style=dotted];
m9_258 -> m9_242  [key=2, style=dotted];
m9_258 -> m9_260  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_258 -> m9_261  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_258 -> m9_262  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_258 -> m9_263  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_258 -> m9_264  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_258 -> m9_265  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_270 -> m9_271  [key=0, style=solid];
m9_259 -> m9_260  [key=0, style=solid];
m9_259 -> m9_64  [key=2, style=dotted];
m9_260 -> m9_261  [key=0, style=solid];
m9_260 -> m9_64  [key=2, style=dotted];
m9_261 -> m9_262  [key=0, style=solid];
m9_261 -> m9_20  [key=2, style=dotted];
m9_262 -> m9_263  [key=0, style=solid];
m9_262 -> m9_20  [key=2, style=dotted];
m9_263 -> m9_264  [key=0, style=solid];
m9_263 -> m9_250  [key=2, style=dotted];
m9_264 -> m9_265  [key=0, style=solid];
m9_264 -> m9_204  [key=2, style=dotted];
m9_264 -> m9_143  [key=2, style=dotted];
m9_265 -> m9_266  [key=0, style=solid];
m9_265 -> m9_204  [key=2, style=dotted];
m9_265 -> m9_143  [key=2, style=dotted];
m9_266 -> m9_255  [key=0, style=bold, color=blue];
m9_271 -> m9_272  [key=0, style=solid];
m9_271 -> m9_170  [key=2, style=dotted];
m9_272 -> m9_270  [key=0, style=bold, color=blue];
m9_276 -> m9_277  [key=0, style=solid];
m9_276 -> m9_280  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_277 -> m9_278  [key=0, style=solid];
m9_277 -> m9_19  [key=2, style=dotted];
m9_277 -> m9_279  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_280 -> m9_281  [key=0, style=solid];
m9_280 -> m9_282  [key=2, style=dotted];
m9_278 -> m9_276  [key=0, style=bold, color=blue];
m9_279 -> m9_280  [key=0, style=solid];
m9_281 -> m9_279  [key=0, style=bold, color=blue];
m9_286 -> m9_287  [key=0, style=solid];
m9_287 -> m9_288  [key=0, style=solid];
m9_287 -> m9_282  [key=2, style=dotted];
m9_288 -> m9_289  [key=0, style=solid];
m9_288 -> m9_250  [key=2, style=dotted];
m9_289 -> m9_286  [key=0, style=bold, color=blue];
m9_296 -> m9_297  [key=0, style=solid];
m9_296 -> m9_268  [key=2, style=dotted];
m9_296 -> m9_199  [key=2, style=dotted];
m9_296 -> m9_94  [key=2, style=dotted];
m9_294 -> m9_295  [key=0, style=solid];
m9_294 -> m9_296  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_294 -> m9_297  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_295 -> m9_296  [key=0, style=solid];
m9_295 -> m9_154  [key=2, style=dotted];
m9_297 -> m9_298  [key=0, style=solid];
m9_297 -> m9_269  [key=2, style=dotted];
m9_297 -> m9_282  [key=2, style=dotted];
m9_297 -> m9_299  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_297 -> m9_300  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_297 -> m9_301  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_298 -> m9_299  [key=0, style=solid];
m9_298 -> m9_64  [key=2, style=dotted];
m9_299 -> m9_300  [key=0, style=solid];
m9_299 -> m9_20  [key=2, style=dotted];
m9_300 -> m9_301  [key=0, style=solid];
m9_300 -> m9_20  [key=2, style=dotted];
m9_301 -> m9_302  [key=0, style=solid];
m9_301 -> m9_20  [key=2, style=dotted];
m9_302 -> m9_294  [key=0, style=bold, color=blue];
m9_309 -> m9_310  [key=0, style=solid];
m9_309 -> m9_268  [key=2, style=dotted];
m9_309 -> m9_199  [key=2, style=dotted];
m9_309 -> m9_94  [key=2, style=dotted];
m9_307 -> m9_308  [key=0, style=solid];
m9_307 -> m9_309  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_307 -> m9_310  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_308 -> m9_309  [key=0, style=solid];
m9_308 -> m9_154  [key=2, style=dotted];
m9_310 -> m9_311  [key=0, style=solid];
m9_310 -> m9_269  [key=2, style=dotted];
m9_310 -> m9_282  [key=2, style=dotted];
m9_310 -> m9_312  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_311 -> m9_312  [key=0, style=solid];
m9_311 -> m9_64  [key=2, style=dotted];
m9_312 -> m9_313  [key=0, style=solid];
m9_312 -> m9_20  [key=2, style=dotted];
m9_313 -> m9_307  [key=0, style=bold, color=blue];
m9_319 -> m9_320  [key=0, style=solid];
m9_319 -> m9_323  [key=2, style=dotted];
m9_319 -> m9_268  [key=2, style=dotted];
m9_319 -> m9_199  [key=2, style=dotted];
m9_319 -> m9_94  [key=2, style=dotted];
m9_318 -> m9_319  [key=0, style=solid];
m9_318 -> m9_320  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_320 -> m9_321  [key=0, style=solid];
m9_320 -> m9_269  [key=2, style=dotted];
m9_320 -> m9_242  [key=2, style=dotted];
m9_321 -> m9_322  [key=0, style=solid];
m9_321 -> m9_64  [key=2, style=dotted];
m9_322 -> m9_318  [key=0, style=bold, color=blue];
m9_327 -> m9_328  [key=0, style=solid];
m9_327 -> m9_332  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_328 -> m9_329  [key=0, style=solid];
m9_328 -> m9_19  [key=2, style=dotted];
m9_328 -> m9_331  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_332 -> m9_333  [key=0, style=solid];
m9_332 -> m9_334  [key=2, style=dotted];
m9_329 -> m9_330  [key=0, style=solid];
m9_329 -> m9_20  [key=2, style=dotted];
m9_331 -> m9_332  [key=0, style=solid];
m9_330 -> m9_327  [key=0, style=bold, color=blue];
m9_333 -> m9_331  [key=0, style=bold, color=blue];
m9_338 -> m9_339  [key=0, style=solid];
m9_338 -> m9_343  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_339 -> m9_340  [key=0, style=solid];
m9_339 -> m9_19  [key=2, style=dotted];
m9_339 -> m9_342  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_343 -> m9_344  [key=0, style=solid];
m9_343 -> m9_334  [key=2, style=dotted];
m9_340 -> m9_341  [key=0, style=solid];
m9_340 -> m9_20  [key=2, style=dotted];
m9_342 -> m9_343  [key=0, style=solid];
m9_341 -> m9_338  [key=0, style=bold, color=blue];
m9_344 -> m9_342  [key=0, style=bold, color=blue];
m9_350 -> m9_351  [key=0, style=solid];
m9_350 -> m9_199  [key=2, style=dotted];
m9_350 -> m9_94  [key=2, style=dotted];
m9_349 -> m9_350  [key=0, style=solid];
m9_349 -> m9_352  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_349 -> m9_353  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_352 -> m9_353  [key=0, style=solid];
m9_352 -> m9_334  [key=2, style=dotted];
m9_353 -> m9_354  [key=0, style=solid];
m9_353 -> m9_199  [key=2, style=dotted];
m9_353 -> m9_94  [key=2, style=dotted];
m9_351 -> m9_352  [key=0, style=solid];
m9_351 -> m9_200  [key=2, style=dotted];
m9_351 -> m9_353  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_354 -> m9_355  [key=0, style=solid];
m9_354 -> m9_20  [key=2, style=dotted];
m9_355 -> m9_349  [key=0, style=bold, color=blue];
m9_361 -> m9_362  [key=0, style=solid];
m9_361 -> m9_199  [key=2, style=dotted];
m9_361 -> m9_94  [key=2, style=dotted];
m9_360 -> m9_361  [key=0, style=solid];
m9_360 -> m9_363  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_360 -> m9_364  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_360 -> m9_365  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_363 -> m9_364  [key=0, style=solid];
m9_363 -> m9_334  [key=2, style=dotted];
m9_364 -> m9_365  [key=0, style=solid];
m9_364 -> m9_334  [key=2, style=dotted];
m9_365 -> m9_366  [key=0, style=solid];
m9_365 -> m9_199  [key=2, style=dotted];
m9_365 -> m9_94  [key=2, style=dotted];
m9_362 -> m9_363  [key=0, style=solid];
m9_362 -> m9_200  [key=2, style=dotted];
m9_362 -> m9_364  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_362 -> m9_365  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_366 -> m9_367  [key=0, style=solid];
m9_366 -> m9_20  [key=2, style=dotted];
m9_367 -> m9_360  [key=0, style=bold, color=blue];
m9_373 -> m9_374  [key=0, style=solid];
m9_373 -> m9_199  [key=2, style=dotted];
m9_373 -> m9_94  [key=2, style=dotted];
m9_372 -> m9_373  [key=0, style=solid];
m9_372 -> m9_375  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_372 -> m9_376  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_375 -> m9_376  [key=0, style=solid];
m9_375 -> m9_334  [key=2, style=dotted];
m9_376 -> m9_377  [key=0, style=solid];
m9_376 -> m9_199  [key=2, style=dotted];
m9_376 -> m9_94  [key=2, style=dotted];
m9_374 -> m9_375  [key=0, style=solid];
m9_374 -> m9_200  [key=2, style=dotted];
m9_374 -> m9_376  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m9_377 -> m9_378  [key=0, style=solid];
m9_377 -> m9_20  [key=2, style=dotted];
m9_378 -> m9_372  [key=0, style=bold, color=blue];
m9_382 -> m9_383  [key=0, style=solid];
m9_382 -> m9_387  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_383 -> m9_384  [key=0, style=solid];
m9_383 -> m9_19  [key=2, style=dotted];
m9_383 -> m9_386  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_387 -> m9_388  [key=0, style=solid];
m9_387 -> m9_389  [key=2, style=dotted];
m9_384 -> m9_385  [key=0, style=solid];
m9_384 -> m9_20  [key=2, style=dotted];
m9_386 -> m9_387  [key=0, style=solid];
m9_385 -> m9_382  [key=0, style=bold, color=blue];
m9_388 -> m9_386  [key=0, style=bold, color=blue];
m9_393 -> m9_394  [key=0, style=solid];
m9_393 -> m9_398  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_394 -> m9_395  [key=0, style=solid];
m9_394 -> m9_19  [key=2, style=dotted];
m9_394 -> m9_397  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_398 -> m9_399  [key=0, style=solid];
m9_398 -> m9_389  [key=2, style=dotted];
m9_395 -> m9_396  [key=0, style=solid];
m9_395 -> m9_20  [key=2, style=dotted];
m9_397 -> m9_398  [key=0, style=solid];
m9_396 -> m9_393  [key=0, style=bold, color=blue];
m9_399 -> m9_397  [key=0, style=bold, color=blue];
m9_403 -> m9_404  [key=0, style=solid];
m9_404 -> m9_405  [key=0, style=solid];
m9_404 -> m9_389  [key=2, style=dotted];
m9_405 -> m9_406  [key=0, style=solid];
m9_405 -> m9_250  [key=2, style=dotted];
m9_406 -> m9_403  [key=0, style=bold, color=blue];
m9_412 -> m9_413  [key=0, style=solid];
m9_412 -> m9_19  [key=2, style=dotted];
m9_412 -> m9_94  [key=2, style=dotted];
m9_411 -> m9_412  [key=0, style=solid];
m9_411 -> m9_413  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_413 -> m9_414  [key=0, style=solid];
m9_413 -> m9_200  [key=2, style=dotted];
m9_413 -> m9_416  [key=2, style=dotted];
m9_414 -> m9_415  [key=0, style=solid];
m9_414 -> m9_20  [key=2, style=dotted];
m9_415 -> m9_411  [key=0, style=bold, color=blue];
m9_420 -> m9_421  [key=0, style=solid];
m9_420 -> m9_425  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_421 -> m9_422  [key=0, style=solid];
m9_421 -> m9_19  [key=2, style=dotted];
m9_421 -> m9_424  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_425 -> m9_426  [key=0, style=solid];
m9_425 -> m9_427  [key=2, style=dotted];
m9_422 -> m9_423  [key=0, style=solid];
m9_422 -> m9_20  [key=2, style=dotted];
m9_424 -> m9_425  [key=0, style=solid];
m9_423 -> m9_420  [key=0, style=bold, color=blue];
m9_426 -> m9_424  [key=0, style=bold, color=blue];
m9_431 -> m9_432  [key=0, style=solid];
m9_431 -> m9_435  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_432 -> m9_433  [key=0, style=solid];
m9_432 -> m9_19  [key=2, style=dotted];
m9_432 -> m9_434  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_435 -> m9_436  [key=0, style=solid];
m9_435 -> m9_427  [key=2, style=dotted];
m9_433 -> m9_431  [key=0, style=bold, color=blue];
m9_434 -> m9_435  [key=0, style=solid];
m9_436 -> m9_434  [key=0, style=bold, color=blue];
m9_440 -> m9_441  [key=0, style=solid];
m9_441 -> m9_442  [key=0, style=solid];
m9_441 -> m9_427  [key=2, style=dotted];
m9_442 -> m9_443  [key=0, style=solid];
m9_442 -> m9_250  [key=2, style=dotted];
m9_443 -> m9_440  [key=0, style=bold, color=blue];
m9_449 -> m9_450  [key=0, style=solid];
m9_449 -> m9_453  [key=2, style=dotted];
m9_448 -> m9_449  [key=0, style=solid];
m9_448 -> m9_450  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_450 -> m9_451  [key=0, style=solid];
m9_450 -> m9_427  [key=2, style=dotted];
m9_451 -> m9_452  [key=0, style=solid];
m9_451 -> m9_20  [key=2, style=dotted];
m9_452 -> m9_448  [key=0, style=bold, color=blue];
m9_457 -> m9_458  [key=0, style=solid];
m9_457 -> m9_462  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_458 -> m9_459  [key=0, style=solid];
m9_458 -> m9_19  [key=2, style=dotted];
m9_458 -> m9_461  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_462 -> m9_463  [key=0, style=solid];
m9_462 -> m9_464  [key=2, style=dotted];
m9_462 -> m9_465  [key=2, style=dotted];
m9_459 -> m9_460  [key=0, style=solid];
m9_459 -> m9_20  [key=2, style=dotted];
m9_461 -> m9_462  [key=0, style=solid];
m9_460 -> m9_457  [key=0, style=bold, color=blue];
m9_463 -> m9_461  [key=0, style=bold, color=blue];
m9_469 -> m9_470  [key=0, style=solid];
m9_469 -> m9_474  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_470 -> m9_471  [key=0, style=solid];
m9_470 -> m9_19  [key=2, style=dotted];
m9_470 -> m9_473  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_474 -> m9_475  [key=0, style=solid];
m9_474 -> m9_465  [key=2, style=dotted];
m9_471 -> m9_472  [key=0, style=solid];
m9_471 -> m9_20  [key=2, style=dotted];
m9_473 -> m9_474  [key=0, style=solid];
m9_472 -> m9_469  [key=0, style=bold, color=blue];
m9_475 -> m9_473  [key=0, style=bold, color=blue];
m9_479 -> m9_480  [key=0, style=solid];
m9_479 -> m9_481  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_479 -> m9_482  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_479 -> m9_487  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_479 -> m9_488  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_480 -> m9_481  [key=0, style=solid];
m9_480 -> m9_464  [key=2, style=dotted];
m9_481 -> m9_482  [key=0, style=solid];
m9_481 -> m9_465  [key=2, style=dotted];
m9_482 -> m9_483  [key=0, style=solid];
m9_482 -> m9_199  [key=2, style=dotted];
m9_482 -> m9_94  [key=2, style=dotted];
m9_482 -> m9_484  [key=1, style=dashed, color=darkseagreen4, label=server];
m9_482 -> m9_485  [key=1, style=dashed, color=darkseagreen4, label=server];
m9_487 -> m9_488  [key=0, style=solid];
m9_487 -> m9_465  [key=2, style=dotted];
m9_488 -> m9_489  [key=0, style=solid];
m9_488 -> m9_199  [key=2, style=dotted];
m9_488 -> m9_94  [key=2, style=dotted];
m9_488 -> m9_490  [key=1, style=dashed, color=darkseagreen4, label=sameServer];
m9_483 -> m9_484  [key=0, style=solid];
m9_483 -> m9_20  [key=2, style=dotted];
m9_484 -> m9_485  [key=0, style=solid];
m9_484 -> m9_492  [key=2, style=dotted];
m9_484 -> m9_143  [key=2, style=dotted];
m9_485 -> m9_486  [key=0, style=solid];
m9_485 -> m9_64  [key=2, style=dotted];
m9_486 -> m9_487  [key=0, style=solid];
m9_486 -> m9_464  [key=2, style=dotted];
m9_489 -> m9_490  [key=0, style=solid];
m9_489 -> m9_20  [key=2, style=dotted];
m9_490 -> m9_491  [key=0, style=solid];
m9_490 -> m9_493  [key=2, style=dotted];
m9_491 -> m9_479  [key=0, style=bold, color=blue];
m9_497 -> m9_498  [key=0, style=solid];
m9_497 -> m9_501  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_498 -> m9_499  [key=0, style=solid];
m9_498 -> m9_19  [key=2, style=dotted];
m9_498 -> m9_500  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_501 -> m9_502  [key=0, style=solid];
m9_501 -> m9_503  [key=2, style=dotted];
m9_499 -> m9_497  [key=0, style=bold, color=blue];
m9_500 -> m9_501  [key=0, style=solid];
m9_502 -> m9_500  [key=0, style=bold, color=blue];
m9_509 -> m9_510  [key=0, style=solid];
m9_509 -> m9_453  [key=2, style=dotted];
m9_508 -> m9_509  [key=0, style=solid];
m9_508 -> m9_510  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_508 -> m9_511  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_510 -> m9_511  [key=0, style=solid];
m9_510 -> m9_503  [key=2, style=dotted];
m9_511 -> m9_512  [key=0, style=solid];
m9_511 -> m9_199  [key=2, style=dotted];
m9_511 -> m9_94  [key=2, style=dotted];
m9_512 -> m9_513  [key=0, style=solid];
m9_512 -> m9_514  [key=2, style=dotted];
m9_513 -> m9_508  [key=0, style=bold, color=blue];
m9_518 -> m9_519  [key=0, style=solid];
m9_518 -> m9_522  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_519 -> m9_520  [key=0, style=solid];
m9_519 -> m9_19  [key=2, style=dotted];
m9_519 -> m9_521  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_522 -> m9_523  [key=0, style=solid];
m9_522 -> m9_524  [key=2, style=dotted];
m9_520 -> m9_518  [key=0, style=bold, color=blue];
m9_521 -> m9_522  [key=0, style=solid];
m9_523 -> m9_521  [key=0, style=bold, color=blue];
m9_530 -> m9_531  [key=0, style=solid];
m9_530 -> m9_453  [key=2, style=dotted];
m9_529 -> m9_530  [key=0, style=solid];
m9_529 -> m9_531  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_529 -> m9_532  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_531 -> m9_532  [key=0, style=solid];
m9_531 -> m9_524  [key=2, style=dotted];
m9_532 -> m9_533  [key=0, style=solid];
m9_532 -> m9_199  [key=2, style=dotted];
m9_532 -> m9_205  [key=2, style=dotted];
m9_532 -> m9_536  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_532 -> m9_539  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_532 -> m9_534  [key=1, style=dashed, color=darkseagreen4, label=servers];
m9_533 -> m9_534  [key=0, style=solid];
m9_533 -> m9_514  [key=2, style=dotted];
m9_536 -> m9_537  [key=0, style=solid];
m9_539 -> m9_540  [key=0, style=solid];
m9_534 -> m9_535  [key=0, style=solid];
m9_534 -> m9_20  [key=2, style=dotted];
m9_535 -> m9_529  [key=0, style=bold, color=blue];
m9_537 -> m9_538  [key=0, style=solid];
m9_538 -> m9_536  [key=0, style=bold, color=blue];
m9_540 -> m9_541  [key=0, style=solid];
m9_541 -> m9_539  [key=0, style=bold, color=blue];
m9_545 -> m9_546  [key=0, style=solid];
m9_545 -> m9_549  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_546 -> m9_547  [key=0, style=solid];
m9_546 -> m9_19  [key=2, style=dotted];
m9_546 -> m9_548  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_549 -> m9_550  [key=0, style=solid];
m9_549 -> m9_84  [key=2, style=dotted];
m9_549 -> m9_551  [key=2, style=dotted];
m9_547 -> m9_545  [key=0, style=bold, color=blue];
m9_548 -> m9_549  [key=0, style=solid];
m9_550 -> m9_548  [key=0, style=bold, color=blue];
m9_557 -> m9_558  [key=0, style=solid];
m9_557 -> m9_203  [key=2, style=dotted];
m9_557 -> m9_562  [key=2, style=dotted];
m9_557 -> m9_453  [key=2, style=dotted];
m9_556 -> m9_557  [key=0, style=solid];
m9_556 -> m9_558  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_556 -> m9_559  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_558 -> m9_559  [key=0, style=solid];
m9_558 -> m9_563  [key=2, style=dotted];
m9_558 -> m9_551  [key=2, style=dotted];
m9_559 -> m9_560  [key=0, style=solid];
m9_559 -> m9_199  [key=2, style=dotted];
m9_559 -> m9_94  [key=2, style=dotted];
m9_560 -> m9_561  [key=0, style=solid];
m9_560 -> m9_20  [key=2, style=dotted];
m9_561 -> m9_556  [key=0, style=bold, color=blue];
m9_567 -> m9_568  [key=0, style=solid];
m9_567 -> m9_571  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_568 -> m9_569  [key=0, style=solid];
m9_568 -> m9_19  [key=2, style=dotted];
m9_568 -> m9_570  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_571 -> m9_572  [key=0, style=solid];
m9_571 -> m9_573  [key=2, style=dotted];
m9_569 -> m9_567  [key=0, style=bold, color=blue];
m9_570 -> m9_571  [key=0, style=solid];
m9_572 -> m9_570  [key=0, style=bold, color=blue];
m9_577 -> m9_578  [key=0, style=solid];
m9_578 -> m9_579  [key=0, style=solid];
m9_578 -> m9_573  [key=2, style=dotted];
m9_578 -> m9_580  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_579 -> m9_580  [key=0, style=solid];
m9_579 -> m9_64  [key=2, style=dotted];
m9_580 -> m9_581  [key=0, style=solid];
m9_580 -> m9_20  [key=2, style=dotted];
m9_581 -> m9_577  [key=0, style=bold, color=blue];
m9_587 -> m9_588  [key=0, style=solid];
m9_587 -> m9_453  [key=2, style=dotted];
m9_586 -> m9_587  [key=0, style=solid];
m9_586 -> m9_588  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_588 -> m9_589  [key=0, style=solid];
m9_588 -> m9_573  [key=2, style=dotted];
m9_588 -> m9_590  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_588 -> m9_591  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_589 -> m9_590  [key=0, style=solid];
m9_589 -> m9_20  [key=2, style=dotted];
m9_590 -> m9_591  [key=0, style=solid];
m9_590 -> m9_493  [key=2, style=dotted];
m9_591 -> m9_592  [key=0, style=solid];
m9_591 -> m9_493  [key=2, style=dotted];
m9_592 -> m9_586  [key=0, style=bold, color=blue];
m9_596 -> m9_597  [key=0, style=solid];
m9_596 -> m9_601  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_597 -> m9_598  [key=0, style=solid];
m9_597 -> m9_19  [key=2, style=dotted];
m9_597 -> m9_600  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_601 -> m9_602  [key=0, style=solid];
m9_601 -> m9_154  [key=2, style=dotted];
m9_601 -> m9_603  [key=2, style=dotted];
m9_598 -> m9_599  [key=0, style=solid];
m9_598 -> m9_20  [key=2, style=dotted];
m9_600 -> m9_601  [key=0, style=solid];
m9_599 -> m9_596  [key=0, style=bold, color=blue];
m9_602 -> m9_600  [key=0, style=bold, color=blue];
m9_607 -> m9_608  [key=0, style=solid];
m9_607 -> m9_612  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_608 -> m9_609  [key=0, style=solid];
m9_608 -> m9_19  [key=2, style=dotted];
m9_608 -> m9_611  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_612 -> m9_613  [key=0, style=solid];
m9_612 -> m9_603  [key=2, style=dotted];
m9_609 -> m9_610  [key=0, style=solid];
m9_609 -> m9_20  [key=2, style=dotted];
m9_611 -> m9_612  [key=0, style=solid];
m9_610 -> m9_607  [key=0, style=bold, color=blue];
m9_613 -> m9_611  [key=0, style=bold, color=blue];
m9_617 -> m9_618  [key=0, style=solid];
m9_617 -> m9_619  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_618 -> m9_619  [key=0, style=solid];
m9_618 -> m9_154  [key=2, style=dotted];
m9_618 -> m9_603  [key=2, style=dotted];
m9_619 -> m9_620  [key=0, style=solid];
m9_619 -> m9_199  [key=2, style=dotted];
m9_619 -> m9_205  [key=2, style=dotted];
m9_619 -> m9_623  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_619 -> m9_626  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_619 -> m9_621  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_620 -> m9_621  [key=0, style=solid];
m9_620 -> m9_20  [key=2, style=dotted];
m9_623 -> m9_624  [key=0, style=solid];
m9_626 -> m9_627  [key=0, style=solid];
m9_621 -> m9_622  [key=0, style=solid];
m9_621 -> m9_20  [key=2, style=dotted];
m9_622 -> m9_617  [key=0, style=bold, color=blue];
m9_624 -> m9_625  [key=0, style=solid];
m9_625 -> m9_623  [key=0, style=bold, color=blue];
m9_627 -> m9_628  [key=0, style=solid];
m9_628 -> m9_626  [key=0, style=bold, color=blue];
m9_632 -> m9_633  [key=0, style=solid];
m9_632 -> m9_634  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m9_633 -> m9_634  [key=0, style=solid];
m9_633 -> m9_154  [key=2, style=dotted];
m9_633 -> m9_603  [key=2, style=dotted];
m9_634 -> m9_635  [key=0, style=solid];
m9_634 -> m9_199  [key=2, style=dotted];
m9_634 -> m9_205  [key=2, style=dotted];
m9_634 -> m9_637  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_634 -> m9_640  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_635 -> m9_636  [key=0, style=solid];
m9_635 -> m9_20  [key=2, style=dotted];
m9_637 -> m9_638  [key=0, style=solid];
m9_640 -> m9_641  [key=0, style=solid];
m9_636 -> m9_632  [key=0, style=bold, color=blue];
m9_638 -> m9_639  [key=0, style=solid];
m9_639 -> m9_637  [key=0, style=bold, color=blue];
m9_641 -> m9_642  [key=0, style=solid];
m9_642 -> m9_640  [key=0, style=bold, color=blue];
m9_646 -> m9_647  [key=0, style=solid];
m9_646 -> m9_650  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_647 -> m9_648  [key=0, style=solid];
m9_647 -> m9_19  [key=2, style=dotted];
m9_647 -> m9_649  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_650 -> m9_651  [key=0, style=solid];
m9_650 -> m9_652  [key=2, style=dotted];
m9_648 -> m9_646  [key=0, style=bold, color=blue];
m9_649 -> m9_650  [key=0, style=solid];
m9_651 -> m9_649  [key=0, style=bold, color=blue];
m9_656 -> m9_657  [key=0, style=solid];
m9_657 -> m9_658  [key=0, style=solid];
m9_657 -> m9_652  [key=2, style=dotted];
m9_658 -> m9_659  [key=0, style=solid];
m9_658 -> m9_250  [key=2, style=dotted];
m9_659 -> m9_656  [key=0, style=bold, color=blue];
m9_665 -> m9_666  [key=0, style=solid];
m9_665 -> m9_453  [key=2, style=dotted];
m9_664 -> m9_665  [key=0, style=solid];
m9_664 -> m9_666  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_666 -> m9_667  [key=0, style=solid];
m9_666 -> m9_652  [key=2, style=dotted];
m9_666 -> m9_668  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_666 -> m9_669  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_666 -> m9_670  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_667 -> m9_668  [key=0, style=solid];
m9_667 -> m9_64  [key=2, style=dotted];
m9_668 -> m9_669  [key=0, style=solid];
m9_668 -> m9_20  [key=2, style=dotted];
m9_669 -> m9_670  [key=0, style=solid];
m9_669 -> m9_20  [key=2, style=dotted];
m9_670 -> m9_671  [key=0, style=solid];
m9_670 -> m9_20  [key=2, style=dotted];
m9_671 -> m9_664  [key=0, style=bold, color=blue];
m9_675 -> m9_676  [key=0, style=solid];
m9_675 -> m9_679  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_676 -> m9_677  [key=0, style=solid];
m9_676 -> m9_19  [key=2, style=dotted];
m9_676 -> m9_678  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_679 -> m9_680  [key=0, style=solid];
m9_679 -> m9_681  [key=2, style=dotted];
m9_677 -> m9_675  [key=0, style=bold, color=blue];
m9_678 -> m9_679  [key=0, style=solid];
m9_680 -> m9_678  [key=0, style=bold, color=blue];
m9_685 -> m9_686  [key=0, style=solid];
m9_686 -> m9_687  [key=0, style=solid];
m9_686 -> m9_681  [key=2, style=dotted];
m9_687 -> m9_688  [key=0, style=solid];
m9_687 -> m9_20  [key=2, style=dotted];
m9_688 -> m9_685  [key=0, style=bold, color=blue];
m9_694 -> m9_695  [key=0, style=solid];
m9_694 -> m9_698  [key=2, style=dotted];
m9_694 -> m9_453  [key=2, style=dotted];
m9_693 -> m9_694  [key=0, style=solid];
m9_693 -> m9_695  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_695 -> m9_696  [key=0, style=solid];
m9_695 -> m9_681  [key=2, style=dotted];
m9_696 -> m9_697  [key=0, style=solid];
m9_696 -> m9_20  [key=2, style=dotted];
m9_697 -> m9_693  [key=0, style=bold, color=blue];
m9_702 -> m9_703  [key=0, style=solid];
m9_702 -> m9_706  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_703 -> m9_704  [key=0, style=solid];
m9_703 -> m9_19  [key=2, style=dotted];
m9_703 -> m9_705  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_706 -> m9_707  [key=0, style=solid];
m9_706 -> m9_708  [key=2, style=dotted];
m9_704 -> m9_702  [key=0, style=bold, color=blue];
m9_705 -> m9_706  [key=0, style=solid];
m9_707 -> m9_705  [key=0, style=bold, color=blue];
m9_714 -> m9_715  [key=0, style=solid];
m9_714 -> m9_698  [key=2, style=dotted];
m9_714 -> m9_453  [key=2, style=dotted];
m9_713 -> m9_714  [key=0, style=solid];
m9_713 -> m9_715  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_715 -> m9_716  [key=0, style=solid];
m9_715 -> m9_708  [key=2, style=dotted];
m9_716 -> m9_717  [key=0, style=solid];
m9_716 -> m9_20  [key=2, style=dotted];
m9_717 -> m9_713  [key=0, style=bold, color=blue];
m9_721 -> m9_722  [key=0, style=solid];
m9_721 -> m9_725  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_722 -> m9_723  [key=0, style=solid];
m9_722 -> m9_19  [key=2, style=dotted];
m9_722 -> m9_724  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_725 -> m9_726  [key=0, style=solid];
m9_725 -> m9_727  [key=2, style=dotted];
m9_723 -> m9_721  [key=0, style=bold, color=blue];
m9_724 -> m9_725  [key=0, style=solid];
m9_726 -> m9_724  [key=0, style=bold, color=blue];
m9_731 -> m9_732  [key=0, style=solid];
m9_732 -> m9_733  [key=0, style=solid];
m9_732 -> m9_727  [key=2, style=dotted];
m9_733 -> m9_734  [key=0, style=solid];
m9_733 -> m9_20  [key=2, style=dotted];
m9_734 -> m9_731  [key=0, style=bold, color=blue];
m9_740 -> m9_741  [key=0, style=solid];
m9_740 -> m9_453  [key=2, style=dotted];
m9_739 -> m9_740  [key=0, style=solid];
m9_739 -> m9_741  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_741 -> m9_742  [key=0, style=solid];
m9_741 -> m9_727  [key=2, style=dotted];
m9_742 -> m9_743  [key=0, style=solid];
m9_742 -> m9_20  [key=2, style=dotted];
m9_743 -> m9_739  [key=0, style=bold, color=blue];
m9_749 -> m9_750  [key=0, style=solid];
m9_749 -> m9_453  [key=2, style=dotted];
m9_748 -> m9_749  [key=0, style=solid];
m9_748 -> m9_750  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_750 -> m9_751  [key=0, style=solid];
m9_750 -> m9_727  [key=2, style=dotted];
m9_751 -> m9_752  [key=0, style=solid];
m9_751 -> m9_20  [key=2, style=dotted];
m9_752 -> m9_748  [key=0, style=bold, color=blue];
m9_756 -> m9_757  [key=0, style=solid];
m9_756 -> m9_760  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_757 -> m9_758  [key=0, style=solid];
m9_757 -> m9_19  [key=2, style=dotted];
m9_757 -> m9_759  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_760 -> m9_761  [key=0, style=solid];
m9_760 -> m9_762  [key=2, style=dotted];
m9_758 -> m9_756  [key=0, style=bold, color=blue];
m9_759 -> m9_760  [key=0, style=solid];
m9_761 -> m9_759  [key=0, style=bold, color=blue];
m9_766 -> m9_767  [key=0, style=solid];
m9_767 -> m9_768  [key=0, style=solid];
m9_767 -> m9_762  [key=2, style=dotted];
m9_768 -> m9_769  [key=0, style=solid];
m9_768 -> m9_20  [key=2, style=dotted];
m9_769 -> m9_766  [key=0, style=bold, color=blue];
m9_775 -> m9_776  [key=0, style=solid];
m9_775 -> m9_453  [key=2, style=dotted];
m9_774 -> m9_775  [key=0, style=solid];
m9_774 -> m9_776  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_776 -> m9_777  [key=0, style=solid];
m9_776 -> m9_762  [key=2, style=dotted];
m9_777 -> m9_778  [key=0, style=solid];
m9_777 -> m9_20  [key=2, style=dotted];
m9_778 -> m9_774  [key=0, style=bold, color=blue];
m9_782 -> m9_783  [key=0, style=solid];
m9_782 -> m9_786  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_783 -> m9_784  [key=0, style=solid];
m9_783 -> m9_19  [key=2, style=dotted];
m9_783 -> m9_785  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_786 -> m9_787  [key=0, style=solid];
m9_786 -> m9_788  [key=2, style=dotted];
m9_784 -> m9_782  [key=0, style=bold, color=blue];
m9_785 -> m9_786  [key=0, style=solid];
m9_787 -> m9_785  [key=0, style=bold, color=blue];
m9_792 -> m9_793  [key=0, style=solid];
m9_793 -> m9_794  [key=0, style=solid];
m9_793 -> m9_788  [key=2, style=dotted];
m9_794 -> m9_795  [key=0, style=solid];
m9_794 -> m9_143  [key=2, style=dotted];
m9_795 -> m9_792  [key=0, style=bold, color=blue];
m9_801 -> m9_802  [key=0, style=solid];
m9_801 -> m9_562  [key=2, style=dotted];
m9_801 -> m9_453  [key=2, style=dotted];
m9_800 -> m9_801  [key=0, style=solid];
m9_800 -> m9_802  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_802 -> m9_803  [key=0, style=solid];
m9_802 -> m9_788  [key=2, style=dotted];
m9_802 -> m9_804  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_803 -> m9_804  [key=0, style=solid];
m9_803 -> m9_84  [key=2, style=dotted];
m9_803 -> m9_143  [key=2, style=dotted];
m9_804 -> m9_805  [key=0, style=solid];
m9_804 -> m9_84  [key=2, style=dotted];
m9_804 -> m9_143  [key=2, style=dotted];
m9_805 -> m9_800  [key=0, style=bold, color=blue];
m9_809 -> m9_810  [key=0, style=solid];
m9_809 -> m9_813  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_810 -> m9_811  [key=0, style=solid];
m9_810 -> m9_19  [key=2, style=dotted];
m9_810 -> m9_812  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_813 -> m9_814  [key=0, style=solid];
m9_813 -> m9_815  [key=2, style=dotted];
m9_811 -> m9_809  [key=0, style=bold, color=blue];
m9_812 -> m9_813  [key=0, style=solid];
m9_814 -> m9_812  [key=0, style=bold, color=blue];
m9_819 -> m9_820  [key=0, style=solid];
m9_820 -> m9_821  [key=0, style=solid];
m9_820 -> m9_815  [key=2, style=dotted];
m9_821 -> m9_822  [key=0, style=solid];
m9_821 -> m9_20  [key=2, style=dotted];
m9_822 -> m9_819  [key=0, style=bold, color=blue];
m9_828 -> m9_829  [key=0, style=solid];
m9_828 -> m9_453  [key=2, style=dotted];
m9_827 -> m9_828  [key=0, style=solid];
m9_827 -> m9_829  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_829 -> m9_830  [key=0, style=solid];
m9_829 -> m9_815  [key=2, style=dotted];
m9_830 -> m9_831  [key=0, style=solid];
m9_830 -> m9_20  [key=2, style=dotted];
m9_831 -> m9_827  [key=0, style=bold, color=blue];
m9_835 -> m9_836  [key=0, style=solid];
m9_835 -> m9_839  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_836 -> m9_837  [key=0, style=solid];
m9_836 -> m9_19  [key=2, style=dotted];
m9_836 -> m9_838  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_839 -> m9_840  [key=0, style=solid];
m9_839 -> m9_841  [key=2, style=dotted];
m9_837 -> m9_835  [key=0, style=bold, color=blue];
m9_838 -> m9_839  [key=0, style=solid];
m9_840 -> m9_838  [key=0, style=bold, color=blue];
m9_845 -> m9_846  [key=0, style=solid];
m9_846 -> m9_847  [key=0, style=solid];
m9_846 -> m9_841  [key=2, style=dotted];
m9_847 -> m9_848  [key=0, style=solid];
m9_847 -> m9_143  [key=2, style=dotted];
m9_848 -> m9_845  [key=0, style=bold, color=blue];
m9_854 -> m9_855  [key=0, style=solid];
m9_854 -> m9_562  [key=2, style=dotted];
m9_854 -> m9_453  [key=2, style=dotted];
m9_853 -> m9_854  [key=0, style=solid];
m9_853 -> m9_855  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_855 -> m9_856  [key=0, style=solid];
m9_855 -> m9_841  [key=2, style=dotted];
m9_855 -> m9_857  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_856 -> m9_857  [key=0, style=solid];
m9_856 -> m9_84  [key=2, style=dotted];
m9_856 -> m9_143  [key=2, style=dotted];
m9_857 -> m9_858  [key=0, style=solid];
m9_857 -> m9_84  [key=2, style=dotted];
m9_857 -> m9_143  [key=2, style=dotted];
m9_858 -> m9_853  [key=0, style=bold, color=blue];
m9_862 -> m9_863  [key=0, style=solid];
m9_862 -> m9_867  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_863 -> m9_864  [key=0, style=solid];
m9_863 -> m9_19  [key=2, style=dotted];
m9_863 -> m9_866  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_867 -> m9_868  [key=0, style=solid];
m9_867 -> m9_869  [key=2, style=dotted];
m9_864 -> m9_865  [key=0, style=solid];
m9_864 -> m9_20  [key=2, style=dotted];
m9_866 -> m9_867  [key=0, style=solid];
m9_865 -> m9_862  [key=0, style=bold, color=blue];
m9_868 -> m9_866  [key=0, style=bold, color=blue];
m9_873 -> m9_874  [key=0, style=solid];
m9_873 -> m9_878  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_874 -> m9_875  [key=0, style=solid];
m9_874 -> m9_19  [key=2, style=dotted];
m9_874 -> m9_877  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_878 -> m9_879  [key=0, style=solid];
m9_878 -> m9_869  [key=2, style=dotted];
m9_875 -> m9_876  [key=0, style=solid];
m9_875 -> m9_20  [key=2, style=dotted];
m9_877 -> m9_878  [key=0, style=solid];
m9_876 -> m9_873  [key=0, style=bold, color=blue];
m9_879 -> m9_877  [key=0, style=bold, color=blue];
m9_883 -> m9_884  [key=0, style=solid];
m9_884 -> m9_885  [key=0, style=solid];
m9_884 -> m9_869  [key=2, style=dotted];
m9_885 -> m9_886  [key=0, style=solid];
m9_885 -> m9_250  [key=2, style=dotted];
m9_886 -> m9_883  [key=0, style=bold, color=blue];
m9_892 -> m9_893  [key=0, style=solid];
m9_892 -> m9_453  [key=2, style=dotted];
m9_891 -> m9_892  [key=0, style=solid];
m9_891 -> m9_893  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_893 -> m9_894  [key=0, style=solid];
m9_893 -> m9_869  [key=2, style=dotted];
m9_894 -> m9_895  [key=0, style=solid];
m9_894 -> m9_20  [key=2, style=dotted];
m9_895 -> m9_891  [key=0, style=bold, color=blue];
m9_899 -> m9_900  [key=0, style=solid];
m9_899 -> m9_904  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_900 -> m9_901  [key=0, style=solid];
m9_900 -> m9_19  [key=2, style=dotted];
m9_900 -> m9_903  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_904 -> m9_905  [key=0, style=solid];
m9_904 -> m9_906  [key=2, style=dotted];
m9_901 -> m9_902  [key=0, style=solid];
m9_901 -> m9_20  [key=2, style=dotted];
m9_903 -> m9_904  [key=0, style=solid];
m9_902 -> m9_899  [key=0, style=bold, color=blue];
m9_905 -> m9_903  [key=0, style=bold, color=blue];
m9_910 -> m9_911  [key=0, style=solid];
m9_911 -> m9_912  [key=0, style=solid];
m9_911 -> m9_906  [key=2, style=dotted];
m9_912 -> m9_913  [key=0, style=solid];
m9_912 -> m9_914  [key=2, style=dotted];
m9_913 -> m9_910  [key=0, style=bold, color=blue];
m9_920 -> m9_921  [key=0, style=solid];
m9_920 -> m9_453  [key=2, style=dotted];
m9_919 -> m9_920  [key=0, style=solid];
m9_919 -> m9_921  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_921 -> m9_922  [key=0, style=solid];
m9_921 -> m9_906  [key=2, style=dotted];
m9_922 -> m9_923  [key=0, style=solid];
m9_922 -> m9_20  [key=2, style=dotted];
m9_923 -> m9_919  [key=0, style=bold, color=blue];
m9_927 -> m9_928  [key=0, style=solid];
m9_927 -> m9_931  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_928 -> m9_929  [key=0, style=solid];
m9_928 -> m9_19  [key=2, style=dotted];
m9_928 -> m9_930  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_931 -> m9_932  [key=0, style=solid];
m9_931 -> m9_933  [key=2, style=dotted];
m9_929 -> m9_927  [key=0, style=bold, color=blue];
m9_930 -> m9_931  [key=0, style=solid];
m9_932 -> m9_930  [key=0, style=bold, color=blue];
m9_937 -> m9_938  [key=0, style=solid];
m9_938 -> m9_939  [key=0, style=solid];
m9_938 -> m9_933  [key=2, style=dotted];
m9_939 -> m9_940  [key=0, style=solid];
m9_939 -> m9_914  [key=2, style=dotted];
m9_940 -> m9_937  [key=0, style=bold, color=blue];
m9_946 -> m9_947  [key=0, style=solid];
m9_946 -> m9_453  [key=2, style=dotted];
m9_945 -> m9_946  [key=0, style=solid];
m9_945 -> m9_947  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_947 -> m9_948  [key=0, style=solid];
m9_947 -> m9_933  [key=2, style=dotted];
m9_948 -> m9_949  [key=0, style=solid];
m9_948 -> m9_20  [key=2, style=dotted];
m9_949 -> m9_945  [key=0, style=bold, color=blue];
m9_953 -> m9_954  [key=0, style=solid];
m9_953 -> m9_957  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_954 -> m9_955  [key=0, style=solid];
m9_954 -> m9_19  [key=2, style=dotted];
m9_954 -> m9_956  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_957 -> m9_958  [key=0, style=solid];
m9_957 -> m9_959  [key=2, style=dotted];
m9_955 -> m9_953  [key=0, style=bold, color=blue];
m9_956 -> m9_957  [key=0, style=solid];
m9_958 -> m9_956  [key=0, style=bold, color=blue];
m9_963 -> m9_964  [key=0, style=solid];
m9_964 -> m9_965  [key=0, style=solid];
m9_964 -> m9_959  [key=2, style=dotted];
m9_965 -> m9_966  [key=0, style=solid];
m9_965 -> m9_143  [key=2, style=dotted];
m9_966 -> m9_963  [key=0, style=bold, color=blue];
m9_972 -> m9_973  [key=0, style=solid];
m9_972 -> m9_204  [key=2, style=dotted];
m9_972 -> m9_453  [key=2, style=dotted];
m9_971 -> m9_972  [key=0, style=solid];
m9_971 -> m9_973  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_973 -> m9_974  [key=0, style=solid];
m9_973 -> m9_959  [key=2, style=dotted];
m9_973 -> m9_975  [key=1, style=dashed, color=darkseagreen4, label=result];
m9_974 -> m9_975  [key=0, style=solid];
m9_974 -> m9_84  [key=2, style=dotted];
m9_974 -> m9_143  [key=2, style=dotted];
m9_975 -> m9_976  [key=0, style=solid];
m9_975 -> m9_84  [key=2, style=dotted];
m9_975 -> m9_143  [key=2, style=dotted];
m9_976 -> m9_971  [key=0, style=bold, color=blue];
m9_997 -> m9_998  [key=0, style=solid];
m9_998 -> m9_996  [key=0, style=bold, color=blue];
m9_476 -> m9_477  [key=0, style=solid];
m9_477 -> m9_478  [key=0, style=solid];
m9_477 -> m9_88  [key=2, style=dotted];
m9_477 -> m9_479  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_478 -> m9_476  [key=0, style=bold, color=blue];
m9_770 -> m9_771  [key=0, style=solid];
m9_771 -> m9_772  [key=0, style=solid];
m9_771 -> m9_775  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_771 -> m9_771  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_772 -> m9_773  [key=0, style=solid];
m9_772 -> m9_88  [key=2, style=dotted];
m9_772 -> m9_774  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_773 -> m9_770  [key=0, style=bold, color=blue];
m9_454 -> m9_455  [key=0, style=solid];
m9_455 -> m9_456  [key=0, style=solid];
m9_455 -> m9_45  [key=2, style=dotted];
m9_455 -> m9_457  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_456 -> m9_454  [key=0, style=bold, color=blue];
m9_564 -> m9_565  [key=0, style=solid];
m9_565 -> m9_566  [key=0, style=solid];
m9_565 -> m9_45  [key=2, style=dotted];
m9_565 -> m9_567  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_566 -> m9_564  [key=0, style=bold, color=blue];
m9_324 -> m9_325  [key=0, style=solid];
m9_325 -> m9_326  [key=0, style=solid];
m9_325 -> m9_45  [key=2, style=dotted];
m9_325 -> m9_327  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_326 -> m9_324  [key=0, style=bold, color=blue];
m9_243 -> m9_244  [key=0, style=solid];
m9_244 -> m9_245  [key=0, style=solid];
m9_244 -> m9_45  [key=2, style=dotted];
m9_244 -> m9_246  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_245 -> m9_243  [key=0, style=bold, color=blue];
m9_56 -> m9_57  [key=0, style=solid];
m9_57 -> m9_58  [key=0, style=solid];
m9_57 -> m9_45  [key=2, style=dotted];
m9_57 -> m9_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_58 -> m9_56  [key=0, style=bold, color=blue];
m9_400 -> m9_401  [key=0, style=solid];
m9_401 -> m9_402  [key=0, style=solid];
m9_401 -> m9_45  [key=2, style=dotted];
m9_401 -> m9_403  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_402 -> m9_400  [key=0, style=bold, color=blue];
m9_977 -> m9_978  [key=0, style=solid];
m9_977 -> m9_979  [key=1, style=dashed, color=darkseagreen4, label=bool];
m9_977 -> m9_981  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>"];
m9_978 -> m9_979  [key=0, style=solid];
m9_978 -> m9_983  [key=2, style=dotted];
m9_978 -> m9_981  [key=1, style=dashed, color=darkseagreen4, label=sqlConnection];
m9_979 -> m9_980  [key=0, style=solid];
m9_979 -> m9_984  [key=2, style=dotted];
m9_979 -> m9_985  [key=2, style=dotted];
m9_979 -> m9_84  [key=2, style=dotted];
m9_981 -> m9_982  [key=0, style=solid];
m9_981 -> m9_986  [key=2, style=dotted];
m9_980 -> m9_981  [key=0, style=solid];
m9_980 -> m9_24  [key=2, style=dotted];
m9_982 -> m9_977  [key=0, style=bold, color=blue];
m9_170 -> m9_999  [key=0, style=solid];
m9_170 -> m9_86  [key=3, color=darkorchid, style=bold, label="Parameter variable string arg"];
m9_170 -> m9_172  [key=3, color=darkorchid, style=bold, label="Parameter variable string arg"];
m9_170 -> m9_253  [key=3, color=darkorchid, style=bold, label="Parameter variable string arg"];
m9_999 -> m9_170  [key=0, style=bold, color=blue];
m9_614 -> m9_615  [key=0, style=solid];
m9_615 -> m9_616  [key=0, style=solid];
m9_615 -> m9_88  [key=2, style=dotted];
m9_615 -> m9_617  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_616 -> m9_614  [key=0, style=bold, color=blue];
m9_806 -> m9_807  [key=0, style=solid];
m9_807 -> m9_808  [key=0, style=solid];
m9_807 -> m9_45  [key=2, style=dotted];
m9_807 -> m9_809  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_808 -> m9_806  [key=0, style=bold, color=blue];
m9_593 -> m9_594  [key=0, style=solid];
m9_594 -> m9_595  [key=0, style=solid];
m9_594 -> m9_45  [key=2, style=dotted];
m9_594 -> m9_596  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_595 -> m9_593  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_6  [key=2, style=dotted];
m9_2 -> m9_3  [key=0, style=solid];
m9_2 -> m9_7  [key=2, style=dotted];
m9_2 -> m9_4  [key=1, style=dashed, color=darkseagreen4, label=provider];
m9_3 -> m9_4  [key=0, style=solid];
m9_3 -> m9_8  [key=2, style=dotted];
m9_3 -> m9_9  [key=2, style=dotted];
m9_3 -> m9_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_4 -> m9_5  [key=0, style=solid];
m9_4 -> m9_10  [key=2, style=dotted];
m9_5 -> m9_0  [key=0, style=bold, color=blue];
m9_156 -> m9_157  [key=0, style=solid];
m9_157 -> m9_158  [key=0, style=solid];
m9_157 -> m9_45  [key=2, style=dotted];
m9_157 -> m9_159  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_158 -> m9_156  [key=0, style=bold, color=blue];
m9_689 -> m9_690  [key=0, style=solid];
m9_690 -> m9_691  [key=0, style=solid];
m9_690 -> m9_694  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_690 -> m9_690  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_691 -> m9_692  [key=0, style=solid];
m9_691 -> m9_88  [key=2, style=dotted];
m9_691 -> m9_693  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_692 -> m9_689  [key=0, style=bold, color=blue];
m9_842 -> m9_843  [key=0, style=solid];
m9_843 -> m9_844  [key=0, style=solid];
m9_843 -> m9_45  [key=2, style=dotted];
m9_843 -> m9_845  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_844 -> m9_842  [key=0, style=bold, color=blue];
m9_552 -> m9_553  [key=0, style=solid];
m9_553 -> m9_554  [key=0, style=solid];
m9_553 -> m9_557  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_553 -> m9_553  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_554 -> m9_555  [key=0, style=solid];
m9_554 -> m9_88  [key=2, style=dotted];
m9_554 -> m9_556  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_555 -> m9_552  [key=0, style=bold, color=blue];
m9_832 -> m9_833  [key=0, style=solid];
m9_833 -> m9_834  [key=0, style=solid];
m9_833 -> m9_45  [key=2, style=dotted];
m9_833 -> m9_835  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_834 -> m9_832  [key=0, style=bold, color=blue];
m9_290 -> m9_291  [key=0, style=solid];
m9_291 -> m9_292  [key=0, style=solid];
m9_291 -> m9_296  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_291 -> m9_291  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_292 -> m9_293  [key=0, style=solid];
m9_292 -> m9_88  [key=2, style=dotted];
m9_292 -> m9_294  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_293 -> m9_290  [key=0, style=bold, color=blue];
m9_880 -> m9_881  [key=0, style=solid];
m9_881 -> m9_882  [key=0, style=solid];
m9_881 -> m9_45  [key=2, style=dotted];
m9_881 -> m9_883  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_882 -> m9_880  [key=0, style=bold, color=blue];
m9_42 -> m9_43  [key=0, style=solid];
m9_43 -> m9_44  [key=0, style=solid];
m9_43 -> m9_45  [key=2, style=dotted];
m9_43 -> m9_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_44 -> m9_42  [key=0, style=bold, color=blue];
m9_171 -> m9_172  [key=0, style=solid];
m9_172 -> m9_173  [key=0, style=solid];
m9_172 -> m9_88  [key=2, style=dotted];
m9_172 -> m9_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_173 -> m9_171  [key=0, style=bold, color=blue];
m9_753 -> m9_754  [key=0, style=solid];
m9_754 -> m9_755  [key=0, style=solid];
m9_754 -> m9_45  [key=2, style=dotted];
m9_754 -> m9_756  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_755 -> m9_753  [key=0, style=bold, color=blue];
m9_25 -> m9_26  [key=0, style=solid];
m9_26 -> m9_27  [key=0, style=solid];
m9_26 -> m9_28  [key=2, style=dotted];
m9_26 -> m9_29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_27 -> m9_25  [key=0, style=bold, color=blue];
m9_582 -> m9_583  [key=0, style=solid];
m9_583 -> m9_584  [key=0, style=solid];
m9_583 -> m9_587  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_583 -> m9_583  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_584 -> m9_585  [key=0, style=solid];
m9_584 -> m9_88  [key=2, style=dotted];
m9_584 -> m9_586  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_585 -> m9_582  [key=0, style=bold, color=blue];
m9_135 -> m9_136  [key=0, style=solid];
m9_136 -> m9_137  [key=0, style=solid];
m9_136 -> m9_45  [key=2, style=dotted];
m9_136 -> m9_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_137 -> m9_135  [key=0, style=bold, color=blue];
m9_604 -> m9_605  [key=0, style=solid];
m9_605 -> m9_606  [key=0, style=solid];
m9_605 -> m9_45  [key=2, style=dotted];
m9_605 -> m9_607  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_606 -> m9_604  [key=0, style=bold, color=blue];
m9_763 -> m9_764  [key=0, style=solid];
m9_764 -> m9_765  [key=0, style=solid];
m9_764 -> m9_45  [key=2, style=dotted];
m9_764 -> m9_766  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_765 -> m9_763  [key=0, style=bold, color=blue];
m9_779 -> m9_780  [key=0, style=solid];
m9_780 -> m9_781  [key=0, style=solid];
m9_780 -> m9_45  [key=2, style=dotted];
m9_780 -> m9_782  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_781 -> m9_779  [key=0, style=bold, color=blue];
m9_28 -> m9_987  [key=0, style=solid];
m9_28 -> m9_991  [key=1, style=dashed, color=darkseagreen4, label="System.Action<Hangfire.SqlServer.SqlServerConnection>"];
m9_28 -> m9_26  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<Hangfire.SqlServer.SqlServerConnection> action"];
m9_28 -> m9_98  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<Hangfire.SqlServer.SqlServerConnection> action"];
m9_987 -> m9_988  [key=0, style=solid];
m9_987 -> m9_983  [key=2, style=dotted];
m9_991 -> m9_992  [key=0, style=solid];
m9_991 -> m9_995  [key=2, style=dotted];
m9_988 -> m9_989  [key=0, style=solid];
m9_988 -> m9_993  [key=2, style=dotted];
m9_988 -> m9_990  [key=1, style=dashed, color=darkseagreen4, label=storage];
m9_989 -> m9_990  [key=0, style=solid];
m9_989 -> m9_8  [key=2, style=dotted];
m9_989 -> m9_9  [key=2, style=dotted];
m9_989 -> m9_996  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_990 -> m9_991  [key=0, style=solid];
m9_990 -> m9_994  [key=2, style=dotted];
m9_992 -> m9_28  [key=0, style=bold, color=blue];
m9_718 -> m9_719  [key=0, style=solid];
m9_719 -> m9_720  [key=0, style=solid];
m9_719 -> m9_45  [key=2, style=dotted];
m9_719 -> m9_721  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_720 -> m9_718  [key=0, style=bold, color=blue];
m9_896 -> m9_897  [key=0, style=solid];
m9_897 -> m9_898  [key=0, style=solid];
m9_897 -> m9_45  [key=2, style=dotted];
m9_897 -> m9_899  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_898 -> m9_896  [key=0, style=bold, color=blue];
m9_379 -> m9_380  [key=0, style=solid];
m9_380 -> m9_381  [key=0, style=solid];
m9_380 -> m9_45  [key=2, style=dotted];
m9_380 -> m9_382  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_381 -> m9_379  [key=0, style=bold, color=blue];
m9_915 -> m9_916  [key=0, style=solid];
m9_916 -> m9_917  [key=0, style=solid];
m9_916 -> m9_920  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_916 -> m9_916  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_917 -> m9_918  [key=0, style=solid];
m9_917 -> m9_88  [key=2, style=dotted];
m9_917 -> m9_919  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_918 -> m9_915  [key=0, style=bold, color=blue];
m9_144 -> m9_145  [key=0, style=solid];
m9_145 -> m9_146  [key=0, style=solid];
m9_145 -> m9_45  [key=2, style=dotted];
m9_145 -> m9_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_146 -> m9_144  [key=0, style=bold, color=blue];
m9_728 -> m9_729  [key=0, style=solid];
m9_729 -> m9_730  [key=0, style=solid];
m9_729 -> m9_45  [key=2, style=dotted];
m9_729 -> m9_731  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_730 -> m9_728  [key=0, style=bold, color=blue];
m9_950 -> m9_951  [key=0, style=solid];
m9_951 -> m9_952  [key=0, style=solid];
m9_951 -> m9_45  [key=2, style=dotted];
m9_951 -> m9_953  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_952 -> m9_950  [key=0, style=bold, color=blue];
m9_65 -> m9_66  [key=0, style=solid];
m9_66 -> m9_67  [key=0, style=solid];
m9_66 -> m9_45  [key=2, style=dotted];
m9_66 -> m9_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_67 -> m9_65  [key=0, style=bold, color=blue];
m9_672 -> m9_673  [key=0, style=solid];
m9_673 -> m9_674  [key=0, style=solid];
m9_673 -> m9_45  [key=2, style=dotted];
m9_673 -> m9_675  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_674 -> m9_672  [key=0, style=bold, color=blue];
m9_444 -> m9_445  [key=0, style=solid];
m9_445 -> m9_446  [key=0, style=solid];
m9_445 -> m9_449  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_445 -> m9_445  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_446 -> m9_447  [key=0, style=solid];
m9_446 -> m9_88  [key=2, style=dotted];
m9_446 -> m9_448  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_447 -> m9_444  [key=0, style=bold, color=blue];
m9_709 -> m9_710  [key=0, style=solid];
m9_710 -> m9_711  [key=0, style=solid];
m9_710 -> m9_714  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_710 -> m9_710  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_711 -> m9_712  [key=0, style=solid];
m9_711 -> m9_88  [key=2, style=dotted];
m9_711 -> m9_713  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_712 -> m9_709  [key=0, style=bold, color=blue];
m9_356 -> m9_357  [key=0, style=solid];
m9_357 -> m9_358  [key=0, style=solid];
m9_357 -> m9_361  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_357 -> m9_346  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_358 -> m9_359  [key=0, style=solid];
m9_358 -> m9_88  [key=2, style=dotted];
m9_358 -> m9_360  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_359 -> m9_356  [key=0, style=bold, color=blue];
m9_525 -> m9_526  [key=0, style=solid];
m9_526 -> m9_527  [key=0, style=solid];
m9_526 -> m9_530  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_526 -> m9_526  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_527 -> m9_528  [key=0, style=solid];
m9_527 -> m9_88  [key=2, style=dotted];
m9_527 -> m9_529  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_528 -> m9_525  [key=0, style=bold, color=blue];
m9_907 -> m9_908  [key=0, style=solid];
m9_908 -> m9_909  [key=0, style=solid];
m9_908 -> m9_45  [key=2, style=dotted];
m9_908 -> m9_910  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_909 -> m9_907  [key=0, style=bold, color=blue];
m9_74 -> m9_75  [key=0, style=solid];
m9_75 -> m9_76  [key=0, style=solid];
m9_75 -> m9_45  [key=2, style=dotted];
m9_75 -> m9_77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_76 -> m9_74  [key=0, style=bold, color=blue];
m9_251 -> m9_252  [key=0, style=solid];
m9_252 -> m9_253  [key=0, style=solid];
m9_252 -> m9_257  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_252 -> m9_252  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_253 -> m9_254  [key=0, style=solid];
m9_253 -> m9_88  [key=2, style=dotted];
m9_253 -> m9_255  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_254 -> m9_251  [key=0, style=bold, color=blue];
m9_515 -> m9_516  [key=0, style=solid];
m9_516 -> m9_517  [key=0, style=solid];
m9_516 -> m9_45  [key=2, style=dotted];
m9_516 -> m9_518  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_517 -> m9_515  [key=0, style=bold, color=blue];
m9_823 -> m9_824  [key=0, style=solid];
m9_824 -> m9_825  [key=0, style=solid];
m9_824 -> m9_828  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_824 -> m9_824  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m9_825 -> m9_826  [key=0, style=solid];
m9_825 -> m9_88  [key=2, style=dotted];
m9_825 -> m9_827  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_826 -> m9_823  [key=0, style=bold, color=blue];
m9_233 -> m9_234  [key=0, style=solid];
m9_234 -> m9_235  [key=0, style=solid];
m9_234 -> m9_45  [key=2, style=dotted];
m9_234 -> m9_236  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_235 -> m9_233  [key=0, style=bold, color=blue];
m9_437 -> m9_438  [key=0, style=solid];
m9_438 -> m9_439  [key=0, style=solid];
m9_438 -> m9_45  [key=2, style=dotted];
m9_438 -> m9_440  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_439 -> m9_437  [key=0, style=bold, color=blue];
m9_682 -> m9_683  [key=0, style=solid];
m9_683 -> m9_684  [key=0, style=solid];
m9_683 -> m9_45  [key=2, style=dotted];
m9_683 -> m9_685  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_684 -> m9_682  [key=0, style=bold, color=blue];
m9_1000 -> m9_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_26  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_49  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_57  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_66  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_86  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_98  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_112  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_101  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_126  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_136  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_145  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_157  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_172  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_216  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_234  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_244  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_253  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_274  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_284  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_292  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_305  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_316  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_325  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_336  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_347  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_358  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_370  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_380  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_391  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_401  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_409  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_418  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_429  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_438  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_446  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_455  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_467  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_477  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_495  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_506  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_516  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_527  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_543  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_554  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_565  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_575  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_584  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_594  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_605  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_615  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_630  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_644  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_654  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_662  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_673  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_683  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_691  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_700  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_711  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_719  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_729  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_737  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_746  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_754  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_764  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_772  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_780  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_790  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_798  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_807  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_817  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_825  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_833  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_843  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_851  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_860  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_871  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_881  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_889  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_897  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_908  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_917  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_925  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_935  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_943  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_951  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_961  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_969  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1000 -> m9_989  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts"];
m9_1001 -> m9_39  [key=1, style=dashed, color=darkseagreen4, label=token];
m9_1002 -> m9_39  [key=1, style=dashed, color=darkseagreen4, label=queues];
m9_1003 -> m9_54  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1004 -> m9_54  [key=1, style=dashed, color=darkseagreen4, label=token];
m9_1005 -> m9_82  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1006 -> m9_112  [key=1, style=dashed, color=darkseagreen4, label=releaseLock];
m9_1006 -> m9_117  [key=1, style=dashed, color=darkseagreen4, label=releaseLock];
m9_1007 -> m9_112  [key=1, style=dashed, color=darkseagreen4, label=lockAcquired];
m9_1007 -> m9_116  [key=1, style=dashed, color=darkseagreen4, label=lockAcquired];
m9_1008 -> m9_123  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1009 -> m9_152  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1010 -> m9_164  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1011 -> m9_240  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1012 -> m9_257  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1013 -> m9_280  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1014 -> m9_296  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1015 -> m9_309  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1016 -> m9_319  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1017 -> m9_332  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1018 -> m9_343  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1019 -> m9_350  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1020 -> m9_361  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1021 -> m9_373  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1022 -> m9_387  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1023 -> m9_398  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1024 -> m9_412  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1025 -> m9_425  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1026 -> m9_435  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1027 -> m9_449  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1028 -> m9_462  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1029 -> m9_474  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1030 -> m9_501  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1031 -> m9_509  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1032 -> m9_522  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1033 -> m9_530  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1034 -> m9_549  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1035 -> m9_557  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1036 -> m9_571  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1037 -> m9_587  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1038 -> m9_601  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1039 -> m9_612  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1040 -> m9_650  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1041 -> m9_665  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1042 -> m9_679  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1043 -> m9_694  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1044 -> m9_706  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1045 -> m9_714  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1046 -> m9_725  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1047 -> m9_740  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1048 -> m9_749  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1049 -> m9_760  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1050 -> m9_775  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1051 -> m9_786  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1052 -> m9_801  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1053 -> m9_813  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1054 -> m9_828  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1055 -> m9_839  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1056 -> m9_854  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1057 -> m9_867  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1058 -> m9_878  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1059 -> m9_892  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1060 -> m9_904  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1061 -> m9_920  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1062 -> m9_931  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1063 -> m9_946  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_1064 -> m9_957  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerConnection"];
m9_1065 -> m9_972  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m10_85 -> m10_86  [key=0, style=solid];
m10_86 -> m10_87  [key=0, style=solid];
m10_86 -> m10_15  [key=2, style=dotted];
m10_86 -> m10_31  [key=2, style=dotted];
m10_86 -> m10_92  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_87 -> m10_88  [key=0, style=solid];
m10_87 -> m10_55  [key=2, style=dotted];
m10_88 -> m10_89  [key=0, style=solid];
m10_88 -> m10_56  [key=2, style=dotted];
m10_89 -> m10_57  [key=2, style=dotted];
m10_89 -> m10_90  [key=0, style=solid];
m10_89 -> m10_95  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_90 -> m10_57  [key=2, style=dotted];
m10_90 -> m10_91  [key=0, style=solid];
m10_90 -> m10_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_91 -> m10_85  [key=0, style=bold, color=blue];
m10_18 -> m10_19  [key=0, style=solid];
m10_18 -> m10_22  [key=2, style=dotted];
m10_49 -> m10_50  [key=0, style=solid];
m10_53 -> m10_54  [key=0, style=solid, color=green];
m10_53 -> m10_57  [key=2, style=dotted, color=green];
m10_53 -> m10_66  [key=1, style=dashed, color=green, label="lambda expression"];
m10_52 -> m10_53  [key=0, style=solid, color=green];
m10_52 -> m10_57  [key=2, style=dotted];
m10_52 -> m10_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_50 -> m10_51  [key=0, style=solid];
m10_50 -> m10_55  [key=2, style=dotted];
m10_51 -> m10_52  [key=0, style=solid];
m10_51 -> m10_56  [key=2, style=dotted];
m10_54 -> m10_49  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid];
m10_0 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain"];
m10_0 -> m10_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain"];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_3  [key=0, style=solid];
m10_1 -> m10_12  [key=2, style=dotted];
m10_3 -> m10_4  [key=0, style=solid, color=red];
m10_3 -> m10_5  [key=0, style=solid];
m10_3 -> m10_14  [key=2, style=dotted];
m10_7 -> m10_8  [key=0, style=solid];
m10_7 -> m10_9  [key=0, style=solid];
m10_7 -> m10_12  [key=2, style=dotted];
m10_7 -> m10_15  [key=2, style=dotted];
m10_7 -> m10_16  [key=2, style=dotted];
m10_7 -> m10_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_2 -> m10_11  [key=0, style=solid];
m10_2 -> m10_3  [key=0, style=solid];
m10_2 -> m10_13  [key=2, style=dotted];
m10_4 -> m10_11  [key=0, style=solid, color=red];
m10_4 -> m10_5  [key=0, style=solid];
m10_4 -> m10_15  [key=2, style=dotted];
m10_4 -> m10_16  [key=2, style=dotted];
m10_4 -> m10_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_5 -> m10_6  [key=0, style=solid];
m10_5 -> m10_7  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_5 -> m10_9  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_5 -> m10_17  [key=2, style=dotted];
m10_6 -> m10_7  [key=0, style=solid];
m10_6 -> m10_10  [key=0, style=solid];
m10_6 -> m10_18  [key=2, style=dotted];
m10_9 -> m10_6  [key=0, style=solid];
m10_9 -> m10_9  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_9 -> m10_10  [key=0, style=solid];
m10_9 -> m10_15  [key=2, style=dotted];
m10_9 -> m10_16  [key=2, style=dotted];
m10_9 -> m10_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_10 -> m10_11  [key=0, style=solid];
m10_10 -> m10_15  [key=2, style=dotted];
m10_10 -> m10_16  [key=2, style=dotted];
m10_10 -> m10_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_8 -> m10_11  [key=0, style=solid];
m10_8 -> m10_9  [key=0, style=solid];
m10_8 -> m10_19  [key=2, style=dotted];
m10_11 -> m10_0  [key=0, style=bold, color=blue];
m10_22 -> m10_20  [key=0, style=bold, color=blue];
m10_13 -> m10_14  [key=0, style=solid];
m10_40 -> m10_107  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Reflection.MethodInfo GetNonOpenMatchingMethod"];
m10_40 -> m10_41  [key=0, style=solid];
m10_41 -> m10_31  [key=2, style=dotted];
m10_41 -> m10_42  [key=0, style=solid];
m10_41 -> m10_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_42 -> m10_43  [key=0, style=solid];
m10_42 -> m10_44  [key=2, style=dotted];
m10_43 -> m10_40  [key=0, style=bold, color=blue];
m10_23 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain"];
m10_23 -> m10_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain"];
m10_23 -> m10_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain"];
m10_23 -> m10_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain"];
m10_23 -> m10_18  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.ExpressionUtil.ExpressionFingerprintChain"];
m10_103 -> m10_104  [key=0, style=solid];
m10_104 -> m10_105  [key=0, style=solid];
m10_104 -> m10_55  [key=2, style=dotted];
m10_105 -> m10_106  [key=0, style=solid];
m10_105 -> m10_56  [key=2, style=dotted];
m10_106 -> m10_57  [key=2, style=dotted];
m10_106 -> m10_107  [key=0, style=solid];
m10_106 -> m10_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_107 -> m10_57  [key=2, style=dotted];
m10_107 -> m10_108  [key=0, style=solid];
m10_107 -> m10_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_108 -> m10_103  [key=0, style=bold, color=blue];
m10_16 -> m10_17  [key=0, style=solid];
m10_17 -> m10_18  [key=0, style=solid];
m10_17 -> m10_21  [key=2, style=dotted];
m10_17 -> m10_19  [key=1, style=dashed, color=darkseagreen4, label=combiner];
m10_19 -> m10_20  [key=0, style=solid];
m10_20 -> m10_16  [key=0, style=bold, color=blue];
m10_20 -> m10_21  [key=0, style=solid];
m10_55 -> m10_115  [key=0, style=solid];
m10_115 -> m10_116  [key=0, style=solid];
m10_115 -> m10_117  [key=2, style=dotted];
m10_116 -> m10_55  [key=0, style=bold, color=blue];
m10_21 -> m10_22  [key=0, style=solid];
m10_21 -> m10_23  [key=2, style=dotted];
m10_15 -> m10_13  [key=0, style=bold, color=blue];
m10_45 -> m10_46  [key=0, style=solid];
m10_66 -> m10_67  [key=0, style=solid, color=green];
m10_67 -> m10_68  [key=0, style=solid, color=green];
m10_67 -> m10_69  [key=2, style=dotted, color=green];
m10_68 -> m10_66  [key=0, style=bold, color=blue];
m10_58 -> m10_59  [key=0, style=solid];
m10_113 -> m10_69  [key=2, style=dotted];
m10_113 -> m10_114  [key=0, style=solid];
m10_24 -> m10_25  [key=0, style=solid];
m10_28 -> m10_29  [key=0, style=solid];
m10_33 -> m10_34  [key=0, style=solid];
m10_76 -> m10_77  [key=0, style=solid];
m10_82 -> m10_83  [key=0, style=solid];
m10_92 -> m10_93  [key=0, style=solid];
m10_95 -> m10_96  [key=0, style=solid];
m10_99 -> m10_100  [key=0, style=solid];
m10_109 -> m10_110  [key=0, style=solid];
m10_112 -> m10_113  [key=0, style=solid];
m10_60 -> m10_58  [key=0, style=bold, color=blue];
m10_59 -> m10_31  [key=2, style=dotted];
m10_59 -> m10_60  [key=0, style=solid];
m10_59 -> m10_61  [key=2, style=dotted];
m10_59 -> m10_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_114 -> m10_112  [key=0, style=bold, color=blue];
m10_26 -> m10_24  [key=0, style=bold, color=blue];
m10_25 -> m10_26  [key=0, style=solid];
m10_25 -> m10_27  [key=2, style=dotted];
m10_30 -> m10_28  [key=0, style=bold, color=blue];
m10_29 -> m10_31  [key=2, style=dotted];
m10_29 -> m10_30  [key=0, style=solid];
m10_29 -> m10_32  [key=2, style=dotted];
m10_35 -> m10_33  [key=0, style=bold, color=blue];
m10_34 -> m10_31  [key=2, style=dotted];
m10_34 -> m10_35  [key=0, style=solid];
m10_34 -> m10_36  [key=2, style=dotted];
m10_34 -> m10_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_78 -> m10_76  [key=0, style=bold, color=blue];
m10_77 -> m10_31  [key=2, style=dotted];
m10_77 -> m10_78  [key=0, style=solid];
m10_77 -> m10_36  [key=2, style=dotted];
m10_77 -> m10_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_84 -> m10_82  [key=0, style=bold, color=blue];
m10_83 -> m10_31  [key=2, style=dotted];
m10_83 -> m10_84  [key=0, style=solid];
m10_83 -> m10_61  [key=2, style=dotted];
m10_93 -> m10_31  [key=2, style=dotted];
m10_93 -> m10_94  [key=0, style=solid];
m10_93 -> m10_61  [key=2, style=dotted];
m10_110 -> m10_31  [key=2, style=dotted];
m10_110 -> m10_111  [key=0, style=solid];
m10_110 -> m10_32  [key=2, style=dotted];
m10_94 -> m10_92  [key=0, style=bold, color=blue];
m10_97 -> m10_95  [key=0, style=bold, color=blue];
m10_96 -> m10_97  [key=0, style=solid];
m10_96 -> m10_98  [key=2, style=dotted];
m10_101 -> m10_99  [key=0, style=bold, color=blue];
m10_100 -> m10_101  [key=0, style=solid];
m10_100 -> m10_102  [key=2, style=dotted];
m10_111 -> m10_109  [key=0, style=bold, color=blue];
m10_62 -> m10_63  [key=0, style=solid];
m10_37 -> m10_38  [key=0, style=solid];
m10_79 -> m10_80  [key=0, style=solid];
m10_64 -> m10_62  [key=0, style=bold, color=blue];
m10_63 -> m10_64  [key=0, style=solid];
m10_63 -> m10_65  [key=2, style=dotted];
m10_39 -> m10_37  [key=0, style=bold, color=blue];
m10_38 -> m10_39  [key=0, style=solid];
m10_81 -> m10_79  [key=0, style=bold, color=blue];
m10_80 -> m10_81  [key=0, style=solid];
m10_46 -> m10_47  [key=0, style=solid];
m10_46 -> m10_48  [key=2, style=dotted];
m10_47 -> m10_45  [key=0, style=bold, color=blue];
m10_70 -> m10_71  [key=0, style=solid];
m10_71 -> m10_72  [key=0, style=solid];
m10_71 -> m10_15  [key=2, style=dotted];
m10_71 -> m10_16  [key=2, style=dotted];
m10_71 -> m10_76  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_72 -> m10_73  [key=0, style=solid];
m10_72 -> m10_55  [key=2, style=dotted];
m10_73 -> m10_74  [key=0, style=solid];
m10_73 -> m10_56  [key=2, style=dotted];
m10_74 -> m10_57  [key=2, style=dotted];
m10_74 -> m10_75  [key=0, style=solid];
m10_74 -> m10_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_75 -> m10_70  [key=0, style=bold, color=blue];
m10_14 -> m10_15  [key=0, style=solid];
m10_14 -> m10_0  [key=2, style=dotted];
m10_118 -> m10_53  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_51  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_52  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_71  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_72  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_74  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_86  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_87  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_88  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_89  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_90  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_104  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_105  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_106  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_107  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
m10_118 -> m10_115  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobScheduler"];
}
