digraph  {
n52 [label="HangFire.Server.Components.SchedulePoller", span=""];
n0 [cluster="HangFire.Server.Components.SchedulePoller.SchedulePoller(HangFire.JobStorage, System.TimeSpan)", label="Entry HangFire.Server.Components.SchedulePoller.SchedulePoller(HangFire.JobStorage, System.TimeSpan)", span="34-34"];
n1 [cluster="HangFire.Server.Components.SchedulePoller.SchedulePoller(HangFire.JobStorage, System.TimeSpan)", label="_storage = storage", span="36-36"];
n2 [cluster="HangFire.Server.Components.SchedulePoller.SchedulePoller(HangFire.JobStorage, System.TimeSpan)", label="_pollInterval = pollInterval", span="37-37"];
n3 [cluster="HangFire.Server.Components.SchedulePoller.SchedulePoller(HangFire.JobStorage, System.TimeSpan)", label="Exit HangFire.Server.Components.SchedulePoller.SchedulePoller(HangFire.JobStorage, System.TimeSpan)", span="34-34"];
n4 [cluster="HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", label="Entry HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", span="40-40"];
n5 [cluster="HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", label="var connection = _storage.GetConnection()", span="42-42"];
n6 [cluster="HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", label="var timestamp = JobHelper.ToTimestamp(DateTime.UtcNow)", span="44-44"];
n15 [cluster="HangFire.JobStorage.GetConnection()", label="Entry HangFire.JobStorage.GetConnection()", span="45-45"];
n7 [cluster="HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", label="var jobId = connection.Sets\r\n                    .GetFirstByLowestScore(''schedule'', 0, timestamp)", span="47-48"];
n10 [cluster="HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", label="var stateMachine = new StateMachine(connection)", span="55-55"];
n16 [cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="35-35"];
n8 [cluster="HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", label="String.IsNullOrEmpty(jobId)", span="50-50"];
n17 [cluster="HangFire.Storage.IStoredSets.GetFirstByLowestScore(string, long, long)", label="Entry HangFire.Storage.IStoredSets.GetFirstByLowestScore(string, long, long)", span="4-4"];
n12 [cluster="HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", label="stateMachine.ChangeState(jobId, enqueuedState, ScheduledState.Name)", span="58-58"];
n9 [cluster="HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", label="return false;", span="52-52"];
n18 [cluster="string.IsNullOrEmpty(string)", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
n11 [cluster="HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", label="var enqueuedState = new EnqueuedState(''Enqueued by the schedule poller'')", span="56-56"];
n19 [cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", span="36-36"];
n20 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string)", label="Entry HangFire.States.EnqueuedState.EnqueuedState(string)", span="31-31"];
n13 [cluster="HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", label="return true;", span="60-60"];
n21 [cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="113-113"];
n14 [cluster="HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", label="Exit HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", span="40-40"];
n22 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="Entry HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", span="65-65"];
n23 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="Logger.Info(''Schedule poller has been started.'')", span="69-69"];
n24 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="int enqueued = 0", span="71-71"];
n38 [cluster="Unk.Info", label="Entry Unk.Info", span=""];
n25 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label=true, span="73-73"];
n29 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="enqueued++", span="85-85"];
n30 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="enqueued != 0", span="89-89"];
n31 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="Logger.InfoFormat(''{0} scheduled jobs were enqueued.'', enqueued)", span="91-91"];
n26 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="var wasEnqueued = false", span="75-75"];
n34 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="Logger.Info(''Schedule poller has been stopped.'')", span="101-101"];
n27 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="JobServer.RetryOnException(\r\n                        () =>\r\n                        {\r\n                            wasEnqueued = EnqueueNextScheduledJob();\r\n                        }, _cts.Token.WaitHandle)", span="77-81"];
n28 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="wasEnqueued && !_cts.IsCancellationRequested", span="83-83"];
n39 [cluster="HangFire.Server.JobServer.RetryOnException(System.Action, System.Threading.WaitHandle)", label="Entry HangFire.Server.JobServer.RetryOnException(System.Action, System.Threading.WaitHandle)", span="151-151"];
n43 [cluster="lambda expression", label="Entry lambda expression", span="78-81"];
n33 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="_cts.Token.WaitHandle.WaitOne(_pollInterval)", span="95-95"];
n32 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="enqueued = 0", span="92-92"];
n40 [cluster="Unk.InfoFormat", label="Entry Unk.InfoFormat", span=""];
n41 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
n35 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label=Exception, span="103-103"];
n37 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="Exit HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", span="65-65"];
n36 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Work()", label="Logger.Fatal(\r\n                    ''Unexpected exception caught in the schedule poller. Scheduled jobs will not be added to their queues.'',\r\n                    ex)", span="105-107"];
n42 [cluster="Unk.Fatal", label="Entry Unk.Fatal", span=""];
n44 [cluster="lambda expression", label="wasEnqueued = EnqueueNextScheduledJob()", span="80-80"];
n45 [cluster="lambda expression", label="Exit lambda expression", span="78-81"];
n46 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", label="Entry HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="111-111"];
n47 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", label="_cts.Cancel()", span="113-113"];
n48 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", label="thread.Join()", span="114-114"];
n50 [cluster="System.Threading.CancellationTokenSource.Cancel()", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
n49 [cluster="HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", label="Exit HangFire.Server.Components.SchedulePoller.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="111-111"];
n51 [cluster="System.Threading.Thread.Join()", label="Entry System.Threading.Thread.Join()", span="0-0"];
m0_105 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.IsEntryExpired(IDbConnection, int)", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.IsEntryExpired(IDbConnection, int)", span="207-207"];
m0_102 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.IsEntryExpired(IDbConnection, int)", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.IsEntryExpired(IDbConnection, int)", span="207-207"];
m0_103 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.IsEntryExpired(IDbConnection, int)", file="ExpirationManagerFacts.cs", label="var count = connection.Query<int>(\r\n                    ''select count(*) from HangFire.Counter where Id = @id'', new { id = entryId }).Single()", span="209-210"];
m0_104 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.IsEntryExpired(IDbConnection, int)", file="ExpirationManagerFacts.cs", label="return count == 0;", span="211-211"];
m0_54 [cluster="Unk.Equal", file="ExpirationManagerFacts.cs", label="Entry Unk.Equal", span=""];
m0_63 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", span="112-112"];
m0_64 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="ExpirationManagerFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="114-114"];
m0_65 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="ExpirationManagerFacts.cs", label="string createSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt) \r\nvalues ('', '', getutcdate(), @expireAt)''", span="117-119"];
m0_66 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="ExpirationManagerFacts.cs", label="connection.Execute(createSql, new { expireAt = DateTime.UtcNow.AddMonths(-1) })", span="120-120"];
m0_69 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="ExpirationManagerFacts.cs", label="Assert.Equal(0, connection.Query<int>(@''select count(*) from HangFire.Job'').Single())", span="128-128"];
m0_67 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="ExpirationManagerFacts.cs", label="var manager = CreateManager()", span="122-122"];
m0_68 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="ExpirationManagerFacts.cs", label="manager.Execute(_token)", span="125-125"];
m0_70 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", span="112-112"];
m0_7 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="22-22"];
m0_8 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ExpirationManagerFacts.cs", label="Assert.Throws<ArgumentNullException>(() => new ExpirationManager(null))", span="24-24"];
m0_9 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="22-22"];
m0_87 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ValueTable()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ValueTable()", span="175-175"];
m0_94 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ValueTable()", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ValueTable()", span="175-175"];
m0_100 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", span="195-195"];
m0_95 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", span="195-195"];
m0_96 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", file="ExpirationManagerFacts.cs", label="string insertSql = @''\r\ninsert into HangFire.Counter ([Key], [Value], [ExpireAt])\r\nvalues ('key', 1, @expireAt)\r\nselect scope_identity() as Id''", span="197-200"];
m0_97 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", file="ExpirationManagerFacts.cs", label="var id = connection.Query(insertSql, new { @expireAt = expireAt }).Single()", span="202-202"];
m0_98 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", file="ExpirationManagerFacts.cs", label="var recordId = (int) id.Id", span="203-203"];
m0_99 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", file="ExpirationManagerFacts.cs", label="return recordId;", span="204-204"];
m0_10 [cluster="Unk.>", file="ExpirationManagerFacts.cs", label="Entry Unk.>", span=""];
m0_34 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="ExpirationManagerFacts.cs", label="Assert.False(IsEntryExpired(connection, entryId))", span="51-51"];
m0_29 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", span="42-42"];
m0_30 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="ExpirationManagerFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="44-44"];
m0_31 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="ExpirationManagerFacts.cs", label="var entryId = CreateExpirationEntry(connection, null)", span="46-46"];
m0_32 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="ExpirationManagerFacts.cs", label="var manager = CreateManager()", span="47-47"];
m0_33 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="ExpirationManagerFacts.cs", label="manager.Execute(_token)", span="49-49"];
m0_35 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", span="42-42"];
m0_36 [cluster="Unk.False", file="ExpirationManagerFacts.cs", label="Entry Unk.False", span=""];
m0_55 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_HashTable()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_HashTable()", span="91-91"];
m0_62 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_HashTable()", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_HashTable()", span="91-91"];
m0_0 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.ExpirationManagerFacts()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.ExpirationManagerFacts()", span="15-15"];
m0_1 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.ExpirationManagerFacts()", file="ExpirationManagerFacts.cs", label="_storage = new SqlServerStorage(ConnectionUtils.GetConnectionString())", span="17-17"];
m0_2 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.ExpirationManagerFacts()", file="ExpirationManagerFacts.cs", label="_token = new CancellationToken(true)", span="18-18"];
m0_3 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.ExpirationManagerFacts()", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.ExpirationManagerFacts()", span="15-15"];
m0_101 [cluster="Unk.Query", file="ExpirationManagerFacts.cs", label="Entry Unk.Query", span=""];
m0_25 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateManager()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateManager()", span="214-214"];
m0_106 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateManager()", file="ExpirationManagerFacts.cs", label="return new ExpirationManager(_storage);", span="216-216"];
m0_107 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateManager()", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateManager()", span="214-214"];
m0_20 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="ExpirationManagerFacts.cs", label="Assert.True(IsEntryExpired(connection, entryId))", span="37-37"];
m0_15 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", span="28-28"];
m0_16 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="ExpirationManagerFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="30-30"];
m0_17 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="ExpirationManagerFacts.cs", label="var entryId = CreateExpirationEntry(connection, DateTime.UtcNow.AddMonths(-1))", span="32-32"];
m0_18 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="ExpirationManagerFacts.cs", label="var manager = CreateManager()", span="33-33"];
m0_19 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="ExpirationManagerFacts.cs", label="manager.Execute(_token)", span="35-35"];
m0_21 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", span="28-28"];
m0_23 [cluster="System.DateTime.AddMonths(int)", file="ExpirationManagerFacts.cs", label="Entry System.DateTime.AddMonths(int)", span="0-0"];
m0_14 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="40-40"];
m0_24 [cluster="Unk.CreateExpirationEntry", file="ExpirationManagerFacts.cs", label="Entry Unk.CreateExpirationEntry", span=""];
m0_11 [cluster="lambda expression", file="ExpirationManagerFacts.cs", label="Entry lambda expression", span="24-24"];
m0_12 [cluster="lambda expression", file="ExpirationManagerFacts.cs", label="new ExpirationManager(null)", span="24-24"];
m0_13 [cluster="lambda expression", file="ExpirationManagerFacts.cs", label="Exit lambda expression", span="24-24"];
m0_6 [cluster="System.Threading.CancellationToken.CancellationToken(bool)", file="ExpirationManagerFacts.cs", label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0"];
m0_27 [cluster="Unk.IsEntryExpired", file="ExpirationManagerFacts.cs", label="Entry Unk.IsEntryExpired", span=""];
m0_26 [cluster="HangFire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", span="53-53"];
m0_5 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26"];
m0_4 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="30-30"];
m0_53 [cluster="Unk.Single", file="ExpirationManagerFacts.cs", label="Entry Unk.Single", span=""];
m0_28 [cluster="Unk.True", file="ExpirationManagerFacts.cs", label="Entry Unk.True", span=""];
m0_52 [cluster="Unk.Execute", file="ExpirationManagerFacts.cs", label="Entry Unk.Execute", span=""];
m0_22 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m0_42 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="ExpirationManagerFacts.cs", label="Assert.False(IsEntryExpired(connection, entryId))", span="65-65"];
m0_37 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", span="56-56"];
m0_38 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="ExpirationManagerFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="58-58"];
m0_39 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="ExpirationManagerFacts.cs", label="var entryId = CreateExpirationEntry(connection, DateTime.Now.AddMonths(1))", span="60-60"];
m0_40 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="ExpirationManagerFacts.cs", label="var manager = CreateManager()", span="61-61"];
m0_41 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="ExpirationManagerFacts.cs", label="manager.Execute(_token)", span="63-63"];
m0_43 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", span="56-56"];
m0_44 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", span="70-70"];
m0_45 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="ExpirationManagerFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="72-72"];
m0_46 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="ExpirationManagerFacts.cs", label="string createSql = @''\r\ninsert into HangFire.Counter ([Key], [Value], ExpireAt) \r\nvalues ('key', 1, @expireAt)''", span="75-77"];
m0_47 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="ExpirationManagerFacts.cs", label="connection.Execute(createSql, new { expireAt = DateTime.UtcNow.AddMonths(-1) })", span="78-78"];
m0_50 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="ExpirationManagerFacts.cs", label="Assert.Equal(0, connection.Query<int>(@''select count(*) from HangFire.Counter'').Single())", span="86-86"];
m0_48 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="ExpirationManagerFacts.cs", label="var manager = CreateManager()", span="80-80"];
m0_49 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="ExpirationManagerFacts.cs", label="manager.Execute(_token)", span="83-83"];
m0_51 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", span="70-70"];
m0_79 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", span="154-154"];
m0_80 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="ExpirationManagerFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="156-156"];
m0_81 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="ExpirationManagerFacts.cs", label="string createSql = @''\r\ninsert into HangFire.[Set] ([Key], [Score], [Value], ExpireAt) \r\nvalues ('key', 0, '', @expireAt)''", span="159-161"];
m0_82 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="ExpirationManagerFacts.cs", label="connection.Execute(createSql, new { expireAt = DateTime.UtcNow.AddMonths(-1) })", span="162-162"];
m0_85 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="ExpirationManagerFacts.cs", label="Assert.Equal(0, connection.Query<int>(@''select count(*) from HangFire.[Set]'').Single())", span="170-170"];
m0_83 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="ExpirationManagerFacts.cs", label="var manager = CreateManager()", span="164-164"];
m0_84 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="ExpirationManagerFacts.cs", label="manager.Execute(_token)", span="167-167"];
m0_86 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", span="154-154"];
m0_71 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="ExpirationManagerFacts.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", span="133-133"];
m0_72 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="ExpirationManagerFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="135-135"];
m0_73 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="ExpirationManagerFacts.cs", label="string createSql = @''\r\ninsert into HangFire.List ([Key], ExpireAt) \r\nvalues ('key', @expireAt)''", span="138-140"];
m0_74 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="ExpirationManagerFacts.cs", label="connection.Execute(createSql, new { expireAt = DateTime.UtcNow.AddMonths(-1) })", span="141-141"];
m0_77 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="ExpirationManagerFacts.cs", label="Assert.Equal(0, connection.Query<int>(@''select count(*) from HangFire.List'').Single())", span="149-149"];
m0_75 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="ExpirationManagerFacts.cs", label="var manager = CreateManager()", span="143-143"];
m0_76 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="ExpirationManagerFacts.cs", label="manager.Execute(_token)", span="146-146"];
m0_78 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="ExpirationManagerFacts.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", span="133-133"];
m0_108 [file="ExpirationManagerFacts.cs", label="HangFire.SqlServer.Tests.ExpirationManagerFacts", span=""];
m1_2 [cluster="HangFire.Storage.IStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="9-9"];
m1_3 [cluster="HangFire.Storage.IStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="9-9"];
m1_6 [cluster="HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="17-17"];
m1_7 [cluster="HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="17-17"];
m1_0 [cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="8-8"];
m1_1 [cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="8-8"];
m1_12 [cluster="HangFire.Storage.IStorageConnection.Heartbeat(string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IStorageConnection.Heartbeat(string)", span="25-25"];
m1_13 [cluster="HangFire.Storage.IStorageConnection.Heartbeat(string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IStorageConnection.Heartbeat(string)", span="25-25"];
m1_8 [cluster="HangFire.Storage.IStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="23-23"];
m1_9 [cluster="HangFire.Storage.IStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="23-23"];
m1_4 [cluster="HangFire.Storage.IStorageConnection.AcquireJobLock(string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IStorageConnection.AcquireJobLock(string)", span="11-11"];
m1_5 [cluster="HangFire.Storage.IStorageConnection.AcquireJobLock(string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IStorageConnection.AcquireJobLock(string)", span="11-11"];
m1_10 [cluster="HangFire.Storage.IStorageConnection.RemoveServer(string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IStorageConnection.RemoveServer(string)", span="24-24"];
m1_11 [cluster="HangFire.Storage.IStorageConnection.RemoveServer(string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IStorageConnection.RemoveServer(string)", span="24-24"];
m1_14 [cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="26-26"];
m1_15 [cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="26-26"];
m2_6 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", span="36-36"];
m2_7 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", file="RedisWriteOnlyTransaction.cs", label="_transaction.Dispose()", span="38-38"];
m2_8 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.Dispose()", span="36-36"];
m2_128 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn))", span="158-158"];
m2_126 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="155-155"];
m2_127 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.DecrementValue(RedisStorage.Prefix + key))", span="157-157"];
m2_129 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="155-155"];
m2_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="RedisWriteOnlyTransaction.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m2_90 [cluster="Unk.EnqueueItemOnList", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.EnqueueItemOnList", span=""];
m2_65 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="RedisWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m2_156 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", span="179-179"];
m2_157 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                RedisStorage.Prefix + key, value))", span="181-182"];
m2_158 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", span="179-179"];
m2_78 [cluster="Unk.SetRangeInHash", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.SetRangeInHash", span=""];
m2_111 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn))", span="147-147"];
m2_109 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="144-144"];
m2_110 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.IncrementValue(RedisStorage.Prefix + key))", span="146-146"];
m2_112 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="144-144"];
m2_169 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", span="191-191"];
m2_170 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.TrimList(\r\n                RedisStorage.Prefix + key, keepStartingFrom, keepEndingAt))", span="194-195"];
m2_171 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", span="191-191"];
m2_55 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.RemoveEntry(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId)))", span="94-95"];
m2_53 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", span="87-87"];
m2_54 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''State'',\r\n                state.Name))", span="89-92"];
m2_56 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="var storedData = new Dictionary<string, string>(state.SerializeData())", span="101-101"];
m2_57 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="storedData.Add(''State'', state.Name)", span="102-102"];
m2_58 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="state.Reason != null", span="104-104"];
m2_59 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="storedData.Add(''Reason'', state.Reason)", span="106-106"];
m2_60 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.SetRangeInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                storedData))", span="109-111"];
m2_61 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="AddJobState(jobId, state)", span="113-113"];
m2_62 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", span="87-87"];
m2_70 [cluster="Unk.SetEntryInHash", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.SetEntryInHash", span=""];
m2_98 [cluster="Unk.AddItemToSet", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.AddItemToSet", span=""];
m2_30 [cluster="string.Format(string, object)", file="RedisWriteOnlyTransaction.cs", label="Entry string.Format(string, object)", span="0-0"];
m2_188 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="209-209"];
m2_190 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="209-209"];
m2_74 [cluster="Unk.RemoveEntry", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.RemoveEntry", span=""];
m2_108 [cluster="Unk.IncrementValue", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.IncrementValue", span=""];
m2_38 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", span="77-77"];
m2_39 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId)))", span="79-80"];
m2_40 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId)))", span="81-82"];
m2_41 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId)))", span="83-84"];
m2_42 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", span="77-77"];
m2_31 [cluster="Unk.ExpireEntryIn", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.ExpireEntryIn", span=""];
m2_142 [cluster="Unk.AddItemToSortedSet", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.AddItemToSortedSet", span=""];
m2_119 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", span="150-150"];
m2_120 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.DecrementValue(RedisStorage.Prefix + key))", span="152-152"];
m2_121 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", span="150-150"];
m2_136 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", span="161-161"];
m2_137 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value))", span="163-164"];
m2_138 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", span="161-161"];
m2_149 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", span="173-173"];
m2_150 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.RemoveItemFromSortedSet(\r\n                RedisStorage.Prefix + key, value))", span="175-176"];
m2_151 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", span="173-173"];
m2_63 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="RedisWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0"];
m2_9 [cluster="Unk.Dispose", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.Dispose", span=""];
m2_10 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.Commit()", span="41-41"];
m2_11 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="!_transaction.Commit()", span="43-43"];
m2_12 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="int replayCount = 1", span="49-49"];
m2_13 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="int maxReplayCount = 3", span="50-50"];
m2_15 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="replayCount++ >= maxReplayCount", span="54-54"];
m2_14 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="!_transaction.Replay()", span="52-52"];
m2_16 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="throw new RedisException(''Transaction commit was failed due to WATCH condition failure. Retry attempts exceeded.'');", span="56-56"];
m2_17 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.Commit()", span="41-41"];
m2_176 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", span="198-198"];
m2_178 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", span="198-198"];
m2_64 [cluster="HangFire.States.State.SerializeData()", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.States.State.SerializeData()", span="27-27"];
m2_191 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="211-212"];
m2_28 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                expireIn)", span="64-66"];
m2_33 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                expireIn)", span="68-70"];
m2_36 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                expireIn)", span="72-74"];
m2_27 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="64-66"];
m2_32 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="68-70"];
m2_35 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="72-74"];
m2_29 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="64-66"];
m2_34 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="68-70"];
m2_37 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="72-74"];
m2_44 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId))", span="79-80"];
m2_48 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId))", span="81-82"];
m2_51 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId))", span="83-84"];
m2_43 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="79-80"];
m2_47 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="81-82"];
m2_50 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="83-84"];
m2_45 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="79-80"];
m2_49 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="81-82"];
m2_52 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="83-84"];
m2_68 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''State'',\r\n                state.Name)", span="89-92"];
m2_72 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.RemoveEntry(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId))", span="94-95"];
m2_76 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.SetRangeInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                storedData)", span="109-111"];
m2_67 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="89-92"];
m2_71 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="94-95"];
m2_75 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="109-111"];
m2_69 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="89-92"];
m2_73 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="94-95"];
m2_77 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="109-111"];
m2_87 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                JobHelper.ToJson(storedData))", span="125-127"];
m2_86 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="125-127"];
m2_88 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="125-127"];
m2_96 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.AddItemToSet(\r\n                RedisStorage.Prefix + ''queues'', queue)", span="132-133"];
m2_100 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''queue:{0}'', queue), jobId)", span="135-136"];
m2_95 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="132-133"];
m2_99 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="135-136"];
m2_97 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="132-133"];
m2_101 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="135-136"];
m2_106 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.IncrementValue(RedisStorage.Prefix + key)", span="141-141"];
m2_105 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="141-141"];
m2_107 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="141-141"];
m2_114 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.IncrementValue(RedisStorage.Prefix + key)", span="146-146"];
m2_117 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn)", span="147-147"];
m2_113 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="146-146"];
m2_116 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="147-147"];
m2_115 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="146-146"];
m2_118 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="147-147"];
m2_123 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.DecrementValue(RedisStorage.Prefix + key)", span="152-152"];
m2_122 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="152-152"];
m2_124 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="152-152"];
m2_131 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.DecrementValue(RedisStorage.Prefix + key)", span="157-157"];
m2_134 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn)", span="158-158"];
m2_130 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="157-157"];
m2_133 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="158-158"];
m2_132 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="157-157"];
m2_135 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="158-158"];
m2_140 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value)", span="163-164"];
m2_139 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="163-164"];
m2_141 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="163-164"];
m2_147 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value, score)", span="169-170"];
m2_146 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="169-170"];
m2_148 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="169-170"];
m2_153 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.RemoveItemFromSortedSet(\r\n                RedisStorage.Prefix + key, value)", span="175-176"];
m2_152 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="175-176"];
m2_154 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="175-176"];
m2_160 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.EnqueueItemOnList(\r\n                RedisStorage.Prefix + key, value)", span="181-182"];
m2_159 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="181-182"];
m2_161 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="181-182"];
m2_166 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.RemoveItemFromList(\r\n                RedisStorage.Prefix + key, value)", span="187-188"];
m2_165 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="187-188"];
m2_167 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="187-188"];
m2_173 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="x.TrimList(\r\n                RedisStorage.Prefix + key, keepStartingFrom, keepEndingAt)", span="194-195"];
m2_172 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="194-195"];
m2_174 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="194-195"];
m2_179 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="200-201"];
m2_181 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="200-201"];
m2_185 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Entry lambda expression", span="206-206"];
m2_187 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="206-206"];
m2_193 [cluster="lambda expression", file="RedisWriteOnlyTransaction.cs", label="Exit lambda expression", span="211-212"];
m2_85 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m2_143 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", span="167-167"];
m2_144 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value, score))", span="169-170"];
m2_145 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", span="167-167"];
m2_182 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", span="204-204"];
m2_184 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", span="204-204"];
m2_102 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", span="139-139"];
m2_103 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.IncrementValue(RedisStorage.Prefix + key))", span="141-141"];
m2_104 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", span="139-139"];
m2_168 [cluster="Unk.RemoveItemFromList", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.RemoveItemFromList", span=""];
m2_24 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                expireIn))", span="72-74"];
m2_21 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="62-62"];
m2_22 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                expireIn))", span="64-66"];
m2_23 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                expireIn))", span="68-70"];
m2_25 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="62-62"];
m2_91 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", span="130-130"];
m2_92 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.AddItemToSet(\r\n                RedisStorage.Prefix + ''queues'', queue))", span="132-133"];
m2_93 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''queue:{0}'', queue), jobId))", span="135-136"];
m2_94 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", span="130-130"];
m2_89 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m2_46 [cluster="Unk.Persist", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.Persist", span=""];
m2_18 [cluster="Unk.Commit", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.Commit", span=""];
m2_66 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", span="116-116"];
m2_79 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="var storedData = new Dictionary<string, string>(state.SerializeData())", span="120-120"];
m2_80 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="storedData.Add(''State'', state.Name)", span="121-121"];
m2_81 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="storedData.Add(''Reason'', state.Reason)", span="122-122"];
m2_83 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                JobHelper.ToJson(storedData)))", span="125-127"];
m2_82 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="storedData.Add(''CreatedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="123-123"];
m2_84 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", span="116-116"];
m2_19 [cluster="Unk.Replay", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.Replay", span=""];
m2_20 [cluster="RedisException.cstr", file="RedisWriteOnlyTransaction.cs", label="Entry RedisException.cstr", span=""];
m2_26 [cluster="Unk.QueueCommand", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.QueueCommand", span=""];
m2_125 [cluster="Unk.DecrementValue", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.DecrementValue", span=""];
m2_175 [cluster="Unk.TrimList", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.TrimList", span=""];
m2_162 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", span="185-185"];
m2_163 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="RedisWriteOnlyTransaction.cs", label="_transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                RedisStorage.Prefix + key, value))", span="187-188"];
m2_164 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", span="185-185"];
m2_155 [cluster="Unk.RemoveItemFromSortedSet", file="RedisWriteOnlyTransaction.cs", label="Entry Unk.RemoveItemFromSortedSet", span=""];
m2_0 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RedisWriteOnlyTransaction.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", span="29-29"];
m2_1 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RedisWriteOnlyTransaction.cs", label="transaction == null", span="31-31"];
m2_3 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RedisWriteOnlyTransaction.cs", label="_transaction = transaction", span="33-33"];
m2_2 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RedisWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''transaction'');", span="31-31"];
m2_4 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RedisWriteOnlyTransaction.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", span="29-29"];
m2_194 [file="RedisWriteOnlyTransaction.cs", label="HangFire.Redis.RedisWriteOnlyTransaction", span=""];
m2_195 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_196 [file="RedisWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m2_197 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_198 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_199 [file="RedisWriteOnlyTransaction.cs", label="HangFire.States.State", span=""];
m2_200 [file="RedisWriteOnlyTransaction.cs", label=storedData, span=""];
m2_201 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_202 [file="RedisWriteOnlyTransaction.cs", label=storedData, span=""];
m2_203 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_204 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_205 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_206 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_207 [file="RedisWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m2_208 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_209 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_210 [file="RedisWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m2_211 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_212 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_213 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_214 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_215 [file="RedisWriteOnlyTransaction.cs", label=double, span=""];
m2_216 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_217 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_218 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_219 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_220 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_221 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_222 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_223 [file="RedisWriteOnlyTransaction.cs", label=int, span=""];
m2_224 [file="RedisWriteOnlyTransaction.cs", label=int, span=""];
m2_225 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_226 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_227 [file="RedisWriteOnlyTransaction.cs", label=string, span=""];
m2_228 [file="RedisWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m3_75 [cluster="Hangfire.Server.BackgroundJobPerformer.BackgroundJobPerformer(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.Server.BackgroundJobPerformer.BackgroundJobPerformer(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator)", span="39-39"];
m3_36 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerObjectsInstaller.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_38 [cluster="System.Collections.Generic.List<T>.List()", file="SqlServerObjectsInstaller.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m3_57 [cluster="Hangfire.BackgroundJobServer.Dispose()", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobServer.Dispose()", span="140-140"];
m3_58 [cluster="Hangfire.BackgroundJobServer.Dispose()", file="SqlServerObjectsInstaller.cs", label="_processingServer.Dispose()", span="142-142"];
m3_59 [cluster="Hangfire.BackgroundJobServer.Dispose()", file="SqlServerObjectsInstaller.cs", label="Logger.Info(''Hangfire Server stopped.'')", span="143-143"];
m3_60 [cluster="Hangfire.BackgroundJobServer.Dispose()", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobServer.Dispose()", span="140-140"];
m3_4 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", span="60-60"];
m3_5 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", span="60-60"];
m3_0 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer()", span="40-40"];
m3_1 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer()", span="40-40"];
m3_45 [cluster="Unk.Join", file="SqlServerObjectsInstaller.cs", label="Entry Unk.Join", span=""];
m3_61 [cluster="Hangfire.Server.BackgroundProcessingServer.Dispose()", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.Server.BackgroundProcessingServer.Dispose()", span="122-122"];
m3_84 [cluster="Hangfire.BackgroundJobServer.Start()", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobServer.Start()", span="185-185"];
m3_85 [cluster="Hangfire.BackgroundJobServer.Start()", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobServer.Start()", span="185-185"];
m3_39 [cluster="Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", span="146-146"];
m3_62 [cluster="Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="var processes = new List<IBackgroundProcess>()", span="153-153"];
m3_63 [cluster="Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="factory = factory ?? new BackgroundJobFactory(filterProvider)", span="155-155"];
m3_64 [cluster="Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="performer = performer ?? new BackgroundJobPerformer(filterProvider, activator)", span="156-156"];
m3_65 [cluster="Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="stateChanger = stateChanger ?? new BackgroundJobStateChanger(filterProvider)", span="157-157"];
m3_68 [cluster="Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="processes.Add(new Worker(_options.Queues, performer, stateChanger))", span="161-161"];
m3_70 [cluster="Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="processes.Add(new DelayedJobScheduler(_options.SchedulePollingInterval, stateChanger))", span="164-164"];
m3_71 [cluster="Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="processes.Add(new RecurringJobScheduler(factory))", span="165-165"];
m3_72 [cluster="Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="return processes;", span="167-167"];
m3_66 [cluster="Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="var i = 0", span="159-159"];
m3_67 [cluster="Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="i < _options.WorkerCount", span="159-159"];
m3_69 [cluster="Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="i++", span="159-159"];
m3_73 [cluster="Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobServer.GetRequiredProcesses(Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", span="146-146"];
m3_10 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", span="88-88"];
m3_11 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="storage == null", span="98-98"];
m3_12 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(nameof(storage));", span="98-98"];
m3_13 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="options == null", span="99-99"];
m3_14 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(nameof(options));", span="99-99"];
m3_15 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="additionalProcesses == null", span="100-100"];
m3_16 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(nameof(additionalProcesses));", span="100-100"];
m3_17 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="filterProvider == null", span="101-101"];
m3_18 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(nameof(filterProvider));", span="101-101"];
m3_19 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="activator == null", span="102-102"];
m3_20 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="throw new ArgumentNullException(nameof(activator));", span="102-102"];
m3_21 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="_options = options", span="104-104"];
m3_23 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="processes.AddRange(GetRequiredProcesses(filterProvider, activator, factory, performer, stateChanger))", span="107-107"];
m3_24 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="processes.AddRange(additionalProcesses)", span="108-108"];
m3_25 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="var properties = new Dictionary<string, object>\r\n            {\r\n                { ''Queues'', options.Queues },\r\n                { ''WorkerCount'', options.WorkerCount }\r\n            }", span="110-114"];
m3_27 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Logger.Info($''Using job storage: '{storage}''')", span="117-117"];
m3_28 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="storage.WriteOptionsToLog(Logger)", span="119-119"];
m3_30 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Logger.Info($''    Worker count: {options.WorkerCount}'')", span="122-122"];
m3_31 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Logger.Info($''    Listening queues: {String.Join('', '', options.Queues.Select(x => ''''' + x + '''''))}'')", span="123-123"];
m3_32 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Logger.Info($''    Shutdown timeout: {options.ShutdownTimeout}'')", span="124-124"];
m3_33 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Logger.Info($''    Schedule polling interval: {options.SchedulePollingInterval}'')", span="125-125"];
m3_34 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="_processingServer = new BackgroundProcessingServer(\r\n                storage, \r\n                processes, \r\n                properties, \r\n                GetProcessingServerOptions())", span="127-131"];
m3_22 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="var processes = new List<IBackgroundProcess>()", span="106-106"];
m3_26 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Logger.Info(''Starting Hangfire Server'')", span="116-116"];
m3_29 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Logger.Info(''Using the following options for Hangfire Server:'')", span="121-121"];
m3_35 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, Hangfire.Common.IJobFilterProvider, Hangfire.JobActivator, Hangfire.Client.IBackgroundJobFactory, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", span="88-88"];
m3_37 [cluster="Unk.nameof", file="SqlServerObjectsInstaller.cs", label="Entry Unk.nameof", span=""];
m3_43 [cluster="Hangfire.JobStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.JobStorage.WriteOptionsToLog(Hangfire.Logging.ILog)", span="70-70"];
m3_80 [cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", span="90-90"];
m3_41 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerObjectsInstaller.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m3_76 [cluster="Hangfire.States.BackgroundJobStateChanger.BackgroundJobStateChanger(Hangfire.Common.IJobFilterProvider)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.States.BackgroundJobStateChanger.BackgroundJobStateChanger(Hangfire.Common.IJobFilterProvider)", span="36-36"];
m3_47 [cluster="Hangfire.BackgroundJobServer.GetProcessingServerOptions()", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobServer.GetProcessingServerOptions()", span="170-170"];
m3_81 [cluster="Hangfire.BackgroundJobServer.GetProcessingServerOptions()", file="SqlServerObjectsInstaller.cs", label="return new BackgroundProcessingServerOptions\r\n            {\r\n                ShutdownTimeout = _options.ShutdownTimeout,\r\n                HeartbeatInterval = _options.HeartbeatInterval,\r\n#pragma warning disable 618\r\n                ServerCheckInterval = _options.ServerWatchdogOptions?.CheckInterval ?? _options.ServerCheckInterval,\r\n                ServerTimeout = _options.ServerWatchdogOptions?.ServerTimeout ?? _options.ServerTimeout,\r\n                ServerName = _options.ServerName\r\n#pragma warning restore 618\r\n            };", span="172-181"];
m3_82 [cluster="Hangfire.BackgroundJobServer.GetProcessingServerOptions()", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobServer.GetProcessingServerOptions()", span="170-170"];
m3_86 [cluster="Hangfire.BackgroundJobServer.Stop()", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobServer.Stop()", span="190-190"];
m3_87 [cluster="Hangfire.BackgroundJobServer.Stop()", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobServer.Stop()", span="190-190"];
m3_74 [cluster="Hangfire.Client.BackgroundJobFactory.BackgroundJobFactory(Hangfire.Common.IJobFilterProvider)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.Client.BackgroundJobFactory.BackgroundJobFactory(Hangfire.Common.IJobFilterProvider)", span="35-35"];
m3_48 [cluster="lambda expression", file="SqlServerObjectsInstaller.cs", label="Entry lambda expression", span="123-123"];
m3_49 [cluster="lambda expression", file="SqlServerObjectsInstaller.cs", label="''''' + x + '''''", span="123-123"];
m3_50 [cluster="lambda expression", file="SqlServerObjectsInstaller.cs", label="Exit lambda expression", span="123-123"];
m3_51 [cluster="Hangfire.BackgroundJobServer.SendStop()", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobServer.SendStop()", span="134-134"];
m3_52 [cluster="Hangfire.BackgroundJobServer.SendStop()", file="SqlServerObjectsInstaller.cs", label="Logger.Debug(''Hangfire Server is stopping...'')", span="136-136"];
m3_53 [cluster="Hangfire.BackgroundJobServer.SendStop()", file="SqlServerObjectsInstaller.cs", label="_processingServer.SendStop()", span="137-137"];
m3_54 [cluster="Hangfire.BackgroundJobServer.SendStop()", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobServer.SendStop()", span="134-134"];
m3_40 [cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", file="SqlServerObjectsInstaller.cs", label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0"];
m3_55 [cluster="Hangfire.Logging.ILog.Debug(string)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.Logging.ILog.Debug(string)", span="117-117"];
m3_42 [cluster="Hangfire.Logging.ILog.Info(string)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.Logging.ILog.Info(string)", span="205-205"];
m3_44 [cluster="Unk.Select", file="SqlServerObjectsInstaller.cs", label="Entry Unk.Select", span=""];
m3_8 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", span="76-76"];
m3_9 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>)", span="76-76"];
m3_77 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", span="62-62"];
m3_83 [cluster="Hangfire.Server.BackgroundProcessingServerOptions.BackgroundProcessingServerOptions()", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.Server.BackgroundProcessingServerOptions.BackgroundProcessingServerOptions()", span="22-22"];
m3_78 [cluster="System.Collections.Generic.List<T>.Add(T)", file="SqlServerObjectsInstaller.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m3_56 [cluster="Hangfire.Server.BackgroundProcessingServer.SendStop()", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.Server.BackgroundProcessingServer.SendStop()", span="117-117"];
m3_6 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", span="71-71"];
m3_7 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", span="71-71"];
m3_79 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="105-105"];
m3_2 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.JobStorage)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.JobStorage)", span="50-50"];
m3_3 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.JobStorage)", file="SqlServerObjectsInstaller.cs", label="Exit Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.JobStorage)", span="50-50"];
m3_46 [cluster="Hangfire.Server.BackgroundProcessingServer.BackgroundProcessingServer(Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, System.Collections.Generic.IDictionary<string, object>, Hangfire.Server.BackgroundProcessingServerOptions)", file="SqlServerObjectsInstaller.cs", label="Entry Hangfire.Server.BackgroundProcessingServer.BackgroundProcessingServer(Hangfire.JobStorage, System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>, System.Collections.Generic.IDictionary<string, object>, Hangfire.Server.BackgroundProcessingServerOptions)", span="91-91"];
m3_88 [file="SqlServerObjectsInstaller.cs", label="Hangfire.BackgroundJobServer", span=""];
n52 -> n28  [color=darkseagreen4, key=1, label="HangFire.Server.Components.SchedulePoller", style=dashed];
n52 -> n33  [color=darkseagreen4, key=1, label="HangFire.Server.Components.SchedulePoller", style=dashed];
n52 -> n47  [color=darkseagreen4, key=1, label="HangFire.Server.Components.SchedulePoller", style=dashed];
n7 -> n12  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n10 -> n12  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
n24 -> n29  [color=darkseagreen4, key=1, label=enqueued, style=dashed];
n24 -> n30  [color=darkseagreen4, key=1, label=enqueued, style=dashed];
n24 -> n31  [color=darkseagreen4, key=1, label=enqueued, style=dashed];
n29 -> n29  [color=darkseagreen4, key=1, label=enqueued, style=dashed];
n29 -> n30  [color=darkseagreen4, key=1, label=enqueued, style=dashed];
n29 -> n31  [color=darkseagreen4, key=1, label=enqueued, style=dashed];
n27 -> n43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n46 -> n48  [color=darkseagreen4, key=1, label="System.Threading.Thread", style=dashed];
m0_64 -> m0_69  [color=darkseagreen4, key=1, label=connection, style=dashed];
m0_8 -> m0_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_30 -> m0_34  [color=darkseagreen4, key=1, label=connection, style=dashed];
m0_31 -> m0_34  [color=darkseagreen4, key=1, label=entryId, style=dashed];
m0_16 -> m0_20  [color=darkseagreen4, key=1, label=connection, style=dashed];
m0_17 -> m0_20  [color=darkseagreen4, key=1, label=entryId, style=dashed];
m0_38 -> m0_42  [color=darkseagreen4, key=1, label=connection, style=dashed];
m0_39 -> m0_42  [color=darkseagreen4, key=1, label=entryId, style=dashed];
m0_45 -> m0_50  [color=darkseagreen4, key=1, label=connection, style=dashed];
m0_80 -> m0_85  [color=darkseagreen4, key=1, label=connection, style=dashed];
m0_72 -> m0_77  [color=darkseagreen4, key=1, label=connection, style=dashed];
m0_108 -> m0_19  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m0_108 -> m0_20  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m0_108 -> m0_33  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m0_108 -> m0_34  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m0_108 -> m0_41  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m0_108 -> m0_42  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m0_108 -> m0_49  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m0_108 -> m0_68  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m0_108 -> m0_76  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m0_108 -> m0_84  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m0_108 -> m0_106  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m2_128 -> m2_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_126 -> m2_131  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_126 -> m2_128  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_126 -> m2_134  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_127 -> m2_130  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_156 -> m2_160  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_157 -> m2_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_111 -> m2_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_109 -> m2_114  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_109 -> m2_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_109 -> m2_117  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_110 -> m2_113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_169 -> m2_173  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_170 -> m2_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_55 -> m2_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_53 -> m2_68  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_53 -> m2_55  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_53 -> m2_72  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_53 -> m2_57  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m2_53 -> m2_58  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m2_53 -> m2_59  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m2_53 -> m2_60  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_53 -> m2_76  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_53 -> m2_61  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_54 -> m2_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_56 -> m2_59  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_56 -> m2_60  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_56 -> m2_76  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_60 -> m2_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_38 -> m2_44  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_38 -> m2_40  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_38 -> m2_48  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_38 -> m2_41  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_38 -> m2_51  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_39 -> m2_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_40 -> m2_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_41 -> m2_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_119 -> m2_123  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_120 -> m2_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_136 -> m2_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_137 -> m2_139  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_149 -> m2_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_150 -> m2_152  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_12 -> m2_15  [color=darkseagreen4, key=1, label=replayCount, style=dashed];
m2_13 -> m2_15  [color=darkseagreen4, key=1, label=maxReplayCount, style=dashed];
m2_15 -> m2_15  [color=darkseagreen4, key=1, label=replayCount, style=dashed];
m2_143 -> m2_147  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_144 -> m2_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_102 -> m2_106  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_103 -> m2_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_24 -> m2_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_21 -> m2_28  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_21 -> m2_23  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_21 -> m2_33  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_21 -> m2_24  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_21 -> m2_36  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_22 -> m2_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_23 -> m2_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_91 -> m2_96  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_91 -> m2_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_91 -> m2_100  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_92 -> m2_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_93 -> m2_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_66 -> m2_80  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m2_66 -> m2_81  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m2_66 -> m2_83  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_66 -> m2_87  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_79 -> m2_81  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_79 -> m2_82  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_79 -> m2_83  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_79 -> m2_87  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_83 -> m2_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_162 -> m2_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_163 -> m2_165  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_194 -> m2_7  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_11  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_14  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_22  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_23  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_24  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_39  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_40  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_41  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_54  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_55  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_60  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_61  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_83  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_92  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_93  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_103  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_110  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_111  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_120  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_127  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_128  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_137  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_144  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_150  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_157  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_163  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_194 -> m2_170  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m2_195 -> m2_28  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_195 -> m2_33  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_195 -> m2_36  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_196 -> m2_28  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_196 -> m2_33  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_196 -> m2_36  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_197 -> m2_44  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_197 -> m2_48  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_197 -> m2_51  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_198 -> m2_68  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_198 -> m2_72  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_198 -> m2_76  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_199 -> m2_68  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m2_200 -> m2_76  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_201 -> m2_87  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_202 -> m2_87  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_203 -> m2_96  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_203 -> m2_100  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_204 -> m2_100  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_205 -> m2_106  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_206 -> m2_114  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_206 -> m2_117  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_207 -> m2_117  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_208 -> m2_123  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_209 -> m2_131  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_209 -> m2_134  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_210 -> m2_134  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_211 -> m2_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_212 -> m2_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_213 -> m2_147  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_214 -> m2_147  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_215 -> m2_147  [color=darkseagreen4, key=1, label=double, style=dashed];
m2_216 -> m2_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_217 -> m2_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_218 -> m2_160  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_219 -> m2_160  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_220 -> m2_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_221 -> m2_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_222 -> m2_173  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_223 -> m2_173  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_224 -> m2_173  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_62 -> m3_68  [color=darkseagreen4, key=1, label=processes, style=dashed];
m3_62 -> m3_70  [color=darkseagreen4, key=1, label=processes, style=dashed];
m3_62 -> m3_71  [color=darkseagreen4, key=1, label=processes, style=dashed];
m3_62 -> m3_72  [color=darkseagreen4, key=1, label=processes, style=dashed];
m3_63 -> m3_71  [color=darkseagreen4, key=1, label="Hangfire.Client.IBackgroundJobFactory", style=dashed];
m3_64 -> m3_68  [color=darkseagreen4, key=1, label="Hangfire.Server.IBackgroundJobPerformer", style=dashed];
m3_65 -> m3_68  [color=darkseagreen4, key=1, label="Hangfire.States.IBackgroundJobStateChanger", style=dashed];
m3_65 -> m3_70  [color=darkseagreen4, key=1, label="Hangfire.States.IBackgroundJobStateChanger", style=dashed];
m3_66 -> m3_69  [color=darkseagreen4, key=1, label=i, style=dashed];
m3_69 -> m3_69  [color=darkseagreen4, key=1, label=i, style=dashed];
m3_10 -> m3_12  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m3_10 -> m3_13  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_10 -> m3_14  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_10 -> m3_15  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>", style=dashed];
m3_10 -> m3_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>", style=dashed];
m3_10 -> m3_17  [color=darkseagreen4, key=1, label="Hangfire.Common.IJobFilterProvider", style=dashed];
m3_10 -> m3_18  [color=darkseagreen4, key=1, label="Hangfire.Common.IJobFilterProvider", style=dashed];
m3_10 -> m3_19  [color=darkseagreen4, key=1, label="Hangfire.JobActivator", style=dashed];
m3_10 -> m3_20  [color=darkseagreen4, key=1, label="Hangfire.JobActivator", style=dashed];
m3_10 -> m3_23  [color=darkseagreen4, key=1, label="Hangfire.Common.IJobFilterProvider", style=dashed];
m3_10 -> m3_24  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<Hangfire.Server.IBackgroundProcess>", style=dashed];
m3_10 -> m3_27  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m3_10 -> m3_28  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m3_10 -> m3_30  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_10 -> m3_31  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_10 -> m3_32  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_10 -> m3_33  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_31 -> m3_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_22 -> m3_24  [color=darkseagreen4, key=1, label=processes, style=dashed];
m3_88 -> m3_23  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServer", style=dashed];
m3_88 -> m3_53  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServer", style=dashed];
m3_88 -> m3_58  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServer", style=dashed];
m3_88 -> m3_67  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServer", style=dashed];
m3_88 -> m3_68  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServer", style=dashed];
m3_88 -> m3_70  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServer", style=dashed];
}
