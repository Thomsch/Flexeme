digraph  {
n413 [label="HangFire.SqlServer.SqlServerMonitoringApi", span=""];
n414 [label=string, span=""];
n415 [label=string, span=""];
n416 [label=int, span=""];
n417 [label=int, span=""];
n418 [label=int, span=""];
n419 [label=int, span=""];
n420 [label=int, span=""];
n421 [label=int, span=""];
n422 [label=int, span=""];
n423 [label=int, span=""];
n424 [label=int, span=""];
n425 [label=int, span=""];
n426 [label=SqlConnection, span=""];
n427 [label=string, span=""];
n428 [label=int, span=""];
n429 [label=int, span=""];
n430 [label=string, span=""];
n431 [label=int, span=""];
n432 [label=int, span=""];
n433 [label=string, span=""];
n434 [label=countByStates, span=""];
n435 [label=SqlConnection, span=""];
n436 [label=string, span=""];
n437 [label=string, span=""];
n0 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)"];
n1 [label="_connectionString = connectionString", span="39-39", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)"];
n2 [label="_queueProviders = queueProviders", span="40-40", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)"];
n3 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)"];
n4 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="43-43", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()"];
n5 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ScheduledState.StateName));", span="45-46", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", color=red, community=0];
n6 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="43-43", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()"];
n7 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="447-447", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)"];
n8 [label="Entry lambda expression", span="45-46", cluster="lambda expression"];
n9 [label="GetNumberOfJobsByStateName(connection, ScheduledState.StateName)", span="46-46", cluster="lambda expression"];
n10 [label="Exit lambda expression", span="45-46", cluster="lambda expression"];
n11 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", span="490-490", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)"];
n12 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="49-49", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)"];
n13 [label="return UseConnection(connection =>\r\n            {\r\n                var queueApi = GetQueueApi(connection, queue);\r\n                var counters = queueApi.GetEnqueuedAndFetchedCount(queue);\r\n\r\n                return counters.EnqueuedCount ?? 0;\r\n            });", span="51-57", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", color=red, community=0];
n16 [label="var queueApi = GetQueueApi(connection, queue)", span="53-53", cluster="lambda expression", color=red, community=0];
n17 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="54-54", cluster="lambda expression"];
n14 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="49-49", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)"];
n15 [label="Entry lambda expression", span="51-57", cluster="lambda expression"];
n20 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)", span="437-437", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)"];
n18 [label="return counters.EnqueuedCount ?? 0;", span="56-56", cluster="lambda expression", color=red, community=0];
n21 [label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="25-25", cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)"];
n19 [label="Exit lambda expression", span="51-57", cluster="lambda expression"];
n22 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="60-60", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)"];
n23 [label="return UseConnection(connection =>\r\n            {\r\n                var queueApi = GetQueueApi(connection, queue);\r\n                var counters = queueApi.GetEnqueuedAndFetchedCount(queue);\r\n\r\n                return counters.FetchedCount ?? 0;\r\n            });", span="62-68", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", color=red, community=0];
n26 [label="var queueApi = GetQueueApi(connection, queue)", span="64-64", cluster="lambda expression"];
n27 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="65-65", cluster="lambda expression"];
n24 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="60-60", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)"];
n25 [label="Entry lambda expression", span="62-68", cluster="lambda expression"];
n28 [label="return counters.FetchedCount ?? 0;", span="67-67", cluster="lambda expression"];
n29 [label="Exit lambda expression", span="62-68", cluster="lambda expression"];
n30 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="71-71", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()"];
n31 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, FailedState.StateName));", span="73-74", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", color=red, community=0];
n32 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="71-71", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()"];
n33 [label="Entry lambda expression", span="73-74", cluster="lambda expression"];
n34 [label="GetNumberOfJobsByStateName(connection, FailedState.StateName)", span="74-74", cluster="lambda expression"];
n35 [label="Exit lambda expression", span="73-74", cluster="lambda expression"];
n36 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="77-77", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()"];
n37 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="79-80", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()"];
n38 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="77-77", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()"];
n39 [label="Entry lambda expression", span="79-80", cluster="lambda expression"];
n40 [label="GetNumberOfJobsByStateName(connection, ProcessingState.StateName)", span="80-80", cluster="lambda expression"];
n41 [label="Exit lambda expression", span="79-80", cluster="lambda expression"];
n42 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="83-83", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)"];
n43 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }));", span="85-94", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", color=red, community=0];
n46 [label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                })", span="85-94", cluster="lambda expression", color=red, community=0];
n44 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="83-83", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)"];
n45 [label="Entry lambda expression", span="85-94", cluster="lambda expression"];
n47 [label="Exit lambda expression", span="85-94", cluster="lambda expression"];
n48 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="518-518", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n49 [label="Entry lambda expression", span="89-94", cluster="lambda expression"];
n50 [label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }", span="89-94", cluster="lambda expression", color=red, community=0];
n51 [label="Exit lambda expression", span="89-94", cluster="lambda expression"];
n52 [label="Entry HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()"];
n53 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)"];
n54 [label="Entry HangFire.Common.JobHelper.DeserializeDateTime(string)", span="55-55", cluster="HangFire.Common.JobHelper.DeserializeDateTime(string)"];
n55 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="97-97", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)"];
n56 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }));", span="99-108", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", color=red, community=0];
n59 [label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                })", span="99-108", cluster="lambda expression", color=red, community=0];
n57 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="97-97", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)"];
n58 [label="Entry lambda expression", span="99-108", cluster="lambda expression"];
n60 [label="Exit lambda expression", span="99-108", cluster="lambda expression"];
n61 [label="Entry lambda expression", span="103-108", cluster="lambda expression"];
n62 [label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }", span="103-108", cluster="lambda expression"];
n63 [label="Exit lambda expression", span="103-108", cluster="lambda expression"];
n64 [label="Entry HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()"];
n65 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="111-111", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()"];
n66 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="113-114", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()"];
n67 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="111-111", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()"];
n68 [label="Entry lambda expression", span="113-114", cluster="lambda expression"];
n69 [label="GetTimelineStats(connection, ''succeeded'')", span="114-114", cluster="lambda expression"];
n70 [label="Exit lambda expression", span="113-114", cluster="lambda expression"];
n71 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="395-395", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n72 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="117-117", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()"];
n73 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="119-120", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()"];
n74 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="117-117", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()"];
n75 [label="Entry lambda expression", span="119-120", cluster="lambda expression"];
n76 [label="GetTimelineStats(connection, ''failed'')", span="120-120", cluster="lambda expression"];
n77 [label="Exit lambda expression", span="119-120", cluster="lambda expression"];
n78 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Servers()", span="123-123", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()"];
n79 [label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="125-147", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()"];
n80 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Servers()", span="123-123", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()"];
n81 [label="Entry Unk.>", span="", cluster="Unk.>"];
n82 [label="Entry lambda expression", span="125-147", cluster="lambda expression"];
n83 [label="var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList()", span="127-129", cluster="lambda expression"];
n84 [label="var result = new List<ServerDto>()", span="131-131", cluster="lambda expression"];
n90 [label="Entry Unk.ToList", span="", cluster="Unk.ToList"];
n85 [label=servers, span="133-133", cluster="lambda expression"];
n91 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n87 [label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="136-143", cluster="lambda expression"];
n88 [label="return result;", span="146-146", cluster="lambda expression"];
n86 [label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="135-135", cluster="lambda expression"];
n92 [label="Entry HangFire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21", cluster="HangFire.Storage.Monitoring.ServerDto.ServerDto()"];
n93 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
n89 [label="Exit lambda expression", span="125-147", cluster="lambda expression"];
n94 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="150-150", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)"];
n95 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }));", span="152-165", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)"];
n98 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                })", span="152-165", cluster="lambda expression"];
n96 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="150-150", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)"];
n97 [label="Entry lambda expression", span="152-165", cluster="lambda expression"];
n99 [label="Exit lambda expression", span="152-165", cluster="lambda expression"];
n100 [label="Entry lambda expression", span="157-165", cluster="lambda expression"];
n101 [label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }", span="157-165", cluster="lambda expression"];
n102 [label="Exit lambda expression", span="157-165", cluster="lambda expression"];
n103 [label="Entry HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()"];
n104 [label="Entry HangFire.Common.JobHelper.DeserializeNullableDateTime(string)", span="60-60", cluster="HangFire.Common.JobHelper.DeserializeNullableDateTime(string)"];
n105 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)"];
n106 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }));", span="170-182", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)"];
n109 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                })", span="170-182", cluster="lambda expression"];
n107 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)"];
n108 [label="Entry lambda expression", span="170-182", cluster="lambda expression"];
n110 [label="Exit lambda expression", span="170-182", cluster="lambda expression"];
n111 [label="Entry lambda expression", span="175-182", cluster="lambda expression"];
n112 [label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }", span="175-182", cluster="lambda expression"];
n113 [label="Exit lambda expression", span="175-182", cluster="lambda expression"];
n114 [label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()"];
n115 [label="Entry long.Parse(string)", span="0-0", cluster="long.Parse(string)"];
n116 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="185-185", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)"];
n117 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }));", span="187-196", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)"];
n120 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                })", span="187-196", cluster="lambda expression"];
n118 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="185-185", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)"];
n119 [label="Entry lambda expression", span="187-196", cluster="lambda expression"];
n121 [label="Exit lambda expression", span="187-196", cluster="lambda expression"];
n122 [label="Entry lambda expression", span="192-196", cluster="lambda expression"];
n123 [label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", span="192-196", cluster="lambda expression"];
n124 [label="Exit lambda expression", span="192-196", cluster="lambda expression"];
n125 [label="Entry HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7", cluster="HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()"];
n126 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="199-199", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()"];
n127 [label="return UseConnection<IList<QueueWithTopEnqueuedJobsDto>>(connection =>\r\n            {\r\n                var tuples = _queueProviders\r\n                    .Select(x => x.GetJobQueueMonitoringApi(connection))\r\n                    .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                    .OrderBy(x => x.Queue)\r\n                    .ToArray();\r\n\r\n                var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length);\r\n\r\n                foreach (var tuple in tuples)\r\n                {\r\n                    var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5);\r\n                    var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue);\r\n\r\n                    result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = tuple.Queue,\r\n                        Length = counters.EnqueuedCount ?? 0,\r\n                        Fetched = counters.FetchedCount,\r\n                        FirstJobs = EnqueuedJobs(connection, enqueuedJobIds)\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="201-226", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()"];
n128 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="199-199", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()"];
n129 [label="Entry lambda expression", span="201-226", cluster="lambda expression"];
n130 [label="var tuples = _queueProviders\r\n                    .Select(x => x.GetJobQueueMonitoringApi(connection))\r\n                    .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                    .OrderBy(x => x.Queue)\r\n                    .ToArray()", span="203-207", cluster="lambda expression"];
n148 [label="x.GetJobQueueMonitoringApi(connection)", span="204-204", cluster="lambda expression"];
n135 [label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = tuple.Queue,\r\n                        Length = counters.EnqueuedCount ?? 0,\r\n                        Fetched = counters.FetchedCount,\r\n                        FirstJobs = EnqueuedJobs(connection, enqueuedJobIds)\r\n                    })", span="216-222", cluster="lambda expression"];
n131 [label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="209-209", cluster="lambda expression"];
n138 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n139 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany"];
n140 [label="Entry Unk.OrderBy", span="", cluster="Unk.OrderBy"];
n141 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
n147 [label="Entry lambda expression", span="204-204", cluster="lambda expression"];
n151 [label="Entry lambda expression", span="205-205", cluster="lambda expression"];
n155 [label="Entry lambda expression", span="205-205", cluster="lambda expression"];
n158 [label="Entry lambda expression", span="206-206", cluster="lambda expression"];
n132 [label=tuples, span="211-211", cluster="lambda expression"];
n142 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr"];
n136 [label="return result;", span="225-225", cluster="lambda expression"];
n133 [label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="213-213", cluster="lambda expression"];
n134 [label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="214-214", cluster="lambda expression"];
n143 [label="Entry Unk.GetEnqueuedJobIds", span="", cluster="Unk.GetEnqueuedJobIds"];
n144 [label="Entry Unk.GetEnqueuedAndFetchedCount", span="", cluster="Unk.GetEnqueuedAndFetchedCount"];
n145 [label="Entry HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18", cluster="HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()"];
n146 [label="Entry Unk.EnqueuedJobs", span="", cluster="Unk.EnqueuedJobs"];
n137 [label="Exit lambda expression", span="201-226", cluster="lambda expression"];
n149 [label="Exit lambda expression", span="204-204", cluster="lambda expression"];
n150 [label="Entry Unk.GetJobQueueMonitoringApi", span="", cluster="Unk.GetJobQueueMonitoringApi"];
n152 [label="x.GetQueues()", span="205-205", cluster="lambda expression"];
n153 [label="Exit lambda expression", span="205-205", cluster="lambda expression"];
n154 [label="Entry Unk.GetQueues", span="", cluster="Unk.GetQueues"];
n156 [label="new { Monitoring = monitoring, Queue = queue }", span="205-205", cluster="lambda expression"];
n157 [label="Exit lambda expression", span="205-205", cluster="lambda expression"];
n159 [label="x.Queue", span="206-206", cluster="lambda expression"];
n160 [label="Exit lambda expression", span="206-206", cluster="lambda expression"];
n161 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="229-229", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)"];
n162 [label="return UseConnection(connection =>\r\n            {\r\n                var queueApi = GetQueueApi(connection, queue);\r\n                var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage);\r\n\r\n                return EnqueuedJobs(connection, enqueuedJobIds);\r\n            });", span="231-237", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)"];
n165 [label="var queueApi = GetQueueApi(connection, queue)", span="233-233", cluster="lambda expression"];
n166 [label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="234-234", cluster="lambda expression"];
n163 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="229-229", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)"];
n164 [label="Entry lambda expression", span="231-237", cluster="lambda expression"];
n167 [label="return EnqueuedJobs(connection, enqueuedJobIds);", span="236-236", cluster="lambda expression"];
n169 [label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="23-23", cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)"];
n168 [label="Exit lambda expression", span="231-237", cluster="lambda expression"];
n170 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="462-462", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n171 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="240-240", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)"];
n172 [label="return UseConnection(connection =>\r\n            {\r\n                var queueApi = GetQueueApi(connection, queue);\r\n                var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage);\r\n\r\n                return FetchedJobs(connection, fetchedJobIds);\r\n            });", span="242-248", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)"];
n175 [label="var queueApi = GetQueueApi(connection, queue)", span="244-244", cluster="lambda expression"];
n176 [label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="245-245", cluster="lambda expression"];
n173 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="240-240", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)"];
n174 [label="Entry lambda expression", span="242-248", cluster="lambda expression"];
n177 [label="return FetchedJobs(connection, fetchedJobIds);", span="247-247", cluster="lambda expression"];
n179 [label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="24-24", cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)"];
n178 [label="Exit lambda expression", span="242-248", cluster="lambda expression"];
n180 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="560-560", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n181 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="251-251", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()"];
n182 [label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="253-254", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()"];
n183 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="251-251", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()"];
n184 [label="Entry lambda expression", span="253-254", cluster="lambda expression"];
n185 [label="GetHourlyTimelineStats(connection, ''succeeded'')", span="254-254", cluster="lambda expression"];
n186 [label="Exit lambda expression", span="253-254", cluster="lambda expression"];
n187 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="356-356", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n188 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="257-257", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()"];
n189 [label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''failed''));", span="259-260", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()"];
n190 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="257-257", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()"];
n191 [label="Entry lambda expression", span="259-260", cluster="lambda expression"];
n192 [label="GetHourlyTimelineStats(connection, ''failed'')", span="260-260", cluster="lambda expression"];
n193 [label="Exit lambda expression", span="259-260", cluster="lambda expression"];
n194 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="263-263", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)"];
n195 [label="return UseConnection(connection =>\r\n            {\r\n\r\n                const string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="265-299", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)"];
n199 [label="var multi = connection.QueryMultiple(sql, new { id = jobId })", span="273-273", cluster="lambda expression"];
n196 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="263-263", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)"];
n197 [label="Entry lambda expression", span="265-299", cluster="lambda expression"];
n198 [label="string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc''", span="268-271", cluster="lambda expression"];
n200 [label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="275-275", cluster="lambda expression"];
n207 [label="Entry Unk.QueryMultiple", span="", cluster="Unk.QueryMultiple"];
n203 [label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="278-278", cluster="lambda expression"];
n204 [label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            })\r\n                            .ToList()", span="279-289", cluster="lambda expression"];
n201 [label="job == null", span="276-276", cluster="lambda expression"];
n208 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault"];
n205 [label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="291-297", cluster="lambda expression"];
n202 [label="return null;", span="276-276", cluster="lambda expression"];
n209 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary"];
n212 [label="Entry lambda expression", span="278-278", cluster="lambda expression"];
n215 [label="Entry lambda expression", span="278-278", cluster="lambda expression"];
n218 [label="Entry lambda expression", span="282-288", cluster="lambda expression"];
n206 [label="Exit lambda expression", span="265-299", cluster="lambda expression"];
n210 [label="Entry HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22", cluster="HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()"];
n211 [label="Entry Unk.DeserializeJob", span="", cluster="Unk.DeserializeJob"];
n213 [label="x.Name", span="278-278", cluster="lambda expression"];
n214 [label="Exit lambda expression", span="278-278", cluster="lambda expression"];
n216 [label="x.Value", span="278-278", cluster="lambda expression"];
n217 [label="Exit lambda expression", span="278-278", cluster="lambda expression"];
n219 [label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            }", span="282-288", cluster="lambda expression"];
n220 [label="Exit lambda expression", span="282-288", cluster="lambda expression"];
n221 [label="Entry HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21", cluster="HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()"];
n222 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="302-302", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()"];
n223 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", span="304-305", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()"];
n224 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="302-302", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()"];
n225 [label="Entry lambda expression", span="304-305", cluster="lambda expression"];
n226 [label="GetNumberOfJobsByStateName(connection, SucceededState.StateName)", span="305-305", cluster="lambda expression"];
n227 [label="Exit lambda expression", span="304-305", cluster="lambda expression"];
n228 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="308-308", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()"];
n229 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, DeletedState.StateName));", span="310-311", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()"];
n230 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="308-308", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()"];
n231 [label="Entry lambda expression", span="310-311", cluster="lambda expression"];
n232 [label="GetNumberOfJobsByStateName(connection, DeletedState.StateName)", span="311-311", cluster="lambda expression"];
n233 [label="Exit lambda expression", span="310-311", cluster="lambda expression"];
n234 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="314-314", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n235 [label="return UseConnection(connection =>\r\n            {\r\n                const string sql = @''\r\nselect StateName as [State], count(id) as [Count] From HangFire.Job \r\ngroup by StateName\r\nhaving StateName is not null;\r\nselect count(Id) from HangFire.Server;\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:succeeded';\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:deleted';\r\nselect count(*) from HangFire.[Set] where [Key] = N'recurring-jobs';\r\n'';\r\n\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql))\r\n                {\r\n                    var countByStates = multi.Read().ToDictionary(x => x.State, x => x.Count);\r\n\r\n                    Func<string, int> getCountIfExists = name => countByStates.ContainsKey(name) ? countByStates[name] : 0;\r\n\r\n                    stats.Enqueued = getCountIfExists(EnqueuedState.StateName);\r\n                    stats.Failed = getCountIfExists(FailedState.StateName);\r\n                    stats.Processing = getCountIfExists(ProcessingState.StateName);\r\n                    stats.Scheduled = getCountIfExists(ScheduledState.StateName);\r\n\r\n                    stats.Servers = multi.Read<int>().Single();\r\n\r\n                    stats.Succeeded = multi.Read<int?>().SingleOrDefault() ?? 0;\r\n                    stats.Deleted = multi.Read<int?>().SingleOrDefault() ?? 0;\r\n\r\n                    stats.Recurring = multi.Read<int>().Single();\r\n                }\r\n\r\n                stats.Queues = _queueProviders\r\n                    .SelectMany(x => x.GetJobQueueMonitoringApi(connection).GetQueues())\r\n                    .Count();\r\n\r\n                return stats;\r\n            });", span="316-353", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n236 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="314-314", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n237 [label="Entry lambda expression", span="316-353", cluster="lambda expression"];
n238 [label="string sql = @''\r\nselect StateName as [State], count(id) as [Count] From HangFire.Job \r\ngroup by StateName\r\nhaving StateName is not null;\r\nselect count(Id) from HangFire.Server;\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:succeeded';\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:deleted';\r\nselect count(*) from HangFire.[Set] where [Key] = N'recurring-jobs';\r\n''", span="318-326", cluster="lambda expression"];
n240 [label="var multi = connection.QueryMultiple(sql)", span="329-329", cluster="lambda expression"];
n251 [label="stats.Queues = _queueProviders\r\n                    .SelectMany(x => x.GetJobQueueMonitoringApi(connection).GetQueues())\r\n                    .Count()", span="348-350", cluster="lambda expression"];
n271 [label="x.GetJobQueueMonitoringApi(connection).GetQueues()", span="349-349", cluster="lambda expression"];
n239 [label="var stats = new StatisticsDto()", span="328-328", cluster="lambda expression"];
n254 [label="Entry HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18", cluster="HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()"];
n243 [label="stats.Enqueued = getCountIfExists(EnqueuedState.StateName)", span="335-335", cluster="lambda expression"];
n244 [label="stats.Failed = getCountIfExists(FailedState.StateName)", span="336-336", cluster="lambda expression"];
n245 [label="stats.Processing = getCountIfExists(ProcessingState.StateName)", span="337-337", cluster="lambda expression"];
n246 [label="stats.Scheduled = getCountIfExists(ScheduledState.StateName)", span="338-338", cluster="lambda expression"];
n247 [label="stats.Servers = multi.Read<int>().Single()", span="340-340", cluster="lambda expression"];
n248 [label="stats.Succeeded = multi.Read<int?>().SingleOrDefault() ?? 0", span="342-342", cluster="lambda expression"];
n249 [label="stats.Deleted = multi.Read<int?>().SingleOrDefault() ?? 0", span="343-343", cluster="lambda expression"];
n250 [label="stats.Recurring = multi.Read<int>().Single()", span="345-345", cluster="lambda expression"];
n252 [label="return stats;", span="352-352", cluster="lambda expression"];
n241 [label="var countByStates = multi.Read().ToDictionary(x => x.State, x => x.Count)", span="331-331", cluster="lambda expression"];
n242 [label="Func<string, int> getCountIfExists = name => countByStates.ContainsKey(name) ? countByStates[name] : 0", span="333-333", cluster="lambda expression"];
n255 [label="Entry Unk.Read", span="", cluster="Unk.Read"];
n260 [label="Entry lambda expression", span="331-331", cluster="lambda expression"];
n263 [label="Entry lambda expression", span="331-331", cluster="lambda expression"];
n267 [label="countByStates.ContainsKey(name) ? countByStates[name] : 0", span="333-333", cluster="lambda expression"];
n256 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n257 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
n258 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)"];
n259 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()"];
n270 [label="Entry lambda expression", span="349-349", cluster="lambda expression"];
n253 [label="Exit lambda expression", span="316-353", cluster="lambda expression"];
n261 [label="x.State", span="331-331", cluster="lambda expression"];
n262 [label="Exit lambda expression", span="331-331", cluster="lambda expression"];
n264 [label="x.Count", span="331-331", cluster="lambda expression"];
n265 [label="Exit lambda expression", span="331-331", cluster="lambda expression"];
n266 [label="Entry lambda expression", span="333-333", cluster="lambda expression"];
n268 [label="Exit lambda expression", span="333-333", cluster="lambda expression"];
n269 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey"];
n272 [label="Exit lambda expression", span="349-349", cluster="lambda expression"];
n273 [label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22", cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()"];
n274 [label="var endDate = DateTime.UtcNow", span="360-360", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n281 [label="var keys = dates.Select(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="368-368", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n301 [label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="368-368", cluster="lambda expression"];
n283 [label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keys })\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="375-378", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n275 [label="var dates = new List<DateTime>()", span="361-361", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n278 [label="dates.Add(endDate)", span="364-364", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n279 [label="endDate = endDate.AddHours(-1)", span="365-365", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n276 [label="var i = 0", span="362-362", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n289 [label="i < dates.Count", span="386-386", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n291 [label="result.Add(dates[i], value)", span="389-389", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n277 [label="i < 24", span="362-362", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n280 [label="i++", span="362-362", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n295 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)"];
n282 [label="string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys''", span="370-373", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n300 [label="Entry lambda expression", span="368-368", cluster="lambda expression"];
n284 [label=keys, span="380-380", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n296 [label="Entry Unk.Query", span="", cluster="Unk.Query"];
n305 [label="Entry lambda expression", span="378-378", cluster="lambda expression"];
n308 [label="Entry lambda expression", span="378-378", cluster="lambda expression"];
n285 [label="!valuesMap.ContainsKey(key)", span="382-382", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n286 [label="valuesMap.Add(key, 0)", span="382-382", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n290 [label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="388-388", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n287 [label="var result = new Dictionary<DateTime, long>()", span="385-385", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n297 [label="Entry Unk.Add", span="", cluster="Unk.Add"];
n288 [label="var i = 0", span="386-386", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n298 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
n293 [label="return result;", span="392-392", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n292 [label="i++", span="386-386", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n299 [label="Entry Unk.ElementAt", span="", cluster="Unk.ElementAt"];
n294 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="356-356", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n302 [label="Exit lambda expression", span="368-368", cluster="lambda expression"];
n303 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)"];
n304 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)"];
n306 [label="(string)x.Key", span="378-378", cluster="lambda expression"];
n307 [label="Exit lambda expression", span="378-378", cluster="lambda expression"];
n309 [label="(long)x.Count", span="378-378", cluster="lambda expression"];
n310 [label="Exit lambda expression", span="378-378", cluster="lambda expression"];
n311 [label="var endDate = DateTime.UtcNow.Date", span="399-399", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n318 [label="var keys = stringDates.Select(x => String.Format(''stats:{0}:{1}'', type, x)).ToList()", span="410-410", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n337 [label="String.Format(''stats:{0}:{1}'', type, x)", span="410-410", cluster="lambda expression"];
n320 [label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keys })\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="417-420", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n312 [label="var startDate = endDate.AddDays(-7)", span="400-400", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n314 [label="startDate <= endDate", span="403-403", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n315 [label="dates.Add(endDate)", span="405-405", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n316 [label="endDate = endDate.AddDays(-1)", span="406-406", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n313 [label="var dates = new List<DateTime>()", span="401-401", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n332 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)"];
n317 [label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="409-409", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n328 [label="result.Add(dates[i], value)", span="431-431", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n333 [label="Entry lambda expression", span="409-409", cluster="lambda expression"];
n326 [label="i < stringDates.Count", span="428-428", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n319 [label="string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys''", span="412-415", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n336 [label="Entry lambda expression", span="410-410", cluster="lambda expression"];
n321 [label=keys, span="422-422", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n340 [label="Entry lambda expression", span="420-420", cluster="lambda expression"];
n343 [label="Entry lambda expression", span="420-420", cluster="lambda expression"];
n322 [label="!valuesMap.ContainsKey(key)", span="424-424", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n323 [label="valuesMap.Add(key, 0)", span="424-424", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n327 [label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="430-430", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n324 [label="var result = new Dictionary<DateTime, long>()", span="427-427", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n325 [label="var i = 0", span="428-428", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n330 [label="return result;", span="434-434", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n329 [label="i++", span="428-428", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n331 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="395-395", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n334 [label="x.ToString(''yyyy-MM-dd'')", span="409-409", cluster="lambda expression"];
n335 [label="Exit lambda expression", span="409-409", cluster="lambda expression"];
n338 [label="Exit lambda expression", span="410-410", cluster="lambda expression"];
n339 [label="Entry Unk.Format", span="", cluster="Unk.Format"];
n341 [label="(string)x.Key", span="420-420", cluster="lambda expression"];
n342 [label="Exit lambda expression", span="420-420", cluster="lambda expression"];
n344 [label="(long)x.Count", span="420-420", cluster="lambda expression"];
n345 [label="Exit lambda expression", span="420-420", cluster="lambda expression"];
n346 [label="var provider = _queueProviders.GetProvider(queueName)", span="441-441", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)"];
n347 [label="var monitoringApi = provider.GetJobQueueMonitoringApi(connection)", span="442-442", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)"];
n350 [label="Entry HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53", cluster="HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)"];
n348 [label="return monitoringApi;", span="444-444", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)"];
n349 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)", span="437-437", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)"];
n351 [label="var transaction = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted })", span="449-449", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)"];
n354 [label="var result = action(connection)", span="454-454", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)"];
n352 [label="var connection = new SqlConnection(_connectionString)", span="450-450", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)"];
n358 [label="Entry TransactionScope.cstr", span="", cluster="TransactionScope.cstr"];
n359 [label="Entry TransactionOptions.cstr", span="", cluster="TransactionOptions.cstr"];
n355 [label="transaction.Complete()", span="456-456", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)"];
n353 [label="connection.Open()", span="452-452", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)"];
n360 [label="Entry SqlConnection.cstr", span="", cluster="SqlConnection.cstr"];
n361 [label="Entry Unk.Open", span="", cluster="Unk.Open"];
n356 [label="return result;", span="458-458", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)"];
n362 [label="Entry Unk.Complete", span="", cluster="Unk.Complete"];
n357 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="447-447", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)"];
n363 [label="string enqueuedJobsSql = @''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is null''", span="466-471", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n364 [label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="473-476", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n365 [label="return DeserializeJobs(\r\n                jobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", span="478-487", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n366 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="462-462", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n367 [label="Entry Unk.DeserializeJobs", span="", cluster="Unk.DeserializeJobs"];
n368 [label="Entry lambda expression", span="480-487", cluster="lambda expression"];
n369 [label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", span="480-487", cluster="lambda expression"];
n370 [label="Exit lambda expression", span="480-487", cluster="lambda expression"];
n371 [label="Entry HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()"];
n372 [label="string sqlQuery = @''\r\nselect count(Id) from HangFire.Job where StateName = @state''", span="492-493", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)"];
n373 [label="var count = connection.Query<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName })\r\n                 .Single()", span="495-498", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)"];
n374 [label="return count;", span="500-500", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)"];
n375 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", span="490-490", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)"];
n376 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="503-503", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n377 [label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="505-505", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n378 [label="data.Arguments = arguments", span="506-506", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n383 [label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30", cluster="HangFire.Common.JobHelper.FromJson<T>(string)"];
n379 [label="return data.Deserialize();", span="510-510", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n380 [label=JobLoadException, span="512-512", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n381 [label="return null;", span="514-514", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n382 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="503-503", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n384 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()"];
n385 [label="string jobsSql = @''\r\nselect * from (\r\n  select j.*, s.Reason as StateReason, s.Data as StateData, row_number() over (order by j.Id desc) as row_num\r\n  from HangFire.Job j\r\n  left join HangFire.State s on j.StateId = s.Id\r\n  where j.StateName = @stateName\r\n) as j where j.row_num between @start and @end\r\n''", span="525-532", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n386 [label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                        .ToList()", span="534-537", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n387 [label="return DeserializeJobs(jobs, selector);", span="539-539", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n388 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="518-518", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n389 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="542-542", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n390 [label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="546-546", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n391 [label=jobs, span="548-548", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n393 [label="var dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="551-551", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n397 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)"];
n394 [label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="553-554", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n395 [label="return new JobList<TDto>(result);", span="557-557", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n392 [label="var stateData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="550-550", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n398 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)"];
n399 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)"];
n400 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()"];
n396 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="542-542", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n401 [label="Entry HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22", cluster="HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)"];
n402 [label="string fetchedJobsSql = @''\r\nselect j.*, jq.FetchedAt, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is not null''", span="564-569", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n403 [label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="571-574", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n404 [label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="576-576", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n405 [label=jobs, span="578-578", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n409 [label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span="", cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr"];
n406 [label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                        FetchedAt = job.FetchedAt\r\n                    }))", span="580-587", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n407 [label="return new JobList<FetchedJobDto>(result);", span="590-590", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n410 [label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span="", cluster="KeyValuePair<string, FetchedJobDto>.cstr"];
n411 [label="Entry Unk.ToString", span="", cluster="Unk.ToString"];
n412 [label="Entry HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21", cluster="HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()"];
n408 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="560-560", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
m0_12 [label="Entry Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="82-82", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m0_13 [label="logger.InfoFormat(''Using the following options for Hangfire Server:'')", span="84-84", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m0_14 [label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="85-85", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m0_15 [label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="86-86", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m0_16 [label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="87-87", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m0_17 [label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="88-88", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m0_18 [label="Exit Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="82-82", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m0_8 [label="Entry System.Math.Min(int, int)", span="0-0", cluster="System.Math.Min(int, int)", file="BackgroundJobServerOptions.cs"];
m0_19 [label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210", cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="BackgroundJobServerOptions.cs"];
m0_10 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="BackgroundJobServerOptions.cs"];
m0_21 [label="Entry Unk.Join", span="", cluster="Unk.Join", file="BackgroundJobServerOptions.cs"];
m0_0 [label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="33-33", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m0_1 [label="WorkerCount = Math.Min(Environment.ProcessorCount * 5, MaxDefaultWorkerCount)", span="35-35", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m0_2 [label="ServerName = Environment.GetEnvironmentVariable(''COMPUTERNAME'')", span="36-36", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", color=red, community=0, file="BackgroundJobServerOptions.cs"];
m0_3 [label="Queues = new[] { EnqueuedState.DefaultQueue }", span="37-37", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m0_4 [label="ShutdownTimeout = TimeSpan.FromSeconds(15)", span="38-38", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m0_5 [label="SchedulePollingInterval = TimeSpan.FromSeconds(15)", span="39-39", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m0_6 [label="ServerWatchdogOptions = new ServerWatchdogOptions()", span="41-41", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m0_7 [label="Exit Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="33-33", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m0_11 [label="Entry Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="22-22", cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="BackgroundJobServerOptions.cs"];
m0_22 [label="Entry lambda expression", span="86-86", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m0_23 [label="''''' + x + '''''", span="86-86", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m0_24 [label="Exit lambda expression", span="86-86", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m0_9 [label="Entry System.Environment.GetEnvironmentVariable(string)", span="0-0", cluster="System.Environment.GetEnvironmentVariable(string)", file="BackgroundJobServerOptions.cs"];
m0_25 [label="Hangfire.BackgroundJobServerOptions", span="", file="BackgroundJobServerOptions.cs"];
m1_35 [label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76", cluster="HangFire.Web.RazorPage.Write(object)", file="BackgroundJobServerOptionsFacts.cs"];
m1_30 [label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69", cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="BackgroundJobServerOptionsFacts.cs"];
m1_33 [label="Entry HangFire.Storage.IMonitoringApi.Servers()", span="25-25", cluster="HangFire.Storage.IMonitoringApi.Servers()", file="BackgroundJobServerOptionsFacts.cs"];
m1_0 [label="Entry HangFire.Web.Pages.ServersPage.Execute()", span="57-57", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_1 [label="WriteLiteral(''\n'')", span="61-61", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_2 [label="Layout = new LayoutPage { Title = ''Servers'' }", span="74-74", cluster="HangFire.Web.Pages.ServersPage.Execute()", color=red, community=0, file="BackgroundJobServerOptionsFacts.cs"];
m1_3 [label="var monitor = JobStorage.Current.GetMonitoringApi()", span="76-76", cluster="HangFire.Web.Pages.ServersPage.Execute()", color=red, community=0, file="BackgroundJobServerOptionsFacts.cs"];
m1_4 [label="IList<ServerDto> servers = monitor.Servers()", span="77-77", cluster="HangFire.Web.Pages.ServersPage.Execute()", color=red, community=0, file="BackgroundJobServerOptionsFacts.cs"];
m1_5 [label="WriteLiteral(''\n'')", span="83-83", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_6 [label="servers.Count == 0", span="88-88", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_9 [label=servers, span="123-123", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_7 [label="WriteLiteral(''    <div class=\''alert alert-warning\''>\n        There are no active servers. Backgr'' +\r\n''ound tasks will not be processed.\n    </div>\n'')", span="94-95", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_8 [label="WriteLiteral(@''    <table class=''''table''''>\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Workers</th>\n                <th>Queues</th>\n                <th>Started</th>\n                <th>Heartbeat</th>\n            </tr>\n        </thead>\n        <tbody>\n'')", span="107-118", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_10 [label="WriteLiteral(''                <tr>\n                    <td>'')", span="129-129", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_28 [label="WriteLiteral(''        </tbody>\n    </table>\n'')", span="230-230", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_11 [label="Write(server.Name.ToUpperInvariant())", span="134-134", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_13 [label="Write(server.WorkersCount)", span="144-144", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_15 [label="Write(HtmlHelper.Raw(String.Join('' '', server.Queues.Select(HtmlHelper.QueueLabel))))", span="154-154", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_17 [label="Write(JobHelper.ToTimestamp(server.StartedAt))", span="164-164", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_19 [label="Write(server.StartedAt)", span="174-174", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_21 [label="server.Heartbeat.HasValue", span="184-184", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_23 [label="Write(JobHelper.ToTimestamp(server.Heartbeat.Value))", span="195-195", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_25 [label="Write(server.Heartbeat)", span="205-205", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_12 [label="WriteLiteral(''</td>\n                    <td>'')", span="139-139", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_14 [label="WriteLiteral(''</td>\n                    <td>'')", span="149-149", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_16 [label="WriteLiteral(''</td>\n                    <td data-moment=\'''')", span="159-159", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_18 [label="WriteLiteral(''\''>'')", span="169-169", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_20 [label="WriteLiteral(''</td>\n                    <td>\n'')", span="179-179", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_22 [label="WriteLiteral(''                            <span data-moment=\'''')", span="190-190", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_27 [label="WriteLiteral(''                    </td>\n                </tr>\n'')", span="220-220", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_24 [label="WriteLiteral(''\''>\n                                '')", span="200-200", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_26 [label="WriteLiteral(''\n                            </span>\n'')", span="210-210", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_29 [label="Exit HangFire.Web.Pages.ServersPage.Execute()", span="57-57", cluster="HangFire.Web.Pages.ServersPage.Execute()", file="BackgroundJobServerOptionsFacts.cs"];
m1_38 [label="Entry HangFire.Web.HtmlHelper.Raw(string)", span="40-40", cluster="HangFire.Web.HtmlHelper.Raw(string)", file="BackgroundJobServerOptionsFacts.cs"];
m1_32 [label="Entry HangFire.JobStorage.GetMonitoringApi()", span="54-54", cluster="HangFire.JobStorage.GetMonitoringApi()", file="BackgroundJobServerOptionsFacts.cs"];
m1_40 [label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="39-39", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="BackgroundJobServerOptionsFacts.cs"];
m1_34 [label="Entry string.ToUpperInvariant()", span="0-0", cluster="string.ToUpperInvariant()", file="BackgroundJobServerOptionsFacts.cs"];
m1_31 [label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4", cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="BackgroundJobServerOptionsFacts.cs"];
m1_37 [label="Entry Unk.Join", span="", cluster="Unk.Join", file="BackgroundJobServerOptionsFacts.cs"];
m1_39 [label="Entry Unk.Write", span="", cluster="Unk.Write", file="BackgroundJobServerOptionsFacts.cs"];
m1_41 [label="HangFire.Web.Pages.ServersPage", span="", file="BackgroundJobServerOptionsFacts.cs"];
m4_0 [label="Entry HangFire.Tests.TestJob.Perform()", span="4-4", cluster="HangFire.Tests.TestJob.Perform()", file="BackgroundProcessExtensions.cs"];
m4_1 [label="Exit HangFire.Tests.TestJob.Perform()", span="4-4", cluster="HangFire.Tests.TestJob.Perform()", file="BackgroundProcessExtensions.cs"];
m6_11 [label="Entry Unk.EnqueueItemOnList", span="", cluster="Unk.EnqueueItemOnList", file="BootstrapperConfigurationExtensions.cs"];
m6_16 [label="Entry HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", span="41-41", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="BootstrapperConfigurationExtensions.cs"];
m6_17 [label="Given(String.Format(''the '{0}' job'', jobId))", span="43-43", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="BootstrapperConfigurationExtensions.cs"];
m6_18 [label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', queue),\r\n                jobId)", span="45-47", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="BootstrapperConfigurationExtensions.cs"];
m6_19 [label="Exit HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", span="41-41", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="BootstrapperConfigurationExtensions.cs"];
m6_2 [label="Entry HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", span="19-19", cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="BootstrapperConfigurationExtensions.cs"];
m6_3 [label="Given(String.Format(''a job in the '{0}' queue'', DefaultQueue))", span="21-21", cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="BootstrapperConfigurationExtensions.cs"];
m6_4 [label="Exit HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", span="19-19", cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="BootstrapperConfigurationExtensions.cs"];
m6_5 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="BootstrapperConfigurationExtensions.cs"];
m6_43 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="BootstrapperConfigurationExtensions.cs"];
m6_42 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount", file="BootstrapperConfigurationExtensions.cs"];
m6_33 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", span="74-74", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_34 [label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="76-77", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_35 [label="CollectionAssert.DoesNotContain(jobIds, JobSteps.DefaultJobId)", span="79-79", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_36 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", span="74-74", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_7 [label="Entry HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", span="25-25", cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_8 [label="Given(''a job'')", span="27-27", cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_9 [label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', queue),\r\n                JobSteps.DefaultJobId)", span="29-31", cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_10 [label="Exit HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", span="25-25", cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_30 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", span="68-68", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="BootstrapperConfigurationExtensions.cs"];
m6_31 [label="Then(String.Format(''the '{0}' queue does not contain the job'', DefaultQueue))", span="70-70", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="BootstrapperConfigurationExtensions.cs"];
m6_32 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", span="68-68", cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="BootstrapperConfigurationExtensions.cs"];
m6_24 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", span="58-58", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_25 [label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="60-61", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_26 [label="CollectionAssert.Contains(jobIds, JobSteps.DefaultJobId)", span="63-63", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_27 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", span="58-58", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_28 [label="Entry Unk.GetAllItemsFromList", span="", cluster="Unk.GetAllItemsFromList", file="BootstrapperConfigurationExtensions.cs"];
m6_29 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="BootstrapperConfigurationExtensions.cs"];
m6_23 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="BootstrapperConfigurationExtensions.cs"];
m6_6 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="BootstrapperConfigurationExtensions.cs"];
m6_37 [label="Entry Unk.DoesNotContain", span="", cluster="Unk.DoesNotContain", file="BootstrapperConfigurationExtensions.cs"];
m6_12 [label="Entry HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", span="35-35", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_13 [label="Given(String.Format(''the '{0}' job in the '{1}' queue'', jobId, DefaultQueue))", span="37-37", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_14 [label="Exit HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", span="35-35", cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_44 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="91-91", cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="BootstrapperConfigurationExtensions.cs"];
m6_45 [label="var actualLength = Redis.Client.GetListCount(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="93-94", cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="BootstrapperConfigurationExtensions.cs"];
m6_46 [label="Assert.AreEqual(length, actualLength)", span="95-95", cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="BootstrapperConfigurationExtensions.cs"];
m6_47 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="91-91", cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="BootstrapperConfigurationExtensions.cs"];
m6_20 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", span="51-51", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="BootstrapperConfigurationExtensions.cs"];
m6_21 [label="Then(String.Format(''the '{0}' queue contains the job'', DefaultQueue))", span="53-53", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="BootstrapperConfigurationExtensions.cs"];
m6_22 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", span="51-51", cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="BootstrapperConfigurationExtensions.cs"];
m6_38 [label="Entry HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", span="83-83", cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_39 [label="var length = Redis.Client.GetListCount(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="85-86", cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_40 [label="Assert.AreEqual(0, length)", span="87-87", cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_41 [label="Exit HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", span="83-83", cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="BootstrapperConfigurationExtensions.cs"];
m6_0 [label="Entry HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", span="14-14", cluster="HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", file="BootstrapperConfigurationExtensions.cs"];
m6_1 [label="Exit HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", span="14-14", cluster="HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", file="BootstrapperConfigurationExtensions.cs"];
m8_8 [label="Entry Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", span="65-65", cluster="Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", file="IBootstrapperConfiguration.cs"];
m8_9 [label="Exit Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", span="65-65", cluster="Hangfire.IBootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", file="IBootstrapperConfiguration.cs"];
m8_0 [label="Entry Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", span="35-35", cluster="Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", file="IBootstrapperConfiguration.cs"];
m8_1 [label="Exit Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", span="35-35", cluster="Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", file="IBootstrapperConfiguration.cs"];
m8_10 [label="Entry Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", span="73-73", cluster="Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", file="IBootstrapperConfiguration.cs"];
m8_11 [label="Exit Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", span="73-73", cluster="Hangfire.IBootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", file="IBootstrapperConfiguration.cs"];
m8_4 [label="Entry Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", span="50-50", cluster="Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", file="IBootstrapperConfiguration.cs"];
m8_5 [label="Exit Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", span="50-50", cluster="Hangfire.IBootstrapperConfiguration.UseDashboardPath(string)", file="IBootstrapperConfiguration.cs"];
m8_2 [label="Entry Hangfire.IBootstrapperConfiguration.UseFilter(object)", span="42-42", cluster="Hangfire.IBootstrapperConfiguration.UseFilter(object)", file="IBootstrapperConfiguration.cs"];
m8_3 [label="Exit Hangfire.IBootstrapperConfiguration.UseFilter(object)", span="42-42", cluster="Hangfire.IBootstrapperConfiguration.UseFilter(object)", file="IBootstrapperConfiguration.cs"];
m8_12 [label="Entry Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", span="81-81", cluster="Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="IBootstrapperConfiguration.cs"];
m8_13 [label="Exit Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", span="81-81", cluster="Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="IBootstrapperConfiguration.cs"];
m8_6 [label="Entry Hangfire.IBootstrapperConfiguration.UseAppPath(string)", span="57-57", cluster="Hangfire.IBootstrapperConfiguration.UseAppPath(string)", file="IBootstrapperConfiguration.cs"];
m8_7 [label="Exit Hangfire.IBootstrapperConfiguration.UseAppPath(string)", span="57-57", cluster="Hangfire.IBootstrapperConfiguration.UseAppPath(string)", file="IBootstrapperConfiguration.cs"];
m10_5 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="InfiniteLoopProcess.cs"];
m10_15 [label="Entry Hangfire.Server.InfiniteLoopProcess.ToString()", span="46-46", cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopProcess.cs"];
m10_16 [label="return InnerProcess.ToString();", span="48-48", cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopProcess.cs"];
m10_17 [label="Exit Hangfire.Server.InfiniteLoopProcess.ToString()", span="46-46", cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopProcess.cs"];
m10_0 [label="Entry Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.ILongRunningProcess)", span="24-24", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.ILongRunningProcess)", file="InfiniteLoopProcess.cs"];
m10_1 [label="innerProcess == null", span="26-26", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.ILongRunningProcess)", file="InfiniteLoopProcess.cs"];
m10_3 [label="InnerProcess = innerProcess", span="27-27", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.ILongRunningProcess)", file="InfiniteLoopProcess.cs"];
m10_2 [label="throw new ArgumentNullException(''innerProcess'');", span="26-26", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.ILongRunningProcess)", file="InfiniteLoopProcess.cs"];
m10_4 [label="Exit Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.ILongRunningProcess)", span="24-24", cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.ILongRunningProcess)", file="InfiniteLoopProcess.cs"];
m10_6 [label="Entry Hangfire.Server.InfiniteLoopProcess.Execute(System.Threading.CancellationToken)", span="32-32", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs"];
m10_7 [label="Exit Hangfire.Server.InfiniteLoopProcess.Execute(System.Threading.CancellationToken)", span="32-32", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(System.Threading.CancellationToken)", file="InfiniteLoopProcess.cs"];
m10_8 [label="Entry Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="37-37", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs"];
m10_9 [label=true, span="39-39", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs"];
m10_10 [label="context.CancellationToken.ThrowIfCancellationRequested()", span="41-41", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs"];
m10_11 [label="InnerProcess.Execute(context)", span="42-42", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs"];
m10_12 [label="Exit Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="37-37", cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs"];
m10_14 [label="Entry Hangfire.Server.ILongRunningProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="26-26", cluster="Hangfire.Server.ILongRunningProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs"];
m10_18 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="InfiniteLoopProcess.cs"];
m10_13 [label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0", cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="InfiniteLoopProcess.cs"];
m10_19 [label="Hangfire.Server.InfiniteLoopProcess", span="", file="InfiniteLoopProcess.cs"];
m12_34 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="RecurringJobSchedulerFacts.cs"];
m12_35 [label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55", cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="RecurringJobSchedulerFacts.cs"];
m12_25 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="RecurringJobSchedulerFacts.cs"];
m12_27 [label="Entry HangFire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55", cluster="HangFire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="RecurringJobSchedulerFacts.cs"];
m12_0 [label="Entry HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", span="9-9", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs"];
m12_1 [label="RecurringJobs = new List<RecurringJobDto>()", span="11-11", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs"];
m12_2 [label="var connection = JobStorage.Current.GetConnection()", span="13-13", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs"];
m12_3 [label="var ids = connection.GetAllItemsFromSet(''recurring-jobs'')", span="15-15", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs"];
m12_5 [label="var hash = connection.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', id))", span="19-19", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", color=red, community=0, file="RecurringJobSchedulerFacts.cs"];
m12_18 [label="var stateData = connection.GetStateData(dto.LastJobId)", span="49-49", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", color=red, community=0, file="RecurringJobSchedulerFacts.cs"];
m12_4 [label=ids, span="17-17", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs"];
m12_7 [label="RecurringJobs.Add(new RecurringJobDto { Id = id, Removed = true })", span="23-23", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m12_8 [label="var dto = new RecurringJobDto { Id = id }", span="27-27", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs"];
m12_6 [label="hash == null", span="21-21", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs"];
m12_9 [label="dto.Cron = hash[''Cron'']", span="28-28", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs"];
m12_10 [label="var invocationData = JobHelper.FromJson<InvocationData>(hash[''Job''])", span="32-32", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m12_14 [label="hash.ContainsKey(''NextExecution'')", span="40-40", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", color=red, community=0, file="RecurringJobSchedulerFacts.cs"];
m12_15 [label="dto.NextExecution = JobHelper.FromStringTimestamp(hash[''NextExecution''])", span="42-42", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", color=red, community=0, file="RecurringJobSchedulerFacts.cs"];
m12_16 [label="hash.ContainsKey(''LastJobId'')", span="45-45", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs"];
m12_17 [label="dto.LastJobId = hash[''LastJobId'']", span="47-47", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs"];
m12_21 [label="hash.ContainsKey(''LastExecution'')", span="56-56", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs", color=green, community=0];
m12_22 [label="dto.LastExecution = JobHelper.FromStringTimestamp(hash[''LastExecution''])", span="58-58", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs"];
m12_11 [label="dto.Job = invocationData.Deserialize()", span="33-33", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs", color=green, community=0];
m12_13 [label="dto.LoadException = ex", span="37-37", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs", color=green, community=0];
m12_20 [label="dto.LastJobState = stateData.Name", span="52-52", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs", color=green, community=0];
m12_23 [label="RecurringJobs.Add(dto)", span="61-61", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", color=red, community=0, file="RecurringJobSchedulerFacts.cs"];
m12_12 [label=JobLoadException, span="35-35", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs", color=green, community=0];
m12_19 [label="stateData != null", span="50-50", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs"];
m12_24 [label="Exit HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", span="9-9", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="RecurringJobSchedulerFacts.cs"];
m12_31 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="RecurringJobSchedulerFacts.cs"];
m12_32 [label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30", cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="RecurringJobSchedulerFacts.cs"];
m12_33 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()", file="RecurringJobSchedulerFacts.cs"];
m12_29 [label="Entry HangFire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64", cluster="HangFire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", file="RecurringJobSchedulerFacts.cs"];
m12_36 [label="Entry HangFire.Storage.IStorageConnection.GetStateData(string)", span="45-45", cluster="HangFire.Storage.IStorageConnection.GetStateData(string)", file="RecurringJobSchedulerFacts.cs"];
m12_30 [label="Entry HangFire.Web.Pages.RecurringJobsPage.RecurringJobDto.RecurringJobDto()", span="68-68", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobDto.RecurringJobDto()", file="RecurringJobSchedulerFacts.cs"];
m12_28 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="RecurringJobSchedulerFacts.cs"];
m12_26 [label="Entry HangFire.JobStorage.GetConnection()", span="56-56", cluster="HangFire.JobStorage.GetConnection()", file="RecurringJobSchedulerFacts.cs"];
m12_37 [label="HangFire.Web.Pages.RecurringJobsPage", span="", file="RecurringJobSchedulerFacts.cs"];
m13_35 [label="Entry ScheduleInstantFactory.cstr", span="", cluster="ScheduleInstantFactory.cstr", file="ScheduleInstantFactoryFacts.cs"];
m13_31 [label="Entry System.DateTime.AddMinutes(double)", span="0-0", cluster="System.DateTime.AddMinutes(double)", file="ScheduleInstantFactoryFacts.cs"];
m13_0 [label="Entry Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.ScheduleInstantFactoryFacts()", span="12-12", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.ScheduleInstantFactoryFacts()", file="ScheduleInstantFactoryFacts.cs"];
m13_1 [label="_crontabSchedule = CrontabSchedule.Parse(''* * * * *'')", span="14-14", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.ScheduleInstantFactoryFacts()", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m13_2 [label="_timeZone = TimeZoneInfo.Utc", span="15-15", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.ScheduleInstantFactoryFacts()", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m13_3 [label="Exit Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.ScheduleInstantFactoryFacts()", span="12-12", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.ScheduleInstantFactoryFacts()", file="ScheduleInstantFactoryFacts.cs"];
m13_32 [label="Entry Unk.True", span="", cluster="Unk.True", file="ScheduleInstantFactoryFacts.cs"];
m13_12 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="ScheduleInstantFactoryFacts.cs"];
m13_17 [label="Entry Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenTimeZoneIsNull()", span="30-30", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenTimeZoneIsNull()", file="ScheduleInstantFactoryFacts.cs"];
m13_18 [label="var factory = CreateFactory()", span="32-32", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenTimeZoneIsNull()", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m13_19 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => factory.GetInstant(_crontabSchedule, null))", span="34-35", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenTimeZoneIsNull()", color=red, community=1, file="ScheduleInstantFactoryFacts.cs"];
m13_20 [label="Assert.Equal(''timeZone'', exception.ParamName)", span="37-37", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenTimeZoneIsNull()", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m13_21 [label="Exit Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenTimeZoneIsNull()", span="30-30", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenTimeZoneIsNull()", file="ScheduleInstantFactoryFacts.cs"];
m13_5 [label="Entry Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenCrontabScheduleIsNull()", span="19-19", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenCrontabScheduleIsNull()", file="ScheduleInstantFactoryFacts.cs"];
m13_6 [label="var factory = CreateFactory()", span="21-21", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenCrontabScheduleIsNull()", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m13_7 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => factory.GetInstant(null, _timeZone))", span="23-24", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenCrontabScheduleIsNull()", color=red, community=1, file="ScheduleInstantFactoryFacts.cs"];
m13_8 [label="Assert.Equal(''schedule'', exception.ParamName)", span="26-26", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenCrontabScheduleIsNull()", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m13_9 [label="Exit Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenCrontabScheduleIsNull()", span="19-19", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ThrowsAnException_WhenCrontabScheduleIsNull()", file="ScheduleInstantFactoryFacts.cs"];
m13_25 [label="Entry Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ReturnsCorrectlyInitializedInstant()", span="41-41", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ReturnsCorrectlyInitializedInstant()", file="ScheduleInstantFactoryFacts.cs"];
m13_26 [label="var factory = CreateFactory()", span="43-43", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ReturnsCorrectlyInitializedInstant()", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m13_27 [label="var instant = factory.GetInstant(_crontabSchedule, _timeZone)", span="45-45", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ReturnsCorrectlyInitializedInstant()", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m13_28 [label="Assert.True(DateTime.UtcNow.AddMinutes(-2) < instant.NowInstant)", span="47-47", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ReturnsCorrectlyInitializedInstant()", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m13_29 [label="Assert.True(instant.NowInstant < DateTime.UtcNow.AddMinutes(2))", span="48-48", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ReturnsCorrectlyInitializedInstant()", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m13_30 [label="Exit Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ReturnsCorrectlyInitializedInstant()", span="41-41", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.GetInstant_ReturnsCorrectlyInitializedInstant()", file="ScheduleInstantFactoryFacts.cs"];
m13_16 [label="Entry Unk.GetInstant", span="", cluster="Unk.GetInstant", file="ScheduleInstantFactoryFacts.cs"];
m13_22 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="ScheduleInstantFactoryFacts.cs"];
m13_14 [label="factory.GetInstant(null, _timeZone)", span="24-24", cluster="lambda expression", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m13_13 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="ScheduleInstantFactoryFacts.cs"];
m13_15 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="ScheduleInstantFactoryFacts.cs"];
m13_23 [label="factory.GetInstant(_crontabSchedule, null)", span="35-35", cluster="lambda expression", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m13_24 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="ScheduleInstantFactoryFacts.cs"];
m13_4 [label="Entry Unk.Parse", span="", cluster="Unk.Parse", file="ScheduleInstantFactoryFacts.cs"];
m13_10 [label="Entry Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.CreateFactory()", span="51-51", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.CreateFactory()", file="ScheduleInstantFactoryFacts.cs"];
m13_33 [label="return new ScheduleInstantFactory();", span="53-53", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.CreateFactory()", color=red, community=0, file="ScheduleInstantFactoryFacts.cs"];
m13_34 [label="Exit Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.CreateFactory()", span="51-51", cluster="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts.CreateFactory()", file="ScheduleInstantFactoryFacts.cs"];
m13_36 [label="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts", span="", file="ScheduleInstantFactoryFacts.cs"];
m13_37 [label=factory, span="", file="ScheduleInstantFactoryFacts.cs"];
m13_38 [label=factory, span="", file="ScheduleInstantFactoryFacts.cs"];
m14_8 [label="Entry HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="49-49", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ScheduleInstantFacts.cs"];
m14_9 [label="transaction.IncrementCounter(''stats:succeeded'')", span="51-51", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ScheduleInstantFacts.cs"];
m14_10 [label="Exit HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="49-49", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ScheduleInstantFacts.cs"];
m14_11 [label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="33-33", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="ScheduleInstantFacts.cs"];
m14_3 [label="Entry HangFire.States.SucceededState.SerializeData()", span="39-39", cluster="HangFire.States.SucceededState.SerializeData()", file="ScheduleInstantFacts.cs"];
m14_4 [label="return new Dictionary<string, string>\r\n            {\r\n                { ''SucceededAt'',  JobHelper.ToStringTimestamp(SucceededAt)}\r\n            };", span="41-44", cluster="HangFire.States.SucceededState.SerializeData()", file="ScheduleInstantFacts.cs"];
m14_5 [label="Exit HangFire.States.SucceededState.SerializeData()", span="39-39", cluster="HangFire.States.SucceededState.SerializeData()", file="ScheduleInstantFacts.cs"];
m14_15 [label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="35-35", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="ScheduleInstantFacts.cs"];
m14_0 [label="Entry HangFire.States.SucceededState.SucceededState()", span="27-27", cluster="HangFire.States.SucceededState.SucceededState()", file="ScheduleInstantFacts.cs"];
m14_1 [label="SucceededAt = DateTime.UtcNow", span="29-29", cluster="HangFire.States.SucceededState.SucceededState()", file="ScheduleInstantFacts.cs"];
m14_2 [label="Exit HangFire.States.SucceededState.SucceededState()", span="27-27", cluster="HangFire.States.SucceededState.SucceededState()", file="ScheduleInstantFacts.cs"];
m14_7 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ScheduleInstantFacts.cs"];
m14_12 [label="Entry HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="54-54", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ScheduleInstantFacts.cs"];
m14_13 [label="transaction.DecrementCounter(''stats:succeeded'')", span="56-56", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ScheduleInstantFacts.cs"];
m14_14 [label="Exit HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="54-54", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ScheduleInstantFacts.cs"];
m14_16 [label="HangFire.States.SucceededState", span="", file="ScheduleInstantFacts.cs"];
m15_51 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="57-57", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="SchedulePollerFacts.cs"];
m15_52 [label="var scheduler = CreateScheduler()", span="59-59", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="SchedulePollerFacts.cs"];
m15_53 [label="scheduler.Execute(_cts.Token)", span="61-61", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="SchedulePollerFacts.cs"];
m15_54 [label="_storage.Verify(x => x.GetConnection())", span="63-63", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="SchedulePollerFacts.cs"];
m15_55 [label="_connection.Verify(x => x.Dispose())", span="64-64", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="SchedulePollerFacts.cs"];
m15_56 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="57-57", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="SchedulePollerFacts.cs"];
m15_16 [label="Entry Mock<IStateMachineFactory>.cstr", span="", cluster="Mock<IStateMachineFactory>.cstr", file="SchedulePollerFacts.cs"];
m15_39 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SchedulePollerFacts.cs"];
m15_35 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SchedulePollerFacts.cs"];
m15_36 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan))", span="39-41", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="SchedulePollerFacts.cs"];
m15_37 [label="Assert.Equal(''storage'', exception.ParamName)", span="43-43", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SchedulePollerFacts.cs"];
m15_38 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SchedulePollerFacts.cs"];
m15_15 [label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0", cluster="System.Threading.CancellationTokenSource.Cancel()", file="SchedulePollerFacts.cs"];
m15_76 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="82-82", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="SchedulePollerFacts.cs"];
m15_77 [label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns((string)null)", span="84-85", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="SchedulePollerFacts.cs"];
m15_78 [label="var scheduler = CreateScheduler()", span="86-86", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="SchedulePollerFacts.cs"];
m15_79 [label="scheduler.Execute(_cts.Token)", span="88-88", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="SchedulePollerFacts.cs"];
m15_80 [label="_stateMachine.Verify(\r\n                x => x.ChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>()),\r\n                Times.Never)", span="90-92", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="SchedulePollerFacts.cs"];
m15_81 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="82-82", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="SchedulePollerFacts.cs"];
m15_43 [label="Entry SchedulePoller.cstr", span="", cluster="SchedulePoller.cstr", file="SchedulePollerFacts.cs"];
m15_44 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="47-47", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="SchedulePollerFacts.cs"];
m15_45 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    _storage.Object, null, Timeout.InfiniteTimeSpan))", span="49-51", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", color=green, community=0, file="SchedulePollerFacts.cs"];
m15_46 [label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="53-53", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="SchedulePollerFacts.cs"];
m15_47 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="47-47", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="SchedulePollerFacts.cs"];
m15_31 [label="Entry Unk.GetFirstByLowestScoreFromSet", span="", cluster="Unk.GetFirstByLowestScoreFromSet", file="SchedulePollerFacts.cs"];
m15_27 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="SchedulePollerFacts.cs"];
m15_67 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="68-68", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="SchedulePollerFacts.cs"];
m15_70 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName },\r\n                It.IsAny<CancellationToken>()))", span="74-78", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", color=green, community=0, file="SchedulePollerFacts.cs"];
m15_69 [label="scheduler.Execute(_cts.Token)", span="72-72", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="SchedulePollerFacts.cs"];
m15_68 [label="var scheduler = CreateScheduler()", span="70-70", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="SchedulePollerFacts.cs"];
m15_71 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="68-68", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="SchedulePollerFacts.cs"];
m15_75 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState", file="SchedulePollerFacts.cs"];
m15_17 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="SchedulePollerFacts.cs"];
m15_66 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="SchedulePollerFacts.cs"];
m15_14 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="SchedulePollerFacts.cs"];
m15_0 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="SchedulePollerFacts.cs"];
m15_1 [label="_storage = new Mock<JobStorage>()", span="21-21", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=green, community=0, file="SchedulePollerFacts.cs"];
m15_2 [label="_connection = new Mock<IStorageConnection>()", span="22-22", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=green, community=0, file="SchedulePollerFacts.cs"];
m15_3 [label="_stateMachine = new Mock<IStateMachine>()", span="23-23", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="SchedulePollerFacts.cs"];
m15_4 [label="_cts = new CancellationTokenSource()", span="24-24", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=green, community=0, file="SchedulePollerFacts.cs"];
m15_5 [label="_cts.Cancel()", span="25-25", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="SchedulePollerFacts.cs"];
m15_6 [label="_stateMachineFactory = new Mock<IStateMachineFactory>()", span="27-27", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=green, community=0, file="SchedulePollerFacts.cs"];
m15_7 [label="_stateMachineFactory.Setup(x => x.Create(It.IsNotNull<IStorageConnection>()))\r\n                .Returns(_stateMachine.Object)", span="28-29", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="SchedulePollerFacts.cs"];
m15_8 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="31-31", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="SchedulePollerFacts.cs"];
m15_9 [label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns(JobId)", span="32-33", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="SchedulePollerFacts.cs"];
m15_10 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="SchedulePollerFacts.cs"];
m15_85 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_40 [label="Entry lambda expression", span="40-41", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_41 [label="new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan)", span="40-41", cluster="lambda expression", color=green, community=1, file="SchedulePollerFacts.cs"];
m15_42 [label="Exit lambda expression", span="40-41", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_48 [label="Entry lambda expression", span="50-51", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_49 [label="new SchedulePoller(\r\n                    _storage.Object, null, Timeout.InfiniteTimeSpan)", span="50-51", cluster="lambda expression", color=green, community=0, file="SchedulePollerFacts.cs"];
m15_50 [label="Exit lambda expression", span="50-51", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_72 [label="Entry lambda expression", span="74-78", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_73 [label="x.ChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName },\r\n                It.IsAny<CancellationToken>())", span="74-78", cluster="lambda expression", color=green, community=0, file="SchedulePollerFacts.cs"];
m15_74 [label="Exit lambda expression", span="74-78", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_19 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_20 [label="x.Create(It.IsNotNull<IStorageConnection>())", span="28-28", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_29 [label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="32-33", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_83 [label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="84-85", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_89 [label="x.ChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>())", span="91-91", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_24 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_28 [label="Entry lambda expression", span="32-33", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_60 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_63 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_82 [label="Entry lambda expression", span="84-85", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_88 [label="Entry lambda expression", span="91-91", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_21 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_30 [label="Exit lambda expression", span="32-33", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_32 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_84 [label="Exit lambda expression", span="84-85", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_90 [label="Exit lambda expression", span="91-91", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_26 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_25 [label="x.GetConnection()", span="31-31", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_62 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_61 [label="x.GetConnection()", span="63-63", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_65 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_64 [label="x.Dispose()", span="64-64", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_34 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_33 [label="time > 0", span="33-33", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_86 [label="time > 0", span="85-85", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_87 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="SchedulePollerFacts.cs"];
m15_59 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SchedulePollerFacts.cs"];
m15_13 [label="Entry Mock<IStateMachine>.cstr", span="", cluster="Mock<IStateMachine>.cstr", file="SchedulePollerFacts.cs"];
m15_58 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SchedulePollerFacts.cs"];
m15_23 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="SchedulePollerFacts.cs"];
m15_18 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="SchedulePollerFacts.cs"];
m15_12 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="SchedulePollerFacts.cs"];
m15_11 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="SchedulePollerFacts.cs"];
m15_57 [label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="95-95", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", file="SchedulePollerFacts.cs"];
m15_91 [label="return new SchedulePoller(_storage.Object, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan);", span="97-97", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", file="SchedulePollerFacts.cs"];
m15_92 [label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="95-95", cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", file="SchedulePollerFacts.cs"];
m15_93 [label="Hangfire.Core.Tests.Server.SchedulePollerFacts", span="", file="SchedulePollerFacts.cs"];
m16_36 [label="Entry Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="50-50", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ServerBootstrapperFacts.cs"];
m16_37 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ServerBootstrapper(ServerId, _context, null, _components))", span="52-53", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=red, community=1, file="ServerBootstrapperFacts.cs"];
m16_38 [label="Assert.Equal(''storage'', exception.ParamName)", span="55-55", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_39 [label="Exit Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="50-50", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ServerBootstrapperFacts.cs"];
m16_62 [label="Entry Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_GetsExactlyTwoConnections_AndClosesThem()", span="78-78", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_GetsExactlyTwoConnections_AndClosesThem()", file="ServerBootstrapperFacts.cs"];
m16_63 [label="var server = CreateServer()", span="80-80", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_GetsExactlyTwoConnections_AndClosesThem()", file="ServerBootstrapperFacts.cs"];
m16_64 [label="server.Execute(_cts.Token)", span="82-82", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_GetsExactlyTwoConnections_AndClosesThem()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_65 [label="_storage.Verify(x => x.GetConnection(), Times.Exactly(2))", span="84-84", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_GetsExactlyTwoConnections_AndClosesThem()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_66 [label="_connection.Verify(x => x.Dispose(), Times.Exactly(2))", span="85-85", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_GetsExactlyTwoConnections_AndClosesThem()", file="ServerBootstrapperFacts.cs"];
m16_67 [label="Exit Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_GetsExactlyTwoConnections_AndClosesThem()", span="78-78", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_GetsExactlyTwoConnections_AndClosesThem()", file="ServerBootstrapperFacts.cs"];
m16_11 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="ServerBootstrapperFacts.cs"];
m16_12 [label="var scheduledState = context.NewState as ScheduledState", span="56-56", cluster="HangFire.States.ScheduledState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", color=green, community=0, file="ServerBootstrapperFacts.cs"];
m16_13 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="ServerBootstrapperFacts.cs"];
m16_15 [label="Entry lambda expression", span="28-28", cluster="lambda expression", color=green, community=0, file="ServerBootstrapperFacts.cs"];
m16_16 [label="x.GetConnection()", span="28-28", cluster="lambda expression", file="ServerBootstrapperFacts.cs", color=red, community=0];
m16_14 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="ServerBootstrapperFacts.cs"];
m16_17 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_19 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="ServerBootstrapperFacts.cs"];
m16_20 [label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="39-39", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", color=red, community=1, file="ServerBootstrapperFacts.cs"];
m16_21 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="40-40", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_22 [label="Exit Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", span="32-32", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="ServerBootstrapperFacts.cs"];
m16_24 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="ServerBootstrapperFacts.cs"];
m16_6 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="28-28", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.ServerBootstrapperFacts()", file="ServerBootstrapperFacts.cs", color=red, community=0];
m16_7 [label="Exit Hangfire.Core.Tests.Server.ServerBootstrapperFacts.ServerBootstrapperFacts()", span="20-20", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.ServerBootstrapperFacts()", color=green, community=0, file="ServerBootstrapperFacts.cs"];
m16_8 [label="Entry Hangfire.Server.ServerContext.ServerContext()", span="20-20", cluster="Hangfire.Server.ServerContext.ServerContext()", file="ServerBootstrapperFacts.cs"];
m16_0 [label="Entry Hangfire.Core.Tests.Server.ServerBootstrapperFacts.ServerBootstrapperFacts()", span="20-20", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.ServerBootstrapperFacts()", file="ServerBootstrapperFacts.cs"];
m16_1 [label="_context = new ServerContext()", span="22-22", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.ServerBootstrapperFacts()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_2 [label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="32-32", cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_3 [label="EnqueueAt = enqueueAt", span="34-34", cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", color=green, community=0, file="ServerBootstrapperFacts.cs"];
m16_4 [label="ScheduledAt = DateTime.UtcNow", span="35-35", cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_5 [label="Exit HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="32-32", cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_76 [label="Entry Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_StartsAllTheComponents_AndWaitsForThem()", span="89-89", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_StartsAllTheComponents_AndWaitsForThem()", file="ServerBootstrapperFacts.cs"];
m16_77 [label="var component1 = CreateComponentMock()", span="92-92", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_StartsAllTheComponents_AndWaitsForThem()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_78 [label="component1.Setup(x => x.Execute(It.IsAny<CancellationToken>())).Callback(() => Thread.Sleep(100))", span="93-93", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_StartsAllTheComponents_AndWaitsForThem()", file="ServerBootstrapperFacts.cs"];
m16_82 [label="component1.Verify(x => x.Execute(_cts.Token))", span="102-102", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_StartsAllTheComponents_AndWaitsForThem()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_79 [label="var component2 = CreateComponentMock()", span="95-95", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_StartsAllTheComponents_AndWaitsForThem()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_80 [label="var server = CreateServer()", span="96-96", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_StartsAllTheComponents_AndWaitsForThem()", file="ServerBootstrapperFacts.cs"];
m16_83 [label="component2.Verify(x => x.Execute(_cts.Token))", span="103-103", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_StartsAllTheComponents_AndWaitsForThem()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_81 [label="server.Execute(_cts.Token)", span="99-99", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_StartsAllTheComponents_AndWaitsForThem()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_84 [label="Exit Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_StartsAllTheComponents_AndWaitsForThem()", span="89-89", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_StartsAllTheComponents_AndWaitsForThem()", file="ServerBootstrapperFacts.cs"];
m16_93 [label="Entry System.Threading.Thread.Sleep(int)", span="0-0", cluster="System.Threading.Thread.Sleep(int)", file="ServerBootstrapperFacts.cs"];
m16_23 [label="Entry Unk.>", span="", cluster="Unk.>", file="ServerBootstrapperFacts.cs"];
m16_55 [label="Entry Hangfire.Core.Tests.Server.ServerBootstrapperFacts.CreateServer()", span="116-116", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.CreateServer()", file="ServerBootstrapperFacts.cs"];
m16_109 [label="return new ServerBootstrapper(ServerId, _context, _storage.Object, _components);", span="118-118", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.CreateServer()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_110 [label="Exit Hangfire.Core.Tests.Server.ServerBootstrapperFacts.CreateServer()", span="116-116", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.CreateServer()", file="ServerBootstrapperFacts.cs"];
m16_18 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="ServerBootstrapperFacts.cs"];
m16_85 [label="Entry Hangfire.Core.Tests.Server.ServerBootstrapperFacts.CreateComponentMock()", span="121-121", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.CreateComponentMock()", file="ServerBootstrapperFacts.cs"];
m16_111 [label="var mock = new Mock<IServerComponent>()", span="123-123", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.CreateComponentMock()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_112 [label="_components.Add(mock.Object)", span="124-124", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.CreateComponentMock()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_113 [label="return mock;", span="126-126", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.CreateComponentMock()", file="ServerBootstrapperFacts.cs"];
m16_114 [label="Exit Hangfire.Core.Tests.Server.ServerBootstrapperFacts.CreateComponentMock()", span="121-121", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.CreateComponentMock()", file="ServerBootstrapperFacts.cs"];
m16_116 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="ServerBootstrapperFacts.cs"];
m16_9 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="ServerBootstrapperFacts.cs"];
m16_100 [label="Entry Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_RemovesServerFromServersList()", span="107-107", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_RemovesServerFromServersList()", file="ServerBootstrapperFacts.cs"];
m16_101 [label="var server = CreateServer()", span="109-109", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_RemovesServerFromServersList()", file="ServerBootstrapperFacts.cs"];
m16_102 [label="server.Execute(_cts.Token)", span="111-111", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_RemovesServerFromServersList()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_103 [label="_connection.Verify(x => x.RemoveServer(ServerId))", span="113-113", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_RemovesServerFromServersList()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_104 [label="Exit Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_RemovesServerFromServersList()", span="107-107", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_RemovesServerFromServersList()", file="ServerBootstrapperFacts.cs"];
m16_29 [label="Entry Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="41-41", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="ServerBootstrapperFacts.cs"];
m16_30 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ServerBootstrapper(ServerId, null, _storage.Object, _components))", span="43-44", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenContextIsNull()", color=red, community=1, file="ServerBootstrapperFacts.cs"];
m16_31 [label="Assert.Equal(''context'', exception.ParamName)", span="46-46", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenContextIsNull()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_32 [label="Exit Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="41-41", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="ServerBootstrapperFacts.cs"];
m16_75 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="ServerBootstrapperFacts.cs"];
m16_50 [label="Entry Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_AnnouncesServer()", span="68-68", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_AnnouncesServer()", file="ServerBootstrapperFacts.cs"];
m16_51 [label="var server = CreateServer()", span="70-70", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_AnnouncesServer()", file="ServerBootstrapperFacts.cs"];
m16_52 [label="server.Execute(_cts.Token)", span="72-72", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_AnnouncesServer()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_53 [label="_connection.Verify(x => x.AnnounceServer(ServerId, _context))", span="74-74", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_AnnouncesServer()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_54 [label="Exit Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_AnnouncesServer()", span="68-68", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Execute_AnnouncesServer()", file="ServerBootstrapperFacts.cs"];
m16_28 [label="Entry ServerBootstrapper.cstr", span="", cluster="ServerBootstrapper.cstr", file="ServerBootstrapperFacts.cs"];
m16_115 [label="Entry Mock<IServerComponent>.cstr", span="", cluster="Mock<IServerComponent>.cstr", file="ServerBootstrapperFacts.cs"];
m16_43 [label="Entry Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenComponentsCollection_IsNull()", span="59-59", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenComponentsCollection_IsNull()", file="ServerBootstrapperFacts.cs"];
m16_44 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ServerBootstrapper(ServerId, _context, _storage.Object, null))", span="61-62", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenComponentsCollection_IsNull()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_45 [label="Assert.Equal(''components'', exception.ParamName)", span="64-64", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenComponentsCollection_IsNull()", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_46 [label="Exit Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenComponentsCollection_IsNull()", span="59-59", cluster="Hangfire.Core.Tests.Server.ServerBootstrapperFacts.Ctor_ThrowsAnException_WhenComponentsCollection_IsNull()", file="ServerBootstrapperFacts.cs"];
m16_105 [label="Entry lambda expression", span="113-113", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_25 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_26 [label="HangFire.States.ScheduledState", span="", cluster="lambda expression", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_27 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_33 [label="Entry lambda expression", span="44-44", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_34 [label="new ServerBootstrapper(ServerId, null, _storage.Object, _components)", span="44-44", cluster="lambda expression", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_35 [label="Exit lambda expression", span="44-44", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_40 [label="Entry lambda expression", span="53-53", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_41 [label="new ServerBootstrapper(ServerId, _context, null, _components)", span="53-53", cluster="lambda expression", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_42 [label="Exit lambda expression", span="53-53", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_47 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_48 [label="new ServerBootstrapper(ServerId, _context, _storage.Object, null)", span="62-62", cluster="lambda expression", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_49 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_58 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_59 [label="x.AnnounceServer(ServerId, _context)", span="74-74", cluster="lambda expression", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_60 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_69 [label="Entry lambda expression", span="84-84", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_72 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_70 [label="x.GetConnection()", span="84-84", cluster="lambda expression", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_71 [label="Exit lambda expression", span="84-84", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_73 [label="x.Dispose()", span="85-85", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_74 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_87 [label="Entry lambda expression", span="93-93", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_90 [label="Entry lambda expression", span="93-93", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_94 [label="Entry lambda expression", span="102-102", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_97 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_88 [label="x.Execute(It.IsAny<CancellationToken>())", span="93-93", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_89 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_91 [label="Thread.Sleep(100)", span="93-93", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_92 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_95 [label="x.Execute(_cts.Token)", span="102-102", cluster="lambda expression", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_96 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_98 [label="x.Execute(_cts.Token)", span="103-103", cluster="lambda expression", color=red, community=1, file="ServerBootstrapperFacts.cs"];
m16_99 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_106 [label="x.RemoveServer(ServerId)", span="113-113", cluster="lambda expression", color=red, community=0, file="ServerBootstrapperFacts.cs"];
m16_107 [label="Exit lambda expression", span="113-113", cluster="lambda expression", file="ServerBootstrapperFacts.cs"];
m16_61 [label="Entry Unk.AnnounceServer", span="", cluster="Unk.AnnounceServer", file="ServerBootstrapperFacts.cs"];
m16_68 [label="Entry Unk.Exactly", span="", cluster="Unk.Exactly", file="ServerBootstrapperFacts.cs"];
m16_10 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="ServerBootstrapperFacts.cs"];
m16_57 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="ServerBootstrapperFacts.cs"];
m16_108 [label="Entry Unk.RemoveServer", span="", cluster="Unk.RemoveServer", file="ServerBootstrapperFacts.cs"];
m16_56 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="ServerBootstrapperFacts.cs"];
m16_86 [label="Entry Unk.Callback", span="", cluster="Unk.Callback", file="ServerBootstrapperFacts.cs"];
m16_117 [label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts", span="", file="ServerBootstrapperFacts.cs"];
m18_18 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ServerHeartbeat(null, ServerId))", span="29-30", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ServerHeartbeatFacts.cs"];
m18_50 [label="Entry Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Execute_UpdateServerHeartbeat()", span="56-56", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Execute_UpdateServerHeartbeat()", file="ServerHeartbeatFacts.cs"];
m18_51 [label="var server = CreateHeartbeat()", span="58-58", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Execute_UpdateServerHeartbeat()", file="ServerHeartbeatFacts.cs"];
m18_52 [label="server.Execute(_cts.Token)", span="60-60", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Execute_UpdateServerHeartbeat()", file="ServerHeartbeatFacts.cs"];
m18_53 [label="_connection.Verify(x => x.Heartbeat(ServerId))", span="62-62", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Execute_UpdateServerHeartbeat()", file="ServerHeartbeatFacts.cs"];
m18_54 [label="Exit Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Execute_UpdateServerHeartbeat()", span="56-56", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Execute_UpdateServerHeartbeat()", file="ServerHeartbeatFacts.cs"];
m18_9 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="ServerHeartbeatFacts.cs"];
m18_19 [label="Assert.Equal(''storage'', exception.ParamName)", span="32-32", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ServerHeartbeatFacts.cs"];
m18_22 [label="throw new ArgumentNullException(''filters'');", span="71-71", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="ServerHeartbeatFacts.cs"];
m18_41 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="ServerHeartbeatFacts.cs"];
m18_8 [label="Exit HangFire.States.ElectStateContext.ElectStateContext(HangFire.States.StateContext, HangFire.States.IState, string, HangFire.Storage.IStorageConnection)", span="27-27", cluster="HangFire.States.ElectStateContext.ElectStateContext(HangFire.States.StateContext, HangFire.States.IState, string, HangFire.Storage.IStorageConnection)", file="ServerHeartbeatFacts.cs"];
m18_34 [label="return CandidateState;", span="99-99", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="ServerHeartbeatFacts.cs"];
m18_35 [label="Exit HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", span="69-69", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="ServerHeartbeatFacts.cs"];
m18_36 [label="server.Execute(_cts.Token)", span="49-49", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Execute_TakesAConnection_AndDisposesIt()", file="ServerHeartbeatFacts.cs"];
m18_37 [label="Entry HangFire.States.IElectStateFilter.OnStateElection(HangFire.States.ElectStateContext)", span="30-30", cluster="HangFire.States.IElectStateFilter.OnStateElection(HangFire.States.ElectStateContext)", file="ServerHeartbeatFacts.cs"];
m18_38 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="ServerHeartbeatFacts.cs"];
m18_39 [label="Entry HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="26-26", cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="ServerHeartbeatFacts.cs"];
m18_10 [label="Entry HangFire.States.ElectStateContext.SetJobParameter<T>(string, T)", span="58-58", cluster="HangFire.States.ElectStateContext.SetJobParameter<T>(string, T)", file="ServerHeartbeatFacts.cs"];
m18_21 [label="filters == null", span="71-71", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="ServerHeartbeatFacts.cs"];
m18_16 [label="return JobHelper.FromJson<T>(Connection.GetJobParameter(\r\n                JobId, name));", span="65-66", cluster="HangFire.States.ElectStateContext.GetJobParameter<T>(string)", file="ServerHeartbeatFacts.cs", color=red, community=0];
m18_14 [label="x.GetConnection()", span="23-23", cluster="lambda expression", file="ServerHeartbeatFacts.cs", color=green, community=0];
m18_11 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", color=red, community=0, file="ServerHeartbeatFacts.cs"];
m18_12 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="ServerHeartbeatFacts.cs"];
m18_40 [label="Entry Hangfire.Core.Tests.Server.ServerHeartbeatFacts.CreateHeartbeat()", span="65-65", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.CreateHeartbeat()", file="ServerHeartbeatFacts.cs"];
m18_59 [label="return new ServerHeartbeat(_storage.Object, ServerId);", span="67-67", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.CreateHeartbeat()", file="ServerHeartbeatFacts.cs"];
m18_60 [label="Exit Hangfire.Core.Tests.Server.ServerHeartbeatFacts.CreateHeartbeat()", span="65-65", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.CreateHeartbeat()", file="ServerHeartbeatFacts.cs"];
m18_58 [label="Entry Unk.Heartbeat", span="", cluster="Unk.Heartbeat", file="ServerHeartbeatFacts.cs"];
m18_49 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="ServerHeartbeatFacts.cs"];
m18_23 [label="var statesToAppend = new List<IState>()", span="73-73", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="ServerHeartbeatFacts.cs"];
m18_13 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="ServerHeartbeatFacts.cs"];
m18_15 [label="Entry HangFire.States.ElectStateContext.GetJobParameter<T>(string)", span="63-63", cluster="HangFire.States.ElectStateContext.GetJobParameter<T>(string)", file="ServerHeartbeatFacts.cs"];
m18_32 [label="transaction.AddJobState(JobId, state)", span="92-92", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="ServerHeartbeatFacts.cs"];
m18_44 [label="x.GetConnection()", span="51-51", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m18_31 [label=statesToAppend, span="90-90", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="ServerHeartbeatFacts.cs"];
m18_33 [label="transaction.Commit()", span="95-95", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="ServerHeartbeatFacts.cs"];
m18_43 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m18_46 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m18_55 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m18_45 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m18_24 [label=filters, span="75-75", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="ServerHeartbeatFacts.cs"];
m18_48 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m18_47 [label="x.Dispose()", span="52-52", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m18_57 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m18_56 [label="x.Heartbeat(ServerId)", span="62-62", cluster="lambda expression", file="ServerHeartbeatFacts.cs"];
m18_25 [label="var oldState = CandidateState", span="77-77", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="ServerHeartbeatFacts.cs"];
m18_42 [label="HangFire.States.ElectStateContext", span="", cluster="Unk.Verify", file="ServerHeartbeatFacts.cs"];
m18_17 [label="Exit HangFire.States.ElectStateContext.GetJobParameter<T>(string)", span="63-63", cluster="HangFire.States.ElectStateContext.GetJobParameter<T>(string)", file="ServerHeartbeatFacts.cs"];
m18_20 [label="Entry HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", span="69-69", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="ServerHeartbeatFacts.cs"];
m18_0 [label="Entry Hangfire.Core.Tests.Server.ServerHeartbeatFacts.ServerHeartbeatFacts()", span="16-16", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.ServerHeartbeatFacts()", file="ServerHeartbeatFacts.cs"];
m18_1 [label="_storage = new Mock<JobStorage>()", span="18-18", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.ServerHeartbeatFacts()", color=red, community=0, file="ServerHeartbeatFacts.cs"];
m18_3 [label="_cts = new CancellationTokenSource()", span="20-20", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.ServerHeartbeatFacts()", color=red, community=0, file="ServerHeartbeatFacts.cs"];
m18_5 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="23-23", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.ServerHeartbeatFacts()", color=green, community=0, file="ServerHeartbeatFacts.cs"];
m18_6 [label="Exit Hangfire.Core.Tests.Server.ServerHeartbeatFacts.ServerHeartbeatFacts()", span="16-16", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.ServerHeartbeatFacts()", color=red, community=0, file="ServerHeartbeatFacts.cs"];
m18_7 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", color=red, community=0, file="ServerHeartbeatFacts.cs"];
m18_2 [label="_connection = new Mock<IStorageConnection>()", span="19-19", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.ServerHeartbeatFacts()", color=red, community=0, file="ServerHeartbeatFacts.cs"];
m18_4 [label="_cts.Cancel()", span="21-21", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.ServerHeartbeatFacts()", color=red, community=0, file="ServerHeartbeatFacts.cs"];
m18_26 [label="filter.OnStateElection(this)", span="78-78", cluster="HangFire.States.ElectStateContext.ElectState(System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>)", file="ServerHeartbeatFacts.cs"];
m18_28 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ServerHeartbeat(_storage.Object, null))", span="38-39", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="ServerHeartbeatFacts.cs"];
m18_29 [label="Assert.Equal(''serverId'', exception.ParamName)", span="41-41", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="ServerHeartbeatFacts.cs"];
m18_27 [label="Entry Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", span="36-36", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="ServerHeartbeatFacts.cs"];
m18_30 [label="Exit Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", span="36-36", cluster="Hangfire.Core.Tests.Server.ServerHeartbeatFacts.Ctor_ThrowsAnException_WhenServerIdIsNull()", file="ServerHeartbeatFacts.cs"];
m18_61 [label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts", span="", file="ServerHeartbeatFacts.cs"];
m19_21 [label="Entry Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", span="64-64", cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", file="ServerJobCancellationToken.cs"];
m19_23 [label="Entry Hangfire.Common.JobHelper.FromTimestamp(long)", span="63-63", cluster="Hangfire.Common.JobHelper.FromTimestamp(long)", file="ServerJobCancellationToken.cs"];
m19_24 [label="return Epoch.AddSeconds(value);", span="65-65", cluster="Hangfire.Common.JobHelper.FromTimestamp(long)", file="ServerJobCancellationToken.cs"];
m19_26 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)", file="ServerJobCancellationToken.cs"];
m19_28 [label="!state.Data[''ServerId''].Equals(_backgroundProcessContext.ServerId)", span="78-78", cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", color=red, community=0, file="ServerJobCancellationToken.cs"];
m19_30 [label="state.Data[''WorkerNumber''] != _workerContext.WorkerNumber.ToString(CultureInfo.InvariantCulture)", span="83-83", cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", file="ServerJobCancellationToken.cs"];
m19_25 [label="Exit Hangfire.Common.JobHelper.FromTimestamp(long)", span="63-63", cluster="Hangfire.Common.JobHelper.FromTimestamp(long)", file="ServerJobCancellationToken.cs"];
m19_27 [label="return true;", span="75-75", cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", file="ServerJobCancellationToken.cs"];
m19_29 [label="return true;", span="80-80", cluster="Hangfire.Server.ServerJobCancellationToken.IsJobAborted()", file="ServerJobCancellationToken.cs"];
m19_31 [label="Entry Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73", cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="ServerJobCancellationToken.cs"];
m19_32 [label="long timestamp", span="75-75", cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="ServerJobCancellationToken.cs"];
m19_33 [label="long.TryParse(value, out timestamp)", span="76-76", cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="ServerJobCancellationToken.cs"];
m19_34 [label="return FromTimestamp(timestamp);", span="78-78", cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="ServerJobCancellationToken.cs", color=green, community=0];
m19_14 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ServerJobCancellationToken.cs"];
m19_15 [label="Entry Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", span="54-54", cluster="Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationToken.cs"];
m19_16 [label="_backgroundProcessContext.CancellationToken.ThrowIfCancellationRequested()", span="56-56", cluster="Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationToken.cs"];
m19_17 [label="IsJobAborted()", span="58-58", cluster="Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationToken.cs"];
m19_18 [label="throw new JobAbortedException();", span="60-60", cluster="Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationToken.cs"];
m19_19 [label="Exit Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", span="54-54", cluster="Hangfire.Server.ServerJobCancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationToken.cs"];
m19_36 [label="Exit Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73", cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="ServerJobCancellationToken.cs"];
m19_37 [label="Entry long.TryParse(string, out long)", span="0-0", cluster="long.TryParse(string, out long)", file="ServerJobCancellationToken.cs"];
m19_0 [label="Entry Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", span="32-32", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_1 [label="jobId == null", span="38-38", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_3 [label="connection == null", span="39-39", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_5 [label="workerContext == null", span="40-40", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_7 [label="backgroundProcessContext == null", span="41-41", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_9 [label="_jobId = jobId", span="43-43", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_10 [label="_connection = connection", span="44-44", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_11 [label="_workerContext = workerContext", span="45-45", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_12 [label="_backgroundProcessContext = backgroundProcessContext", span="46-46", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_2 [label="throw new ArgumentNullException(''jobId'');", span="38-38", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_4 [label="throw new ArgumentNullException(''connection'');", span="39-39", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_6 [label="throw new ArgumentNullException(''workerContext'');", span="40-40", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_8 [label="throw new ArgumentNullException(''backgroundProcessContext'');", span="41-41", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_13 [label="Exit Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", span="32-32", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="ServerJobCancellationToken.cs"];
m19_39 [label="Entry Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", span="84-84", cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", file="ServerJobCancellationToken.cs"];
m19_42 [label="return DeserializeDateTime(value);", span="91-91", cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", file="ServerJobCancellationToken.cs"];
m19_40 [label="String.IsNullOrEmpty(value)", span="86-86", cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", file="ServerJobCancellationToken.cs"];
m19_41 [label="return null;", span="88-88", cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", file="ServerJobCancellationToken.cs"];
m19_43 [label="Exit Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", span="84-84", cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", file="ServerJobCancellationToken.cs"];
m19_44 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="ServerJobCancellationToken.cs"];
m19_35 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="ServerJobCancellationToken.cs"];
m19_22 [label="Entry Hangfire.Server.JobAbortedException.JobAbortedException()", span="20-20", cluster="Hangfire.Server.JobAbortedException.JobAbortedException()", file="ServerJobCancellationToken.cs"];
m19_20 [label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0", cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="ServerJobCancellationToken.cs"];
m19_38 [label="Hangfire.Server.ServerJobCancellationToken", span="", cluster="System.DateTime.Parse(string, System.IFormatProvider, System.Globalization.DateTimeStyles)", file="ServerJobCancellationToken.cs"];
m20_6 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", span="20-20", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_7 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Create(\r\n                    null, () => StaticMethod(), _state.Object))", span="22-24", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_8 [label="Assert.Equal(''client'', exception.ParamName)", span="26-26", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_9 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", span="20-20", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_95 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", span="92-92", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_96 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod(), ''critical''))", span="94-96", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_97 [label="Assert.Equal(''client'', exception.ParamName)", span="98-98", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_98 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", span="92-92", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_4 [label="Entry Mock<IBackgroundJobClient>.cstr", span="", cluster="Mock<IBackgroundJobClient>.cstr", file="ServerJobCancellationTokenFacts.cs"];
m20_11 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="ServerJobCancellationTokenFacts.cs"];
m20_52 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", span="56-56", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_53 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod()))", span="58-60", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_54 [label="Assert.Equal(''client'', exception.ParamName)", span="62-62", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_55 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", span="56-56", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_41 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", span="176-176", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", file="ServerJobCancellationTokenFacts.cs"];
m20_194 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", span="176-176", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", file="ServerJobCancellationTokenFacts.cs"];
m20_151 [label="Entry HangFire.BackgroundJobClientExtensions.Schedule(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", span="106-106", cluster="HangFire.BackgroundJobClientExtensions.Schedule(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs"];
m20_176 [label="Entry HangFire.BackgroundJobClientExtensions.Schedule<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="123-123", cluster="HangFire.BackgroundJobClientExtensions.Schedule<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", file="ServerJobCancellationTokenFacts.cs"];
m20_180 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", span="162-162", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerJobCancellationTokenFacts.cs"];
m20_181 [label="_client.Object.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                x => x.InstanceMethod(), TimeSpan.FromDays(1))", span="164-165", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerJobCancellationTokenFacts.cs"];
m20_182 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow)))", span="167-169", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerJobCancellationTokenFacts.cs"];
m20_183 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", span="162-162", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerJobCancellationTokenFacts.cs"];
m20_150 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="ServerJobCancellationTokenFacts.cs"];
m20_67 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="ServerJobCancellationTokenFacts.cs"];
m20_20 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", span="30-30", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="ServerJobCancellationTokenFacts.cs"];
m20_21 [label="_client.Object.Create(() => StaticMethod(), _state.Object)", span="32-32", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="ServerJobCancellationTokenFacts.cs"];
m20_22 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), _state.Object))", span="34-34", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", color=red, community=0, file="ServerJobCancellationTokenFacts.cs"];
m20_23 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", span="30-30", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="ServerJobCancellationTokenFacts.cs"];
m20_119 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", span="112-112", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_120 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), ''critical''))", span="114-116", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_121 [label="Assert.Equal(''client'', exception.ParamName)", span="118-118", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_122 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", span="112-112", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_106 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", span="102-102", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerJobCancellationTokenFacts.cs"];
m20_107 [label="_client.Object.Enqueue(() => StaticMethod(), ''critical'')", span="104-104", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerJobCancellationTokenFacts.cs"];
m20_108 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<EnqueuedState>(state => state.Queue == ''critical'')))", span="106-108", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerJobCancellationTokenFacts.cs"];
m20_109 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", span="102-102", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerJobCancellationTokenFacts.cs"];
m20_126 [label="Entry HangFire.BackgroundJobClientExtensions.Enqueue<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, string)", span="90-90", cluster="HangFire.BackgroundJobClientExtensions.Enqueue<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, string)", file="ServerJobCancellationTokenFacts.cs"];
m20_5 [label="Entry Mock<State>.cstr", span="", cluster="Mock<State>.cstr", file="ServerJobCancellationTokenFacts.cs"];
m20_169 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", span="152-152", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_170 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), TimeSpan.FromDays(1)))", span="154-156", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_171 [label="Assert.Equal(''client'', exception.ParamName)", span="158-158", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_172 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", span="152-152", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_19 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", span="172-172", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", file="ServerJobCancellationTokenFacts.cs"];
m20_193 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", span="172-172", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", file="ServerJobCancellationTokenFacts.cs"];
m20_190 [label="Entry lambda expression", span="169-169", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_12 [label="Entry lambda expression", span="23-24", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_13 [label="BackgroundJobClientExtensions.Create(\r\n                    null, () => StaticMethod(), _state.Object)", span="23-24", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_14 [label="Exit lambda expression", span="23-24", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_16 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_17 [label="StaticMethod()", span="24-24", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_18 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_25 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_28 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_26 [label="StaticMethod()", span="32-32", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_27 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_29 [label="x.Create(It.IsNotNull<Job>(), _state.Object)", span="34-34", cluster="lambda expression", color=red, community=0, file="ServerJobCancellationTokenFacts.cs"];
m20_30 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_35 [label="Entry lambda expression", span="41-42", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_36 [label="BackgroundJobClientExtensions.Create<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), _state.Object)", span="41-42", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_37 [label="Exit lambda expression", span="41-42", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_38 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_39 [label="x.InstanceMethod()", span="42-42", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_40 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_46 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_49 [label="Entry lambda expression", span="52-52", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_47 [label="x.InstanceMethod()", span="50-50", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_48 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_50 [label="x.Create(It.IsNotNull<Job>(), _state.Object)", span="52-52", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_51 [label="Exit lambda expression", span="52-52", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_56 [label="Entry lambda expression", span="59-60", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_57 [label="BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod())", span="59-60", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_58 [label="Exit lambda expression", span="59-60", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_60 [label="Entry lambda expression", span="60-60", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_61 [label="StaticMethod()", span="60-60", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_62 [label="Exit lambda expression", span="60-60", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_68 [label="Entry lambda expression", span="68-68", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_71 [label="Entry lambda expression", span="70-70", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_69 [label="StaticMethod()", span="68-68", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_70 [label="Exit lambda expression", span="68-68", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_72 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="70-70", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_73 [label="Exit lambda expression", span="70-70", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_78 [label="Entry lambda expression", span="77-78", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_79 [label="BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod())", span="77-78", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_80 [label="Exit lambda expression", span="77-78", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_82 [label="Entry lambda expression", span="78-78", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_83 [label="x.InstanceMethod()", span="78-78", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_84 [label="Exit lambda expression", span="78-78", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_89 [label="Entry lambda expression", span="86-86", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_92 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_90 [label="x.InstanceMethod()", span="86-86", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_91 [label="Exit lambda expression", span="86-86", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_93 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="88-88", cluster="lambda expression", color=red, community=0, file="ServerJobCancellationTokenFacts.cs"];
m20_94 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_99 [label="Entry lambda expression", span="95-96", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_100 [label="BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod(), ''critical'')", span="95-96", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_101 [label="Exit lambda expression", span="95-96", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_103 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_104 [label="StaticMethod()", span="96-96", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_105 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_110 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_113 [label="Entry lambda expression", span="106-108", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_111 [label="StaticMethod()", span="104-104", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_112 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_114 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<EnqueuedState>(state => state.Queue == ''critical''))", span="106-108", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_115 [label="Exit lambda expression", span="106-108", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_116 [label="Entry lambda expression", span="108-108", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_117 [label="state.Queue == ''critical''", span="108-108", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_118 [label="Exit lambda expression", span="108-108", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_123 [label="Entry lambda expression", span="115-116", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_124 [label="BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), ''critical'')", span="115-116", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_125 [label="Exit lambda expression", span="115-116", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_127 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_128 [label="x.InstanceMethod()", span="116-116", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_129 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_134 [label="Entry lambda expression", span="124-124", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_137 [label="Entry lambda expression", span="126-128", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_135 [label="x.InstanceMethod()", span="124-124", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_136 [label="Exit lambda expression", span="124-124", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_138 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<EnqueuedState>(state => state.Queue == ''critical''))", span="126-128", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_139 [label="Exit lambda expression", span="126-128", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_140 [label="Entry lambda expression", span="128-128", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_141 [label="state.Queue == ''critical''", span="128-128", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_142 [label="Exit lambda expression", span="128-128", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_147 [label="Entry lambda expression", span="135-136", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_148 [label="BackgroundJobClientExtensions.Schedule(\r\n                    null, () => StaticMethod(), TimeSpan.FromDays(1))", span="135-136", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_149 [label="Exit lambda expression", span="135-136", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_152 [label="Entry lambda expression", span="136-136", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_153 [label="StaticMethod()", span="136-136", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_154 [label="Exit lambda expression", span="136-136", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_160 [label="Entry lambda expression", span="144-144", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_163 [label="Entry lambda expression", span="146-148", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_161 [label="StaticMethod()", span="144-144", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_162 [label="Exit lambda expression", span="144-144", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_164 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow))", span="146-148", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_165 [label="Exit lambda expression", span="146-148", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_166 [label="Entry lambda expression", span="148-148", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_167 [label="state.EnqueueAt > DateTime.UtcNow", span="148-148", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_168 [label="Exit lambda expression", span="148-148", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_173 [label="Entry lambda expression", span="155-156", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_174 [label="BackgroundJobClientExtensions.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), TimeSpan.FromDays(1))", span="155-156", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_175 [label="Exit lambda expression", span="155-156", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_177 [label="Entry lambda expression", span="156-156", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_178 [label="x.InstanceMethod()", span="156-156", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_179 [label="Exit lambda expression", span="156-156", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_184 [label="Entry lambda expression", span="165-165", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_187 [label="Entry lambda expression", span="167-169", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_185 [label="x.InstanceMethod()", span="165-165", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_186 [label="Exit lambda expression", span="165-165", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_188 [label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow))", span="167-169", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_189 [label="Exit lambda expression", span="167-169", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_191 [label="state.EnqueueAt > DateTime.UtcNow", span="169-169", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_192 [label="Exit lambda expression", span="169-169", cluster="lambda expression", file="ServerJobCancellationTokenFacts.cs"];
m20_74 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", span="74-74", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_75 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod()))", span="76-78", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_76 [label="Assert.Equal(''client'', exception.ParamName)", span="80-80", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_77 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", span="74-74", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_85 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", span="84-84", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerJobCancellationTokenFacts.cs"];
m20_86 [label="_client.Object.Enqueue<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod())", span="86-86", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerJobCancellationTokenFacts.cs"];
m20_87 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="88-88", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", color=red, community=0, file="ServerJobCancellationTokenFacts.cs"];
m20_88 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", span="84-84", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerJobCancellationTokenFacts.cs"];
m20_42 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", span="48-48", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="ServerJobCancellationTokenFacts.cs"];
m20_43 [label="_client.Object.Create<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod(), _state.Object)", span="50-50", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="ServerJobCancellationTokenFacts.cs"];
m20_44 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), _state.Object))", span="52-52", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="ServerJobCancellationTokenFacts.cs"];
m20_45 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", span="48-48", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="ServerJobCancellationTokenFacts.cs"];
m20_81 [label="Entry HangFire.BackgroundJobClientExtensions.Enqueue<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>)", span="53-53", cluster="HangFire.BackgroundJobClientExtensions.Enqueue<T>(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>)", file="ServerJobCancellationTokenFacts.cs"];
m20_63 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", span="66-66", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="ServerJobCancellationTokenFacts.cs"];
m20_64 [label="_client.Object.Enqueue(() => StaticMethod())", span="68-68", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="ServerJobCancellationTokenFacts.cs"];
m20_65 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="70-70", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="ServerJobCancellationTokenFacts.cs"];
m20_66 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", span="66-66", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="ServerJobCancellationTokenFacts.cs"];
m20_159 [label="Entry Unk.Schedule", span="", cluster="Unk.Schedule", file="ServerJobCancellationTokenFacts.cs"];
m20_15 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="ServerJobCancellationTokenFacts.cs"];
m20_0 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", span="13-13", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", file="ServerJobCancellationTokenFacts.cs"];
m20_1 [label="_client = new Mock<IBackgroundJobClient>()", span="15-15", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", color=red, community=0, file="ServerJobCancellationTokenFacts.cs"];
m20_2 [label="_state = new Mock<State>()", span="16-16", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", color=red, community=0, file="ServerJobCancellationTokenFacts.cs"];
m20_3 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", span="13-13", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", file="ServerJobCancellationTokenFacts.cs"];
m20_155 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", span="142-142", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerJobCancellationTokenFacts.cs"];
m20_156 [label="_client.Object.Schedule(() => StaticMethod(), TimeSpan.FromDays(1))", span="144-144", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerJobCancellationTokenFacts.cs"];
m20_157 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow)))", span="146-148", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerJobCancellationTokenFacts.cs"];
m20_158 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", span="142-142", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerJobCancellationTokenFacts.cs"];
m20_24 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="ServerJobCancellationTokenFacts.cs"];
m20_102 [label="Entry HangFire.BackgroundJobClientExtensions.Enqueue(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, string)", span="71-71", cluster="HangFire.BackgroundJobClientExtensions.Enqueue(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, string)", file="ServerJobCancellationTokenFacts.cs"];
m20_59 [label="Entry HangFire.BackgroundJobClientExtensions.Enqueue(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>)", span="35-35", cluster="HangFire.BackgroundJobClientExtensions.Enqueue(HangFire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>)", file="ServerJobCancellationTokenFacts.cs"];
m20_143 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", span="132-132", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_144 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Schedule(\r\n                    null, () => StaticMethod(), TimeSpan.FromDays(1)))", span="134-136", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_145 [label="Assert.Equal(''client'', exception.ParamName)", span="138-138", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_146 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", span="132-132", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_31 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", span="38-38", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_32 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Create<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), _state.Object))", span="40-42", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_33 [label="Assert.Equal(''client'', exception.ParamName)", span="44-44", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_34 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", span="38-38", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="ServerJobCancellationTokenFacts.cs"];
m20_130 [label="Entry HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", span="122-122", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerJobCancellationTokenFacts.cs"];
m20_131 [label="_client.Object.Enqueue<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod(), ''critical'')", span="124-124", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerJobCancellationTokenFacts.cs"];
m20_132 [label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<EnqueuedState>(state => state.Queue == ''critical'')))", span="126-128", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerJobCancellationTokenFacts.cs"];
m20_133 [label="Exit HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", span="122-122", cluster="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_WithQueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerJobCancellationTokenFacts.cs"];
m20_195 [label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts", span="", file="ServerJobCancellationTokenFacts.cs"];
m21_0 [label="Entry Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", span="38-38", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m21_1 [label="Servers.Add(server)", span="42-42", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m21_2 [label="server.Start()", span="44-44", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m21_3 [label="var context = new OwinContext(app.Properties)", span="46-46", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m21_6 [label="token.Register(server.Dispose)", span="51-51", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m21_4 [label="var token = context.Get<CancellationToken>(''host.OnAppDisposing'')", span="47-47", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m21_5 [label="token != CancellationToken.None", span="49-49", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m21_7 [label="Exit Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", span="38-38", cluster="Hangfire.Server.ServerOwinExtensions.RunHangfireServer(IAppBuilder, Hangfire.BackgroundJobServer)", file="ServerOwinExtensions.cs"];
m21_12 [label="Entry Unk.Register", span="", cluster="Unk.Register", file="ServerOwinExtensions.cs"];
m21_9 [label="Entry Hangfire.BackgroundJobServer.Start()", span="123-123", cluster="Hangfire.BackgroundJobServer.Start()", file="ServerOwinExtensions.cs"];
m21_8 [label="Entry System.Collections.Concurrent.ConcurrentBag<T>.Add(T)", span="0-0", cluster="System.Collections.Concurrent.ConcurrentBag<T>.Add(T)", file="ServerOwinExtensions.cs"];
m21_10 [label="Entry OwinContext.cstr", span="", cluster="OwinContext.cstr", file="ServerOwinExtensions.cs"];
m22_0 [label="Entry Hangfire.Core.Tests.Server.ServerWatchdogFacts.ServerWatchdogFacts()", span="16-16", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.ServerWatchdogFacts()", file="ServerWatchdogFacts.cs"];
m22_1 [label="_storage = new Mock<JobStorage>()", span="18-18", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.ServerWatchdogFacts()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_2 [label="_connection = new Mock<IStorageConnection>()", span="19-19", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.ServerWatchdogFacts()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_3 [label="_options = new ServerWatchdogOptions\r\n            {\r\n                CheckInterval = Timeout.InfiniteTimeSpan // To check that it exits by cancellation token\r\n            }", span="20-23", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.ServerWatchdogFacts()", file="ServerWatchdogFacts.cs"];
m22_4 [label="_cts = new CancellationTokenSource()", span="24-24", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.ServerWatchdogFacts()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_5 [label="_cts.Cancel()", span="25-25", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.ServerWatchdogFacts()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_6 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="27-27", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.ServerWatchdogFacts()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_7 [label="Exit Hangfire.Core.Tests.Server.ServerWatchdogFacts.ServerWatchdogFacts()", span="16-16", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.ServerWatchdogFacts()", file="ServerWatchdogFacts.cs"];
m22_59 [label="Entry Unk.RemoveTimedOutServers", span="", cluster="Unk.RemoveTimedOutServers", file="ServerWatchdogFacts.cs"];
m22_12 [label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0", cluster="System.Threading.CancellationTokenSource.Cancel()", file="ServerWatchdogFacts.cs"];
m22_33 [label="Entry ServerWatchdog.cstr", span="", cluster="ServerWatchdog.cstr", file="ServerWatchdogFacts.cs"];
m22_18 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="ServerWatchdogFacts.cs"];
m22_50 [label="Entry Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_DelegatesRemovalToStorageConnection()", span="55-55", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_DelegatesRemovalToStorageConnection()", file="ServerWatchdogFacts.cs"];
m22_51 [label="_connection.Setup(x => x.RemoveTimedOutServers(It.IsAny<TimeSpan>())).Returns(1)", span="57-57", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_DelegatesRemovalToStorageConnection()", file="ServerWatchdogFacts.cs"];
m22_52 [label="var watchdog = CreateWatchdog()", span="58-58", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_DelegatesRemovalToStorageConnection()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_53 [label="watchdog.Execute(_cts.Token)", span="60-60", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_DelegatesRemovalToStorageConnection()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_54 [label="_connection.Verify(x => x.RemoveTimedOutServers(_options.ServerTimeout))", span="62-62", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_DelegatesRemovalToStorageConnection()", file="ServerWatchdogFacts.cs"];
m22_55 [label="Exit Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_DelegatesRemovalToStorageConnection()", span="55-55", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_DelegatesRemovalToStorageConnection()", file="ServerWatchdogFacts.cs"];
m22_13 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="ServerWatchdogFacts.cs"];
m22_49 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="ServerWatchdogFacts.cs"];
m22_19 [label="Entry Hangfire.Core.Tests.Server.ServerWatchdogFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="31-31", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ServerWatchdogFacts.cs"];
m22_20 [label="Assert.Throws<ArgumentNullException>(() => new ServerWatchdog(null))", span="33-33", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_21 [label="Exit Hangfire.Core.Tests.Server.ServerWatchdogFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="31-31", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ServerWatchdogFacts.cs"];
m22_11 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="ServerWatchdogFacts.cs"];
m22_40 [label="Entry Hangfire.Core.Tests.Server.ServerWatchdogFacts.CreateWatchdog()", span="65-65", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.CreateWatchdog()", file="ServerWatchdogFacts.cs"];
m22_63 [label="return new ServerWatchdog(_storage.Object, _options);", span="67-67", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.CreateWatchdog()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_64 [label="Exit Hangfire.Core.Tests.Server.ServerWatchdogFacts.CreateWatchdog()", span="65-65", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.CreateWatchdog()", file="ServerWatchdogFacts.cs"];
m22_60 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_15 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_16 [label="x.GetConnection()", span="27-27", cluster="lambda expression", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_17 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_23 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_24 [label="new ServerWatchdog(null)", span="33-33", cluster="lambda expression", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_25 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_30 [label="Entry lambda expression", span="40-40", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_31 [label="new ServerWatchdog(_storage.Object, null)", span="40-40", cluster="lambda expression", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_32 [label="Exit lambda expression", span="40-40", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_43 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_46 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_44 [label="x.GetConnection()", span="50-50", cluster="lambda expression", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_45 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_47 [label="x.Dispose()", span="51-51", cluster="lambda expression", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_48 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_56 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_57 [label="x.RemoveTimedOutServers(It.IsAny<TimeSpan>())", span="57-57", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_58 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_61 [label="x.RemoveTimedOutServers(_options.ServerTimeout)", span="62-62", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_62 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="ServerWatchdogFacts.cs"];
m22_42 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="ServerWatchdogFacts.cs"];
m22_27 [label="Entry Hangfire.Core.Tests.Server.ServerWatchdogFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="37-37", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="ServerWatchdogFacts.cs"];
m22_28 [label="Assert.Throws<ArgumentNullException>(\r\n                () => new ServerWatchdog(_storage.Object, null))", span="39-40", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_29 [label="Exit Hangfire.Core.Tests.Server.ServerWatchdogFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="37-37", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="ServerWatchdogFacts.cs"];
m22_41 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="ServerWatchdogFacts.cs"];
m22_26 [label="Entry Hangfire.Server.ServerWatchdog.ServerWatchdog(Hangfire.Server.ServerWatchdogOptions)", span="27-27", cluster="Hangfire.Server.ServerWatchdog.ServerWatchdog(Hangfire.Server.ServerWatchdogOptions)", file="ServerWatchdogFacts.cs"];
m22_14 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="ServerWatchdogFacts.cs"];
m22_34 [label="Entry Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_GetsConnectionAndReleasesIt()", span="44-44", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_GetsConnectionAndReleasesIt()", file="ServerWatchdogFacts.cs"];
m22_35 [label="var watchdog = CreateWatchdog()", span="46-46", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_GetsConnectionAndReleasesIt()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_36 [label="watchdog.Execute(_cts.Token)", span="48-48", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_GetsConnectionAndReleasesIt()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_37 [label="_storage.Verify(x => x.GetConnection(), Times.Once)", span="50-50", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_GetsConnectionAndReleasesIt()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_38 [label="_connection.Verify(x => x.Dispose(), Times.Once)", span="51-51", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_GetsConnectionAndReleasesIt()", color=red, community=0, file="ServerWatchdogFacts.cs"];
m22_39 [label="Exit Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_GetsConnectionAndReleasesIt()", span="44-44", cluster="Hangfire.Core.Tests.Server.ServerWatchdogFacts.Execute_GetsConnectionAndReleasesIt()", file="ServerWatchdogFacts.cs"];
m22_10 [label="Entry Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="22-22", cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="ServerWatchdogFacts.cs"];
m22_9 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="ServerWatchdogFacts.cs"];
m22_8 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="ServerWatchdogFacts.cs"];
m22_65 [label="Hangfire.Core.Tests.Server.ServerWatchdogFacts", span="", file="ServerWatchdogFacts.cs"];
m23_11 [label="Entry Hangfire.BootstrapperConfiguration.UseFilter(object)", span="48-48", cluster="Hangfire.BootstrapperConfiguration.UseFilter(object)", file="StartupConfiguration.cs"];
m23_12 [label="Filters.Add(filter)", span="50-50", cluster="Hangfire.BootstrapperConfiguration.UseFilter(object)", file="StartupConfiguration.cs"];
m23_13 [label="Exit Hangfire.BootstrapperConfiguration.UseFilter(object)", span="48-48", cluster="Hangfire.BootstrapperConfiguration.UseFilter(object)", file="StartupConfiguration.cs"];
m23_8 [label="Entry Hangfire.BootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", span="43-43", cluster="Hangfire.BootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", file="StartupConfiguration.cs"];
m23_9 [label="AuthorizationFilters = filters", span="45-45", cluster="Hangfire.BootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", file="StartupConfiguration.cs"];
m23_10 [label="Exit Hangfire.BootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", span="43-43", cluster="Hangfire.BootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", file="StartupConfiguration.cs"];
m23_21 [label="Entry Hangfire.BootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", span="63-63", cluster="Hangfire.BootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", file="StartupConfiguration.cs"];
m23_22 [label="Storage = storage", span="65-65", cluster="Hangfire.BootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", file="StartupConfiguration.cs"];
m23_23 [label="Exit Hangfire.BootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", span="63-63", cluster="Hangfire.BootstrapperConfiguration.UseStorage(Hangfire.JobStorage)", file="StartupConfiguration.cs"];
m23_18 [label="Entry Hangfire.BootstrapperConfiguration.UseAppPath(string)", span="58-58", cluster="Hangfire.BootstrapperConfiguration.UseAppPath(string)", file="StartupConfiguration.cs"];
m23_19 [label="AppPath = path", span="60-60", cluster="Hangfire.BootstrapperConfiguration.UseAppPath(string)", file="StartupConfiguration.cs"];
m23_20 [label="Exit Hangfire.BootstrapperConfiguration.UseAppPath(string)", span="58-58", cluster="Hangfire.BootstrapperConfiguration.UseAppPath(string)", file="StartupConfiguration.cs"];
m23_27 [label="Entry Hangfire.BootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", span="73-73", cluster="Hangfire.BootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="StartupConfiguration.cs"];
m23_28 [label="Servers.Add(server)", span="75-75", cluster="Hangfire.BootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="StartupConfiguration.cs"];
m23_29 [label="Exit Hangfire.BootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", span="73-73", cluster="Hangfire.BootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="StartupConfiguration.cs"];
m23_0 [label="Entry Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", span="24-24", cluster="Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", file="StartupConfiguration.cs"];
m23_1 [label="Servers = new List<Func<BackgroundJobServer>>()", span="26-26", cluster="Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", file="StartupConfiguration.cs"];
m23_2 [label="DashboardPath = DashboardOwinExtensions.DefaultDashboardPath", span="27-27", cluster="Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", file="StartupConfiguration.cs"];
m23_3 [label="AppPath = DashboardOwinExtensions.DefaultAppPath", span="28-28", cluster="Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", file="StartupConfiguration.cs"];
m23_4 [label="AuthorizationFilters = DashboardOwinExtensions.DefaultAuthorizationFilters", span="30-30", cluster="Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", file="StartupConfiguration.cs"];
m23_5 [label="Filters = new List<object>()", span="32-32", cluster="Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", file="StartupConfiguration.cs"];
m23_6 [label="Exit Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", span="24-24", cluster="Hangfire.BootstrapperConfiguration.BootstrapperConfiguration()", file="StartupConfiguration.cs"];
m23_14 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="StartupConfiguration.cs"];
m23_15 [label="Entry Hangfire.BootstrapperConfiguration.UseDashboardPath(string)", span="53-53", cluster="Hangfire.BootstrapperConfiguration.UseDashboardPath(string)", file="StartupConfiguration.cs"];
m23_16 [label="DashboardPath = path", span="55-55", cluster="Hangfire.BootstrapperConfiguration.UseDashboardPath(string)", file="StartupConfiguration.cs"];
m23_17 [label="Exit Hangfire.BootstrapperConfiguration.UseDashboardPath(string)", span="53-53", cluster="Hangfire.BootstrapperConfiguration.UseDashboardPath(string)", file="StartupConfiguration.cs"];
m23_24 [label="Entry Hangfire.BootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", span="68-68", cluster="Hangfire.BootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", file="StartupConfiguration.cs"];
m23_25 [label="Activator = activator", span="70-70", cluster="Hangfire.BootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", file="StartupConfiguration.cs"];
m23_26 [label="Exit Hangfire.BootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", span="68-68", cluster="Hangfire.BootstrapperConfiguration.UseActivator(Hangfire.JobActivator)", file="StartupConfiguration.cs"];
m23_30 [label="Hangfire.BootstrapperConfiguration", span="", file="StartupConfiguration.cs"];
m24_5 [label="Entry HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="18-18", cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="WorkerContextFacts.cs"];
m24_6 [label="context.Transaction.RemoveFromSet(''failed'', context.JobId)", span="20-20", cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", color=red, community=0, file="WorkerContextFacts.cs"];
m24_7 [label="Exit HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="18-18", cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="WorkerContextFacts.cs"];
m24_0 [label="Entry HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", span="10-10", cluster="HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="WorkerContextFacts.cs"];
m24_1 [label="context.Transaction.AddToSet(\r\n                ''failed'',\r\n                context.JobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow))", span="12-15", cluster="HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", color=red, community=0, file="WorkerContextFacts.cs"];
m24_2 [label="Exit HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", span="10-10", cluster="HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="WorkerContextFacts.cs"];
m24_8 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="25-25", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="WorkerContextFacts.cs"];
m24_3 [label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="35-35", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="WorkerContextFacts.cs"];
m24_4 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="24-24", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="WorkerContextFacts.cs"];
m25_92 [label="Entry HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", span="194-194", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_104 [label="var transaction = _connection.CreateWriteTransaction()", span="198-198", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_105 [label="var changedContext = new StateApplyingContext(\r\n                    context,\r\n                    transaction)", span="200-202", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_106 [label="ApplyState(changedContext, context.CurrentState, context.CandidateState, stateChangedFilters)", span="204-204", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_107 [label="return transaction.Commit();", span="206-206", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_108 [label="Exit HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", span="194-194", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_14 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="WorkerContextMock.cs"];
m25_90 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="WorkerContextMock.cs"];
m25_145 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="WorkerContextMock.cs"];
m25_93 [label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="28-28", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="WorkerContextMock.cs"];
m25_50 [label="Entry HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="17-17", cluster="HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="WorkerContextMock.cs"];
m25_94 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="WorkerContextMock.cs"];
m25_87 [label="Entry string.IsNullOrWhiteSpace(string)", span="0-0", cluster="string.IsNullOrWhiteSpace(string)", file="WorkerContextMock.cs"];
m25_128 [label="Entry HangFire.Common.States.JobStateHandler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", span="22-22", cluster="HangFire.Common.States.JobStateHandler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="WorkerContextMock.cs"];
m25_59 [label="Entry HangFire.Storage.IWriteOnlyTransaction.Commit()", span="37-37", cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="WorkerContextMock.cs"];
m25_49 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="WorkerContextMock.cs"];
m25_91 [label="Entry HangFire.Common.JobMethod.Deserialize(HangFire.Storage.InvocationData)", span="89-89", cluster="HangFire.Common.JobMethod.Deserialize(HangFire.Storage.InvocationData)", file="WorkerContextMock.cs"];
m25_127 [label="Entry HangFire.Common.States.JobState.GetProperties(HangFire.Common.JobMethod)", span="26-26", cluster="HangFire.Common.States.JobState.GetProperties(HangFire.Common.JobMethod)", file="WorkerContextMock.cs"];
m25_17 [label="Entry HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", span="287-287", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="WorkerContextMock.cs"];
m25_153 [label="handler == null", span="289-289", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="WorkerContextMock.cs"];
m25_155 [label="String.IsNullOrEmpty(handler.StateName)", span="290-290", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="WorkerContextMock.cs"];
m25_157 [label="!_handlers.ContainsKey(handler.StateName)", span="292-292", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="WorkerContextMock.cs"];
m25_158 [label="_handlers.Add(handler.StateName, new List<JobStateHandler>())", span="294-294", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="WorkerContextMock.cs"];
m25_159 [label="_handlers[handler.StateName].Add(handler)", span="297-297", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="WorkerContextMock.cs"];
m25_154 [label="throw new ArgumentNullException(''handler'');", span="289-289", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="WorkerContextMock.cs"];
m25_156 [label="throw new ArgumentNullException(''stateName'');", span="290-290", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="WorkerContextMock.cs"];
m25_160 [label="Exit HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", span="287-287", cluster="HangFire.States.StateMachine.RegisterHandler(HangFire.Common.States.JobStateHandler)", file="WorkerContextMock.cs"];
m25_0 [label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", span="36-36", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", file="WorkerContextMock.cs"];
m25_1 [label="Exit HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", span="36-36", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", file="WorkerContextMock.cs"];
m25_53 [label="Entry HangFire.Common.States.StateChangingContext.StateChangingContext(HangFire.Common.States.StateContext, HangFire.Common.States.JobState, string, HangFire.Storage.IStorageConnection)", span="25-25", cluster="HangFire.Common.States.StateChangingContext.StateChangingContext(HangFire.Common.States.StateContext, HangFire.Common.States.JobState, string, HangFire.Storage.IStorageConnection)", file="WorkerContextMock.cs"];
m25_152 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="WorkerContextMock.cs"];
m25_125 [label="Entry HangFire.Common.States.JobStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="27-27", cluster="HangFire.Common.States.JobStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="WorkerContextMock.cs"];
m25_55 [label="Entry HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="8-8", cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="WorkerContextMock.cs"];
m25_25 [label="Entry HangFire.Common.Filters.JobFilter.JobFilter(object, HangFire.Common.Filters.JobFilterScope, int?)", span="38-38", cluster="HangFire.Common.Filters.JobFilter.JobFilter(object, HangFire.Common.Filters.JobFilterScope, int?)", file="WorkerContextMock.cs"];
m25_26 [label="Entry HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", span="63-63", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_27 [label="method == null", span="69-69", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_29 [label="parameters == null", span="70-70", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_31 [label="state == null", span="71-71", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_33 [label="var invocationData = new InvocationData\r\n            {\r\n                Type = method.Type.AssemblyQualifiedName,\r\n                Method = method.Method.Name,\r\n                ParameterTypes = JobHelper.ToJson(method.Method.GetParameters().Select(x => x.ParameterType)),\r\n            }", span="73-78", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_34 [label="var jobId = _connection.CreateExpiredJob(\r\n                invocationData, \r\n                arguments,\r\n                parameters,\r\n                TimeSpan.FromHours(1))", span="80-84", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_35 [label="var filterInfo = GetFilters(method)", span="86-86", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_36 [label="var context = new StateContext(jobId, method)", span="87-87", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_37 [label="var changingContext = new StateChangingContext(context, state, null, _connection)", span="88-88", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_28 [label="throw new ArgumentNullException(''method'');", span="69-69", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_30 [label="throw new ArgumentNullException(''parameters'');", span="70-70", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_32 [label="throw new ArgumentNullException(''state'');", span="71-71", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_42 [label="transaction.PersistJob(jobId)", span="104-104", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_44 [label="return jobId;", span="110-110", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_38 [label="InvokeStateChangingFilters(changingContext, filterInfo.StateChangingFilters)", span="90-90", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_41 [label="ApplyState(\r\n                    changedContext, \r\n                    null,\r\n                    changingContext.CandidateState,\r\n                    filterInfo.StateChangedFilters)", span="98-102", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_40 [label="var changedContext = new StateApplyingContext(\r\n                    context,\r\n                    transaction)", span="94-96", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_39 [label="var transaction = _connection.CreateWriteTransaction()", span="92-92", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_43 [label="transaction.Commit()", span="107-107", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_45 [label="Exit HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", span="63-63", cluster="HangFire.States.StateMachine.CreateInState(HangFire.Common.JobMethod, string[], System.Collections.Generic.IDictionary<string, string>, HangFire.Common.States.JobState)", file="WorkerContextMock.cs"];
m25_15 [label="Entry HangFire.JobStorage.GetStateHandlers()", span="52-52", cluster="HangFire.JobStorage.GetStateHandlers()", file="WorkerContextMock.cs"];
m25_95 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="WorkerContextMock.cs"];
m25_151 [label="Entry HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", span="119-119", cluster="HangFire.Common.Filters.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>)", file="WorkerContextMock.cs"];
m25_144 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="WorkerContextMock.cs"];
m25_123 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="WorkerContextMock.cs"];
m25_56 [label="Entry HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction)", span="23-23", cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction)", file="WorkerContextMock.cs"];
m25_88 [label="Entry HangFire.Storage.IStorageConnection.AcquireJobLock(string)", span="11-11", cluster="HangFire.Storage.IStorageConnection.AcquireJobLock(string)", file="WorkerContextMock.cs"];
m25_129 [label="Entry HangFire.States.StateMachine.AppendHistory(HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", span="259-259", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_135 [label="var properties = new Dictionary<string, string>(\r\n                state.GetProperties(context.JobMethod))", span="265-266", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_137 [label="properties.Add(''State'', state.StateName)", span="269-269", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_138 [label=appendToJob, span="271-271", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_139 [label="transaction.SetJobState(context.JobId, state.StateName, properties)", span="273-273", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_140 [label="properties.Add(''Reason'', state.Reason)", span="276-276", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_142 [label="transaction.AppendJobHistory(context.JobId, properties)", span="279-279", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_136 [label="var now = DateTime.UtcNow", span="267-267", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_141 [label="properties.Add(''CreatedAt'', JobHelper.ToStringTimestamp(now))", span="277-277", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_143 [label="Exit HangFire.States.StateMachine.AppendHistory(HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", span="259-259", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_124 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="WorkerContextMock.cs"];
m25_48 [label="Entry Unk.ToJson", span="", cluster="Unk.ToJson", file="WorkerContextMock.cs"];
m25_60 [label="Entry lambda expression", span="77-77", cluster="lambda expression", file="WorkerContextMock.cs"];
m25_19 [label="filters.Select(f => new JobFilter(f, JobFilterScope.Type, null))", span="59-59", cluster="lambda expression", file="WorkerContextMock.cs"];
m25_18 [label="Entry lambda expression", span="59-59", cluster="lambda expression", file="WorkerContextMock.cs"];
m25_20 [label="Exit lambda expression", span="59-59", cluster="lambda expression", file="WorkerContextMock.cs"];
m25_22 [label="Entry lambda expression", span="59-59", cluster="lambda expression", file="WorkerContextMock.cs"];
m25_23 [label="new JobFilter(f, JobFilterScope.Type, null)", span="59-59", cluster="lambda expression", file="WorkerContextMock.cs"];
m25_24 [label="Exit lambda expression", span="59-59", cluster="lambda expression", file="WorkerContextMock.cs"];
m25_61 [label="x.ParameterType", span="77-77", cluster="lambda expression", file="WorkerContextMock.cs"];
m25_62 [label="Exit lambda expression", span="77-77", cluster="lambda expression", file="WorkerContextMock.cs"];
m25_147 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="WorkerContextMock.cs"];
m25_148 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AppendJobHistory(string, System.Collections.Generic.IDictionary<string, string>)", span="11-11", cluster="HangFire.Storage.IWriteOnlyTransaction.AppendJobHistory(string, System.Collections.Generic.IDictionary<string, string>)", file="WorkerContextMock.cs"];
m25_21 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="WorkerContextMock.cs"];
m25_54 [label="Entry HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", span="179-179", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="WorkerContextMock.cs"];
m25_96 [label=filters, span="182-182", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="WorkerContextMock.cs"];
m25_97 [label="var oldState = context.CandidateState", span="184-184", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="WorkerContextMock.cs"];
m25_98 [label="filter.OnStateChanging(context)", span="185-185", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="WorkerContextMock.cs"];
m25_99 [label="oldState != context.CandidateState", span="187-187", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="WorkerContextMock.cs"];
m25_100 [label="AppendHistory(context, oldState, false)", span="189-189", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="WorkerContextMock.cs"];
m25_101 [label="Exit HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", span="179-179", cluster="HangFire.States.StateMachine.InvokeStateChangingFilters(HangFire.Common.States.StateChangingContext, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangingFilter>)", file="WorkerContextMock.cs"];
m25_57 [label="Entry HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", span="210-210", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_109 [label="!String.IsNullOrEmpty(oldState)", span="216-216", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_110 [label="_handlers.ContainsKey(oldState)", span="218-218", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_111 [label="_handlers[oldState]", span="220-220", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_112 [label="handler.Unapply(context)", span="222-222", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_113 [label=stateChangedFilters, span="226-226", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_114 [label="filter.OnStateUnapplied(context)", span="228-228", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_115 [label="_handlers.ContainsKey(chosenState.StateName)", span="232-232", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_116 [label="var stateData = chosenState.GetProperties(context.JobMethod)", span="234-234", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_117 [label="_handlers[chosenState.StateName]", span="235-235", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_118 [label="handler.Apply(context, stateData)", span="237-237", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_119 [label="AppendHistory(context.Transaction, context, chosenState, true)", span="241-241", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_120 [label=stateChangedFilters, span="243-243", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_121 [label="filter.OnStateApplied(context)", span="245-245", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_122 [label="Exit HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", span="210-210", cluster="HangFire.States.StateMachine.ApplyState(HangFire.Common.States.StateApplyingContext, string, HangFire.Common.States.JobState, System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>)", file="WorkerContextMock.cs"];
m25_63 [label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="113-113", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_64 [label="String.IsNullOrWhiteSpace(jobId)", span="116-116", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_66 [label="state == null", span="117-117", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_68 [label="_connection.AcquireJobLock(jobId)", span="119-119", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_69 [label="var jobData = _connection.Jobs.GetStateAndInvocationData(jobId)", span="123-123", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_73 [label="allowedCurrentStates.Length > 0 && !allowedCurrentStates.Contains(currentState)", span="132-132", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_77 [label="var context = new StateContext(jobId, jobMethod)", span="142-142", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_78 [label="var changingContext = new StateChangingContext(context, state, currentState, _connection)", span="143-143", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_82 [label="var changingContext = new StateChangingContext(\r\n                            new StateContext(jobId, null),\r\n                            new FailedState(ex)\r\n                            {\r\n                                Reason = String.Format(\r\n                                    ''Could not change the state of the job '{0}' to the '{1}'. See the inner exception for details.'',\r\n                                    state.StateName, jobId)\r\n                            },\r\n                            currentState,\r\n                            _connection)", span="156-165", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_65 [label="throw new ArgumentNullException(''jobId'');", span="116-116", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_67 [label="throw new ArgumentNullException(''state'');", span="117-117", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_70 [label="jobData == null", span="125-125", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_72 [label="var currentState = jobData.State", span="131-131", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_75 [label="var jobMethod = JobMethod.Deserialize(jobData.InvocationData)", span="139-139", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_71 [label="return false;", span="128-128", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_74 [label="return false;", span="134-134", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_76 [label="var filterInfo = GetFilters(jobMethod)", span="140-140", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_79 [label="InvokeStateChangingFilters(changingContext, filterInfo.StateChangingFilters)", span="145-145", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_80 [label="return ApplyState(changingContext, filterInfo.StateChangedFilters);", span="147-147", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_81 [label=JobLoadException, span="149-149", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_83 [label="return ApplyState(\r\n                            changingContext,\r\n                            Enumerable.Empty<IStateChangedFilter>());", span="167-169", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_84 [label=Exception, span="172-172", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_85 [label="throw;", span="174-174", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_86 [label="Exit HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="113-113", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="WorkerContextMock.cs"];
m25_102 [label="Entry HangFire.Common.States.IStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", span="30-30", cluster="HangFire.Common.States.IStateChangingFilter.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="WorkerContextMock.cs"];
m25_130 [label="Entry HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", span="27-27", cluster="HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", file="WorkerContextMock.cs"];
m25_58 [label="Entry HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", span="9-9", cluster="HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", file="WorkerContextMock.cs"];
m25_163 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="WorkerContextMock.cs"];
m25_51 [label="Entry HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", span="282-282", cluster="HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", file="WorkerContextMock.cs"];
m25_149 [label="return new JobFilterInfo(_getFiltersThunk(method));", span="284-284", cluster="HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", file="WorkerContextMock.cs"];
m25_150 [label="Exit HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", span="282-282", cluster="HangFire.States.StateMachine.GetFilters(HangFire.Common.JobMethod)", file="WorkerContextMock.cs"];
m25_126 [label="Entry HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", span="33-33", cluster="HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", file="WorkerContextMock.cs"];
m25_16 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="WorkerContextMock.cs"];
m25_47 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="WorkerContextMock.cs"];
m25_103 [label="Entry HangFire.States.StateMachine.AppendHistory(HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", span="249-249", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_131 [label="var transaction = _connection.CreateWriteTransaction()", span="252-252", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_132 [label="AppendHistory(transaction, context, state, appendToJob)", span="254-254", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_133 [label="transaction.Commit()", span="255-255", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_134 [label="Exit HangFire.States.StateMachine.AppendHistory(HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", span="249-249", cluster="HangFire.States.StateMachine.AppendHistory(HangFire.Common.States.StateContext, HangFire.Common.States.JobState, bool)", file="WorkerContextMock.cs"];
m25_162 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="WorkerContextMock.cs"];
m25_146 [label="Entry HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, string, System.Collections.Generic.IDictionary<string, string>)", span="10-10", cluster="HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, string, System.Collections.Generic.IDictionary<string, string>)", file="WorkerContextMock.cs"];
m25_52 [label="Entry HangFire.Common.States.StateContext.StateContext(string, HangFire.Common.JobMethod)", span="27-27", cluster="HangFire.Common.States.StateContext.StateContext(string, HangFire.Common.JobMethod)", file="WorkerContextMock.cs"];
m25_46 [label="Entry HangFire.Storage.InvocationData.InvocationData()", span="2-2", cluster="HangFire.Storage.InvocationData.InvocationData()", file="WorkerContextMock.cs"];
m25_89 [label="Entry HangFire.Storage.IPersistentJob.GetStateAndInvocationData(string)", span="6-6", cluster="HangFire.Storage.IPersistentJob.GetStateAndInvocationData(string)", file="WorkerContextMock.cs"];
m25_2 [label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", span="41-41", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="WorkerContextMock.cs"];
m25_3 [label="connection == null", span="46-46", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="WorkerContextMock.cs"];
m25_5 [label="stateHandlers == null", span="47-47", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="WorkerContextMock.cs"];
m25_7 [label="_connection = connection", span="49-49", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="WorkerContextMock.cs"];
m25_8 [label="var handlers = stateHandlers.Union(connection.Storage.GetStateHandlers())", span="51-51", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="WorkerContextMock.cs"];
m25_11 [label="filters != null", span="57-57", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="WorkerContextMock.cs"];
m25_12 [label="_getFiltersThunk = jd => filters.Select(f => new JobFilter(f, JobFilterScope.Type, null))", span="59-59", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="WorkerContextMock.cs"];
m25_4 [label="throw new ArgumentNullException(''connection'');", span="46-46", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="WorkerContextMock.cs"];
m25_6 [label="throw new ArgumentNullException(''stateHandlers'');", span="47-47", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="WorkerContextMock.cs"];
m25_9 [label=handlers, span="52-52", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="WorkerContextMock.cs"];
m25_10 [label="RegisterHandler(handler)", span="54-54", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="WorkerContextMock.cs"];
m25_13 [label="Exit HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", span="41-41", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="WorkerContextMock.cs"];
m25_164 [label="HangFire.States.StateMachine", span="", file="WorkerContextMock.cs"];
m25_165 [label="System.Collections.Generic.IEnumerable<object>", span="", file="WorkerContextMock.cs"];
n413 -> n1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n5  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n13  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n16  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n23  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n31  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n43  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n46  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n56  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n59  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n69  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n73  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n76  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n95  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n98  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n106  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n109  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n117  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n120  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n127  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n130  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n135  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n162  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n165  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n167  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n172  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n175  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n177  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n182  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n185  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n189  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n192  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n195  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n205  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n223  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n226  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n229  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n232  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n235  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n251  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n346  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n352  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n365  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n387  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n413 -> n406  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
n414 -> n16  [key=1, style=dashed, color=red, label=string];
n414 -> n17  [key=1, style=dashed, color=darkseagreen4, label=string];
n415 -> n26  [key=1, style=dashed, color=darkseagreen4, label=string];
n415 -> n27  [key=1, style=dashed, color=darkseagreen4, label=string];
n416 -> n46  [key=1, style=dashed, color=red, label=int];
n417 -> n46  [key=1, style=dashed, color=red, label=int];
n418 -> n59  [key=1, style=dashed, color=red, label=int];
n419 -> n59  [key=1, style=dashed, color=red, label=int];
n420 -> n98  [key=1, style=dashed, color=darkseagreen4, label=int];
n421 -> n98  [key=1, style=dashed, color=darkseagreen4, label=int];
n422 -> n109  [key=1, style=dashed, color=darkseagreen4, label=int];
n423 -> n109  [key=1, style=dashed, color=darkseagreen4, label=int];
n424 -> n120  [key=1, style=dashed, color=darkseagreen4, label=int];
n425 -> n120  [key=1, style=dashed, color=darkseagreen4, label=int];
n426 -> n148  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n427 -> n165  [key=1, style=dashed, color=darkseagreen4, label=string];
n427 -> n166  [key=1, style=dashed, color=darkseagreen4, label=string];
n428 -> n166  [key=1, style=dashed, color=darkseagreen4, label=int];
n429 -> n166  [key=1, style=dashed, color=darkseagreen4, label=int];
n430 -> n175  [key=1, style=dashed, color=darkseagreen4, label=string];
n430 -> n176  [key=1, style=dashed, color=darkseagreen4, label=string];
n431 -> n176  [key=1, style=dashed, color=darkseagreen4, label=int];
n432 -> n176  [key=1, style=dashed, color=darkseagreen4, label=int];
n433 -> n199  [key=1, style=dashed, color=darkseagreen4, label=string];
n434 -> n267  [key=1, style=dashed, color=darkseagreen4, label=countByStates];
n435 -> n271  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n436 -> n301  [key=1, style=dashed, color=darkseagreen4, label=string];
n437 -> n337  [key=1, style=dashed, color=darkseagreen4, label=string];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.PersistentJobQueueProviderCollection"];
n1 -> n2  [key=0, style=solid];
n2 -> n3  [key=0, style=solid];
n3 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid, color=red];
n5 -> n6  [key=0, style=solid, color=red];
n5 -> n7  [key=2, style=dotted, color=red];
n5 -> n8  [key=1, style=dashed, color=red, label="lambda expression"];
n6 -> n4  [key=0, style=bold, color=blue];
n7 -> n351  [key=0, style=solid];
n7 -> n354  [key=1, style=dashed, color=darkseagreen4, label="System.Func<SqlConnection, T>"];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n11  [key=2, style=dotted];
n10 -> n8  [key=0, style=bold, color=blue];
n11 -> n372  [key=0, style=solid];
n11 -> n373  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n12 -> n13  [key=0, style=solid, color=red];
n12 -> n16  [key=1, style=dashed, color=red, label=string];
n12 -> n17  [key=1, style=dashed, color=darkseagreen4, label=string];
n13 -> n14  [key=0, style=solid, color=red];
n13 -> n7  [key=2, style=dotted, color=red];
n13 -> n15  [key=1, style=dashed, color=red, label="lambda expression"];
n16 -> n17  [key=0, style=solid, color=red];
n16 -> n20  [key=2, style=dotted, color=red];
n17 -> n18  [key=0, style=solid, color=red];
n17 -> n21  [key=2, style=dotted];
n14 -> n12  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid, color=red];
n20 -> n346  [key=0, style=solid];
n20 -> n347  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n18 -> n19  [key=0, style=solid, color=red];
n19 -> n15  [key=0, style=bold, color=blue];
n22 -> n23  [key=0, style=solid, color=red];
n22 -> n26  [key=1, style=dashed, color=darkseagreen4, label=string];
n22 -> n27  [key=1, style=dashed, color=darkseagreen4, label=string];
n23 -> n24  [key=0, style=solid, color=red];
n23 -> n7  [key=2, style=dotted, color=red];
n23 -> n25  [key=1, style=dashed, color=red, label="lambda expression"];
n26 -> n27  [key=0, style=solid];
n26 -> n20  [key=2, style=dotted];
n27 -> n28  [key=0, style=solid];
n27 -> n21  [key=2, style=dotted];
n24 -> n22  [key=0, style=bold, color=blue];
n25 -> n26  [key=0, style=solid];
n28 -> n29  [key=0, style=solid];
n29 -> n25  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid, color=red];
n31 -> n32  [key=0, style=solid, color=red];
n31 -> n7  [key=2, style=dotted, color=red];
n31 -> n33  [key=1, style=dashed, color=red, label="lambda expression"];
n32 -> n30  [key=0, style=bold, color=blue];
n33 -> n34  [key=0, style=solid];
n34 -> n35  [key=0, style=solid];
n34 -> n11  [key=2, style=dotted];
n35 -> n33  [key=0, style=bold, color=blue];
n36 -> n37  [key=0, style=solid];
n37 -> n38  [key=0, style=solid];
n37 -> n7  [key=2, style=dotted];
n37 -> n39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n38 -> n36  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n40 -> n41  [key=0, style=solid];
n40 -> n11  [key=2, style=dotted];
n41 -> n39  [key=0, style=bold, color=blue];
n42 -> n43  [key=0, style=solid, color=red];
n42 -> n46  [key=1, style=dashed, color=red, label=int];
n43 -> n44  [key=0, style=solid, color=red];
n43 -> n7  [key=2, style=dotted, color=red];
n43 -> n45  [key=1, style=dashed, color=red, label="lambda expression"];
n46 -> n47  [key=0, style=solid, color=red];
n46 -> n48  [key=2, style=dotted, color=red];
n46 -> n49  [key=1, style=dashed, color=red, label="lambda expression"];
n44 -> n42  [key=0, style=bold, color=blue];
n45 -> n46  [key=0, style=solid, color=red];
n47 -> n45  [key=0, style=bold, color=blue];
n48 -> n385  [key=0, style=solid];
n48 -> n386  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n48 -> n387  [key=1, style=dashed, color=darkseagreen4, label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
n49 -> n50  [key=0, style=solid, color=red];
n50 -> n51  [key=0, style=solid, color=red];
n50 -> n52  [key=2, style=dotted, color=red];
n50 -> n53  [key=2, style=dotted, color=red];
n50 -> n54  [key=2, style=dotted, color=red];
n51 -> n49  [key=0, style=bold, color=blue];
n55 -> n56  [key=0, style=solid, color=red];
n55 -> n59  [key=1, style=dashed, color=red, label=int];
n56 -> n57  [key=0, style=solid, color=red];
n56 -> n7  [key=2, style=dotted, color=red];
n56 -> n58  [key=1, style=dashed, color=red, label="lambda expression"];
n59 -> n60  [key=0, style=solid, color=red];
n59 -> n48  [key=2, style=dotted, color=red];
n59 -> n61  [key=1, style=dashed, color=red, label="lambda expression"];
n57 -> n55  [key=0, style=bold, color=blue];
n58 -> n59  [key=0, style=solid, color=red];
n60 -> n58  [key=0, style=bold, color=blue];
n61 -> n62  [key=0, style=solid];
n62 -> n63  [key=0, style=solid];
n62 -> n64  [key=2, style=dotted];
n62 -> n54  [key=2, style=dotted];
n63 -> n61  [key=0, style=bold, color=blue];
n65 -> n66  [key=0, style=solid];
n66 -> n67  [key=0, style=solid];
n66 -> n7  [key=2, style=dotted];
n66 -> n68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n67 -> n65  [key=0, style=bold, color=blue];
n68 -> n69  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n71  [key=2, style=dotted];
n70 -> n68  [key=0, style=bold, color=blue];
n71 -> n311  [key=0, style=solid];
n71 -> n318  [key=1, style=dashed, color=darkseagreen4, label=string];
n71 -> n337  [key=1, style=dashed, color=darkseagreen4, label=string];
n71 -> n320  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n72 -> n73  [key=0, style=solid];
n73 -> n74  [key=0, style=solid];
n73 -> n7  [key=2, style=dotted];
n73 -> n75  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n74 -> n72  [key=0, style=bold, color=blue];
n75 -> n76  [key=0, style=solid];
n76 -> n77  [key=0, style=solid];
n76 -> n71  [key=2, style=dotted];
n77 -> n75  [key=0, style=bold, color=blue];
n78 -> n79  [key=0, style=solid];
n79 -> n80  [key=0, style=solid];
n79 -> n81  [key=2, style=dotted];
n79 -> n82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n80 -> n78  [key=0, style=bold, color=blue];
n82 -> n83  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n83 -> n81  [key=2, style=dotted];
n83 -> n90  [key=2, style=dotted];
n83 -> n85  [key=1, style=dashed, color=darkseagreen4, label=servers];
n84 -> n85  [key=0, style=solid];
n84 -> n91  [key=2, style=dotted];
n84 -> n87  [key=1, style=dashed, color=darkseagreen4, label=result];
n84 -> n88  [key=1, style=dashed, color=darkseagreen4, label=result];
n85 -> n86  [key=0, style=solid];
n85 -> n88  [key=0, style=solid];
n85 -> n87  [key=1, style=dashed, color=darkseagreen4, label=server];
n87 -> n85  [key=0, style=solid];
n87 -> n92  [key=2, style=dotted];
n87 -> n93  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n86 -> n87  [key=0, style=solid];
n86 -> n81  [key=2, style=dotted];
n89 -> n82  [key=0, style=bold, color=blue];
n94 -> n95  [key=0, style=solid];
n94 -> n98  [key=1, style=dashed, color=darkseagreen4, label=int];
n95 -> n96  [key=0, style=solid];
n95 -> n7  [key=2, style=dotted];
n95 -> n97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n98 -> n99  [key=0, style=solid];
n98 -> n48  [key=2, style=dotted];
n98 -> n100  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n96 -> n94  [key=0, style=bold, color=blue];
n97 -> n98  [key=0, style=solid];
n99 -> n97  [key=0, style=bold, color=blue];
n100 -> n101  [key=0, style=solid];
n101 -> n102  [key=0, style=solid];
n101 -> n103  [key=2, style=dotted];
n101 -> n104  [key=2, style=dotted];
n102 -> n100  [key=0, style=bold, color=blue];
n105 -> n106  [key=0, style=solid];
n105 -> n109  [key=1, style=dashed, color=darkseagreen4, label=int];
n106 -> n107  [key=0, style=solid];
n106 -> n7  [key=2, style=dotted];
n106 -> n108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n109 -> n110  [key=0, style=solid];
n109 -> n48  [key=2, style=dotted];
n109 -> n111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n107 -> n105  [key=0, style=bold, color=blue];
n108 -> n109  [key=0, style=solid];
n110 -> n108  [key=0, style=bold, color=blue];
n111 -> n112  [key=0, style=solid];
n112 -> n113  [key=0, style=solid];
n112 -> n114  [key=2, style=dotted];
n112 -> n53  [key=2, style=dotted];
n112 -> n115  [key=2, style=dotted];
n112 -> n104  [key=2, style=dotted];
n113 -> n111  [key=0, style=bold, color=blue];
n116 -> n117  [key=0, style=solid];
n116 -> n120  [key=1, style=dashed, color=darkseagreen4, label=int];
n117 -> n118  [key=0, style=solid];
n117 -> n7  [key=2, style=dotted];
n117 -> n119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n120 -> n121  [key=0, style=solid];
n120 -> n48  [key=2, style=dotted];
n120 -> n122  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n118 -> n116  [key=0, style=bold, color=blue];
n119 -> n120  [key=0, style=solid];
n121 -> n119  [key=0, style=bold, color=blue];
n122 -> n123  [key=0, style=solid];
n123 -> n124  [key=0, style=solid];
n123 -> n125  [key=2, style=dotted];
n123 -> n104  [key=2, style=dotted];
n124 -> n122  [key=0, style=bold, color=blue];
n126 -> n127  [key=0, style=solid];
n127 -> n128  [key=0, style=solid];
n127 -> n81  [key=2, style=dotted];
n127 -> n129  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n128 -> n126  [key=0, style=bold, color=blue];
n129 -> n130  [key=0, style=solid];
n129 -> n148  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n129 -> n135  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n130 -> n131  [key=0, style=solid];
n130 -> n138  [key=2, style=dotted];
n130 -> n139  [key=2, style=dotted];
n130 -> n140  [key=2, style=dotted];
n130 -> n141  [key=2, style=dotted];
n130 -> n147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n130 -> n151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n130 -> n155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n130 -> n158  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n130 -> n132  [key=1, style=dashed, color=darkseagreen4, label=tuples];
n148 -> n149  [key=0, style=solid];
n148 -> n150  [key=2, style=dotted];
n135 -> n132  [key=0, style=solid];
n135 -> n145  [key=2, style=dotted];
n135 -> n146  [key=2, style=dotted];
n135 -> n93  [key=2, style=dotted];
n131 -> n132  [key=0, style=solid];
n131 -> n142  [key=2, style=dotted];
n131 -> n135  [key=1, style=dashed, color=darkseagreen4, label=result];
n131 -> n136  [key=1, style=dashed, color=darkseagreen4, label=result];
n147 -> n148  [key=0, style=solid];
n151 -> n152  [key=0, style=solid];
n155 -> n156  [key=0, style=solid];
n158 -> n159  [key=0, style=solid];
n132 -> n133  [key=0, style=solid];
n132 -> n136  [key=0, style=solid];
n132 -> n134  [key=1, style=dashed, color=darkseagreen4, label=tuple];
n132 -> n135  [key=1, style=dashed, color=darkseagreen4, label=tuple];
n136 -> n137  [key=0, style=solid];
n133 -> n134  [key=0, style=solid];
n133 -> n143  [key=2, style=dotted];
n133 -> n135  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
n134 -> n135  [key=0, style=solid];
n134 -> n144  [key=2, style=dotted];
n137 -> n129  [key=0, style=bold, color=blue];
n149 -> n147  [key=0, style=bold, color=blue];
n152 -> n153  [key=0, style=solid];
n152 -> n154  [key=2, style=dotted];
n153 -> n151  [key=0, style=bold, color=blue];
n156 -> n157  [key=0, style=solid];
n157 -> n155  [key=0, style=bold, color=blue];
n159 -> n160  [key=0, style=solid];
n160 -> n158  [key=0, style=bold, color=blue];
n161 -> n162  [key=0, style=solid];
n161 -> n165  [key=1, style=dashed, color=darkseagreen4, label=string];
n161 -> n166  [key=1, style=dashed, color=darkseagreen4, label=string];
n162 -> n163  [key=0, style=solid];
n162 -> n7  [key=2, style=dotted];
n162 -> n164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n165 -> n166  [key=0, style=solid];
n165 -> n20  [key=2, style=dotted];
n166 -> n167  [key=0, style=solid];
n166 -> n169  [key=2, style=dotted];
n163 -> n161  [key=0, style=bold, color=blue];
n164 -> n165  [key=0, style=solid];
n164 -> n167  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n167 -> n168  [key=0, style=solid];
n167 -> n170  [key=2, style=dotted];
n168 -> n164  [key=0, style=bold, color=blue];
n170 -> n363  [key=0, style=solid];
n170 -> n364  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n171 -> n172  [key=0, style=solid];
n171 -> n175  [key=1, style=dashed, color=darkseagreen4, label=string];
n171 -> n176  [key=1, style=dashed, color=darkseagreen4, label=string];
n172 -> n173  [key=0, style=solid];
n172 -> n7  [key=2, style=dotted];
n172 -> n174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n175 -> n176  [key=0, style=solid];
n175 -> n20  [key=2, style=dotted];
n176 -> n177  [key=0, style=solid];
n176 -> n179  [key=2, style=dotted];
n173 -> n171  [key=0, style=bold, color=blue];
n174 -> n175  [key=0, style=solid];
n174 -> n177  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n177 -> n178  [key=0, style=solid];
n177 -> n180  [key=2, style=dotted];
n178 -> n174  [key=0, style=bold, color=blue];
n180 -> n402  [key=0, style=solid];
n180 -> n403  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n181 -> n182  [key=0, style=solid];
n182 -> n183  [key=0, style=solid];
n182 -> n7  [key=2, style=dotted];
n182 -> n184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n183 -> n181  [key=0, style=bold, color=blue];
n184 -> n185  [key=0, style=solid];
n185 -> n186  [key=0, style=solid];
n185 -> n187  [key=2, style=dotted];
n186 -> n184  [key=0, style=bold, color=blue];
n187 -> n274  [key=0, style=solid];
n187 -> n281  [key=1, style=dashed, color=darkseagreen4, label=string];
n187 -> n301  [key=1, style=dashed, color=darkseagreen4, label=string];
n187 -> n283  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n188 -> n189  [key=0, style=solid];
n189 -> n190  [key=0, style=solid];
n189 -> n7  [key=2, style=dotted];
n189 -> n191  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n190 -> n188  [key=0, style=bold, color=blue];
n191 -> n192  [key=0, style=solid];
n192 -> n193  [key=0, style=solid];
n192 -> n187  [key=2, style=dotted];
n193 -> n191  [key=0, style=bold, color=blue];
n194 -> n195  [key=0, style=solid];
n194 -> n199  [key=1, style=dashed, color=darkseagreen4, label=string];
n195 -> n196  [key=0, style=solid];
n195 -> n7  [key=2, style=dotted];
n195 -> n197  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n199 -> n200  [key=0, style=solid];
n199 -> n207  [key=2, style=dotted];
n199 -> n203  [key=1, style=dashed, color=darkseagreen4, label=multi];
n199 -> n204  [key=1, style=dashed, color=darkseagreen4, label=multi];
n196 -> n194  [key=0, style=bold, color=blue];
n197 -> n198  [key=0, style=solid];
n197 -> n199  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n198 -> n199  [key=0, style=solid];
n200 -> n201  [key=0, style=solid];
n200 -> n81  [key=2, style=dotted];
n200 -> n208  [key=2, style=dotted];
n200 -> n205  [key=1, style=dashed, color=darkseagreen4, label=job];
n203 -> n204  [key=0, style=solid];
n203 -> n81  [key=2, style=dotted];
n203 -> n209  [key=2, style=dotted];
n203 -> n212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n203 -> n215  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n203 -> n205  [key=1, style=dashed, color=darkseagreen4, label=parameters];
n204 -> n205  [key=0, style=solid];
n204 -> n81  [key=2, style=dotted];
n204 -> n90  [key=2, style=dotted];
n204 -> n138  [key=2, style=dotted];
n204 -> n218  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n201 -> n202  [key=0, style=solid];
n201 -> n203  [key=0, style=solid];
n205 -> n206  [key=0, style=solid];
n205 -> n210  [key=2, style=dotted];
n205 -> n211  [key=2, style=dotted];
n202 -> n206  [key=0, style=solid];
n212 -> n213  [key=0, style=solid];
n215 -> n216  [key=0, style=solid];
n218 -> n219  [key=0, style=solid];
n206 -> n197  [key=0, style=bold, color=blue];
n213 -> n214  [key=0, style=solid];
n214 -> n212  [key=0, style=bold, color=blue];
n216 -> n217  [key=0, style=solid];
n217 -> n215  [key=0, style=bold, color=blue];
n219 -> n220  [key=0, style=solid];
n219 -> n221  [key=2, style=dotted];
n219 -> n81  [key=2, style=dotted];
n220 -> n218  [key=0, style=bold, color=blue];
n222 -> n223  [key=0, style=solid];
n223 -> n224  [key=0, style=solid];
n223 -> n7  [key=2, style=dotted];
n223 -> n225  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n224 -> n222  [key=0, style=bold, color=blue];
n225 -> n226  [key=0, style=solid];
n226 -> n227  [key=0, style=solid];
n226 -> n11  [key=2, style=dotted];
n227 -> n225  [key=0, style=bold, color=blue];
n228 -> n229  [key=0, style=solid];
n229 -> n230  [key=0, style=solid];
n229 -> n7  [key=2, style=dotted];
n229 -> n231  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n230 -> n228  [key=0, style=bold, color=blue];
n231 -> n232  [key=0, style=solid];
n232 -> n233  [key=0, style=solid];
n232 -> n11  [key=2, style=dotted];
n233 -> n231  [key=0, style=bold, color=blue];
n234 -> n235  [key=0, style=solid];
n235 -> n236  [key=0, style=solid];
n235 -> n7  [key=2, style=dotted];
n235 -> n237  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n236 -> n234  [key=0, style=bold, color=blue];
n237 -> n238  [key=0, style=solid];
n237 -> n240  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n237 -> n251  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n237 -> n271  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n238 -> n239  [key=0, style=solid];
n238 -> n240  [key=1, style=dashed, color=darkseagreen4, label=sql];
n240 -> n241  [key=0, style=solid];
n240 -> n207  [key=2, style=dotted];
n240 -> n247  [key=1, style=dashed, color=darkseagreen4, label=multi];
n240 -> n248  [key=1, style=dashed, color=darkseagreen4, label=multi];
n240 -> n249  [key=1, style=dashed, color=darkseagreen4, label=multi];
n240 -> n250  [key=1, style=dashed, color=darkseagreen4, label=multi];
n251 -> n252  [key=0, style=solid];
n251 -> n258  [key=2, style=dotted];
n251 -> n259  [key=2, style=dotted];
n251 -> n270  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n271 -> n272  [key=0, style=solid];
n271 -> n150  [key=2, style=dotted];
n271 -> n273  [key=2, style=dotted];
n239 -> n240  [key=0, style=solid];
n239 -> n254  [key=2, style=dotted];
n239 -> n243  [key=1, style=dashed, color=darkseagreen4, label=stats];
n239 -> n244  [key=1, style=dashed, color=darkseagreen4, label=stats];
n239 -> n245  [key=1, style=dashed, color=darkseagreen4, label=stats];
n239 -> n246  [key=1, style=dashed, color=darkseagreen4, label=stats];
n239 -> n247  [key=1, style=dashed, color=darkseagreen4, label=stats];
n239 -> n248  [key=1, style=dashed, color=darkseagreen4, label=stats];
n239 -> n249  [key=1, style=dashed, color=darkseagreen4, label=stats];
n239 -> n250  [key=1, style=dashed, color=darkseagreen4, label=stats];
n239 -> n251  [key=1, style=dashed, color=darkseagreen4, label=stats];
n239 -> n252  [key=1, style=dashed, color=darkseagreen4, label=stats];
n243 -> n244  [key=0, style=solid];
n243 -> n256  [key=2, style=dotted];
n244 -> n245  [key=0, style=solid];
n244 -> n256  [key=2, style=dotted];
n245 -> n246  [key=0, style=solid];
n245 -> n256  [key=2, style=dotted];
n246 -> n247  [key=0, style=solid];
n246 -> n256  [key=2, style=dotted];
n247 -> n248  [key=0, style=solid];
n247 -> n81  [key=2, style=dotted];
n247 -> n257  [key=2, style=dotted];
n248 -> n249  [key=0, style=solid];
n248 -> n81  [key=2, style=dotted];
n248 -> n208  [key=2, style=dotted];
n249 -> n250  [key=0, style=solid];
n249 -> n81  [key=2, style=dotted];
n249 -> n208  [key=2, style=dotted];
n250 -> n251  [key=0, style=solid];
n250 -> n81  [key=2, style=dotted];
n250 -> n257  [key=2, style=dotted];
n252 -> n253  [key=0, style=solid];
n241 -> n242  [key=0, style=solid];
n241 -> n255  [key=2, style=dotted];
n241 -> n209  [key=2, style=dotted];
n241 -> n260  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n241 -> n263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n241 -> n267  [key=1, style=dashed, color=darkseagreen4, label=countByStates];
n242 -> n243  [key=0, style=solid];
n242 -> n267  [key=1, style=dashed, color=darkseagreen4, label=string];
n242 -> n244  [key=1, style=dashed, color=darkseagreen4, label=getCountIfExists];
n242 -> n245  [key=1, style=dashed, color=darkseagreen4, label=getCountIfExists];
n242 -> n246  [key=1, style=dashed, color=darkseagreen4, label=getCountIfExists];
n260 -> n261  [key=0, style=solid];
n263 -> n264  [key=0, style=solid];
n267 -> n268  [key=0, style=solid];
n267 -> n269  [key=2, style=dotted];
n270 -> n271  [key=0, style=solid];
n253 -> n237  [key=0, style=bold, color=blue];
n261 -> n262  [key=0, style=solid];
n262 -> n260  [key=0, style=bold, color=blue];
n264 -> n265  [key=0, style=solid];
n265 -> n263  [key=0, style=bold, color=blue];
n266 -> n267  [key=0, style=solid];
n268 -> n266  [key=0, style=bold, color=blue];
n272 -> n270  [key=0, style=bold, color=blue];
n274 -> n275  [key=0, style=solid];
n274 -> n278  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n274 -> n279  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n281 -> n282  [key=0, style=solid];
n281 -> n138  [key=2, style=dotted];
n281 -> n90  [key=2, style=dotted];
n281 -> n300  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n281 -> n283  [key=1, style=dashed, color=darkseagreen4, label=keys];
n281 -> n284  [key=1, style=dashed, color=darkseagreen4, label=keys];
n301 -> n302  [key=0, style=solid];
n301 -> n303  [key=2, style=dotted];
n301 -> n304  [key=2, style=dotted];
n283 -> n284  [key=0, style=solid];
n283 -> n296  [key=2, style=dotted];
n283 -> n209  [key=2, style=dotted];
n283 -> n305  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n283 -> n308  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n283 -> n285  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
n283 -> n286  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
n283 -> n290  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
n275 -> n276  [key=0, style=solid];
n275 -> n91  [key=2, style=dotted];
n275 -> n278  [key=1, style=dashed, color=darkseagreen4, label=dates];
n275 -> n281  [key=1, style=dashed, color=darkseagreen4, label=dates];
n275 -> n289  [key=1, style=dashed, color=darkseagreen4, label=dates];
n275 -> n291  [key=1, style=dashed, color=darkseagreen4, label=dates];
n278 -> n279  [key=0, style=solid];
n278 -> n93  [key=2, style=dotted];
n279 -> n280  [key=0, style=solid];
n279 -> n295  [key=2, style=dotted];
n279 -> n279  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n276 -> n277  [key=0, style=solid];
n276 -> n280  [key=1, style=dashed, color=darkseagreen4, label=i];
n289 -> n290  [key=0, style=solid];
n289 -> n293  [key=0, style=solid];
n291 -> n292  [key=0, style=solid];
n291 -> n297  [key=2, style=dotted];
n277 -> n278  [key=0, style=solid];
n277 -> n281  [key=0, style=solid];
n280 -> n277  [key=0, style=solid];
n280 -> n280  [key=1, style=dashed, color=darkseagreen4, label=i];
n282 -> n283  [key=0, style=solid];
n300 -> n301  [key=0, style=solid];
n284 -> n285  [key=0, style=solid];
n284 -> n287  [key=0, style=solid];
n284 -> n286  [key=1, style=dashed, color=darkseagreen4, label=key];
n305 -> n306  [key=0, style=solid];
n308 -> n309  [key=0, style=solid];
n285 -> n286  [key=0, style=solid];
n285 -> n284  [key=0, style=solid];
n285 -> n269  [key=2, style=dotted];
n286 -> n284  [key=0, style=solid];
n286 -> n297  [key=2, style=dotted];
n290 -> n291  [key=0, style=solid];
n290 -> n299  [key=2, style=dotted];
n287 -> n288  [key=0, style=solid];
n287 -> n298  [key=2, style=dotted];
n287 -> n291  [key=1, style=dashed, color=darkseagreen4, label=result];
n287 -> n293  [key=1, style=dashed, color=darkseagreen4, label=result];
n288 -> n289  [key=0, style=solid];
n288 -> n290  [key=1, style=dashed, color=darkseagreen4, label=i];
n288 -> n291  [key=1, style=dashed, color=darkseagreen4, label=i];
n288 -> n292  [key=1, style=dashed, color=darkseagreen4, label=i];
n293 -> n294  [key=0, style=solid];
n292 -> n289  [key=0, style=solid];
n292 -> n292  [key=1, style=dashed, color=darkseagreen4, label=i];
n294 -> n187  [key=0, style=bold, color=blue];
n302 -> n300  [key=0, style=bold, color=blue];
n306 -> n307  [key=0, style=solid];
n307 -> n305  [key=0, style=bold, color=blue];
n309 -> n310  [key=0, style=solid];
n310 -> n308  [key=0, style=bold, color=blue];
n311 -> n312  [key=0, style=solid];
n311 -> n314  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n311 -> n315  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n311 -> n316  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n318 -> n319  [key=0, style=solid];
n318 -> n138  [key=2, style=dotted];
n318 -> n90  [key=2, style=dotted];
n318 -> n336  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n318 -> n320  [key=1, style=dashed, color=darkseagreen4, label=keys];
n318 -> n321  [key=1, style=dashed, color=darkseagreen4, label=keys];
n337 -> n338  [key=0, style=solid];
n337 -> n339  [key=2, style=dotted];
n320 -> n321  [key=0, style=solid];
n320 -> n296  [key=2, style=dotted];
n320 -> n209  [key=2, style=dotted];
n320 -> n340  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n320 -> n343  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n320 -> n322  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
n320 -> n323  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
n320 -> n327  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
n312 -> n313  [key=0, style=solid];
n312 -> n332  [key=2, style=dotted];
n312 -> n314  [key=1, style=dashed, color=darkseagreen4, label=startDate];
n314 -> n315  [key=0, style=solid];
n314 -> n317  [key=0, style=solid];
n315 -> n316  [key=0, style=solid];
n315 -> n93  [key=2, style=dotted];
n316 -> n314  [key=0, style=solid];
n316 -> n332  [key=2, style=dotted];
n316 -> n316  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n313 -> n314  [key=0, style=solid];
n313 -> n91  [key=2, style=dotted];
n313 -> n315  [key=1, style=dashed, color=darkseagreen4, label=dates];
n313 -> n317  [key=1, style=dashed, color=darkseagreen4, label=dates];
n313 -> n328  [key=1, style=dashed, color=darkseagreen4, label=dates];
n317 -> n318  [key=0, style=solid];
n317 -> n138  [key=2, style=dotted];
n317 -> n90  [key=2, style=dotted];
n317 -> n333  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n317 -> n326  [key=1, style=dashed, color=darkseagreen4, label=stringDates];
n328 -> n329  [key=0, style=solid];
n328 -> n297  [key=2, style=dotted];
n333 -> n334  [key=0, style=solid];
n326 -> n327  [key=0, style=solid];
n326 -> n330  [key=0, style=solid];
n319 -> n320  [key=0, style=solid];
n336 -> n337  [key=0, style=solid];
n321 -> n322  [key=0, style=solid];
n321 -> n324  [key=0, style=solid];
n321 -> n323  [key=1, style=dashed, color=darkseagreen4, label=key];
n340 -> n341  [key=0, style=solid];
n343 -> n344  [key=0, style=solid];
n322 -> n323  [key=0, style=solid];
n322 -> n321  [key=0, style=solid];
n322 -> n269  [key=2, style=dotted];
n323 -> n321  [key=0, style=solid];
n323 -> n297  [key=2, style=dotted];
n327 -> n328  [key=0, style=solid];
n327 -> n299  [key=2, style=dotted];
n324 -> n325  [key=0, style=solid];
n324 -> n298  [key=2, style=dotted];
n324 -> n328  [key=1, style=dashed, color=darkseagreen4, label=result];
n324 -> n330  [key=1, style=dashed, color=darkseagreen4, label=result];
n325 -> n326  [key=0, style=solid];
n325 -> n327  [key=1, style=dashed, color=darkseagreen4, label=i];
n325 -> n328  [key=1, style=dashed, color=darkseagreen4, label=i];
n325 -> n329  [key=1, style=dashed, color=darkseagreen4, label=i];
n330 -> n331  [key=0, style=solid];
n329 -> n326  [key=0, style=solid];
n329 -> n329  [key=1, style=dashed, color=darkseagreen4, label=i];
n331 -> n71  [key=0, style=bold, color=blue];
n334 -> n335  [key=0, style=solid];
n334 -> n303  [key=2, style=dotted];
n335 -> n333  [key=0, style=bold, color=blue];
n338 -> n336  [key=0, style=bold, color=blue];
n341 -> n342  [key=0, style=solid];
n342 -> n340  [key=0, style=bold, color=blue];
n344 -> n345  [key=0, style=solid];
n345 -> n343  [key=0, style=bold, color=blue];
n346 -> n347  [key=0, style=solid];
n346 -> n350  [key=2, style=dotted];
n347 -> n348  [key=0, style=solid];
n347 -> n150  [key=2, style=dotted];
n348 -> n349  [key=0, style=solid];
n349 -> n20  [key=0, style=bold, color=blue];
n351 -> n352  [key=0, style=solid];
n351 -> n358  [key=2, style=dotted];
n351 -> n359  [key=2, style=dotted];
n351 -> n355  [key=1, style=dashed, color=darkseagreen4, label=transaction];
n354 -> n355  [key=0, style=solid];
n354 -> n256  [key=2, style=dotted];
n354 -> n356  [key=1, style=dashed, color=darkseagreen4, label=result];
n352 -> n353  [key=0, style=solid];
n352 -> n360  [key=2, style=dotted];
n352 -> n354  [key=1, style=dashed, color=darkseagreen4, label=connection];
n355 -> n356  [key=0, style=solid];
n355 -> n362  [key=2, style=dotted];
n353 -> n354  [key=0, style=solid];
n353 -> n361  [key=2, style=dotted];
n356 -> n357  [key=0, style=solid];
n357 -> n7  [key=0, style=bold, color=blue];
n363 -> n364  [key=0, style=solid];
n364 -> n365  [key=0, style=solid];
n364 -> n81  [key=2, style=dotted];
n364 -> n90  [key=2, style=dotted];
n365 -> n366  [key=0, style=solid];
n365 -> n367  [key=2, style=dotted];
n365 -> n368  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n366 -> n170  [key=0, style=bold, color=blue];
n368 -> n369  [key=0, style=solid];
n369 -> n370  [key=0, style=solid];
n369 -> n371  [key=2, style=dotted];
n369 -> n104  [key=2, style=dotted];
n370 -> n368  [key=0, style=bold, color=blue];
n372 -> n373  [key=0, style=solid];
n373 -> n374  [key=0, style=solid];
n373 -> n81  [key=2, style=dotted];
n373 -> n257  [key=2, style=dotted];
n374 -> n375  [key=0, style=solid];
n375 -> n11  [key=0, style=bold, color=blue];
n376 -> n377  [key=0, style=solid];
n376 -> n378  [key=1, style=dashed, color=darkseagreen4, label=string];
n377 -> n378  [key=0, style=solid];
n377 -> n383  [key=2, style=dotted];
n377 -> n379  [key=1, style=dashed, color=darkseagreen4, label=data];
n378 -> n379  [key=0, style=solid];
n379 -> n382  [key=0, style=solid];
n379 -> n384  [key=2, style=dotted];
n380 -> n381  [key=0, style=solid];
n381 -> n382  [key=0, style=solid];
n382 -> n376  [key=0, style=bold, color=blue];
n385 -> n386  [key=0, style=solid];
n386 -> n387  [key=0, style=solid];
n386 -> n81  [key=2, style=dotted];
n386 -> n90  [key=2, style=dotted];
n387 -> n388  [key=0, style=solid];
n387 -> n367  [key=2, style=dotted];
n388 -> n48  [key=0, style=bold, color=blue];
n389 -> n390  [key=0, style=solid];
n389 -> n391  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>"];
n389 -> n393  [key=1, style=dashed, color=darkseagreen4, label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
n390 -> n391  [key=0, style=solid];
n390 -> n397  [key=2, style=dotted];
n390 -> n394  [key=1, style=dashed, color=darkseagreen4, label=result];
n390 -> n395  [key=1, style=dashed, color=darkseagreen4, label=result];
n391 -> n392  [key=0, style=solid];
n391 -> n395  [key=0, style=solid];
n391 -> n393  [key=1, style=dashed, color=darkseagreen4, label=job];
n391 -> n394  [key=1, style=dashed, color=darkseagreen4, label=job];
n393 -> n394  [key=0, style=solid];
n393 -> n376  [key=2, style=dotted];
n393 -> n398  [key=2, style=dotted];
n394 -> n391  [key=0, style=solid];
n394 -> n399  [key=2, style=dotted];
n394 -> n400  [key=2, style=dotted];
n394 -> n93  [key=2, style=dotted];
n395 -> n396  [key=0, style=solid];
n395 -> n401  [key=2, style=dotted];
n392 -> n393  [key=0, style=solid];
n392 -> n383  [key=2, style=dotted];
n396 -> n389  [key=0, style=bold, color=blue];
n402 -> n403  [key=0, style=solid];
n403 -> n404  [key=0, style=solid];
n403 -> n81  [key=2, style=dotted];
n403 -> n90  [key=2, style=dotted];
n403 -> n405  [key=1, style=dashed, color=darkseagreen4, label=jobs];
n404 -> n405  [key=0, style=solid];
n404 -> n409  [key=2, style=dotted];
n404 -> n406  [key=1, style=dashed, color=darkseagreen4, label=result];
n404 -> n407  [key=1, style=dashed, color=darkseagreen4, label=result];
n405 -> n406  [key=0, style=solid];
n405 -> n407  [key=0, style=solid];
n406 -> n405  [key=0, style=solid];
n406 -> n410  [key=2, style=dotted];
n406 -> n411  [key=2, style=dotted];
n406 -> n412  [key=2, style=dotted];
n406 -> n211  [key=2, style=dotted];
n406 -> n93  [key=2, style=dotted];
n407 -> n408  [key=0, style=solid];
n407 -> n401  [key=2, style=dotted];
n408 -> n180  [key=0, style=bold, color=blue];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Logging.ILog"];
m0_12 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Logging.ILog"];
m0_12 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Logging.ILog"];
m0_12 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Logging.ILog"];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_19  [key=2, style=dotted];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_19  [key=2, style=dotted];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> n138  [key=2, style=dotted];
m0_15 -> m0_21  [key=2, style=dotted];
m0_15 -> m0_19  [key=2, style=dotted];
m0_15 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_19  [key=2, style=dotted];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_18 -> m0_12  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid, color=red];
m0_1 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid, color=red];
m0_2 -> m0_9  [key=2, style=dotted, color=red];
m0_3 -> m0_4  [key=0, style=solid];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_10  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_11  [key=2, style=dotted];
m0_7 -> m0_0  [key=0, style=bold, color=blue];
m0_22 -> m0_23  [key=0, style=solid];
m0_23 -> m0_24  [key=0, style=solid];
m0_24 -> m0_22  [key=0, style=bold, color=blue];
m0_25 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m0_25 -> m0_2  [key=1, style=dashed, color=red, label="Hangfire.BackgroundJobServerOptions"];
m0_25 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m0_25 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m0_25 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m0_25 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m0_25 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m0_25 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m0_25 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m0_25 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid, color=red];
m1_1 -> m1_30  [key=2, style=dotted];
m1_2 -> m1_3  [key=0, style=solid, color=red];
m1_2 -> m1_31  [key=2, style=dotted, color=red];
m1_3 -> m1_4  [key=0, style=solid, color=red];
m1_3 -> m1_32  [key=2, style=dotted, color=red];
m1_4 -> m1_5  [key=0, style=solid, color=red];
m1_4 -> m1_33  [key=2, style=dotted, color=red];
m1_4 -> m1_6  [key=1, style=dashed, color=red, label=servers];
m1_4 -> m1_9  [key=1, style=dashed, color=red, label=servers];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_30  [key=2, style=dotted];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_8  [key=0, style=solid];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_28  [key=0, style=solid];
m1_9 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label=server];
m1_9 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label=server];
m1_9 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label=server];
m1_9 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label=server];
m1_9 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label=server];
m1_9 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label=server];
m1_9 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label=server];
m1_9 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label=server];
m1_7 -> m1_29  [key=0, style=solid];
m1_7 -> m1_30  [key=2, style=dotted];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_30  [key=2, style=dotted];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_30  [key=2, style=dotted];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_30  [key=2, style=dotted];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_34  [key=2, style=dotted];
m1_11 -> m1_35  [key=2, style=dotted];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_35  [key=2, style=dotted];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> n138  [key=2, style=dotted];
m1_15 -> m1_37  [key=2, style=dotted];
m1_15 -> m1_38  [key=2, style=dotted];
m1_15 -> m1_39  [key=2, style=dotted];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_40  [key=2, style=dotted];
m1_17 -> m1_35  [key=2, style=dotted];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_35  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_27  [key=0, style=solid];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_40  [key=2, style=dotted];
m1_23 -> m1_35  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_35  [key=2, style=dotted];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_30  [key=2, style=dotted];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_30  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_30  [key=2, style=dotted];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_30  [key=2, style=dotted];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_30  [key=2, style=dotted];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_30  [key=2, style=dotted];
m1_27 -> m1_9  [key=0, style=solid];
m1_27 -> m1_30  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_30  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_30  [key=2, style=dotted];
m1_29 -> m1_0  [key=0, style=bold, color=blue];
m1_41 -> m1_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_2  [key=1, style=dashed, color=red, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_22  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m1_41 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.ServersPage"];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_0  [key=0, style=bold, color=blue];
m6_16 -> m6_17  [key=0, style=solid];
m6_16 -> m6_18  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_5  [key=2, style=dotted];
m6_17 -> m6_6  [key=2, style=dotted];
m6_18 -> m6_19  [key=0, style=solid];
m6_18 -> m6_5  [key=2, style=dotted];
m6_18 -> m6_11  [key=2, style=dotted];
m6_19 -> m6_16  [key=0, style=bold, color=blue];
m6_2 -> m6_3  [key=0, style=solid];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_5  [key=2, style=dotted];
m6_3 -> m6_6  [key=2, style=dotted];
m6_4 -> m6_2  [key=0, style=bold, color=blue];
m6_33 -> m6_34  [key=0, style=solid];
m6_34 -> m6_35  [key=0, style=solid];
m6_34 -> m6_5  [key=2, style=dotted];
m6_34 -> m6_28  [key=2, style=dotted];
m6_35 -> m6_36  [key=0, style=solid];
m6_35 -> m6_37  [key=2, style=dotted];
m6_36 -> m6_33  [key=0, style=bold, color=blue];
m6_7 -> m6_8  [key=0, style=solid];
m6_7 -> m6_9  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_8 -> m6_9  [key=0, style=solid];
m6_8 -> m6_6  [key=2, style=dotted];
m6_9 -> m6_10  [key=0, style=solid];
m6_9 -> m6_5  [key=2, style=dotted];
m6_9 -> m6_11  [key=2, style=dotted];
m6_10 -> m6_7  [key=0, style=bold, color=blue];
m6_30 -> m6_31  [key=0, style=solid];
m6_31 -> m6_32  [key=0, style=solid];
m6_31 -> m6_5  [key=2, style=dotted];
m6_31 -> m6_23  [key=2, style=dotted];
m6_32 -> m6_30  [key=0, style=bold, color=blue];
m6_24 -> m6_25  [key=0, style=solid];
m6_25 -> m6_26  [key=0, style=solid];
m6_25 -> m6_5  [key=2, style=dotted];
m6_25 -> m6_28  [key=2, style=dotted];
m6_26 -> m6_27  [key=0, style=solid];
m6_26 -> m6_29  [key=2, style=dotted];
m6_27 -> m6_24  [key=0, style=bold, color=blue];
m6_12 -> m6_13  [key=0, style=solid];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> n304  [key=2, style=dotted];
m6_13 -> m6_6  [key=2, style=dotted];
m6_14 -> m6_12  [key=0, style=bold, color=blue];
m6_44 -> m6_45  [key=0, style=solid];
m6_44 -> m6_46  [key=1, style=dashed, color=darkseagreen4, label=int];
m6_45 -> m6_46  [key=0, style=solid];
m6_45 -> m6_5  [key=2, style=dotted];
m6_45 -> m6_42  [key=2, style=dotted];
m6_46 -> m6_47  [key=0, style=solid];
m6_46 -> m6_43  [key=2, style=dotted];
m6_47 -> m6_44  [key=0, style=bold, color=blue];
m6_20 -> m6_21  [key=0, style=solid];
m6_21 -> m6_22  [key=0, style=solid];
m6_21 -> m6_5  [key=2, style=dotted];
m6_21 -> m6_23  [key=2, style=dotted];
m6_22 -> m6_20  [key=0, style=bold, color=blue];
m6_38 -> m6_39  [key=0, style=solid];
m6_39 -> m6_40  [key=0, style=solid];
m6_39 -> m6_5  [key=2, style=dotted];
m6_39 -> m6_42  [key=2, style=dotted];
m6_40 -> m6_41  [key=0, style=solid];
m6_40 -> m6_43  [key=2, style=dotted];
m6_41 -> m6_38  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_0  [key=0, style=bold, color=blue];
m8_8 -> m8_9  [key=0, style=solid];
m8_9 -> m8_8  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_0  [key=0, style=bold, color=blue];
m8_10 -> m8_11  [key=0, style=solid];
m8_11 -> m8_10  [key=0, style=bold, color=blue];
m8_4 -> m8_5  [key=0, style=solid];
m8_5 -> m8_4  [key=0, style=bold, color=blue];
m8_2 -> m8_3  [key=0, style=solid];
m8_3 -> m8_2  [key=0, style=bold, color=blue];
m8_12 -> m8_13  [key=0, style=solid];
m8_13 -> m8_12  [key=0, style=bold, color=blue];
m8_6 -> m8_7  [key=0, style=solid];
m8_7 -> m8_6  [key=0, style=bold, color=blue];
m10_15 -> m10_16  [key=0, style=solid];
m10_16 -> m10_17  [key=0, style=solid];
m10_16 -> m10_18  [key=2, style=dotted];
m10_17 -> m10_15  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid];
m10_0 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ILongRunningProcess"];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_3  [key=0, style=solid];
m10_3 -> m10_4  [key=0, style=solid];
m10_2 -> m10_4  [key=0, style=solid];
m10_2 -> m10_5  [key=2, style=dotted];
m10_4 -> m10_0  [key=0, style=bold, color=blue];
m10_6 -> m10_7  [key=0, style=solid];
m10_7 -> m10_6  [key=0, style=bold, color=blue];
m10_8 -> m10_9  [key=0, style=solid];
m10_8 -> m10_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m10_8 -> m10_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m10_9 -> m10_10  [key=0, style=solid];
m10_9 -> m10_12  [key=0, style=solid];
m10_10 -> m10_11  [key=0, style=solid];
m10_10 -> m10_13  [key=2, style=dotted];
m10_11 -> m10_9  [key=0, style=solid];
m10_11 -> m10_14  [key=2, style=dotted];
m10_12 -> m10_8  [key=0, style=bold, color=blue];
m10_19 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.InfiniteLoopProcess"];
m10_19 -> m10_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.InfiniteLoopProcess"];
m10_19 -> m10_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.InfiniteLoopProcess"];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_25  [key=2, style=dotted];
m12_2 -> m12_3  [key=0, style=solid];
m12_2 -> m12_26  [key=2, style=dotted];
m12_2 -> m12_5  [key=1, style=dashed, color=darkseagreen4, label=connection];
m12_2 -> m12_18  [key=1, style=dashed, color=darkseagreen4, label=connection];
m12_3 -> m12_4  [key=0, style=solid];
m12_3 -> m12_27  [key=2, style=dotted];
m12_5 -> m12_6  [key=0, style=solid, color=red];
m12_5 -> m12_28  [key=2, style=dotted, color=red];
m12_5 -> m12_29  [key=2, style=dotted, color=red];
m12_5 -> m12_9  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_10  [key=1, style=dashed, color=green, label=hash];
m12_5 -> m12_14  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_15  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_16  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_17  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_21  [key=1, style=dashed, color=green, label=hash];
m12_5 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_18 -> m12_19  [key=0, style=solid, color=red];
m12_18 -> m12_36  [key=2, style=dotted, color=red];
m12_18 -> m12_20  [key=1, style=dashed, color=green, label=stateData];
m12_4 -> m12_5  [key=0, style=solid, color=red];
m12_4 -> m12_24  [key=0, style=solid];
m12_4 -> m12_7  [key=1, style=dashed, color=green, label=id];
m12_4 -> m12_8  [key=1, style=dashed, color=darkseagreen4, label=id];
m12_7 -> m12_4  [key=0, style=solid, color=green];
m12_7 -> m12_30  [key=2, style=dotted, color=green];
m12_7 -> m12_31  [key=2, style=dotted, color=green];
m12_8 -> m12_9  [key=0, style=solid];
m12_8 -> m12_30  [key=2, style=dotted];
m12_8 -> m12_11  [key=1, style=dashed, color=green, label=dto];
m12_8 -> m12_13  [key=1, style=dashed, color=green, label=dto];
m12_8 -> m12_15  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_17  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_18  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_20  [key=1, style=dashed, color=green, label=dto];
m12_8 -> m12_22  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_23  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_6 -> m12_7  [key=0, style=solid, color=green];
m12_6 -> m12_8  [key=0, style=solid];
m12_9 -> m12_10  [key=0, style=solid, color=green];
m12_10 -> m12_11  [key=0, style=solid, color=green];
m12_10 -> m12_32  [key=2, style=dotted, color=green];
m12_14 -> m12_15  [key=0, style=solid, color=red];
m12_14 -> m12_16  [key=0, style=solid, color=red];
m12_14 -> m12_34  [key=2, style=dotted, color=red];
m12_14 -> n53  [key=2, style=dotted];
m12_15 -> m12_16  [key=0, style=solid, color=red];
m12_15 -> m12_35  [key=2, style=dotted, color=red];
m12_16 -> m12_17  [key=0, style=solid];
m12_16 -> m12_21  [key=0, style=solid, color=green];
m12_16 -> m12_34  [key=2, style=dotted];
m12_16 -> n53  [key=2, style=dotted];
m12_17 -> m12_18  [key=0, style=solid, color=red];
m12_21 -> m12_22  [key=0, style=solid, color=green];
m12_21 -> m12_23  [key=0, style=solid, color=green];
m12_21 -> m12_34  [key=2, style=dotted];
m12_21 -> n53  [key=2, style=dotted, color=green];
m12_22 -> m12_23  [key=0, style=solid, color=red];
m12_22 -> m12_35  [key=2, style=dotted];
m12_11 -> m12_12  [key=0, style=solid, color=green];
m12_11 -> m12_14  [key=0, style=solid, color=green];
m12_11 -> m12_33  [key=2, style=dotted, color=green];
m12_13 -> m12_14  [key=0, style=solid, color=green];
m12_20 -> m12_21  [key=0, style=solid, color=green];
m12_23 -> m12_4  [key=0, style=solid, color=red];
m12_23 -> m12_31  [key=2, style=dotted, color=red];
m12_12 -> m12_13  [key=0, style=solid, color=green];
m12_19 -> m12_20  [key=0, style=solid, color=green];
m12_19 -> m12_21  [key=0, style=solid, color=green];
m12_24 -> m12_0  [key=0, style=bold, color=blue];
m12_37 -> m12_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.RecurringJobsPage"];
m12_37 -> m12_7  [key=1, style=dashed, color=green, label="HangFire.Web.Pages.RecurringJobsPage"];
m12_37 -> m12_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.RecurringJobsPage"];
m13_0 -> m13_1  [key=0, style=solid, color=red];
m13_1 -> m13_2  [key=0, style=solid, color=red];
m13_1 -> m13_4  [key=2, style=dotted, color=red];
m13_2 -> m13_3  [key=0, style=solid, color=red];
m13_3 -> m13_0  [key=0, style=bold, color=blue];
m13_17 -> m13_18  [key=0, style=solid, color=red];
m13_18 -> m13_19  [key=0, style=solid, color=red];
m13_18 -> m13_10  [key=2, style=dotted, color=red];
m13_18 -> m13_23  [key=1, style=dashed, color=red, label=factory];
m13_19 -> m13_20  [key=0, style=solid, color=red];
m13_19 -> n81  [key=2, style=dotted, color=red];
m13_19 -> m13_22  [key=1, style=dashed, color=red, label="lambda expression"];
m13_20 -> m13_21  [key=0, style=solid, color=red];
m13_20 -> m13_12  [key=2, style=dotted, color=red];
m13_21 -> m13_17  [key=0, style=bold, color=blue];
m13_5 -> m13_6  [key=0, style=solid, color=red];
m13_6 -> m13_7  [key=0, style=solid, color=red];
m13_6 -> m13_10  [key=2, style=dotted, color=red];
m13_6 -> m13_14  [key=1, style=dashed, color=red, label=factory];
m13_7 -> m13_8  [key=0, style=solid, color=red];
m13_7 -> n81  [key=2, style=dotted, color=red];
m13_7 -> m13_13  [key=1, style=dashed, color=red, label="lambda expression"];
m13_8 -> m13_9  [key=0, style=solid, color=red];
m13_8 -> m13_12  [key=2, style=dotted, color=red];
m13_9 -> m13_5  [key=0, style=bold, color=blue];
m13_25 -> m13_26  [key=0, style=solid, color=red];
m13_26 -> m13_27  [key=0, style=solid, color=red];
m13_26 -> m13_10  [key=2, style=dotted, color=red];
m13_27 -> m13_28  [key=0, style=solid, color=red];
m13_27 -> m13_16  [key=2, style=dotted, color=red];
m13_27 -> m13_29  [key=1, style=dashed, color=red, label=instant];
m13_28 -> m13_29  [key=0, style=solid, color=red];
m13_28 -> m13_31  [key=2, style=dotted, color=red];
m13_28 -> m13_32  [key=2, style=dotted, color=red];
m13_29 -> m13_30  [key=0, style=solid, color=red];
m13_29 -> m13_31  [key=2, style=dotted, color=red];
m13_29 -> m13_32  [key=2, style=dotted, color=red];
m13_30 -> m13_25  [key=0, style=bold, color=blue];
m13_22 -> m13_23  [key=0, style=solid, color=red];
m13_14 -> m13_15  [key=0, style=solid, color=red];
m13_14 -> m13_16  [key=2, style=dotted, color=red];
m13_13 -> m13_14  [key=0, style=solid, color=red];
m13_15 -> m13_13  [key=0, style=bold, color=blue];
m13_23 -> m13_24  [key=0, style=solid, color=red];
m13_23 -> m13_16  [key=2, style=dotted, color=red];
m13_24 -> m13_22  [key=0, style=bold, color=blue];
m13_10 -> m13_33  [key=0, style=solid, color=red];
m13_33 -> m13_34  [key=0, style=solid, color=red];
m13_33 -> m13_35  [key=2, style=dotted, color=red];
m13_34 -> m13_10  [key=0, style=bold, color=blue];
m13_36 -> m13_1  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts"];
m13_36 -> m13_2  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts"];
m13_36 -> m13_7  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts"];
m13_36 -> m13_14  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts"];
m13_36 -> m13_19  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts"];
m13_36 -> m13_23  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts"];
m13_36 -> m13_27  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ScheduleInstantFactoryFacts"];
m13_37 -> m13_14  [key=1, style=dashed, color=red, label=factory];
m13_38 -> m13_23  [key=1, style=dashed, color=red, label=factory];
m14_8 -> m14_9  [key=0, style=solid];
m14_9 -> m14_10  [key=0, style=solid];
m14_9 -> m14_11  [key=2, style=dotted];
m14_10 -> m14_8  [key=0, style=bold, color=blue];
m14_3 -> m14_4  [key=0, style=solid];
m14_4 -> m14_5  [key=0, style=solid];
m14_4 -> n298  [key=2, style=dotted];
m14_4 -> m14_7  [key=2, style=dotted];
m14_5 -> m14_3  [key=0, style=bold, color=blue];
m14_0 -> m14_1  [key=0, style=solid];
m14_1 -> m14_2  [key=0, style=solid];
m14_2 -> m14_0  [key=0, style=bold, color=blue];
m14_12 -> m14_13  [key=0, style=solid];
m14_13 -> m14_14  [key=0, style=solid];
m14_13 -> m14_15  [key=2, style=dotted];
m14_14 -> m14_12  [key=0, style=bold, color=blue];
m14_16 -> m14_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.SucceededState"];
m14_16 -> m14_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.SucceededState"];
m15_51 -> m15_52  [key=0, style=solid];
m15_52 -> m15_53  [key=0, style=solid];
m15_52 -> m15_57  [key=2, style=dotted];
m15_53 -> m15_54  [key=0, style=solid];
m15_53 -> m15_58  [key=2, style=dotted];
m15_54 -> m15_59  [key=2, style=dotted];
m15_54 -> m15_55  [key=0, style=solid];
m15_54 -> m15_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_55 -> m15_59  [key=2, style=dotted];
m15_55 -> m15_56  [key=0, style=solid];
m15_55 -> m15_63  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_56 -> m15_51  [key=0, style=bold, color=blue];
m15_35 -> m15_36  [key=0, style=solid, color=green];
m15_36 -> m15_37  [key=0, style=solid, color=green];
m15_36 -> n81  [key=2, style=dotted, color=green];
m15_36 -> m15_40  [key=1, style=dashed, color=green, label="lambda expression"];
m15_37 -> m15_38  [key=0, style=solid];
m15_37 -> m15_39  [key=2, style=dotted];
m15_38 -> m15_35  [key=0, style=bold, color=blue];
m15_76 -> m15_77  [key=0, style=solid];
m15_77 -> m15_78  [key=0, style=solid];
m15_77 -> m15_17  [key=2, style=dotted];
m15_77 -> m15_18  [key=2, style=dotted];
m15_77 -> m15_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_78 -> m15_79  [key=0, style=solid];
m15_78 -> m15_57  [key=2, style=dotted];
m15_79 -> m15_80  [key=0, style=solid];
m15_79 -> m15_58  [key=2, style=dotted];
m15_80 -> m15_59  [key=2, style=dotted];
m15_80 -> m15_81  [key=0, style=solid];
m15_80 -> m15_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_81 -> m15_76  [key=0, style=bold, color=blue];
m15_44 -> m15_45  [key=0, style=solid, color=green];
m15_45 -> m15_46  [key=0, style=solid, color=green];
m15_45 -> n81  [key=2, style=dotted, color=green];
m15_45 -> m15_48  [key=1, style=dashed, color=green, label="lambda expression"];
m15_46 -> m15_47  [key=0, style=solid];
m15_46 -> m15_39  [key=2, style=dotted];
m15_47 -> m15_44  [key=0, style=bold, color=blue];
m15_67 -> m15_68  [key=0, style=solid];
m15_70 -> m15_71  [key=0, style=solid, color=green];
m15_70 -> m15_59  [key=2, style=dotted, color=green];
m15_70 -> m15_72  [key=1, style=dashed, color=green, label="lambda expression"];
m15_69 -> m15_70  [key=0, style=solid, color=green];
m15_69 -> m15_58  [key=2, style=dotted];
m15_68 -> m15_69  [key=0, style=solid];
m15_68 -> m15_57  [key=2, style=dotted];
m15_71 -> m15_67  [key=0, style=bold, color=blue];
m15_0 -> m15_1  [key=0, style=solid, color=green];
m15_1 -> m15_2  [key=0, style=solid, color=green];
m15_1 -> m15_11  [key=2, style=dotted, color=green];
m15_2 -> m15_3  [key=0, style=solid, color=green];
m15_2 -> m15_12  [key=2, style=dotted, color=green];
m15_3 -> m15_4  [key=0, style=solid, color=green];
m15_3 -> m15_13  [key=2, style=dotted];
m15_4 -> m15_5  [key=0, style=solid, color=green];
m15_4 -> m15_14  [key=2, style=dotted, color=green];
m15_5 -> m15_6  [key=0, style=solid, color=green];
m15_5 -> m15_15  [key=2, style=dotted];
m15_6 -> m15_7  [key=0, style=solid, color=green];
m15_6 -> m15_16  [key=2, style=dotted, color=green];
m15_7 -> m15_8  [key=0, style=solid];
m15_7 -> m15_17  [key=2, style=dotted];
m15_7 -> m15_18  [key=2, style=dotted];
m15_7 -> m15_19  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_8 -> m15_9  [key=0, style=solid];
m15_8 -> m15_17  [key=2, style=dotted];
m15_8 -> m15_18  [key=2, style=dotted];
m15_8 -> m15_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_9 -> m15_10  [key=0, style=solid];
m15_9 -> m15_17  [key=2, style=dotted];
m15_9 -> m15_18  [key=2, style=dotted];
m15_9 -> m15_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_10 -> m15_0  [key=0, style=bold, color=blue];
m15_85 -> m15_86  [key=0, style=solid];
m15_40 -> m15_41  [key=0, style=solid, color=green];
m15_41 -> m15_42  [key=0, style=solid, color=green];
m15_41 -> m15_43  [key=2, style=dotted, color=green];
m15_42 -> m15_40  [key=0, style=bold, color=blue];
m15_48 -> m15_49  [key=0, style=solid, color=green];
m15_49 -> m15_50  [key=0, style=solid, color=green];
m15_49 -> m15_43  [key=2, style=dotted, color=green];
m15_50 -> m15_48  [key=0, style=bold, color=blue];
m15_72 -> m15_73  [key=0, style=solid, color=green];
m15_73 -> m15_74  [key=0, style=solid, color=green];
m15_73 -> n81  [key=2, style=dotted, color=green];
m15_73 -> m15_75  [key=2, style=dotted, color=green];
m15_74 -> m15_72  [key=0, style=bold, color=blue];
m15_19 -> m15_20  [key=0, style=solid];
m15_20 -> n81  [key=2, style=dotted];
m15_20 -> m15_21  [key=0, style=solid];
m15_20 -> m15_23  [key=2, style=dotted];
m15_29 -> n81  [key=2, style=dotted];
m15_29 -> m15_30  [key=0, style=solid];
m15_29 -> m15_31  [key=2, style=dotted];
m15_29 -> m15_32  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_83 -> n81  [key=2, style=dotted];
m15_83 -> m15_84  [key=0, style=solid];
m15_83 -> m15_31  [key=2, style=dotted];
m15_83 -> m15_85  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m15_89 -> n81  [key=2, style=dotted];
m15_89 -> m15_75  [key=2, style=dotted];
m15_89 -> m15_90  [key=0, style=solid];
m15_24 -> m15_25  [key=0, style=solid];
m15_28 -> m15_29  [key=0, style=solid];
m15_60 -> m15_61  [key=0, style=solid];
m15_63 -> m15_64  [key=0, style=solid];
m15_82 -> m15_83  [key=0, style=solid];
m15_88 -> m15_89  [key=0, style=solid];
m15_21 -> m15_19  [key=0, style=bold, color=blue];
m15_30 -> m15_28  [key=0, style=bold, color=blue];
m15_32 -> m15_33  [key=0, style=solid];
m15_84 -> m15_82  [key=0, style=bold, color=blue];
m15_90 -> m15_88  [key=0, style=bold, color=blue];
m15_26 -> m15_24  [key=0, style=bold, color=blue];
m15_25 -> m15_26  [key=0, style=solid];
m15_25 -> m15_27  [key=2, style=dotted];
m15_62 -> m15_60  [key=0, style=bold, color=blue];
m15_61 -> m15_62  [key=0, style=solid];
m15_61 -> m15_27  [key=2, style=dotted];
m15_65 -> m15_63  [key=0, style=bold, color=blue];
m15_64 -> m15_65  [key=0, style=solid];
m15_64 -> m15_66  [key=2, style=dotted];
m15_34 -> m15_32  [key=0, style=bold, color=blue];
m15_33 -> m15_34  [key=0, style=solid];
m15_86 -> m15_87  [key=0, style=solid];
m15_87 -> m15_85  [key=0, style=bold, color=blue];
m15_57 -> m15_91  [key=0, style=solid];
m15_91 -> m15_43  [key=2, style=dotted];
m15_91 -> m15_92  [key=0, style=solid];
m15_92 -> m15_57  [key=0, style=bold, color=blue];
m15_93 -> m15_1  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_2  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_4  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_6  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_36  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_41  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_45  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_49  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_70  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_52  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_54  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_68  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_69  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_77  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_78  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_79  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_80  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m15_93 -> m15_91  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.SchedulePollerFacts"];
m16_36 -> m16_37  [key=0, style=solid, color=red];
m16_37 -> m16_38  [key=0, style=solid, color=red];
m16_37 -> m16_23  [key=2, style=dotted, color=red];
m16_37 -> m16_40  [key=1, style=dashed, color=red, label="lambda expression"];
m16_38 -> m16_39  [key=0, style=solid, color=red];
m16_38 -> m16_24  [key=2, style=dotted, color=red];
m16_39 -> m16_36  [key=0, style=bold, color=blue];
m16_62 -> m16_63  [key=0, style=solid];
m16_63 -> m16_64  [key=0, style=solid, color=red];
m16_63 -> m16_55  [key=2, style=dotted];
m16_64 -> m16_65  [key=0, style=solid, color=red];
m16_64 -> m16_56  [key=2, style=dotted, color=red];
m16_65 -> m16_66  [key=0, style=solid, color=red];
m16_65 -> m16_68  [key=2, style=dotted, color=red];
m16_65 -> m16_57  [key=2, style=dotted, color=red];
m16_65 -> m16_69  [key=1, style=dashed, color=red, label="lambda expression"];
m16_66 -> m16_67  [key=0, style=solid];
m16_66 -> m16_68  [key=2, style=dotted];
m16_66 -> m16_57  [key=2, style=dotted];
m16_66 -> m16_72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_67 -> m16_62  [key=0, style=bold, color=blue];
m16_11 -> m16_12  [key=0, style=solid, color=green];
m16_11 -> m16_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ApplyStateContext"];
m16_12 -> m16_13  [key=0, style=solid, color=green];
m16_12 -> m16_15  [key=1, style=dashed, color=green, label=scheduledState];
m16_13 -> m16_15  [key=0, style=solid, color=green];
m16_13 -> m16_14  [key=0, style=solid];
m16_15 -> m16_16  [key=0, style=solid, color=red];
m16_15 -> m16_20  [key=2, style=dotted, color=green];
m16_16 -> m16_17  [key=0, style=solid, color=red];
m16_16 -> m16_21  [key=2, style=dotted];
m16_16 -> m16_18  [key=2, style=dotted, color=red];
m16_14 -> m16_17  [key=0, style=solid];
m16_14 -> m16_18  [key=2, style=dotted];
m16_14 -> m16_19  [key=2, style=dotted];
m16_17 -> m16_11  [key=0, style=bold, color=blue];
m16_17 -> m16_15  [key=0, style=bold, color=blue];
m16_19 -> m16_20  [key=0, style=solid, color=red];
m16_20 -> m16_21  [key=0, style=solid, color=red];
m16_20 -> m16_23  [key=2, style=dotted, color=red];
m16_20 -> m16_25  [key=1, style=dashed, color=red, label="lambda expression"];
m16_21 -> m16_22  [key=0, style=solid, color=red];
m16_21 -> m16_24  [key=2, style=dotted, color=red];
m16_22 -> m16_19  [key=0, style=bold, color=blue];
m16_6 -> m16_7  [key=0, style=solid, color=red];
m16_6 -> m16_13  [key=2, style=dotted, color=red];
m16_6 -> m16_14  [key=2, style=dotted, color=red];
m16_6 -> m16_15  [key=1, style=dashed, color=red, label="lambda expression"];
m16_7 -> m16_8  [key=0, style=solid, color=green];
m16_7 -> m16_9  [key=2, style=dotted, color=green];
m16_7 -> m16_10  [key=2, style=dotted, color=green];
m16_7 -> m16_0  [key=0, style=bold, color=blue];
m16_8 -> m16_6  [key=0, style=bold, color=blue];
m16_0 -> m16_1  [key=0, style=solid, color=red];
m16_1 -> m16_2  [key=0, style=solid, color=red];
m16_1 -> m16_8  [key=2, style=dotted, color=red];
m16_2 -> m16_3  [key=0, style=solid, color=green];
m16_2 -> m16_9  [key=2, style=dotted, color=red];
m16_3 -> m16_4  [key=0, style=solid, color=green];
m16_3 -> m16_10  [key=2, style=dotted, color=red];
m16_4 -> m16_5  [key=0, style=solid, color=red];
m16_4 -> m16_11  [key=2, style=dotted, color=red];
m16_5 -> m16_6  [key=0, style=solid, color=red];
m16_5 -> n91  [key=2, style=dotted, color=red];
m16_5 -> m16_2  [key=0, style=bold, color=blue];
m16_76 -> m16_77  [key=0, style=solid, color=red];
m16_77 -> m16_78  [key=0, style=solid, color=red];
m16_77 -> m16_85  [key=2, style=dotted, color=red];
m16_77 -> m16_82  [key=1, style=dashed, color=red, label=component1];
m16_78 -> m16_79  [key=0, style=solid, color=red];
m16_78 -> m16_13  [key=2, style=dotted];
m16_78 -> m16_86  [key=2, style=dotted];
m16_78 -> m16_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_78 -> m16_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_82 -> m16_83  [key=0, style=solid, color=red];
m16_82 -> m16_57  [key=2, style=dotted, color=red];
m16_82 -> m16_94  [key=1, style=dashed, color=red, label="lambda expression"];
m16_79 -> m16_80  [key=0, style=solid, color=red];
m16_79 -> m16_85  [key=2, style=dotted, color=red];
m16_79 -> m16_83  [key=1, style=dashed, color=red, label=component2];
m16_80 -> m16_81  [key=0, style=solid, color=red];
m16_80 -> m16_55  [key=2, style=dotted];
m16_83 -> m16_84  [key=0, style=solid, color=red];
m16_83 -> m16_57  [key=2, style=dotted, color=red];
m16_83 -> m16_97  [key=1, style=dashed, color=red, label="lambda expression"];
m16_81 -> m16_82  [key=0, style=solid, color=red];
m16_81 -> m16_56  [key=2, style=dotted, color=red];
m16_84 -> m16_76  [key=0, style=bold, color=blue];
m16_55 -> m16_109  [key=0, style=solid, color=red];
m16_109 -> m16_110  [key=0, style=solid, color=red];
m16_109 -> m16_28  [key=2, style=dotted, color=red];
m16_110 -> m16_55  [key=0, style=bold, color=blue];
m16_85 -> m16_111  [key=0, style=solid, color=red];
m16_111 -> m16_112  [key=0, style=solid, color=red];
m16_111 -> m16_115  [key=2, style=dotted, color=red];
m16_111 -> m16_113  [key=1, style=dashed, color=red, label=mock];
m16_112 -> m16_113  [key=0, style=solid, color=red];
m16_112 -> m16_116  [key=2, style=dotted, color=red];
m16_113 -> m16_114  [key=0, style=solid];
m16_114 -> m16_85  [key=0, style=bold, color=blue];
m16_100 -> m16_101  [key=0, style=solid];
m16_101 -> m16_102  [key=0, style=solid, color=red];
m16_101 -> m16_55  [key=2, style=dotted];
m16_102 -> m16_103  [key=0, style=solid, color=red];
m16_102 -> m16_56  [key=2, style=dotted, color=red];
m16_103 -> m16_104  [key=0, style=solid, color=red];
m16_103 -> m16_57  [key=2, style=dotted, color=red];
m16_103 -> m16_105  [key=1, style=dashed, color=red, label="lambda expression"];
m16_104 -> m16_100  [key=0, style=bold, color=blue];
m16_29 -> m16_30  [key=0, style=solid, color=red];
m16_30 -> m16_31  [key=0, style=solid, color=red];
m16_30 -> m16_23  [key=2, style=dotted, color=red];
m16_30 -> m16_33  [key=1, style=dashed, color=red, label="lambda expression"];
m16_31 -> m16_32  [key=0, style=solid, color=red];
m16_31 -> m16_24  [key=2, style=dotted, color=red];
m16_32 -> m16_29  [key=0, style=bold, color=blue];
m16_50 -> m16_51  [key=0, style=solid];
m16_51 -> m16_52  [key=0, style=solid, color=red];
m16_51 -> m16_55  [key=2, style=dotted];
m16_52 -> m16_53  [key=0, style=solid, color=red];
m16_52 -> m16_56  [key=2, style=dotted, color=red];
m16_53 -> m16_54  [key=0, style=solid, color=red];
m16_53 -> m16_57  [key=2, style=dotted, color=red];
m16_53 -> m16_58  [key=1, style=dashed, color=red, label="lambda expression"];
m16_54 -> m16_50  [key=0, style=bold, color=blue];
m16_43 -> m16_44  [key=0, style=solid, color=red];
m16_44 -> m16_45  [key=0, style=solid, color=red];
m16_44 -> m16_23  [key=2, style=dotted, color=red];
m16_44 -> m16_47  [key=1, style=dashed, color=red, label="lambda expression"];
m16_45 -> m16_46  [key=0, style=solid, color=red];
m16_45 -> m16_24  [key=2, style=dotted, color=red];
m16_46 -> m16_43  [key=0, style=bold, color=blue];
m16_105 -> m16_106  [key=0, style=solid, color=red];
m16_25 -> m16_26  [key=0, style=solid, color=red];
m16_26 -> m16_27  [key=0, style=solid, color=red];
m16_26 -> m16_28  [key=2, style=dotted, color=red];
m16_26 -> m16_3  [key=1, style=dashed, color=green, label="HangFire.States.ScheduledState"];
m16_26 -> m16_7  [key=1, style=dashed, color=green, label="HangFire.States.ScheduledState"];
m16_26 -> m16_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ScheduledState"];
m16_27 -> m16_25  [key=0, style=bold, color=blue];
m16_33 -> m16_34  [key=0, style=solid, color=red];
m16_34 -> m16_35  [key=0, style=solid, color=red];
m16_34 -> m16_28  [key=2, style=dotted, color=red];
m16_35 -> m16_33  [key=0, style=bold, color=blue];
m16_40 -> m16_41  [key=0, style=solid, color=red];
m16_41 -> m16_42  [key=0, style=solid, color=red];
m16_41 -> m16_28  [key=2, style=dotted, color=red];
m16_42 -> m16_40  [key=0, style=bold, color=blue];
m16_47 -> m16_48  [key=0, style=solid, color=red];
m16_48 -> m16_49  [key=0, style=solid, color=red];
m16_48 -> m16_28  [key=2, style=dotted, color=red];
m16_49 -> m16_47  [key=0, style=bold, color=blue];
m16_58 -> m16_59  [key=0, style=solid, color=red];
m16_59 -> m16_60  [key=0, style=solid, color=red];
m16_59 -> m16_61  [key=2, style=dotted, color=red];
m16_60 -> m16_58  [key=0, style=bold, color=blue];
m16_69 -> m16_70  [key=0, style=solid, color=red];
m16_72 -> m16_73  [key=0, style=solid];
m16_70 -> m16_71  [key=0, style=solid, color=red];
m16_70 -> m16_18  [key=2, style=dotted, color=red];
m16_71 -> m16_69  [key=0, style=bold, color=blue];
m16_73 -> m16_74  [key=0, style=solid];
m16_73 -> m16_75  [key=2, style=dotted];
m16_74 -> m16_72  [key=0, style=bold, color=blue];
m16_87 -> m16_88  [key=0, style=solid];
m16_90 -> m16_91  [key=0, style=solid];
m16_94 -> m16_95  [key=0, style=solid, color=red];
m16_97 -> m16_98  [key=0, style=solid, color=red];
m16_88 -> m16_89  [key=0, style=solid];
m16_88 -> m16_23  [key=2, style=dotted];
m16_88 -> m16_56  [key=2, style=dotted];
m16_89 -> m16_87  [key=0, style=bold, color=blue];
m16_91 -> m16_92  [key=0, style=solid];
m16_91 -> m16_93  [key=2, style=dotted];
m16_92 -> m16_90  [key=0, style=bold, color=blue];
m16_95 -> m16_96  [key=0, style=solid, color=red];
m16_95 -> m16_56  [key=2, style=dotted, color=red];
m16_96 -> m16_94  [key=0, style=bold, color=blue];
m16_98 -> m16_99  [key=0, style=solid, color=red];
m16_98 -> m16_56  [key=2, style=dotted, color=red];
m16_99 -> m16_97  [key=0, style=bold, color=blue];
m16_106 -> m16_107  [key=0, style=solid, color=red];
m16_106 -> m16_108  [key=2, style=dotted, color=red];
m16_107 -> m16_105  [key=0, style=bold, color=blue];
m16_117 -> m16_1  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_2  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_3  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_4  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_5  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_6  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_20  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_26  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_30  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_34  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_37  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_41  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_44  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_48  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_51  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_52  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_53  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_59  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_63  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_64  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_65  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_66  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_77  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_79  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_80  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_81  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_82  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_95  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_83  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_98  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_101  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_102  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_103  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_109  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m16_117 -> m16_112  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerBootstrapperFacts"];
m18_18 -> m18_21  [key=2, style=dotted];
m18_18 -> m18_19  [key=0, style=solid];
m18_18 -> m18_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_50 -> m18_51  [key=0, style=solid];
m18_51 -> m18_52  [key=0, style=solid];
m18_51 -> m18_40  [key=2, style=dotted];
m18_52 -> m18_53  [key=0, style=solid];
m18_52 -> m18_41  [key=2, style=dotted];
m18_53 -> m18_54  [key=0, style=solid];
m18_53 -> m18_42  [key=2, style=dotted];
m18_53 -> m18_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_54 -> m18_50  [key=0, style=bold, color=blue];
m18_19 -> m18_22  [key=2, style=dotted];
m18_19 -> m18_20  [key=0, style=solid];
m18_22 -> m18_35  [key=0, style=solid];
m18_22 -> m18_9  [key=2, style=dotted];
m18_8 -> m18_0  [key=0, style=bold, color=blue];
m18_34 -> m18_35  [key=0, style=solid];
m18_35 -> m18_36  [key=0, style=solid];
m18_35 -> m18_40  [key=2, style=dotted];
m18_35 -> m18_20  [key=0, style=bold, color=blue];
m18_36 -> m18_37  [key=0, style=solid];
m18_36 -> m18_41  [key=2, style=dotted];
m18_37 -> m18_38  [key=0, style=solid];
m18_37 -> m18_42  [key=2, style=dotted];
m18_37 -> m18_43  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_38 -> m18_39  [key=0, style=solid];
m18_38 -> m18_42  [key=2, style=dotted];
m18_38 -> m18_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_39 -> m18_34  [key=0, style=bold, color=blue];
m18_10 -> m18_11  [key=0, style=solid, color=red];
m18_21 -> m18_22  [key=0, style=solid];
m18_21 -> m18_23  [key=0, style=solid];
m18_16 -> m18_17  [key=0, style=solid, color=red];
m18_16 -> m18_18  [key=2, style=dotted, color=red];
m18_16 -> m18_19  [key=2, style=dotted, color=red];
m18_14 -> m18_15  [key=0, style=solid, color=green];
m18_14 -> m18_16  [key=2, style=dotted, color=green];
m18_11 -> m18_12  [key=0, style=solid, color=red];
m18_11 -> m18_13  [key=2, style=dotted, color=red];
m18_11 -> m18_14  [key=2, style=dotted, color=red];
m18_12 -> m18_10  [key=0, style=bold, color=blue];
m18_40 -> m18_59  [key=0, style=solid];
m18_59 -> m18_60  [key=0, style=solid];
m18_59 -> m18_26  [key=2, style=dotted];
m18_60 -> m18_40  [key=0, style=bold, color=blue];
m18_23 -> m18_24  [key=0, style=solid];
m18_23 -> n91  [key=2, style=dotted];
m18_23 -> m18_28  [key=1, style=dashed, color=darkseagreen4, label=statesToAppend];
m18_23 -> m18_29  [key=1, style=dashed, color=darkseagreen4, label=statesToAppend];
m18_23 -> m18_31  [key=1, style=dashed, color=darkseagreen4, label=statesToAppend];
m18_13 -> m18_14  [key=0, style=solid, color=green];
m18_15 -> m18_13  [key=0, style=bold, color=blue];
m18_15 -> m18_16  [key=0, style=solid, color=red];
m18_32 -> m18_33  [key=0, style=solid];
m18_32 -> m18_26  [key=2, style=dotted];
m18_32 -> m18_31  [key=0, style=solid];
m18_32 -> m18_40  [key=2, style=dotted];
m18_44 -> m18_16  [key=2, style=dotted];
m18_44 -> m18_45  [key=0, style=solid];
m18_31 -> m18_32  [key=0, style=solid];
m18_31 -> m18_33  [key=0, style=solid];
m18_33 -> m18_31  [key=0, style=bold, color=blue];
m18_33 -> m18_34  [key=0, style=solid];
m18_33 -> m18_41  [key=2, style=dotted];
m18_43 -> m18_44  [key=0, style=solid];
m18_46 -> m18_47  [key=0, style=solid];
m18_55 -> m18_56  [key=0, style=solid];
m18_45 -> m18_43  [key=0, style=bold, color=blue];
m18_24 -> m18_26  [key=2, style=dotted];
m18_24 -> m18_25  [key=0, style=solid];
m18_24 -> m18_29  [key=0, style=solid];
m18_48 -> m18_46  [key=0, style=bold, color=blue];
m18_47 -> m18_48  [key=0, style=solid];
m18_47 -> m18_49  [key=2, style=dotted];
m18_57 -> m18_55  [key=0, style=bold, color=blue];
m18_56 -> m18_57  [key=0, style=solid];
m18_56 -> m18_58  [key=2, style=dotted];
m18_25 -> m18_23  [key=0, style=bold, color=blue];
m18_25 -> m18_26  [key=0, style=solid];
m18_25 -> m18_27  [key=1, style=dashed, color=darkseagreen4, label=oldState];
m18_25 -> m18_28  [key=1, style=dashed, color=darkseagreen4, label=oldState];
m18_42 -> m18_5  [key=1, style=dashed, color=red, label="HangFire.States.ElectStateContext"];
m18_42 -> m18_6  [key=1, style=dashed, color=red, label="HangFire.States.ElectStateContext"];
m18_42 -> m18_7  [key=1, style=dashed, color=red, label="HangFire.States.ElectStateContext"];
m18_42 -> m18_11  [key=1, style=dashed, color=red, label="HangFire.States.ElectStateContext"];
m18_42 -> m18_16  [key=1, style=dashed, color=red, label="HangFire.States.ElectStateContext"];
m18_42 -> m18_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ElectStateContext"];
m18_42 -> m18_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ElectStateContext"];
m18_42 -> m18_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ElectStateContext"];
m18_42 -> m18_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ElectStateContext"];
m18_42 -> m18_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ElectStateContext"];
m18_42 -> m18_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ElectStateContext"];
m18_17 -> m18_18  [key=0, style=solid];
m18_17 -> m18_15  [key=0, style=bold, color=blue];
m18_20 -> m18_17  [key=0, style=bold, color=blue];
m18_20 -> m18_21  [key=0, style=solid];
m18_20 -> m18_24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<HangFire.States.IElectStateFilter>"];
m18_0 -> m18_1  [key=0, style=solid, color=red];
m18_0 -> m18_3  [key=1, style=dashed, color=red, label="HangFire.Storage.IStorageConnection"];
m18_0 -> m18_5  [key=1, style=dashed, color=red, label="HangFire.States.IState"];
m18_0 -> m18_6  [key=1, style=dashed, color=red, label=string];
m18_0 -> m18_7  [key=1, style=dashed, color=red, label="HangFire.Storage.IStorageConnection"];
m18_1 -> m18_2  [key=0, style=solid, color=red];
m18_1 -> m18_3  [key=0, style=solid, color=red];
m18_1 -> m18_7  [key=2, style=dotted];
m18_3 -> m18_4  [key=0, style=solid, color=red];
m18_3 -> m18_5  [key=0, style=solid, color=red];
m18_3 -> m18_9  [key=2, style=dotted];
m18_5 -> m18_6  [key=0, style=solid, color=green];
m18_5 -> m18_11  [key=2, style=dotted, color=green];
m18_5 -> m18_12  [key=2, style=dotted, color=green];
m18_5 -> m18_13  [key=1, style=dashed, color=green, label="lambda expression"];
m18_6 -> m18_7  [key=0, style=solid, color=red];
m18_6 -> m18_0  [key=0, style=bold, color=blue];
m18_7 -> m18_8  [key=0, style=solid, color=red];
m18_2 -> m18_8  [key=0, style=solid, color=red];
m18_2 -> m18_9  [key=2, style=dotted, color=red];
m18_2 -> m18_3  [key=0, style=solid];
m18_4 -> m18_8  [key=0, style=solid, color=red];
m18_4 -> m18_9  [key=2, style=dotted, color=red];
m18_4 -> m18_5  [key=0, style=solid, color=green];
m18_4 -> m18_10  [key=2, style=dotted];
m18_26 -> m18_27  [key=0, style=solid];
m18_26 -> m18_37  [key=2, style=dotted];
m18_28 -> m18_24  [key=0, style=solid];
m18_28 -> m18_38  [key=2, style=dotted];
m18_28 -> m18_29  [key=0, style=solid];
m18_28 -> m18_21  [key=2, style=dotted];
m18_28 -> m18_31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m18_29 -> m18_30  [key=0, style=solid];
m18_29 -> m18_34  [key=0, style=solid];
m18_29 -> m18_22  [key=2, style=dotted];
m18_27 -> m18_28  [key=0, style=solid];
m18_27 -> m18_24  [key=0, style=solid];
m18_30 -> m18_31  [key=0, style=solid];
m18_30 -> m18_39  [key=2, style=dotted];
m18_30 -> m18_32  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m18_30 -> m18_33  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m18_30 -> m18_27  [key=0, style=bold, color=blue];
m18_61 -> m18_5  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_28  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_36  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_37  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_38  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_51  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_52  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m18_61 -> m18_59  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerHeartbeatFacts"];
m19_21 -> m19_23  [key=0, style=solid];
m19_21 -> m19_25  [key=3, color=darkorchid, style=bold, label="method methodReturn bool IsJobAborted"];
m19_21 -> m19_32  [key=3, color=darkorchid, style=bold, label="method methodReturn bool IsJobAborted"];
m19_23 -> m19_24  [key=0, style=solid];
m19_23 -> m19_34  [key=2, style=dotted];
m19_23 -> m19_26  [key=1, style=dashed, color=darkseagreen4, label=state];
m19_23 -> m19_28  [key=1, style=dashed, color=red, label=state];
m19_23 -> m19_30  [key=1, style=dashed, color=darkseagreen4, label=state];
m19_24 -> m19_25  [key=0, style=solid];
m19_24 -> m19_26  [key=0, style=solid];
m19_26 -> m19_27  [key=0, style=solid];
m19_26 -> m19_28  [key=0, style=solid, color=red];
m19_26 -> m19_35  [key=2, style=dotted];
m19_28 -> m19_29  [key=0, style=solid, color=red];
m19_28 -> m19_30  [key=0, style=solid, color=red];
m19_28 -> m19_36  [key=2, style=dotted, color=red];
m19_30 -> m19_31  [key=0, style=solid];
m19_30 -> m19_32  [key=0, style=solid];
m19_30 -> m19_37  [key=2, style=dotted];
m19_25 -> m19_33  [key=0, style=solid];
m19_25 -> m19_23  [key=0, style=bold, color=blue];
m19_27 -> m19_33  [key=0, style=solid];
m19_29 -> m19_33  [key=0, style=solid];
m19_31 -> m19_33  [key=0, style=solid];
m19_31 -> m19_32  [key=0, style=solid];
m19_31 -> m19_35  [key=1, style=dashed, color=darkseagreen4, label=string];
m19_32 -> m19_33  [key=0, style=solid];
m19_33 -> m19_21  [key=0, style=bold, color=blue];
m19_33 -> m19_34  [key=0, style=solid, color=green];
m19_33 -> m19_35  [key=0, style=solid];
m19_33 -> m19_37  [key=2, style=dotted];
m19_34 -> m19_36  [key=0, style=solid, color=green];
m19_34 -> m19_23  [key=2, style=dotted, color=green];
m19_15 -> m19_16  [key=0, style=solid];
m19_16 -> m19_17  [key=0, style=solid];
m19_16 -> m19_20  [key=2, style=dotted];
m19_17 -> m19_18  [key=0, style=solid];
m19_17 -> m19_19  [key=0, style=solid];
m19_17 -> m19_21  [key=2, style=dotted];
m19_18 -> m19_19  [key=0, style=solid];
m19_18 -> m19_22  [key=2, style=dotted];
m19_19 -> m19_15  [key=0, style=bold, color=blue];
m19_36 -> m19_31  [key=0, style=bold, color=blue];
m19_0 -> m19_1  [key=0, style=solid];
m19_0 -> m19_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Storage.IStorageConnection"];
m19_0 -> m19_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.WorkerContext"];
m19_0 -> m19_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m19_0 -> m19_9  [key=1, style=dashed, color=darkseagreen4, label=string];
m19_0 -> m19_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Storage.IStorageConnection"];
m19_0 -> m19_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.WorkerContext"];
m19_0 -> m19_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m19_1 -> m19_2  [key=0, style=solid];
m19_1 -> m19_3  [key=0, style=solid];
m19_3 -> m19_4  [key=0, style=solid];
m19_3 -> m19_5  [key=0, style=solid];
m19_5 -> m19_6  [key=0, style=solid];
m19_5 -> m19_7  [key=0, style=solid];
m19_7 -> m19_8  [key=0, style=solid];
m19_7 -> m19_9  [key=0, style=solid];
m19_9 -> m19_10  [key=0, style=solid];
m19_10 -> m19_11  [key=0, style=solid];
m19_11 -> m19_12  [key=0, style=solid];
m19_12 -> m19_13  [key=0, style=solid];
m19_2 -> m19_13  [key=0, style=solid];
m19_2 -> m19_14  [key=2, style=dotted];
m19_4 -> m19_13  [key=0, style=solid];
m19_4 -> m19_14  [key=2, style=dotted];
m19_6 -> m19_13  [key=0, style=solid];
m19_6 -> m19_14  [key=2, style=dotted];
m19_8 -> m19_13  [key=0, style=solid];
m19_8 -> m19_14  [key=2, style=dotted];
m19_13 -> m19_0  [key=0, style=bold, color=blue];
m19_39 -> m19_42  [key=1, style=dashed, color=darkseagreen4, label=string];
m19_39 -> m19_40  [key=0, style=solid];
m19_42 -> m19_31  [key=2, style=dotted];
m19_42 -> m19_43  [key=0, style=solid];
m19_40 -> m19_42  [key=0, style=solid];
m19_40 -> m19_41  [key=0, style=solid];
m19_40 -> m19_44  [key=2, style=dotted];
m19_41 -> m19_43  [key=0, style=solid];
m19_43 -> m19_39  [key=0, style=bold, color=blue];
m19_35 -> m19_36  [key=0, style=solid];
m19_35 -> m19_38  [key=2, style=dotted];
m19_38 -> m19_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerJobCancellationToken"];
m19_38 -> m19_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerJobCancellationToken"];
m19_38 -> m19_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerJobCancellationToken"];
m19_38 -> m19_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerJobCancellationToken"];
m19_38 -> m19_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerJobCancellationToken"];
m19_38 -> m19_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerJobCancellationToken"];
m19_38 -> m19_23  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerJobCancellationToken"];
m19_38 -> m19_28  [key=1, style=dashed, color=red, label="Hangfire.Server.ServerJobCancellationToken"];
m19_38 -> m19_30  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerJobCancellationToken"];
m20_6 -> m20_7  [key=0, style=solid];
m20_7 -> m20_8  [key=0, style=solid];
m20_7 -> n81  [key=2, style=dotted];
m20_7 -> m20_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_8 -> m20_9  [key=0, style=solid];
m20_8 -> m20_11  [key=2, style=dotted];
m20_9 -> m20_6  [key=0, style=bold, color=blue];
m20_95 -> m20_96  [key=0, style=solid];
m20_96 -> m20_97  [key=0, style=solid];
m20_96 -> n81  [key=2, style=dotted];
m20_96 -> m20_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_97 -> m20_98  [key=0, style=solid];
m20_97 -> m20_11  [key=2, style=dotted];
m20_98 -> m20_95  [key=0, style=bold, color=blue];
m20_52 -> m20_53  [key=0, style=solid];
m20_53 -> m20_54  [key=0, style=solid];
m20_53 -> n81  [key=2, style=dotted];
m20_53 -> m20_56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_54 -> m20_55  [key=0, style=solid];
m20_54 -> m20_11  [key=2, style=dotted];
m20_55 -> m20_52  [key=0, style=bold, color=blue];
m20_41 -> m20_194  [key=0, style=solid];
m20_194 -> m20_41  [key=0, style=bold, color=blue];
m20_180 -> m20_181  [key=0, style=solid];
m20_181 -> m20_182  [key=0, style=solid];
m20_181 -> m20_150  [key=2, style=dotted];
m20_181 -> n81  [key=2, style=dotted];
m20_181 -> m20_184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_182 -> m20_183  [key=0, style=solid];
m20_182 -> m20_24  [key=2, style=dotted];
m20_182 -> m20_187  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_183 -> m20_180  [key=0, style=bold, color=blue];
m20_20 -> m20_21  [key=0, style=solid];
m20_21 -> m20_22  [key=0, style=solid, color=red];
m20_21 -> m20_15  [key=2, style=dotted];
m20_21 -> m20_25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_22 -> m20_23  [key=0, style=solid, color=red];
m20_22 -> m20_24  [key=2, style=dotted, color=red];
m20_22 -> m20_28  [key=1, style=dashed, color=red, label="lambda expression"];
m20_23 -> m20_20  [key=0, style=bold, color=blue];
m20_119 -> m20_120  [key=0, style=solid];
m20_120 -> m20_121  [key=0, style=solid];
m20_120 -> n81  [key=2, style=dotted];
m20_120 -> m20_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_121 -> m20_122  [key=0, style=solid];
m20_121 -> m20_11  [key=2, style=dotted];
m20_121 -> m20_144  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.IJobCancellationToken token"];
m20_122 -> m20_119  [key=0, style=bold, color=blue];
m20_106 -> m20_107  [key=0, style=solid];
m20_107 -> m20_108  [key=0, style=solid];
m20_107 -> m20_67  [key=2, style=dotted];
m20_107 -> m20_110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_108 -> m20_109  [key=0, style=solid];
m20_108 -> m20_24  [key=2, style=dotted];
m20_108 -> m20_113  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_108 -> m20_144  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.IJobCancellationToken token"];
m20_109 -> m20_106  [key=0, style=bold, color=blue];
m20_169 -> m20_170  [key=0, style=solid];
m20_170 -> m20_171  [key=0, style=solid];
m20_170 -> n81  [key=2, style=dotted];
m20_170 -> m20_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_171 -> m20_172  [key=0, style=solid];
m20_171 -> m20_11  [key=2, style=dotted];
m20_172 -> m20_169  [key=0, style=bold, color=blue];
m20_19 -> m20_193  [key=0, style=solid];
m20_193 -> m20_19  [key=0, style=bold, color=blue];
m20_190 -> m20_191  [key=0, style=solid];
m20_12 -> m20_13  [key=0, style=solid];
m20_13 -> m20_14  [key=0, style=solid];
m20_13 -> m20_15  [key=2, style=dotted];
m20_13 -> m20_16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_14 -> m20_12  [key=0, style=bold, color=blue];
m20_16 -> m20_17  [key=0, style=solid];
m20_17 -> m20_18  [key=0, style=solid];
m20_17 -> m20_19  [key=2, style=dotted];
m20_18 -> m20_16  [key=0, style=bold, color=blue];
m20_25 -> m20_26  [key=0, style=solid];
m20_28 -> m20_29  [key=0, style=solid, color=red];
m20_26 -> m20_27  [key=0, style=solid];
m20_26 -> m20_19  [key=2, style=dotted];
m20_27 -> m20_25  [key=0, style=bold, color=blue];
m20_29 -> m20_30  [key=0, style=solid, color=red];
m20_29 -> n81  [key=2, style=dotted, color=red];
m20_29 -> m20_15  [key=2, style=dotted, color=red];
m20_30 -> m20_28  [key=0, style=bold, color=blue];
m20_35 -> m20_36  [key=0, style=solid];
m20_36 -> m20_37  [key=0, style=solid];
m20_36 -> n81  [key=2, style=dotted];
m20_36 -> m20_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_37 -> m20_35  [key=0, style=bold, color=blue];
m20_38 -> m20_39  [key=0, style=solid];
m20_39 -> m20_40  [key=0, style=solid];
m20_39 -> m20_41  [key=2, style=dotted];
m20_40 -> m20_38  [key=0, style=bold, color=blue];
m20_46 -> m20_47  [key=0, style=solid];
m20_49 -> m20_50  [key=0, style=solid];
m20_47 -> m20_48  [key=0, style=solid];
m20_47 -> m20_41  [key=2, style=dotted];
m20_48 -> m20_46  [key=0, style=bold, color=blue];
m20_50 -> m20_51  [key=0, style=solid];
m20_50 -> n81  [key=2, style=dotted];
m20_50 -> m20_15  [key=2, style=dotted];
m20_51 -> m20_49  [key=0, style=bold, color=blue];
m20_56 -> m20_57  [key=0, style=solid];
m20_57 -> m20_58  [key=0, style=solid];
m20_57 -> m20_59  [key=2, style=dotted];
m20_57 -> m20_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_58 -> m20_56  [key=0, style=bold, color=blue];
m20_60 -> m20_61  [key=0, style=solid];
m20_61 -> m20_62  [key=0, style=solid];
m20_61 -> m20_19  [key=2, style=dotted];
m20_62 -> m20_60  [key=0, style=bold, color=blue];
m20_68 -> m20_69  [key=0, style=solid];
m20_71 -> m20_72  [key=0, style=solid];
m20_69 -> m20_70  [key=0, style=solid];
m20_69 -> m20_19  [key=2, style=dotted];
m20_70 -> m20_68  [key=0, style=bold, color=blue];
m20_72 -> m20_73  [key=0, style=solid];
m20_72 -> n81  [key=2, style=dotted];
m20_72 -> m20_15  [key=2, style=dotted];
m20_73 -> m20_71  [key=0, style=bold, color=blue];
m20_78 -> m20_79  [key=0, style=solid];
m20_79 -> m20_80  [key=0, style=solid];
m20_79 -> m20_81  [key=2, style=dotted];
m20_79 -> m20_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_80 -> m20_78  [key=0, style=bold, color=blue];
m20_82 -> m20_83  [key=0, style=solid];
m20_83 -> m20_84  [key=0, style=solid];
m20_83 -> m20_41  [key=2, style=dotted];
m20_84 -> m20_82  [key=0, style=bold, color=blue];
m20_89 -> m20_90  [key=0, style=solid];
m20_92 -> m20_93  [key=0, style=solid, color=red];
m20_90 -> m20_91  [key=0, style=solid];
m20_90 -> m20_41  [key=2, style=dotted];
m20_91 -> m20_89  [key=0, style=bold, color=blue];
m20_93 -> m20_94  [key=0, style=solid, color=red];
m20_93 -> n81  [key=2, style=dotted, color=red];
m20_93 -> m20_15  [key=2, style=dotted, color=red];
m20_94 -> m20_92  [key=0, style=bold, color=blue];
m20_99 -> m20_100  [key=0, style=solid];
m20_100 -> m20_101  [key=0, style=solid];
m20_100 -> m20_102  [key=2, style=dotted];
m20_100 -> m20_103  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_101 -> m20_99  [key=0, style=bold, color=blue];
m20_103 -> m20_104  [key=0, style=solid];
m20_104 -> m20_105  [key=0, style=solid];
m20_104 -> m20_19  [key=2, style=dotted];
m20_105 -> m20_103  [key=0, style=bold, color=blue];
m20_110 -> m20_111  [key=0, style=solid];
m20_113 -> m20_114  [key=0, style=solid];
m20_111 -> m20_112  [key=0, style=solid];
m20_111 -> m20_19  [key=2, style=dotted];
m20_112 -> m20_110  [key=0, style=bold, color=blue];
m20_114 -> m20_115  [key=0, style=solid];
m20_114 -> n81  [key=2, style=dotted];
m20_114 -> m20_15  [key=2, style=dotted];
m20_114 -> m20_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_115 -> m20_113  [key=0, style=bold, color=blue];
m20_116 -> m20_117  [key=0, style=solid];
m20_117 -> m20_118  [key=0, style=solid];
m20_118 -> m20_116  [key=0, style=bold, color=blue];
m20_123 -> m20_124  [key=0, style=solid];
m20_124 -> m20_125  [key=0, style=solid];
m20_124 -> m20_126  [key=2, style=dotted];
m20_124 -> m20_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_125 -> m20_123  [key=0, style=bold, color=blue];
m20_127 -> m20_128  [key=0, style=solid];
m20_128 -> m20_129  [key=0, style=solid];
m20_128 -> m20_41  [key=2, style=dotted];
m20_129 -> m20_127  [key=0, style=bold, color=blue];
m20_134 -> m20_135  [key=0, style=solid];
m20_137 -> m20_138  [key=0, style=solid];
m20_135 -> m20_136  [key=0, style=solid];
m20_135 -> m20_41  [key=2, style=dotted];
m20_136 -> m20_134  [key=0, style=bold, color=blue];
m20_138 -> m20_139  [key=0, style=solid];
m20_138 -> n81  [key=2, style=dotted];
m20_138 -> m20_15  [key=2, style=dotted];
m20_138 -> m20_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_139 -> m20_137  [key=0, style=bold, color=blue];
m20_140 -> m20_141  [key=0, style=solid];
m20_141 -> m20_142  [key=0, style=solid];
m20_142 -> m20_140  [key=0, style=bold, color=blue];
m20_147 -> m20_148  [key=0, style=solid];
m20_148 -> m20_149  [key=0, style=solid];
m20_148 -> m20_150  [key=2, style=dotted];
m20_148 -> m20_151  [key=2, style=dotted];
m20_148 -> m20_152  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_149 -> m20_147  [key=0, style=bold, color=blue];
m20_152 -> m20_153  [key=0, style=solid];
m20_153 -> m20_154  [key=0, style=solid];
m20_153 -> m20_19  [key=2, style=dotted];
m20_154 -> m20_152  [key=0, style=bold, color=blue];
m20_160 -> m20_161  [key=0, style=solid];
m20_163 -> m20_164  [key=0, style=solid];
m20_161 -> m20_162  [key=0, style=solid];
m20_161 -> m20_19  [key=2, style=dotted];
m20_162 -> m20_160  [key=0, style=bold, color=blue];
m20_164 -> m20_165  [key=0, style=solid];
m20_164 -> n81  [key=2, style=dotted];
m20_164 -> m20_15  [key=2, style=dotted];
m20_164 -> m20_166  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_165 -> m20_163  [key=0, style=bold, color=blue];
m20_166 -> m20_167  [key=0, style=solid];
m20_167 -> m20_168  [key=0, style=solid];
m20_168 -> m20_166  [key=0, style=bold, color=blue];
m20_173 -> m20_174  [key=0, style=solid];
m20_174 -> m20_175  [key=0, style=solid];
m20_174 -> m20_150  [key=2, style=dotted];
m20_174 -> m20_176  [key=2, style=dotted];
m20_174 -> m20_177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_175 -> m20_173  [key=0, style=bold, color=blue];
m20_177 -> m20_178  [key=0, style=solid];
m20_178 -> m20_179  [key=0, style=solid];
m20_178 -> m20_41  [key=2, style=dotted];
m20_179 -> m20_177  [key=0, style=bold, color=blue];
m20_184 -> m20_185  [key=0, style=solid];
m20_187 -> m20_188  [key=0, style=solid];
m20_185 -> m20_186  [key=0, style=solid];
m20_185 -> m20_41  [key=2, style=dotted];
m20_186 -> m20_184  [key=0, style=bold, color=blue];
m20_188 -> m20_189  [key=0, style=solid];
m20_188 -> n81  [key=2, style=dotted];
m20_188 -> m20_15  [key=2, style=dotted];
m20_188 -> m20_190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_189 -> m20_187  [key=0, style=bold, color=blue];
m20_191 -> m20_192  [key=0, style=solid];
m20_192 -> m20_190  [key=0, style=bold, color=blue];
m20_74 -> m20_75  [key=0, style=solid];
m20_75 -> m20_76  [key=0, style=solid];
m20_75 -> n81  [key=2, style=dotted];
m20_75 -> m20_78  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_76 -> m20_77  [key=0, style=solid];
m20_76 -> m20_11  [key=2, style=dotted];
m20_76 -> m20_144  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.IJobCancellationToken token"];
m20_77 -> m20_74  [key=0, style=bold, color=blue];
m20_85 -> m20_86  [key=0, style=solid];
m20_86 -> m20_87  [key=0, style=solid, color=red];
m20_86 -> n81  [key=2, style=dotted];
m20_86 -> m20_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_87 -> m20_88  [key=0, style=solid, color=red];
m20_87 -> m20_24  [key=2, style=dotted, color=red];
m20_87 -> m20_92  [key=1, style=dashed, color=red, label="lambda expression"];
m20_88 -> m20_85  [key=0, style=bold, color=blue];
m20_42 -> m20_43  [key=0, style=solid];
m20_43 -> m20_44  [key=0, style=solid];
m20_43 -> n81  [key=2, style=dotted];
m20_43 -> m20_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_44 -> m20_45  [key=0, style=solid];
m20_44 -> m20_24  [key=2, style=dotted];
m20_44 -> m20_49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_45 -> m20_42  [key=0, style=bold, color=blue];
m20_63 -> m20_64  [key=0, style=solid];
m20_64 -> m20_65  [key=0, style=solid];
m20_64 -> m20_67  [key=2, style=dotted];
m20_64 -> m20_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_65 -> m20_66  [key=0, style=solid];
m20_65 -> m20_24  [key=2, style=dotted];
m20_65 -> m20_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_66 -> m20_63  [key=0, style=bold, color=blue];
m20_0 -> m20_1  [key=0, style=solid, color=red];
m20_0 -> m20_0  [key=3, color=darkorchid, style=bold, label="Field variable string JobId"];
m20_1 -> m20_2  [key=0, style=solid, color=red];
m20_1 -> m20_4  [key=2, style=dotted, color=red];
m20_2 -> m20_3  [key=0, style=solid, color=red];
m20_2 -> m20_5  [key=2, style=dotted, color=red];
m20_3 -> m20_0  [key=0, style=bold, color=blue];
m20_155 -> m20_156  [key=0, style=solid];
m20_156 -> m20_157  [key=0, style=solid];
m20_156 -> m20_150  [key=2, style=dotted];
m20_156 -> m20_159  [key=2, style=dotted];
m20_156 -> m20_160  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_157 -> m20_158  [key=0, style=solid];
m20_157 -> m20_24  [key=2, style=dotted];
m20_157 -> m20_163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_158 -> m20_155  [key=0, style=bold, color=blue];
m20_143 -> m20_144  [key=0, style=solid];
m20_144 -> m20_145  [key=0, style=solid];
m20_144 -> n81  [key=2, style=dotted];
m20_144 -> m20_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_145 -> m20_146  [key=0, style=solid];
m20_145 -> m20_11  [key=2, style=dotted];
m20_146 -> m20_143  [key=0, style=bold, color=blue];
m20_31 -> m20_32  [key=0, style=solid];
m20_32 -> m20_33  [key=0, style=solid];
m20_32 -> n81  [key=2, style=dotted];
m20_32 -> m20_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_33 -> m20_34  [key=0, style=solid];
m20_33 -> m20_11  [key=2, style=dotted];
m20_34 -> m20_31  [key=0, style=bold, color=blue];
m20_130 -> m20_131  [key=0, style=solid];
m20_131 -> m20_132  [key=0, style=solid];
m20_131 -> n81  [key=2, style=dotted];
m20_131 -> m20_134  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_132 -> m20_133  [key=0, style=solid];
m20_132 -> m20_24  [key=2, style=dotted];
m20_132 -> m20_137  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m20_132 -> m20_144  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.IJobCancellationToken token"];
m20_133 -> m20_130  [key=0, style=bold, color=blue];
m20_195 -> m20_1  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_2  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_22  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_29  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_50  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_65  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_86  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_87  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_107  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_108  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_131  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_132  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_156  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_157  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_181  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m20_195 -> m20_182  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.BackgroundJobClientExtensionsFacts"];
m21_0 -> m21_1  [key=0, style=solid];
m21_0 -> m21_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServer"];
m21_0 -> m21_3  [key=1, style=dashed, color=darkseagreen4, label=IAppBuilder];
m21_0 -> m21_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServer"];
m21_1 -> m21_2  [key=0, style=solid];
m21_1 -> m21_8  [key=2, style=dotted];
m21_2 -> m21_3  [key=0, style=solid];
m21_2 -> m21_9  [key=2, style=dotted];
m21_3 -> m21_4  [key=0, style=solid];
m21_3 -> m21_10  [key=2, style=dotted];
m21_6 -> m21_7  [key=0, style=solid];
m21_6 -> m21_12  [key=2, style=dotted];
m21_4 -> m21_5  [key=0, style=solid];
m21_4 -> n81  [key=2, style=dotted];
m21_4 -> m21_6  [key=1, style=dashed, color=darkseagreen4, label=token];
m21_5 -> m21_6  [key=0, style=solid];
m21_5 -> m21_7  [key=0, style=solid];
m21_7 -> m21_0  [key=0, style=bold, color=blue];
m22_0 -> m22_1  [key=0, style=solid, color=red];
m22_1 -> m22_2  [key=0, style=solid, color=red];
m22_1 -> m22_8  [key=2, style=dotted, color=red];
m22_2 -> m22_3  [key=0, style=solid, color=red];
m22_2 -> m22_9  [key=2, style=dotted, color=red];
m22_3 -> m22_4  [key=0, style=solid, color=red];
m22_3 -> m22_10  [key=2, style=dotted];
m22_4 -> m22_5  [key=0, style=solid, color=red];
m22_4 -> m22_11  [key=2, style=dotted, color=red];
m22_5 -> m22_6  [key=0, style=solid, color=red];
m22_5 -> m22_12  [key=2, style=dotted, color=red];
m22_6 -> m22_7  [key=0, style=solid, color=red];
m22_6 -> m22_13  [key=2, style=dotted, color=red];
m22_6 -> m22_14  [key=2, style=dotted, color=red];
m22_6 -> m22_15  [key=1, style=dashed, color=red, label="lambda expression"];
m22_7 -> m22_0  [key=0, style=bold, color=blue];
m22_50 -> m22_51  [key=0, style=solid];
m22_51 -> m22_52  [key=0, style=solid, color=red];
m22_51 -> m22_13  [key=2, style=dotted];
m22_51 -> m22_14  [key=2, style=dotted];
m22_51 -> m22_56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m22_52 -> m22_53  [key=0, style=solid, color=red];
m22_52 -> m22_40  [key=2, style=dotted, color=red];
m22_53 -> m22_54  [key=0, style=solid, color=red];
m22_53 -> m22_41  [key=2, style=dotted, color=red];
m22_54 -> m22_55  [key=0, style=solid];
m22_54 -> m22_42  [key=2, style=dotted];
m22_54 -> m22_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m22_55 -> m22_50  [key=0, style=bold, color=blue];
m22_19 -> m22_20  [key=0, style=solid, color=red];
m22_20 -> m22_21  [key=0, style=solid, color=red];
m22_20 -> n81  [key=2, style=dotted, color=red];
m22_20 -> m22_23  [key=1, style=dashed, color=red, label="lambda expression"];
m22_21 -> m22_19  [key=0, style=bold, color=blue];
m22_40 -> m22_63  [key=0, style=solid, color=red];
m22_63 -> m22_64  [key=0, style=solid, color=red];
m22_63 -> m22_33  [key=2, style=dotted, color=red];
m22_64 -> m22_40  [key=0, style=bold, color=blue];
m22_60 -> m22_61  [key=0, style=solid];
m22_15 -> m22_16  [key=0, style=solid, color=red];
m22_16 -> m22_17  [key=0, style=solid, color=red];
m22_16 -> m22_18  [key=2, style=dotted, color=red];
m22_17 -> m22_15  [key=0, style=bold, color=blue];
m22_23 -> m22_24  [key=0, style=solid, color=red];
m22_24 -> m22_25  [key=0, style=solid, color=red];
m22_24 -> m22_26  [key=2, style=dotted, color=red];
m22_25 -> m22_23  [key=0, style=bold, color=blue];
m22_30 -> m22_31  [key=0, style=solid, color=red];
m22_31 -> m22_32  [key=0, style=solid, color=red];
m22_31 -> m22_33  [key=2, style=dotted, color=red];
m22_32 -> m22_30  [key=0, style=bold, color=blue];
m22_43 -> m22_44  [key=0, style=solid, color=red];
m22_46 -> m22_47  [key=0, style=solid, color=red];
m22_44 -> m22_45  [key=0, style=solid, color=red];
m22_44 -> m22_18  [key=2, style=dotted, color=red];
m22_45 -> m22_43  [key=0, style=bold, color=blue];
m22_47 -> m22_48  [key=0, style=solid, color=red];
m22_47 -> m22_49  [key=2, style=dotted, color=red];
m22_48 -> m22_46  [key=0, style=bold, color=blue];
m22_56 -> m22_57  [key=0, style=solid];
m22_57 -> m22_58  [key=0, style=solid];
m22_57 -> n81  [key=2, style=dotted];
m22_57 -> m22_59  [key=2, style=dotted];
m22_58 -> m22_56  [key=0, style=bold, color=blue];
m22_61 -> m22_62  [key=0, style=solid];
m22_61 -> m22_59  [key=2, style=dotted];
m22_62 -> m22_60  [key=0, style=bold, color=blue];
m22_27 -> m22_28  [key=0, style=solid, color=red];
m22_28 -> m22_29  [key=0, style=solid, color=red];
m22_28 -> n81  [key=2, style=dotted, color=red];
m22_28 -> m22_30  [key=1, style=dashed, color=red, label="lambda expression"];
m22_29 -> m22_27  [key=0, style=bold, color=blue];
m22_34 -> m22_35  [key=0, style=solid, color=red];
m22_35 -> m22_36  [key=0, style=solid, color=red];
m22_35 -> m22_40  [key=2, style=dotted, color=red];
m22_36 -> m22_37  [key=0, style=solid, color=red];
m22_36 -> m22_41  [key=2, style=dotted, color=red];
m22_37 -> m22_38  [key=0, style=solid, color=red];
m22_37 -> m22_42  [key=2, style=dotted, color=red];
m22_37 -> m22_43  [key=1, style=dashed, color=red, label="lambda expression"];
m22_38 -> m22_39  [key=0, style=solid, color=red];
m22_38 -> m22_42  [key=2, style=dotted, color=red];
m22_38 -> m22_46  [key=1, style=dashed, color=red, label="lambda expression"];
m22_39 -> m22_34  [key=0, style=bold, color=blue];
m22_65 -> m22_1  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_2  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_4  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_5  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_6  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_28  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_31  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_35  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_36  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_37  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_38  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_51  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_52  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_53  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_54  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_61  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m22_65 -> m22_63  [key=1, style=dashed, color=red, label="Hangfire.Core.Tests.Server.ServerWatchdogFacts"];
m23_11 -> m23_12  [key=0, style=solid];
m23_12 -> m23_13  [key=0, style=solid];
m23_12 -> m23_14  [key=2, style=dotted];
m23_13 -> m23_11  [key=0, style=bold, color=blue];
m23_8 -> m23_9  [key=0, style=solid];
m23_9 -> m23_10  [key=0, style=solid];
m23_10 -> m23_8  [key=0, style=bold, color=blue];
m23_21 -> m23_22  [key=0, style=solid];
m23_22 -> m23_23  [key=0, style=solid];
m23_23 -> m23_21  [key=0, style=bold, color=blue];
m23_18 -> m23_19  [key=0, style=solid];
m23_19 -> m23_20  [key=0, style=solid];
m23_20 -> m23_18  [key=0, style=bold, color=blue];
m23_27 -> m23_28  [key=0, style=solid];
m23_28 -> m23_29  [key=0, style=solid];
m23_28 -> m23_14  [key=2, style=dotted];
m23_29 -> m23_27  [key=0, style=bold, color=blue];
m23_0 -> m23_1  [key=0, style=solid];
m23_1 -> m23_2  [key=0, style=solid];
m23_1 -> n91  [key=2, style=dotted];
m23_2 -> m23_3  [key=0, style=solid];
m23_3 -> m23_4  [key=0, style=solid];
m23_4 -> m23_5  [key=0, style=solid];
m23_5 -> m23_6  [key=0, style=solid];
m23_5 -> n91  [key=2, style=dotted];
m23_6 -> m23_0  [key=0, style=bold, color=blue];
m23_15 -> m23_16  [key=0, style=solid];
m23_16 -> m23_17  [key=0, style=solid];
m23_17 -> m23_15  [key=0, style=bold, color=blue];
m23_24 -> m23_25  [key=0, style=solid];
m23_25 -> m23_26  [key=0, style=solid];
m23_26 -> m23_24  [key=0, style=bold, color=blue];
m23_30 -> m23_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BootstrapperConfiguration"];
m23_30 -> m23_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BootstrapperConfiguration"];
m23_30 -> m23_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BootstrapperConfiguration"];
m23_30 -> m23_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BootstrapperConfiguration"];
m23_30 -> m23_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BootstrapperConfiguration"];
m23_30 -> m23_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BootstrapperConfiguration"];
m23_30 -> m23_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BootstrapperConfiguration"];
m23_30 -> m23_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BootstrapperConfiguration"];
m23_30 -> m23_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BootstrapperConfiguration"];
m23_30 -> m23_22  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BootstrapperConfiguration"];
m23_30 -> m23_25  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BootstrapperConfiguration"];
m23_30 -> m23_28  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BootstrapperConfiguration"];
m24_5 -> m24_6  [key=0, style=solid, color=red];
m24_6 -> m24_7  [key=0, style=solid, color=red];
m24_6 -> m24_8  [key=2, style=dotted, color=red];
m24_7 -> m24_5  [key=0, style=bold, color=blue];
m24_0 -> m24_1  [key=0, style=solid, color=red];
m24_0 -> m24_0  [key=3, color=darkorchid, style=bold, label="Field variable int WorkerCount"];
m24_1 -> m24_2  [key=0, style=solid, color=red];
m24_1 -> m24_3  [key=2, style=dotted, color=red];
m24_1 -> m24_4  [key=2, style=dotted, color=red];
m24_2 -> m24_0  [key=0, style=bold, color=blue];
m25_92 -> m25_104  [key=0, style=solid];
m25_92 -> m25_105  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateChangingContext"];
m25_92 -> m25_106  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateChangingContext"];
m25_104 -> m25_105  [key=0, style=solid];
m25_104 -> m25_55  [key=2, style=dotted];
m25_104 -> m25_107  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m25_105 -> m25_106  [key=0, style=solid];
m25_105 -> m25_56  [key=2, style=dotted];
m25_106 -> m25_107  [key=0, style=solid];
m25_106 -> m25_57  [key=2, style=dotted];
m25_107 -> m25_108  [key=0, style=solid];
m25_107 -> m25_59  [key=2, style=dotted];
m25_108 -> m25_92  [key=0, style=bold, color=blue];
m25_17 -> m25_153  [key=0, style=solid];
m25_17 -> m25_155  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobStateHandler"];
m25_17 -> m25_157  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobStateHandler"];
m25_17 -> m25_158  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobStateHandler"];
m25_17 -> m25_159  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobStateHandler"];
m25_17 -> m25_9  [key=3, color=darkorchid, style=bold, label="Parameter variable HangFire.Common.States.JobStateHandler handler"];
m25_153 -> m25_154  [key=0, style=solid];
m25_153 -> m25_155  [key=0, style=solid];
m25_155 -> m25_156  [key=0, style=solid];
m25_155 -> m25_157  [key=0, style=solid];
m25_155 -> m25_123  [key=2, style=dotted];
m25_157 -> m25_158  [key=0, style=solid];
m25_157 -> m25_159  [key=0, style=solid];
m25_157 -> m25_124  [key=2, style=dotted];
m25_158 -> m25_159  [key=0, style=solid];
m25_158 -> n91  [key=2, style=dotted];
m25_158 -> m25_162  [key=2, style=dotted];
m25_159 -> m25_160  [key=0, style=solid];
m25_159 -> m25_163  [key=2, style=dotted];
m25_154 -> m25_160  [key=0, style=solid];
m25_154 -> m25_14  [key=2, style=dotted];
m25_156 -> m25_160  [key=0, style=solid];
m25_156 -> m25_14  [key=2, style=dotted];
m25_160 -> m25_17  [key=0, style=bold, color=blue];
m25_0 -> m25_1  [key=0, style=solid];
m25_1 -> m25_0  [key=0, style=bold, color=blue];
m25_26 -> m25_27  [key=0, style=solid];
m25_26 -> m25_29  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m25_26 -> m25_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m25_26 -> m25_33  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m25_26 -> m25_34  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m25_26 -> m25_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m25_26 -> m25_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.JobMethod"];
m25_26 -> m25_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m25_27 -> m25_28  [key=0, style=solid];
m25_27 -> m25_29  [key=0, style=solid];
m25_29 -> m25_30  [key=0, style=solid];
m25_29 -> m25_31  [key=0, style=solid];
m25_31 -> m25_32  [key=0, style=solid];
m25_31 -> m25_33  [key=0, style=solid];
m25_33 -> m25_34  [key=0, style=solid];
m25_33 -> m25_46  [key=2, style=dotted];
m25_33 -> m25_47  [key=2, style=dotted];
m25_33 -> m25_21  [key=2, style=dotted];
m25_33 -> m25_48  [key=2, style=dotted];
m25_33 -> m25_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m25_34 -> m25_35  [key=0, style=solid];
m25_34 -> m25_49  [key=2, style=dotted];
m25_34 -> m25_50  [key=2, style=dotted];
m25_34 -> m25_36  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m25_34 -> m25_42  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m25_34 -> m25_44  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m25_35 -> m25_36  [key=0, style=solid];
m25_35 -> m25_51  [key=2, style=dotted];
m25_35 -> m25_38  [key=1, style=dashed, color=darkseagreen4, label=filterInfo];
m25_35 -> m25_41  [key=1, style=dashed, color=darkseagreen4, label=filterInfo];
m25_36 -> m25_37  [key=0, style=solid];
m25_36 -> m25_52  [key=2, style=dotted];
m25_36 -> m25_40  [key=1, style=dashed, color=darkseagreen4, label=context];
m25_37 -> m25_38  [key=0, style=solid];
m25_37 -> m25_53  [key=2, style=dotted];
m25_37 -> m25_41  [key=1, style=dashed, color=darkseagreen4, label=changingContext];
m25_28 -> m25_45  [key=0, style=solid];
m25_28 -> m25_14  [key=2, style=dotted];
m25_30 -> m25_45  [key=0, style=solid];
m25_30 -> m25_14  [key=2, style=dotted];
m25_32 -> m25_45  [key=0, style=solid];
m25_32 -> m25_14  [key=2, style=dotted];
m25_42 -> m25_43  [key=0, style=solid];
m25_42 -> m25_58  [key=2, style=dotted];
m25_44 -> m25_45  [key=0, style=solid];
m25_38 -> m25_39  [key=0, style=solid];
m25_38 -> m25_54  [key=2, style=dotted];
m25_41 -> m25_42  [key=0, style=solid];
m25_41 -> m25_57  [key=2, style=dotted];
m25_40 -> m25_41  [key=0, style=solid];
m25_40 -> m25_56  [key=2, style=dotted];
m25_39 -> m25_40  [key=0, style=solid];
m25_39 -> m25_55  [key=2, style=dotted];
m25_39 -> m25_42  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m25_39 -> m25_43  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m25_43 -> m25_44  [key=0, style=solid];
m25_43 -> m25_59  [key=2, style=dotted];
m25_45 -> m25_26  [key=0, style=bold, color=blue];
m25_129 -> m25_135  [key=0, style=solid];
m25_129 -> m25_137  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m25_129 -> m25_138  [key=1, style=dashed, color=darkseagreen4, label=bool];
m25_129 -> m25_139  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.IWriteOnlyTransaction"];
m25_129 -> m25_140  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m25_129 -> m25_142  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.IWriteOnlyTransaction"];
m25_135 -> m25_136  [key=0, style=solid];
m25_135 -> m25_144  [key=2, style=dotted];
m25_135 -> m25_127  [key=2, style=dotted];
m25_135 -> m25_137  [key=1, style=dashed, color=darkseagreen4, label=properties];
m25_135 -> m25_139  [key=1, style=dashed, color=darkseagreen4, label=properties];
m25_135 -> m25_140  [key=1, style=dashed, color=darkseagreen4, label=properties];
m25_135 -> m25_141  [key=1, style=dashed, color=darkseagreen4, label=properties];
m25_135 -> m25_142  [key=1, style=dashed, color=darkseagreen4, label=properties];
m25_137 -> m25_138  [key=0, style=solid];
m25_137 -> m25_145  [key=2, style=dotted];
m25_138 -> m25_139  [key=0, style=solid];
m25_138 -> m25_140  [key=0, style=solid];
m25_139 -> m25_140  [key=0, style=solid];
m25_139 -> m25_146  [key=2, style=dotted];
m25_140 -> m25_141  [key=0, style=solid];
m25_140 -> m25_145  [key=2, style=dotted];
m25_142 -> m25_143  [key=0, style=solid];
m25_142 -> m25_148  [key=2, style=dotted];
m25_136 -> m25_137  [key=0, style=solid];
m25_136 -> m25_141  [key=1, style=dashed, color=darkseagreen4, label=now];
m25_141 -> m25_142  [key=0, style=solid];
m25_141 -> m25_147  [key=2, style=dotted];
m25_141 -> m25_145  [key=2, style=dotted];
m25_143 -> m25_129  [key=0, style=bold, color=blue];
m25_60 -> m25_61  [key=0, style=solid];
m25_19 -> m25_20  [key=0, style=solid];
m25_19 -> m25_21  [key=2, style=dotted];
m25_19 -> m25_22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m25_18 -> m25_19  [key=0, style=solid];
m25_20 -> m25_18  [key=0, style=bold, color=blue];
m25_22 -> m25_23  [key=0, style=solid];
m25_23 -> m25_24  [key=0, style=solid];
m25_23 -> m25_25  [key=2, style=dotted];
m25_24 -> m25_22  [key=0, style=bold, color=blue];
m25_61 -> m25_62  [key=0, style=solid];
m25_62 -> m25_60  [key=0, style=bold, color=blue];
m25_54 -> m25_96  [key=0, style=solid];
m25_54 -> m25_97  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateChangingContext"];
m25_54 -> m25_98  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateChangingContext"];
m25_54 -> m25_99  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateChangingContext"];
m25_54 -> m25_100  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateChangingContext"];
m25_96 -> m25_97  [key=0, style=solid];
m25_96 -> m25_101  [key=0, style=solid];
m25_96 -> m25_98  [key=1, style=dashed, color=darkseagreen4, label=filter];
m25_97 -> m25_98  [key=0, style=solid];
m25_97 -> m25_99  [key=1, style=dashed, color=darkseagreen4, label=oldState];
m25_97 -> m25_100  [key=1, style=dashed, color=darkseagreen4, label=oldState];
m25_98 -> m25_99  [key=0, style=solid];
m25_98 -> m25_102  [key=2, style=dotted];
m25_99 -> m25_100  [key=0, style=solid];
m25_99 -> m25_96  [key=0, style=solid];
m25_100 -> m25_96  [key=0, style=solid];
m25_100 -> m25_103  [key=2, style=dotted];
m25_101 -> m25_54  [key=0, style=bold, color=blue];
m25_57 -> m25_109  [key=0, style=solid];
m25_57 -> m25_110  [key=1, style=dashed, color=darkseagreen4, label=string];
m25_57 -> m25_111  [key=1, style=dashed, color=darkseagreen4, label=string];
m25_57 -> m25_112  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateApplyingContext"];
m25_57 -> m25_113  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>"];
m25_57 -> m25_114  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateApplyingContext"];
m25_57 -> m25_115  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m25_57 -> m25_116  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateApplyingContext"];
m25_57 -> m25_117  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m25_57 -> m25_118  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateApplyingContext"];
m25_57 -> m25_119  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateApplyingContext"];
m25_57 -> m25_120  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<HangFire.Common.States.IStateChangedFilter>"];
m25_57 -> m25_121  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateApplyingContext"];
m25_109 -> m25_110  [key=0, style=solid];
m25_109 -> m25_115  [key=0, style=solid];
m25_109 -> m25_123  [key=2, style=dotted];
m25_110 -> m25_111  [key=0, style=solid];
m25_110 -> m25_113  [key=0, style=solid];
m25_110 -> m25_124  [key=2, style=dotted];
m25_111 -> m25_112  [key=0, style=solid];
m25_111 -> m25_113  [key=0, style=solid];
m25_112 -> m25_111  [key=0, style=solid];
m25_112 -> m25_125  [key=2, style=dotted];
m25_113 -> m25_114  [key=0, style=solid];
m25_113 -> m25_115  [key=0, style=solid];
m25_114 -> m25_113  [key=0, style=solid];
m25_114 -> m25_126  [key=2, style=dotted];
m25_115 -> m25_116  [key=0, style=solid];
m25_115 -> m25_119  [key=0, style=solid];
m25_115 -> m25_124  [key=2, style=dotted];
m25_116 -> m25_117  [key=0, style=solid];
m25_116 -> m25_127  [key=2, style=dotted];
m25_116 -> m25_118  [key=1, style=dashed, color=darkseagreen4, label=stateData];
m25_117 -> m25_118  [key=0, style=solid];
m25_117 -> m25_119  [key=0, style=solid];
m25_118 -> m25_117  [key=0, style=solid];
m25_118 -> m25_128  [key=2, style=dotted];
m25_119 -> m25_120  [key=0, style=solid];
m25_119 -> m25_129  [key=2, style=dotted];
m25_120 -> m25_121  [key=0, style=solid];
m25_120 -> m25_122  [key=0, style=solid];
m25_121 -> m25_120  [key=0, style=solid];
m25_121 -> m25_130  [key=2, style=dotted];
m25_122 -> m25_57  [key=0, style=bold, color=blue];
m25_63 -> m25_64  [key=0, style=solid];
m25_63 -> m25_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m25_63 -> m25_68  [key=1, style=dashed, color=darkseagreen4, label=string];
m25_63 -> m25_69  [key=1, style=dashed, color=darkseagreen4, label=string];
m25_63 -> m25_73  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m25_63 -> m25_77  [key=1, style=dashed, color=darkseagreen4, label=string];
m25_63 -> m25_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m25_63 -> m25_82  [key=1, style=dashed, color=darkseagreen4, label=string];
m25_63 -> m25_71  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ChangeState"];
m25_63 -> m25_92  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ChangeState"];
m25_64 -> m25_65  [key=0, style=solid];
m25_64 -> m25_66  [key=0, style=solid];
m25_64 -> m25_87  [key=2, style=dotted];
m25_66 -> m25_67  [key=0, style=solid];
m25_66 -> m25_68  [key=0, style=solid];
m25_68 -> m25_69  [key=0, style=solid];
m25_68 -> m25_88  [key=2, style=dotted];
m25_69 -> m25_70  [key=0, style=solid];
m25_69 -> m25_89  [key=2, style=dotted];
m25_69 -> m25_72  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m25_69 -> m25_75  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m25_73 -> m25_74  [key=0, style=solid];
m25_73 -> m25_75  [key=0, style=solid];
m25_73 -> m25_90  [key=2, style=dotted];
m25_77 -> m25_78  [key=0, style=solid];
m25_77 -> m25_52  [key=2, style=dotted];
m25_78 -> m25_79  [key=0, style=solid];
m25_78 -> m25_53  [key=2, style=dotted];
m25_78 -> m25_80  [key=1, style=dashed, color=darkseagreen4, label=changingContext];
m25_82 -> m25_83  [key=0, style=solid];
m25_82 -> m25_53  [key=2, style=dotted];
m25_82 -> m25_52  [key=2, style=dotted];
m25_82 -> m25_93  [key=2, style=dotted];
m25_82 -> m25_94  [key=2, style=dotted];
m25_65 -> m25_86  [key=0, style=solid];
m25_65 -> m25_14  [key=2, style=dotted];
m25_67 -> m25_86  [key=0, style=solid];
m25_67 -> m25_14  [key=2, style=dotted];
m25_70 -> m25_71  [key=0, style=solid];
m25_70 -> m25_72  [key=0, style=solid];
m25_72 -> m25_73  [key=0, style=solid];
m25_72 -> m25_78  [key=1, style=dashed, color=darkseagreen4, label=currentState];
m25_72 -> m25_82  [key=1, style=dashed, color=darkseagreen4, label=currentState];
m25_75 -> m25_76  [key=0, style=solid];
m25_75 -> m25_91  [key=2, style=dotted];
m25_75 -> m25_77  [key=1, style=dashed, color=darkseagreen4, label=jobMethod];
m25_71 -> m25_86  [key=0, style=solid];
m25_74 -> m25_86  [key=0, style=solid];
m25_76 -> m25_77  [key=0, style=solid];
m25_76 -> m25_51  [key=2, style=dotted];
m25_76 -> m25_79  [key=1, style=dashed, color=darkseagreen4, label=filterInfo];
m25_76 -> m25_80  [key=1, style=dashed, color=darkseagreen4, label=filterInfo];
m25_79 -> m25_80  [key=0, style=solid];
m25_79 -> m25_54  [key=2, style=dotted];
m25_80 -> m25_86  [key=0, style=solid];
m25_80 -> m25_92  [key=2, style=dotted];
m25_81 -> m25_82  [key=0, style=solid];
m25_83 -> m25_86  [key=0, style=solid];
m25_83 -> m25_95  [key=2, style=dotted];
m25_83 -> m25_92  [key=2, style=dotted];
m25_84 -> m25_85  [key=0, style=solid];
m25_85 -> m25_86  [key=0, style=solid];
m25_86 -> m25_63  [key=0, style=bold, color=blue];
m25_51 -> m25_149  [key=0, style=solid];
m25_51 -> m25_75  [key=3, color=darkorchid, style=bold, label="Parameter variable HangFire.Common.JobMethod method"];
m25_149 -> m25_150  [key=0, style=solid];
m25_149 -> m25_151  [key=2, style=dotted];
m25_149 -> m25_152  [key=2, style=dotted];
m25_150 -> m25_51  [key=0, style=bold, color=blue];
m25_126 -> m25_12  [key=3, color=darkorchid, style=bold, label="Field variable System.Func<HangFire.Common.JobMethod, System.Collections.Generic.IEnumerable<HangFire.Common.Filters.JobFilter>> _getFiltersThunk"];
m25_103 -> m25_131  [key=0, style=solid];
m25_103 -> m25_132  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateContext"];
m25_131 -> m25_132  [key=0, style=solid];
m25_131 -> m25_55  [key=2, style=dotted];
m25_131 -> m25_133  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m25_132 -> m25_133  [key=0, style=solid];
m25_132 -> m25_129  [key=2, style=dotted];
m25_133 -> m25_134  [key=0, style=solid];
m25_133 -> m25_59  [key=2, style=dotted];
m25_134 -> m25_103  [key=0, style=bold, color=blue];
m25_2 -> m25_3  [key=0, style=solid];
m25_2 -> m25_5  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>"];
m25_2 -> m25_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.IStorageConnection"];
m25_2 -> m25_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Storage.IStorageConnection"];
m25_2 -> m25_11  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<object>"];
m25_2 -> m25_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<object>"];
m25_2 -> m25_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<object>"];
m25_3 -> m25_4  [key=0, style=solid];
m25_3 -> m25_5  [key=0, style=solid];
m25_5 -> m25_6  [key=0, style=solid];
m25_5 -> m25_7  [key=0, style=solid];
m25_7 -> m25_8  [key=0, style=solid];
m25_8 -> m25_9  [key=0, style=solid];
m25_8 -> m25_15  [key=2, style=dotted];
m25_8 -> m25_16  [key=2, style=dotted];
m25_11 -> m25_12  [key=0, style=solid];
m25_11 -> m25_13  [key=0, style=solid];
m25_12 -> m25_13  [key=0, style=solid];
m25_4 -> m25_13  [key=0, style=solid];
m25_4 -> m25_14  [key=2, style=dotted];
m25_6 -> m25_13  [key=0, style=solid];
m25_6 -> m25_14  [key=2, style=dotted];
m25_9 -> m25_10  [key=0, style=solid];
m25_9 -> m25_11  [key=0, style=solid];
m25_10 -> m25_9  [key=0, style=solid];
m25_10 -> m25_17  [key=2, style=dotted];
m25_13 -> m25_2  [key=0, style=bold, color=blue];
m25_164 -> m25_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_38  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_69  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_76  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_80  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_82  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_100  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_104  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_106  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_110  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_111  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_115  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_117  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_119  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_131  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_132  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_149  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_157  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_158  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_164 -> m25_159  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.StateMachine"];
m25_165 -> m25_19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<object>"];
}
