digraph  {
n860 [label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span=""];
n861 [label=arrangeSql, span=""];
n862 [label=jobId, span=""];
n863 [label=arrangeSql, span=""];
n864 [label=jobId, span=""];
n865 [label=arrangeSql, span=""];
n866 [label=jobId, span=""];
n867 [label=state, span=""];
n868 [label=arrangeSql, span=""];
n869 [label=jobId, span=""];
n870 [label=state, span=""];
n871 [label=correctJobQueue, span=""];
n872 [label=SqlConnection, span=""];
n873 [label=SqlConnection, span=""];
n874 [label=SqlConnection, span=""];
n875 [label=SqlConnection, span=""];
n876 [label=SqlConnection, span=""];
n877 [label=items, span=""];
n878 [label=SqlConnection, span=""];
n879 [label=arrangeSql, span=""];
n880 [label=SqlConnection, span=""];
n881 [label=arrangeSql, span=""];
n882 [label=SqlConnection, span=""];
n883 [label=arrangeSql, span=""];
n884 [label=SqlConnection, span=""];
n885 [label=arrangeSql, span=""];
n886 [label=SqlConnection, span=""];
n887 [label=arrangeSql, span=""];
n888 [label=SqlConnection, span=""];
n889 [label=arrangeSql, span=""];
n890 [label=SqlConnection, span=""];
n891 [label=arrangeSql, span=""];
n0 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="18-18"];
n1 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", label="var defaultProvider = new Mock<IPersistentJobQueueProvider>()", span="20-20"];
n2 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", label="defaultProvider.Setup(x => x.GetJobQueue())\r\n                .Returns(new Mock<IPersistentJobQueue>().Object)", span="21-22"];
n5 [cluster="Mock<IPersistentJobQueueProvider>.cstr", label="Entry Mock<IPersistentJobQueueProvider>.cstr", span=""];
n3 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", label="_queueProviders = new PersistentJobQueueProviderCollection(defaultProvider.Object)", span="24-24"];
n6 [cluster="Unk.Setup", label="Entry Unk.Setup", span=""];
n7 [cluster="Mock<IPersistentJobQueue>.cstr", label="Entry Mock<IPersistentJobQueue>.cstr", span=""];
n8 [cluster="Unk.Returns", label="Entry Unk.Returns", span=""];
n10 [cluster="lambda expression", label="Entry lambda expression", span="21-21"];
n4 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="18-18"];
n9 [cluster="PersistentJobQueueProviderCollection.cstr", label="Entry PersistentJobQueueProviderCollection.cstr", span=""];
n11 [cluster="lambda expression", label="x.GetJobQueue()", span="21-21"];
n12 [cluster="lambda expression", label="Exit lambda expression", span="21-21"];
n13 [cluster="Unk.GetJobQueue", label="Entry Unk.GetJobQueue", span=""];
n14 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28"];
n15 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(null))", span="30-31"];
n16 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", label="Assert.Equal(''storage'', exception.ParamName)", span="33-33"];
n18 [cluster="Unk.>", label="Entry Unk.>", span=""];
n20 [cluster="lambda expression", label="Entry lambda expression", span="31-31"];
n17 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28"];
n19 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n21 [cluster="lambda expression", label="new SqlServerWriteOnlyTransaction(null)", span="31-31"];
n22 [cluster="lambda expression", label="Exit lambda expression", span="31-31"];
n23 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", span="42-42"];
n24 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="37-37"];
n25 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="39-42"];
n26 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="44-56"];
n30 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="46-46"];
n31 [cluster="lambda expression", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="47-47"];
n27 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="37-37"];
n28 [cluster="Unk.UseConnection", label="Entry Unk.UseConnection", span=""];
n29 [cluster="lambda expression", label="Entry lambda expression", span="44-56"];
n32 [cluster="lambda expression", label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)))", span="49-49"];
n33 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="51-51"];
n35 [cluster="lambda expression", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="54-54"];
n38 [cluster="Unk.Query", label="Entry Unk.Query", span=""];
n39 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n40 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
n48 [cluster="lambda expression", label="x.ExpireJob(jobId, TimeSpan.FromDays(1))", span="49-49"];
n41 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="972-972"];
n47 [cluster="lambda expression", label="Entry lambda expression", span="49-49"];
n34 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1))", span="52-52"];
n42 [cluster="Unk.GetTestJob", label="Entry Unk.GetTestJob", span=""];
n43 [cluster="System.DateTime.AddMinutes(double)", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
n44 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
n45 [cluster="Unk.True", label="Entry Unk.True", span=""];
n36 [cluster="lambda expression", label="Assert.Null(anotherJob.ExpireAt)", span="55-55"];
n37 [cluster="lambda expression", label="Exit lambda expression", span="44-56"];
n46 [cluster="Unk.Null", label="Entry Unk.Null", span=""];
n49 [cluster="lambda expression", label="Exit lambda expression", span="49-49"];
n50 [cluster="System.TimeSpan.FromDays(double)", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
n51 [cluster="Unk.ExpireJob", label="Entry Unk.ExpireJob", span=""];
n52 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="60-60"];
n53 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="62-65"];
n54 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="67-79"];
n57 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="69-69"];
n58 [cluster="lambda expression", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="70-70"];
n55 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="60-60"];
n56 [cluster="lambda expression", label="Entry lambda expression", span="67-79"];
n59 [cluster="lambda expression", label="Commit(sql, x => x.PersistJob(jobId))", span="72-72"];
n60 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="74-74"];
n62 [cluster="lambda expression", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="77-77"];
n67 [cluster="lambda expression", label="x.PersistJob(jobId)", span="72-72"];
n66 [cluster="lambda expression", label="Entry lambda expression", span="72-72"];
n61 [cluster="lambda expression", label="Assert.Null(job.ExpireAt)", span="75-75"];
n63 [cluster="lambda expression", label="Assert.NotNull(anotherJob.ExpireAt)", span="78-78"];
n64 [cluster="lambda expression", label="Exit lambda expression", span="67-79"];
n65 [cluster="Unk.NotNull", label="Entry Unk.NotNull", span=""];
n68 [cluster="lambda expression", label="Exit lambda expression", span="72-72"];
n69 [cluster="Unk.PersistJob", label="Entry Unk.PersistJob", span=""];
n70 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="83-83"];
n71 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="85-88"];
n72 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="90-117"];
n75 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="92-92"];
n76 [cluster="lambda expression", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="93-93"];
n73 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="83-83"];
n74 [cluster="lambda expression", label="Entry lambda expression", span="90-117"];
n81 [cluster="lambda expression", label="Commit(sql, x => x.SetJobState(jobId, state.Object))", span="101-101"];
n82 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="103-103"];
n85 [cluster="lambda expression", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="107-107"];
n88 [cluster="lambda expression", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="111-111"];
n108 [cluster="lambda expression", label="x.SetJobState(jobId, state.Object)", span="101-101"];
n89 [cluster="lambda expression", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="112-112"];
n77 [cluster="lambda expression", label="var state = new Mock<IState>()", span="95-95"];
n78 [cluster="lambda expression", label="state.Setup(x => x.Name).Returns(''State'')", span="96-96"];
n95 [cluster="Mock<IState>.cstr", label="Entry Mock<IState>.cstr", span=""];
n79 [cluster="lambda expression", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="97-97"];
n80 [cluster="lambda expression", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="98-99"];
n97 [cluster="lambda expression", label="Entry lambda expression", span="96-96"];
n100 [cluster="lambda expression", label="Entry lambda expression", span="97-97"];
n96 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n103 [cluster="lambda expression", label="Entry lambda expression", span="98-98"];
n107 [cluster="lambda expression", label="Entry lambda expression", span="101-101"];
n83 [cluster="lambda expression", label="Assert.Equal(''State'', job.StateName)", span="104-104"];
n84 [cluster="lambda expression", label="Assert.NotNull(job.StateId)", span="105-105"];
n86 [cluster="lambda expression", label="Assert.Null(anotherJob.StateName)", span="108-108"];
n87 [cluster="lambda expression", label="Assert.Null(anotherJob.StateId)", span="109-109"];
n90 [cluster="lambda expression", label="Assert.Equal(''State'', jobState.Name)", span="113-113"];
n91 [cluster="lambda expression", label="Assert.Equal(''Reason'', jobState.Reason)", span="114-114"];
n92 [cluster="lambda expression", label="Assert.NotNull(jobState.CreatedAt)", span="115-115"];
n93 [cluster="lambda expression", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="116-116"];
n94 [cluster="lambda expression", label="Exit lambda expression", span="90-117"];
n98 [cluster="lambda expression", label="x.Name", span="96-96"];
n99 [cluster="lambda expression", label="Exit lambda expression", span="96-96"];
n101 [cluster="lambda expression", label="x.Reason", span="97-97"];
n102 [cluster="lambda expression", label="Exit lambda expression", span="97-97"];
n104 [cluster="lambda expression", label="x.SerializeData()", span="98-98"];
n105 [cluster="lambda expression", label="Exit lambda expression", span="98-98"];
n106 [cluster="Unk.SerializeData", label="Entry Unk.SerializeData", span=""];
n109 [cluster="lambda expression", label="Exit lambda expression", span="101-101"];
n110 [cluster="Unk.SetJobState", label="Entry Unk.SetJobState", span=""];
n111 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="121-121"];
n112 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="123-126"];
n113 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="128-150"];
n116 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="130-130"];
n114 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="121-121"];
n115 [cluster="lambda expression", label="Entry lambda expression", span="128-150"];
n121 [cluster="lambda expression", label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="138-138"];
n122 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="140-140"];
n125 [cluster="lambda expression", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="144-144"];
n117 [cluster="lambda expression", label="var state = new Mock<IState>()", span="132-132"];
n142 [cluster="lambda expression", label="x.AddJobState(jobId, state.Object)", span="138-138"];
n126 [cluster="lambda expression", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="145-145"];
n118 [cluster="lambda expression", label="state.Setup(x => x.Name).Returns(''State'')", span="133-133"];
n119 [cluster="lambda expression", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="134-134"];
n120 [cluster="lambda expression", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="135-136"];
n132 [cluster="lambda expression", label="Entry lambda expression", span="133-133"];
n135 [cluster="lambda expression", label="Entry lambda expression", span="134-134"];
n138 [cluster="lambda expression", label="Entry lambda expression", span="135-135"];
n141 [cluster="lambda expression", label="Entry lambda expression", span="138-138"];
n123 [cluster="lambda expression", label="Assert.Null(job.StateName)", span="141-141"];
n124 [cluster="lambda expression", label="Assert.Null(job.StateId)", span="142-142"];
n127 [cluster="lambda expression", label="Assert.Equal(''State'', jobState.Name)", span="146-146"];
n128 [cluster="lambda expression", label="Assert.Equal(''Reason'', jobState.Reason)", span="147-147"];
n129 [cluster="lambda expression", label="Assert.NotNull(jobState.CreatedAt)", span="148-148"];
n130 [cluster="lambda expression", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="149-149"];
n131 [cluster="lambda expression", label="Exit lambda expression", span="128-150"];
n133 [cluster="lambda expression", label="x.Name", span="133-133"];
n134 [cluster="lambda expression", label="Exit lambda expression", span="133-133"];
n136 [cluster="lambda expression", label="x.Reason", span="134-134"];
n137 [cluster="lambda expression", label="Exit lambda expression", span="134-134"];
n139 [cluster="lambda expression", label="x.SerializeData()", span="135-135"];
n140 [cluster="lambda expression", label="Exit lambda expression", span="135-135"];
n143 [cluster="lambda expression", label="Exit lambda expression", span="138-138"];
n144 [cluster="Unk.AddJobState", label="Entry Unk.AddJobState", span=""];
n145 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="154-154"];
n146 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="156-156"];
n147 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="157-157"];
n148 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", label="correctProvider.Setup(x => x.GetJobQueue())\r\n                .Returns(correctJobQueue.Object)", span="158-159"];
n150 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''));\r\n\r\n                correctJobQueue.Verify(x => x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1''));\r\n            })", span="163-168"];
n159 [cluster="lambda expression", label="correctJobQueue.Verify(x => x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1''))", span="167-167"];
n149 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", label="_queueProviders.Add(correctProvider.Object, new[] { ''default'' })", span="161-161"];
n154 [cluster="lambda expression", label="Entry lambda expression", span="158-158"];
n152 [cluster="Unk.Add", label="Entry Unk.Add", span=""];
n151 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="154-154"];
n153 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="964-964"];
n157 [cluster="lambda expression", label="Entry lambda expression", span="163-168"];
n155 [cluster="lambda expression", label="x.GetJobQueue()", span="158-158"];
n156 [cluster="lambda expression", label="Exit lambda expression", span="158-158"];
n158 [cluster="lambda expression", label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="165-165"];
n162 [cluster="lambda expression", label="Entry lambda expression", span="165-165"];
n160 [cluster="lambda expression", label="Exit lambda expression", span="163-168"];
n161 [cluster="Unk.Verify", label="Entry Unk.Verify", span=""];
n166 [cluster="lambda expression", label="Entry lambda expression", span="167-167"];
n163 [cluster="lambda expression", label="x.AddToQueue(''default'', ''1'')", span="165-165"];
n164 [cluster="lambda expression", label="Exit lambda expression", span="165-165"];
n165 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="135-135"];
n167 [cluster="lambda expression", label="x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1'')", span="167-167"];
n168 [cluster="lambda expression", label="Exit lambda expression", span="167-167"];
n169 [cluster="Unk.Enqueue", label="Entry Unk.Enqueue", span=""];
n170 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="171-171"];
n171 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", label="return connection\r\n                .Query(''select * from HangFire.Job where Id = @id'', new { id = jobId })\r\n                .Single();", span="173-175"];
n172 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="171-171"];
n173 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="179-179"];
n174 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="181-190"];
n175 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="179-179"];
n176 [cluster="lambda expression", label="Entry lambda expression", span="181-190"];
n177 [cluster="lambda expression", label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="183-183"];
n178 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="185-185"];
n183 [cluster="lambda expression", label="Entry lambda expression", span="183-183"];
n179 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="187-187"];
n180 [cluster="lambda expression", label="Assert.Equal(1, record.Value)", span="188-188"];
n181 [cluster="lambda expression", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="189-189"];
n182 [cluster="lambda expression", label="Exit lambda expression", span="181-190"];
n184 [cluster="lambda expression", label="x.IncrementCounter(''my-key'')", span="183-183"];
n185 [cluster="lambda expression", label="Exit lambda expression", span="183-183"];
n186 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="154-154"];
n187 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="194-194"];
n188 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="196-210"];
n189 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="194-194"];
n190 [cluster="lambda expression", label="Entry lambda expression", span="196-210"];
n191 [cluster="lambda expression", label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="198-198"];
n192 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="200-200"];
n201 [cluster="lambda expression", label="Entry lambda expression", span="198-198"];
n193 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="202-202"];
n194 [cluster="lambda expression", label="Assert.Equal(1, record.Value)", span="203-203"];
n195 [cluster="lambda expression", label="Assert.NotNull(record.ExpireAt)", span="204-204"];
n196 [cluster="lambda expression", label="var expireAt = (DateTime) record.ExpireAt", span="206-206"];
n197 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="208-208"];
n198 [cluster="lambda expression", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="209-209"];
n200 [cluster="System.DateTime.AddHours(double)", label="Entry System.DateTime.AddHours(double)", span="0-0"];
n199 [cluster="lambda expression", label="Exit lambda expression", span="196-210"];
n202 [cluster="lambda expression", label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="198-198"];
n203 [cluster="lambda expression", label="Exit lambda expression", span="198-198"];
n204 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="163-163"];
n205 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="214-214"];
n206 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="216-227"];
n207 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="214-214"];
n208 [cluster="lambda expression", label="Entry lambda expression", span="216-227"];
n209 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                })", span="218-222"];
n210 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="224-224"];
n213 [cluster="lambda expression", label="Entry lambda expression", span="218-222"];
n211 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="226-226"];
n212 [cluster="lambda expression", label="Exit lambda expression", span="216-227"];
n214 [cluster="lambda expression", label="x.IncrementCounter(''my-key'')", span="220-220"];
n215 [cluster="lambda expression", label="x.IncrementCounter(''my-key'')", span="221-221"];
n216 [cluster="lambda expression", label="Exit lambda expression", span="218-222"];
n217 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="231-231"];
n218 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="233-242"];
n219 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="231-231"];
n220 [cluster="lambda expression", label="Entry lambda expression", span="233-242"];
n221 [cluster="lambda expression", label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="235-235"];
n222 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="237-237"];
n227 [cluster="lambda expression", label="Entry lambda expression", span="235-235"];
n223 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="239-239"];
n224 [cluster="lambda expression", label="Assert.Equal(-1, record.Value)", span="240-240"];
n225 [cluster="lambda expression", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="241-241"];
n226 [cluster="lambda expression", label="Exit lambda expression", span="233-242"];
n228 [cluster="lambda expression", label="x.DecrementCounter(''my-key'')", span="235-235"];
n229 [cluster="lambda expression", label="Exit lambda expression", span="235-235"];
n230 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="172-172"];
n231 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="246-246"];
n232 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="248-262"];
n233 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="246-246"];
n234 [cluster="lambda expression", label="Entry lambda expression", span="248-262"];
n235 [cluster="lambda expression", label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="250-250"];
n236 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="252-252"];
n244 [cluster="lambda expression", label="Entry lambda expression", span="250-250"];
n237 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="254-254"];
n238 [cluster="lambda expression", label="Assert.Equal(-1, record.Value)", span="255-255"];
n239 [cluster="lambda expression", label="Assert.NotNull(record.ExpireAt)", span="256-256"];
n240 [cluster="lambda expression", label="var expireAt = (DateTime)record.ExpireAt", span="258-258"];
n241 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="260-260"];
n242 [cluster="lambda expression", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="261-261"];
n243 [cluster="lambda expression", label="Exit lambda expression", span="248-262"];
n245 [cluster="lambda expression", label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="250-250"];
n246 [cluster="lambda expression", label="Exit lambda expression", span="250-250"];
n247 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="181-181"];
n248 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="266-266"];
n249 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="268-279"];
n250 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="266-266"];
n251 [cluster="lambda expression", label="Entry lambda expression", span="268-279"];
n252 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="270-274"];
n253 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="276-276"];
n256 [cluster="lambda expression", label="Entry lambda expression", span="270-274"];
n254 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="278-278"];
n255 [cluster="lambda expression", label="Exit lambda expression", span="268-279"];
n257 [cluster="lambda expression", label="x.DecrementCounter(''my-key'')", span="272-272"];
n258 [cluster="lambda expression", label="x.DecrementCounter(''my-key'')", span="273-273"];
n259 [cluster="lambda expression", label="Exit lambda expression", span="270-274"];
n260 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="283-283"];
n261 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="285-294"];
n262 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="283-283"];
n263 [cluster="lambda expression", label="Entry lambda expression", span="285-294"];
n264 [cluster="lambda expression", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="287-287"];
n265 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="289-289"];
n270 [cluster="lambda expression", label="Entry lambda expression", span="287-287"];
n266 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="291-291"];
n267 [cluster="lambda expression", label="Assert.Equal(''my-value'', record.Value)", span="292-292"];
n268 [cluster="lambda expression", label="Assert.Equal(0.0, record.Score, 2)", span="293-293"];
n269 [cluster="lambda expression", label="Exit lambda expression", span="285-294"];
n271 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="287-287"];
n272 [cluster="lambda expression", label="Exit lambda expression", span="287-287"];
n273 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="190-190"];
n274 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="298-298"];
n275 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="300-311"];
n276 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="298-298"];
n277 [cluster="lambda expression", label="Entry lambda expression", span="300-311"];
n278 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="302-306"];
n279 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="308-308"];
n282 [cluster="lambda expression", label="Entry lambda expression", span="302-306"];
n280 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="310-310"];
n281 [cluster="lambda expression", label="Exit lambda expression", span="300-311"];
n283 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="304-304"];
n284 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''another-value'')", span="305-305"];
n285 [cluster="lambda expression", label="Exit lambda expression", span="302-306"];
n286 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="315-315"];
n287 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="317-328"];
n288 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="315-315"];
n289 [cluster="lambda expression", label="Entry lambda expression", span="317-328"];
n290 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                })", span="319-323"];
n291 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="325-325"];
n294 [cluster="lambda expression", label="Entry lambda expression", span="319-323"];
n292 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="327-327"];
n293 [cluster="lambda expression", label="Exit lambda expression", span="317-328"];
n295 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="321-321"];
n296 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="322-322"];
n297 [cluster="lambda expression", label="Exit lambda expression", span="319-323"];
n298 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="332-332"];
n299 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="334-343"];
n300 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="332-332"];
n301 [cluster="lambda expression", label="Entry lambda expression", span="334-343"];
n302 [cluster="lambda expression", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="336-336"];
n303 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="338-338"];
n308 [cluster="lambda expression", label="Entry lambda expression", span="336-336"];
n304 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="340-340"];
n305 [cluster="lambda expression", label="Assert.Equal(''my-value'', record.Value)", span="341-341"];
n306 [cluster="lambda expression", label="Assert.Equal(3.2, record.Score, 3)", span="342-342"];
n307 [cluster="lambda expression", label="Exit lambda expression", span="334-343"];
n309 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="336-336"];
n310 [cluster="lambda expression", label="Exit lambda expression", span="336-336"];
n311 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="195-195"];
n312 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="347-347"];
n313 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="349-360"];
n314 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="347-347"];
n315 [cluster="lambda expression", label="Entry lambda expression", span="349-360"];
n316 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="351-355"];
n317 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="357-357"];
n320 [cluster="lambda expression", label="Entry lambda expression", span="351-355"];
n318 [cluster="lambda expression", label="Assert.Equal(3.2, record.Score, 3)", span="359-359"];
n319 [cluster="lambda expression", label="Exit lambda expression", span="349-360"];
n321 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="353-353"];
n322 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="354-354"];
n323 [cluster="lambda expression", label="Exit lambda expression", span="351-355"];
n324 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="364-364"];
n325 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="366-377"];
n326 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="364-364"];
n327 [cluster="lambda expression", label="Entry lambda expression", span="366-377"];
n328 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="368-372"];
n329 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="374-374"];
n332 [cluster="lambda expression", label="Entry lambda expression", span="368-372"];
n330 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="376-376"];
n331 [cluster="lambda expression", label="Exit lambda expression", span="366-377"];
n333 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="370-370"];
n334 [cluster="lambda expression", label="x.RemoveFromSet(''my-key'', ''my-value'')", span="371-371"];
n335 [cluster="lambda expression", label="Exit lambda expression", span="368-372"];
n336 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="212-212"];
n337 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="381-381"];
n338 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="383-394"];
n339 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="381-381"];
n340 [cluster="lambda expression", label="Entry lambda expression", span="383-394"];
n341 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="385-389"];
n342 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="391-391"];
n345 [cluster="lambda expression", label="Entry lambda expression", span="385-389"];
n343 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="393-393"];
n344 [cluster="lambda expression", label="Exit lambda expression", span="383-394"];
n346 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="387-387"];
n347 [cluster="lambda expression", label="x.RemoveFromSet(''my-key'', ''different-value'')", span="388-388"];
n348 [cluster="lambda expression", label="Exit lambda expression", span="385-389"];
n349 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="398-398"];
n350 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="400-411"];
n351 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="398-398"];
n352 [cluster="lambda expression", label="Entry lambda expression", span="400-411"];
n353 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="402-406"];
n354 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="408-408"];
n357 [cluster="lambda expression", label="Entry lambda expression", span="402-406"];
n355 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="410-410"];
n356 [cluster="lambda expression", label="Exit lambda expression", span="400-411"];
n358 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="404-404"];
n359 [cluster="lambda expression", label="x.RemoveFromSet(''different-key'', ''my-value'')", span="405-405"];
n360 [cluster="lambda expression", label="Exit lambda expression", span="402-406"];
n361 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="415-415"];
n362 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="417-425"];
n363 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="415-415"];
n364 [cluster="lambda expression", label="Entry lambda expression", span="417-425"];
n365 [cluster="lambda expression", label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="419-419"];
n366 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.List'').Single()", span="421-421"];
n370 [cluster="lambda expression", label="Entry lambda expression", span="419-419"];
n367 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="423-423"];
n368 [cluster="lambda expression", label="Assert.Equal(''my-value'', record.Value)", span="424-424"];
n369 [cluster="lambda expression", label="Exit lambda expression", span="417-425"];
n371 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="419-419"];
n372 [cluster="lambda expression", label="Exit lambda expression", span="419-419"];
n373 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="224-224"];
n374 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="429-429"];
n375 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="431-442"];
n376 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="429-429"];
n377 [cluster="lambda expression", label="Entry lambda expression", span="431-442"];
n378 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="433-437"];
n379 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="439-439"];
n382 [cluster="lambda expression", label="Entry lambda expression", span="433-437"];
n380 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="441-441"];
n381 [cluster="lambda expression", label="Exit lambda expression", span="431-442"];
n383 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="435-435"];
n384 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="436-436"];
n385 [cluster="lambda expression", label="Exit lambda expression", span="433-437"];
n386 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="446-446"];
n387 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="448-460"];
n388 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="446-446"];
n389 [cluster="lambda expression", label="Entry lambda expression", span="448-460"];
n390 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="450-455"];
n391 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="457-457"];
n394 [cluster="lambda expression", label="Entry lambda expression", span="450-455"];
n392 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="459-459"];
n393 [cluster="lambda expression", label="Exit lambda expression", span="448-460"];
n395 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="452-452"];
n396 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="453-453"];
n397 [cluster="lambda expression", label="x.RemoveFromList(''my-key'', ''my-value'')", span="454-454"];
n398 [cluster="lambda expression", label="Exit lambda expression", span="450-455"];
n399 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="234-234"];
n400 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="464-464"];
n401 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="466-477"];
n402 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="464-464"];
n403 [cluster="lambda expression", label="Entry lambda expression", span="466-477"];
n404 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="468-472"];
n405 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="474-474"];
n408 [cluster="lambda expression", label="Entry lambda expression", span="468-472"];
n406 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="476-476"];
n407 [cluster="lambda expression", label="Exit lambda expression", span="466-477"];
n409 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="470-470"];
n410 [cluster="lambda expression", label="x.RemoveFromList(''my-key'', ''different-value'')", span="471-471"];
n411 [cluster="lambda expression", label="Exit lambda expression", span="468-472"];
n412 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="481-481"];
n413 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="483-494"];
n414 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="481-481"];
n415 [cluster="lambda expression", label="Entry lambda expression", span="483-494"];
n416 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="485-489"];
n417 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="491-491"];
n420 [cluster="lambda expression", label="Entry lambda expression", span="485-489"];
n418 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="493-493"];
n419 [cluster="lambda expression", label="Exit lambda expression", span="483-494"];
n421 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="487-487"];
n422 [cluster="lambda expression", label="x.RemoveFromList(''different-key'', ''my-value'')", span="488-488"];
n423 [cluster="lambda expression", label="Exit lambda expression", span="485-489"];
n424 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="498-498"];
n425 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="500-516"];
n426 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="498-498"];
n427 [cluster="lambda expression", label="Entry lambda expression", span="500-516"];
n428 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="502-509"];
n429 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="511-511"];
n435 [cluster="lambda expression", label="Entry lambda expression", span="502-509"];
n430 [cluster="lambda expression", label="Assert.Equal(2, records.Length)", span="513-513"];
n434 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n431 [cluster="lambda expression", label="Assert.Equal(''1'', records[0].Value)", span="514-514"];
n432 [cluster="lambda expression", label="Assert.Equal(''2'', records[1].Value)", span="515-515"];
n433 [cluster="lambda expression", label="Exit lambda expression", span="500-516"];
n436 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="504-504"];
n437 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''1'')", span="505-505"];
n438 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''2'')", span="506-506"];
n439 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''3'')", span="507-507"];
n440 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 2)", span="508-508"];
n441 [cluster="lambda expression", label="Exit lambda expression", span="502-509"];
n442 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="244-244"];
n443 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="520-520"];
n444 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="522-535"];
n445 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="520-520"];
n446 [cluster="lambda expression", label="Entry lambda expression", span="522-535"];
n447 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="524-530"];
n448 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="532-532"];
n451 [cluster="lambda expression", label="Entry lambda expression", span="524-530"];
n449 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="534-534"];
n450 [cluster="lambda expression", label="Exit lambda expression", span="522-535"];
n452 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="526-526"];
n453 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''1'')", span="527-527"];
n454 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''2'')", span="528-528"];
n455 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 100)", span="529-529"];
n456 [cluster="lambda expression", label="Exit lambda expression", span="524-530"];
n457 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="539-539"];
n458 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="541-552"];
n459 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="539-539"];
n460 [cluster="lambda expression", label="Entry lambda expression", span="541-552"];
n461 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="543-547"];
n462 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="549-549"];
n465 [cluster="lambda expression", label="Entry lambda expression", span="543-547"];
n463 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="551-551"];
n464 [cluster="lambda expression", label="Exit lambda expression", span="541-552"];
n466 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="545-545"];
n467 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 100)", span="546-546"];
n468 [cluster="lambda expression", label="Exit lambda expression", span="543-547"];
n469 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="556-556"];
n470 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="558-569"];
n471 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="556-556"];
n472 [cluster="lambda expression", label="Entry lambda expression", span="558-569"];
n473 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="560-564"];
n474 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="566-566"];
n477 [cluster="lambda expression", label="Entry lambda expression", span="560-564"];
n475 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="568-568"];
n476 [cluster="lambda expression", label="Exit lambda expression", span="558-569"];
n478 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="562-562"];
n479 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 0)", span="563-563"];
n480 [cluster="lambda expression", label="Exit lambda expression", span="560-564"];
n481 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="573-573"];
n482 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="575-586"];
n483 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="573-573"];
n484 [cluster="lambda expression", label="Entry lambda expression", span="575-586"];
n485 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="577-581"];
n486 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="583-583"];
n489 [cluster="lambda expression", label="Entry lambda expression", span="577-581"];
n487 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="585-585"];
n488 [cluster="lambda expression", label="Exit lambda expression", span="575-586"];
n490 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="579-579"];
n491 [cluster="lambda expression", label="x.TrimList(''another-key'', 1, 0)", span="580-580"];
n492 [cluster="lambda expression", label="Exit lambda expression", span="577-581"];
n493 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="590-590"];
n494 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="592-598"];
n495 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="590-590"];
n496 [cluster="lambda expression", label="Entry lambda expression", span="592-598"];
n497 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())))", span="594-595"];
n501 [cluster="lambda expression", label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()))", span="595-595"];
n498 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="597-597"];
n500 [cluster="lambda expression", label="Entry lambda expression", span="595-595"];
n499 [cluster="lambda expression", label="Exit lambda expression", span="592-598"];
n502 [cluster="lambda expression", label="Exit lambda expression", span="595-595"];
n503 [cluster="lambda expression", label="Entry lambda expression", span="595-595"];
n504 [cluster="lambda expression", label="x.SetRangeInHash(null, new Dictionary<string, string>())", span="595-595"];
n505 [cluster="lambda expression", label="Exit lambda expression", span="595-595"];
n506 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="261-261"];
n507 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="602-602"];
n508 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="604-610"];
n509 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="602-602"];
n510 [cluster="lambda expression", label="Entry lambda expression", span="604-610"];
n511 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)))", span="606-607"];
n515 [cluster="lambda expression", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null))", span="607-607"];
n512 [cluster="lambda expression", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="609-609"];
n514 [cluster="lambda expression", label="Entry lambda expression", span="607-607"];
n513 [cluster="lambda expression", label="Exit lambda expression", span="604-610"];
n516 [cluster="lambda expression", label="Exit lambda expression", span="607-607"];
n517 [cluster="lambda expression", label="Entry lambda expression", span="607-607"];
n518 [cluster="lambda expression", label="x.SetRangeInHash(''some-hash'', null)", span="607-607"];
n519 [cluster="lambda expression", label="Exit lambda expression", span="607-607"];
n520 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="614-614"];
n521 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="616-631"];
n522 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="614-614"];
n523 [cluster="lambda expression", label="Entry lambda expression", span="616-631"];
n524 [cluster="lambda expression", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="618-622"];
n525 [cluster="lambda expression", label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="624-627"];
n530 [cluster="lambda expression", label="Entry lambda expression", span="618-622"];
n526 [cluster="lambda expression", label="Assert.Equal(''Value1'', result[''Key1''])", span="629-629"];
n529 [cluster="Unk.ToDictionary", label="Entry Unk.ToDictionary", span=""];
n533 [cluster="lambda expression", label="Entry lambda expression", span="627-627"];
n536 [cluster="lambda expression", label="Entry lambda expression", span="627-627"];
n527 [cluster="lambda expression", label="Assert.Equal(''Value2'', result[''Key2''])", span="630-630"];
n528 [cluster="lambda expression", label="Exit lambda expression", span="616-631"];
n531 [cluster="lambda expression", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="618-622"];
n532 [cluster="lambda expression", label="Exit lambda expression", span="618-622"];
n534 [cluster="lambda expression", label="(string)x.Field", span="627-627"];
n535 [cluster="lambda expression", label="Exit lambda expression", span="627-627"];
n537 [cluster="lambda expression", label="(string)x.Value", span="627-627"];
n538 [cluster="lambda expression", label="Exit lambda expression", span="627-627"];
n539 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="635-635"];
n540 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)));\r\n            })", span="637-641"];
n541 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="635-635"];
n542 [cluster="lambda expression", label="Entry lambda expression", span="637-641"];
n543 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)))", span="639-640"];
n546 [cluster="lambda expression", label="Commit(sql, x => x.RemoveHash(null))", span="640-640"];
n544 [cluster="lambda expression", label="Exit lambda expression", span="637-641"];
n545 [cluster="lambda expression", label="Entry lambda expression", span="640-640"];
n547 [cluster="lambda expression", label="Exit lambda expression", span="640-640"];
n548 [cluster="lambda expression", label="Entry lambda expression", span="640-640"];
n549 [cluster="lambda expression", label="x.RemoveHash(null)", span="640-640"];
n550 [cluster="lambda expression", label="Exit lambda expression", span="640-640"];
n551 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="281-281"];
n552 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="645-645"];
n553 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                // Act\r\n                Commit(sql, x => x.RemoveHash(''some-hash''));\r\n\r\n                // Assert\r\n                var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="647-662"];
n554 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="645-645"];
n555 [cluster="lambda expression", label="Entry lambda expression", span="647-662"];
n556 [cluster="lambda expression", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="650-654"];
n557 [cluster="lambda expression", label="Commit(sql, x => x.RemoveHash(''some-hash''))", span="657-657"];
n558 [cluster="lambda expression", label="var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single()", span="660-660"];
n561 [cluster="lambda expression", label="Entry lambda expression", span="650-654"];
n564 [cluster="lambda expression", label="Entry lambda expression", span="657-657"];
n559 [cluster="lambda expression", label="Assert.Equal(0, count)", span="661-661"];
n560 [cluster="lambda expression", label="Exit lambda expression", span="647-662"];
n562 [cluster="lambda expression", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="650-654"];
n563 [cluster="lambda expression", label="Exit lambda expression", span="650-654"];
n565 [cluster="lambda expression", label="x.RemoveHash(''some-hash'')", span="657-657"];
n566 [cluster="lambda expression", label="Exit lambda expression", span="657-657"];
n567 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="666-666"];
n568 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="668-674"];
n569 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="666-666"];
n570 [cluster="lambda expression", label="Entry lambda expression", span="668-674"];
n571 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())))", span="670-671"];
n575 [cluster="lambda expression", label="Commit(sql, x => x.AddRangeToSet(null, new List<string>()))", span="671-671"];
n572 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="673-673"];
n574 [cluster="lambda expression", label="Entry lambda expression", span="671-671"];
n573 [cluster="lambda expression", label="Exit lambda expression", span="668-674"];
n576 [cluster="lambda expression", label="Exit lambda expression", span="671-671"];
n577 [cluster="lambda expression", label="Entry lambda expression", span="671-671"];
n578 [cluster="lambda expression", label="x.AddRangeToSet(null, new List<string>())", span="671-671"];
n579 [cluster="lambda expression", label="Exit lambda expression", span="671-671"];
n580 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n581 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="295-295"];
n582 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="678-678"];
n583 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)));\r\n\r\n                Assert.Equal(''items'', exception.ParamName);\r\n            })", span="680-686"];
n584 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="678-678"];
n585 [cluster="lambda expression", label="Entry lambda expression", span="680-686"];
n586 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)))", span="682-683"];
n590 [cluster="lambda expression", label="Commit(sql, x => x.AddRangeToSet(''my-set'', null))", span="683-683"];
n587 [cluster="lambda expression", label="Assert.Equal(''items'', exception.ParamName)", span="685-685"];
n589 [cluster="lambda expression", label="Entry lambda expression", span="683-683"];
n588 [cluster="lambda expression", label="Exit lambda expression", span="680-686"];
n591 [cluster="lambda expression", label="Exit lambda expression", span="683-683"];
n592 [cluster="lambda expression", label="Entry lambda expression", span="683-683"];
n593 [cluster="lambda expression", label="x.AddRangeToSet(''my-set'', null)", span="683-683"];
n594 [cluster="lambda expression", label="Exit lambda expression", span="683-683"];
n595 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="690-690"];
n596 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", label="UseConnection(sql =>\r\n            {\r\n                var items = new List<string> { ''1'', ''2'', ''3'' };\r\n\r\n                Commit(sql, x => x.AddRangeToSet(''my-set'', items));\r\n\r\n                var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''');\r\n                Assert.Equal(items, records);\r\n            })", span="692-700"];
n597 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="690-690"];
n598 [cluster="lambda expression", label="Entry lambda expression", span="692-700"];
n599 [cluster="lambda expression", label="var items = new List<string> { ''1'', ''2'', ''3'' }", span="694-694"];
n600 [cluster="lambda expression", label="Commit(sql, x => x.AddRangeToSet(''my-set'', items))", span="696-696"];
n601 [cluster="lambda expression", label="var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''')", span="698-698"];
n605 [cluster="lambda expression", label="x.AddRangeToSet(''my-set'', items)", span="696-696"];
n602 [cluster="lambda expression", label="Assert.Equal(items, records)", span="699-699"];
n604 [cluster="lambda expression", label="Entry lambda expression", span="696-696"];
n603 [cluster="lambda expression", label="Exit lambda expression", span="692-700"];
n606 [cluster="lambda expression", label="Exit lambda expression", span="696-696"];
n607 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="704-704"];
n608 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)));\r\n            })", span="706-710"];
n609 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="704-704"];
n610 [cluster="lambda expression", label="Entry lambda expression", span="706-710"];
n611 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)))", span="708-709"];
n614 [cluster="lambda expression", label="Commit(sql, x => x.RemoveSet(null))", span="709-709"];
n612 [cluster="lambda expression", label="Exit lambda expression", span="706-710"];
n613 [cluster="lambda expression", label="Entry lambda expression", span="709-709"];
n615 [cluster="lambda expression", label="Exit lambda expression", span="709-709"];
n616 [cluster="lambda expression", label="Entry lambda expression", span="709-709"];
n617 [cluster="lambda expression", label="x.RemoveSet(null)", span="709-709"];
n618 [cluster="lambda expression", label="Exit lambda expression", span="709-709"];
n619 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="313-313"];
n620 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="714-714"];
n621 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score]) values (@key, @value, 0.0)''", span="716-717"];
n622 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", label="UseConnection(sql =>\r\n            {\r\n                sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                Commit(sql, x => x.RemoveSet(''set-1''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n                Assert.Equal(''set-2'', record.Key);\r\n            })", span="719-731"];
n625 [cluster="lambda expression", label="sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="721-725"];
n623 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="714-714"];
n624 [cluster="lambda expression", label="Entry lambda expression", span="719-731"];
n626 [cluster="lambda expression", label="Commit(sql, x => x.RemoveSet(''set-1''))", span="727-727"];
n627 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="729-729"];
n630 [cluster="Unk.Execute", label="Entry Unk.Execute", span=""];
n631 [cluster="lambda expression", label="Entry lambda expression", span="727-727"];
n628 [cluster="lambda expression", label="Assert.Equal(''set-2'', record.Key)", span="730-730"];
n629 [cluster="lambda expression", label="Exit lambda expression", span="719-731"];
n632 [cluster="lambda expression", label="x.RemoveSet(''set-1'')", span="727-727"];
n633 [cluster="lambda expression", label="Exit lambda expression", span="727-727"];
n634 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="735-735"];
n635 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="737-743"];
n636 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="735-735"];
n637 [cluster="lambda expression", label="Entry lambda expression", span="737-743"];
n638 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))))", span="739-740"];
n642 [cluster="lambda expression", label="Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)))", span="740-740"];
n639 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="742-742"];
n641 [cluster="lambda expression", label="Entry lambda expression", span="740-740"];
n640 [cluster="lambda expression", label="Exit lambda expression", span="737-743"];
n643 [cluster="lambda expression", label="Exit lambda expression", span="740-740"];
n644 [cluster="lambda expression", label="Entry lambda expression", span="740-740"];
n645 [cluster="lambda expression", label="x.ExpireHash(null, TimeSpan.FromMinutes(5))", span="740-740"];
n646 [cluster="lambda expression", label="Exit lambda expression", span="740-740"];
n647 [cluster="System.TimeSpan.FromMinutes(double)", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
n648 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="327-327"];
n649 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="747-747"];
n650 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="749-751"];
n651 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1'']);\r\n                Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''hash-2'']);\r\n            })", span="753-770"];
n654 [cluster="lambda expression", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                })", span="756-760"];
n652 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="747-747"];
n653 [cluster="lambda expression", label="Entry lambda expression", span="753-770"];
n655 [cluster="lambda expression", label="Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)))", span="763-763"];
n656 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="766-766"];
n661 [cluster="lambda expression", label="Entry lambda expression", span="763-763"];
n657 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1''])", span="767-767"];
n664 [cluster="lambda expression", label="Entry lambda expression", span="766-766"];
n667 [cluster="lambda expression", label="Entry lambda expression", span="766-766"];
n658 [cluster="lambda expression", label="Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61))", span="768-768"];
n659 [cluster="lambda expression", label="Assert.Null(records[''hash-2''])", span="769-769"];
n660 [cluster="lambda expression", label="Exit lambda expression", span="753-770"];
n662 [cluster="lambda expression", label="x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60))", span="763-763"];
n663 [cluster="lambda expression", label="Exit lambda expression", span="763-763"];
n665 [cluster="lambda expression", label="(string)x.Key", span="766-766"];
n666 [cluster="lambda expression", label="Exit lambda expression", span="766-766"];
n668 [cluster="lambda expression", label="(DateTime?)x.ExpireAt", span="766-766"];
n669 [cluster="lambda expression", label="Exit lambda expression", span="766-766"];
n670 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="774-774"];
n671 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="776-782"];
n672 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="774-774"];
n673 [cluster="lambda expression", label="Entry lambda expression", span="776-782"];
n674 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))))", span="778-779"];
n678 [cluster="lambda expression", label="Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)))", span="779-779"];
n675 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="781-781"];
n677 [cluster="lambda expression", label="Entry lambda expression", span="779-779"];
n676 [cluster="lambda expression", label="Exit lambda expression", span="776-782"];
n679 [cluster="lambda expression", label="Exit lambda expression", span="779-779"];
n680 [cluster="lambda expression", label="Entry lambda expression", span="779-779"];
n681 [cluster="lambda expression", label="x.ExpireSet(null, TimeSpan.FromSeconds(45))", span="779-779"];
n682 [cluster="lambda expression", label="Exit lambda expression", span="779-779"];
n683 [cluster="System.TimeSpan.FromSeconds(double)", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
n684 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="342-342"];
n685 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="786-786"];
n686 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="788-790"];
n687 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1'']);\r\n                Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''set-2'']);\r\n            })", span="792-809"];
n690 [cluster="lambda expression", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="795-799"];
n688 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="786-786"];
n689 [cluster="lambda expression", label="Entry lambda expression", span="792-809"];
n691 [cluster="lambda expression", label="Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)))", span="802-802"];
n692 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="805-805"];
n697 [cluster="lambda expression", label="Entry lambda expression", span="802-802"];
n693 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1''])", span="806-806"];
n700 [cluster="lambda expression", label="Entry lambda expression", span="805-805"];
n703 [cluster="lambda expression", label="Entry lambda expression", span="805-805"];
n694 [cluster="lambda expression", label="Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61))", span="807-807"];
n695 [cluster="lambda expression", label="Assert.Null(records[''set-2''])", span="808-808"];
n696 [cluster="lambda expression", label="Exit lambda expression", span="792-809"];
n698 [cluster="lambda expression", label="x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60))", span="802-802"];
n699 [cluster="lambda expression", label="Exit lambda expression", span="802-802"];
n701 [cluster="lambda expression", label="(string)x.Key", span="805-805"];
n702 [cluster="lambda expression", label="Exit lambda expression", span="805-805"];
n704 [cluster="lambda expression", label="(DateTime?)x.ExpireAt", span="805-805"];
n705 [cluster="lambda expression", label="Exit lambda expression", span="805-805"];
n706 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="813-813"];
n707 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="815-821"];
n708 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="813-813"];
n709 [cluster="lambda expression", label="Entry lambda expression", span="815-821"];
n710 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))))", span="817-818"];
n714 [cluster="lambda expression", label="Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)))", span="818-818"];
n711 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="820-820"];
n713 [cluster="lambda expression", label="Entry lambda expression", span="818-818"];
n712 [cluster="lambda expression", label="Exit lambda expression", span="815-821"];
n715 [cluster="lambda expression", label="Exit lambda expression", span="818-818"];
n716 [cluster="lambda expression", label="Entry lambda expression", span="818-818"];
n717 [cluster="lambda expression", label="x.ExpireList(null, TimeSpan.FromSeconds(45))", span="818-818"];
n718 [cluster="lambda expression", label="Exit lambda expression", span="818-818"];
n719 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="357-357"];
n720 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="825-825"];
n721 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key]) values (@key)''", span="827-828"];
n722 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1'']);\r\n                Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''list-2'']);\r\n            })", span="830-847"];
n725 [cluster="lambda expression", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                })", span="833-837"];
n723 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="825-825"];
n724 [cluster="lambda expression", label="Entry lambda expression", span="830-847"];
n726 [cluster="lambda expression", label="Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)))", span="840-840"];
n727 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="843-843"];
n732 [cluster="lambda expression", label="Entry lambda expression", span="840-840"];
n728 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1''])", span="844-844"];
n735 [cluster="lambda expression", label="Entry lambda expression", span="843-843"];
n738 [cluster="lambda expression", label="Entry lambda expression", span="843-843"];
n729 [cluster="lambda expression", label="Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61))", span="845-845"];
n730 [cluster="lambda expression", label="Assert.Null(records[''list-2''])", span="846-846"];
n731 [cluster="lambda expression", label="Exit lambda expression", span="830-847"];
n733 [cluster="lambda expression", label="x.ExpireList(''list-1'', TimeSpan.FromMinutes(60))", span="840-840"];
n734 [cluster="lambda expression", label="Exit lambda expression", span="840-840"];
n736 [cluster="lambda expression", label="(string)x.Key", span="843-843"];
n737 [cluster="lambda expression", label="Exit lambda expression", span="843-843"];
n739 [cluster="lambda expression", label="(DateTime?)x.ExpireAt", span="843-843"];
n740 [cluster="lambda expression", label="Exit lambda expression", span="843-843"];
n741 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="851-851"];
n742 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="853-859"];
n743 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="851-851"];
n744 [cluster="lambda expression", label="Entry lambda expression", span="853-859"];
n745 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)))", span="855-856"];
n749 [cluster="lambda expression", label="Commit(sql, x => x.PersistHash(null))", span="856-856"];
n746 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="858-858"];
n748 [cluster="lambda expression", label="Entry lambda expression", span="856-856"];
n747 [cluster="lambda expression", label="Exit lambda expression", span="853-859"];
n750 [cluster="lambda expression", label="Exit lambda expression", span="856-856"];
n751 [cluster="lambda expression", label="Entry lambda expression", span="856-856"];
n752 [cluster="lambda expression", label="x.PersistHash(null)", span="856-856"];
n753 [cluster="lambda expression", label="Exit lambda expression", span="856-856"];
n754 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="372-372"];
n755 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="863-863"];
n756 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="865-867"];
n757 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistHash(''hash-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''hash-1'']);\r\n                Assert.NotNull(records[''hash-2'']);\r\n            })", span="869-885"];
n760 [cluster="lambda expression", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="872-876"];
n758 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="863-863"];
n759 [cluster="lambda expression", label="Entry lambda expression", span="869-885"];
n761 [cluster="lambda expression", label="Commit(sql, x => x.PersistHash(''hash-1''))", span="879-879"];
n762 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="882-882"];
n766 [cluster="lambda expression", label="Entry lambda expression", span="879-879"];
n763 [cluster="lambda expression", label="Assert.Null(records[''hash-1''])", span="883-883"];
n769 [cluster="lambda expression", label="Entry lambda expression", span="882-882"];
n772 [cluster="lambda expression", label="Entry lambda expression", span="882-882"];
n764 [cluster="lambda expression", label="Assert.NotNull(records[''hash-2''])", span="884-884"];
n765 [cluster="lambda expression", label="Exit lambda expression", span="869-885"];
n767 [cluster="lambda expression", label="x.PersistHash(''hash-1'')", span="879-879"];
n768 [cluster="lambda expression", label="Exit lambda expression", span="879-879"];
n770 [cluster="lambda expression", label="(string)x.Key", span="882-882"];
n771 [cluster="lambda expression", label="Exit lambda expression", span="882-882"];
n773 [cluster="lambda expression", label="(DateTime?)x.ExpireAt", span="882-882"];
n774 [cluster="lambda expression", label="Exit lambda expression", span="882-882"];
n775 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="889-889"];
n776 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="891-897"];
n777 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="889-889"];
n778 [cluster="lambda expression", label="Entry lambda expression", span="891-897"];
n779 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)))", span="893-894"];
n783 [cluster="lambda expression", label="Commit(sql, x => x.PersistSet(null))", span="894-894"];
n780 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="896-896"];
n782 [cluster="lambda expression", label="Entry lambda expression", span="894-894"];
n781 [cluster="lambda expression", label="Exit lambda expression", span="891-897"];
n784 [cluster="lambda expression", label="Exit lambda expression", span="894-894"];
n785 [cluster="lambda expression", label="Entry lambda expression", span="894-894"];
n786 [cluster="lambda expression", label="x.PersistSet(null)", span="894-894"];
n787 [cluster="lambda expression", label="Exit lambda expression", span="894-894"];
n788 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="387-387"];
n789 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="901-901"];
n790 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="903-905"];
n791 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistSet(''set-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''set-1'']);\r\n                Assert.NotNull(records[''set-2'']);\r\n            })", span="907-923"];
n794 [cluster="lambda expression", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="910-914"];
n792 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="901-901"];
n793 [cluster="lambda expression", label="Entry lambda expression", span="907-923"];
n795 [cluster="lambda expression", label="Commit(sql, x => x.PersistSet(''set-1''))", span="917-917"];
n796 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="920-920"];
n800 [cluster="lambda expression", label="Entry lambda expression", span="917-917"];
n797 [cluster="lambda expression", label="Assert.Null(records[''set-1''])", span="921-921"];
n803 [cluster="lambda expression", label="Entry lambda expression", span="920-920"];
n806 [cluster="lambda expression", label="Entry lambda expression", span="920-920"];
n798 [cluster="lambda expression", label="Assert.NotNull(records[''set-2''])", span="922-922"];
n799 [cluster="lambda expression", label="Exit lambda expression", span="907-923"];
n801 [cluster="lambda expression", label="x.PersistSet(''set-1'')", span="917-917"];
n802 [cluster="lambda expression", label="Exit lambda expression", span="917-917"];
n804 [cluster="lambda expression", label="(string)x.Key", span="920-920"];
n805 [cluster="lambda expression", label="Exit lambda expression", span="920-920"];
n807 [cluster="lambda expression", label="(DateTime?)x.ExpireAt", span="920-920"];
n808 [cluster="lambda expression", label="Exit lambda expression", span="920-920"];
n809 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="927-927"];
n810 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="929-935"];
n811 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="927-927"];
n812 [cluster="lambda expression", label="Entry lambda expression", span="929-935"];
n813 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)))", span="931-932"];
n817 [cluster="lambda expression", label="Commit(sql, x => x.PersistList(null))", span="932-932"];
n814 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="934-934"];
n816 [cluster="lambda expression", label="Entry lambda expression", span="932-932"];
n815 [cluster="lambda expression", label="Exit lambda expression", span="929-935"];
n818 [cluster="lambda expression", label="Exit lambda expression", span="932-932"];
n819 [cluster="lambda expression", label="Entry lambda expression", span="932-932"];
n820 [cluster="lambda expression", label="x.PersistList(null)", span="932-932"];
n821 [cluster="lambda expression", label="Exit lambda expression", span="932-932"];
n822 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="402-402"];
n823 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="939-939"];
n824 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="941-943"];
n825 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistList(''list-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''list-1'']);\r\n                Assert.NotNull(records[''list-2'']);\r\n            })", span="945-961"];
n828 [cluster="lambda expression", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="948-952"];
n826 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="939-939"];
n827 [cluster="lambda expression", label="Entry lambda expression", span="945-961"];
n829 [cluster="lambda expression", label="Commit(sql, x => x.PersistList(''list-1''))", span="955-955"];
n830 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="958-958"];
n834 [cluster="lambda expression", label="Entry lambda expression", span="955-955"];
n831 [cluster="lambda expression", label="Assert.Null(records[''list-1''])", span="959-959"];
n837 [cluster="lambda expression", label="Entry lambda expression", span="958-958"];
n840 [cluster="lambda expression", label="Entry lambda expression", span="958-958"];
n832 [cluster="lambda expression", label="Assert.NotNull(records[''list-2''])", span="960-960"];
n833 [cluster="lambda expression", label="Exit lambda expression", span="945-961"];
n835 [cluster="lambda expression", label="x.PersistList(''list-1'')", span="955-955"];
n836 [cluster="lambda expression", label="Exit lambda expression", span="955-955"];
n838 [cluster="lambda expression", label="(string)x.Key", span="958-958"];
n839 [cluster="lambda expression", label="Exit lambda expression", span="958-958"];
n841 [cluster="lambda expression", label="(DateTime?)x.ExpireAt", span="958-958"];
n842 [cluster="lambda expression", label="Exit lambda expression", span="958-958"];
n843 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="var connection = ConnectionUtils.CreateConnection()", span="966-966"];
n844 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="action(connection)", span="968-968"];
n846 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
n845 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="964-964"];
n847 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n848 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", label="var storage = new Mock<SqlServerStorage>(connection)", span="976-976"];
n851 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", label="action(transaction)", span="981-981"];
n849 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", label="storage.Setup(x => x.QueueProviders).Returns(_queueProviders)", span="977-977"];
n854 [cluster="Mock<SqlServerStorage>.cstr", label="Entry Mock<SqlServerStorage>.cstr", span=""];
n850 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", label="var transaction = new SqlServerWriteOnlyTransaction(storage.Object)", span="979-979"];
n857 [cluster="lambda expression", label="Entry lambda expression", span="977-977"];
n855 [cluster="SqlServerWriteOnlyTransaction.cstr", label="Entry SqlServerWriteOnlyTransaction.cstr", span=""];
n852 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", label="transaction.Commit()", span="982-982"];
n853 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="972-972"];
n856 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="49-49"];
n858 [cluster="lambda expression", label="x.QueueProviders", span="977-977"];
n859 [cluster="lambda expression", label="Exit lambda expression", span="977-977"];
m1_210 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="key == null", span="299-299"];
m1_214 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="305-305"];
m1_211 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="throw new ArgumentNullException(''key'');", span="299-299"];
m1_212 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="string query = @''\r\nupdate HangFire.[List] set ExpireAt = @expireAt where [Key] = @key''", span="301-302"];
m1_213 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="AcquireListLock()", span="304-304"];
m1_215 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="297-297"];
m1_20 [cluster="Unk.EnlistTransaction", file="RedisStorageConnection.cs", label="Entry Unk.EnlistTransaction", span=""];
m1_7 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="RedisStorageConnection.cs", label="_queueProviders = queueProviders", span="49-49"];
m1_15 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="RedisStorageConnection.cs", label=_commandQueue, span="66-66"];
m1_28 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="75-75"];
m1_35 [cluster="System.DateTime.Add(System.TimeSpan)", file="RedisStorageConnection.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m1_34 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="77-79"];
m1_36 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="82-82"];
m1_37 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId }))", span="84-86"];
m1_38 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="82-82"];
m1_29 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId }))", span="77-79"];
m1_33 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId })", span="77-79"];
m1_39 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="84-86"];
m1_30 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="75-75"];
m1_31 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="341-341"];
m1_32 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="77-79"];
m1_40 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId })", span="84-86"];
m1_0 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="39-39"];
m1_1 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="RedisStorageConnection.cs", label="connection == null", span="44-44"];
m1_2 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="RedisStorageConnection.cs", label="throw new ArgumentNullException(''connection'');", span="44-44"];
m1_3 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="RedisStorageConnection.cs", label="queueProviders == null", span="45-45"];
m1_4 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="RedisStorageConnection.cs", label="throw new ArgumentNullException(''queueProviders'');", span="45-45"];
m1_5 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="RedisStorageConnection.cs", label="_connection = connection", span="47-47"];
m1_75 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.AddItemToList(\r\n                        String.Format(''hangfire:server:{0}:queues'', serverId),\r\n                        queue1)", span="101-103"];
m1_76 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="101-103"];
m1_77 [cluster="Unk.AddItemToList", file="RedisStorageConnection.cs", label="Entry Unk.AddItemToList", span=""];
m1_96 [cluster="HangFire.Redis.RedisStorageConnection.Heartbeat(string)", color=green, community=0, file="RedisStorageConnection.cs", label="_redis.SetEntryInHash(\r\n                String.Format(''hangfire:server:{0}'', serverId),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", prediction=0, span="133-136"];
m1_97 [cluster="HangFire.Redis.RedisStorageConnection.Heartbeat(string)", file="RedisStorageConnection.cs", label="Exit HangFire.Redis.RedisStorageConnection.Heartbeat(string)", span="131-131"];
m1_99 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisStorageConnection.cs", label="Entry HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="139-139"];
m1_98 [cluster="Unk.SetEntryInHash", file="RedisStorageConnection.cs", label="Entry Unk.SetEntryInHash", span=""];
m1_100 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisStorageConnection.cs", label="var serverNames = _redis.GetAllItemsFromSet(''hangfire:servers'')", span="141-141"];
m1_42 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", span="89-89"];
m1_189 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="275-275"];
m1_190 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="key == null", span="277-277"];
m1_194 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="283-283"];
m1_191 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="throw new ArgumentNullException(''key'');", span="277-277"];
m1_192 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="string query = @''\r\nupdate HangFire.[Hash] set ExpireAt = @expireAt where [Key] = @key''", span="279-280"];
m1_193 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="AcquireHashLock()", span="282-282"];
m1_195 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="275-275"];
m1_116 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="193-193"];
m1_41 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="84-86"];
m1_22 [cluster="HangFire.Redis.RedisStorageConnection.AcquireJobLock(string)", file="RedisStorageConnection.cs", label="Entry HangFire.Redis.RedisStorageConnection.AcquireJobLock(string)", span="41-41"];
m1_17 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="RedisStorageConnection.cs", label="transaction.Complete()", span="71-71"];
m1_18 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="52-52"];
m1_19 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", span="366-366"];
m1_219 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="308-308"];
m1_220 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="RedisStorageConnection.cs", label="key == null", span="310-310"];
m1_224 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="316-316"];
m1_221 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="RedisStorageConnection.cs", label="throw new ArgumentNullException(''key'');", span="310-310"];
m1_222 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="RedisStorageConnection.cs", label="string query = @''\r\nupdate HangFire.Hash set ExpireAt = null where [Key] = @key''", span="312-313"];
m1_223 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="RedisStorageConnection.cs", label="AcquireHashLock()", span="315-315"];
m1_225 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="308-308"];
m1_27 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="63-63"];
m1_9 [cluster="HangFire.Redis.RedisStorageConnection.Dispose()", file="RedisStorageConnection.cs", label="_redis.Dispose()", span="28-28"];
m1_105 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisStorageConnection.cs", label="var name = serverName", span="150-150"];
m1_106 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisStorageConnection.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(''hangfire:server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat''),\r\n                        x => heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1]))))", span="152-160"];
m1_108 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisStorageConnection.cs", label="Logger.DebugFormat(''Looking for timed out servers...'')", span="166-166"];
m1_107 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", color=green, community=0, file="RedisStorageConnection.cs", label="pipeline.Flush()", prediction=1, span="163-163"];
m1_109 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisStorageConnection.cs", label=heartbeats, span="168-168"];
m1_133 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="219-221"];
m1_239 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="330-330"];
m1_240 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="RedisStorageConnection.cs", label="key == null", span="332-332"];
m1_244 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="338-338"];
m1_241 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="RedisStorageConnection.cs", label="throw new ArgumentNullException(''key'');", span="332-332"];
m1_242 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="RedisStorageConnection.cs", label="string query = @''\r\nupdate HangFire.[List] set ExpireAt = null where [Key] = @key''", span="334-335"];
m1_243 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="RedisStorageConnection.cs", label="AcquireListLock()", span="337-337"];
m1_245 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="330-330"];
m1_69 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="90-96"];
m1_71 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="90-96"];
m1_229 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="319-319"];
m1_230 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="RedisStorageConnection.cs", label="key == null", span="321-321"];
m1_234 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="327-327"];
m1_231 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="RedisStorageConnection.cs", label="throw new ArgumentNullException(''key'');", span="321-321"];
m1_232 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="RedisStorageConnection.cs", label="string query = @''\r\nupdate HangFire.[Set] set ExpireAt = null where [Key] = @key''", span="323-324"];
m1_233 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="RedisStorageConnection.cs", label="AcquireSetLock()", span="326-326"];
m1_235 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="319-319"];
m1_255 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", span="361-361"];
m1_260 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", file="RedisStorageConnection.cs", label="_lockedResources.Add(resource)", span="363-363"];
m1_261 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", span="361-361"];
m1_199 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="286-286"];
m1_200 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="key == null", span="288-288"];
m1_204 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="294-294"];
m1_201 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="throw new ArgumentNullException(''key'');", span="288-288"];
m1_202 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="string query = @''\r\nupdate HangFire.[Set] set ExpireAt = @expireAt where [Key] = @key''", span="290-291"];
m1_203 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="AcquireSetLock()", span="293-293"];
m1_205 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="286-286"];
m1_94 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="RedisStorageConnection.cs", label="AddToSet(key, value, 0.0)", span="165-165"];
m1_68 [cluster="Unk.AddItemToSet", file="RedisStorageConnection.cs", label="Entry Unk.AddItemToSet", span=""];
m1_93 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="123-125"];
m1_95 [cluster="HangFire.Redis.RedisStorageConnection.Heartbeat(string)", file="RedisStorageConnection.cs", label="Entry HangFire.Redis.RedisStorageConnection.Heartbeat(string)", span="131-131"];
m1_55 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="115-124"];
m1_136 [cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="RedisStorageConnection.cs", label="var transaction = redis.CreateTransaction()", span="186-186"];
m1_137 [cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="RedisStorageConnection.cs", label="transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    jobId,\r\n                    -1))", span="188-191"];
m1_139 [cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="RedisStorageConnection.cs", label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(''hangfire:job:{0}'', jobId),\r\n                    ''Checked''))", span="196-198"];
m1_143 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.RemoveItemFromList(\r\n                    String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                    jobId,\r\n                    -1)", span="188-191"];
m1_138 [cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="RedisStorageConnection.cs", label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(''hangfire:job:{0}'', jobId),\r\n                    ''Fetched''))", span="193-195"];
m1_140 [cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="RedisStorageConnection.cs", label="transaction.Commit()", span="200-200"];
m1_141 [cluster="HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", file="RedisStorageConnection.cs", label="Exit HangFire.Redis.RedisStorageConnection.RemoveFromDequeuedList(IRedisClient, string, string)", span="181-181"];
m1_142 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="188-191"];
m1_144 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="188-191"];
m1_265 [cluster="TransactionScope.cstr", file="RedisStorageConnection.cs", label="Entry TransactionScope.cstr", span=""];
m1_135 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="219-221"];
m1_56 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                })", span="115-124"];
m1_57 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="115-124"];
m1_58 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="127-127"];
m1_59 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="RedisStorageConnection.cs", label="var provider = _queueProviders.GetProvider(queue)", span="129-129"];
m1_62 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="127-127"];
m1_63 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m1_61 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="RedisStorageConnection.cs", label="QueueCommand(_ => persistentQueue.Enqueue(queue, jobId))", span="132-132"];
m1_60 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="RedisStorageConnection.cs", label="var persistentQueue = provider.GetJobQueue(_connection)", span="130-130"];
m1_64 [cluster="Unk.GetJobQueue", file="RedisStorageConnection.cs", label="Entry Unk.GetJobQueue", span=""];
m1_11 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="RedisStorageConnection.cs", label="var transaction = CreateTransaction(_isolationLevel)", span="54-54"];
m1_90 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="158-160"];
m1_8 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="39-39"];
m1_10 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="52-52"];
m1_65 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="132-132"];
m1_25 [cluster="string.Format(string, object)", file="RedisStorageConnection.cs", label="Entry string.Format(string, object)", span="0-0"];
m1_26 [cluster="System.TimeSpan.FromMinutes(double)", file="RedisStorageConnection.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m1_47 [cluster="Unk.Commit", file="RedisStorageConnection.cs", label="Entry Unk.Commit", span=""];
m1_46 [cluster="Unk.QueueCommand", file="RedisStorageConnection.cs", label="Entry Unk.QueueCommand", span=""];
m1_48 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="96-106"];
m1_66 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.AddItemToSet(\r\n                    ''hangfire:servers'', serverId)", span="87-88"];
m1_67 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="87-88"];
m1_72 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisStorageConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m1_74 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="101-103"];
m1_79 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(string)", file="RedisStorageConnection.cs", label="RemoveServer(_redis, serverId)", span="112-112"];
m1_78 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(string)", file="RedisStorageConnection.cs", label="Entry HangFire.Redis.RedisStorageConnection.RemoveServer(string)", span="110-110"];
m1_80 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(string)", file="RedisStorageConnection.cs", label="Exit HangFire.Redis.RedisStorageConnection.RemoveServer(string)", span="110-110"];
m1_85 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="RedisStorageConnection.cs", label="transaction.Commit()", span="127-127"];
m1_84 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="RedisStorageConnection.cs", label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                    String.Format(''hangfire:server:{0}'', serverId),\r\n                    String.Format(''hangfire:server:{0}:queues'', serverId)))", span="123-125"];
m1_86 [cluster="HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", file="RedisStorageConnection.cs", label="Exit HangFire.Redis.RedisStorageConnection.RemoveServer(IRedisClient, string)", span="115-115"];
m1_91 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="123-125"];
m1_92 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.RemoveEntry(\r\n                    String.Format(''hangfire:server:{0}'', serverId),\r\n                    String.Format(''hangfire:server:{0}:queues'', serverId))", span="123-125"];
m1_103 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisStorageConnection.cs", label="var pipeline = _redis.CreatePipeline()", span="146-146"];
m1_102 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisStorageConnection.cs", label="var utcNow = DateTime.UtcNow", span="144-144"];
m1_104 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisStorageConnection.cs", label=serverNames, span="148-148"];
m1_111 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisStorageConnection.cs", label="utcNow > maxTime.Add(timeOut)", span="173-173"];
m1_110 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisStorageConnection.cs", label="var maxTime = new DateTime(\r\n                    Math.Max(heartbeat.Value.Item1.Ticks, (heartbeat.Value.Item2 ?? DateTime.MinValue).Ticks))", span="170-171"];
m1_112 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", color=green, community=0, file="RedisStorageConnection.cs", label="RemoveServer(_redis, heartbeat.Key)", prediction=0, span="175-175"];
m1_119 [cluster="System.DateTime.DateTime(long)", file="RedisStorageConnection.cs", label="Entry System.DateTime.DateTime(long)", span="0-0"];
m1_118 [cluster="Unk.DebugFormat", file="RedisStorageConnection.cs", label="Entry Unk.DebugFormat", span=""];
m1_120 [cluster="System.Math.Max(long, long)", file="RedisStorageConnection.cs", label="Entry System.Math.Max(long, long)", span="0-0"];
m1_126 [cluster="Unk.Format", file="RedisStorageConnection.cs", label="Entry Unk.Format", span=""];
m1_125 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="153-155"];
m1_127 [cluster="Unk.GetValuesFromHash", file="RedisStorageConnection.cs", label="Entry Unk.GetValuesFromHash", span=""];
m1_134 [cluster="Unk.Add", file="RedisStorageConnection.cs", label="Entry Unk.Add", span=""];
m1_148 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="193-195"];
m1_151 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.RemoveEntryFromHash(\r\n                    String.Format(''hangfire:job:{0}'', jobId),\r\n                    ''Checked'')", span="196-198"];
m1_147 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.RemoveEntryFromHash(\r\n                    String.Format(''hangfire:job:{0}'', jobId),\r\n                    ''Fetched'')", span="193-195"];
m1_149 [cluster="Unk.RemoveEntryFromHash", file="RedisStorageConnection.cs", label="Entry Unk.RemoveEntryFromHash", span=""];
m1_150 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="196-198"];
m1_152 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="196-198"];
m1_161 [cluster="lambda expression", file="RedisStorageConnection.cs", label=name, span=""];
m1_160 [cluster="lambda expression", file="RedisStorageConnection.cs", label=string, span=""];
m1_162 [cluster="lambda expression", file="RedisStorageConnection.cs", label=heartbeats, span=""];
m1_173 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.Execute(query, items.Select(value => new { key = key, value = value }).ToList())", span="262-262"];
m1_177 [cluster="lambda expression", file="RedisStorageConnection.cs", label="new { key = key, value = value }", span="262-262"];
m1_172 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="262-262"];
m1_174 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="262-262"];
m1_176 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="262-262"];
m1_178 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="262-262"];
m1_187 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.Execute(query, new { key = key })", span="272-272"];
m1_186 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="272-272"];
m1_188 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="272-272"];
m1_197 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) })", span="283-283"];
m1_196 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="283-283"];
m1_198 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="283-283"];
m1_207 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) })", span="294-294"];
m1_206 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="294-294"];
m1_208 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="294-294"];
m1_217 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) })", span="305-305"];
m1_216 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="305-305"];
m1_218 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="305-305"];
m1_227 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.Execute(query, new { key = key })", span="316-316"];
m1_226 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="316-316"];
m1_228 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="316-316"];
m1_237 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.Execute(query, new { key = key })", span="327-327"];
m1_236 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="327-327"];
m1_238 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="327-327"];
m1_247 [cluster="lambda expression", file="RedisStorageConnection.cs", label="x.Execute(query, new { key = key })", span="338-338"];
m1_246 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Entry lambda expression", span="338-338"];
m1_248 [cluster="lambda expression", file="RedisStorageConnection.cs", label="Exit lambda expression", span="338-338"];
m1_49 [cluster="Hangfire.States.IState.SerializeData()", file="RedisStorageConnection.cs", label="Entry Hangfire.States.IState.SerializeData()", span="27-27"];
m1_53 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                }))", span="115-124"];
m1_88 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="158-160"];
m1_52 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="RedisStorageConnection.cs", label="string addStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data)''", span="111-113"];
m1_54 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", span="109-109"];
m1_146 [cluster="Unk.QueueCommand", file="RedisStorageConnection.cs", label="Entry Unk.QueueCommand", span=""];
m1_123 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="204-206"];
m1_128 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="209-209"];
m1_124 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="201-201"];
m1_129 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="RedisStorageConnection.cs", label="string trimSql = @''\r\n;with cte as (\r\n    select row_number() over (order by Id desc) as row_num, [Key] \r\n    from HangFire.List\r\n    where [Key] = @key)\r\ndelete from cte where row_num not between @start and @end''", span="211-216"];
m1_87 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="156-156"];
m1_89 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="156-156"];
m1_130 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="RedisStorageConnection.cs", label="AcquireListLock()", span="218-218"];
m1_163 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="RedisStorageConnection.cs", label=string, span=""];
m1_164 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="RedisStorageConnection.cs", label=string, span=""];
m1_166 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="RedisStorageConnection.cs", label="items == null", span="255-255"];
m1_170 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(query, items.Select(value => new { key = key, value = value }).ToList()))", span="262-262"];
m1_165 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="RedisStorageConnection.cs", label="throw new ArgumentNullException(''key'');", span="254-254"];
m1_167 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="RedisStorageConnection.cs", label="throw new ArgumentNullException(''items'');", span="255-255"];
m1_168 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="RedisStorageConnection.cs", label="string query = @''\r\ninsert into HangFire.[Set] ([Key], Value, Score)\r\nvalues (@key, @value, 0.0)''", span="257-259"];
m1_169 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="RedisStorageConnection.cs", label="AcquireSetLock()", span="261-261"];
m1_171 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="252-252"];
m1_262 [cluster="System.Collections.Generic.SortedSet<T>.Add(T)", file="RedisStorageConnection.cs", label="Entry System.Collections.Generic.SortedSet<T>.Add(T)", span="0-0"];
m1_145 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", span="356-356"];
m1_81 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="149-149"];
m1_82 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 }))", span="151-153"];
m1_83 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="149-149"];
m1_175 [cluster="Unk.ToList", file="RedisStorageConnection.cs", label="Entry Unk.ToList", span=""];
m1_121 [cluster="System.DateTime.Add(System.TimeSpan)", file="RedisStorageConnection.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m1_122 [cluster="Unk.InfoFormat", file="RedisStorageConnection.cs", label="Entry Unk.InfoFormat", span=""];
m1_43 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="RedisStorageConnection.cs", label="string addAndSetStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data);\r\nupdate HangFire.Job set StateId = SCOPE_IDENTITY(), StateName = @name where Id = @id;''", span="91-94"];
m1_23 [cluster="System.Action<T>.Invoke(T)", file="RedisStorageConnection.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m1_24 [cluster="Unk.Complete", file="RedisStorageConnection.cs", label="Entry Unk.Complete", span=""];
m1_16 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="RedisStorageConnection.cs", label="command(_connection)", span="68-68"];
m1_51 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", span="109-109"];
m1_12 [cluster="HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", file="RedisStorageConnection.cs", label="Entry HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", span="31-31"];
m1_13 [cluster="HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", file="RedisStorageConnection.cs", label="return new RedisAtomicWriteTransaction(_redis.CreateTransaction());", span="33-33"];
m1_14 [cluster="HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", file="RedisStorageConnection.cs", label="Exit HangFire.Redis.RedisStorageConnection.CreateWriteTransaction()", span="31-31"];
m1_251 [cluster="System.Collections.Generic.Queue<T>.Enqueue(T)", file="RedisStorageConnection.cs", label="Entry System.Collections.Generic.Queue<T>.Enqueue(T)", span="0-0"];
m1_153 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="RedisStorageConnection.cs", label="HangFire.Redis.RedisStorageConnection", span=""];
m1_154 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="RedisStorageConnection.cs", label="System.Collections.Generic.IDictionary<string, string>", span=""];
m1_158 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="RedisStorageConnection.cs", label=int, span=""];
m1_155 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="RedisStorageConnection.cs", label=jobId, span=""];
m1_156 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="RedisStorageConnection.cs", label="System.TimeSpan", span=""];
m1_157 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="RedisStorageConnection.cs", label="AcquireHashLock()", span="248-248"];
m1_159 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="RedisStorageConnection.cs", label=queue1, span=""];
m1_117 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", span="346-346"];
m1_6 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="RedisStorageConnection.cs", label="_isolationLevel = isolationLevel", span="48-48"];
m1_50 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="RedisStorageConnection.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m1_266 [cluster="TransactionOptions.cstr", file="RedisStorageConnection.cs", label="Entry TransactionOptions.cstr", span=""];
m1_45 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", span="89-89"];
m1_131 [cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="RedisStorageConnection.cs", label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0"];
m1_132 [cluster="Unk.FromStringTimestamp", file="RedisStorageConnection.cs", label="Entry Unk.FromStringTimestamp", span=""];
m1_101 [cluster="HangFire.Redis.RedisStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisStorageConnection.cs", label="var heartbeats = new Dictionary<string, Tuple<DateTime, DateTime?>>()", span="142-142"];
m1_256 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", file="RedisStorageConnection.cs", label="AcquireLock(String.Format(''Hangfire:Set:Lock''))", span="353-353"];
m1_257 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", span="351-351"];
m1_254 [cluster="string.Format(string, params object[])", file="RedisStorageConnection.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m1_258 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", file="RedisStorageConnection.cs", label="AcquireLock(String.Format(''Hangfire:Hash:Lock''))", span="358-358"];
m1_259 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", span="356-356"];
m1_44 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="RedisStorageConnection.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m1_179 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="265-265"];
m1_180 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="RedisStorageConnection.cs", label="key == null", span="267-267"];
m1_184 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="272-272"];
m1_181 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="RedisStorageConnection.cs", label="throw new ArgumentNullException(''key'');", span="267-267"];
m1_182 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="RedisStorageConnection.cs", label="string query = @''delete from HangFire.[Set] where [Key] = @key''", span="269-269"];
m1_183 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="RedisStorageConnection.cs", label="AcquireSetLock()", span="271-271"];
m1_185 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="265-265"];
m1_249 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="RedisStorageConnection.cs", label="_commandQueue.Enqueue(action)", span="343-343"];
m1_250 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="341-341"];
m1_21 [cluster="Unk.Select", file="RedisStorageConnection.cs", label="Entry Unk.Select", span=""];
m1_113 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", color=green, community=0, file="RedisStorageConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", prediction=3, span="193-193"];
m1_114 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="RedisStorageConnection.cs", label="AcquireListLock()", span="195-195"];
m1_263 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", file="RedisStorageConnection.cs", label="return isolationLevel != null\r\n                ? new TransactionScope(TransactionScopeOption.Required,\r\n                    new TransactionOptions { IsolationLevel = isolationLevel.Value })\r\n                : new TransactionScope();", span="368-371"];
m1_264 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", span="366-366"];
m1_115 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="RedisStorageConnection.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value);'',\r\n                new { key, value }))", span="196-198"];
m1_252 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", file="RedisStorageConnection.cs", label="AcquireLock(String.Format(''Hangfire:List:Lock''))", span="348-348"];
m1_253 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", file="RedisStorageConnection.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", span="346-346"];
m1_267 [file="RedisStorageConnection.cs", label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", span=""];
m1_268 [file="RedisStorageConnection.cs", label=string, span=""];
m1_269 [file="RedisStorageConnection.cs", label="System.TimeSpan", span=""];
m1_270 [file="RedisStorageConnection.cs", label=string, span=""];
m1_271 [file="RedisStorageConnection.cs", label=string, span=""];
m1_272 [file="RedisStorageConnection.cs", label="Hangfire.States.IState", span=""];
m1_273 [file="RedisStorageConnection.cs", label=addAndSetStateSql, span=""];
m1_274 [file="RedisStorageConnection.cs", label=string, span=""];
m1_275 [file="RedisStorageConnection.cs", label="Hangfire.States.IState", span=""];
m1_276 [file="RedisStorageConnection.cs", label=addStateSql, span=""];
m1_277 [file="RedisStorageConnection.cs", label=string, span=""];
m1_278 [file="RedisStorageConnection.cs", label=string, span=""];
m1_279 [file="RedisStorageConnection.cs", label=persistentQueue, span=""];
m1_280 [file="RedisStorageConnection.cs", label=string, span=""];
m1_281 [file="RedisStorageConnection.cs", label=string, span=""];
m1_282 [file="RedisStorageConnection.cs", label="System.TimeSpan", span=""];
m1_283 [file="RedisStorageConnection.cs", label=string, span=""];
m1_284 [file="RedisStorageConnection.cs", label=string, span=""];
m1_285 [file="RedisStorageConnection.cs", label="System.TimeSpan", span=""];
m1_286 [file="RedisStorageConnection.cs", label=string, span=""];
m1_287 [file="RedisStorageConnection.cs", label=string, span=""];
m1_288 [file="RedisStorageConnection.cs", label=double, span=""];
m1_289 [file="RedisStorageConnection.cs", label=addSql, span=""];
m1_290 [file="RedisStorageConnection.cs", label=string, span=""];
m1_291 [file="RedisStorageConnection.cs", label=string, span=""];
m1_292 [file="RedisStorageConnection.cs", label=query, span=""];
m1_293 [file="RedisStorageConnection.cs", label=string, span=""];
m1_294 [file="RedisStorageConnection.cs", label=string, span=""];
m1_295 [file="RedisStorageConnection.cs", label=string, span=""];
m1_296 [file="RedisStorageConnection.cs", label=string, span=""];
m1_297 [file="RedisStorageConnection.cs", label=string, span=""];
m1_298 [file="RedisStorageConnection.cs", label=int, span=""];
m1_299 [file="RedisStorageConnection.cs", label=int, span=""];
m1_300 [file="RedisStorageConnection.cs", label=trimSql, span=""];
m1_301 [file="RedisStorageConnection.cs", label=string, span=""];
m1_302 [file="RedisStorageConnection.cs", label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", span=""];
m1_303 [file="RedisStorageConnection.cs", label=sql, span=""];
m1_304 [file="RedisStorageConnection.cs", label=string, span=""];
m1_305 [file="RedisStorageConnection.cs", label=query, span=""];
m1_306 [file="RedisStorageConnection.cs", label=string, span=""];
m1_307 [file="RedisStorageConnection.cs", label="System.Collections.Generic.IList<string>", span=""];
m1_308 [file="RedisStorageConnection.cs", label=query, span=""];
m1_309 [file="RedisStorageConnection.cs", label=string, span=""];
m1_310 [file="RedisStorageConnection.cs", label=query, span=""];
m1_311 [file="RedisStorageConnection.cs", label=string, span=""];
m1_312 [file="RedisStorageConnection.cs", label="System.TimeSpan", span=""];
m1_313 [file="RedisStorageConnection.cs", label=query, span=""];
m1_314 [file="RedisStorageConnection.cs", label=string, span=""];
m1_315 [file="RedisStorageConnection.cs", label="System.TimeSpan", span=""];
m1_316 [file="RedisStorageConnection.cs", label=query, span=""];
m1_317 [file="RedisStorageConnection.cs", label=string, span=""];
m1_318 [file="RedisStorageConnection.cs", label="System.TimeSpan", span=""];
m1_319 [file="RedisStorageConnection.cs", label=query, span=""];
m1_320 [file="RedisStorageConnection.cs", label=string, span=""];
m1_321 [file="RedisStorageConnection.cs", label=query, span=""];
m1_322 [file="RedisStorageConnection.cs", label=string, span=""];
m1_323 [file="RedisStorageConnection.cs", label=query, span=""];
m1_324 [file="RedisStorageConnection.cs", label=string, span=""];
m1_325 [file="RedisStorageConnection.cs", label=query, span=""];
m2_106 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="ServerWatchdog.cs", label="string query = @''delete from HangFire.[Set] where [Key] = @key and Value = @value''", span="185-185"];
m2_108 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                query,\r\n                new { key, value }))", span="188-190"];
m2_107 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="ServerWatchdog.cs", label="AcquireSetLock()", span="187-187"];
m2_109 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="183-183"];
m2_19 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", span="366-366"];
m2_101 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", span="351-351"];
m2_256 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", file="ServerWatchdog.cs", label="AcquireLock(String.Format(''Hangfire:Set:Lock''))", span="353-353"];
m2_257 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", span="351-351"];
m2_9 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs", label="Entry HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", span="46-46"];
m2_30 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="75-75"];
m2_49 [cluster="Hangfire.States.IState.SerializeData()", file="ServerWatchdog.cs", label="Entry Hangfire.States.IState.SerializeData()", span="27-27"];
m2_10 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs", label="Logger.Info(''Server watchdog has been started.'')", span="50-50"];
m2_11 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs", label=true, span="52-52"];
m2_12 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs", label="JobServer.RetryOnException(\r\n                        () => RemoveTimedOutServers(ServerTimeout), \r\n                        _stopped)", span="54-56"];
m2_17 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs", label="Exit HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", span="46-46"];
m2_13 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs", label="_stopped.WaitOne(CheckInterval)", span="58-58"];
m2_14 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs", label="Logger.Info(''Server watchdog has been stopped.'')", span="64-64"];
m2_15 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs", label=Exception, span="66-66"];
m2_16 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="ServerWatchdog.cs", label="Logger.Fatal(''Unexpected exception caught.'', ex)", span="68-68"];
m2_18 [cluster="Unk.Info", file="ServerWatchdog.cs", label="Entry Unk.Info", span=""];
m2_69 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="135-135"];
m2_70 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 }))", span="137-139"];
m2_71 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="135-135"];
m2_229 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="319-319"];
m2_230 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="ServerWatchdog.cs", label="key == null", span="321-321"];
m2_234 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="327-327"];
m2_231 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="ServerWatchdog.cs", label="throw new ArgumentNullException(''key'');", span="321-321"];
m2_232 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="ServerWatchdog.cs", label="string query = @''\r\nupdate HangFire.[Set] set ExpireAt = null where [Key] = @key''", span="323-324"];
m2_233 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="ServerWatchdog.cs", label="AcquireSetLock()", span="326-326"];
m2_235 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="319-319"];
m2_63 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m2_239 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="330-330"];
m2_240 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="ServerWatchdog.cs", label="key == null", span="332-332"];
m2_244 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="338-338"];
m2_241 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="ServerWatchdog.cs", label="throw new ArgumentNullException(''key'');", span="332-332"];
m2_242 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="ServerWatchdog.cs", label="string query = @''\r\nupdate HangFire.[List] set ExpireAt = null where [Key] = @key''", span="334-335"];
m2_243 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="ServerWatchdog.cs", label="AcquireListLock()", span="337-337"];
m2_245 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="330-330"];
m2_81 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="149-149"];
m2_82 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 }))", span="151-153"];
m2_83 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="149-149"];
m2_254 [cluster="string.Format(string, params object[])", file="ServerWatchdog.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m2_255 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", span="361-361"];
m2_260 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", file="ServerWatchdog.cs", label="_lockedResources.Add(resource)", span="363-363"];
m2_261 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", span="361-361"];
m2_199 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="286-286"];
m2_200 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="ServerWatchdog.cs", label="key == null", span="288-288"];
m2_204 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="294-294"];
m2_201 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="ServerWatchdog.cs", label="throw new ArgumentNullException(''key'');", span="288-288"];
m2_202 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="ServerWatchdog.cs", label="string query = @''\r\nupdate HangFire.[Set] set ExpireAt = @expireAt where [Key] = @key''", span="290-291"];
m2_203 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="ServerWatchdog.cs", label="AcquireSetLock()", span="293-293"];
m2_205 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="286-286"];
m2_0 [cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", file="ServerWatchdog.cs", label="Entry HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="33-33"];
m2_1 [cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", file="ServerWatchdog.cs", label="_storage = storage", span="35-35"];
m2_3 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", file="ServerWatchdog.cs", label="Entry HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", span="38-38"];
m2_5 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", color=green, community=0, file="ServerWatchdog.cs", label="connection.RemoveTimedOutServers(timeout)", prediction=4, span="42-42"];
m2_6 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", file="ServerWatchdog.cs", label="Exit HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", span="38-38"];
m2_7 [cluster="HangFire.JobStorage.GetConnection()", file="ServerWatchdog.cs", label="Entry HangFire.JobStorage.GetConnection()", span="45-45"];
m2_2 [cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", file="ServerWatchdog.cs", label="Exit HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="33-33"];
m2_4 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", file="ServerWatchdog.cs", label="var connection = _storage.GetConnection()", span="40-40"];
m2_8 [cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="ServerWatchdog.cs", label="Entry HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="26-26"];
m2_145 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", span="356-356"];
m2_258 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", file="ServerWatchdog.cs", label="AcquireLock(String.Format(''Hangfire:Hash:Lock''))", span="358-358"];
m2_259 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", span="356-356"];
m2_251 [cluster="System.Collections.Generic.Queue<T>.Enqueue(T)", file="ServerWatchdog.cs", label="Entry System.Collections.Generic.Queue<T>.Enqueue(T)", span="0-0"];
m2_42 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", span="89-89"];
m2_43 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="ServerWatchdog.cs", label="string addAndSetStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data);\r\nupdate HangFire.Job set StateId = SCOPE_IDENTITY(), StateName = @name where Id = @id;''", span="91-94"];
m2_44 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                addAndSetStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId,\r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow,\r\n                    data = JobHelper.ToJson(state.SerializeData()),\r\n                    id = jobId\r\n                }))", span="96-106"];
m2_45 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", span="89-89"];
m2_209 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="297-297"];
m2_210 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="ServerWatchdog.cs", label="key == null", span="299-299"];
m2_214 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="305-305"];
m2_211 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="ServerWatchdog.cs", label="throw new ArgumentNullException(''key'');", span="299-299"];
m2_212 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="ServerWatchdog.cs", label="string query = @''\r\nupdate HangFire.[List] set ExpireAt = @expireAt where [Key] = @key''", span="301-302"];
m2_213 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="ServerWatchdog.cs", label="AcquireListLock()", span="304-304"];
m2_215 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="297-297"];
m2_51 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", span="109-109"];
m2_52 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="ServerWatchdog.cs", label="string addStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data)''", span="111-113"];
m2_53 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                }))", span="115-124"];
m2_54 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", span="109-109"];
m2_68 [cluster="Hangfire.SqlServer.IPersistentJobQueue.Enqueue(string, string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueue.Enqueue(string, string)", span="24-24"];
m2_87 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="156-156"];
m2_88 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="158-160"];
m2_89 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="156-156"];
m2_179 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="265-265"];
m2_180 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="ServerWatchdog.cs", label="key == null", span="267-267"];
m2_184 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="272-272"];
m2_181 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="ServerWatchdog.cs", label="throw new ArgumentNullException(''key'');", span="267-267"];
m2_182 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="ServerWatchdog.cs", label="string query = @''delete from HangFire.[Set] where [Key] = @key''", span="269-269"];
m2_183 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="ServerWatchdog.cs", label="AcquireSetLock()", span="271-271"];
m2_185 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="265-265"];
m2_93 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="163-163"];
m2_94 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="ServerWatchdog.cs", label="AddToSet(key, value, 0.0)", span="165-165"];
m2_95 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="163-163"];
m2_31 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="ServerWatchdog.cs", label="HangFire.Server.Components.ServerWatchdog", span=""];
m2_249 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="ServerWatchdog.cs", label="_commandQueue.Enqueue(action)", span="343-343"];
m2_250 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="341-341"];
m2_29 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId }))", span="77-79"];
m2_58 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="127-127"];
m2_59 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="ServerWatchdog.cs", label="var provider = _queueProviders.GetProvider(queue)", span="129-129"];
m2_61 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="ServerWatchdog.cs", label="QueueCommand(_ => persistentQueue.Enqueue(queue, jobId))", span="132-132"];
m2_60 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="ServerWatchdog.cs", label="var persistentQueue = provider.GetJobQueue(_connection)", span="130-130"];
m2_62 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="127-127"];
m2_75 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="142-142"];
m2_76 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="144-146"];
m2_77 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="142-142"];
m2_20 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="ServerWatchdog.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m2_23 [cluster="lambda expression", file="ServerWatchdog.cs", label="RemoveTimedOutServers(ServerTimeout)", span="55-55"];
m2_136 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="224-224"];
m2_137 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="ServerWatchdog.cs", label="key == null", span="226-226"];
m2_139 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="ServerWatchdog.cs", label="keyValuePairs == null", span="227-227"];
m2_143 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                sql,\r\n                keyValuePairs.Select(y => new { key = key, field = y.Key, value = y.Value })))", span="237-239"];
m2_138 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="ServerWatchdog.cs", label="throw new ArgumentNullException(''key'');", span="226-226"];
m2_140 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="ServerWatchdog.cs", label="throw new ArgumentNullException(''keyValuePairs'');", span="227-227"];
m2_141 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="ServerWatchdog.cs", label="string sql = @''\r\n;merge HangFire.Hash with (holdlock) as Target\r\nusing (VALUES (@key, @field, @value)) as Source ([Key], Field, Value)\r\non Target.[Key] = Source.[Key] and Target.Field = Source.Field\r\nwhen matched then update set Value = Source.Value\r\nwhen not matched then insert ([Key], Field, Value) values (Source.[Key], Source.Field, Source.Value);''", span="229-234"];
m2_142 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="ServerWatchdog.cs", label="AcquireHashLock()", span="236-236"];
m2_144 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="224-224"];
m2_265 [cluster="TransactionScope.cstr", file="ServerWatchdog.cs", label="Entry TransactionScope.cstr", span=""];
m2_96 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="168-168"];
m2_97 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="ServerWatchdog.cs", label="string addSql = @''\r\n;merge HangFire.[Set] with (holdlock) as Target\r\nusing (VALUES (@key, @value, @score)) as Source ([Key], Value, Score)\r\non Target.[Key] = Source.[Key] and Target.Value = Source.Value\r\nwhen matched then update set Score = Source.Score\r\nwhen not matched then insert ([Key], Value, Score) values (Source.[Key], Source.Value, Source.Score);''", span="170-175"];
m2_99 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                addSql,\r\n                new { key, value, score }))", span="178-180"];
m2_98 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="ServerWatchdog.cs", label="AcquireSetLock()", span="177-177"];
m2_100 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="168-168"];
m2_153 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="242-242"];
m2_154 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="ServerWatchdog.cs", label="key == null", span="244-244"];
m2_158 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(query, new { key }))", span="249-249"];
m2_155 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="ServerWatchdog.cs", label="throw new ArgumentNullException(''key'');", span="244-244"];
m2_156 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="ServerWatchdog.cs", label="string query = @''delete from HangFire.Hash where [Key] = @key''", span="246-246"];
m2_157 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="ServerWatchdog.cs", label="AcquireHashLock()", span="248-248"];
m2_159 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="242-242"];
m2_24 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="55-55"];
m2_35 [cluster="System.DateTime.Add(System.TimeSpan)", file="ServerWatchdog.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m2_36 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="82-82"];
m2_37 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId }))", span="84-86"];
m2_38 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="82-82"];
m2_25 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="63-63"];
m2_26 [cluster="lambda expression", file="ServerWatchdog.cs", label="new { resource = x }", span="63-63"];
m2_27 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="63-63"];
m2_28 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="75-75"];
m2_263 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", file="ServerWatchdog.cs", label="return isolationLevel != null\r\n                ? new TransactionScope(TransactionScopeOption.Required,\r\n                    new TransactionOptions { IsolationLevel = isolationLevel.Value })\r\n                : new TransactionScope();", span="368-371"];
m2_264 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", span="366-366"];
m2_189 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="275-275"];
m2_190 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="ServerWatchdog.cs", label="key == null", span="277-277"];
m2_194 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="283-283"];
m2_191 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="ServerWatchdog.cs", label="throw new ArgumentNullException(''key'');", span="277-277"];
m2_192 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="ServerWatchdog.cs", label="string query = @''\r\nupdate HangFire.[Hash] set ExpireAt = @expireAt where [Key] = @key''", span="279-280"];
m2_193 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="ServerWatchdog.cs", label="AcquireHashLock()", span="282-282"];
m2_195 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="275-275"];
m2_21 [cluster="Unk.Select", file="ServerWatchdog.cs", label="Entry Unk.Select", span=""];
m2_50 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="ServerWatchdog.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m2_266 [cluster="TransactionOptions.cstr", file="ServerWatchdog.cs", label="Entry TransactionOptions.cstr", span=""];
m2_22 [cluster="Unk.Execute", file="ServerWatchdog.cs", label="Entry Unk.Execute", span=""];
m2_33 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId })", span="77-79"];
m2_32 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="77-79"];
m2_34 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="77-79"];
m2_40 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId })", span="84-86"];
m2_39 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="84-86"];
m2_41 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="84-86"];
m2_47 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                addAndSetStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId,\r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow,\r\n                    data = JobHelper.ToJson(state.SerializeData()),\r\n                    id = jobId\r\n                })", span="96-106"];
m2_46 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="96-106"];
m2_48 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="96-106"];
m2_56 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                })", span="115-124"];
m2_55 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="115-124"];
m2_57 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="115-124"];
m2_66 [cluster="lambda expression", file="ServerWatchdog.cs", label="persistentQueue.Enqueue(queue, jobId)", span="132-132"];
m2_65 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="132-132"];
m2_67 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="132-132"];
m2_73 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 })", span="137-139"];
m2_72 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="137-139"];
m2_74 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="137-139"];
m2_79 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="144-146"];
m2_78 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="144-146"];
m2_80 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="144-146"];
m2_85 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 })", span="151-153"];
m2_84 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="151-153"];
m2_86 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="151-153"];
m2_91 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="158-160"];
m2_90 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="158-160"];
m2_92 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="158-160"];
m2_103 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                addSql,\r\n                new { key, value, score })", span="178-180"];
m2_102 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="178-180"];
m2_104 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="178-180"];
m2_111 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                query,\r\n                new { key, value })", span="188-190"];
m2_110 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="188-190"];
m2_112 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="188-190"];
m2_119 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value);'',\r\n                new { key, value })", span="196-198"];
m2_118 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="196-198"];
m2_120 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="196-198"];
m2_126 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="204-206"];
m2_125 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="204-206"];
m2_127 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="204-206"];
m2_134 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 })", span="219-221"];
m2_133 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="219-221"];
m2_135 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="219-221"];
m2_148 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(\r\n                sql,\r\n                keyValuePairs.Select(y => new { key = key, field = y.Key, value = y.Value }))", span="237-239"];
m2_151 [cluster="lambda expression", file="ServerWatchdog.cs", label="new { key = key, field = y.Key, value = y.Value }", span="239-239"];
m2_147 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="237-239"];
m2_149 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="237-239"];
m2_150 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="239-239"];
m2_152 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="239-239"];
m2_161 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(query, new { key })", span="249-249"];
m2_160 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="249-249"];
m2_162 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="249-249"];
m2_173 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(query, items.Select(value => new { key = key, value = value }).ToList())", span="262-262"];
m2_177 [cluster="lambda expression", file="ServerWatchdog.cs", label="new { key = key, value = value }", span="262-262"];
m2_172 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="262-262"];
m2_174 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="262-262"];
m2_176 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="262-262"];
m2_178 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="262-262"];
m2_187 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(query, new { key = key })", span="272-272"];
m2_186 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="272-272"];
m2_188 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="272-272"];
m2_197 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) })", span="283-283"];
m2_196 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="283-283"];
m2_198 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="283-283"];
m2_207 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) })", span="294-294"];
m2_206 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="294-294"];
m2_208 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="294-294"];
m2_217 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) })", span="305-305"];
m2_216 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="305-305"];
m2_218 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="305-305"];
m2_227 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(query, new { key = key })", span="316-316"];
m2_226 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="316-316"];
m2_228 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="316-316"];
m2_237 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(query, new { key = key })", span="327-327"];
m2_236 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="327-327"];
m2_238 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="327-327"];
m2_247 [cluster="lambda expression", file="ServerWatchdog.cs", label="x.Execute(query, new { key = key })", span="338-338"];
m2_246 [cluster="lambda expression", file="ServerWatchdog.cs", label="Entry lambda expression", span="338-338"];
m2_248 [cluster="lambda expression", file="ServerWatchdog.cs", label="Exit lambda expression", span="338-338"];
m2_163 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="252-252"];
m2_164 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="ServerWatchdog.cs", label="key == null", span="254-254"];
m2_166 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="ServerWatchdog.cs", label="items == null", span="255-255"];
m2_170 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(query, items.Select(value => new { key = key, value = value }).ToList()))", span="262-262"];
m2_165 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="ServerWatchdog.cs", label="throw new ArgumentNullException(''key'');", span="254-254"];
m2_167 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="ServerWatchdog.cs", label="throw new ArgumentNullException(''items'');", span="255-255"];
m2_168 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="ServerWatchdog.cs", label="string query = @''\r\ninsert into HangFire.[Set] ([Key], Value, Score)\r\nvalues (@key, @value, 0.0)''", span="257-259"];
m2_169 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="ServerWatchdog.cs", label="AcquireSetLock()", span="261-261"];
m2_171 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="252-252"];
m2_262 [cluster="System.Collections.Generic.SortedSet<T>.Add(T)", file="ServerWatchdog.cs", label="Entry System.Collections.Generic.SortedSet<T>.Add(T)", span="0-0"];
m2_175 [cluster="Unk.ToList", file="ServerWatchdog.cs", label="Entry Unk.ToList", span=""];
m2_64 [cluster="Unk.GetJobQueue", file="ServerWatchdog.cs", label="Entry Unk.GetJobQueue", span=""];
m2_146 [cluster="Unk.QueueCommand", file="ServerWatchdog.cs", label="Entry Unk.QueueCommand", span=""];
m2_121 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="201-201"];
m2_122 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="ServerWatchdog.cs", label="AcquireListLock()", span="203-203"];
m2_123 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="204-206"];
m2_124 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="201-201"];
m2_117 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", span="346-346"];
m2_252 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", file="ServerWatchdog.cs", label="AcquireLock(String.Format(''Hangfire:List:Lock''))", span="348-348"];
m2_253 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", span="346-346"];
m2_219 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="308-308"];
m2_220 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="ServerWatchdog.cs", label="key == null", span="310-310"];
m2_224 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="316-316"];
m2_221 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="ServerWatchdog.cs", label="throw new ArgumentNullException(''key'');", span="310-310"];
m2_222 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="ServerWatchdog.cs", label="string query = @''\r\nupdate HangFire.Hash set ExpireAt = null where [Key] = @key''", span="312-313"];
m2_223 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="ServerWatchdog.cs", label="AcquireHashLock()", span="315-315"];
m2_225 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="308-308"];
m2_113 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="193-193"];
m2_114 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="ServerWatchdog.cs", label="AcquireListLock()", span="195-195"];
m2_115 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value);'',\r\n                new { key, value }))", span="196-198"];
m2_116 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="193-193"];
m2_128 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="ServerWatchdog.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="209-209"];
m2_129 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="ServerWatchdog.cs", label="string trimSql = @''\r\n;with cte as (\r\n    select row_number() over (order by Id desc) as row_num, [Key] \r\n    from HangFire.List\r\n    where [Key] = @key)\r\ndelete from cte where row_num not between @start and @end''", span="211-216"];
m2_131 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="ServerWatchdog.cs", label="QueueCommand(x => x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 }))", span="219-221"];
m2_130 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="ServerWatchdog.cs", label="AcquireListLock()", span="218-218"];
m2_132 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="ServerWatchdog.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="209-209"];
m2_267 [file="ServerWatchdog.cs", label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", span=""];
m2_268 [file="ServerWatchdog.cs", label=string, span=""];
m2_269 [file="ServerWatchdog.cs", label="System.TimeSpan", span=""];
m2_270 [file="ServerWatchdog.cs", label=string, span=""];
m2_271 [file="ServerWatchdog.cs", label=string, span=""];
m2_272 [file="ServerWatchdog.cs", label="Hangfire.States.IState", span=""];
m2_273 [file="ServerWatchdog.cs", label=addAndSetStateSql, span=""];
m2_274 [file="ServerWatchdog.cs", label=string, span=""];
m2_275 [file="ServerWatchdog.cs", label="Hangfire.States.IState", span=""];
m2_276 [file="ServerWatchdog.cs", label=addStateSql, span=""];
m2_277 [file="ServerWatchdog.cs", label=string, span=""];
m2_278 [file="ServerWatchdog.cs", label=string, span=""];
m2_279 [file="ServerWatchdog.cs", label=persistentQueue, span=""];
m2_280 [file="ServerWatchdog.cs", label=string, span=""];
m2_281 [file="ServerWatchdog.cs", label=string, span=""];
m2_282 [file="ServerWatchdog.cs", label="System.TimeSpan", span=""];
m2_283 [file="ServerWatchdog.cs", label=string, span=""];
m2_284 [file="ServerWatchdog.cs", label=string, span=""];
m2_285 [file="ServerWatchdog.cs", label="System.TimeSpan", span=""];
m2_286 [file="ServerWatchdog.cs", label=string, span=""];
m2_287 [file="ServerWatchdog.cs", label=string, span=""];
m2_288 [file="ServerWatchdog.cs", label=double, span=""];
m2_289 [file="ServerWatchdog.cs", label=addSql, span=""];
m2_290 [file="ServerWatchdog.cs", label=string, span=""];
m2_291 [file="ServerWatchdog.cs", label=string, span=""];
m2_292 [file="ServerWatchdog.cs", label=query, span=""];
m2_293 [file="ServerWatchdog.cs", label=string, span=""];
m2_294 [file="ServerWatchdog.cs", label=string, span=""];
m2_295 [file="ServerWatchdog.cs", label=string, span=""];
m2_296 [file="ServerWatchdog.cs", label=string, span=""];
m2_297 [file="ServerWatchdog.cs", label=string, span=""];
m2_298 [file="ServerWatchdog.cs", label=int, span=""];
m2_299 [file="ServerWatchdog.cs", label=int, span=""];
m2_300 [file="ServerWatchdog.cs", label=trimSql, span=""];
m2_301 [file="ServerWatchdog.cs", label=string, span=""];
m2_302 [file="ServerWatchdog.cs", label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", span=""];
m2_303 [file="ServerWatchdog.cs", label=sql, span=""];
m2_304 [file="ServerWatchdog.cs", label=string, span=""];
m2_305 [file="ServerWatchdog.cs", label=query, span=""];
m2_306 [file="ServerWatchdog.cs", label=string, span=""];
m2_307 [file="ServerWatchdog.cs", label="System.Collections.Generic.IList<string>", span=""];
m2_308 [file="ServerWatchdog.cs", label=query, span=""];
m2_309 [file="ServerWatchdog.cs", label=string, span=""];
m2_310 [file="ServerWatchdog.cs", label=query, span=""];
m2_311 [file="ServerWatchdog.cs", label=string, span=""];
m2_312 [file="ServerWatchdog.cs", label="System.TimeSpan", span=""];
m2_313 [file="ServerWatchdog.cs", label=query, span=""];
m2_314 [file="ServerWatchdog.cs", label=string, span=""];
m2_315 [file="ServerWatchdog.cs", label="System.TimeSpan", span=""];
m2_316 [file="ServerWatchdog.cs", label=query, span=""];
m2_317 [file="ServerWatchdog.cs", label=string, span=""];
m2_318 [file="ServerWatchdog.cs", label="System.TimeSpan", span=""];
m2_319 [file="ServerWatchdog.cs", label=query, span=""];
m2_320 [file="ServerWatchdog.cs", label=string, span=""];
m2_321 [file="ServerWatchdog.cs", label=query, span=""];
m2_322 [file="ServerWatchdog.cs", label=string, span=""];
m2_323 [file="ServerWatchdog.cs", label=query, span=""];
m2_324 [file="ServerWatchdog.cs", label=string, span=""];
m2_325 [file="ServerWatchdog.cs", label=query, span=""];
m3_11 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", file="SqlServerMonitoringApi.cs", label="_connection.Dispose()", span="34-34"];
m3_16 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="SqlServerMonitoringApi.cs", label="return GetNumberOfJobsByStateName(ScheduledState.Name);", span="39-39"];
m3_17 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="37-37"];
m3_18 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", span="65-65"];
m3_19 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="42-42"];
m3_71 [cluster="HangFire.Common.JobMethod.Deserialize(HangFire.Storage.InvocationData)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Common.JobMethod.Deserialize(HangFire.Storage.InvocationData)", span="89-89"];
m3_142 [cluster="HangFire.Storage.Monitoring.DequeuedJobDto.DequeuedJobDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.DequeuedJobDto.DequeuedJobDto()", span="5-5"];
m3_50 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.Job>, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.Job>, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="110-110"];
m3_55 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.Job>, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="121-122"];
m3_51 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.Job>, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="114-114"];
m3_52 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.Job>, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label=jobs, span="116-116"];
m3_54 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.Job>, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="var dto = selector(DeserializeJobMethod(job.InvocationData), stateData)", span="119-119"];
m3_56 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.Job>, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="return new JobList<TDto>(result);", span="125-125"];
m3_53 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.Job>, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="var stateData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="118-118"];
m3_57 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.Job>, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.Job>, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="110-110"];
m3_62 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m3_43 [cluster="Unk.AreEqual", file="SqlServerMonitoringApi.cs", label="Entry Unk.AreEqual", span=""];
m3_178 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="351-351"];
m3_181 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="var multi = _connection.QueryMultiple(sql)", span="362-362"];
m3_180 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="string sql = @''\r\nselect [State], count(id) as [Count] From HangFire.Job group by [State]\r\nselect count(Id) from HangFire.Server\r\nselect count(distinct Queue) from HangFire.JobQueue\r\nselect sum([Value]) from HangFire.Counter where [Key] = 'stats:succeeded'\r\n''", span="355-360"];
m3_182 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="var countByStates = multi.Read().ToDictionary(x => x.State, x => x.Count)", span="364-364"];
m3_188 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="stats.Servers = multi.Read<int>().Single()", span="373-373"];
m3_189 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="stats.Queues = multi.Read<int>().Single()", span="374-374"];
m3_190 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="stats.Succeeded = multi.Read<int?>().SingleOrDefault() ?? 0", span="376-376"];
m3_179 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="var stats = new StatisticsDto()", span="353-353"];
m3_183 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="Func<string, int> getCountIfExists = name => countByStates.ContainsKey(name) ? countByStates[name] : 0", span="366-366"];
m3_187 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="stats.Scheduled = getCountIfExists(ScheduledState.Name)", span="371-371"];
m3_191 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="return stats;", span="379-379"];
m3_184 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="stats.Enqueued = getCountIfExists(EnqueuedState.Name)", span="368-368"];
m3_185 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="stats.Failed = getCountIfExists(FailedState.Name)", span="369-369"];
m3_186 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="stats.Processing = getCountIfExists(ProcessingState.Name)", span="370-370"];
m3_192 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="351-351"];
m3_42 [cluster="Unk.GetListCount", file="SqlServerMonitoringApi.cs", label="Entry Unk.GetListCount", span=""];
m3_83 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="159-159"];
m3_84 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="SqlServerMonitoringApi.cs", label="return GetTimelineStats(''failed'');", span="161-161"];
m3_85 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="159-159"];
m3_103 [cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="56-56"];
m3_7 [cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", span="25-25"];
m3_147 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", span="382-382"];
m3_215 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var valuesMap = _connection.Query(\r\n                sqlQuery,\r\n                new { keys = keys })\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="399-402"];
m3_210 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="dates.Add(endDate)", span="388-388"];
m3_213 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var keys = dates.Select(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="392-392"];
m3_214 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys''", span="394-397"];
m3_216 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label=keys, span="404-404"];
m3_217 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="!valuesMap.ContainsKey(key)", span="406-406"];
m3_218 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="valuesMap.Add(key, 0)", span="406-406"];
m3_222 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="412-412"];
m3_206 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var endDate = DateTime.UtcNow", span="384-384"];
m3_207 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var dates = new List<DateTime>()", span="385-385"];
m3_209 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="i < 24", span="386-386"];
m3_211 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="endDate = endDate.AddHours(-1)", span="389-389"];
m3_219 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var result = new Dictionary<DateTime, long>()", span="409-409"];
m3_221 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="i < dates.Count", span="410-410"];
m3_220 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var i = 0", span="410-410"];
m3_223 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="result.Add(dates[i], value)", span="413-413"];
m3_208 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var i = 0", span="386-386"];
m3_212 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="i++", span="386-386"];
m3_225 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="return result;", span="416-416"];
m3_224 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="i++", span="410-410"];
m3_226 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", span="382-382"];
m3_141 [cluster="Unk.ToString", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToString", span=""];
m3_151 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="315-315"];
m3_153 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="var multi = _connection.QueryMultiple(sql, new { id = jobId })", span="322-322"];
m3_159 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="return new JobDetailsDto\r\n                {\r\n                    Arguments = JobHelper.FromJson<string[]>(job.Arguments),\r\n                    CreatedAt = job.CreatedAt,\r\n                    State = job.State,\r\n                    Method = DeserializeJobMethod(job.InvocationData),\r\n                    History = history,\r\n                    Properties = parameters\r\n                };", span="334-342"];
m3_152 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.JobHistory where JobId = @id order by CreatedAt desc''", span="317-320"];
m3_154 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="var job = multi.Read<Job>().SingleOrDefault()", span="324-324"];
m3_157 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="327-327"];
m3_158 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="var history =\r\n                    multi.Read<JobHistory>()\r\n                        .ToList()\r\n                        .Select(x => JobHelper.FromJson<Dictionary<string, string>>(x.Data))\r\n                        .ToList()", span="328-332"];
m3_155 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="job == null", span="325-325"];
m3_156 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="return null;", span="325-325"];
m3_160 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="315-315"];
m3_49 [cluster="Unk.DeserializeJobs", file="SqlServerMonitoringApi.cs", label="Entry Unk.DeserializeJobs", span=""];
m3_24 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedCount(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DequeuedCount(string)", span="51-51"];
m3_25 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedCount(string)", file="SqlServerMonitoringApi.cs", label="return _connection.Query<int>(\r\n                @''select count(JobId) from HangFire.JobQueue ''\r\n                + @''where Queue = @queue and FetchedAt is not NULL'',\r\n                new { queue = queue })\r\n                .Single();", span="53-57"];
m3_26 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedCount(string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DequeuedCount(string)", span="51-51"];
m3_27 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="60-60"];
m3_32 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", span="67-67"];
m3_33 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", span="73-73"];
m3_34 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="SqlServerMonitoringApi.cs", label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="75-76"];
m3_144 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="305-305"];
m3_145 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="SqlServerMonitoringApi.cs", label="return GetHourlyTimelineStats(''succeeded'');", span="307-307"];
m3_146 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="305-305"];
m3_6 [cluster="TransactionOptions.cstr", file="SqlServerMonitoringApi.cs", label="Entry TransactionOptions.cstr", span=""];
m3_194 [cluster="Unk.Read", file="SqlServerMonitoringApi.cs", label="Entry Unk.Read", span=""];
m3_12 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", span="30-30"];
m3_13 [cluster="Unk.Complete", file="SqlServerMonitoringApi.cs", label="Entry Unk.Complete", span=""];
m3_14 [cluster="Unk.Dispose", file="SqlServerMonitoringApi.cs", label="Entry Unk.Dispose", span=""];
m3_104 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="204-204"];
m3_105 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return GetJobs(\r\n                from,\r\n                count,\r\n                SucceededState.Name,\r\n                (method, stateData) => new SucceededJobDto\r\n                {\r\n                    Method = method,\r\n                    SucceededAt = JobHelper.FromNullableStringTimestamp(stateData[''SucceededAt''])\r\n                });", span="206-214"];
m3_106 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="204-204"];
m3_96 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="188-188"];
m3_97 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return GetJobs(\r\n                from,\r\n                count,\r\n                FailedState.Name,\r\n                (method, stateData) => new FailedJobDto\r\n                {\r\n                    Method = method,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.FromNullableStringTimestamp(stateData[''FailedAt''])\r\n                });", span="190-201"];
m3_98 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="188-188"];
m3_38 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="91-91"];
m3_39 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="83-88"];
m3_40 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new ProcessingJobDto\r\n                {\r\n                    Method = method,\r\n                    ServerName = stateData[''ServerName''],\r\n                    StartedAt = JobHelper.FromStringTimestamp(stateData[''StartedAt'']),\r\n                }", span="83-88"];
m3_41 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="83-88"];
m3_205 [cluster="Unk.ContainsKey", file="SqlServerMonitoringApi.cs", label="Entry Unk.ContainsKey", span=""];
m3_121 [cluster="Unk.EnqueuedJobs", file="SqlServerMonitoringApi.cs", label="Entry Unk.EnqueuedJobs", span=""];
m3_79 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="154-154"];
m3_80 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="SqlServerMonitoringApi.cs", label="return GetTimelineStats(''succeeded'');", span="156-156"];
m3_81 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="154-154"];
m3_59 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="28-28"];
m3_139 [cluster="List<KeyValuePair<string, DequeuedJobDto>>.cstr", file="SqlServerMonitoringApi.cs", label="Entry List<KeyValuePair<string, DequeuedJobDto>>.cstr", span=""];
m3_60 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobMethod(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobMethod(string)", span="128-128"];
m3_69 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobMethod(string)", file="SqlServerMonitoringApi.cs", label="return null;", span="138-138"];
m3_68 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobMethod(string)", file="SqlServerMonitoringApi.cs", label=JobLoadException, span="136-136"];
m3_66 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobMethod(string)", file="SqlServerMonitoringApi.cs", label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="130-130"];
m3_67 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobMethod(string)", file="SqlServerMonitoringApi.cs", label="return JobMethod.Deserialize(data);", span="134-134"];
m3_70 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobMethod(string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobMethod(string)", span="128-128"];
m3_193 [cluster="HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="2-2"];
m3_195 [cluster="System.Func<T, TResult>.Invoke(T)", file="SqlServerMonitoringApi.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m3_63 [cluster="int.ToString()", file="SqlServerMonitoringApi.cs", label="Entry int.ToString()", span="0-0"];
m3_28 [cluster="Unk.GetAllItemsFromList", file="SqlServerMonitoringApi.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m3_29 [cluster="Unk.Contains", file="SqlServerMonitoringApi.cs", label="Entry Unk.Contains", span=""];
m3_95 [cluster="HangFire.Storage.Monitoring.ServerDto.ServerDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.ServerDto.ServerDto()", span="5-5"];
m3_143 [cluster="Unk.DeserializeJobMethod", file="SqlServerMonitoringApi.cs", label="Entry Unk.DeserializeJobMethod", span=""];
m3_5 [cluster="string.Format(string, object)", file="SqlServerMonitoringApi.cs", label="Entry string.Format(string, object)", span="0-0"];
m3_264 [cluster="System.DateTime.AddDays(double)", file="SqlServerMonitoringApi.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m3_35 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="78-78"];
m3_36 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return GetJobs(\r\n                from, count,\r\n                ProcessingState.Name,\r\n                (method, stateData) => new ProcessingJobDto\r\n                {\r\n                    Method = method,\r\n                    ServerName = stateData[''ServerName''],\r\n                    StartedAt = JobHelper.FromStringTimestamp(stateData[''StartedAt'']),\r\n                });", span="80-88"];
m3_8 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", span="30-30"];
m3_9 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", file="SqlServerMonitoringApi.cs", label="_transaction.Complete()", span="32-32"];
m3_10 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", file="SqlServerMonitoringApi.cs", label="_transaction.Dispose()", span="33-33"];
m3_165 [cluster="HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="6-6"];
m3_202 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="366-366"];
m3_75 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="147-151"];
m3_99 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="194-201"];
m3_107 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="210-214"];
m3_127 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="266-270"];
m3_237 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="402-402"];
m3_240 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="402-402"];
m3_272 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="442-442"];
m3_275 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="442-442"];
m3_173 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="JobHelper.FromJson<Dictionary<string, string>>(x.Data)", span="331-331"];
m3_77 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="147-151"];
m3_76 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new ScheduleDto\r\n                {\r\n                    Method = method,\r\n                    ScheduledAt = JobHelper.FromStringTimestamp(stateData[''ScheduledAt''])\r\n                }", span="147-151"];
m3_269 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="String.Format(''stats:{0}:{1}'', type, x)", span="432-432"];
m3_233 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="392-392"];
m3_101 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="194-201"];
m3_100 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new FailedJobDto\r\n                {\r\n                    Method = method,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.FromNullableStringTimestamp(stateData[''FailedAt''])\r\n                }", span="194-201"];
m3_109 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="210-214"];
m3_108 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new SucceededJobDto\r\n                {\r\n                    Method = method,\r\n                    SucceededAt = JobHelper.FromNullableStringTimestamp(stateData[''SucceededAt''])\r\n                }", span="210-214"];
m3_129 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="266-270"];
m3_128 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new EnqueuedJobDto\r\n                {\r\n                    Method = method,\r\n                    EnqueuedAt = JobHelper.FromNullableStringTimestamp(stateData[''EnqueuedAt''])\r\n                }", span="266-270"];
m3_166 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="327-327"];
m3_169 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="327-327"];
m3_172 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="331-331"];
m3_196 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="364-364"];
m3_199 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="364-364"];
m3_203 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="countByStates.ContainsKey(name) ? countByStates[name] : 0", span="366-366"];
m3_232 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="392-392"];
m3_239 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="402-402"];
m3_238 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="(string)x.Key", span="402-402"];
m3_242 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="402-402"];
m3_241 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="(long)x.Count", span="402-402"];
m3_268 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="432-432"];
m3_274 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="442-442"];
m3_273 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="(string)x.Key", span="442-442"];
m3_277 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="442-442"];
m3_276 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="(long)x.Count", span="442-442"];
m3_174 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="331-331"];
m3_265 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="431-431"];
m3_270 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="432-432"];
m3_234 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="392-392"];
m3_168 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="327-327"];
m3_167 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Name", span="327-327"];
m3_171 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="327-327"];
m3_170 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Value", span="327-327"];
m3_198 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="364-364"];
m3_197 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.State", span="364-364"];
m3_201 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="364-364"];
m3_200 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Count", span="364-364"];
m3_204 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="366-366"];
m3_266 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.ToString(''yyyy-MM-dd'')", span="431-431"];
m3_267 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="431-431"];
m3_120 [cluster="HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="4-4"];
m3_64 [cluster="System.Collections.Generic.List<T>.Add(T)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m3_48 [cluster="Unk.ToList", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToList", span=""];
m3_271 [cluster="Unk.Format", file="SqlServerMonitoringApi.cs", label="Entry Unk.Format", span=""];
m3_61 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="SqlServerMonitoringApi.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m3_0 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", span="20-20"];
m3_1 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", file="SqlServerMonitoringApi.cs", label="_connection = connection", span="22-22"];
m3_235 [cluster="System.DateTime.ToString(string)", file="SqlServerMonitoringApi.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m3_2 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", span="19-19"];
m3_3 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="SqlServerMonitoringApi.cs", label="Given(String.Format(''a job in the '{0}' queue'', DefaultQueue))", span="21-21"];
m3_4 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", span="19-19"];
m3_119 [cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="SqlServerMonitoringApi.cs", label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span=""];
m3_231 [cluster="Unk.ElementAt", file="SqlServerMonitoringApi.cs", label="Entry Unk.ElementAt", span=""];
m3_78 [cluster="HangFire.Storage.Monitoring.ScheduleDto.ScheduleDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.ScheduleDto.ScheduleDto()", span="7-7"];
m3_228 [cluster="Unk.Query", file="SqlServerMonitoringApi.cs", label="Entry Unk.Query", span=""];
m3_37 [cluster="Unk.DoesNotContain", file="SqlServerMonitoringApi.cs", label="Entry Unk.DoesNotContain", span=""];
m3_229 [cluster="Unk.Add", file="SqlServerMonitoringApi.cs", label="Entry Unk.Add", span=""];
m3_227 [cluster="System.DateTime.AddHours(double)", file="SqlServerMonitoringApi.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m3_23 [cluster="Unk.Single", file="SqlServerMonitoringApi.cs", label="Entry Unk.Single", span=""];
m3_15 [cluster="string.Format(string, object, object)", file="SqlServerMonitoringApi.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m3_45 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="SqlServerMonitoringApi.cs", label="var actualLength = Redis.Client.GetListCount(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="92-93"];
m3_46 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="SqlServerMonitoringApi.cs", label="Assert.AreEqual(length, actualLength)", span="94-94"];
m3_44 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="90-90"];
m3_47 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="90-90"];
m3_161 [cluster="Unk.QueryMultiple", file="SqlServerMonitoringApi.cs", label="Entry Unk.QueryMultiple", span=""];
m3_110 [cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="7-7"];
m3_140 [cluster="KeyValuePair<string, DequeuedJobDto>.cstr", file="SqlServerMonitoringApi.cs", label="Entry KeyValuePair<string, DequeuedJobDto>.cstr", span=""];
m3_72 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="142-142"];
m3_73 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return GetJobs(\r\n                from, count,\r\n                ScheduledState.Name,\r\n                (method, stateData) => new ScheduleDto\r\n                {\r\n                    Method = method,\r\n                    ScheduledAt = JobHelper.FromStringTimestamp(stateData[''ScheduledAt''])\r\n                });", span="144-151"];
m3_74 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="142-142"];
m3_122 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="250-250"];
m3_124 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="var jobs = _connection.Query<Job>(\r\n                enqueuedJobsSql,\r\n                new { queue = queue, start = from + 1, end = @from + perPage })\r\n                .ToList()", span="259-262"];
m3_125 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="return DeserializeJobs(\r\n                jobs,\r\n                (method, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Method = method,\r\n                    EnqueuedAt = JobHelper.FromNullableStringTimestamp(stateData[''EnqueuedAt''])\r\n                });", span="264-270"];
m3_123 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="string enqueuedJobsSql = @''\r\nselect * from\r\n(select j.*, row_number() over (order by j.CreatedAt) as row_num from HangFire.JobQueue jq\r\nleft join HangFire.Job j on jq.JobId = j.Id\r\nwhere jq.Queue = @queue and jq.FetchedAt is null) as r\r\nwhere r.row_num between @start and @end''", span="252-257"];
m3_126 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="250-250"];
m3_20 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlServerMonitoringApi.cs", label="return _connection.Query<int>(\r\n                @''select count(JobId) from HangFire.JobQueue '' \r\n                + @''where Queue = @queue and FetchedAt is NULL'',\r\n                new { queue = queue })\r\n                .Single();", span="44-48"];
m3_21 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="42-42"];
m3_22 [cluster="Unk.>", file="SqlServerMonitoringApi.cs", label="Entry Unk.>", span=""];
m3_86 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Servers()", span="164-164"];
m3_87 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label="var servers = _connection.Query<Entities.Server>(\r\n                @''select * from HangFire.Server'')\r\n                .ToList()", span="166-168"];
m3_91 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label="result.Add(new ServerDto\r\n                {\r\n                    Name = server.Id,\r\n                    Heartbeat = server.LastHeartbeat,\r\n                    Queues = data.Queues,\r\n                    StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                    WorkersCount = data.WorkerCount\r\n                })", span="175-182"];
m3_88 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label="var result = new List<ServerDto>()", span="170-170"];
m3_89 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label=servers, span="172-172"];
m3_90 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="174-174"];
m3_92 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label="return result;", span="185-185"];
m3_93 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Servers()", span="164-164"];
m3_236 [cluster="string.Format(string, object, object)", file="SqlServerMonitoringApi.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m3_163 [cluster="Unk.ToDictionary", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToDictionary", span=""];
m3_175 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="346-346"];
m3_176 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="SqlServerMonitoringApi.cs", label="return GetNumberOfJobsByStateName(SucceededState.Name);", span="348-348"];
m3_177 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="346-346"];
m3_130 [cluster="HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="7-7"];
m3_102 [cluster="HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="7-7"];
m3_82 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", span="419-419"];
m3_252 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var valuesMap = _connection.Query(\r\n                sqlQuery,\r\n                new { keys = keys })\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="439-442"];
m3_247 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="dates.Add(endDate)", span="427-427"];
m3_250 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var keys = stringDates.Select(x => String.Format(''stats:{0}:{1}'', type, x)).ToList()", span="432-432"];
m3_251 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys''", span="434-437"];
m3_253 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label=keys, span="444-444"];
m3_254 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="!valuesMap.ContainsKey(key)", span="446-446"];
m3_255 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="valuesMap.Add(key, 0)", span="446-446"];
m3_259 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="452-452"];
m3_243 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var endDate = DateTime.UtcNow.Date", span="421-421"];
m3_246 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="startDate <= endDate", span="425-425"];
m3_245 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var dates = new List<DateTime>()", span="423-423"];
m3_248 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="endDate = endDate.AddDays(-1)", span="428-428"];
m3_249 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="431-431"];
m3_256 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var result = new Dictionary<DateTime, long>()", span="449-449"];
m3_258 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="i < stringDates.Count", span="450-450"];
m3_257 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var i = 0", span="450-450"];
m3_260 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="result.Add(dates[i], value)", span="453-453"];
m3_244 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="var startDate = endDate.AddDays(-7)", span="422-422"];
m3_262 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="return result;", span="456-456"];
m3_261 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="i++", span="450-450"];
m3_263 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", span="419-419"];
m3_230 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m3_65 [cluster="HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="7-7"];
m3_30 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", file="SqlServerMonitoringApi.cs", label="return _connection.Query<int>(\r\n                @''select count(Id) from HangFire.Job where State = @state'',\r\n                new { state = stateName })\r\n                .Single();", span="67-70"];
m3_31 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", span="65-65"];
m3_148 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="310-310"];
m3_149 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="SqlServerMonitoringApi.cs", label="return GetHourlyTimelineStats(''failed'');", span="312-312"];
m3_150 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="310-310"];
m3_164 [cluster="Unk.Select", file="SqlServerMonitoringApi.cs", label="Entry Unk.Select", span=""];
m3_58 [cluster="System.Collections.Generic.List<T>.List(int)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
m3_111 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="224-224"];
m3_116 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", color=green, community=0, file="SqlServerMonitoringApi.cs", label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                {\r\n                    Name = queue.Queue,\r\n                    Length = queue.Enqueued,\r\n                    Dequeued = queue.Fetched,\r\n                    FirstJobs = EnqueuedJobs(queue.Queue, 0, 5)\r\n                })", prediction=5, span="238-244"];
m3_114 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count)", span="234-234"];
m3_115 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label=queues, span="236-236"];
m3_113 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="var queues = _connection.Query<QueueStatusDto>(queuesAndStatusSql).ToList()", span="233-233"];
m3_117 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="return result;", span="247-247"];
m3_112 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="string queuesAndStatusSql = @''\r\nselect distinct [Queue],\r\n	(select count(JobId) from HangFire.JobQueue as a where q.Queue = a.Queue and a.FetchedAt is null) as Enqueued,\r\n	(select count(JobId) from HangFire.JobQueue as b where q.Queue = b.Queue and b.FetchedAt is not null) as Fetched\r\nfrom HangFire.[JobQueue] as q\r\n''", span="226-231"];
m3_118 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="224-224"];
m3_162 [cluster="Unk.SingleOrDefault", file="SqlServerMonitoringApi.cs", label="Entry Unk.SingleOrDefault", span=""];
m3_131 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", span="273-273"];
m3_133 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="var jobs = _connection.Query<Job>(\r\n                fetchedJobsSql,\r\n                new { queue = queue, start = from + 1, end = @from + perPage })\r\n                .ToList()", span="282-285"];
m3_136 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="result.Add(new KeyValuePair<string, DequeuedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new DequeuedJobDto\r\n                    {\r\n                        Method = DeserializeJobMethod(job.InvocationData),\r\n                        State = job.State,\r\n                        CreatedAt = job.CreatedAt,\r\n                        FetchedAt = job.FetchedAt\r\n                    }))", span="291-299"];
m3_132 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="string fetchedJobsSql = @''\r\nselect * from\r\n(select j.*, jq.FetchedAt, row_number() over (order by j.CreatedAt) as row_num from HangFire.JobQueue jq\r\nleft join HangFire.Job j on jq.JobId = j.Id\r\nwhere jq.Queue = @queue and jq.FetchedAt is not null) as r\r\nwhere r.row_num between @start and @end''", span="275-280"];
m3_134 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="var result = new List<KeyValuePair<string, DequeuedJobDto>>(jobs.Count)", span="287-287"];
m3_135 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label=jobs, span="289-289"];
m3_137 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="return new JobList<DequeuedJobDto>(result);", span="302-302"];
m3_138 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", span="273-273"];
m3_278 [file="SqlServerMonitoringApi.cs", label="HangFire.SqlServer.SqlServerMonitoringApi", span=""];
m3_281 [file="SqlServerMonitoringApi.cs", label=string, span=""];
m3_280 [file="SqlServerMonitoringApi.cs", label=string, span=""];
m3_279 [file="SqlServerMonitoringApi.cs", label=countByStates, span=""];
m4_48 [cluster="HangFire.SqlServer.SqlStorageConnection.RemoveServer(string)", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlStorageConnection.RemoveServer(string)", span="112-112"];
m4_49 [cluster="HangFire.SqlServer.SqlStorageConnection.RemoveServer(string)", file="SqlStorageConnection.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="114-116"];
m4_50 [cluster="HangFire.SqlServer.SqlStorageConnection.RemoveServer(string)", file="SqlStorageConnection.cs", label="Exit HangFire.SqlServer.SqlStorageConnection.RemoveServer(string)", span="112-112"];
m4_23 [cluster="HangFire.SqlServer.SqlJobLock.SqlJobLock(string, SqlConnection)", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlJobLock.SqlJobLock(string, SqlConnection)", span="28-28"];
m4_16 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="34-34"];
m4_17 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="SqlStorageConnection.cs", label="return new SqlServerFetcher(_connection, queueNames);", span="36-36"];
m4_18 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", file="SqlStorageConnection.cs", label="Exit HangFire.SqlServer.SqlStorageConnection.CreateFetcher(System.Collections.Generic.IEnumerable<string>)", span="34-34"];
m4_19 [cluster="HangFire.SqlServer.SqlServerFetcher.SqlServerFetcher(SqlConnection, System.Collections.Generic.IEnumerable<string>)", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlServerFetcher.SqlServerFetcher(SqlConnection, System.Collections.Generic.IEnumerable<string>)", span="19-19"];
m4_46 [cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="4-4"];
m4_54 [cluster="HangFire.SqlServer.SqlStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="126-126"];
m4_55 [cluster="HangFire.SqlServer.SqlStorageConnection.RemoveTimedOutServers(System.TimeSpan)", color=green, community=1, file="SqlStorageConnection.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) })", prediction=6, span="128-130"];
m4_56 [cluster="HangFire.SqlServer.SqlStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlStorageConnection.cs", label="Exit HangFire.SqlServer.SqlStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="126-126"];
m4_0 [cluster="HangFire.SqlServer.SqlStorageConnection.SqlStorageConnection(HangFire.SqlServer.SqlServerStorage, SqlConnection)", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlStorageConnection.SqlStorageConnection(HangFire.SqlServer.SqlServerStorage, SqlConnection)", span="16-16"];
m4_1 [cluster="HangFire.SqlServer.SqlStorageConnection.SqlStorageConnection(HangFire.SqlServer.SqlServerStorage, SqlConnection)", file="SqlStorageConnection.cs", label="_connection = connection", span="18-18"];
m4_4 [cluster="HangFire.SqlServer.SqlStorageConnection.SqlStorageConnection(HangFire.SqlServer.SqlServerStorage, SqlConnection)", file="SqlStorageConnection.cs", label="Storage = storage", span="21-21"];
m4_2 [cluster="HangFire.SqlServer.SqlStorageConnection.SqlStorageConnection(HangFire.SqlServer.SqlServerStorage, SqlConnection)", file="SqlStorageConnection.cs", label="Jobs = new SqlStoredJobs(_connection)", span="19-19"];
m4_3 [cluster="HangFire.SqlServer.SqlStorageConnection.SqlStorageConnection(HangFire.SqlServer.SqlServerStorage, SqlConnection)", file="SqlStorageConnection.cs", label="Sets = new SqlStoredSets(_connection)", span="20-20"];
m4_5 [cluster="HangFire.SqlServer.SqlStorageConnection.SqlStorageConnection(HangFire.SqlServer.SqlServerStorage, SqlConnection)", file="SqlStorageConnection.cs", label="Exit HangFire.SqlServer.SqlStorageConnection.SqlStorageConnection(HangFire.SqlServer.SqlServerStorage, SqlConnection)", span="16-16"];
m4_15 [cluster="HangFire.SqlServer.SqlWriteTransaction.SqlWriteTransaction(SqlConnection)", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlWriteTransaction.SqlWriteTransaction(SqlConnection)", span="19-19"];
m4_51 [cluster="HangFire.SqlServer.SqlStorageConnection.Heartbeat(string)", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlStorageConnection.Heartbeat(string)", span="119-119"];
m4_52 [cluster="HangFire.SqlServer.SqlStorageConnection.Heartbeat(string)", file="SqlStorageConnection.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="121-123"];
m4_53 [cluster="HangFire.SqlServer.SqlStorageConnection.Heartbeat(string)", file="SqlStorageConnection.cs", label="Exit HangFire.SqlServer.SqlStorageConnection.Heartbeat(string)", span="119-119"];
m4_57 [cluster="System.TimeSpan.Negate()", file="SqlStorageConnection.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m4_7 [cluster="HangFire.SqlServer.SqlStoredSets.SqlStoredSets(SqlConnection)", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlStoredSets.SqlStoredSets(SqlConnection)", span="11-11"];
m4_40 [cluster="Unk.ToString", file="SqlStorageConnection.cs", label="Entry Unk.ToString", span=""];
m4_37 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlStorageConnection.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m4_24 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="48-48"];
m4_25 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlStorageConnection.cs", label="string createJobSql = @''\r\ninsert into HangFire.Job (State, InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@state, @invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="54-57"];
m4_26 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlStorageConnection.cs", label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    state = ''Created'',\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = JobHelper.ToJson(arguments),\r\n                    createdAt = DateTime.UtcNow,\r\n                    expireAt = DateTime.UtcNow.Add(expireIn)\r\n                }).Single().ToString()", span="59-68"];
m4_27 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlStorageConnection.cs", label="parameters.Count > 0", span="70-70"];
m4_28 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlStorageConnection.cs", label="var parameterArray = new object[parameters.Count]", span="72-72"];
m4_30 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlStorageConnection.cs", label=parameters, span="74-74"];
m4_31 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlStorageConnection.cs", label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", span="76-81"];
m4_34 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlStorageConnection.cs", label="return jobId;", span="91-91"];
m4_29 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlStorageConnection.cs", label="int parameterIndex = 0", span="73-73"];
m4_33 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlStorageConnection.cs", label="_connection.Execute(insertParameterSql, parameterArray)", span="88-88"];
m4_32 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlStorageConnection.cs", label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="84-86"];
m4_35 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlStorageConnection.cs", label="Exit HangFire.SqlServer.SqlStorageConnection.CreateExpiredJob(HangFire.Storage.InvocationData, string[], System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="48-48"];
m4_42 [cluster="HangFire.SqlServer.SqlStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="94-94"];
m4_43 [cluster="HangFire.SqlServer.SqlStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlStorageConnection.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = workerCount,\r\n                Queues = queues.ToArray(),\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="96-101"];
m4_44 [cluster="HangFire.SqlServer.SqlStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlStorageConnection.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data)) as Source (Id, Data) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = null ''\r\n                + @''when not matched then insert (Id, Data) values (Source.Id, Source.Data);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data) })", span="103-109"];
m4_45 [cluster="HangFire.SqlServer.SqlStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="SqlStorageConnection.cs", label="Exit HangFire.SqlServer.SqlStorageConnection.AnnounceServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="94-94"];
m4_11 [cluster="Unk.Dispose", file="SqlStorageConnection.cs", label="Entry Unk.Dispose", span=""];
m4_36 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlStorageConnection.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m4_39 [cluster="Unk.Single", file="SqlStorageConnection.cs", label="Entry Unk.Single", span=""];
m4_8 [cluster="HangFire.SqlServer.SqlStorageConnection.Dispose()", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlStorageConnection.Dispose()", span="24-24"];
m4_9 [cluster="HangFire.SqlServer.SqlStorageConnection.Dispose()", file="SqlStorageConnection.cs", label="_connection.Dispose()", span="26-26"];
m4_10 [cluster="HangFire.SqlServer.SqlStorageConnection.Dispose()", file="SqlStorageConnection.cs", label="Exit HangFire.SqlServer.SqlStorageConnection.Dispose()", span="24-24"];
m4_41 [cluster="Unk.Execute", file="SqlStorageConnection.cs", label="Entry Unk.Execute", span=""];
m4_20 [cluster="HangFire.SqlServer.SqlStorageConnection.AcquireJobLock(string)", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlStorageConnection.AcquireJobLock(string)", span="39-39"];
m4_21 [cluster="HangFire.SqlServer.SqlStorageConnection.AcquireJobLock(string)", file="SqlStorageConnection.cs", label="return new SqlJobLock(jobId, _connection);", span="41-41"];
m4_22 [cluster="HangFire.SqlServer.SqlStorageConnection.AcquireJobLock(string)", file="SqlStorageConnection.cs", label="Exit HangFire.SqlServer.SqlStorageConnection.AcquireJobLock(string)", span="39-39"];
m4_6 [cluster="HangFire.SqlServer.SqlStoredJobs.SqlStoredJobs(SqlConnection)", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlStoredJobs.SqlStoredJobs(SqlConnection)", span="15-15"];
m4_47 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="SqlStorageConnection.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m4_12 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateWriteTransaction()", file="SqlStorageConnection.cs", label="Entry HangFire.SqlServer.SqlStorageConnection.CreateWriteTransaction()", span="29-29"];
m4_13 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateWriteTransaction()", file="SqlStorageConnection.cs", label="return new SqlWriteTransaction(_connection);", span="31-31"];
m4_14 [cluster="HangFire.SqlServer.SqlStorageConnection.CreateWriteTransaction()", file="SqlStorageConnection.cs", label="Exit HangFire.SqlServer.SqlStorageConnection.CreateWriteTransaction()", span="29-29"];
m4_58 [file="SqlStorageConnection.cs", label="HangFire.SqlServer.SqlStorageConnection", span=""];
n860 -> n32  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n59  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n81  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n121  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n149  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n150  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n158  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n177  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n191  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n209  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n221  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n235  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n252  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n264  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n278  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n290  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n302  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n316  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n328  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n341  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n353  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n365  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n378  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n390  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n404  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n416  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n428  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n447  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n461  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n473  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n485  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n501  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n515  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n524  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n540  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n543  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n546  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n556  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n557  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n575  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n590  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n600  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n608  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n611  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n614  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n626  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n642  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n655  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n678  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n691  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n714  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n726  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n749  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n761  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n783  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n795  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n817  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n829  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n860 -> n849  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
n862 -> n48  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n864 -> n67  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n866 -> n108  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n867 -> n108  [color=darkseagreen4, key=1, label=state, style=dashed];
n869 -> n142  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n870 -> n142  [color=darkseagreen4, key=1, label=state, style=dashed];
n871 -> n159  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
n872 -> n501  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n873 -> n515  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n874 -> n546  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n875 -> n575  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n876 -> n590  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n877 -> n605  [color=darkseagreen4, key=1, label=items, style=dashed];
n878 -> n614  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n880 -> n642  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n882 -> n678  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n884 -> n714  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n886 -> n749  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n888 -> n783  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n890 -> n817  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n2 -> n10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n15 -> n20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n26 -> n29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n30 -> n32  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n30 -> n48  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n29 -> n32  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n32 -> n47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n41 -> n851  [color=darkseagreen4, key=1, label="System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>", style=dashed];
n54 -> n56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n57 -> n59  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n57 -> n67  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n56 -> n59  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n59 -> n66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n72 -> n74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n75 -> n81  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n75 -> n108  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n75 -> n89  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n74 -> n81  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n81 -> n107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n82 -> n84  [color=darkseagreen4, key=1, label=job, style=dashed];
n85 -> n87  [color=darkseagreen4, key=1, label=anotherJob, style=dashed];
n88 -> n90  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n88 -> n91  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n88 -> n92  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n88 -> n93  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n77 -> n79  [color=darkseagreen4, key=1, label=state, style=dashed];
n77 -> n80  [color=darkseagreen4, key=1, label=state, style=dashed];
n77 -> n81  [color=darkseagreen4, key=1, label=state, style=dashed];
n77 -> n108  [color=darkseagreen4, key=1, label=state, style=dashed];
n78 -> n97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n79 -> n100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n80 -> n103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n113 -> n115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n116 -> n121  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n116 -> n142  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n116 -> n126  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n115 -> n121  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n121 -> n141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n122 -> n124  [color=darkseagreen4, key=1, label=job, style=dashed];
n125 -> n127  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n125 -> n128  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n125 -> n129  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n125 -> n130  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n117 -> n119  [color=darkseagreen4, key=1, label=state, style=dashed];
n117 -> n120  [color=darkseagreen4, key=1, label=state, style=dashed];
n117 -> n121  [color=darkseagreen4, key=1, label=state, style=dashed];
n117 -> n142  [color=darkseagreen4, key=1, label=state, style=dashed];
n118 -> n132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n119 -> n135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n120 -> n138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n146 -> n148  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
n146 -> n150  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
n146 -> n159  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
n147 -> n149  [color=darkseagreen4, key=1, label=correctProvider, style=dashed];
n148 -> n154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n150 -> n157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n159 -> n166  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n153 -> n844  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
n158 -> n162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n174 -> n176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n177 -> n183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n178 -> n180  [color=darkseagreen4, key=1, label=record, style=dashed];
n178 -> n181  [color=darkseagreen4, key=1, label=record, style=dashed];
n188 -> n190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n191 -> n201  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n192 -> n194  [color=darkseagreen4, key=1, label=record, style=dashed];
n192 -> n195  [color=darkseagreen4, key=1, label=record, style=dashed];
n196 -> n198  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
n206 -> n208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n209 -> n213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n213 -> n215  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n218 -> n220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n221 -> n227  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n222 -> n224  [color=darkseagreen4, key=1, label=record, style=dashed];
n222 -> n225  [color=darkseagreen4, key=1, label=record, style=dashed];
n232 -> n234  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n235 -> n244  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n236 -> n238  [color=darkseagreen4, key=1, label=record, style=dashed];
n236 -> n239  [color=darkseagreen4, key=1, label=record, style=dashed];
n240 -> n242  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
n249 -> n251  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n252 -> n256  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n256 -> n258  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n261 -> n263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n264 -> n270  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n265 -> n267  [color=darkseagreen4, key=1, label=record, style=dashed];
n265 -> n268  [color=darkseagreen4, key=1, label=record, style=dashed];
n275 -> n277  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n278 -> n282  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n282 -> n284  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n287 -> n289  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n290 -> n294  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n294 -> n296  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n299 -> n301  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n302 -> n308  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n303 -> n305  [color=darkseagreen4, key=1, label=record, style=dashed];
n303 -> n306  [color=darkseagreen4, key=1, label=record, style=dashed];
n313 -> n315  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n316 -> n320  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n320 -> n322  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n325 -> n327  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n328 -> n332  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n332 -> n334  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n338 -> n340  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n341 -> n345  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n345 -> n347  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n350 -> n352  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n353 -> n357  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n357 -> n359  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n362 -> n364  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n365 -> n370  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n366 -> n368  [color=darkseagreen4, key=1, label=record, style=dashed];
n375 -> n377  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n378 -> n382  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n382 -> n384  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n387 -> n389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n390 -> n394  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n394 -> n396  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n394 -> n397  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n401 -> n403  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n404 -> n408  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n408 -> n410  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n413 -> n415  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n416 -> n420  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n420 -> n422  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n425 -> n427  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n428 -> n435  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n429 -> n431  [color=darkseagreen4, key=1, label=records, style=dashed];
n429 -> n432  [color=darkseagreen4, key=1, label=records, style=dashed];
n435 -> n437  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n435 -> n438  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n435 -> n439  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n435 -> n440  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n444 -> n446  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n447 -> n451  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n451 -> n453  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n451 -> n454  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n451 -> n455  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n458 -> n460  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n461 -> n465  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n465 -> n467  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n470 -> n472  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n473 -> n477  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n477 -> n479  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n482 -> n484  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n485 -> n489  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n489 -> n491  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n494 -> n496  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n496 -> n501  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n497 -> n500  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n501 -> n503  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n508 -> n510  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n510 -> n515  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n511 -> n514  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n515 -> n517  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n521 -> n523  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n524 -> n530  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n525 -> n533  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n525 -> n536  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n525 -> n527  [color=darkseagreen4, key=1, label=result, style=dashed];
n540 -> n542  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n542 -> n546  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n543 -> n545  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n546 -> n548  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n553 -> n555  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n555 -> n557  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n556 -> n561  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n557 -> n564  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n568 -> n570  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n570 -> n575  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n571 -> n574  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n575 -> n577  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n583 -> n585  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n585 -> n590  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n586 -> n589  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n590 -> n592  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n596 -> n598  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n598 -> n600  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n599 -> n605  [color=darkseagreen4, key=1, label=items, style=dashed];
n599 -> n602  [color=darkseagreen4, key=1, label=items, style=dashed];
n600 -> n604  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n608 -> n610  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n610 -> n614  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n611 -> n613  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n614 -> n616  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n622 -> n624  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n624 -> n626  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n626 -> n631  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n635 -> n637  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n637 -> n642  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n638 -> n641  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n642 -> n644  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n651 -> n653  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n653 -> n655  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n655 -> n661  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n656 -> n664  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n656 -> n667  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n656 -> n658  [color=darkseagreen4, key=1, label=records, style=dashed];
n656 -> n659  [color=darkseagreen4, key=1, label=records, style=dashed];
n671 -> n673  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n673 -> n678  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n674 -> n677  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n678 -> n680  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n687 -> n689  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n689 -> n691  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n691 -> n697  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n692 -> n700  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n692 -> n703  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n692 -> n694  [color=darkseagreen4, key=1, label=records, style=dashed];
n692 -> n695  [color=darkseagreen4, key=1, label=records, style=dashed];
n707 -> n709  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n709 -> n714  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n710 -> n713  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n714 -> n716  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n722 -> n724  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n724 -> n726  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n726 -> n732  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n727 -> n735  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n727 -> n738  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n727 -> n729  [color=darkseagreen4, key=1, label=records, style=dashed];
n727 -> n730  [color=darkseagreen4, key=1, label=records, style=dashed];
n742 -> n744  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n744 -> n749  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n745 -> n748  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n749 -> n751  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n757 -> n759  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n759 -> n761  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n761 -> n766  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n762 -> n769  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n762 -> n772  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n762 -> n764  [color=darkseagreen4, key=1, label=records, style=dashed];
n776 -> n778  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n778 -> n783  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n779 -> n782  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n783 -> n785  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n791 -> n793  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n793 -> n795  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n795 -> n800  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n796 -> n803  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n796 -> n806  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n796 -> n798  [color=darkseagreen4, key=1, label=records, style=dashed];
n810 -> n812  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n812 -> n817  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n813 -> n816  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n817 -> n819  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n825 -> n827  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n827 -> n829  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n829 -> n834  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n830 -> n837  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n830 -> n840  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n830 -> n832  [color=darkseagreen4, key=1, label=records, style=dashed];
n849 -> n857  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n850 -> n852  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_214 -> m1_216  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_28 -> m1_49  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m1_28 -> m1_34  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m1_28 -> m1_36  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m1_28 -> m1_30  [color=darkseagreen4, key=1, label="HangFire.Storage.InvocationData", style=dashed];
m1_28 -> m1_31  [color=darkseagreen4, key=1, label="HangFire.Storage.InvocationData", style=dashed];
m1_28 -> m1_32  [color=darkseagreen4, key=1, label="HangFire.Storage.InvocationData", style=dashed];
m1_35 -> m1_38  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_36 -> m1_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_37 -> m1_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_29 -> m1_49  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_29 -> m1_36  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_29 -> m1_39  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_29 -> m1_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label=IRedisClient, style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.PersistentJobQueueProviderCollection", style=dashed];
m1_0 -> m1_4  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m1_75 -> m1_79  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_76 -> m1_78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_96 -> m1_99  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_97 -> m1_99  [color=darkseagreen4, key=1, label=addSql, style=dashed];
m1_99 -> m1_111  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_100 -> m1_104  [color=darkseagreen4, key=1, label=serverNames, style=dashed];
m1_42 -> m1_44  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_42 -> m1_47  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_194 -> m1_196  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_224 -> m1_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_105 -> m1_108  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_105 -> m1_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_105 -> m1_124  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_106 -> m1_108  [color=darkseagreen4, key=1, label=query, style=dashed];
m1_106 -> m1_111  [color=darkseagreen4, key=1, label=query, style=dashed];
m1_106 -> m1_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_244 -> m1_246  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_234 -> m1_236  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_204 -> m1_206  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_136 -> m1_139  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_136 -> m1_143  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_136 -> m1_148  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_136 -> m1_151  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_136 -> m1_138  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_136 -> m1_140  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_137 -> m1_142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_139 -> m1_150  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_143 -> m1_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_138 -> m1_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_141 -> m1_143  [color=darkseagreen4, key=1, label=sql, style=dashed];
m1_141 -> m1_148  [color=darkseagreen4, key=1, label=sql, style=dashed];
m1_135 -> m1_143  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_135 -> m1_147  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_135 -> m1_151  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_135 -> m1_137  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_135 -> m1_138  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_135 -> m1_139  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_56 -> m1_75  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_56 -> m1_58  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_56 -> m1_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_56 -> m1_62  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_57 -> m1_62  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_57 -> m1_63  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_58 -> m1_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_58 -> m1_61  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_58 -> m1_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_59 -> m1_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_62 -> m1_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_61 -> m1_75  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m1_61 -> m1_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_60 -> m1_66  [color=darkseagreen4, key=1, label=persistentQueue, style=dashed];
m1_11 -> m1_17  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_84 -> m1_91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_103 -> m1_107  [color=green, key=1, label=pipeline, style=dashed];
m1_103 -> m1_106  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m1_102 -> m1_111  [color=darkseagreen4, key=1, label=utcNow, style=dashed];
m1_110 -> m1_112  [color=green, key=1, label=heartbeat, style=dashed];
m1_112 -> m1_112  [color=green, key=1, label=heartbeat, style=dashed];
m1_148 -> m1_150  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_151 -> m1_151  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, string>", style=dashed];
m1_161 -> m1_124  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_160 -> m1_92  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_173 -> m1_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_123 -> m1_125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_128 -> m1_131  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_128 -> m1_134  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_87 -> m1_91  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_163 -> m1_166  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<string>", style=dashed];
m1_163 -> m1_143  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_164 -> m1_143  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_164 -> m1_147  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_164 -> m1_151  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_170 -> m1_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_81 -> m1_83  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_81 -> m1_84  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_81 -> m1_92  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_81 -> m1_85  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_82 -> m1_84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_82 -> m1_85  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_83 -> m1_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_121 -> m1_126  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_43 -> m1_47  [color=darkseagreen4, key=1, label=addAndSetStateSql, style=dashed];
m1_14 -> m1_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_153 -> m1_158  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_153 -> m1_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_153 -> m1_96  [color=green, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m1_153 -> m1_112  [color=green, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m1_153 -> m1_1  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m1_153 -> m1_2  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m1_153 -> m1_3  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m1_153 -> m1_4  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m1_153 -> m1_9  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m1_153 -> m1_13  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m1_153 -> m1_18  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m1_153 -> m1_23  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m1_153 -> m1_35  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m1_153 -> m1_57  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m1_153 -> m1_79  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageConnection", style=dashed];
m1_154 -> m1_49  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m1_158 -> m1_160  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_155 -> m1_49  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_156 -> m1_158  [color=darkseagreen4, key=1, label=query, style=dashed];
m1_156 -> m1_161  [color=darkseagreen4, key=1, label=query, style=dashed];
m1_159 -> m1_75  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m1_131 -> m1_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_101 -> m1_109  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m1_101 -> m1_106  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m1_44 -> m1_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_184 -> m1_186  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_113 -> m1_113  [color=green, key=1, label=heartbeat, style=dashed];
m1_113 -> m1_115  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_113 -> m1_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_115 -> m1_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_267 -> m1_12  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_14  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_15  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_16  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_44  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_61  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_76  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_94  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_98  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_99  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_107  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_108  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_114  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_115  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_122  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_130  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_131  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_142  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_143  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_157  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_158  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_169  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_183  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_193  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_203  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_213  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_223  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_233  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_243  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_249  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_252  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_256  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_258  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_267 -> m1_260  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m1_271 -> m1_47  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_272 -> m1_47  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m1_273 -> m1_47  [color=darkseagreen4, key=1, label=addAndSetStateSql, style=dashed];
m1_277 -> m1_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_278 -> m1_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_279 -> m1_66  [color=darkseagreen4, key=1, label=persistentQueue, style=dashed];
m1_280 -> m1_75  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_280 -> m1_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_281 -> m1_79  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_282 -> m1_79  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_283 -> m1_85  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_284 -> m1_91  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_285 -> m1_91  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_290 -> m1_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_291 -> m1_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_292 -> m1_111  [color=darkseagreen4, key=1, label=query, style=dashed];
m1_293 -> m1_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_294 -> m1_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_295 -> m1_126  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_296 -> m1_126  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_297 -> m1_134  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_298 -> m1_134  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_299 -> m1_134  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_300 -> m1_134  [color=darkseagreen4, key=1, label=trimSql, style=dashed];
m1_301 -> m1_148  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_301 -> m1_151  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_302 -> m1_148  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m1_303 -> m1_148  [color=darkseagreen4, key=1, label=sql, style=dashed];
m1_304 -> m1_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_305 -> m1_161  [color=darkseagreen4, key=1, label=query, style=dashed];
m2_106 -> m2_108  [color=darkseagreen4, key=1, label=query, style=dashed];
m2_106 -> m2_111  [color=darkseagreen4, key=1, label=query, style=dashed];
m2_108 -> m2_110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_11 -> m2_17  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_12 -> m2_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_14 -> m2_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_70 -> m2_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_234 -> m2_236  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_244 -> m2_246  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_82 -> m2_84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_204 -> m2_206  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_0 -> m2_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.PersistentJobQueueProviderCollection", style=dashed];
m2_0 -> m2_5  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m2_0 -> m2_6  [color=darkseagreen4, key=1, label="IsolationLevel?", style=dashed];
m2_0 -> m2_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.PersistentJobQueueProviderCollection", style=dashed];
m2_44 -> m2_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_214 -> m2_216  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_53 -> m2_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_88 -> m2_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_184 -> m2_186  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_31 -> m2_23  [color=darkseagreen4, key=1, label="HangFire.Server.Components.ServerWatchdog", style=dashed];
m2_31 -> m2_12  [color=darkseagreen4, key=1, label="HangFire.Server.Components.ServerWatchdog", style=dashed];
m2_31 -> m2_13  [color=darkseagreen4, key=1, label="HangFire.Server.Components.ServerWatchdog", style=dashed];
m2_29 -> m2_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_58 -> m2_61  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_58 -> m2_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_61 -> m2_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_60 -> m2_66  [color=darkseagreen4, key=1, label=persistentQueue, style=dashed];
m2_76 -> m2_78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_136 -> m2_139  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m2_143 -> m2_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_96 -> m2_99  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_96 -> m2_103  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_97 -> m2_99  [color=darkseagreen4, key=1, label=addSql, style=dashed];
m2_97 -> m2_103  [color=darkseagreen4, key=1, label=addSql, style=dashed];
m2_99 -> m2_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_153 -> m2_158  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_153 -> m2_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_158 -> m2_160  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_156 -> m2_158  [color=darkseagreen4, key=1, label=query, style=dashed];
m2_156 -> m2_161  [color=darkseagreen4, key=1, label=query, style=dashed];
m2_37 -> m2_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_25 -> m2_27  [color=darkseagreen4, key=1, label="System.Threading.Thread", style=dashed];
m2_194 -> m2_196  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_148 -> m2_150  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_173 -> m2_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_163 -> m2_166  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<string>", style=dashed];
m2_170 -> m2_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_123 -> m2_125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_224 -> m2_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_113 -> m2_115  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_113 -> m2_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_115 -> m2_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_131 -> m2_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_267 -> m2_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_6  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_11  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_12  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_14  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_15  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_16  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_61  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_94  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_98  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_99  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_107  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_108  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_114  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_115  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_122  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_130  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_142  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_157  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_158  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_169  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_183  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_193  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_203  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_213  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_223  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_233  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_243  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_249  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_252  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_256  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_258  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_267 -> m2_260  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m2_277 -> m2_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_278 -> m2_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_279 -> m2_66  [color=darkseagreen4, key=1, label=persistentQueue, style=dashed];
m2_286 -> m2_103  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_287 -> m2_103  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_288 -> m2_103  [color=darkseagreen4, key=1, label=double, style=dashed];
m2_289 -> m2_103  [color=darkseagreen4, key=1, label=addSql, style=dashed];
m2_290 -> m2_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_291 -> m2_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_292 -> m2_111  [color=darkseagreen4, key=1, label=query, style=dashed];
m2_293 -> m2_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_294 -> m2_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_304 -> m2_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_305 -> m2_161  [color=darkseagreen4, key=1, label=query, style=dashed];
m3_16 -> m3_18  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_50 -> m3_52  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.Job>", style=dashed];
m3_51 -> m3_55  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_51 -> m3_56  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_52 -> m3_55  [color=darkseagreen4, key=1, label=job, style=dashed];
m3_182 -> m3_196  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_182 -> m3_199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_182 -> m3_203  [color=darkseagreen4, key=1, label=countByStates, style=dashed];
m3_179 -> m3_191  [color=darkseagreen4, key=1, label=stats, style=dashed];
m3_183 -> m3_203  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_7 -> m3_9  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_147 -> m3_233  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_215 -> m3_237  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_215 -> m3_240  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_215 -> m3_217  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m3_215 -> m3_218  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m3_213 -> m3_232  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_213 -> m3_216  [color=darkseagreen4, key=1, label=keys, style=dashed];
m3_216 -> m3_218  [color=darkseagreen4, key=1, label=key, style=dashed];
m3_206 -> m3_210  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m3_207 -> m3_210  [color=darkseagreen4, key=1, label=dates, style=dashed];
m3_207 -> m3_221  [color=darkseagreen4, key=1, label=dates, style=dashed];
m3_207 -> m3_223  [color=darkseagreen4, key=1, label=dates, style=dashed];
m3_219 -> m3_223  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_219 -> m3_225  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_220 -> m3_223  [color=darkseagreen4, key=1, label=i, style=dashed];
m3_220 -> m3_224  [color=darkseagreen4, key=1, label=i, style=dashed];
m3_208 -> m3_212  [color=darkseagreen4, key=1, label=i, style=dashed];
m3_212 -> m3_212  [color=darkseagreen4, key=1, label=i, style=dashed];
m3_224 -> m3_224  [color=darkseagreen4, key=1, label=i, style=dashed];
m3_153 -> m3_158  [color=darkseagreen4, key=1, label=multi, style=dashed];
m3_157 -> m3_166  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_157 -> m3_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_158 -> m3_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_105 -> m3_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_97 -> m3_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_38 -> m3_46  [color=darkseagreen4, key=1, label="System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>", style=dashed];
m3_36 -> m3_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_44 -> m3_46  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_73 -> m3_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_125 -> m3_127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_87 -> m3_89  [color=darkseagreen4, key=1, label=servers, style=dashed];
m3_88 -> m3_92  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_82 -> m3_269  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_252 -> m3_272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_252 -> m3_275  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_252 -> m3_254  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m3_252 -> m3_255  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m3_250 -> m3_268  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_250 -> m3_253  [color=darkseagreen4, key=1, label=keys, style=dashed];
m3_253 -> m3_255  [color=darkseagreen4, key=1, label=key, style=dashed];
m3_243 -> m3_247  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m3_243 -> m3_246  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m3_245 -> m3_247  [color=darkseagreen4, key=1, label=dates, style=dashed];
m3_245 -> m3_260  [color=darkseagreen4, key=1, label=dates, style=dashed];
m3_249 -> m3_265  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_249 -> m3_258  [color=darkseagreen4, key=1, label=stringDates, style=dashed];
m3_256 -> m3_260  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_256 -> m3_262  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_257 -> m3_260  [color=darkseagreen4, key=1, label=i, style=dashed];
m3_257 -> m3_261  [color=darkseagreen4, key=1, label=i, style=dashed];
m3_244 -> m3_246  [color=darkseagreen4, key=1, label=startDate, style=dashed];
m3_261 -> m3_261  [color=darkseagreen4, key=1, label=i, style=dashed];
m3_114 -> m3_117  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_113 -> m3_115  [color=darkseagreen4, key=1, label=queues, style=dashed];
m3_133 -> m3_135  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m3_134 -> m3_137  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_278 -> m3_2  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_278 -> m3_3  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_278 -> m3_9  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_278 -> m3_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_278 -> m3_11  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_278 -> m3_16  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_278 -> m3_28  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_278 -> m3_33  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_278 -> m3_46  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_278 -> m3_80  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_278 -> m3_84  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_278 -> m3_145  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_278 -> m3_149  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_278 -> m3_176  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m3_281 -> m3_269  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_280 -> m3_233  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_279 -> m3_203  [color=darkseagreen4, key=1, label=countByStates, style=dashed];
m4_24 -> m4_27  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m4_24 -> m4_30  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m4_26 -> m4_34  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m4_28 -> m4_33  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m4_58 -> m4_9  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlStorageConnection", style=dashed];
m4_58 -> m4_13  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlStorageConnection", style=dashed];
m4_58 -> m4_17  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlStorageConnection", style=dashed];
m4_58 -> m4_21  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlStorageConnection", style=dashed];
m4_58 -> m4_33  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlStorageConnection", style=dashed];
}
