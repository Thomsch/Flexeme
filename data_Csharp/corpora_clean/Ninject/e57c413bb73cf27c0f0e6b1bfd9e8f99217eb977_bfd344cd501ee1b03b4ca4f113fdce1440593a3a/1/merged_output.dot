digraph  {
m0_8 [cluster="System.Collections.Generic.IEnumerable<T>.ToEnumerable<T>()", file="OpenGenericBindingResolver.cs", label="Entry System.Collections.Generic.IEnumerable<T>.ToEnumerable<T>()", span="40-40"];
m0_5 [cluster="System.Type.GetGenericTypeDefinition()", file="OpenGenericBindingResolver.cs", label="Entry System.Type.GetGenericTypeDefinition()", span="0-0"];
m0_0 [cluster="Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver.Resolve(Ninject.Infrastructure.Multimap<System.Type, Ninject.Planning.Bindings.IBinding>, System.Type)", file="OpenGenericBindingResolver.cs", label="Entry Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver.Resolve(Ninject.Infrastructure.Multimap<System.Type, Ninject.Planning.Bindings.IBinding>, System.Type)", span="32-32"];
m0_1 [cluster="Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver.Resolve(Ninject.Infrastructure.Multimap<System.Type, Ninject.Planning.Bindings.IBinding>, System.Type)", color=green, community=0, file="OpenGenericBindingResolver.cs", label="2: !service.IsGenericType || service.IsGenericTypeDefinition || !bindings.ContainsKey(service.GetGenericTypeDefinition())", span="34-34"];
m0_3 [cluster="Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver.Resolve(Ninject.Infrastructure.Multimap<System.Type, Ninject.Planning.Bindings.IBinding>, System.Type)", file="OpenGenericBindingResolver.cs", label="return bindings[service.GetGenericTypeDefinition()].ToEnumerable();", span="37-37"];
m0_2 [cluster="Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver.Resolve(Ninject.Infrastructure.Multimap<System.Type, Ninject.Planning.Bindings.IBinding>, System.Type)", file="OpenGenericBindingResolver.cs", label="return Enumerable.Empty<IBinding>();", span="35-35"];
m0_4 [cluster="Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver.Resolve(Ninject.Infrastructure.Multimap<System.Type, Ninject.Planning.Bindings.IBinding>, System.Type)", file="OpenGenericBindingResolver.cs", label="Exit Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver.Resolve(Ninject.Infrastructure.Multimap<System.Type, Ninject.Planning.Bindings.IBinding>, System.Type)", span="32-32"];
m0_6 [cluster="Ninject.Infrastructure.Multimap<K, V>.ContainsKey(K)", file="OpenGenericBindingResolver.cs", label="Entry Ninject.Infrastructure.Multimap<K, V>.ContainsKey(K)", span="113-113"];
m0_7 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="OpenGenericBindingResolver.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m1_11 [cluster="Unk.ToMaybe", file="ResolutionExtensions.cs", label="Entry Unk.ToMaybe", span=""];
m1_13 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ResolutionExtensions.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m1_30 [cluster="CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", file="ResolutionExtensions.cs", label="Entry CommandLine.Core.SpecificationProperty.WithValue(CSharpx.Maybe<object>)", span="18-18"];
m1_5 [cluster="Unk.>", file="ResolutionExtensions.cs", label="Entry Unk.>", span=""];
m1_24 [cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()", file="ResolutionExtensions.cs", label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15"];
m1_22 [cluster="Unk.converter", file="ResolutionExtensions.cs", label="Entry Unk.converter", span=""];
m1_25 [cluster="CSharpx.Maybe.Just<T>(T)", file="ResolutionExtensions.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m1_0 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="ResolutionExtensions.cs", label="Entry CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14"];
m1_1 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="ResolutionExtensions.cs", label="var sequencesAndErrors = propertyTuples\r\n                .Select(pt =>\r\n                    options.FirstOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .MapValueOrDefault(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .MapValueOrDefault(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(((OptionSpecification)pt.Specification).FromOptionSpecification())))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))\r\n                )", span="20-36"];
m1_2 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="ResolutionExtensions.cs", label="return Result.Succeed(\r\n                sequencesAndErrors.Select(se => se.Item1),\r\n                sequencesAndErrors.Select(se => se.Item2).OfType<Just<Error>>().Select(se => se.Value));", span="37-39"];
m1_3 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="ResolutionExtensions.cs", label="Exit CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14"];
m1_18 [cluster="string.MatchName(string, string, System.StringComparer)", file="ResolutionExtensions.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m1_23 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ResolutionExtensions.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
m1_26 [cluster="CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", file="ResolutionExtensions.cs", label="Entry CSharpx.Maybe<T1>.MapValueOrDefault<T1, T2>(System.Func<T1, T2>, T2)", span="377-377"];
m1_6 [cluster="Unk.Succeed", file="ResolutionExtensions.cs", label="Entry Unk.Succeed", span=""];
m1_27 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Entry lambda expression", span="28-31"];
m1_8 [cluster="lambda expression", file="ResolutionExtensions.cs", label="options.FirstOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .MapValueOrDefault(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .MapValueOrDefault(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(((OptionSpecification)pt.Specification).FromOptionSpecification())))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))", span="22-35"];
m1_16 [cluster="lambda expression", file="ResolutionExtensions.cs", label="s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)", span="24-24"];
m1_20 [cluster="lambda expression", file="ResolutionExtensions.cs", label="converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .MapValueOrDefault(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(((OptionSpecification)pt.Specification).FromOptionSpecification()))))", span="27-34"];
m1_7 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Entry lambda expression", span="21-35"];
m1_31 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Entry lambda expression", span="38-38"];
m1_34 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Entry lambda expression", span="39-39"];
m1_37 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Entry lambda expression", span="39-39"];
m1_28 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>())", span="29-31"];
m1_9 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Exit lambda expression", span="21-35"];
m1_15 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Entry lambda expression", span="23-24"];
m1_19 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Entry lambda expression", span="26-34"];
m1_17 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Exit lambda expression", span="23-24"];
m1_21 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Exit lambda expression", span="26-34"];
m1_29 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Exit lambda expression", span="28-31"];
m1_32 [cluster="lambda expression", file="ResolutionExtensions.cs", label="se.Item1", span="38-38"];
m1_33 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Exit lambda expression", span="38-38"];
m1_35 [cluster="lambda expression", file="ResolutionExtensions.cs", label="se.Item2", span="39-39"];
m1_36 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Exit lambda expression", span="39-39"];
m1_38 [cluster="lambda expression", file="ResolutionExtensions.cs", label="se.Value", span="39-39"];
m1_39 [cluster="lambda expression", file="ResolutionExtensions.cs", label="Exit lambda expression", span="39-39"];
m1_12 [cluster="CSharpx.Maybe.Nothing<T>()", file="ResolutionExtensions.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m1_10 [cluster="Unk.FirstOrDefault", file="ResolutionExtensions.cs", label="Entry Unk.FirstOrDefault", span=""];
m1_14 [cluster="Unk.MapValueOrDefault", file="ResolutionExtensions.cs", label="Entry Unk.MapValueOrDefault", span=""];
m1_4 [cluster="Unk.Select", file="ResolutionExtensions.cs", label="Entry Unk.Select", span=""];
m1_40 [file="ResolutionExtensions.cs", label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", span=""];
m1_41 [file="ResolutionExtensions.cs", label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", span=""];
m1_42 [file="ResolutionExtensions.cs", label="System.StringComparer", span=""];
m1_43 [file="ResolutionExtensions.cs", label="CommandLine.Core.SpecificationProperty", span=""];
m0_0 -> m0_1  [color=green, key=0, style=solid];
m0_0 -> m0_3  [color=darkseagreen4, key=1, label="Ninject.Infrastructure.Multimap<System.Type, Ninject.Planning.Bindings.IBinding>", style=dashed];
m0_1 -> m0_2  [color=green, key=0, style=solid];
m0_1 -> m0_3  [color=green, key=0, style=solid];
m0_1 -> m0_5  [color=green, key=2, style=dotted];
m0_1 -> m0_6  [color=green, key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_5  [key=2, style=dotted];
m0_3 -> m0_8  [key=2, style=dotted];
m0_2 -> m0_4  [key=0, style=solid];
m0_2 -> m0_7  [key=2, style=dotted];
m0_4 -> m0_0  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", style=dashed];
m1_0 -> m1_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_0 -> m1_20  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_4  [key=2, style=dotted];
m1_1 -> m1_7  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_4  [key=2, style=dotted];
m1_2 -> m1_5  [key=2, style=dotted];
m1_2 -> m1_6  [key=2, style=dotted];
m1_2 -> m1_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_3 -> m1_0  [color=blue, key=0, style=bold];
m1_27 -> m1_28  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_10  [key=2, style=dotted];
m1_8 -> m1_11  [key=2, style=dotted];
m1_8 -> m1_12  [key=2, style=dotted];
m1_8 -> m1_13  [key=2, style=dotted];
m1_8 -> m1_14  [key=2, style=dotted];
m1_8 -> m1_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_8 -> m1_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=2, style=dotted];
m1_16 -> m1_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_22  [key=2, style=dotted];
m1_20 -> m1_23  [key=2, style=dotted];
m1_20 -> m1_24  [key=2, style=dotted];
m1_20 -> m1_25  [key=2, style=dotted];
m1_20 -> m1_13  [key=2, style=dotted];
m1_20 -> m1_26  [key=2, style=dotted];
m1_20 -> m1_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_16  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_7 -> m1_20  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_7 -> m1_28  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_31 -> m1_32  [key=0, style=solid];
m1_34 -> m1_35  [key=0, style=solid];
m1_37 -> m1_38  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_25  [key=2, style=dotted];
m1_28 -> m1_30  [key=2, style=dotted];
m1_28 -> m1_12  [key=2, style=dotted];
m1_28 -> m1_13  [key=2, style=dotted];
m1_9 -> m1_7  [color=blue, key=0, style=bold];
m1_15 -> m1_16  [key=0, style=solid];
m1_19 -> m1_20  [key=0, style=solid];
m1_17 -> m1_15  [color=blue, key=0, style=bold];
m1_21 -> m1_19  [color=blue, key=0, style=bold];
m1_29 -> m1_27  [color=blue, key=0, style=bold];
m1_32 -> m1_33  [key=0, style=solid];
m1_33 -> m1_31  [color=blue, key=0, style=bold];
m1_35 -> m1_36  [key=0, style=solid];
m1_36 -> m1_34  [color=blue, key=0, style=bold];
m1_38 -> m1_39  [key=0, style=solid];
m1_39 -> m1_37  [color=blue, key=0, style=bold];
m1_40 -> m1_8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", style=dashed];
m1_41 -> m1_8  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
m1_41 -> m1_20  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
m1_42 -> m1_8  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_42 -> m1_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_43 -> m1_16  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_43 -> m1_20  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m1_43 -> m1_28  [color=darkseagreen4, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
}
