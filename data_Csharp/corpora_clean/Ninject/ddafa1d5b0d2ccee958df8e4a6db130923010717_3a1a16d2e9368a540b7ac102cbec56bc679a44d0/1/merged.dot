digraph  {
n0 [label="Entry Ninject.BindingPrecedenceComparer.Compare(Ninject.Planning.Bindings.IBinding, Ninject.Planning.Bindings.IBinding)", span="23-23", cluster="Ninject.BindingPrecedenceComparer.Compare(Ninject.Planning.Bindings.IBinding, Ninject.Planning.Bindings.IBinding)"];
n1 [label="x == y", span="25-25", cluster="Ninject.BindingPrecedenceComparer.Compare(Ninject.Planning.Bindings.IBinding, Ninject.Planning.Bindings.IBinding)"];
n4 [label="var q = from func in funcs\r\n                    let xVal = func(x)\r\n                    where xVal != func(y)\r\n                    select xVal ? 1 : -1", span="39-42", cluster="Ninject.BindingPrecedenceComparer.Compare(Ninject.Planning.Bindings.IBinding, Ninject.Planning.Bindings.IBinding)"];
n2 [label="return 0;", span="27-27", cluster="Ninject.BindingPrecedenceComparer.Compare(Ninject.Planning.Bindings.IBinding, Ninject.Planning.Bindings.IBinding)"];
n3 [label="var funcs = new List<Func<IBinding, bool>>\r\n                            {\r\n                                b => b != null,       // null bindings should never happen, but just in case\r\n                                b => b.IsConditional, // conditional bindings > unconditional\r\n                                b => !b.Service.GetTypeInfo().ContainsGenericParameters, // closed generics > open generics\r\n                                b => !b.IsImplicit,   // explicit bindings > implicit\r\n                            }", span="31-37", cluster="Ninject.BindingPrecedenceComparer.Compare(Ninject.Planning.Bindings.IBinding, Ninject.Planning.Bindings.IBinding)", color=red, community=0];
n7 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n12 [label="b != null", span="33-33", cluster="lambda expression"];
n15 [label="b.IsConditional", span="34-34", cluster="lambda expression"];
n18 [label="!b.Service.GetTypeInfo().ContainsGenericParameters", span="35-35", cluster="lambda expression", color=red, community=0];
n22 [label="!b.IsImplicit", span="36-36", cluster="lambda expression"];
n5 [label="return q.FirstOrDefault();", span="46-46", cluster="Ninject.BindingPrecedenceComparer.Compare(Ninject.Planning.Bindings.IBinding, Ninject.Planning.Bindings.IBinding)"];
n8 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n9 [label="Entry Unk.func", span="", cluster="Unk.func"];
n6 [label="Exit Ninject.BindingPrecedenceComparer.Compare(Ninject.Planning.Bindings.IBinding, Ninject.Planning.Bindings.IBinding)", span="23-23", cluster="Ninject.BindingPrecedenceComparer.Compare(Ninject.Planning.Bindings.IBinding, Ninject.Planning.Bindings.IBinding)"];
n10 [label="Entry Unk.FirstOrDefault", span="", cluster="Unk.FirstOrDefault"];
n11 [label="Entry lambda expression", span="33-33", cluster="lambda expression"];
n13 [label="Exit lambda expression", span="33-33", cluster="lambda expression"];
n14 [label="Entry lambda expression", span="34-34", cluster="lambda expression"];
n16 [label="Exit lambda expression", span="34-34", cluster="lambda expression"];
n17 [label="Entry lambda expression", span="35-35", cluster="lambda expression"];
n19 [label="Exit lambda expression", span="35-35", cluster="lambda expression"];
n20 [label="Entry System.Type.GetTypeInfo()", span="0-0", cluster="System.Type.GetTypeInfo()"];
n21 [label="Entry lambda expression", span="36-36", cluster="lambda expression"];
n23 [label="Exit lambda expression", span="36-36", cluster="lambda expression"];
d3 [label="var funcs = new List<Func<IBinding, bool>>\r\n                            {\r\n                                b => b != null,       // null bindings should never happen, but just in case\r\n                                b => b.IsConditional, // conditional bindings > unconditional\r\n                                b => !b.Service.GetTypeInfo().ContainsGenericParameters, // closed generics > open generics\r\n                                b => !b.IsImplicit,   // explicit bindings > implicit\r\n                            }", span="31-37", cluster="Ninject.BindingPrecedenceComparer.Compare(Ninject.Planning.Bindings.IBinding, Ninject.Planning.Bindings.IBinding)", color=green, community=0];
d18 [label="!b.Service.GetTypeInfo().ContainsGenericParameters", span="35-35", cluster="lambda expression", color=green, community=0];
m0_10 [label="Entry Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.CallsMethod()", span="32-32", cluster="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.CallsMethod()", file="ExtensionsForMemberInfo.cs"];
m0_11 [label="var samurai = new Samurai(new Sword())", span="34-34", cluster="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.CallsMethod()", file="ExtensionsForMemberInfo.cs"];
m0_12 [label="injector.Invoke(samurai, ''evildoer'')", span="35-35", cluster="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.CallsMethod()", file="ExtensionsForMemberInfo.cs"];
m0_13 [label="Assert.True(samurai.IsBattleHardened)", span="36-36", cluster="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.CallsMethod()", file="ExtensionsForMemberInfo.cs"];
m0_14 [label="Exit Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.CallsMethod()", span="32-32", cluster="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.CallsMethod()", file="ExtensionsForMemberInfo.cs"];
m0_9 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="ExtensionsForMemberInfo.cs"];
m0_5 [label="Entry Ninject.Injection.Injectors.Linq.MethodInjector.MethodInjector(System.Reflection.MethodInfo)", span="7-7", cluster="Ninject.Injection.Injectors.Linq.MethodInjector.MethodInjector(System.Reflection.MethodInfo)", file="ExtensionsForMemberInfo.cs"];
m0_15 [label="Entry Ninject.Tests.Fakes.Samurai.Samurai(Ninject.Tests.Fakes.IWeapon)", span="23-23", cluster="Ninject.Tests.Fakes.Samurai.Samurai(Ninject.Tests.Fakes.IWeapon)", file="ExtensionsForMemberInfo.cs"];
m0_18 [label="Entry Unk.True", span="", cluster="Unk.True", file="ExtensionsForMemberInfo.cs"];
m0_24 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="ExtensionsForMemberInfo.cs"];
m0_6 [label="Entry Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsCreated.CanGetCallback()", span="23-23", cluster="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsCreated.CanGetCallback()", file="ExtensionsForMemberInfo.cs"];
m0_7 [label="Assert.NotNull(injector.Callback)", span="25-25", cluster="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsCreated.CanGetCallback()", file="ExtensionsForMemberInfo.cs"];
m0_8 [label="Exit Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsCreated.CanGetCallback()", span="23-23", cluster="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsCreated.CanGetCallback()", file="ExtensionsForMemberInfo.cs"];
m0_16 [label="Entry Ninject.Tests.Fakes.Sword.Sword()", span="4-4", cluster="Ninject.Tests.Fakes.Sword.Sword()", file="ExtensionsForMemberInfo.cs"];
m0_17 [label="Entry Ninject.Injection.Injectors.Linq.MethodInjector.Invoke(object, params object[])", span="9-9", cluster="Ninject.Injection.Injectors.Linq.MethodInjector.Invoke(object, params object[])", file="ExtensionsForMemberInfo.cs"];
m0_0 [label="Entry Ninject.Tests.Unit.MethodInjectorTests.MethodInjectorContext.MethodInjectorContext()", span="13-13", cluster="Ninject.Tests.Unit.MethodInjectorTests.MethodInjectorContext.MethodInjectorContext()", file="ExtensionsForMemberInfo.cs"];
m0_1 [label="method = typeof(Samurai).GetMethod(''Attack'')", span="15-15", cluster="Ninject.Tests.Unit.MethodInjectorTests.MethodInjectorContext.MethodInjectorContext()", file="ExtensionsForMemberInfo.cs"];
m0_2 [label="injector = new MethodInjector(method)", span="16-16", cluster="Ninject.Tests.Unit.MethodInjectorTests.MethodInjectorContext.MethodInjectorContext()", file="ExtensionsForMemberInfo.cs"];
m0_3 [label="Exit Ninject.Tests.Unit.MethodInjectorTests.MethodInjectorContext.MethodInjectorContext()", span="13-13", cluster="Ninject.Tests.Unit.MethodInjectorTests.MethodInjectorContext.MethodInjectorContext()", file="ExtensionsForMemberInfo.cs"];
m0_4 [label="Entry System.Type.GetMethod(string)", span="0-0", cluster="System.Type.GetMethod(string)", file="ExtensionsForMemberInfo.cs"];
m0_19 [label="Entry Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.ReturnsValueFromMethod()", span="40-40", cluster="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.ReturnsValueFromMethod()", file="ExtensionsForMemberInfo.cs"];
m0_20 [label="var samurai = new Samurai(new Sword())", span="42-42", cluster="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.ReturnsValueFromMethod()", file="ExtensionsForMemberInfo.cs"];
m0_21 [label="var result = injector.Invoke(samurai, ''evildoer'') as string", span="43-43", cluster="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.ReturnsValueFromMethod()", file="ExtensionsForMemberInfo.cs"];
m0_22 [label="Assert.Equal(''Attacked evildoer with a sword'', result)", span="44-44", cluster="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.ReturnsValueFromMethod()", file="ExtensionsForMemberInfo.cs"];
m0_23 [label="Exit Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.ReturnsValueFromMethod()", span="40-40", cluster="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked.ReturnsValueFromMethod()", file="ExtensionsForMemberInfo.cs"];
m0_25 [label="Ninject.Tests.Unit.MethodInjectorTests.MethodInjectorContext", span="", file="ExtensionsForMemberInfo.cs"];
m0_26 [label="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsCreated", span="", file="ExtensionsForMemberInfo.cs"];
m0_27 [label="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked", span="", file="ExtensionsForMemberInfo.cs"];
m1_6 [label="Entry System.Type.GetField(string, System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetField(string, System.Reflection.BindingFlags)", file="KernelBase.cs"];
m1_7 [label="Entry System.Reflection.FieldInfo.SetValue(object, object)", span="0-0", cluster="System.Reflection.FieldInfo.SetValue(object, object)", file="KernelBase.cs"];
m1_0 [label="Entry Ninject.Syntax.ExtensionsForTargetInvocationException.RethrowInnerException(System.Reflection.TargetInvocationException)", span="7-7", cluster="Ninject.Syntax.ExtensionsForTargetInvocationException.RethrowInnerException(System.Reflection.TargetInvocationException)", file="KernelBase.cs"];
m1_1 [label="Exception innerException = exception.InnerException", span="9-9", cluster="Ninject.Syntax.ExtensionsForTargetInvocationException.RethrowInnerException(System.Reflection.TargetInvocationException)", file="KernelBase.cs"];
m1_2 [label="FieldInfo stackTraceField = typeof(Exception).GetField(''_remoteStackTraceString'', BindingFlags.Instance | BindingFlags.NonPublic)", span="11-11", cluster="Ninject.Syntax.ExtensionsForTargetInvocationException.RethrowInnerException(System.Reflection.TargetInvocationException)", file="KernelBase.cs"];
m1_3 [label="stackTraceField.SetValue(innerException, innerException.StackTrace)", span="12-12", cluster="Ninject.Syntax.ExtensionsForTargetInvocationException.RethrowInnerException(System.Reflection.TargetInvocationException)", file="KernelBase.cs"];
m1_4 [label="throw innerException;", span="14-14", cluster="Ninject.Syntax.ExtensionsForTargetInvocationException.RethrowInnerException(System.Reflection.TargetInvocationException)", file="KernelBase.cs"];
m1_5 [label="Exit Ninject.Syntax.ExtensionsForTargetInvocationException.RethrowInnerException(System.Reflection.TargetInvocationException)", span="7-7", cluster="Ninject.Syntax.ExtensionsForTargetInvocationException.RethrowInnerException(System.Reflection.TargetInvocationException)", file="KernelBase.cs"];
n0 -> n1  [key=0, style=solid];
n0 -> n4  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Planning.Bindings.IBinding"];
n0 -> n2  [key=3, color=darkorchid, style=bold, label="method methodReturn int Compare"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=0, style=solid, color=red];
n1 -> d3  [key=0, style=solid, color=green];
n4 -> n5  [key=0, style=solid];
n4 -> n8  [key=2, style=dotted];
n4 -> n9  [key=2, style=dotted];
n4 -> n4  [key=1, style=dashed, color=darkseagreen4, label=func];
n2 -> n6  [key=0, style=solid];
n3 -> n4  [key=0, style=solid, color=red];
n3 -> n7  [key=2, style=dotted, color=red];
n3 -> n12  [key=1, style=dashed, color=red, label="Ninject.Planning.Bindings.IBinding"];
n3 -> n15  [key=1, style=dashed, color=red, label="Ninject.Planning.Bindings.IBinding"];
n3 -> n18  [key=1, style=dashed, color=red, label="Ninject.Planning.Bindings.IBinding"];
n3 -> n22  [key=1, style=dashed, color=red, label="Ninject.Planning.Bindings.IBinding"];
n12 -> n13  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n18 -> n19  [key=0, style=solid, color=red];
n18 -> n20  [key=2, style=dotted, color=red];
n22 -> n23  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n10  [key=2, style=dotted];
n6 -> n0  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n13 -> n11  [key=0, style=bold, color=blue];
n14 -> n15  [key=0, style=solid];
n16 -> n14  [key=0, style=bold, color=blue];
n17 -> n18  [key=0, style=solid, color=red];
n17 -> d18  [key=0, style=solid, color=green];
n19 -> n17  [key=0, style=bold, color=blue];
n21 -> n22  [key=0, style=solid];
n23 -> n21  [key=0, style=bold, color=blue];
d3 -> n4  [key=0, style=solid, color=green];
d3 -> n7  [key=2, style=dotted, color=green];
d3 -> n12  [key=1, style=dashed, color=green, label="Ninject.Planning.Bindings.IBinding"];
d3 -> n15  [key=1, style=dashed, color=green, label="Ninject.Planning.Bindings.IBinding"];
d3 -> d18  [key=1, style=dashed, color=green, label="Ninject.Planning.Bindings.IBinding"];
d3 -> n22  [key=1, style=dashed, color=green, label="Ninject.Planning.Bindings.IBinding"];
d18 -> n19  [key=0, style=solid, color=green];
d18 -> n20  [key=2, style=dotted, color=green];
m0_10 -> m0_11  [key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_15  [key=2, style=dotted];
m0_11 -> m0_16  [key=2, style=dotted];
m0_11 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=samurai];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_17  [key=2, style=dotted];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_18  [key=2, style=dotted];
m0_14 -> m0_10  [key=0, style=bold, color=blue];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_6  [key=3, color=darkorchid, style=bold, label="Field variable System.Reflection.BindingFlags Flags"];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_9  [key=2, style=dotted];
m0_8 -> m0_6  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_4  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_5  [key=2, style=dotted];
m0_3 -> m0_0  [key=0, style=bold, color=blue];
m0_19 -> m0_20  [key=0, style=solid];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_15  [key=2, style=dotted];
m0_20 -> m0_16  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_17  [key=2, style=dotted];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_24  [key=2, style=dotted];
m0_23 -> m0_19  [key=0, style=bold, color=blue];
m0_25 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Unit.MethodInjectorTests.MethodInjectorContext"];
m0_25 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Unit.MethodInjectorTests.MethodInjectorContext"];
m0_26 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsCreated"];
m0_27 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked"];
m0_27 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Tests.Unit.MethodInjectorTests.WhenMethodInjectorIsInvoked"];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label=innerException];
m1_1 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=innerException];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_6  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_7  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
}
