digraph  {
n3 [label="Ninject.Planning.Directives.ConstructorInjectionDirective", span=""];
n0 [label="Entry Ninject.Planning.Directives.ConstructorInjectionDirective.ConstructorInjectionDirective(System.Reflection.ConstructorInfo, Ninject.Injection.ConstructorInjector)", span="37-37", cluster="Ninject.Planning.Directives.ConstructorInjectionDirective.ConstructorInjectionDirective(System.Reflection.ConstructorInfo, Ninject.Injection.ConstructorInjector)"];
n1 [label="this.Constructor = constructor", span="40-40", cluster="Ninject.Planning.Directives.ConstructorInjectionDirective.ConstructorInjectionDirective(System.Reflection.ConstructorInfo, Ninject.Injection.ConstructorInjector)"];
n2 [label="Exit Ninject.Planning.Directives.ConstructorInjectionDirective.ConstructorInjectionDirective(System.Reflection.ConstructorInfo, Ninject.Injection.ConstructorInjector)", span="37-37", cluster="Ninject.Planning.Directives.ConstructorInjectionDirective.ConstructorInjectionDirective(System.Reflection.ConstructorInfo, Ninject.Injection.ConstructorInjector)"];
m0_0 [label="Entry Ninject.Planning.Targets.ITarget.ResolveWithin(Ninject.Activation.IContext)", span="79-79", cluster="Ninject.Planning.Targets.ITarget.ResolveWithin(Ninject.Activation.IContext)", file="ConstructorReflectionStrategy.cs"];
m0_1 [label="Exit Ninject.Planning.Targets.ITarget.ResolveWithin(Ninject.Activation.IContext)", span="79-79", cluster="Ninject.Planning.Targets.ITarget.ResolveWithin(Ninject.Activation.IContext)", file="ConstructorReflectionStrategy.cs"];
m2_0 [label="Entry Ninject.Infrastructure.Language.ExtensionsForAssembly.HasNinjectModules(System.Reflection.Assembly)", span="22-22", cluster="Ninject.Infrastructure.Language.ExtensionsForAssembly.HasNinjectModules(System.Reflection.Assembly)", file="PropertyInjectionTests.cs"];
m2_1 [label="return assembly.GetExportedTypes().Any(IsLoadableModule);", span="24-24", cluster="Ninject.Infrastructure.Language.ExtensionsForAssembly.HasNinjectModules(System.Reflection.Assembly)", file="PropertyInjectionTests.cs"];
m2_2 [label="Exit Ninject.Infrastructure.Language.ExtensionsForAssembly.HasNinjectModules(System.Reflection.Assembly)", span="22-22", cluster="Ninject.Infrastructure.Language.ExtensionsForAssembly.HasNinjectModules(System.Reflection.Assembly)", file="PropertyInjectionTests.cs"];
m2_5 [label="Entry Ninject.Infrastructure.Language.ExtensionsForAssembly.GetNinjectModules(System.Reflection.Assembly)", span="27-27", cluster="Ninject.Infrastructure.Language.ExtensionsForAssembly.GetNinjectModules(System.Reflection.Assembly)", file="PropertyInjectionTests.cs"];
m2_6 [label="return assembly.GetExportedTypes()\r\n                    .Where(IsLoadableModule)\r\n                    .Select(type => Activator.CreateInstance(type) as INinjectModule);", span="29-31", cluster="Ninject.Infrastructure.Language.ExtensionsForAssembly.GetNinjectModules(System.Reflection.Assembly)", file="PropertyInjectionTests.cs"];
m2_7 [label="Exit Ninject.Infrastructure.Language.ExtensionsForAssembly.GetNinjectModules(System.Reflection.Assembly)", span="27-27", cluster="Ninject.Infrastructure.Language.ExtensionsForAssembly.GetNinjectModules(System.Reflection.Assembly)", file="PropertyInjectionTests.cs"];
m2_4 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="PropertyInjectionTests.cs"];
m2_3 [label="Entry System.Reflection.Assembly.GetExportedTypes()", span="0-0", cluster="System.Reflection.Assembly.GetExportedTypes()", file="PropertyInjectionTests.cs"];
m2_18 [label="Entry System.Type.GetConstructor(System.Type[])", span="0-0", cluster="System.Type.GetConstructor(System.Type[])", file="PropertyInjectionTests.cs"];
m2_14 [label="Entry Ninject.Infrastructure.Language.ExtensionsForAssembly.IsLoadableModule(System.Type)", span="34-34", cluster="Ninject.Infrastructure.Language.ExtensionsForAssembly.IsLoadableModule(System.Type)", file="PropertyInjectionTests.cs"];
m2_15 [label="return typeof(INinjectModule).IsAssignableFrom(type)\r\n                && !type.IsAbstract\r\n                && !type.IsInterface\r\n                && type.GetConstructor(Type.EmptyTypes) != null;", span="36-39", cluster="Ninject.Infrastructure.Language.ExtensionsForAssembly.IsLoadableModule(System.Type)", file="PropertyInjectionTests.cs"];
m2_16 [label="Exit Ninject.Infrastructure.Language.ExtensionsForAssembly.IsLoadableModule(System.Type)", span="34-34", cluster="Ninject.Infrastructure.Language.ExtensionsForAssembly.IsLoadableModule(System.Type)", file="PropertyInjectionTests.cs"];
m2_17 [label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0", cluster="System.Type.IsAssignableFrom(System.Type)", file="PropertyInjectionTests.cs"];
m2_13 [label="Entry Unk.CreateInstance", span="", cluster="Unk.CreateInstance", file="PropertyInjectionTests.cs"];
m2_10 [label="Entry lambda expression", span="31-31", cluster="lambda expression", file="PropertyInjectionTests.cs"];
m2_11 [label="Activator.CreateInstance(type) as INinjectModule", span="31-31", cluster="lambda expression", file="PropertyInjectionTests.cs"];
m2_12 [label="Exit lambda expression", span="31-31", cluster="lambda expression", file="PropertyInjectionTests.cs"];
m2_8 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="PropertyInjectionTests.cs"];
m2_9 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="PropertyInjectionTests.cs"];
m3_15 [label="Entry Ninject.Infrastructure.ReferenceEqualWeakReference.GetHashCode()", span="86-86", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.GetHashCode()", file="ReferenceEqualWeakReference.cs"];
m3_16 [label="return this.cashedHashCode;", span="88-88", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.GetHashCode()", color=green, community=0, file="ReferenceEqualWeakReference.cs"];
m3_17 [label="Exit Ninject.Infrastructure.ReferenceEqualWeakReference.GetHashCode()", span="86-86", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.GetHashCode()", file="ReferenceEqualWeakReference.cs"];
m3_3 [label="Entry System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(object)", span="0-0", cluster="System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(object)", file="ReferenceEqualWeakReference.cs"];
m3_7 [label="Entry Ninject.Infrastructure.ReferenceEqualWeakReference.Equals(object)", span="67-67", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.Equals(object)", file="ReferenceEqualWeakReference.cs"];
m3_8 [label="var thisInstance = this.IsAlive ? this.Target : this", span="69-69", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.Equals(object)", file="ReferenceEqualWeakReference.cs"];
m3_9 [label="var referenceEqualWeakReference = obj as WeakReference", span="71-71", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.Equals(object)", file="ReferenceEqualWeakReference.cs"];
m3_12 [label="return ReferenceEquals(thisInstance, obj);", span="77-77", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.Equals(object)", file="ReferenceEqualWeakReference.cs"];
m3_10 [label="referenceEqualWeakReference != null && referenceEqualWeakReference.IsAlive", span="72-72", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.Equals(object)", file="ReferenceEqualWeakReference.cs"];
m3_11 [label="obj = referenceEqualWeakReference.Target", span="74-74", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.Equals(object)", file="ReferenceEqualWeakReference.cs"];
m3_13 [label="Exit Ninject.Infrastructure.ReferenceEqualWeakReference.Equals(object)", span="67-67", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.Equals(object)", file="ReferenceEqualWeakReference.cs"];
m3_14 [label="Entry object.ReferenceEquals(object, object)", span="0-0", cluster="object.ReferenceEquals(object, object)", file="ReferenceEqualWeakReference.cs"];
m3_4 [label="Entry Ninject.Infrastructure.ReferenceEqualWeakReference.ReferenceEqualWeakReference(object, bool)", span="51-51", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.ReferenceEqualWeakReference(object, bool)", file="ReferenceEqualWeakReference.cs"];
m3_5 [label="this.cashedHashCode = RuntimeHelpers.GetHashCode(target)", span="54-54", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.ReferenceEqualWeakReference(object, bool)", color=green, community=0, file="ReferenceEqualWeakReference.cs"];
m3_6 [label="Exit Ninject.Infrastructure.ReferenceEqualWeakReference.ReferenceEqualWeakReference(object, bool)", span="51-51", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.ReferenceEqualWeakReference(object, bool)", file="ReferenceEqualWeakReference.cs"];
m3_0 [label="Entry Ninject.Infrastructure.ReferenceEqualWeakReference.ReferenceEqualWeakReference(object)", span="40-40", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.ReferenceEqualWeakReference(object)", file="ReferenceEqualWeakReference.cs"];
m3_1 [label="this.cashedHashCode = RuntimeHelpers.GetHashCode(target)", span="43-43", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.ReferenceEqualWeakReference(object)", color=green, community=0, file="ReferenceEqualWeakReference.cs"];
m3_2 [label="Exit Ninject.Infrastructure.ReferenceEqualWeakReference.ReferenceEqualWeakReference(object)", span="40-40", cluster="Ninject.Infrastructure.ReferenceEqualWeakReference.ReferenceEqualWeakReference(object)", file="ReferenceEqualWeakReference.cs"];
m3_18 [label="Ninject.Infrastructure.ReferenceEqualWeakReference", span="", file="ReferenceEqualWeakReference.cs"];
n3 -> n1  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Planning.Directives.ConstructorInjectionDirective"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n2 -> n0  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_0  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=2, style=dotted];
m2_1 -> m2_4  [key=2, style=dotted];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_5 -> m2_6  [key=0, style=solid];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_3  [key=2, style=dotted];
m2_6 -> m2_8  [key=2, style=dotted];
m2_6 -> m2_9  [key=2, style=dotted];
m2_6 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_7 -> m2_5  [key=0, style=bold, color=blue];
m2_14 -> m2_15  [key=0, style=solid];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_17  [key=2, style=dotted];
m2_15 -> m2_18  [key=2, style=dotted];
m2_16 -> m2_14  [key=0, style=bold, color=blue];
m2_10 -> m2_11  [key=0, style=solid];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_13  [key=2, style=dotted];
m2_12 -> m2_10  [key=0, style=bold, color=blue];
m3_15 -> m3_16  [key=0, style=solid, color=green];
m3_16 -> m3_17  [key=0, style=solid, color=green];
m3_17 -> m3_15  [key=0, style=bold, color=blue];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label=object];
m3_7 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label=object];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label=thisInstance];
m3_9 -> m3_10  [key=0, style=solid];
m3_9 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label=referenceEqualWeakReference];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_14  [key=2, style=dotted];
m3_10 -> m3_12  [key=0, style=solid];
m3_10 -> m3_11  [key=0, style=solid];
m3_11 -> m3_12  [key=0, style=solid];
m3_13 -> m3_7  [key=0, style=bold, color=blue];
m3_4 -> m3_5  [key=0, style=solid, color=green];
m3_5 -> m3_6  [key=0, style=solid, color=green];
m3_5 -> m3_3  [key=2, style=dotted, color=green];
m3_6 -> m3_4  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid, color=green];
m3_1 -> m3_2  [key=0, style=solid, color=green];
m3_1 -> m3_3  [key=2, style=dotted, color=green];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_18 -> m3_1  [key=1, style=dashed, color=green, label="Ninject.Infrastructure.ReferenceEqualWeakReference"];
m3_18 -> m3_5  [key=1, style=dashed, color=green, label="Ninject.Infrastructure.ReferenceEqualWeakReference"];
m3_18 -> m3_16  [key=1, style=dashed, color=green, label="Ninject.Infrastructure.ReferenceEqualWeakReference"];
m3_18 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="Ninject.Infrastructure.ReferenceEqualWeakReference"];
}
