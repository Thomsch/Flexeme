digraph  {
n0 [cluster="RestSharp.Extensions.StringExtensions.UrlDecode(string)", label="Entry RestSharp.Extensions.StringExtensions.UrlDecode(string)", span="40-40"];
n1 [cluster="RestSharp.Extensions.StringExtensions.UrlDecode(string)", label="return HttpUtility.UrlDecode(input);", span="42-42"];
n2 [cluster="RestSharp.Extensions.StringExtensions.UrlDecode(string)", label="Exit RestSharp.Extensions.StringExtensions.UrlDecode(string)", span="40-40"];
n4 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", label="Entry RestSharp.Extensions.StringExtensions.UrlEncode(string)", span="50-50"];
n5 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", label="int maxLength = 32766", span="52-52"];
n6 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", label="input == null", span="53-53"];
n8 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", label="input.Length <= maxLength", span="56-56"];
n10 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", label="StringBuilder sb = new StringBuilder(input.Length * 2)", span="59-59"];
n12 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", label="index < input.Length", span="62-62"];
n13 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", label="int length = Math.Min(input.Length - index, maxLength)", span="64-64"];
n14 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", label="string subString = input.Substring(index, length)", span="65-65"];
d9 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", color=green, community=0, label="return Uri.EscapeUriString(input);", prediction=0, span="57-57"];
n7 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", label="throw new ArgumentNullException(''input'');", span="54-54"];
n18 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", label="Exit RestSharp.Extensions.StringExtensions.UrlEncode(string)", span="50-50"];
n19 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n20 [cluster="System.Uri.EscapeUriString(string)", label="Entry System.Uri.EscapeUriString(string)", span="0-0"];
n11 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", label="int index = 0", span="60-60"];
n17 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", label="return sb.ToString();", span="71-71"];
d15 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", color=green, community=0, label="sb.Append(Uri.EscapeUriString(subString))", prediction=1, span="67-67"];
n21 [cluster="System.Text.StringBuilder.StringBuilder(int)", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
n16 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", label="index += subString.Length", span="68-68"];
n22 [cluster="System.Math.Min(int, int)", label="Entry System.Math.Min(int, int)", span="0-0"];
n23 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
n24 [cluster="System.Text.StringBuilder.Append(string)", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
n25 [cluster="System.Text.StringBuilder.ToString()", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
n26 [cluster="RestSharp.Extensions.StringExtensions.HtmlDecode(string)", label="Entry RestSharp.Extensions.StringExtensions.HtmlDecode(string)", span="75-75"];
n27 [cluster="RestSharp.Extensions.StringExtensions.HtmlDecode(string)", label="return HttpUtility.HtmlDecode(input);", span="77-77"];
n28 [cluster="RestSharp.Extensions.StringExtensions.HtmlDecode(string)", label="Exit RestSharp.Extensions.StringExtensions.HtmlDecode(string)", span="75-75"];
n30 [cluster="RestSharp.Extensions.StringExtensions.HtmlEncode(string)", label="Entry RestSharp.Extensions.StringExtensions.HtmlEncode(string)", span="80-80"];
n31 [cluster="RestSharp.Extensions.StringExtensions.HtmlEncode(string)", label="return HttpUtility.HtmlEncode(input);", span="82-82"];
n32 [cluster="RestSharp.Extensions.StringExtensions.HtmlEncode(string)", label="Exit RestSharp.Extensions.StringExtensions.HtmlEncode(string)", span="80-80"];
n34 [cluster="RestSharp.Extensions.StringExtensions.HasValue(string)", label="Entry RestSharp.Extensions.StringExtensions.HasValue(string)", span="98-98"];
n35 [cluster="RestSharp.Extensions.StringExtensions.HasValue(string)", label="return !string.IsNullOrEmpty(input);", span="100-100"];
n36 [cluster="RestSharp.Extensions.StringExtensions.HasValue(string)", label="Exit RestSharp.Extensions.StringExtensions.HasValue(string)", span="98-98"];
n37 [cluster="string.IsNullOrEmpty(string)", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
n38 [cluster="RestSharp.Extensions.StringExtensions.RemoveUnderscoresAndDashes(string)", label="Entry RestSharp.Extensions.StringExtensions.RemoveUnderscoresAndDashes(string)", span="108-108"];
n39 [cluster="RestSharp.Extensions.StringExtensions.RemoveUnderscoresAndDashes(string)", label="return input.Replace(''_'', '''').Replace(''-'', '''');", span="110-110"];
n40 [cluster="RestSharp.Extensions.StringExtensions.RemoveUnderscoresAndDashes(string)", label="Exit RestSharp.Extensions.StringExtensions.RemoveUnderscoresAndDashes(string)", span="108-108"];
n41 [cluster="string.Replace(string, string)", label="Entry string.Replace(string, string)", span="0-0"];
n42 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="Entry RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", span="119-119"];
n43 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="input = input.Replace(''\n'', '''')", span="121-121"];
n53 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="return ExtractDate(input, @''\\?/Date\((-?\d+)(-|\+)?([0-9]{4})?\)\\?/'', culture);", span="141-141"];
n56 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="return ExtractDate(input, @''newDate\((-?\d+)*\)'', culture);", span="148-148"];
n57 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="return ParseFormattedDate(input, culture);", span="151-151"];
n59 [cluster="string.RemoveSurroundingQuotes()", label="Entry string.RemoveSurroundingQuotes()", span="159-159"];
n64 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="Entry RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", span="216-216"];
n65 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", label="Entry RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", span="170-170"];
n44 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="input = input.Replace(''\r'', '''')", span="122-122"];
n45 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="input = input.RemoveSurroundingQuotes()", span="123-123"];
n46 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="long? unix = null", span="125-125"];
n47 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="unix = Int64.Parse(input)", span="129-129"];
n52 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="input.Contains(''/Date('')", span="139-139"];
n54 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="input.Contains(''new Date('')", span="144-144"];
n55 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="input = input.Replace('' '', '''')", span="146-146"];
n48 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label=Exception, span="131-131"];
n49 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="unix.HasValue", span="133-133"];
n51 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="return epoch.AddSeconds(unix.Value);", span="136-136"];
n60 [cluster="long.Parse(string)", label="Entry long.Parse(string)", span="0-0"];
n50 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="var epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)", span="135-135"];
n61 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0"];
n58 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", label="Exit RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", span="119-119"];
n62 [cluster="System.DateTime.AddSeconds(double)", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
n63 [cluster="string.Contains(string)", label="Entry string.Contains(string)", span="0-0"];
n83 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="DateTime dt = DateTime.MinValue", span="218-218"];
n84 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="var regex = new Regex(pattern)", span="219-219"];
n85 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="regex.IsMatch(input)", span="221-221"];
n86 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="var matches = regex.Matches(input)", span="223-223"];
n92 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="var mod = DateTime.ParseExact(match.Groups[3].Value, ''HHmm'', culture)", span="233-233"];
n96 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="return dt;", span="246-246"];
n98 [cluster="System.Text.RegularExpressions.Regex.Regex(string)", label="Entry System.Text.RegularExpressions.Regex.Regex(string)", span="0-0"];
n99 [cluster="System.Text.RegularExpressions.Regex.IsMatch(string)", label="Entry System.Text.RegularExpressions.Regex.IsMatch(string)", span="0-0"];
n87 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="var match = matches[0]", span="224-224"];
n100 [cluster="System.Text.RegularExpressions.Regex.Matches(string)", label="Entry System.Text.RegularExpressions.Regex.Matches(string)", span="0-0"];
n88 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="var ms = Convert.ToInt64(match.Groups[1].Value)", span="225-225"];
n91 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="match.Groups.Count > 2 && !String.IsNullOrEmpty(match.Groups[3].Value)", span="231-231"];
n93 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="match.Groups[2].Value == ''+''", span="235-235"];
n89 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="var epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)", span="226-226"];
n90 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="dt = epoch.AddMilliseconds(ms)", span="228-228"];
n101 [cluster="System.Convert.ToInt64(string)", label="Entry System.Convert.ToInt64(string)", span="0-0"];
n94 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="dt = dt.Add(mod.TimeOfDay)", span="237-237"];
n95 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="dt = dt.Subtract(mod.TimeOfDay)", span="241-241"];
n102 [cluster="System.DateTime.AddMilliseconds(double)", label="Entry System.DateTime.AddMilliseconds(double)", span="0-0"];
n103 [cluster="System.DateTime.ParseExact(string, string, System.IFormatProvider)", label="Entry System.DateTime.ParseExact(string, string, System.IFormatProvider)", span="0-0"];
n104 [cluster="System.DateTime.Add(System.TimeSpan)", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
n105 [cluster="System.DateTime.Subtract(System.TimeSpan)", label="Entry System.DateTime.Subtract(System.TimeSpan)", span="0-0"];
n97 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", label="Exit RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", span="216-216"];
n73 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", label="var formats = new[]\r\n            {\r\n                ''u'',\r\n                ''s'',\r\n                ''yyyy'-'MM'-'dd'T'HH':'\\nmm':'ss'Z''',\r\n                ''yyyy-MM-ddTHH:mm:ssZ'',\r\n                ''yyyy-MM-dd HH:mm:ssZ'',\r\n                ''yyyy-MM-ddTHH:\\nmm:ss'',\r\n                ''yyyy-MM-ddTHH:mm:sszzzzzz'',\r\n                ''M/d/yyyy h:mm:ss tt'' // default format for invariant \\nculture\r\n            }", span="172-182"];
n74 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", label="DateTime date", span="200-200"];
n75 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", label="DateTime.TryParseExact(input, formats, culture, DateTimeStyles.None, out date)", span="202-202"];
n77 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", label="DateTime.TryParse(input, culture, DateTimeStyles.None, out date)", span="207-207"];
n76 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", label="return date;", span="204-204"];
n81 [cluster="System.DateTime.TryParseExact(string, string[], System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTime)", label="Entry System.DateTime.TryParseExact(string, string[], System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTime)", span="0-0"];
n80 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", label="Exit RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", span="170-170"];
n78 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", label="return date;", span="209-209"];
n79 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", label="return default(DateTime);", span="213-213"];
n82 [cluster="System.DateTime.TryParse(string, System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTime)", label="Entry System.DateTime.TryParse(string, System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTime)", span="0-0"];
n66 [cluster="RestSharp.Extensions.StringExtensions.RemoveSurroundingQuotes(string)", label="Entry RestSharp.Extensions.StringExtensions.RemoveSurroundingQuotes(string)", span="159-159"];
n67 [cluster="RestSharp.Extensions.StringExtensions.RemoveSurroundingQuotes(string)", label="input.StartsWith(''\'''') && input.EndsWith(''\'''')", span="161-161"];
n68 [cluster="RestSharp.Extensions.StringExtensions.RemoveSurroundingQuotes(string)", label="input = input.Substring(1, input.Length - 2)", span="164-164"];
n69 [cluster="RestSharp.Extensions.StringExtensions.RemoveSurroundingQuotes(string)", label="return input;", span="167-167"];
n71 [cluster="string.StartsWith(string)", label="Entry string.StartsWith(string)", span="0-0"];
n72 [cluster="string.EndsWith(string)", label="Entry string.EndsWith(string)", span="0-0"];
n70 [cluster="RestSharp.Extensions.StringExtensions.RemoveSurroundingQuotes(string)", label="Exit RestSharp.Extensions.StringExtensions.RemoveSurroundingQuotes(string)", span="159-159"];
n106 [cluster="RestSharp.Extensions.StringExtensions.Matches(string, string)", label="Entry RestSharp.Extensions.StringExtensions.Matches(string, string)", span="255-255"];
n107 [cluster="RestSharp.Extensions.StringExtensions.Matches(string, string)", label="return Regex.IsMatch(input, pattern);", span="257-257"];
n108 [cluster="RestSharp.Extensions.StringExtensions.Matches(string, string)", label="Exit RestSharp.Extensions.StringExtensions.Matches(string, string)", span="255-255"];
n109 [cluster="System.Text.RegularExpressions.Regex.IsMatch(string, string)", label="Entry System.Text.RegularExpressions.Regex.IsMatch(string, string)", span="0-0"];
n110 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, System.Globalization.CultureInfo)", label="Entry RestSharp.Extensions.StringExtensions.ToPascalCase(string, System.Globalization.CultureInfo)", span="266-266"];
n111 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, System.Globalization.CultureInfo)", label="return ToPascalCase(lowercaseAndUnderscoredWord, true, culture);", span="268-268"];
n113 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="Entry RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", span="278-278"];
n142 [cluster="RestSharp.Extensions.StringExtensions.ToCamelCase(string, System.Globalization.CultureInfo)", label="Entry RestSharp.Extensions.StringExtensions.ToCamelCase(string, System.Globalization.CultureInfo)", span="318-318"];
n112 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, System.Globalization.CultureInfo)", label="Exit RestSharp.Extensions.StringExtensions.ToPascalCase(string, System.Globalization.CultureInfo)", span="266-266"];
n114 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="String.IsNullOrEmpty(text)", span="280-280"];
n115 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="return text;", span="281-281"];
n116 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="text = text.Replace(''_'', '' '')", span="283-283"];
n117 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="string joinString = removeUnderscores ? String.Empty : ''_''", span="285-285"];
n126 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="restOfWord = restOfWord.ToLower(culture)", span="298-298"];
n127 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="char firstChar = char.ToUpper(word[0], culture)", span="300-300"];
n131 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="return String.Concat(words[0].Substring(0, 1).ToUpper(culture), words[0].Substring(1));", span="309-309"];
n132 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="Exit RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", span="278-278"];
n118 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="string[] words = text.Split(' ')", span="286-286"];
n130 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="return String.Join(joinString, words);", span="306-306"];
n119 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="words.Length > 1 || words[0].IsUpperCase()", span="288-288"];
n121 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="i < words.Length", span="290-290"];
n122 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="words[i].Length > 0", span="292-292"];
n123 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="string word = words[i]", span="294-294"];
n128 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="words[i] = String.Concat(firstChar, restOfWord)", span="302-302"];
n133 [cluster="string.Split(params char[])", label="Entry string.Split(params char[])", span="0-0"];
n120 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="int i = 0", span="290-290"];
n134 [cluster="string.IsUpperCase()", label="Entry string.IsUpperCase()", span="338-338"];
n129 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="i++", span="290-290"];
n124 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="string restOfWord = word.Substring(1)", span="295-295"];
n125 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", label="restOfWord.IsUpperCase()", span="297-297"];
n135 [cluster="string.Substring(int)", label="Entry string.Substring(int)", span="0-0"];
n136 [cluster="string.ToLower(System.Globalization.CultureInfo)", label="Entry string.ToLower(System.Globalization.CultureInfo)", span="0-0"];
n137 [cluster="char.ToUpper(char, System.Globalization.CultureInfo)", label="Entry char.ToUpper(char, System.Globalization.CultureInfo)", span="0-0"];
n138 [cluster="string.Concat(object, object)", label="Entry string.Concat(object, object)", span="0-0"];
n139 [cluster="string.Join(string, params string[])", label="Entry string.Join(string, params string[])", span="0-0"];
n140 [cluster="string.ToUpper(System.Globalization.CultureInfo)", label="Entry string.ToUpper(System.Globalization.CultureInfo)", span="0-0"];
n141 [cluster="string.Concat(string, string)", label="Entry string.Concat(string, string)", span="0-0"];
n143 [cluster="RestSharp.Extensions.StringExtensions.ToCamelCase(string, System.Globalization.CultureInfo)", label="return MakeInitialLowerCase(ToPascalCase(lowercaseAndUnderscoredWord, culture));", span="320-320"];
n145 [cluster="RestSharp.Extensions.StringExtensions.MakeInitialLowerCase(string)", label="Entry RestSharp.Extensions.StringExtensions.MakeInitialLowerCase(string)", span="328-328"];
n166 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="Entry RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", span="407-407"];
n144 [cluster="RestSharp.Extensions.StringExtensions.ToCamelCase(string, System.Globalization.CultureInfo)", label="Exit RestSharp.Extensions.StringExtensions.ToCamelCase(string, System.Globalization.CultureInfo)", span="318-318"];
n146 [cluster="RestSharp.Extensions.StringExtensions.MakeInitialLowerCase(string)", label="return String.Concat(word.Substring(0, 1).ToLower(), word.Substring(1));", span="330-330"];
n147 [cluster="RestSharp.Extensions.StringExtensions.MakeInitialLowerCase(string)", label="Exit RestSharp.Extensions.StringExtensions.MakeInitialLowerCase(string)", span="328-328"];
n148 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
n149 [cluster="RestSharp.Extensions.StringExtensions.IsUpperCase(string)", label="Entry RestSharp.Extensions.StringExtensions.IsUpperCase(string)", span="338-338"];
n150 [cluster="RestSharp.Extensions.StringExtensions.IsUpperCase(string)", label="return Regex.IsMatch(inputString, @''^[A-Z]+$'');", span="340-340"];
n151 [cluster="RestSharp.Extensions.StringExtensions.IsUpperCase(string)", label="Exit RestSharp.Extensions.StringExtensions.IsUpperCase(string)", span="338-338"];
n152 [cluster="RestSharp.Extensions.StringExtensions.AddUnderscores(string)", label="Entry RestSharp.Extensions.StringExtensions.AddUnderscores(string)", span="348-348"];
n153 [cluster="RestSharp.Extensions.StringExtensions.AddUnderscores(string)", label="return Regex.Replace(\r\n                Regex.Replace(\r\n                    Regex.Replace(pascalCasedWord, @''([A-Z]+)([A-Z][\\na-z])'', ''$1_$2''),\r\n                    @''([a-z\d])([A-Z])'',\r\n                    ''$1_$2''),\r\n                @''[-\s]'',\r\n                ''_'');", span="350-356"];
n154 [cluster="RestSharp.Extensions.StringExtensions.AddUnderscores(string)", label="Exit RestSharp.Extensions.StringExtensions.AddUnderscores(string)", span="348-348"];
n155 [cluster="System.Text.RegularExpressions.Regex.Replace(string, string, string)", label="Entry System.Text.RegularExpressions.Regex.Replace(string, string, string)", span="0-0"];
n156 [cluster="RestSharp.Extensions.StringExtensions.AddDashes(string)", label="Entry RestSharp.Extensions.StringExtensions.AddDashes(string)", span="364-364"];
n157 [cluster="RestSharp.Extensions.StringExtensions.AddDashes(string)", label="return Regex.Replace(\r\n                Regex.Replace(\r\n                    Regex.Replace(pascalCasedWord, @''([A-Z]+)([A-Z][\\na-z])'', ''$1-$2''),\r\n                    @''([a-z\d])([A-Z])'',\r\n                    ''$1-$2''),\r\n                @''[\s]'',\r\n                ''\\n-'');", span="366-372"];
n158 [cluster="RestSharp.Extensions.StringExtensions.AddDashes(string)", label="Exit RestSharp.Extensions.StringExtensions.AddDashes(string)", span="364-364"];
n159 [cluster="RestSharp.Extensions.StringExtensions.AddUnderscorePrefix(string)", label="Entry RestSharp.Extensions.StringExtensions.AddUnderscorePrefix(string)", span="380-380"];
n160 [cluster="RestSharp.Extensions.StringExtensions.AddUnderscorePrefix(string)", label="return string.Format(''_{0}'', pascalCasedWord);", span="382-382"];
n161 [cluster="RestSharp.Extensions.StringExtensions.AddUnderscorePrefix(string)", label="Exit RestSharp.Extensions.StringExtensions.AddUnderscorePrefix(string)", span="380-380"];
n162 [cluster="string.Format(string, object)", label="Entry string.Format(string, object)", span="0-0"];
n163 [cluster="RestSharp.Extensions.StringExtensions.AddSpaces(string)", label="Entry RestSharp.Extensions.StringExtensions.AddSpaces(string)", span="390-390"];
n164 [cluster="RestSharp.Extensions.StringExtensions.AddSpaces(string)", label="return Regex.Replace(\r\n                Regex.Replace(\r\n                    Regex.Replace(pascalCasedWord, @''([A-Z]+)([A-Z][\\na-z])'', ''$1 $2''),\r\n                    @''([a-z\d])([A-Z])'',\r\n                    ''$1 $2''),\r\n                @''[-\s]'',\r\n                '' '');", span="392-398"];
n165 [cluster="RestSharp.Extensions.StringExtensions.AddSpaces(string)", label="Exit RestSharp.Extensions.StringExtensions.AddSpaces(string)", span="390-390"];
n167 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="String.IsNullOrEmpty(name)", span="409-409"];
n168 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="yield break;", span="410-410"];
n169 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="yield return name;", span="412-412"];
n170 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="yield return name.ToCamelCase(culture);", span="415-415"];
n171 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="yield return name.ToLower(culture);", span="418-418"];
n172 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="yield return name.AddUnderscores();", span="421-421"];
n173 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="yield return name.AddUnderscores().ToLower(culture);", span="424-424"];
n174 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="yield return name.AddDashes();", span="427-427"];
n175 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="yield return name.AddDashes().ToLower(culture);", span="430-430"];
n176 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="yield return name.AddUnderscorePrefix();", span="433-433"];
n177 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="yield return name.ToCamelCase(culture).AddUnderscorePrefix();", span="436-436"];
n178 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="yield return name.AddSpaces();", span="439-439"];
n179 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="yield return name.AddSpaces().ToLower(culture);", span="442-442"];
n181 [cluster="string.ToCamelCase(System.Globalization.CultureInfo)", label="Entry string.ToCamelCase(System.Globalization.CultureInfo)", span="318-318"];
n182 [cluster="string.AddUnderscores()", label="Entry string.AddUnderscores()", span="348-348"];
n183 [cluster="string.AddDashes()", label="Entry string.AddDashes()", span="364-364"];
n184 [cluster="string.AddUnderscorePrefix()", label="Entry string.AddUnderscorePrefix()", span="380-380"];
n185 [cluster="string.AddSpaces()", label="Entry string.AddSpaces()", span="390-390"];
n180 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", label="Exit RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", span="407-407"];
m0_67 [cluster="RestSharp.Extensions.StringExtensions.RemoveSurroundingQuotes(string)", file="StringExtensions.cs", label="input.StartsWith(''\'''') && input.EndsWith(''\'''')", span="161-161"];
m0_68 [cluster="RestSharp.Extensions.StringExtensions.RemoveSurroundingQuotes(string)", file="StringExtensions.cs", label="input = input.Substring(1, input.Length - 2)", span="164-164"];
m0_69 [cluster="RestSharp.Extensions.StringExtensions.RemoveSurroundingQuotes(string)", file="StringExtensions.cs", label="return input;", span="167-167"];
m0_138 [cluster="string.Concat(object, object)", file="StringExtensions.cs", label="Entry string.Concat(object, object)", span="0-0"];
m0_81 [cluster="System.DateTime.TryParseExact(string, string[], System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTime)", file="StringExtensions.cs", label="Entry System.DateTime.TryParseExact(string, string[], System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTime)", span="0-0"];
m0_139 [cluster="string.Join(string, params string[])", file="StringExtensions.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m0_152 [cluster="RestSharp.Extensions.StringExtensions.AddUnderscores(string)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.AddUnderscores(string)", span="348-348"];
m0_153 [cluster="RestSharp.Extensions.StringExtensions.AddUnderscores(string)", file="StringExtensions.cs", label="return Regex.Replace(\r\n                Regex.Replace(\r\n                    Regex.Replace(pascalCasedWord, @''([A-Z]+)([A-Z][\\na-z])'', ''$1_$2''),\r\n                    @''([a-z\d])([A-Z])'',\r\n                    ''$1_$2''),\r\n                @''[-\s]'',\r\n                ''_'');", span="350-356"];
m0_154 [cluster="RestSharp.Extensions.StringExtensions.AddUnderscores(string)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.AddUnderscores(string)", span="348-348"];
m0_62 [cluster="System.DateTime.AddSeconds(double)", file="StringExtensions.cs", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
m0_181 [cluster="string.ToCamelCase(System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Entry string.ToCamelCase(System.Globalization.CultureInfo)", span="318-318"];
m0_110 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.ToPascalCase(string, System.Globalization.CultureInfo)", span="266-266"];
m0_111 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="return ToPascalCase(lowercaseAndUnderscoredWord, true, culture);", span="268-268"];
m0_112 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.ToPascalCase(string, System.Globalization.CultureInfo)", span="266-266"];
m0_149 [cluster="RestSharp.Extensions.StringExtensions.IsUpperCase(string)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.IsUpperCase(string)", span="338-338"];
m0_150 [cluster="RestSharp.Extensions.StringExtensions.IsUpperCase(string)", file="StringExtensions.cs", label="return Regex.IsMatch(inputString, @''^[A-Z]+$'');", span="340-340"];
m0_151 [cluster="RestSharp.Extensions.StringExtensions.IsUpperCase(string)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.IsUpperCase(string)", span="338-338"];
m0_101 [cluster="System.Convert.ToInt64(string)", file="StringExtensions.cs", label="Entry System.Convert.ToInt64(string)", span="0-0"];
m0_162 [cluster="string.Format(string, object)", file="StringExtensions.cs", label="Entry string.Format(string, object)", span="0-0"];
m0_71 [cluster="string.StartsWith(string)", file="StringExtensions.cs", label="Entry string.StartsWith(string)", span="0-0"];
m0_41 [cluster="string.Replace(string, string)", file="StringExtensions.cs", label="Entry string.Replace(string, string)", span="0-0"];
m0_61 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="StringExtensions.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0"];
m0_100 [cluster="System.Text.RegularExpressions.Regex.Matches(string)", file="StringExtensions.cs", label="Entry System.Text.RegularExpressions.Regex.Matches(string)", span="0-0"];
m0_134 [cluster="string.IsUpperCase()", file="StringExtensions.cs", label="Entry string.IsUpperCase()", span="338-338"];
m0_82 [cluster="System.DateTime.TryParse(string, System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTime)", file="StringExtensions.cs", label="Entry System.DateTime.TryParse(string, System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTime)", span="0-0"];
m0_19 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="StringExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_103 [cluster="System.DateTime.ParseExact(string, string, System.IFormatProvider)", file="StringExtensions.cs", label="Entry System.DateTime.ParseExact(string, string, System.IFormatProvider)", span="0-0"];
m0_166 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", span="407-407"];
m0_167 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="String.IsNullOrEmpty(name)", span="409-409"];
m0_168 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="yield break;", span="410-410"];
m0_169 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="yield return name;", span="412-412"];
m0_170 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="yield return name.ToCamelCase(culture);", span="415-415"];
m0_171 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="yield return name.ToLower(culture);", span="418-418"];
m0_172 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="yield return name.AddUnderscores();", span="421-421"];
m0_173 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="yield return name.AddUnderscores().ToLower(culture);", span="424-424"];
m0_174 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="yield return name.AddDashes();", span="427-427"];
m0_175 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="yield return name.AddDashes().ToLower(culture);", span="430-430"];
m0_176 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="yield return name.AddUnderscorePrefix();", span="433-433"];
m0_177 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="yield return name.ToCamelCase(culture).AddUnderscorePrefix();", span="436-436"];
m0_178 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="yield return name.AddSpaces();", span="439-439"];
m0_179 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="yield return name.AddSpaces().ToLower(culture);", span="442-442"];
m0_180 [cluster="RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.GetNameVariants(string, System.Globalization.CultureInfo)", span="407-407"];
m0_98 [cluster="System.Text.RegularExpressions.Regex.Regex(string)", file="StringExtensions.cs", label="Entry System.Text.RegularExpressions.Regex.Regex(string)", span="0-0"];
m0_142 [cluster="RestSharp.Extensions.StringExtensions.ToCamelCase(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.ToCamelCase(string, System.Globalization.CultureInfo)", span="318-318"];
m0_143 [cluster="RestSharp.Extensions.StringExtensions.ToCamelCase(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="return MakeInitialLowerCase(ToPascalCase(lowercaseAndUnderscoredWord, culture));", span="320-320"];
m0_144 [cluster="RestSharp.Extensions.StringExtensions.ToCamelCase(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.ToCamelCase(string, System.Globalization.CultureInfo)", span="318-318"];
m0_22 [cluster="System.Math.Min(int, int)", file="StringExtensions.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m0_24 [cluster="System.Text.StringBuilder.Append(string)", file="StringExtensions.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m0_42 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", span="119-119"];
m0_43 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="input = input.Replace(''\n'', '''')", span="121-121"];
m0_53 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="return ExtractDate(input, @''\\?/Date\((-?\d+)(-|\+)?([0-9]{4})?\)\\?/'', culture);", span="141-141"];
m0_56 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="return ExtractDate(input, @''newDate\((-?\d+)*\)'', culture);", span="148-148"];
m0_57 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="return ParseFormattedDate(input, culture);", span="151-151"];
m0_44 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="input = input.Replace(''\r'', '''')", span="122-122"];
m0_45 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="input = input.RemoveSurroundingQuotes()", span="123-123"];
m0_46 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="long? unix = null", span="125-125"];
m0_47 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="unix = Int64.Parse(input)", span="129-129"];
m0_52 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="input.Contains(''/Date('')", span="139-139"];
m0_54 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="input.Contains(''new Date('')", span="144-144"];
m0_55 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="input = input.Replace('' '', '''')", span="146-146"];
m0_48 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label=Exception, span="131-131"];
m0_49 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="unix.HasValue", span="133-133"];
m0_51 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="return epoch.AddSeconds(unix.Value);", span="136-136"];
m0_50 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="var epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)", span="135-135"];
m0_58 [cluster="RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.ParseJsonDate(string, System.Globalization.CultureInfo)", span="119-119"];
m0_113 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", span="278-278"];
m0_114 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="String.IsNullOrEmpty(text)", span="280-280"];
m0_115 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="return text;", span="281-281"];
m0_116 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="text = text.Replace(''_'', '' '')", span="283-283"];
m0_117 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="string joinString = removeUnderscores ? String.Empty : ''_''", span="285-285"];
m0_126 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="restOfWord = restOfWord.ToLower(culture)", span="298-298"];
m0_127 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="char firstChar = char.ToUpper(word[0], culture)", span="300-300"];
m0_131 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="return String.Concat(words[0].Substring(0, 1).ToUpper(culture), words[0].Substring(1));", span="309-309"];
m0_118 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="string[] words = text.Split(' ')", span="286-286"];
m0_130 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="return String.Join(joinString, words);", span="306-306"];
m0_119 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="words.Length > 1 || words[0].IsUpperCase()", span="288-288"];
m0_121 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="i < words.Length", span="290-290"];
m0_122 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="words[i].Length > 0", span="292-292"];
m0_123 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="string word = words[i]", span="294-294"];
m0_128 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="words[i] = String.Concat(firstChar, restOfWord)", span="302-302"];
m0_120 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="int i = 0", span="290-290"];
m0_129 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="i++", span="290-290"];
m0_124 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="string restOfWord = word.Substring(1)", span="295-295"];
m0_125 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="restOfWord.IsUpperCase()", span="297-297"];
m0_132 [cluster="RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.ToPascalCase(string, bool, System.Globalization.CultureInfo)", span="278-278"];
m0_38 [cluster="RestSharp.Extensions.StringExtensions.RemoveUnderscoresAndDashes(string)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.RemoveUnderscoresAndDashes(string)", span="108-108"];
m0_39 [cluster="RestSharp.Extensions.StringExtensions.RemoveUnderscoresAndDashes(string)", file="StringExtensions.cs", label="return input.Replace(''_'', '''').Replace(''-'', '''');", span="110-110"];
m0_40 [cluster="RestSharp.Extensions.StringExtensions.RemoveUnderscoresAndDashes(string)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.RemoveUnderscoresAndDashes(string)", span="108-108"];
m0_37 [cluster="string.IsNullOrEmpty(string)", file="StringExtensions.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m0_59 [cluster="string.RemoveSurroundingQuotes()", file="StringExtensions.cs", label="Entry string.RemoveSurroundingQuotes()", span="159-159"];
m0_155 [cluster="System.Text.RegularExpressions.Regex.Replace(string, string, string)", file="StringExtensions.cs", label="Entry System.Text.RegularExpressions.Regex.Replace(string, string, string)", span="0-0"];
m0_106 [cluster="RestSharp.Extensions.StringExtensions.Matches(string, string)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.Matches(string, string)", span="255-255"];
m0_107 [cluster="RestSharp.Extensions.StringExtensions.Matches(string, string)", file="StringExtensions.cs", label="return Regex.IsMatch(input, pattern);", span="257-257"];
m0_108 [cluster="RestSharp.Extensions.StringExtensions.Matches(string, string)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.Matches(string, string)", span="255-255"];
m0_148 [cluster="string.ToLower()", file="StringExtensions.cs", label="Entry string.ToLower()", span="0-0"];
m0_104 [cluster="System.DateTime.Add(System.TimeSpan)", file="StringExtensions.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m0_26 [cluster="RestSharp.Extensions.StringExtensions.HtmlDecode(string)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.HtmlDecode(string)", span="75-75"];
m0_27 [cluster="RestSharp.Extensions.StringExtensions.HtmlDecode(string)", file="StringExtensions.cs", label="return HttpUtility.HtmlDecode(input);", span="77-77"];
m0_28 [cluster="RestSharp.Extensions.StringExtensions.HtmlDecode(string)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.HtmlDecode(string)", span="75-75"];
m0_105 [cluster="System.DateTime.Subtract(System.TimeSpan)", file="StringExtensions.cs", label="Entry System.DateTime.Subtract(System.TimeSpan)", span="0-0"];
m0_65 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", span="170-170"];
m0_73 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="var formats = new[]\r\n            {\r\n                ''u'',\r\n                ''s'',\r\n                ''yyyy'-'MM'-'dd'T'HH':'\\nmm':'ss'Z''',\r\n                ''yyyy-MM-ddTHH:mm:ssZ'',\r\n                ''yyyy-MM-dd HH:mm:ssZ'',\r\n                ''yyyy-MM-ddTHH:\\nmm:ss'',\r\n                ''yyyy-MM-ddTHH:mm:sszzzzzz'',\r\n                ''M/d/yyyy h:mm:ss tt'' // default format for invariant \\nculture\r\n            }", span="172-182"];
m0_74 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="DateTime date", span="200-200"];
m0_75 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="DateTime.TryParseExact(input, formats, culture, DateTimeStyles.None, out date)", span="202-202"];
m0_77 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="DateTime.TryParse(input, culture, DateTimeStyles.None, out date)", span="207-207"];
m0_76 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="return date;", span="204-204"];
m0_78 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="return date;", span="209-209"];
m0_79 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="return default(DateTime);", span="213-213"];
m0_80 [cluster="RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.ParseFormattedDate(string, System.Globalization.CultureInfo)", span="170-170"];
m0_25 [cluster="System.Text.StringBuilder.ToString()", file="StringExtensions.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m0_184 [cluster="string.AddUnderscorePrefix()", file="StringExtensions.cs", label="Entry string.AddUnderscorePrefix()", span="380-380"];
m0_183 [cluster="string.AddDashes()", file="StringExtensions.cs", label="Entry string.AddDashes()", span="364-364"];
m0_135 [cluster="string.Substring(int)", file="StringExtensions.cs", label="Entry string.Substring(int)", span="0-0"];
m0_159 [cluster="RestSharp.Extensions.StringExtensions.AddUnderscorePrefix(string)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.AddUnderscorePrefix(string)", span="380-380"];
m0_160 [cluster="RestSharp.Extensions.StringExtensions.AddUnderscorePrefix(string)", file="StringExtensions.cs", label="return string.Format(''_{0}'', pascalCasedWord);", span="382-382"];
m0_161 [cluster="RestSharp.Extensions.StringExtensions.AddUnderscorePrefix(string)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.AddUnderscorePrefix(string)", span="380-380"];
m0_63 [cluster="string.Contains(string)", file="StringExtensions.cs", label="Entry string.Contains(string)", span="0-0"];
m0_23 [cluster="string.Substring(int, int)", file="StringExtensions.cs", label="Entry string.Substring(int, int)", span="0-0"];
m0_156 [cluster="RestSharp.Extensions.StringExtensions.AddDashes(string)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.AddDashes(string)", span="364-364"];
m0_157 [cluster="RestSharp.Extensions.StringExtensions.AddDashes(string)", file="StringExtensions.cs", label="return Regex.Replace(\r\n                Regex.Replace(\r\n                    Regex.Replace(pascalCasedWord, @''([A-Z]+)([A-Z][\\na-z])'', ''$1-$2''),\r\n                    @''([a-z\d])([A-Z])'',\r\n                    ''$1-$2''),\r\n                @''[\s]'',\r\n                ''\\n-'');", span="366-372"];
m0_158 [cluster="RestSharp.Extensions.StringExtensions.AddDashes(string)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.AddDashes(string)", span="364-364"];
m0_185 [cluster="string.AddSpaces()", file="StringExtensions.cs", label="Entry string.AddSpaces()", span="390-390"];
m0_21 [cluster="System.Text.StringBuilder.StringBuilder(int)", file="StringExtensions.cs", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
m0_99 [cluster="System.Text.RegularExpressions.Regex.IsMatch(string)", file="StringExtensions.cs", label="Entry System.Text.RegularExpressions.Regex.IsMatch(string)", span="0-0"];
m0_72 [cluster="string.EndsWith(string)", file="StringExtensions.cs", label="Entry string.EndsWith(string)", span="0-0"];
m0_133 [cluster="string.Split(params char[])", file="StringExtensions.cs", label="Entry string.Split(params char[])", span="0-0"];
m0_140 [cluster="string.ToUpper(System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Entry string.ToUpper(System.Globalization.CultureInfo)", span="0-0"];
m0_64 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", span="216-216"];
m0_83 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="DateTime dt = DateTime.MinValue", span="218-218"];
m0_84 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="var regex = new Regex(pattern)", span="219-219"];
m0_85 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="regex.IsMatch(input)", span="221-221"];
m0_86 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="var matches = regex.Matches(input)", span="223-223"];
m0_92 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="var mod = DateTime.ParseExact(match.Groups[3].Value, ''HHmm'', culture)", span="233-233"];
m0_96 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="return dt;", span="246-246"];
m0_87 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="var match = matches[0]", span="224-224"];
m0_88 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="var ms = Convert.ToInt64(match.Groups[1].Value)", span="225-225"];
m0_91 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="match.Groups.Count > 2 && !String.IsNullOrEmpty(match.Groups[3].Value)", span="231-231"];
m0_93 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="match.Groups[2].Value == ''+''", span="235-235"];
m0_89 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="var epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)", span="226-226"];
m0_90 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="dt = epoch.AddMilliseconds(ms)", span="228-228"];
m0_94 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="dt = dt.Add(mod.TimeOfDay)", span="237-237"];
m0_95 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="dt = dt.Subtract(mod.TimeOfDay)", span="241-241"];
m0_97 [cluster="RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.ExtractDate(string, string, System.Globalization.CultureInfo)", span="216-216"];
m0_145 [cluster="RestSharp.Extensions.StringExtensions.MakeInitialLowerCase(string)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.MakeInitialLowerCase(string)", span="328-328"];
m0_146 [cluster="RestSharp.Extensions.StringExtensions.MakeInitialLowerCase(string)", file="StringExtensions.cs", label="return String.Concat(word.Substring(0, 1).ToLower(), word.Substring(1));", span="330-330"];
m0_147 [cluster="RestSharp.Extensions.StringExtensions.MakeInitialLowerCase(string)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.MakeInitialLowerCase(string)", span="328-328"];
m0_182 [cluster="string.AddUnderscores()", file="StringExtensions.cs", label="Entry string.AddUnderscores()", span="348-348"];
m0_0 [cluster="RestSharp.Extensions.StringExtensions.UrlDecode(string)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.UrlDecode(string)", span="40-40"];
m0_1 [cluster="RestSharp.Extensions.StringExtensions.UrlDecode(string)", file="StringExtensions.cs", label="return HttpUtility.UrlDecode(input);", span="42-42"];
m0_2 [cluster="RestSharp.Extensions.StringExtensions.UrlDecode(string)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.UrlDecode(string)", span="40-40"];
m0_4 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.UrlEncode(string)", span="50-50"];
m0_5 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", file="StringExtensions.cs", label="int maxLength = 32766", span="52-52"];
m0_6 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", file="StringExtensions.cs", label="input == null", span="53-53"];
m0_8 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", file="StringExtensions.cs", label="input.Length <= maxLength", span="56-56"];
m0_9 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", color=green, community=0, file="StringExtensions.cs", label="return Uri.EscapeUriString(input);", prediction=2, span="57-57"];
m0_10 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", file="StringExtensions.cs", label="StringBuilder sb = new StringBuilder(input.Length * 2)", span="59-59"];
m0_12 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", file="StringExtensions.cs", label="index < input.Length", span="62-62"];
m0_13 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", file="StringExtensions.cs", label="int length = Math.Min(input.Length - index, maxLength)", span="64-64"];
m0_14 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", file="StringExtensions.cs", label="string subString = input.Substring(index, length)", span="65-65"];
m0_7 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", file="StringExtensions.cs", label="throw new ArgumentNullException(''input'');", span="54-54"];
m0_11 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", file="StringExtensions.cs", label="int index = 0", span="60-60"];
m0_15 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", color=green, community=0, file="StringExtensions.cs", label="sb.Append(Uri.EscapeUriString(subString))", prediction=3, span="67-67"];
m0_17 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", file="StringExtensions.cs", label="return sb.ToString();", span="71-71"];
m0_16 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", file="StringExtensions.cs", label="index += subString.Length", span="68-68"];
m0_18 [cluster="RestSharp.Extensions.StringExtensions.UrlEncode(string)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.UrlEncode(string)", span="50-50"];
m0_60 [cluster="long.Parse(string)", file="StringExtensions.cs", label="Entry long.Parse(string)", span="0-0"];
m0_163 [cluster="RestSharp.Extensions.StringExtensions.AddSpaces(string)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.AddSpaces(string)", span="390-390"];
m0_164 [cluster="RestSharp.Extensions.StringExtensions.AddSpaces(string)", file="StringExtensions.cs", label="return Regex.Replace(\r\n                Regex.Replace(\r\n                    Regex.Replace(pascalCasedWord, @''([A-Z]+)([A-Z][\\na-z])'', ''$1 $2''),\r\n                    @''([a-z\d])([A-Z])'',\r\n                    ''$1 $2''),\r\n                @''[-\s]'',\r\n                '' '');", span="392-398"];
m0_165 [cluster="RestSharp.Extensions.StringExtensions.AddSpaces(string)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.AddSpaces(string)", span="390-390"];
m0_34 [cluster="RestSharp.Extensions.StringExtensions.HasValue(string)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.HasValue(string)", span="98-98"];
m0_35 [cluster="RestSharp.Extensions.StringExtensions.HasValue(string)", file="StringExtensions.cs", label="return !string.IsNullOrEmpty(input);", span="100-100"];
m0_36 [cluster="RestSharp.Extensions.StringExtensions.HasValue(string)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.HasValue(string)", span="98-98"];
m0_136 [cluster="string.ToLower(System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Entry string.ToLower(System.Globalization.CultureInfo)", span="0-0"];
m0_109 [cluster="System.Text.RegularExpressions.Regex.IsMatch(string, string)", file="StringExtensions.cs", label="Entry System.Text.RegularExpressions.Regex.IsMatch(string, string)", span="0-0"];
m0_137 [cluster="char.ToUpper(char, System.Globalization.CultureInfo)", file="StringExtensions.cs", label="Entry char.ToUpper(char, System.Globalization.CultureInfo)", span="0-0"];
m0_30 [cluster="RestSharp.Extensions.StringExtensions.HtmlEncode(string)", file="StringExtensions.cs", label="Entry RestSharp.Extensions.StringExtensions.HtmlEncode(string)", span="80-80"];
m0_31 [cluster="RestSharp.Extensions.StringExtensions.HtmlEncode(string)", file="StringExtensions.cs", label="return HttpUtility.HtmlEncode(input);", span="82-82"];
m0_32 [cluster="RestSharp.Extensions.StringExtensions.HtmlEncode(string)", file="StringExtensions.cs", label="Exit RestSharp.Extensions.StringExtensions.HtmlEncode(string)", span="80-80"];
m0_141 [cluster="string.Concat(string, string)", file="StringExtensions.cs", label="Entry string.Concat(string, string)", span="0-0"];
m0_102 [cluster="System.DateTime.AddMilliseconds(double)", file="StringExtensions.cs", label="Entry System.DateTime.AddMilliseconds(double)", span="0-0"];
m0_20 [cluster="System.Uri.EscapeUriString(string)", file="StringExtensions.cs", label="Entry System.Uri.EscapeUriString(string)", span="0-0"];
n3;
n29;
n33;
m0_29;
m0_3;
m0_33;
n4 -> n6  [color=darkseagreen4, key=1, label=string, style=dashed];
n4 -> n8  [color=darkseagreen4, key=1, label=string, style=dashed];
n4 -> n12  [color=darkseagreen4, key=1, label=string, style=dashed];
n4 -> d9  [color=green, key=1, label=string, style=dashed];
n5 -> n8  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
n10 -> n17  [color=darkseagreen4, key=1, label=sb, style=dashed];
n10 -> d15  [color=green, key=1, label=sb, style=dashed];
n42 -> n53  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n42 -> n56  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n42 -> n57  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n64 -> n85  [color=darkseagreen4, key=1, label=string, style=dashed];
n65 -> n75  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n65 -> n77  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n45 -> n52  [color=darkseagreen4, key=1, label=string, style=dashed];
n45 -> n53  [color=darkseagreen4, key=1, label=string, style=dashed];
n45 -> n54  [color=darkseagreen4, key=1, label=string, style=dashed];
n45 -> n57  [color=darkseagreen4, key=1, label=string, style=dashed];
n47 -> n51  [color=darkseagreen4, key=1, label=unix, style=dashed];
n55 -> n57  [color=darkseagreen4, key=1, label=string, style=dashed];
n83 -> n96  [color=darkseagreen4, key=1, label=dt, style=dashed];
n87 -> n91  [color=darkseagreen4, key=1, label=match, style=dashed];
n87 -> n93  [color=darkseagreen4, key=1, label=match, style=dashed];
n90 -> n96  [color=darkseagreen4, key=1, label=dt, style=dashed];
n73 -> n75  [color=darkseagreen4, key=1, label=formats, style=dashed];
n66 -> n69  [color=darkseagreen4, key=1, label=string, style=dashed];
n113 -> n115  [color=darkseagreen4, key=1, label=string, style=dashed];
n113 -> n131  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
n117 -> n130  [color=darkseagreen4, key=1, label=joinString, style=dashed];
n118 -> n121  [color=darkseagreen4, key=1, label=words, style=dashed];
n118 -> n122  [color=darkseagreen4, key=1, label=words, style=dashed];
n118 -> n130  [color=darkseagreen4, key=1, label=words, style=dashed];
n118 -> n131  [color=darkseagreen4, key=1, label=words, style=dashed];
n120 -> n122  [color=darkseagreen4, key=1, label=i, style=dashed];
n120 -> n129  [color=darkseagreen4, key=1, label=i, style=dashed];
n129 -> n129  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_42 -> m0_53  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_42 -> m0_56  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_42 -> m0_57  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_45 -> m0_52  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_45 -> m0_53  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_45 -> m0_54  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_45 -> m0_57  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_47 -> m0_51  [color=darkseagreen4, key=1, label=unix, style=dashed];
m0_55 -> m0_57  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_113 -> m0_115  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_113 -> m0_131  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_117 -> m0_130  [color=darkseagreen4, key=1, label=joinString, style=dashed];
m0_118 -> m0_121  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_118 -> m0_122  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_118 -> m0_130  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_118 -> m0_131  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_120 -> m0_122  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_120 -> m0_129  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_129 -> m0_129  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_65 -> m0_75  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_65 -> m0_77  [color=darkseagreen4, key=1, label="System.Globalization.CultureInfo", style=dashed];
m0_73 -> m0_75  [color=darkseagreen4, key=1, label=formats, style=dashed];
m0_64 -> m0_85  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_83 -> m0_96  [color=darkseagreen4, key=1, label=dt, style=dashed];
m0_87 -> m0_91  [color=darkseagreen4, key=1, label=match, style=dashed];
m0_87 -> m0_93  [color=darkseagreen4, key=1, label=match, style=dashed];
m0_90 -> m0_96  [color=darkseagreen4, key=1, label=dt, style=dashed];
m0_4 -> m0_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_4 -> m0_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_4 -> m0_9  [color=green, key=1, label=string, style=dashed];
m0_4 -> m0_12  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_5 -> m0_8  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
m0_10 -> m0_15  [color=green, key=1, label=sb, style=dashed];
m0_10 -> m0_17  [color=darkseagreen4, key=1, label=sb, style=dashed];
}
