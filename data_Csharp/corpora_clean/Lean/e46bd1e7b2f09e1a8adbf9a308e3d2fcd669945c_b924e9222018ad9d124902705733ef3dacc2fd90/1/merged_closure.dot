digraph  {
m3_34 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Order(''CASH'', +100)", span="89-89"];
m3_18 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Order(''CASH'', -50)", span="57-57"];
m3_28 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Order(''CASH'', -100)", span="77-77"];
m3_29 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Time == new DateTime(2013, 10, 1)", span="79-79"];
m3_31 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Time == new DateTime(2013, 11, 1)", span="83-83"];
m3_27 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Time == new DateTime(2013, 9, 1)", span="75-75"];
m3_30 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Order(''CASH'', -50)", span="81-81"];
m3_32 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Order(''CASH'', +50)", span="85-85"];
m3_33 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Time == new DateTime(2013, 12, 1)", span="87-87"];
m3_66 [cluster="string.Split(params char[])", file="ConstantAlphaModel.cs", label="Entry string.Split(params char[])", span="0-0"];
m3_26 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Order(''CASH'', -50)", span="73-73"];
m3_9 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="ConstantAlphaModel.cs", label="_insightsTimeBySymbol = new Dictionary<Symbol, DateTime>()", span="66-66"];
m3_25 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Time == new DateTime(2013, 8, 1)", span="71-71"];
m3_11 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Time == new DateTime(2013, 1, 1)", span="43-43"];
m3_53 [cluster="QuantConnect.CashType.CashType()", file="ConstantAlphaModel.cs", label="Entry QuantConnect.CashType.CashType()", span="122-122"];
m3_54 [cluster="QuantConnect.CashType.CashType()", file="ConstantAlphaModel.cs", label="this.Symbol = ''CASH''", span="124-124"];
m3_55 [cluster="QuantConnect.CashType.CashType()", file="ConstantAlphaModel.cs", label="Exit QuantConnect.CashType.CashType()", span="122-122"];
m3_40 [cluster="System.DateTime.DateTime(int, int, int)", file="ConstantAlphaModel.cs", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
m3_56 [cluster="QuantConnect.CashType.GetSource(QuantConnect.Data.SubscriptionDataConfig, System.DateTime, QuantConnect.DataFeedEndpoint)", file="ConstantAlphaModel.cs", label="Entry QuantConnect.CashType.GetSource(QuantConnect.Data.SubscriptionDataConfig, System.DateTime, QuantConnect.DataFeedEndpoint)", span="127-127"];
m3_57 [cluster="QuantConnect.CashType.GetSource(QuantConnect.Data.SubscriptionDataConfig, System.DateTime, QuantConnect.DataFeedEndpoint)", file="ConstantAlphaModel.cs", label="return ''https://www.dropbox.com/s/oiliumoyqqj1ovl/2013-cash.csv?dl=1'';", span="129-129"];
m3_58 [cluster="QuantConnect.CashType.GetSource(QuantConnect.Data.SubscriptionDataConfig, System.DateTime, QuantConnect.DataFeedEndpoint)", file="ConstantAlphaModel.cs", label="Exit QuantConnect.CashType.GetSource(QuantConnect.Data.SubscriptionDataConfig, System.DateTime, QuantConnect.DataFeedEndpoint)", span="127-127"];
m3_6 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="ConstantAlphaModel.cs", label="_magnitude = magnitude", span="62-62"];
m3_10 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="ConstantAlphaModel.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", span="55-55"];
m3_12 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ConstantAlphaModel.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m3_13 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="ConstantAlphaModel.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", span="75-75"];
m3_14 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", color=green, community=0, file="ConstantAlphaModel.cs", label=_securities, prediction=0, span="77-77"];
m3_15 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", color=green, community=0, file="ConstantAlphaModel.cs", label="ShouldEmitInsight(algorithm.UtcTime, security.Symbol)", prediction=0, span="79-79"];
m3_16 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", color=green, community=0, file="ConstantAlphaModel.cs", label="yield return new Insight(security.Symbol, _period, _type, _direction, _magnitude, _confidence);", prediction=0, span="81-81"];
m3_17 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="ConstantAlphaModel.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", span="75-75"];
m3_19 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="ConstantAlphaModel.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", span="118-118"];
m3_20 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="ConstantAlphaModel.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="91-91"];
m3_21 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="ConstantAlphaModel.cs", label="NotifiedSecurityChanges.UpdateCollection(_securities, changes)", span="93-93"];
m3_22 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="ConstantAlphaModel.cs", label="changes.RemovedSecurities", span="96-96"];
m3_23 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="ConstantAlphaModel.cs", label="_insightsTimeBySymbol.Remove(removed.Symbol)", span="98-98"];
m3_24 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="ConstantAlphaModel.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="91-91"];
m3_35 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", span=""];
m3_36 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Order(''CASH'', -50)", span="93-93"];
m3_37 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label=Exception, span="96-96"];
m3_38 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Debug(''Err: '' + err.Message)", span="98-98"];
m3_39 [cluster="QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", file="ConstantAlphaModel.cs", label="Exit QuantConnect.TestCashStrategy.OnData(QuantConnect.CashType)", span="38-38"];
m3_42 [cluster="QuantConnect.Algorithm.QCAlgorithm.Debug(string)", file="ConstantAlphaModel.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Debug(string)", span="710-710"];
m3_59 [cluster="QuantConnect.CashType.Reader(QuantConnect.Data.SubscriptionDataConfig, string, System.DateTime, QuantConnect.DataFeedEndpoint)", file="ConstantAlphaModel.cs", label="Entry QuantConnect.CashType.Reader(QuantConnect.Data.SubscriptionDataConfig, string, System.DateTime, QuantConnect.DataFeedEndpoint)", span="132-132"];
m3_60 [cluster="QuantConnect.CashType.Reader(QuantConnect.Data.SubscriptionDataConfig, string, System.DateTime, QuantConnect.DataFeedEndpoint)", file="ConstantAlphaModel.cs", label="CashType cash = new CashType()", span="135-135"];
m3_61 [cluster="QuantConnect.CashType.Reader(QuantConnect.Data.SubscriptionDataConfig, string, System.DateTime, QuantConnect.DataFeedEndpoint)", file="ConstantAlphaModel.cs", label="string[] data = line.Split(',')", span="139-139"];
m3_62 [cluster="QuantConnect.CashType.Reader(QuantConnect.Data.SubscriptionDataConfig, string, System.DateTime, QuantConnect.DataFeedEndpoint)", file="ConstantAlphaModel.cs", label="cash.Time = DateTime.ParseExact(data[0], ''yyyy-MM-dd'', CultureInfo.InvariantCulture)", span="140-140"];
m3_63 [cluster="QuantConnect.CashType.Reader(QuantConnect.Data.SubscriptionDataConfig, string, System.DateTime, QuantConnect.DataFeedEndpoint)", file="ConstantAlphaModel.cs", label="cash.Value = Convert.ToDecimal(data[1])", span="141-141"];
m3_64 [cluster="QuantConnect.CashType.Reader(QuantConnect.Data.SubscriptionDataConfig, string, System.DateTime, QuantConnect.DataFeedEndpoint)", file="ConstantAlphaModel.cs", label="return cash;", span="145-145"];
m3_65 [cluster="QuantConnect.CashType.Reader(QuantConnect.Data.SubscriptionDataConfig, string, System.DateTime, QuantConnect.DataFeedEndpoint)", file="ConstantAlphaModel.cs", label="Exit QuantConnect.CashType.Reader(QuantConnect.Data.SubscriptionDataConfig, string, System.DateTime, QuantConnect.DataFeedEndpoint)", span="132-132"];
m3_67 [cluster="System.DateTime.ParseExact(string, string, System.IFormatProvider)", file="ConstantAlphaModel.cs", label="Entry System.DateTime.ParseExact(string, string, System.IFormatProvider)", span="0-0"];
m3_7 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="ConstantAlphaModel.cs", label="_confidence = confidence", span="63-63"];
m3_41 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", file="ConstantAlphaModel.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", span="194-194"];
m3_8 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="ConstantAlphaModel.cs", label="_securities = new HashSet<Security>()", span="65-65"];
m3_52 [cluster="QuantConnect.Algorithm.QCAlgorithm.Plot(string, int)", file="ConstantAlphaModel.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Plot(string, int)", span="123-123"];
m3_51 [cluster="QuantConnect.Algorithm.QCAlgorithm.Plot(string, decimal)", file="ConstantAlphaModel.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Plot(string, decimal)", span="73-73"];
m3_68 [cluster="System.Convert.ToDecimal(string)", file="ConstantAlphaModel.cs", label="Entry System.Convert.ToDecimal(string)", span="0-0"];
m3_2 [cluster="QuantConnect.TestCashStrategy.Initialize()", file="ConstantAlphaModel.cs", label="SetEndDate(2013, 12, 31)", span="33-33"];
m3_3 [cluster="QuantConnect.TestCashStrategy.Initialize()", file="ConstantAlphaModel.cs", label="SetCash(100000)", span="34-34"];
m3_4 [cluster="QuantConnect.TestCashStrategy.Initialize()", file="ConstantAlphaModel.cs", label="AddData<CashType>(''CASH'')", span="35-35"];
m3_5 [cluster="QuantConnect.TestCashStrategy.Initialize()", file="ConstantAlphaModel.cs", label="Exit QuantConnect.TestCashStrategy.Initialize()", span="30-30"];
m3_0 [cluster="QuantConnect.TestCashStrategy.Initialize()", file="ConstantAlphaModel.cs", label="Entry QuantConnect.TestCashStrategy.Initialize()", span="30-30"];
m3_1 [cluster="QuantConnect.TestCashStrategy.Initialize()", file="ConstantAlphaModel.cs", label="SetStartDate(2013, 1, 1)", span="32-32"];
m3_43 [cluster="QuantConnect.TestCashStrategy.OnEndOfDay()", file="ConstantAlphaModel.cs", label="Entry QuantConnect.TestCashStrategy.OnEndOfDay()", span="103-103"];
m3_44 [cluster="QuantConnect.TestCashStrategy.OnEndOfDay()", file="ConstantAlphaModel.cs", label="Plot(''Cash'', Portfolio.Cash)", span="107-107"];
m3_45 [cluster="QuantConnect.TestCashStrategy.OnEndOfDay()", file="ConstantAlphaModel.cs", label="Plot(''PortfolioValue'', Portfolio.TotalPortfolioValue)", span="108-108"];
m3_46 [cluster="QuantConnect.TestCashStrategy.OnEndOfDay()", file="ConstantAlphaModel.cs", label="Plot(''HoldingValue'', Portfolio[''CASH''].HoldingsValue)", span="109-109"];
m3_47 [cluster="QuantConnect.TestCashStrategy.OnEndOfDay()", file="ConstantAlphaModel.cs", label="Plot(''HoldingQuantity'', Portfolio[''CASH''].Quantity)", span="110-110"];
m3_48 [cluster="QuantConnect.TestCashStrategy.OnEndOfDay()", file="ConstantAlphaModel.cs", label=Exception, span="112-112"];
m3_49 [cluster="QuantConnect.TestCashStrategy.OnEndOfDay()", file="ConstantAlphaModel.cs", label="Debug(''Err: '' + err.Message)", span="114-114"];
m3_50 [cluster="QuantConnect.TestCashStrategy.OnEndOfDay()", file="ConstantAlphaModel.cs", label="Exit QuantConnect.TestCashStrategy.OnEndOfDay()", span="103-103"];
m3_69 [file="ConstantAlphaModel.cs", label="QuantConnect.TestCashStrategy", span=""];
m3_70 [file="ConstantAlphaModel.cs", label="QuantConnect.CashType", span=""];
m4_0 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.CreateCSharpAlphaModel()", file="ConstantAlphaModelTests.cs", label="Entry QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.CreateCSharpAlphaModel()", span="33-33"];
m4_1 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.CreateCSharpAlphaModel()", file="ConstantAlphaModelTests.cs", label="Exit QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.CreateCSharpAlphaModel()", span="33-33"];
m4_13 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.ExpectedInsights()", file="ConstantAlphaModelTests.cs", label="Entry QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.ExpectedInsights()", span="45-45"];
m4_14 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.ExpectedInsights()", file="ConstantAlphaModelTests.cs", label="return Enumerable.Range(0, 360).Select(x => new Insight(Symbols.SPY, _period, _type, _direction, _magnitude, _confidence));", span="47-47"];
m4_15 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.ExpectedInsights()", file="ConstantAlphaModelTests.cs", label="Exit QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.ExpectedInsights()", span="45-45"];
m4_21 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="ConstantAlphaModelTests.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", span="118-118"];
m4_2 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.CreatePythonAlphaModel()", file="ConstantAlphaModelTests.cs", label="Entry QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.CreatePythonAlphaModel()", span="35-35"];
m4_3 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.CreatePythonAlphaModel()", file="ConstantAlphaModelTests.cs", label="Py.GIL()", span="37-37"];
m4_4 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.CreatePythonAlphaModel()", file="ConstantAlphaModelTests.cs", label="dynamic model = Py.Import(''ConstantAlphaModel'').GetAttr(''ConstantAlphaModel'')", span="39-39"];
m4_5 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.CreatePythonAlphaModel()", file="ConstantAlphaModelTests.cs", label="var instance = model(_type, _direction, _period, _magnitude, _confidence)", span="40-40"];
m4_6 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.CreatePythonAlphaModel()", file="ConstantAlphaModelTests.cs", label="return new AlphaModelPythonWrapper(instance);", span="41-41"];
m4_7 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.CreatePythonAlphaModel()", file="ConstantAlphaModelTests.cs", label="Exit QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests.CreatePythonAlphaModel()", span="35-35"];
m4_12 [cluster="QuantConnect.Algorithm.Framework.Alphas.AlphaModelPythonWrapper.AlphaModelPythonWrapper(PyObject)", file="ConstantAlphaModelTests.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.AlphaModelPythonWrapper.AlphaModelPythonWrapper(PyObject)", span="34-34"];
m4_9 [cluster="Unk.Import", file="ConstantAlphaModelTests.cs", label="Entry Unk.Import", span=""];
m4_16 [cluster="System.Linq.Enumerable.Range(int, int)", file="ConstantAlphaModelTests.cs", label="Entry System.Linq.Enumerable.Range(int, int)", span="0-0"];
m4_11 [cluster="Unk.model", file="ConstantAlphaModelTests.cs", label="Entry Unk.model", span=""];
m4_17 [cluster="Unk.Select", file="ConstantAlphaModelTests.cs", label="Entry Unk.Select", span=""];
m4_8 [cluster="Unk.GIL", file="ConstantAlphaModelTests.cs", label="Entry Unk.GIL", span=""];
m4_10 [cluster="Unk.GetAttr", file="ConstantAlphaModelTests.cs", label="Entry Unk.GetAttr", span=""];
m4_18 [cluster="lambda expression", file="ConstantAlphaModelTests.cs", label="Entry lambda expression", span="47-47"];
m4_19 [cluster="lambda expression", file="ConstantAlphaModelTests.cs", label="new Insight(Symbols.SPY, _period, _type, _direction, _magnitude, _confidence)", span="47-47"];
m4_20 [cluster="lambda expression", file="ConstantAlphaModelTests.cs", label="Exit lambda expression", span="47-47"];
m4_22 [file="ConstantAlphaModelTests.cs", label="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests", span=""];
m6_8 [cluster="System.Math.Abs(decimal)", file="EmaCrossAlphaModel.cs", label="Entry System.Math.Abs(decimal)", span="0-0"];
m6_9 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.CreateLongOrder(decimal)", file="EmaCrossAlphaModel.cs", label="Entry QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.CreateLongOrder(decimal)", span="38-38"];
m6_10 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.CreateLongOrder(decimal)", file="EmaCrossAlphaModel.cs", label="return new StopLimitOrder(Symbol, Math.Abs(quantity), _highLimit, _lowLimit, DateTime.Now);", span="40-40"];
m6_11 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.CreateLongOrder(decimal)", file="EmaCrossAlphaModel.cs", label="Exit QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.CreateLongOrder(decimal)", span="38-38"];
m6_7 [cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(QuantConnect.Symbol, decimal, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="EmaCrossAlphaModel.cs", label="Entry QuantConnect.Orders.StopLimitOrder.StopLimitOrder(QuantConnect.Symbol, decimal, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="66-66"];
m6_26 [cluster="System.Math.Max(decimal, decimal)", file="EmaCrossAlphaModel.cs", label="Entry System.Math.Max(decimal, decimal)", span="0-0"];
m6_27 [cluster="System.Math.Min(decimal, decimal)", file="EmaCrossAlphaModel.cs", label="Entry System.Math.Min(decimal, decimal)", span="0-0"];
m6_4 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.CreateShortOrder(decimal)", file="EmaCrossAlphaModel.cs", label="Entry QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.CreateShortOrder(decimal)", span="33-33"];
m6_5 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.CreateShortOrder(decimal)", file="EmaCrossAlphaModel.cs", label="return new StopLimitOrder(Symbol, -Math.Abs(quantity), _lowLimit, _highLimit, DateTime.Now);", span="35-35"];
m6_6 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.CreateShortOrder(decimal)", file="EmaCrossAlphaModel.cs", label="Exit QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.CreateShortOrder(decimal)", span="33-33"];
m6_12 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", file="EmaCrossAlphaModel.cs", label="Entry QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", span="43-43"];
m6_13 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", file="EmaCrossAlphaModel.cs", label="var stop = (StopLimitOrder) order", span="45-45"];
m6_15 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", file="EmaCrossAlphaModel.cs", label="order.Quantity > 0", span="47-47"];
m6_16 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", file="EmaCrossAlphaModel.cs", label="stop.StopPrice = Math.Min(stop.StopPrice, Math.Max(stop.StopPrice/2, Math.Round(lastMarketPrice, 2, MidpointRounding.AwayFromZero)))", span="50-50"];
m6_17 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", file="EmaCrossAlphaModel.cs", label="order.SecurityType == SecurityType.Forex || order.SecurityType == SecurityType.Crypto", span="53-53"];
m6_18 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", file="EmaCrossAlphaModel.cs", label="stop.StopPrice = Math.Min(stop.StopPrice, Math.Max(stop.StopPrice / 2, Math.Round(lastMarketPrice, 4, MidpointRounding.AwayFromZero)))", span="55-55"];
m6_19 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", file="EmaCrossAlphaModel.cs", label="stop.StopPrice = Math.Max(stop.StopPrice, Math.Min(stop.StopPrice * 2, Math.Round(lastMarketPrice, 2, MidpointRounding.AwayFromZero)))", span="61-61"];
m6_20 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", file="EmaCrossAlphaModel.cs", label="order.SecurityType == SecurityType.Forex || order.SecurityType == SecurityType.Crypto", span="65-65"];
m6_21 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", file="EmaCrossAlphaModel.cs", label="stop.StopPrice = Math.Max(stop.StopPrice, Math.Min(stop.StopPrice * 2, Math.Round(lastMarketPrice, 4, MidpointRounding.AwayFromZero)))", span="67-67"];
m6_14 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", file="EmaCrossAlphaModel.cs", label="var previousStop = stop.StopPrice", span="46-46"];
m6_22 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", file="EmaCrossAlphaModel.cs", label="stop.LimitPrice = stop.StopPrice", span="70-70"];
m6_23 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", file="EmaCrossAlphaModel.cs", label="return stop.StopPrice != previousStop;", span="71-71"];
m6_24 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", file="EmaCrossAlphaModel.cs", label="Exit QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", span="43-43"];
m6_25 [cluster="System.Math.Round(decimal, int, System.MidpointRounding)", file="EmaCrossAlphaModel.cs", label="Entry System.Math.Round(decimal, int, System.MidpointRounding)", span="0-0"];
m6_0 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.StopLimitOrderTestParameters(QuantConnect.Symbol, decimal, decimal)", file="EmaCrossAlphaModel.cs", label="Entry QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.StopLimitOrderTestParameters(QuantConnect.Symbol, decimal, decimal)", span="26-26"];
m6_1 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.StopLimitOrderTestParameters(QuantConnect.Symbol, decimal, decimal)", file="EmaCrossAlphaModel.cs", label="_highLimit = highLimit", span="29-29"];
m6_2 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.StopLimitOrderTestParameters(QuantConnect.Symbol, decimal, decimal)", file="EmaCrossAlphaModel.cs", label="_lowLimit = lowLimit", span="30-30"];
m6_3 [cluster="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.StopLimitOrderTestParameters(QuantConnect.Symbol, decimal, decimal)", file="EmaCrossAlphaModel.cs", label="Exit QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters.StopLimitOrderTestParameters(QuantConnect.Symbol, decimal, decimal)", span="26-26"];
m6_28 [file="EmaCrossAlphaModel.cs", label="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters", span=""];
m7_17 [cluster="System.TimeSpan.FromDays(double)", file="EmaCrossAlphaModelTests.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m7_13 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.ExpectedInsights()", file="EmaCrossAlphaModelTests.cs", label="Entry QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.ExpectedInsights()", span="38-38"];
m7_14 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.ExpectedInsights()", file="EmaCrossAlphaModelTests.cs", label="var period = TimeSpan.FromDays(12)", span="40-40"];
m7_15 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.ExpectedInsights()", file="EmaCrossAlphaModelTests.cs", label="return new[]\r\n            {\r\n                Insight.Price(Symbols.SPY, period, InsightDirection.Down),\r\n                Insight.Price(Symbols.SPY, period, InsightDirection.Up)\r\n            };", span="42-46"];
m7_16 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.ExpectedInsights()", file="EmaCrossAlphaModelTests.cs", label="Exit QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.ExpectedInsights()", span="38-38"];
m7_12 [cluster="QuantConnect.Algorithm.Framework.Alphas.AlphaModelPythonWrapper.AlphaModelPythonWrapper(PyObject)", file="EmaCrossAlphaModelTests.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.AlphaModelPythonWrapper.AlphaModelPythonWrapper(PyObject)", span="34-34"];
m7_2 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.CreatePythonAlphaModel()", file="EmaCrossAlphaModelTests.cs", label="Entry QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.CreatePythonAlphaModel()", span="28-28"];
m7_3 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.CreatePythonAlphaModel()", file="EmaCrossAlphaModelTests.cs", label="Py.GIL()", span="30-30"];
m7_4 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.CreatePythonAlphaModel()", file="EmaCrossAlphaModelTests.cs", label="dynamic model = Py.Import(''EmaCrossAlphaModel'').GetAttr(''EmaCrossAlphaModel'')", span="32-32"];
m7_5 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.CreatePythonAlphaModel()", file="EmaCrossAlphaModelTests.cs", label="var instance = model()", span="33-33"];
m7_6 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.CreatePythonAlphaModel()", file="EmaCrossAlphaModelTests.cs", label="return new AlphaModelPythonWrapper(instance);", span="34-34"];
m7_7 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.CreatePythonAlphaModel()", file="EmaCrossAlphaModelTests.cs", label="Exit QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.CreatePythonAlphaModel()", span="28-28"];
m7_9 [cluster="Unk.Import", file="EmaCrossAlphaModelTests.cs", label="Entry Unk.Import", span=""];
m7_18 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Price(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="EmaCrossAlphaModelTests.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.Price(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", span="178-178"];
m7_0 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.CreateCSharpAlphaModel()", file="EmaCrossAlphaModelTests.cs", label="Entry QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.CreateCSharpAlphaModel()", span="26-26"];
m7_1 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.CreateCSharpAlphaModel()", file="EmaCrossAlphaModelTests.cs", label="Exit QuantConnect.Tests.Algorithm.Framework.Alphas.EmaCrossAlphaModelTests.CreateCSharpAlphaModel()", span="26-26"];
m7_11 [cluster="Unk.model", file="EmaCrossAlphaModelTests.cs", label="Entry Unk.model", span=""];
m7_8 [cluster="Unk.GIL", file="EmaCrossAlphaModelTests.cs", label="Entry Unk.GIL", span=""];
m7_10 [cluster="Unk.GetAttr", file="EmaCrossAlphaModelTests.cs", label="Entry Unk.GetAttr", span=""];
m8_0 [cluster="QuantConnect.Algorithm.Framework.Alphas.IAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="IAlphaModel.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.IAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", span="32-32"];
m8_1 [cluster="QuantConnect.Algorithm.Framework.Alphas.IAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="IAlphaModel.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.IAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", span="32-32"];
m11_75 [cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)", file="Insight.cs", label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98"];
m11_40 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="fill.Direction", span="131-131"];
m11_14 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="var saleValue = saleValueInQuoteCurrency*quoteCash.ConversionRate", span="63-63"];
m11_15 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="security.Holdings.AddNewSale(saleValue)", span="64-64"];
m11_16 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="var feeThisOrder = fill.OrderFee", span="67-67"];
m11_17 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="security.Holdings.AddNewFee(feeThisOrder)", span="68-68"];
m11_41 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="OrderDirection.Buy", span="133-133"];
m11_72 [cluster="QuantConnect.Securities.SecurityHolding.SetLastTradeProfit(decimal)", file="Insight.cs", label="Entry QuantConnect.Securities.SecurityHolding.SetLastTradeProfit(decimal)", span="335-335"];
m11_21 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="isLong && fill.Direction == OrderDirection.Sell", span="76-76"];
m11_22 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="quantityHoldings >= fill.AbsoluteFillQuantity", span="79-79"];
m11_23 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="lastTradeProfit = (fill.FillPrice - averageHoldingsPrice) * fill.AbsoluteFillQuantity", span="82-82"];
m11_69 [cluster="QuantConnect.Securities.Cash.AddAmount(decimal)", file="Insight.cs", label="Entry QuantConnect.Securities.Cash.AddAmount(decimal)", span="100-100"];
m11_13 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="var saleValueInQuoteCurrency = fill.FillPrice * Convert.ToDecimal(fill.AbsoluteFillQuantity)", span="62-62"];
m11_74 [cluster="QuantConnect.Securities.SecurityPortfolioManager.AddTransactionRecord(System.DateTime, decimal)", file="Insight.cs", label="Entry QuantConnect.Securities.SecurityPortfolioManager.AddTransactionRecord(System.DateTime, decimal)", span="665-665"];
m11_36 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="quantityHoldings == 0", span="122-122"];
m11_71 [cluster="QuantConnect.Securities.SecurityHolding.AddNewProfit(decimal)", file="Insight.cs", label="Entry QuantConnect.Securities.SecurityHolding.AddNewProfit(decimal)", span="317-317"];
m11_65 [cluster="QuantConnect.Securities.Forex.Forex.DecomposeCurrencyPair(string, out string, out string)", file="Insight.cs", label="Entry QuantConnect.Securities.Forex.Forex.DecomposeCurrencyPair(string, out string, out string)", span="98-98"];
m11_42 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="averageHoldingsPrice = ((averageHoldingsPrice * quantityHoldings) + (fill.FillQuantity * fill.FillPrice)) / (quantityHoldings + fill.FillQuantity)", span="135-135"];
m11_68 [cluster="QuantConnect.Securities.SecurityHolding.AddNewFee(decimal)", file="Insight.cs", label="Entry QuantConnect.Securities.SecurityHolding.AddNewFee(decimal)", span="308-308"];
m11_43 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="quantityHoldings += fill.FillQuantity", span="137-137"];
m11_44 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="OrderDirection.Sell", span="140-140"];
m11_45 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="quantityHoldings += fill.FillQuantity", span="141-141"];
m11_46 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="quantityHoldings < 0", span="142-142"];
m11_48 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="quantityHoldings == 0", span="147-147"];
m11_49 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="averageHoldingsPrice = 0", span="149-149"];
m11_50 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label=isShort, span="154-154"];
m11_24 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="lastTradeProfit = (fill.FillPrice - averageHoldingsPrice) * quantityHoldings", span="87-87"];
m11_25 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", color=green, community=0, file="Insight.cs", label="closedPosition = true", prediction=3, span="89-89"];
m11_26 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", color=green, community=0, file="Insight.cs", label="isShort && fill.Direction == OrderDirection.Buy", prediction=4, span="91-91"];
m11_27 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="absoluteHoldingsQuantity >= fill.FillQuantity", span="94-94"];
m11_28 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="lastTradeProfit = (averageHoldingsPrice - fill.FillPrice) * fill.AbsoluteFillQuantity", span="97-97"];
m11_29 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="lastTradeProfit = (averageHoldingsPrice - fill.FillPrice) * absoluteHoldingsQuantity", span="102-102"];
m11_31 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label=closedPosition, span="108-108"];
m11_33 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="security.Holdings.AddNewProfit(lastTradeProfit)", span="114-114"];
m11_34 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="security.Holdings.SetLastTradeProfit(lastTradeProfit)", span="115-115"];
m11_30 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="closedPosition = true", span="104-104"];
m11_32 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="lastTradeProfit *= quoteCash.ConversionRate", span="111-111"];
m11_35 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="portfolio.AddTransactionRecord(security.LocalTime.ConvertToUtc(security.Exchange.TimeZone), lastTradeProfit - 2 * feeThisOrder)", span="116-116"];
m11_18 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="portfolio.CashBook[CashBook.AccountCurrency].AddAmount(-feeThisOrder)", span="69-69"];
m11_19 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="security.SettlementModel.ApplyFunds(portfolio, security, fill.UtcTime, baseCurrency, fill.FillQuantity)", span="72-72"];
m11_20 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="security.SettlementModel.ApplyFunds(portfolio, security, fill.UtcTime, quoteCurrency, -fill.FillQuantity * fill.FillPrice)", span="73-73"];
m11_67 [cluster="QuantConnect.Securities.SecurityHolding.AddNewSale(decimal)", file="Insight.cs", label="Entry QuantConnect.Securities.SecurityHolding.AddNewSale(decimal)", span="326-326"];
m11_38 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="quantityHoldings = fill.FillQuantity", span="126-126"];
m11_51 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="fill.Direction", span="157-157"];
m11_12 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="var lastTradeProfit = 0m", span="57-57"];
m11_73 [cluster="System.DateTime.ConvertToUtc(DateTimeZone, bool)", file="Insight.cs", label="Entry System.DateTime.ConvertToUtc(DateTimeZone, bool)", span="449-449"];
m11_66 [cluster="System.Convert.ToDecimal(int)", file="Insight.cs", label="Entry System.Convert.ToDecimal(int)", span="0-0"];
m11_76 [cluster="System.Convert.ToInt32(decimal)", file="Insight.cs", label="Entry System.Convert.ToInt32(decimal)", span="0-0"];
m11_0 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="Entry QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", span="32-32"];
m11_1 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="string baseCurrency", span="36-36"];
m11_3 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="Insight.cs", label="Id = Guid.NewGuid()", span="120-120"];
m11_4 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="Insight.cs", label="Score = new InsightScore()", span="121-121"];
m11_5 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", color=green, community=0, file="Insight.cs", label="Symbol = symbol", prediction=5, span="123-123"];
m11_7 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="Insight.cs", label="Direction = direction", span="125-125"];
m11_8 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="Insight.cs", label="Period = period", span="126-126"];
m11_9 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="Insight.cs", label="Magnitude = magnitude", span="129-129"];
m11_10 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="Insight.cs", label="Confidence = confidence", span="130-130"];
m11_11 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="Insight.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", span="118-118"];
m11_37 [cluster="QuantConnect.Symbol.Symbol(QuantConnect.SecurityIdentifier, string)", file="Insight.cs", label="Entry QuantConnect.Symbol.Symbol(QuantConnect.SecurityIdentifier, string)", span="242-242"];
m11_53 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="quantityHoldings += fill.FillQuantity", span="161-161"];
m11_59 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="averageHoldingsPrice = ((averageHoldingsPrice * quantityHoldings) + (fill.FillQuantity * fill.FillPrice)) / (quantityHoldings + fill.FillQuantity)", span="177-177"];
m11_63 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="security.Holdings.SetHoldings(averageHoldingsPrice, Convert.ToInt32(quantityHoldings))", span="189-189"];
m11_2 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="Insight.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", span="118-118"];
m11_6 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", color=green, community=0, file="Insight.cs", label="Type = type", prediction=6, span="124-124"];
m11_39 [cluster="System.TimeSpan.FromSeconds(double)", file="Insight.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m11_61 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label=Exception, span="183-183"];
m11_52 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="QuantConnect.Algorithm.Framework.Alphas.Insight", span=""];
m11_58 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="OrderDirection.Sell", span="173-173"];
m11_54 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="quantityHoldings > 0", span="162-162"];
m11_56 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="quantityHoldings == 0", span="167-167"];
m11_57 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="averageHoldingsPrice = 0", span="169-169"];
m11_62 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="Log.Error(err)", span="185-185"];
m11_64 [cluster="QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Insight.cs", label="Exit QuantConnect.Securities.Forex.ForexPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", span="32-32"];
m11_70 [cluster="QuantConnect.Securities.ISettlementModel.ApplyFunds(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, System.DateTime, string, decimal)", file="Insight.cs", label="Entry QuantConnect.Securities.ISettlementModel.ApplyFunds(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, System.DateTime, string, decimal)", span="32-32"];
m11_77 [cluster="QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", file="Insight.cs", label="Entry QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", span="343-343"];
m12_23 [cluster="Unk.ToLower", file="InsightJsonConverterTests.cs", label="Entry Unk.ToLower", span=""];
m12_21 [cluster="Unk.AreEqual", file="InsightJsonConverterTests.cs", label="Entry Unk.AreEqual", span=""];
m12_42 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Entry QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithoutScore()", span="72-72"];
m12_43 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="var jObject = JObject.Parse(jsonNoScore)", span="74-74"];
m12_44 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="var insight = Insight.FromSerializedInsight(new SerializedInsight\r\n            {\r\n                Id = jObject[''id''].Value<string>(),\r\n                GeneratedTime = jObject[''generated-time''].Value<double>(),\r\n                CloseTime = jObject[''close-time''].Value<double>(),\r\n                Symbol = jObject[''symbol''].Value<string>(),\r\n                Ticker = jObject[''ticker''].Value<string>(),\r\n                Type = (InsightType)Enum.Parse(typeof(InsightType), jObject[''type''].Value<string>(), true),\r\n                ReferenceValue = jObject[''reference''].Value<decimal>(),\r\n                Direction = (InsightDirection)Enum.Parse(typeof(InsightDirection), jObject[''direction''].Value<string>(), true),\r\n                Period = jObject[''period''].Value<double>(),\r\n                Magnitude = jObject[''magnitude''].Value<double>()\r\n            })", span="75-87"];
m12_45 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="var result = JsonConvert.SerializeObject(insight, Formatting.Indented)", span="88-88"];
m12_46 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jsonNoScore, result)", span="89-89"];
m12_47 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Exit QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithoutScore()", span="72-72"];
m12_20 [cluster="Unk.ToString", file="InsightJsonConverterTests.cs", label="Entry Unk.ToString", span=""];
m12_18 [cluster="Unk.Parse", file="InsightJsonConverterTests.cs", label="Entry Unk.Parse", span=""];
m12_49 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", file="InsightJsonConverterTests.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", span="188-188"];
m12_24 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Entry QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", span="51-51"];
m12_25 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="var jObject = JObject.Parse(jsonWithScore)", span="53-53"];
m12_26 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="var result = JsonConvert.DeserializeObject<Insight>(jsonWithScore)", span="54-54"];
m12_27 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''id''].Value<string>(), result.Id.ToString(''N''))", span="55-55"];
m12_28 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''generated-time''].Value<double>(), Time.DateTimeToUnixTimeStamp(result.GeneratedTimeUtc), 5e-4)", span="56-56"];
m12_29 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''close-time''].Value<double>(), Time.DateTimeToUnixTimeStamp(result.CloseTimeUtc), 5e-4)", span="57-57"];
m12_30 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''symbol''].Value<string>(), result.Symbol.ID.ToString())", span="58-58"];
m12_31 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''ticker''].Value<string>(), result.Symbol.Value)", span="59-59"];
m12_32 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''type''].Value<string>(), result.Type.ToLower())", span="60-60"];
m12_33 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''reference''].Value<decimal>(), result.ReferenceValue)", span="61-61"];
m12_34 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''direction''].Value<string>(), result.Direction.ToLower())", span="62-62"];
m12_35 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''period''].Value<double>(), result.Period.TotalSeconds)", span="63-63"];
m12_36 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''magnitude''].Value<double>(), result.Magnitude)", span="64-64"];
m12_39 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''score-magnitude''].Value<double>(), result.Score.Magnitude)", span="67-67"];
m12_40 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''score-direction''].Value<double>(), result.Score.Direction)", span="68-68"];
m12_37 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(null, result.Confidence)", span="65-65"];
m12_38 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(true, result.Score.IsFinalScore)", span="66-66"];
m12_41 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Exit QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithScore()", span="51-51"];
m12_51 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Entry QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithScore()", span="93-93"];
m12_52 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="var jObject = JObject.Parse(jsonWithScore)", span="95-95"];
m12_53 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="var insight = Insight.FromSerializedInsight(new SerializedInsight\r\n            {\r\n                Id = jObject[''id''].Value<string>(),\r\n                GeneratedTime = jObject[''generated-time''].Value<double>(),\r\n                CloseTime = jObject[''close-time''].Value<double>(),\r\n                Symbol = jObject[''symbol''].Value<string>(),\r\n                Ticker = jObject[''ticker''].Value<string>(),\r\n                Type = (InsightType)Enum.Parse(typeof(InsightType), jObject[''type''].Value<string>(), true),\r\n                ReferenceValue = jObject[''reference''].Value<decimal>(),\r\n                Direction = (InsightDirection)Enum.Parse(typeof(InsightDirection), jObject[''direction''].Value<string>(), true),\r\n                Period = jObject[''period''].Value<double>(),\r\n                Magnitude = jObject[''magnitude''].Value<double>(),\r\n                ScoreIsFinal = jObject[''score-final''].Value<bool>(),\r\n                ScoreMagnitude = jObject[''score-magnitude''].Value<double>(),\r\n                ScoreDirection = jObject[''score-direction''].Value<double>(),\r\n                EstimatedValue = jObject[''estimated-value''].Value<decimal>()\r\n            })", span="96-112"];
m12_54 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="var result = JsonConvert.SerializeObject(insight, Formatting.Indented)", span="113-113"];
m12_55 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jsonWithScore, result)", span="114-114"];
m12_56 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithScore()", file="InsightJsonConverterTests.cs", label="Exit QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.SerializesInsightWithScore()", span="93-93"];
m12_19 [cluster="Unk.>", file="InsightJsonConverterTests.cs", label="Entry Unk.>", span=""];
m12_22 [cluster="Unk.DateTimeToUnixTimeStamp", file="InsightJsonConverterTests.cs", label="Entry Unk.DateTimeToUnixTimeStamp", span=""];
m12_48 [cluster="QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight.SerializedInsight()", file="InsightJsonConverterTests.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight.SerializedInsight()", span="106-106"];
m12_0 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Entry QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", span="28-28"];
m12_1 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="var jObject = JObject.Parse(jsonNoScore)", span="30-30"];
m12_2 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="var result = JsonConvert.DeserializeObject<Insight>(jsonNoScore)", span="31-31"];
m12_3 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''id''].Value<string>(), result.Id.ToString(''N''))", span="32-32"];
m12_4 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''generated-time''].Value<double>(), Time.DateTimeToUnixTimeStamp(result.GeneratedTimeUtc), 5e-4)", span="33-33"];
m12_5 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''close-time''].Value<double>(), Time.DateTimeToUnixTimeStamp(result.CloseTimeUtc), 5e-4)", span="34-34"];
m12_6 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''symbol''].Value<string>(), result.Symbol.ID.ToString())", span="35-35"];
m12_7 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''ticker''].Value<string>(), result.Symbol.Value)", span="36-36"];
m12_8 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''type''].Value<string>(), result.Type.ToLower())", span="37-37"];
m12_9 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''reference''].Value<decimal>(), result.ReferenceValue)", span="38-38"];
m12_10 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''direction''].Value<string>(), result.Direction.ToLower())", span="39-39"];
m12_11 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''period''].Value<double>(), result.Period.TotalSeconds)", span="40-40"];
m12_12 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(jObject[''magnitude''].Value<double>(), result.Magnitude)", span="41-41"];
m12_13 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(null, result.Confidence)", span="42-42"];
m12_14 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(false, result.Score.IsFinalScore)", span="45-45"];
m12_15 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(0, result.Score.Magnitude)", span="46-46"];
m12_16 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Assert.AreEqual(0, result.Score.Direction)", span="47-47"];
m12_17 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", file="InsightJsonConverterTests.cs", label="Exit QuantConnect.Tests.Algorithm.Framework.Alphas.Serialization.InsightJsonConverterTests.DeserializesInsightWithoutScore()", span="28-28"];
m12_50 [cluster="Unk.SerializeObject", file="InsightJsonConverterTests.cs", label="Entry Unk.SerializeObject", span=""];
m15_80 [cluster="QuantConnect.Securities.SecurityManager.Add(QuantConnect.Securities.Security)", file="Loader.cs", label="Entry QuantConnect.Securities.SecurityManager.Add(QuantConnect.Securities.Security)", span="81-81"];
m15_114 [cluster="System.Math.Max(long, long)", file="Loader.cs", label="Entry System.Math.Max(long, long)", span="0-0"];
m15_117 [cluster="System.Math.Min(int, int)", file="Loader.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m15_112 [cluster="System.Collections.Generic.IEnumerable<TSource>.LastOrDefault<TSource>()", file="Loader.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.LastOrDefault<TSource>()", span="0-0"];
m15_118 [cluster="lambda expression", file="Loader.cs", label="Entry lambda expression", span="159-159"];
m15_88 [cluster="lambda expression", file="Loader.cs", label="transactionHandler.Run()", span="96-96"];
m15_87 [cluster="lambda expression", file="Loader.cs", label="Entry lambda expression", span="96-96"];
m15_89 [cluster="lambda expression", file="Loader.cs", label="Exit lambda expression", span="96-96"];
m15_119 [cluster="lambda expression", file="Loader.cs", label="x.OrderId == order.Id", span="159-159"];
m15_120 [cluster="lambda expression", file="Loader.cs", label="Exit lambda expression", span="159-159"];
m15_18 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="Entry QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", span="87-87"];
m15_45 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="var referenceTimeNY = new DateTime(2015, 12, 21, 13, 0, 0)", span="89-89"];
m15_46 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="var referenceTimeUtc = referenceTimeNY.ConvertToUtc(TimeZones.NewYork)", span="90-90"];
m15_47 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="algorithm = new BasicTemplateAlgorithm()", span="91-91"];
m15_48 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="algorithm.SetDateTime(referenceTimeUtc)", span="92-92"];
m15_60 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="order = new MarketOrder(Symbols.SPY, 100, referenceTimeUtc) { Id = 1 }", span="110-110"];
m15_63 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="return referenceTimeUtc;", span="114-114"];
m15_50 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="transactionHandler.Initialize(algorithm, new BacktestingBrokerage(algorithm), new TestResultHandler(Console.WriteLine))", span="95-95"];
m15_55 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="model = new PartialMarketFillModel(algorithm.Transactions, 2)", span="103-103"];
m15_56 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="algorithm.Securities.Add(security)", span="105-105"];
m15_57 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="algorithm.Securities[Symbols.SPY].FillModel = model", span="106-106"];
m15_59 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="algorithm.SetFinishedWarmingUp()", span="108-108"];
m15_61 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="var request = new SubmitOrderRequest(OrderType.Market, security.Type, security.Symbol, order.Quantity, 0, 0, algorithm.UtcTime, null)", span="112-112"];
m15_62 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="ticket = algorithm.Transactions.ProcessRequest(request)", span="113-113"];
m15_49 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="var transactionHandler = new BacktestingTransactionHandler()", span="94-94"];
m15_51 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="Task.Run(() => transactionHandler.Run())", span="96-96"];
m15_54 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="security = new Security(SecurityExchangeHours.AlwaysOpen(TimeZones.NewYork), config, new Cash(CashBook.AccountCurrency, 0, 1m), SymbolProperties.GetDefault(CashBook.AccountCurrency))", span="101-101"];
m15_58 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="security.SetMarketPrice(new Tick { Symbol = Symbols.SPY, Value = 100 })", span="107-107"];
m15_64 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", file="Loader.cs", label="Exit QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.InitializeTest(out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm, out QuantConnect.Securities.Security, out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel, out QuantConnect.Orders.MarketOrder, out QuantConnect.Orders.OrderTicket)", span="87-87"];
m15_74 [cluster="QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", file="Loader.cs", label="Entry QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", span="157-157"];
m15_90 [cluster="QuantConnect.Lean.Engine.TransactionHandlers.BrokerageTransactionHandler.Run()", file="Loader.cs", label="Entry QuantConnect.Lean.Engine.TransactionHandlers.BrokerageTransactionHandler.Run()", span="473-473"];
m15_82 [cluster="QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", file="Loader.cs", label="Entry QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", span="578-578"];
m15_83 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetFinishedWarmingUp()", file="Loader.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetFinishedWarmingUp()", span="142-142"];
m15_24 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="Entry QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", span="60-60"];
m15_25 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="Security security", span="62-62"];
m15_26 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="MarketOrder order", span="63-63"];
m15_27 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="OrderTicket ticket", span="64-64"];
m15_28 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="PartialMarketFillModel model", span="65-65"];
m15_29 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="BasicTemplateAlgorithm algorithm", span="66-66"];
m15_30 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="var referenceTimeUtc = InitializeTest(out algorithm, out security, out model, out order, out ticket)", span="67-67"];
m15_31 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="var fill1 = model.MarketFill(security, order)", span="69-69"];
m15_32 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="ticket.AddOrderEvent(fill1)", span="70-70"];
m15_33 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="Assert.AreEqual(order.Quantity / 2, fill1.FillQuantity)", span="71-71"];
m15_35 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="var fill2 = model.MarketFill(security, order)", span="74-74"];
m15_36 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="ticket.AddOrderEvent(fill2)", span="75-75"];
m15_39 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="algorithm.SetDateTime(referenceTimeUtc.AddSeconds(1))", span="79-79"];
m15_40 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="var fill3 = model.MarketFill(security, order)", span="81-81"];
m15_41 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="ticket.AddOrderEvent(fill3)", span="82-82"];
m15_42 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="Assert.AreEqual(order.Quantity / 2, fill3.FillQuantity)", span="83-83"];
m15_34 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="Assert.AreEqual(OrderStatus.PartiallyFilled, fill1.Status)", span="72-72"];
m15_37 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="Assert.AreEqual(0, fill2.FillQuantity)", span="76-76"];
m15_38 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="Assert.AreEqual(OrderStatus.None, fill2.Status)", span="77-77"];
m15_43 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="Assert.AreEqual(OrderStatus.Filled, fill3.Status)", span="84-84"];
m15_44 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", file="Loader.cs", label="Exit QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.RequiresAdvancingTime()", span="60-60"];
m15_71 [cluster="QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler.Initialize(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Lean.Engine.Results.IResultHandler)", file="Loader.cs", label="Entry QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler.Initialize(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Lean.Engine.Results.IResultHandler)", span="36-36"];
m15_70 [cluster="QuantConnect.Tests.Engine.TestResultHandler.TestResultHandler(System.Action<QuantConnect.Packets.Packet>)", file="Loader.cs", label="Entry QuantConnect.Tests.Engine.TestResultHandler.TestResultHandler(System.Action<QuantConnect.Packets.Packet>)", span="51-51"];
m15_22 [cluster="QuantConnect.Orders.OrderTicket.AddOrderEvent(QuantConnect.Orders.OrderEvent)", file="Loader.cs", label="Entry QuantConnect.Orders.OrderTicket.AddOrderEvent(QuantConnect.Orders.OrderEvent)", span="324-324"];
m15_110 [cluster="System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", file="Loader.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", span="0-0"];
m15_20 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetDateTime(System.DateTime)", file="Loader.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetDateTime(System.DateTime)", span="913-913"];
m15_69 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", file="Loader.cs", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", span="50-50"];
m15_76 [cluster="QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", file="Loader.cs", label="Entry QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", span="82-82"];
m15_23 [cluster="Unk.AreEqual", file="Loader.cs", label="Entry Unk.AreEqual", span=""];
m15_73 [cluster="QuantConnect.Securities.SecurityTransactionManager.SetOrderProcessor(QuantConnect.Securities.IOrderProcessor)", file="Loader.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.SetOrderProcessor(QuantConnect.Securities.IOrderProcessor)", span="339-339"];
m15_84 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="Loader.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="49-49"];
m15_79 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.PartialMarketFillModel(QuantConnect.Securities.IOrderProvider, int)", file="Loader.cs", label="Entry QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.PartialMarketFillModel(QuantConnect.Securities.IOrderProvider, int)", span="143-143"];
m15_91 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.PartialMarketFillModel(QuantConnect.Securities.IOrderProvider, int)", file="Loader.cs", label="_orderProvider = orderProvider", span="145-145"];
m15_92 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.PartialMarketFillModel(QuantConnect.Securities.IOrderProvider, int)", file="Loader.cs", label="_percent = 1m / numberOfFills", span="146-146"];
m15_93 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.PartialMarketFillModel(QuantConnect.Securities.IOrderProvider, int)", file="Loader.cs", label="Exit QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.PartialMarketFillModel(QuantConnect.Securities.IOrderProvider, int)", span="143-143"];
m15_72 [cluster="System.Threading.Tasks.Task.Run(System.Action)", file="Loader.cs", label="Entry System.Threading.Tasks.Task.Run(System.Action)", span="0-0"];
m15_68 [cluster="QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler.BacktestingTransactionHandler()", file="Loader.cs", label="Entry QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler.BacktestingTransactionHandler()", span="25-25"];
m15_75 [cluster="QuantConnect.Securities.Security.Security(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", file="Loader.cs", label="Entry QuantConnect.Securities.Security.Security(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", span="302-302"];
m15_67 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm.BasicTemplateAlgorithm()", file="Loader.cs", label="Entry QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm.BasicTemplateAlgorithm()", span="28-28"];
m15_115 [cluster="System.TimeSpan.FromTicks(long)", file="Loader.cs", label="Entry System.TimeSpan.FromTicks(long)", span="0-0"];
m15_19 [cluster="System.DateTime.AddSeconds(double)", file="Loader.cs", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
m15_66 [cluster="System.DateTime.ConvertToUtc(DateTimeZone, bool)", file="Loader.cs", label="Entry System.DateTime.ConvertToUtc(DateTimeZone, bool)", span="619-619"];
m15_65 [cluster="System.DateTime.DateTime(int, int, int, int, int, int)", file="Loader.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int)", span="0-0"];
m15_85 [cluster="QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, QuantConnect.Symbol, decimal, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="Loader.cs", label="Entry QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, QuantConnect.Symbol, decimal, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="102-102"];
m15_78 [cluster="QuantConnect.Securities.SymbolProperties.GetDefault(string)", file="Loader.cs", label="Entry QuantConnect.Securities.SymbolProperties.GetDefault(string)", span="84-84"];
m15_86 [cluster="QuantConnect.Securities.SecurityTransactionManager.ProcessRequest(QuantConnect.Orders.OrderRequest)", file="Loader.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.ProcessRequest(QuantConnect.Orders.OrderRequest)", span="133-133"];
m15_116 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="Entry QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", span="36-36"];
m15_77 [cluster="QuantConnect.Securities.Cash.Cash(string, decimal, decimal)", file="Loader.cs", label="Entry QuantConnect.Securities.Cash.Cash(string, decimal, decimal)", span="80-80"];
m15_21 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="Entry QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", span="155-155"];
m15_94 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="var currentUtcTime = asset.LocalTime.ConvertToUtc(asset.Exchange.TimeZone)", span="157-157"];
m15_95 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="var ticket = _orderProvider.GetOrderTickets(x => x.OrderId == order.Id).FirstOrDefault()", span="159-159"];
m15_97 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="return new OrderEvent(order, currentUtcTime, 0);", span="163-163"];
m15_99 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="var increment = TimeSpan.FromTicks(Math.Max(asset.Resolution.ToTimeSpan().Ticks, 1))", span="168-168"];
m15_101 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="return new OrderEvent(order, currentUtcTime, 0);", span="172-172"];
m15_103 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="var fill = base.MarketFill(asset, order)", span="176-176"];
m15_104 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="var filledThisTime = Math.Min(remaining, (int)(_percent * order.Quantity))", span="177-177"];
m15_100 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="lastOrderEvent != null && currentUtcTime - lastOrderEvent.UtcTime < increment", span="169-169"];
m15_98 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="var lastOrderEvent = ticket.OrderEvents.LastOrDefault()", span="167-167"];
m15_102 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="var remaining = (int)(ticket.Quantity - ticket.QuantityFilled)", span="175-175"];
m15_106 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="fill.Status = remaining == filledThisTime\r\n                    ? OrderStatus.Filled\r\n                    : OrderStatus.PartiallyFilled", span="181-183"];
m15_105 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="fill.FillQuantity = filledThisTime", span="178-178"];
m15_107 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="return fill;", span="185-185"];
m15_108 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="Loader.cs", label="Exit QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", span="155-155"];
m15_81 [cluster="QuantConnect.Data.Market.Tick.Tick()", file="Loader.cs", label="Entry QuantConnect.Data.Market.Tick.Tick()", span="98-98"];
m15_113 [cluster="QuantConnect.Resolution.ToTimeSpan()", file="Loader.cs", label="Entry QuantConnect.Resolution.ToTimeSpan()", span="725-725"];
m15_0 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="Entry QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", span="35-35"];
m15_1 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="Security security", span="37-37"];
m15_2 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="MarketOrder order", span="38-38"];
m15_3 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="OrderTicket ticket", span="39-39"];
m15_4 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="PartialMarketFillModel model", span="40-40"];
m15_5 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="BasicTemplateAlgorithm algorithm", span="41-41"];
m15_6 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="var referenceTimeUtc = InitializeTest(out algorithm, out security, out model, out order, out ticket)", span="42-42"];
m15_7 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="algorithm.SetDateTime(referenceTimeUtc.AddSeconds(1))", span="44-44"];
m15_8 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="var fill1 = model.MarketFill(security, order)", span="46-46"];
m15_9 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="ticket.AddOrderEvent(fill1)", span="47-47"];
m15_10 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="Assert.AreEqual(order.Quantity / 2, fill1.FillQuantity)", span="48-48"];
m15_12 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="algorithm.SetDateTime(referenceTimeUtc.AddSeconds(2))", span="51-51"];
m15_13 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="var fill2 = model.MarketFill(security, order)", span="53-53"];
m15_14 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="ticket.AddOrderEvent(fill2)", span="54-54"];
m15_15 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="Assert.AreEqual(order.Quantity / 2, fill2.FillQuantity)", span="55-55"];
m15_11 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="Assert.AreEqual(OrderStatus.PartiallyFilled, fill1.Status)", span="49-49"];
m15_16 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="Assert.AreEqual(OrderStatus.Filled, fill2.Status)", span="56-56"];
m15_17 [cluster="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", file="Loader.cs", label="Exit QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.CreatesSpecificNumberOfFills()", span="35-35"];
m15_109 [cluster="QuantConnect.Securities.IOrderProvider.GetOrderTickets(System.Func<QuantConnect.Orders.OrderTicket, bool>)", file="Loader.cs", label="Entry QuantConnect.Securities.IOrderProvider.GetOrderTickets(System.Func<QuantConnect.Orders.OrderTicket, bool>)", span="50-50"];
m15_111 [cluster="QuantConnect.Orders.OrderEvent.OrderEvent(QuantConnect.Orders.Order, System.DateTime, decimal, string)", file="Loader.cs", label="Entry QuantConnect.Orders.OrderEvent.OrderEvent(QuantConnect.Orders.Order, System.DateTime, decimal, string)", span="144-144"];
m15_121 [file="Loader.cs", label=transactionHandler, span=""];
m15_122 [file="Loader.cs", label="QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel", span=""];
m15_123 [file="Loader.cs", label="QuantConnect.Orders.MarketOrder", span=""];
m16_0 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan)", file="MacdAlphaModel.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan)", span="42-42"];
m16_1 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan)", file="MacdAlphaModel.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan)", span="42-42"];
m16_11 [cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="MacdAlphaModel.cs", label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0"];
m16_19 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="MacdAlphaModel.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", span="118-118"];
m16_34 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="MacdAlphaModel.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m16_18 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ShouldEmitInsight(System.DateTime, QuantConnect.Symbol)", file="MacdAlphaModel.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ShouldEmitInsight(System.DateTime, QuantConnect.Symbol)", span="102-102"];
m16_27 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ShouldEmitInsight(System.DateTime, QuantConnect.Symbol)", file="MacdAlphaModel.cs", label="DateTime generatedTimeUtc", span="104-104"];
m16_28 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ShouldEmitInsight(System.DateTime, QuantConnect.Symbol)", file="MacdAlphaModel.cs", label="_insightsTimeBySymbol.TryGetValue(symbol, out generatedTimeUtc)", span="105-105"];
m16_29 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ShouldEmitInsight(System.DateTime, QuantConnect.Symbol)", file="MacdAlphaModel.cs", label="utcTime - generatedTimeUtc < _period", span="109-109"];
m16_31 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ShouldEmitInsight(System.DateTime, QuantConnect.Symbol)", file="MacdAlphaModel.cs", label="_insightsTimeBySymbol[symbol] = utcTime", span="117-117"];
m16_30 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ShouldEmitInsight(System.DateTime, QuantConnect.Symbol)", file="MacdAlphaModel.cs", label="return false;", span="111-111"];
m16_32 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ShouldEmitInsight(System.DateTime, QuantConnect.Symbol)", file="MacdAlphaModel.cs", label="return true;", span="118-118"];
m16_33 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ShouldEmitInsight(System.DateTime, QuantConnect.Symbol)", file="MacdAlphaModel.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ShouldEmitInsight(System.DateTime, QuantConnect.Symbol)", span="102-102"];
m16_25 [cluster="QuantConnect.Algorithm.Framework.NotifiedSecurityChanges.UpdateCollection(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="MacdAlphaModel.cs", label="Entry QuantConnect.Algorithm.Framework.NotifiedSecurityChanges.UpdateCollection(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="32-32"];
m16_26 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", file="MacdAlphaModel.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0"];
m16_13 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="MacdAlphaModel.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", span="75-75"];
m16_14 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="MacdAlphaModel.cs", label=_securities, span="77-77"];
m16_16 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="MacdAlphaModel.cs", label="yield return new Insight(security.Symbol, _period, _type, _direction, _magnitude, _confidence);", span="81-81"];
m16_15 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="MacdAlphaModel.cs", label="ShouldEmitInsight(algorithm.UtcTime, security.Symbol)", span="79-79"];
m16_17 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="MacdAlphaModel.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", span="75-75"];
m16_2 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="MacdAlphaModel.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", span="55-55"];
m16_3 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="MacdAlphaModel.cs", label="_type = type", span="57-57"];
m16_4 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="MacdAlphaModel.cs", label="_direction = direction", span="58-58"];
m16_5 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="MacdAlphaModel.cs", label="_period = period", span="59-59"];
m16_6 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="MacdAlphaModel.cs", label="_magnitude = magnitude", span="62-62"];
m16_7 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="MacdAlphaModel.cs", label="_confidence = confidence", span="63-63"];
m16_8 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="MacdAlphaModel.cs", label="_securities = new HashSet<Security>()", span="65-65"];
m16_9 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="MacdAlphaModel.cs", label="_insightsTimeBySymbol = new Dictionary<Symbol, DateTime>()", span="66-66"];
m16_10 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="MacdAlphaModel.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", span="55-55"];
m16_20 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="MacdAlphaModel.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="91-91"];
m16_21 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="MacdAlphaModel.cs", label="NotifiedSecurityChanges.UpdateCollection(_securities, changes)", span="93-93"];
m16_22 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="MacdAlphaModel.cs", label="changes.RemovedSecurities", span="96-96"];
m16_23 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="MacdAlphaModel.cs", label="_insightsTimeBySymbol.Remove(removed.Symbol)", span="98-98"];
m16_24 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="MacdAlphaModel.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="91-91"];
m16_12 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="MacdAlphaModel.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m16_35 [file="MacdAlphaModel.cs", label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", span=""];
m17_15 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.MacdAlphaModelTests.ExpectedInsights()", file="MacdAlphaModelTests.cs", label="return new[]\r\n            {\r\n                Insight.Price(Symbols.SPY, period, InsightDirection.Flat),\r\n                Insight.Price(Symbols.SPY, period, InsightDirection.Down),\r\n                Insight.Price(Symbols.SPY, period, InsightDirection.Flat),\r\n                Insight.Price(Symbols.SPY, period, InsightDirection.Up)\r\n            };", span="41-47"];
m17_85 [cluster="QuantConnect.Algorithm.Examples.CorrelationPair.CorrelationPair(System.DateTime)", file="MacdAlphaModelTests.cs", label="Date = date.Date", span="219-219"];
m17_86 [cluster="QuantConnect.Algorithm.Examples.CorrelationPair.CorrelationPair(System.DateTime)", file="MacdAlphaModelTests.cs", label="Exit QuantConnect.Algorithm.Examples.CorrelationPair.CorrelationPair(System.DateTime)", span="217-217"];
m17_17 [cluster="System.TimeSpan.FromDays(double)", file="MacdAlphaModelTests.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m17_18 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Price(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="MacdAlphaModelTests.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.Price(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", span="178-178"];
m17_19 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="today.NiftyPrice = Convert.ToDouble(data.Close)", span="71-71"];
m17_20 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="today.Date == data.Time", span="72-72"];
m17_21 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="prices.Add(today)", span="74-74"];
m17_22 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="prices.Count > minimumCorrelationHistory", span="76-76"];
m17_23 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="prices.RemoveAt(0)", span="78-78"];
m17_24 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="double highestNifty = (from pair in prices select pair.NiftyPrice).Max()", span="83-83"];
m17_25 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="double lowestNifty = (from pair in prices select pair.NiftyPrice).Min()", span="84-84"];
m17_26 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="Time.DayOfWeek == DayOfWeek.Wednesday", span="85-85"];
m17_28 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="int code = Order(''NIFTY'', quantity - Portfolio[''NIFTY''].Quantity)", span="94-94"];
m17_29 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="Debug(''LONG '' + code + '' Time: '' + Time.ToShortDateString() + '' Quantity: '' + quantity + '' Portfolio:'' + Portfolio[''NIFTY''].Quantity + '' Nifty: '' + data.Close + '' Buying Power: '' + Portfolio.TotalPortfolioValue)", span="95-95"];
m17_31 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="int code = Order(''NIFTY'', -quantity - Portfolio[''NIFTY''].Quantity)", span="99-99"];
m17_32 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="Debug(''SHORT '' + code + '' Time: '' + Time.ToShortDateString() + '' Quantity: '' + quantity + '' Portfolio:'' + Portfolio[''NIFTY''].Quantity + '' Nifty: '' + data.Close + '' Buying Power: '' + Portfolio.TotalPortfolioValue)", span="100-100"];
m17_34 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="Debug(''Error: '' + err.Message)", span="106-106"];
m17_27 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="Convert.ToDouble(data.Open) >= highestNifty", span="92-92"];
m17_30 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="Convert.ToDouble(data.Open) <= lowestNifty", span="97-97"];
m17_33 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label=Exception, span="104-104"];
m17_35 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", file="MacdAlphaModelTests.cs", label="Exit QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.Nifty)", span="65-65"];
m17_10 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddData<T>(string, QuantConnect.Resolution)", file="MacdAlphaModelTests.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddData<T>(string, QuantConnect.Resolution)", span="673-673"];
m17_39 [cluster="Unk.Min", file="MacdAlphaModelTests.cs", label="Entry Unk.Min", span=""];
m17_43 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnEndOfDay()", file="MacdAlphaModelTests.cs", label="Entry QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnEndOfDay()", span="112-112"];
m17_44 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnEndOfDay()", file="MacdAlphaModelTests.cs", label="Plot(''Nifty Closing Price'', today.NiftyPrice)", span="116-116"];
m17_45 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnEndOfDay()", file="MacdAlphaModelTests.cs", label="Exit QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnEndOfDay()", span="112-112"];
m17_46 [cluster="QuantConnect.Algorithm.QCAlgorithm.Plot(string, double)", file="MacdAlphaModelTests.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Plot(string, double)", span="115-115"];
m17_38 [cluster="Unk.Max", file="MacdAlphaModelTests.cs", label="Entry Unk.Max", span=""];
m17_16 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.MacdAlphaModelTests.ExpectedInsights()", file="MacdAlphaModelTests.cs", label="Exit QuantConnect.Tests.Algorithm.Framework.Alphas.MacdAlphaModelTests.ExpectedInsights()", span="38-38"];
m17_7 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.MacdAlphaModelTests.CreatePythonAlphaModel()", file="MacdAlphaModelTests.cs", label="Exit QuantConnect.Tests.Algorithm.Framework.Alphas.MacdAlphaModelTests.CreatePythonAlphaModel()", span="28-28"];
m17_42 [cluster="QuantConnect.Algorithm.QCAlgorithm.Debug(string)", file="MacdAlphaModelTests.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Debug(string)", span="710-710"];
m17_2 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.Initialize()", file="MacdAlphaModelTests.cs", label="SetEndDate(2014, 7, 25)", span="44-44"];
m17_3 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.Initialize()", file="MacdAlphaModelTests.cs", label="SetCash(100000)", span="47-47"];
m17_4 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.Initialize()", color=green, community=0, file="MacdAlphaModelTests.cs", label="AddData<DollarRupee>(''USDINR'')", prediction=7, span="50-50"];
m17_5 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.Initialize()", color=green, community=0, file="MacdAlphaModelTests.cs", label="AddData<Nifty>(''NIFTY'')", prediction=7, span="51-51"];
m17_6 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.Initialize()", file="MacdAlphaModelTests.cs", label="Exit QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.Initialize()", span="41-41"];
m17_12 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.DollarRupee)", file="MacdAlphaModelTests.cs", label="today = new CorrelationPair(data.Time)", span="61-61"];
m17_9 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", file="MacdAlphaModelTests.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", span="412-412"];
m17_8 [cluster="Unk.GIL", file="MacdAlphaModelTests.cs", label="Entry Unk.GIL", span=""];
m17_11 [cluster="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.DollarRupee)", file="MacdAlphaModelTests.cs", label="Entry QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm.OnData(QuantConnect.Algorithm.Examples.DollarRupee)", span="59-59"];
m17_40 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", file="MacdAlphaModelTests.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", span="194-194"];
m17_37 [cluster="System.Collections.Generic.List<T>.RemoveAt(int)", file="MacdAlphaModelTests.cs", label="Entry System.Collections.Generic.List<T>.RemoveAt(int)", span="0-0"];
m17_36 [cluster="System.Collections.Generic.List<T>.Add(T)", file="MacdAlphaModelTests.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m17_13 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.MacdAlphaModelTests.ExpectedInsights()", file="MacdAlphaModelTests.cs", label="Entry QuantConnect.Tests.Algorithm.Framework.Alphas.MacdAlphaModelTests.ExpectedInsights()", span="38-38"];
m17_14 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.MacdAlphaModelTests.ExpectedInsights()", file="MacdAlphaModelTests.cs", label="var period = TimeSpan.FromDays(12)", span="40-40"];
m17_41 [cluster="System.DateTime.ToShortDateString()", file="MacdAlphaModelTests.cs", label="Entry System.DateTime.ToShortDateString()", span="0-0"];
m17_0 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.MacdAlphaModelTests.CreateCSharpAlphaModel()", file="MacdAlphaModelTests.cs", label="Entry QuantConnect.Tests.Algorithm.Framework.Alphas.MacdAlphaModelTests.CreateCSharpAlphaModel()", span="26-26"];
m17_1 [cluster="QuantConnect.Tests.Algorithm.Framework.Alphas.MacdAlphaModelTests.CreateCSharpAlphaModel()", file="MacdAlphaModelTests.cs", label="Exit QuantConnect.Tests.Algorithm.Framework.Alphas.MacdAlphaModelTests.CreateCSharpAlphaModel()", span="26-26"];
m17_87 [file="MacdAlphaModelTests.cs", label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", span=""];
m17_90 [file="MacdAlphaModelTests.cs", label="QuantConnect.Algorithm.Examples.CorrelationPair", span=""];
m19_147 [cluster="QuantConnect.Algorithm.QCAlgorithm.ExerciseOption(QuantConnect.Symbol, int, bool, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.ExerciseOption(QuantConnect.Symbol, int, bool, string)", span="481-481"];
m19_288 [cluster="QuantConnect.Orders.OrderResponse.Success(QuantConnect.Orders.OrderRequest)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Orders.OrderResponse.Success(QuantConnect.Orders.OrderRequest)", span="120-120"];
m19_122 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetGeneratedAndClosedTimes(QuantConnect.Algorithm.Framework.Alphas.Insight)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetGeneratedAndClosedTimes(QuantConnect.Algorithm.Framework.Alphas.Insight)", span="248-248"];
m19_126 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetGeneratedAndClosedTimes(QuantConnect.Algorithm.Framework.Alphas.Insight)", file="QCAlgorithmFramework.cs", label="Security security", span="254-254"];
m19_127 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetGeneratedAndClosedTimes(QuantConnect.Algorithm.Framework.Alphas.Insight)", file="QCAlgorithmFramework.cs", label="SecurityExchangeHours exchangeHours", span="255-255"];
m19_128 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetGeneratedAndClosedTimes(QuantConnect.Algorithm.Framework.Alphas.Insight)", color=green, community=0, file="QCAlgorithmFramework.cs", label="Securities.TryGetValue(insight.Symbol, out security)", prediction=9, span="256-256"];
m19_130 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetGeneratedAndClosedTimes(QuantConnect.Algorithm.Framework.Alphas.Insight)", color=green, community=0, file="QCAlgorithmFramework.cs", label="barSize = security.Resolution.ToTimeSpan()", prediction=10, span="259-259"];
m19_131 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetGeneratedAndClosedTimes(QuantConnect.Algorithm.Framework.Alphas.Insight)", file="QCAlgorithmFramework.cs", label="barSize = insight.Period.ToHigherResolutionEquivalent(false).ToTimeSpan()", span="263-263"];
m19_129 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetGeneratedAndClosedTimes(QuantConnect.Algorithm.Framework.Alphas.Insight)", color=green, community=0, file="QCAlgorithmFramework.cs", label="exchangeHours = security.Exchange.Hours", prediction=11, span="258-258"];
m19_132 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetGeneratedAndClosedTimes(QuantConnect.Algorithm.Framework.Alphas.Insight)", file="QCAlgorithmFramework.cs", label="exchangeHours = MarketHoursDatabase.GetExchangeHours(insight.Symbol.ID.Market, insight.Symbol, insight.Symbol.SecurityType)", span="264-264"];
m19_74 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label=i, span="132-132"];
m19_203 [cluster="int.ToString()", file="QCAlgorithmFramework.cs", label="Entry int.ToString()", span="0-0"];
m19_110 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, double, decimal, string)", file="QCAlgorithmFramework.cs", label="return LimitOrder(symbol, (decimal)quantity, limitPrice, tag);", span="352-352"];
m19_111 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, double, decimal, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, double, decimal, string)", span="350-350"];
m19_112 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, decimal, decimal, string)", file="QCAlgorithmFramework.cs", label="var security = Securities[symbol]", span="365-365"];
m19_60 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="var ticket = Transactions.AddOrder(request)", span="230-230"];
m19_58 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="preOrderCheckResponse.IsError", span="224-224"];
m19_164 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Securities.Option.OptionStrategy, int)", span="531-531"];
m19_165 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="return Order(strategy, Math.Abs(quantity) * -1);", span="533-533"];
m19_166 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Securities.Option.OptionStrategy, int)", span="531-531"];
m19_17 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", span="90-90"];
m19_18 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", span="276-276"];
m19_19 [cluster="QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel.CreateUniverses(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel.CreateUniverses(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", span="31-31"];
m19_67 [cluster="QuantConnect.Algorithm.QCAlgorithm.Debug(string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Debug(string)", span="1727-1727"];
m19_324 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, float, bool, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, float, bool, string)", span="857-857"];
m19_325 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, float, bool, string)", file="QCAlgorithmFramework.cs", label="SetHoldings(symbol, (decimal)percentage, liquidateExistingHoldings, tag)", span="859-859"];
m19_326 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, float, bool, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, float, bool, string)", span="857-857"];
m19_0 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", span="77-77"];
m19_1 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", file="QCAlgorithmFramework.cs", label="_securityValuesProvider = new AlgorithmSecurityValuesProvider(this)", span="79-79"];
m19_2 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", file="QCAlgorithmFramework.cs", label="Execution = new ImmediateExecutionModel()", span="82-82"];
m19_69 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateSubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.Securities.Security, decimal, string, QuantConnect.Interfaces.IOrderProperties, decimal, decimal)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.CreateSubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.Securities.Security, decimal, string, QuantConnect.Interfaces.IOrderProperties, decimal, decimal)", span="1007-1007"];
m19_133 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", span="432-432"];
m19_136 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, decimal, decimal, decimal, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, decimal, decimal, decimal, string)", span="460-460"];
m19_134 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", file="QCAlgorithmFramework.cs", label="return StopLimitOrder(symbol, (decimal)quantity, stopPrice, limitPrice, tag);", span="434-434"];
m19_123 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, double, decimal, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, double, decimal, string)", span="397-397"];
m19_124 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, double, decimal, string)", file="QCAlgorithmFramework.cs", label="return StopMarketOrder(symbol, (decimal)quantity, stopPrice, tag);", span="399-399"];
m19_135 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", span="432-432"];
m19_137 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, double, decimal, decimal, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, double, decimal, decimal, string)", span="446-446"];
m19_125 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, double, decimal, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, double, decimal, string)", span="397-397"];
m19_138 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, double, decimal, decimal, string)", file="QCAlgorithmFramework.cs", label="return StopLimitOrder(symbol, (decimal)quantity, stopPrice, limitPrice, tag);", span="448-448"];
m19_169 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", span="547-547"];
m19_170 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="var orders = new List<OrderTicket>()", span="549-549"];
m19_171 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="var strategyTag = strategy.Name + '' ('' + strategyQuantity.ToString() + '')''", span="552-552"];
m19_172 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="strategy.OptionLegs != null", span="555-555"];
m19_173 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="strategy.OptionLegs", span="557-557"];
m19_174 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="var optionSeq = Securities.Where(kv => kv.Key.Underlying == strategy.Underlying &&\r\n                                                            kv.Key.ID.OptionRight == optionLeg.Right &&\r\n                                                            kv.Key.ID.Date == optionLeg.Expiration &&\r\n                                                            kv.Key.ID.StrikePrice == optionLeg.Strike)", span="559-562"];
m19_176 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="var error = string.Format(''Couldn't find the option contract in algorithm securities list. Underlying: {0}, option {1}, strike {2}, expiration: {3}'',\r\n                                strategy.Underlying.ToString(), optionLeg.Right.ToString(), optionLeg.Strike.ToString(), optionLeg.Expiration.ToString())", span="566-567"];
m19_181 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="var marketOrder = MarketOrder(option, optionLeg.Quantity * strategyQuantity, tag: strategyTag)", span="576-576"];
m19_184 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="var limitOrder = LimitOrder(option, optionLeg.Quantity * strategyQuantity, optionLeg.OrderPrice, tag: strategyTag)", span="580-580"];
m19_187 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="strategy.UnderlyingLegs != null", span="590-590"];
m19_188 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="strategy.UnderlyingLegs", span="592-592"];
m19_189 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="!Securities.ContainsKey(strategy.Underlying)", span="594-594"];
m19_190 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="var error = string.Format(''Couldn't find the option contract underlying in algorithm securities list. Underlying: {0}'', strategy.Underlying.ToString())", span="596-596"];
m19_194 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="var marketOrder = MarketOrder(strategy.Underlying, underlyingLeg.Quantity * strategyQuantity, tag: strategyTag)", span="603-603"];
m19_197 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="var limitOrder = LimitOrder(strategy.Underlying, underlyingLeg.Quantity * strategyQuantity, underlyingLeg.OrderPrice, tag: strategyTag)", span="607-607"];
m19_182 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="orders.Add(marketOrder)", span="577-577"];
m19_185 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="orders.Add(limitOrder)", span="581-581"];
m19_195 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="orders.Add(marketOrder)", span="604-604"];
m19_198 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="orders.Add(limitOrder)", span="608-608"];
m19_200 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="return orders;", span="615-615"];
m19_179 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="optionLeg.OrderType", span="573-573"];
m19_186 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="throw new InvalidOperationException(''Order type is not supported in option strategy: '' + optionLeg.OrderType.ToString());", span="584-584"];
m19_175 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="optionSeq.Count() != 1", span="564-564"];
m19_178 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="var option = optionSeq.First().Key", span="571-571"];
m19_177 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="throw new InvalidOperationException(error);", span="568-568"];
m19_180 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="OrderType.Market", span="575-575"];
m19_183 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="OrderType.Limit", span="579-579"];
m19_192 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="underlyingLeg.OrderType", span="600-600"];
m19_199 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="throw new InvalidOperationException(''Order type is not supported in option strategy: '' + underlyingLeg.OrderType.ToString());", span="611-611"];
m19_191 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="throw new InvalidOperationException(error);", span="597-597"];
m19_193 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="OrderType.Market", span="602-602"];
m19_196 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="OrderType.Limit", span="606-606"];
m19_201 [cluster="QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.GenerateOrders(QuantConnect.Securities.Option.OptionStrategy, int)", span="547-547"];
m19_284 [cluster="string.ToLower()", file="QCAlgorithmFramework.cs", label="Entry string.ToLower()", span="0-0"];
m19_205 [cluster="Unk.Count", file="QCAlgorithmFramework.cs", label="Entry Unk.Count", span=""];
m19_217 [cluster="string.Format(string, object)", file="QCAlgorithmFramework.cs", label="Entry string.Format(string, object)", span="0-0"];
m19_107 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", span="337-337"];
m19_108 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, decimal, decimal, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, decimal, decimal, string)", span="363-363"];
m19_109 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, double, decimal, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, double, decimal, string)", span="350-350"];
m19_345 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", span="938-938"];
m19_349 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="var security = Securities[symbol]", span="940-940"];
m19_352 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="var targetPortfolioValue = target * Portfolio.TotalPortfolioValue", span="946-946"];
m19_350 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="security.Price == 0", span="943-943"];
m19_353 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="return security.BuyingPowerModel.GetMaximumOrderQuantityForTargetValue(Portfolio, security, targetPortfolioValue);", span="948-948"];
m19_351 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="return 0;", span="943-943"];
m19_354 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", span="938-938"];
m19_66 [cluster="QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel.ManageRisk(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget[])", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel.ManageRisk(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget[])", span="30-30"];
m19_62 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="Transactions.WaitForOrder(ticket.OrderId)", span="235-235"];
m19_376 [cluster="QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, QuantConnect.Symbol, decimal, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, QuantConnect.Symbol, decimal, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="102-102"];
m19_33 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int)", file="QCAlgorithmFramework.cs", label="return MarketOrder(symbol, (decimal)quantity);", span="138-138"];
m19_55 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", color=green, community=0, file="QCAlgorithmFramework.cs", label=IsWarmingUp, prediction=9, span="217-217"];
m19_46 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, double, bool, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, double, bool, string)", span="184-184"];
m19_54 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", color=green, community=0, file="QCAlgorithmFramework.cs", label="var request = CreateSubmitOrderRequest(OrderType.Market, security, quantity, tag, DefaultOrderProperties?.Clone())", prediction=13, span="214-214"];
m19_56 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", color=green, community=0, file="QCAlgorithmFramework.cs", label="return OrderTicket.InvalidWarmingUp(Transactions, request);", prediction=9, span="219-219"];
m19_53 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="return mooTicket;", span="211-211"];
m19_34 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int)", span="136-136"];
m19_36 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="return MarketOrder(symbol, quantity);", span="147-147"];
m19_37 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal)", span="145-145"];
m19_38 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, bool, string)", span="158-158"];
m19_39 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="return MarketOrder(symbol, quantity, asynchronous, tag);", span="160-160"];
m19_41 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", span="171-171"];
m19_43 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", span="171-171"];
m19_45 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, double, bool, string)", file="QCAlgorithmFramework.cs", label="return MarketOrder(symbol, (decimal)quantity, asynchronous, tag);", span="186-186"];
m19_48 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="!security.Exchange.ExchangeOpen", span="203-203"];
m19_50 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="var anyNonDailySubscriptions = security.Subscriptions.Any(x => x.Resolution != Resolution.Daily)", span="206-206"];
m19_52 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="Debug(''Converted OrderID: '' + mooTicket.OrderId + '' into a MarketOnOpen order.'')", span="209-209"];
m19_44 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, double, bool, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, double, bool, string)", span="184-184"];
m19_47 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="var security = Securities[symbol]", span="199-199"];
m19_51 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="mooTicket.SubmitRequest.Response.IsSuccess && !anyNonDailySubscriptions", span="207-207"];
m19_35 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", span="197-197"];
m19_40 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, bool, string)", span="158-158"];
m19_42 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", file="QCAlgorithmFramework.cs", label="return MarketOrder(symbol, (decimal)quantity, asynchronous, tag);", span="173-173"];
m19_49 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="var mooTicket = MarketOnOpenOrder(security.Symbol, quantity, tag)", span="205-205"];
m19_57 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="var preOrderCheckResponse = PreOrderChecks(request)", span="223-223"];
m19_210 [cluster="string.Format(string, params object[])", file="QCAlgorithmFramework.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m19_119 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", span="384-384"];
m19_120 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", file="QCAlgorithmFramework.cs", label="return StopMarketOrder(symbol, (decimal)quantity, stopPrice, tag);", span="386-386"];
m19_121 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", span="384-384"];
m19_214 [cluster="System.Collections.Generic.List<T>.Add(T)", file="QCAlgorithmFramework.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m19_320 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", span="844-844"];
m19_321 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", file="QCAlgorithmFramework.cs", label="SetHoldings(symbol, (decimal)percentage, liquidateExistingHoldings)", span="846-846"];
m19_322 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", span="844-844"];
m19_283 [cluster="QuantConnect.Orders.OrderResponse.ZeroQuantity(QuantConnect.Orders.OrderRequest)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Orders.OrderResponse.ZeroQuantity(QuantConnect.Orders.OrderRequest)", span="154-154"];
m19_20 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, double)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, double)", span="96-96"];
m19_91 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Exit lambda expression", span="176-176"];
m19_92 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Entry lambda expression", span="180-180"];
m19_93 [cluster="lambda expression", color=green, community=0, file="QCAlgorithmFramework.cs", label="t.ToString()", prediction=15, span="180-180"];
m19_3 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", file="QCAlgorithmFramework.cs", label="RiskManagement = new NullRiskManagementModel()", span="83-83"];
m19_327 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", span="870-870"];
m19_328 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", file="QCAlgorithmFramework.cs", label="SetHoldings(symbol, (decimal)percentage, liquidateExistingHoldings, tag)", span="872-872"];
m19_329 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", span="870-870"];
m19_95 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Entry lambda expression", span="180-180"];
m19_96 [cluster="lambda expression", color=green, community=0, file="QCAlgorithmFramework.cs", label=t, prediction=9, span="180-180"];
m19_97 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Exit lambda expression", span="180-180"];
m19_12 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", file="QCAlgorithmFramework.cs", label=DebugMode, span="99-99"];
m19_8 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", span="90-90"];
m19_204 [cluster="Unk.Where", file="QCAlgorithmFramework.cs", label="Entry Unk.Where", span=""];
m19_287 [cluster="System.DateTime.Subtract(System.TimeSpan)", file="QCAlgorithmFramework.cs", label="Entry System.DateTime.Subtract(System.TimeSpan)", span="0-0"];
m19_310 [cluster="QuantConnect.Securities.SecurityTransactionManager.GetOpenOrders(QuantConnect.Symbol)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.GetOpenOrders(QuantConnect.Symbol)", span="269-269"];
m19_64 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", span="197-197"];
m19_202 [cluster="System.Collections.Generic.List<T>.List()", file="QCAlgorithmFramework.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m19_163 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Securities.Option.OptionStrategy, int)", span="542-542"];
m19_167 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="return GenerateOrders(strategy, quantity);", span="544-544"];
m19_168 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Securities.Option.OptionStrategy, int)", span="542-542"];
m19_65 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="QCAlgorithmFramework.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m19_84 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="t.ToString()", span="171-171"];
m19_85 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Exit lambda expression", span="171-171"];
m19_86 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Entry lambda expression", span="171-171"];
m19_88 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Exit lambda expression", span="171-171"];
m19_89 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Entry lambda expression", span="176-176"];
m19_87 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label=t, span="171-171"];
m19_90 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="pt.Symbol", span="176-176"];
m19_75 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Exit lambda expression", span="132-132"];
m19_76 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Entry lambda expression", span="153-153"];
m19_77 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="t.ToString()", span="153-153"];
m19_219 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="kv.Key.Underlying == strategy.Underlying &&\r\n                                                            kv.Key.ID.OptionRight == optionLeg.Right &&\r\n                                                            kv.Key.ID.Date == optionLeg.Expiration &&\r\n                                                            kv.Key.ID.StrikePrice == optionLeg.Strike", span="559-562"];
m19_218 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Entry lambda expression", span="559-562"];
m19_220 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Exit lambda expression", span="559-562"];
m19_313 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Entry lambda expression", span="774-774"];
m19_314 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="x.Value", span="774-774"];
m19_315 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Exit lambda expression", span="774-774"];
m19_94 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, decimal, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, decimal, string)", span="316-316"];
m19_24 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, float)", file="QCAlgorithmFramework.cs", label="return Order(symbol, (decimal)Math.Abs(quantity) * -1m);", span="109-109"];
m19_23 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, float)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, float)", span="107-107"];
m19_25 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, float)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, float)", span="107-107"];
m19_29 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", span="127-127"];
m19_70 [cluster="QuantConnect.Orders.OrderTicket.InvalidWarmingUp(QuantConnect.Securities.SecurityTransactionManager, QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Orders.OrderTicket.InvalidWarmingUp(QuantConnect.Securities.SecurityTransactionManager, QuantConnect.Orders.SubmitOrderRequest)", span="444-444"];
m19_73 [cluster="QuantConnect.Securities.SecurityTransactionManager.AddOrder(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.AddOrder(QuantConnect.Orders.SubmitOrderRequest)", span="153-153"];
m19_80 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, double, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, double, string)", span="248-248"];
m19_83 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", span="260-260"];
m19_78 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, double, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, double, string)", span="248-248"];
m19_31 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", span="127-127"];
m19_30 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", file="QCAlgorithmFramework.cs", label="return Order(symbol, (decimal)quantity);", span="129-129"];
m19_72 [cluster="QuantConnect.Orders.OrderTicket.InvalidSubmitRequest(QuantConnect.Securities.SecurityTransactionManager, QuantConnect.Orders.SubmitOrderRequest, QuantConnect.Orders.OrderResponse)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Orders.OrderTicket.InvalidSubmitRequest(QuantConnect.Securities.SecurityTransactionManager, QuantConnect.Orders.SubmitOrderRequest, QuantConnect.Orders.OrderResponse)", span="435-435"];
m19_71 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", span="625-625"];
m19_82 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", file="QCAlgorithmFramework.cs", label="return MarketOnOpenOrder(symbol, (decimal)quantity, tag);", span="262-262"];
m19_81 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", span="260-260"];
m19_323 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", span="885-885"];
m19_330 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="Security security", span="888-888"];
m19_331 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="!Securities.TryGetValue(symbol, out security)", span="889-889"];
m19_332 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="Error(symbol.ToString() + '' not found in portfolio. Request this data when initializing the algorithm.'')", span="891-891"];
m19_334 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label=liquidateExistingHoldings, span="896-896"];
m19_338 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="holdingSymbol != symbol && holdings.AbsoluteQuantity > 0", span="902-902"];
m19_340 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="Order(holdingSymbol, liquidationQuantity, false, tag)", span="906-906"];
m19_341 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="var quantity = CalculateOrderQuantity(symbol, percentage)", span="912-912"];
m19_343 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="MarketOrder(symbol, quantity, false, tag)", span="915-915"];
m19_333 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="return;", span="892-892"];
m19_335 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label=Portfolio, span="898-898"];
m19_336 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="var holdingSymbol = kvp.Key", span="900-900"];
m19_337 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="var holdings = kvp.Value", span="901-901"];
m19_339 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="var liquidationQuantity = CalculateOrderQuantity(holdingSymbol, 0m)", span="905-905"];
m19_342 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="Math.Abs(quantity) > 0", span="913-913"];
m19_344 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", span="885-885"];
m19_362 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType)", span="986-986"];
m19_363 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType)", file="QCAlgorithmFramework.cs", label="return Order(symbol, (decimal)quantity);", span="988-988"];
m19_364 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType)", span="986-986"];
m19_113 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetPortfolioConstruction(QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetPortfolioConstruction(QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel)", span="225-225"];
m19_114 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetPortfolioConstruction(QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel)", file="QCAlgorithmFramework.cs", label="PortfolioConstruction = portfolioConstruction", span="227-227"];
m19_116 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetExecution(QuantConnect.Algorithm.Framework.Execution.IExecutionModel)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetExecution(QuantConnect.Algorithm.Framework.Execution.IExecutionModel)", span="234-234"];
m19_117 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetExecution(QuantConnect.Algorithm.Framework.Execution.IExecutionModel)", file="QCAlgorithmFramework.cs", label="Execution = execution", span="236-236"];
m19_115 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetPortfolioConstruction(QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetPortfolioConstruction(QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel)", span="225-225"];
m19_118 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetExecution(QuantConnect.Algorithm.Framework.Execution.IExecutionModel)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetExecution(QuantConnect.Algorithm.Framework.Execution.IExecutionModel)", span="234-234"];
m19_286 [cluster="QuantConnect.Securities.SecurityExchangeHours.GetNextMarketClose(System.DateTime, bool)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.SecurityExchangeHours.GetNextMarketClose(System.DateTime, bool)", span="238-238"];
m19_79 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, double, string)", file="QCAlgorithmFramework.cs", label="return MarketOnOpenOrder(symbol, (decimal)quantity, tag);", span="250-250"];
m19_106 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", file="QCAlgorithmFramework.cs", label="return LimitOrder(symbol, (decimal)quantity, limitPrice, tag);", span="339-339"];
m19_226 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", span="640-640"];
m19_228 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label=IsWarmingUp, span="642-642"];
m19_229 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.WarmingUp(request);", span="644-644"];
m19_231 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="!Securities.TryGetValue(request.Symbol, out security)", span="650-650"];
m19_232 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.MissingSecurity, ''You haven't requested '' + request.Symbol.ToString() + '' data. Add this with AddSecurity() in the Initialize() Method.'');", span="652-652"];
m19_233 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="request.Quantity == 0", span="656-656"];
m19_234 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.ZeroQuantity(request);", span="658-658"];
m19_235 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="Math.Abs(request.Quantity) < security.SymbolProperties.LotSize", span="661-661"];
m19_236 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.OrderQuantityLessThanLoteSize, $''Unable to {request.OrderRequestType.ToString().ToLower()} order with id {request.OrderId} which quantity ({Math.Abs(request.Quantity)}) is less than lot size ({security.SymbolProperties.LotSize}).'');", span="663-663"];
m19_238 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.NonTradableSecurity, ''The security with symbol ''' + request.Symbol.ToString() + ''' is marked as non-tradable.'');", span="668-668"];
m19_240 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="request.OrderType == OrderType.MarketOnClose && !security.Exchange.ExchangeOpen", span="674-674"];
m19_241 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.ExchangeNotOpen, request.OrderType + '' order and exchange not open.'');", span="676-676"];
m19_242 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="request.OrderType == OrderType.OptionExercise && !security.Exchange.ExchangeOpen", span="680-680"];
m19_243 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.ExchangeNotOpen, request.OrderType + '' order and exchange not open.'');", span="682-682"];
m19_245 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.SecurityPriceZero, request.Symbol.ToString() + '': asset price is $0. If using custom data make sure you've set the 'Value' property.'');", span="687-687"];
m19_249 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.QuoteCurrencyRequired, request.Symbol.Value + '': requires '' + quoteCurrency + '' in the cashbook to trade.'');", span="695-695"];
m19_251 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.ConversionRateZero, request.Symbol.Value + '': requires '' + quoteCurrency + '' to have a non-zero conversion rate. This can be caused by lack of data.'');", span="699-699"];
m19_256 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.ForexBaseAndQuoteCurrenciesRequired, request.Symbol.Value + '': requires '' + baseCurrency + '' and '' + quoteCurrency + '' in the cashbook to trade.'');", span="709-709"];
m19_258 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.ForexConversionRateZero, request.Symbol.Value + '': requires '' + baseCurrency + '' and '' + quoteCurrency + '' to have non-zero conversion rates. This can be caused by lack of data.'');", span="713-713"];
m19_260 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.SecurityHasNoData, ''There is no data for this symbol yet, please check the security.HasData flag to ensure there is at least one data point.'');", span="720-720"];
m19_263 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.ExceededMaximumOrders, string.Format(''You have exceeded maximum number of orders ({0}), for unlimited orders upgrade your account.'', _maxOrders));", span="727-727"];
m19_264 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="request.OrderType == OrderType.OptionExercise", span="730-730"];
m19_266 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.NonExercisableSecurity, ''The security with symbol ''' + request.Symbol.ToString() + ''' is not exercisable.'');", span="733-733"];
m19_268 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.UnsupportedRequestType, ''The security with symbol ''' + request.Symbol.ToString() + ''' has a short option position. Only long option positions are exercisable.'');", span="736-736"];
m19_269 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="request.Quantity > security.Holdings.Quantity", span="738-738"];
m19_270 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.UnsupportedRequestType, ''Cannot exercise more contracts of ''' + request.Symbol.ToString() + ''' than is currently available in the portfolio. '');", span="739-739"];
m19_271 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="request.Quantity <= 0.0m", span="741-741"];
m19_272 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="OrderResponse.ZeroQuantity(request)", span="742-742"];
m19_273 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="request.OrderType == OrderType.MarketOnClose", span="745-745"];
m19_277 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Error(request, OrderResponseErrorCode.MarketOnCloseOrderTooLate, ''MarketOnClose orders must be placed with at least a 16 minute buffer before market close.'');", span="755-755"];
m19_278 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return OrderResponse.Success(request);", span="760-760"];
m19_230 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="Security security", span="649-649"];
m19_237 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="!security.IsTradable", span="666-666"];
m19_239 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="var price = security.Price", span="671-671"];
m19_247 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="var quoteCurrency = security.QuoteCurrency.Symbol", span="692-692"];
m19_250 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="security.QuoteCurrency.ConversionRate == 0m", span="697-697"];
m19_252 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="security.Type == SecurityType.Forex || security.Type == SecurityType.Crypto", span="703-703"];
m19_254 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="var baseCurrency = ((IBaseCurrencySymbol)security).BaseCurrencySymbol", span="706-706"];
m19_259 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="!security.HasData", span="718-718"];
m19_265 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="security.Type != SecurityType.Option", span="732-732"];
m19_267 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="security.Holdings.IsShort", span="735-735"];
m19_274 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="var nextMarketClose = security.Exchange.Hours.GetNextMarketClose(security.LocalTime, false)", span="747-747"];
m19_276 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="!security.Exchange.ExchangeOpen || Time > latestSubmissionTime", span="750-750"];
m19_244 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="price == 0", span="685-685"];
m19_246 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="Cash quoteCash", span="691-691"];
m19_248 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="!Portfolio.CashBook.TryGetValue(quoteCurrency, out quoteCash)", span="693-693"];
m19_253 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="Cash baseCash", span="705-705"];
m19_255 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="!Portfolio.CashBook.TryGetValue(baseCurrency, out baseCash)", span="707-707"];
m19_257 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="baseCash.ConversionRate == 0m", span="711-711"];
m19_261 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="Transactions.OrdersCount > _maxOrders", span="724-724"];
m19_262 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="Status = AlgorithmStatus.Stopped", span="726-726"];
m19_275 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="var latestSubmissionTime = nextMarketClose.Subtract(Orders.MarketOnCloseOrder.DefaultSubmissionTimeBuffer)", span="749-749"];
m19_279 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)", span="640-640"];
m19_365 [cluster="QuantConnect.Algorithm.QCAlgorithm.IsMarketOpen(QuantConnect.Symbol)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.IsMarketOpen(QuantConnect.Symbol)", span="996-996"];
m19_366 [cluster="QuantConnect.Algorithm.QCAlgorithm.IsMarketOpen(QuantConnect.Symbol)", file="QCAlgorithmFramework.cs", label="var exchangeHours = MarketHoursDatabase\r\n                .FromDataFolder()\r\n                .GetExchangeHours(symbol.ID.Market, symbol, symbol.SecurityType)", span="998-1000"];
m19_367 [cluster="QuantConnect.Algorithm.QCAlgorithm.IsMarketOpen(QuantConnect.Symbol)", file="QCAlgorithmFramework.cs", label="var time = UtcTime.ConvertFromUtc(exchangeHours.TimeZone)", span="1002-1002"];
m19_368 [cluster="QuantConnect.Algorithm.QCAlgorithm.IsMarketOpen(QuantConnect.Symbol)", file="QCAlgorithmFramework.cs", label="return exchangeHours.IsOpen(time, false);", span="1004-1004"];
m19_369 [cluster="QuantConnect.Algorithm.QCAlgorithm.IsMarketOpen(QuantConnect.Symbol)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.IsMarketOpen(QuantConnect.Symbol)", span="996-996"];
m19_98 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, decimal, string)", file="QCAlgorithmFramework.cs", label="var security = Securities[symbol]", span="318-318"];
m19_99 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, decimal, string)", file="QCAlgorithmFramework.cs", label="var request = CreateSubmitOrderRequest(OrderType.MarketOnClose, security, quantity, tag, DefaultOrderProperties?.Clone())", span="319-319"];
m19_100 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, decimal, string)", file="QCAlgorithmFramework.cs", label="var response = PreOrderChecks(request)", span="320-320"];
m19_101 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, decimal, string)", file="QCAlgorithmFramework.cs", label="response.IsError", span="321-321"];
m19_102 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, decimal, string)", file="QCAlgorithmFramework.cs", label="return OrderTicket.InvalidSubmitRequest(Transactions, request, response);", span="323-323"];
m19_103 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, decimal, string)", file="QCAlgorithmFramework.cs", label="return Transactions.AddOrder(request);", span="326-326"];
m19_104 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, decimal, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, decimal, string)", span="316-316"];
m19_105 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", span="337-337"];
m19_16 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", file="QCAlgorithmFramework.cs", label="base.PostInitialize()", span="112-112"];
m19_32 [cluster="QuantConnect.Symbol.ToString()", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Symbol.ToString()", span="375-375"];
m19_28 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, decimal)", span="118-118"];
m19_207 [cluster="System.Enum.ToString()", file="QCAlgorithmFramework.cs", label="Entry System.Enum.ToString()", span="0-0"];
m19_216 [cluster="QuantConnect.Securities.SecurityManager.ContainsKey(QuantConnect.Symbol)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.SecurityManager.ContainsKey(QuantConnect.Symbol)", span="122-122"];
m19_356 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType, bool, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType, bool, string)", span="962-962"];
m19_357 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType, bool, string)", file="QCAlgorithmFramework.cs", label="return Order(symbol, quantity, asynchronous, tag);", span="964-964"];
m19_358 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType, bool, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int, QuantConnect.Orders.OrderType, bool, string)", span="962-962"];
m19_26 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, decimal)", span="118-118"];
m19_309 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="QCAlgorithmFramework.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
m19_148 [cluster="QuantConnect.Algorithm.QCAlgorithm.ExerciseOption(QuantConnect.Symbol, int, bool, string)", file="QCAlgorithmFramework.cs", label="var option = (Option)Securities[optionSymbol]", span="483-483"];
m19_9 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", span="62-62"];
m19_10 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="return Order(symbol, Math.Abs(quantity));", span="64-64"];
m19_11 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", span="62-62"];
m19_13 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, float)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, float)", span="73-73"];
m19_14 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, float)", file="QCAlgorithmFramework.cs", label="return Order(symbol, (decimal)Math.Abs(quantity));", span="75-75"];
m19_15 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, float)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, float)", span="73-73"];
m19_355 [cluster="QuantConnect.Securities.IBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.IBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", span="57-57"];
m19_221 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="var response = PreOrderChecksImpl(request)", span="627-627"];
m19_222 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="response.IsError", span="628-628"];
m19_223 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="Error(response.ErrorMessage)", span="630-630"];
m19_224 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="return response;", span="632-632"];
m19_225 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)", span="625-625"];
m19_59 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="return OrderTicket.InvalidSubmitRequest(Transactions, request, preOrderCheckResponse);", span="226-226"];
m19_215 [cluster="Unk.LimitOrder", file="QCAlgorithmFramework.cs", label="Entry Unk.LimitOrder", span=""];
m19_145 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, decimal, decimal, decimal, string)", file="QCAlgorithmFramework.cs", label="return Transactions.AddOrder(request);", span="471-471"];
m19_372 [cluster="System.DateTime.ConvertFromUtc(DateTimeZone, bool)", file="QCAlgorithmFramework.cs", label="Entry System.DateTime.ConvertFromUtc(DateTimeZone, bool)", span="605-605"];
m19_373 [cluster="QuantConnect.Securities.SecurityExchangeHours.IsOpen(System.DateTime, bool)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.SecurityExchangeHours.IsOpen(System.DateTime, bool)", span="124-124"];
m19_21 [cluster="QuantConnect.Algorithm.QCAlgorithm.Error(string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Error(string)", span="1724-1724"];
m19_22 [cluster="QuantConnect.Algorithm.QCAlgorithm.PostInitialize()", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.PostInitialize()", span="501-501"];
m19_27 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, decimal)", file="QCAlgorithmFramework.cs", label="return Order(symbol, Math.Abs(quantity) * -1);", span="120-120"];
m19_213 [cluster="Unk.MarketOrder", file="QCAlgorithmFramework.cs", label="Entry Unk.MarketOrder", span=""];
m19_370 [cluster="QuantConnect.Securities.MarketHoursDatabase.FromDataFolder()", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.MarketHoursDatabase.FromDataFolder()", span="98-98"];
m19_143 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, decimal, decimal, decimal, string)", file="QCAlgorithmFramework.cs", label="response.IsError", span="465-465"];
m19_227 [cluster="QuantConnect.Algorithm.QCAlgorithm.Error(string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Error(string)", span="1752-1752"];
m19_285 [cluster="QuantConnect.Securities.CashBook.TryGetValue(string, out QuantConnect.Securities.Cash)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.CashBook.TryGetValue(string, out QuantConnect.Securities.Cash)", span="235-235"];
m19_161 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="return Order(strategy, Math.Abs(quantity));", span="522-522"];
m19_206 [cluster="QuantConnect.Symbol.ToString()", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Symbol.ToString()", span="354-354"];
m19_68 [cluster="System.Collections.Generic.IEnumerable<T>.DistinctBy<T, TPropery>(System.Func<T, TPropery>)", file="QCAlgorithmFramework.cs", label="Entry System.Collections.Generic.IEnumerable<T>.DistinctBy<T, TPropery>(System.Func<T, TPropery>)", span="264-264"];
m19_160 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Securities.Option.OptionStrategy, int)", span="520-520"];
m19_162 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Securities.Option.OptionStrategy, int)", file="QCAlgorithmFramework.cs", label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", span=""];
m19_61 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", file="QCAlgorithmFramework.cs", label="!asynchronous", span="233-233"];
m19_139 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, double, decimal, decimal, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, double, decimal, decimal, string)", span="446-446"];
m19_359 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, QuantConnect.Orders.OrderType)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, QuantConnect.Orders.OrderType)", span="974-974"];
m19_360 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, QuantConnect.Orders.OrderType)", file="QCAlgorithmFramework.cs", label="return Order(symbol, quantity);", span="976-976"];
m19_361 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, QuantConnect.Orders.OrderType)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal, QuantConnect.Orders.OrderType)", span="974-974"];
m19_282 [cluster="QuantConnect.Orders.OrderResponse.Error(QuantConnect.Orders.OrderRequest, QuantConnect.Orders.OrderResponseErrorCode, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Orders.OrderResponse.Error(QuantConnect.Orders.OrderRequest, QuantConnect.Orders.OrderResponseErrorCode, string)", span="128-128"];
m19_140 [cluster="QuantConnect.Algorithm.Framework.Alphas.Analysis.SecurityValues.Get(QuantConnect.Algorithm.Framework.Alphas.InsightType)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Analysis.SecurityValues.Get(QuantConnect.Algorithm.Framework.Alphas.InsightType)", span="89-89"];
m19_141 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, decimal, decimal, decimal, string)", file="QCAlgorithmFramework.cs", label="var request = CreateSubmitOrderRequest(OrderType.StopLimit, security, quantity, tag, stopPrice: stopPrice, limitPrice: limitPrice, properties: DefaultOrderProperties?.Clone())", span="463-463"];
m19_142 [cluster="QuantConnect.Resolution.ToTimeSpan()", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Resolution.ToTimeSpan()", span="724-724"];
m19_144 [cluster="QuantConnect.Securities.MarketHoursDatabase.GetExchangeHours(string, QuantConnect.Symbol, QuantConnect.SecurityType)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.MarketHoursDatabase.GetExchangeHours(string, QuantConnect.Symbol, QuantConnect.SecurityType)", span="74-74"];
m19_146 [cluster="QuantConnect.Time.Max(System.TimeSpan, System.TimeSpan)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Time.Max(System.TimeSpan, System.TimeSpan)", span="195-195"];
m19_280 [cluster="QuantConnect.Orders.OrderResponse.WarmingUp(QuantConnect.Orders.OrderRequest)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Orders.OrderResponse.WarmingUp(QuantConnect.Orders.OrderRequest)", span="164-164"];
m19_5 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, double)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, double)", span="51-51"];
m19_149 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="UniverseSelection == null", span="278-278"];
m19_156 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="throw new Exception($''Framework algorithms must specify an execution model using the '{nameof(Execution)}' property.'');", span="292-292"];
m19_150 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="throw new Exception($''Framework algorithms must specify a portfolio selection model using the '{nameof(UniverseSelection)}' property.'');", span="280-280"];
m19_151 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="Alpha == null", span="282-282"];
m19_152 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="throw new Exception($''Framework algorithms must specify a alpha model using the '{nameof(Alpha)}' property.'');", span="284-284"];
m19_154 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="throw new Exception($''Framework algorithms must specify a portfolio construction model using the '{nameof(PortfolioConstruction)}' property'');", span="288-288"];
m19_155 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="Execution == null", span="290-290"];
m19_153 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="PortfolioConstruction == null", span="286-286"];
m19_157 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="RiskManagement == null", span="294-294"];
m19_158 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="throw new Exception($''Framework algorithms must specify an risk management model using the '{nameof(RiskManagement)}' property.'');", span="296-296"];
m19_159 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", span="276-276"];
m19_316 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(int)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(int)", span="829-829"];
m19_317 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(int)", file="QCAlgorithmFramework.cs", label="!_locked", span="831-831"];
m19_318 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(int)", file="QCAlgorithmFramework.cs", label="_maxOrders = max", span="833-833"];
m19_319 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(int)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(int)", span="829-829"];
m19_212 [cluster="Unk.First", file="QCAlgorithmFramework.cs", label="Entry Unk.First", span=""];
m19_311 [cluster="QuantConnect.Securities.SecurityTransactionManager.GetOrderTicket(int)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.GetOrderTicket(int)", span="225-225"];
m19_209 [cluster="System.DateTime.ToString()", file="QCAlgorithmFramework.cs", label="Entry System.DateTime.ToString()", span="0-0"];
m19_4 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", span="77-77"];
m19_7 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, double)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, double)", span="51-51"];
m19_346 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, double)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, double)", span="925-925"];
m19_347 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, double)", file="QCAlgorithmFramework.cs", label="return CalculateOrderQuantity(symbol, (decimal)target);", span="927-927"];
m19_348 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, double)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, double)", span="925-925"];
m19_63 [cluster="Unk.OnInsightsGenerated", file="QCAlgorithmFramework.cs", label="Entry Unk.OnInsightsGenerated", span=""];
m19_6 [cluster="QuantConnect.Algorithm.Framework.Execution.ImmediateExecutionModel.ImmediateExecutionModel()", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.Execution.ImmediateExecutionModel.ImmediateExecutionModel()", span="26-26"];
m19_211 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="QCAlgorithmFramework.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m19_281 [cluster="QuantConnect.Securities.SecurityManager.TryGetValue(QuantConnect.Symbol, out QuantConnect.Securities.Security)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.SecurityManager.TryGetValue(QuantConnect.Symbol, out QuantConnect.Securities.Security)", span="193-193"];
m19_289 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", span="770-770"];
m19_290 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="var orderIdList = new List<int>()", span="772-772"];
m19_292 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="symbol != symbolToLiquidate && symbolToLiquidate != null", span="777-777"];
m19_302 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="Transactions.CancelOrder(order.Id, tag)", span="806-806"];
m19_304 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="var ticket = Order(symbol, -quantity - marketOrdersQuantity, tag: tag)", span="814-814"];
m19_291 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="Securities.Keys.OrderBy(x => x.Value)", span="774-774"];
m19_306 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="orderIdList.Add(ticket.OrderId)", span="817-817"];
m19_307 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="return orderIdList;", span="822-822"];
m19_293 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="var orders = Transactions.GetOpenOrders(symbol)", span="781-781"];
m19_294 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="var quantity = Portfolio[symbol].Quantity", span="784-784"];
m19_295 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="orders.Count == 1 && quantity != 0 && orders[0].Quantity == -quantity && orders[0].Type == OrderType.Market", span="787-787"];
m19_297 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label=orders, span="792-792"];
m19_303 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="quantity != 0", span="811-811"];
m19_296 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="var marketOrdersQuantity = 0m", span="791-791"];
m19_301 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="marketOrdersQuantity += ticket.Quantity - ticket.QuantityFilled", span="801-801"];
m19_298 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="order.Type == OrderType.Market", span="794-794"];
m19_299 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="var ticket = Transactions.GetOrderTicket(order.Id)", span="797-797"];
m19_300 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="ticket != null", span="798-798"];
m19_305 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="ticket.Status == OrderStatus.Filled", span="815-815"];
m19_308 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", span="770-770"];
m19_374 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateSubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.Securities.Security, decimal, string, QuantConnect.Interfaces.IOrderProperties, decimal, decimal)", file="QCAlgorithmFramework.cs", label="return new SubmitOrderRequest(orderType, security.Type, security.Symbol, quantity, stopPrice, limitPrice, UtcTime, tag, properties);", span="1009-1009"];
m19_375 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateSubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.Securities.Security, decimal, string, QuantConnect.Interfaces.IOrderProperties, decimal, decimal)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.CreateSubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.Securities.Security, decimal, string, QuantConnect.Interfaces.IOrderProperties, decimal, decimal)", span="1007-1007"];
m19_371 [cluster="QuantConnect.Securities.MarketHoursDatabase.GetExchangeHours(string, QuantConnect.Symbol, QuantConnect.SecurityType)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.MarketHoursDatabase.GetExchangeHours(string, QuantConnect.Symbol, QuantConnect.SecurityType)", span="74-74"];
m19_312 [cluster="QuantConnect.Securities.SecurityTransactionManager.CancelOrder(int, string)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.CancelOrder(int, string)", span="173-173"];
m19_208 [cluster="decimal.ToString()", file="QCAlgorithmFramework.cs", label="Entry decimal.ToString()", span="0-0"];
m19_377 [file="QCAlgorithmFramework.cs", label="QuantConnect.Algorithm.QCAlgorithm", span=""];
m19_378 [file="QCAlgorithmFramework.cs", label="QuantConnect.Securities.Option.OptionStrategy", span=""];
m19_379 [file="QCAlgorithmFramework.cs", label=optionLeg, span=""];
m20_17 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="Entry QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", span="52-52"];
m20_0 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.BacktestingRealTimeHandler(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Packets.AlgorithmNodePacket)", file="RegressionTests.cs", label="Entry QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.BacktestingRealTimeHandler(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Packets.AlgorithmNodePacket)", span="91-91"];
m20_8 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetupEvents(System.DateTime)", file="RegressionTests.cs", label="_algorithm.Securities.Values", span="113-113"];
m20_7 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetupEvents(System.DateTime)", file="RegressionTests.cs", label="ClearEvents()", span="109-109"];
m20_9 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetupEvents(System.DateTime)", file="RegressionTests.cs", label="Log.Debug(''BacktestingRealTimeHandler.SetupEvents(): Adding End of Day: '' + security.Exchange.MarketClose.Add(TimeSpan.FromMinutes(-10)))", span="116-116"];
m20_3 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.BacktestingRealTimeHandler(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Packets.AlgorithmNodePacket)", file="RegressionTests.cs", label="_job = job", span="96-96"];
m20_6 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetupEvents(System.DateTime)", file="RegressionTests.cs", label="Entry QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetupEvents(System.DateTime)", span="106-106"];
m20_10 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetupEvents(System.DateTime)", file="RegressionTests.cs", label="var closingToday = date.Date + security.Exchange.MarketClose.Add(TimeSpan.FromMinutes(-10))", span="119-119"];
m20_1 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.BacktestingRealTimeHandler(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Packets.AlgorithmNodePacket)", file="RegressionTests.cs", label="_algorithm = algorithm", span="94-94"];
m20_2 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.BacktestingRealTimeHandler(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Packets.AlgorithmNodePacket)", file="RegressionTests.cs", label="_events = new List<RealTimeEvent>()", span="95-95"];
m20_4 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.BacktestingRealTimeHandler(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Packets.AlgorithmNodePacket)", file="RegressionTests.cs", label="Exit QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.BacktestingRealTimeHandler(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Packets.AlgorithmNodePacket)", span="91-91"];
m20_5 [cluster="System.Collections.Generic.List<T>.List()", file="RegressionTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m20_11 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetupEvents(System.DateTime)", file="RegressionTests.cs", label="AddEvent(new RealTimeEvent( closingToday, () =>\r\n                {\r\n                    try\r\n                    {\r\n                        _algorithm.OnEndOfDay();\r\n                        _algorithm.OnEndOfDay(security.Symbol);\r\n                    }\r\n                    catch (Exception err)\r\n                    {\r\n                        Engine.ResultHandler.RuntimeError(''Runtime error in OnEndOfDay event: '' + err.Message, err.StackTrace);\r\n                        Log.Error(''BacktestingRealTimeHandler.SetupEvents(): EOD: '' + err.Message);\r\n                    }\r\n                }))", span="121-133"];
m20_45 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var basicTemplateCryptoAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''10''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.17%''},\r\n                {''Compounding Annual Return'', ''-99.993%''},\r\n                {''Drawdown'', ''3.800%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-2.577%''},\r\n                {''Sharpe Ratio'', ''-15.89''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-5.559''},\r\n                {''Beta'', ''333.506''},\r\n                {''Annual Standard Deviation'', ''0.205''},\r\n                {''Annual Variance'', ''0.042''},\r\n                {''Information Ratio'', ''-15.972''},\r\n                {''Tracking Error'', ''0.204''},\r\n                {''Treynor Ratio'', ''-0.01''},\r\n                {''Total Fees'', ''$96.51''}\r\n            }", span="688-709"];
m20_15 [cluster="System.TimeSpan.Add(System.TimeSpan)", file="RegressionTests.cs", label="Entry System.TimeSpan.Add(System.TimeSpan)", span="0-0"];
m20_57 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetTime(System.DateTime)", file="RegressionTests.cs", label="_time = time", span="205-205"];
m20_14 [cluster="System.TimeSpan.FromMinutes(double)", file="RegressionTests.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m20_12 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetupEvents(System.DateTime)", file="RegressionTests.cs", label="Exit QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetupEvents(System.DateTime)", span="106-106"];
m20_58 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetTime(System.DateTime)", file="RegressionTests.cs", label="ScanEvents()", span="209-209"];
m20_21 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var basicTemplateOptionsStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.28%''},\r\n                {''Compounding Annual Return'', ''-78.105%''},\r\n                {''Drawdown'', ''0.300%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.280%''},\r\n                {''Sharpe Ratio'', ''0''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="136-157"];
m20_23 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var updateOrderRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''21''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-1.71%''},\r\n                {''Compounding Annual Return'', ''-8.289%''},\r\n                {''Drawdown'', ''16.700%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-15.892%''},\r\n                {''Sharpe Ratio'', ''-1.358''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.065''},\r\n                {''Beta'', ''-0.998''},\r\n                {''Annual Standard Deviation'', ''0.062''},\r\n                {''Annual Variance'', ''0.004''},\r\n                {''Information Ratio'', ''-1.679''},\r\n                {''Tracking Error'', ''0.062''},\r\n                {''Treynor Ratio'', ''0.085''},\r\n                {''Total Fees'', ''$21.00''},\r\n            }", span="182-203"];
m20_24 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var regressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''5433''},\r\n                {''Average Win'', ''0.00%''},\r\n                {''Average Loss'', ''0.00%''},\r\n                {''Compounding Annual Return'', ''-3.886%''},\r\n                {''Drawdown'', ''0.100%''},\r\n                {''Expectancy'', ''-0.991''},\r\n                {''Net Profit'', ''-0.054%''},\r\n                {''Sharpe Ratio'', ''-30.336''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''2.40''},\r\n                {''Alpha'', ''-0.019''},\r\n                {''Beta'', ''-0.339''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''-38.93''},\r\n                {''Tracking Error'', ''0.001''},\r\n                {''Treynor Ratio'', ''0.067''},\r\n                {''Total Fees'', ''$5433.00''}\r\n            }", span="205-226"];
m20_19 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var basicTemplateStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''264.956%''},\r\n                {''Drawdown'', ''2.200%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.669%''},\r\n                {''Sharpe Ratio'', ''4.411''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.007''},\r\n                {''Beta'', ''76.375''},\r\n                {''Annual Standard Deviation'', ''0.193''},\r\n                {''Annual Variance'', ''0.037''},\r\n                {''Information Ratio'', ''4.355''},\r\n                {''Tracking Error'', ''0.193''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$3.09''}\r\n            }", span="77-98"];
m20_20 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var basicTemplateFrameworkStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''264.956%''},\r\n                {''Drawdown'', ''2.200%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.669%''},\r\n                {''Sharpe Ratio'', ''4.411''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.007''},\r\n                {''Beta'', ''76.375''},\r\n                {''Annual Standard Deviation'', ''0.193''},\r\n                {''Annual Variance'', ''0.037''},\r\n                {''Information Ratio'', ''4.355''},\r\n                {''Tracking Error'', ''0.193''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$3.09''},\r\n                {''Total Insights Generated'', ''100''},\r\n                {''Total Insights Closed'', ''99''},\r\n                {''Total Insights Analysis Completed'', ''86''},\r\n                {''Long Insight Count'', ''100''},\r\n                {''Short Insight Count'', ''0''},\r\n                {''Long/Short Ratio'', ''100%''},\r\n                {''Estimated Monthly Alpha Value'', ''$151474.9016''},\r\n                {''Total Accumulated Estimated Alpha Value'', ''$24404.2897''},\r\n                {''Mean Population Estimated Insight Value'', ''$246.508''},\r\n                {''Mean Population Direction'', ''48.8372%''},\r\n                {''Mean Population Magnitude'', ''48.8372%''},\r\n                {''Rolling Averaged Population Direction'', ''68.2411%''},\r\n                {''Rolling Averaged Population Magnitude'', ''68.2411%''}\r\n            }", span="100-134"];
m20_22 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var limitFillRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''34''},\r\n                {''Average Win'', ''0.02%''},\r\n                {''Average Loss'', ''-0.02%''},\r\n                {''Compounding Annual Return'', ''9.733%''},\r\n                {''Drawdown'', ''0.400%''},\r\n                {''Expectancy'', ''0.513''},\r\n                {''Net Profit'', ''0.119%''},\r\n                {''Sharpe Ratio'', ''1.954''},\r\n                {''Loss Rate'', ''25%''},\r\n                {''Win Rate'', ''75%''},\r\n                {''Profit-Loss Ratio'', ''1.02''},\r\n                {''Alpha'', ''-0.107''},\r\n                {''Beta'', ''15.186''},\r\n                {''Annual Standard Deviation'', ''0.031''},\r\n                {''Annual Variance'', ''0.001''},\r\n                {''Information Ratio'', ''1.6''},\r\n                {''Tracking Error'', ''0.031''},\r\n                {''Treynor Ratio'', ''0.004''},\r\n                {''Total Fees'', ''$34.00''},\r\n            }", span="159-180"];
m20_25 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var universeSelectionRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''5''},\r\n                {''Average Win'', ''0.70%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''-73.872%''},\r\n                {''Drawdown'', ''6.600%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''-6.060%''},\r\n                {''Sharpe Ratio'', ''-3.973''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''100%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.68''},\r\n                {''Beta'', ''-29.799''},\r\n                {''Annual Standard Deviation'', ''0.318''},\r\n                {''Annual Variance'', ''0.101''},\r\n                {''Information Ratio'', ''-4.034''},\r\n                {''Tracking Error'', ''0.318''},\r\n                {''Treynor Ratio'', ''0.042''},\r\n                {''Total Fees'', ''$5.00''},\r\n            }", span="228-249"];
m20_59 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetTime(System.DateTime)", file="RegressionTests.cs", label="Exit QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetTime(System.DateTime)", span="191-191"];
m20_60 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.Exit()", file="RegressionTests.cs", label="Entry QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.Exit()", span="215-215"];
m20_29 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var dropboxUniverseSelectionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''66''},\r\n                {''Average Win'', ''1.06%''},\r\n                {''Average Loss'', ''-0.50%''},\r\n                {''Compounding Annual Return'', ''18.581%''},\r\n                {''Drawdown'', ''7.100%''},\r\n                {''Expectancy'', ''0.815''},\r\n                {''Net Profit'', ''18.581%''},\r\n                {''Sharpe Ratio'', ''1.44''},\r\n                {''Loss Rate'', ''42%''},\r\n                {''Win Rate'', ''58%''},\r\n                {''Profit-Loss Ratio'', ''2.13''},\r\n                {''Alpha'', ''0.309''},\r\n                {''Beta'', ''-10.101''},\r\n                {''Annual Standard Deviation'', ''0.1''},\r\n                {''Annual Variance'', ''0.01''},\r\n                {''Information Ratio'', ''1.277''},\r\n                {''Tracking Error'', ''0.1''},\r\n                {''Treynor Ratio'', ''-0.014''},\r\n                {''Total Fees'', ''$185.37''},\r\n            }", span="320-341"];
m20_55 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetTime(System.DateTime)", file="RegressionTests.cs", label="ScanEvents()", span="198-198"];
m20_63 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="RegressionTests.cs", label="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler", span=""];
m20_64 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="RegressionTests.cs", label=security, span=""];
m20_65 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="RegressionTests.cs", label="Language = language", span="980-980"];
m20_66 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="RegressionTests.cs", label="Exit QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", span="976-976"];
m20_27 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var addRemoveSecurityRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''5''},\r\n                {''Average Win'', ''0.49%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''307.853%''},\r\n                {''Drawdown'', ''1.400%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.814%''},\r\n                {''Sharpe Ratio'', ''6.474''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''100%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.004''},\r\n                {''Beta'', ''82.594''},\r\n                {''Annual Standard Deviation'', ''0.141''},\r\n                {''Annual Variance'', ''0.02''},\r\n                {''Information Ratio'', ''6.4''},\r\n                {''Tracking Error'', ''0.141''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$25.20''}\r\n            }", span="274-295"];
m20_61 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.Exit()", file="RegressionTests.cs", label="_exitTriggered = true", span="217-217"];
m20_53 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="Exit QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", span="52-52"];
m20_54 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.SetTime(System.DateTime)", file="RegressionTests.cs", label="_time.Date != time.Date", span="194-194"];
m20_56 [cluster="Unk.Select", file="RegressionTests.cs", label="Entry Unk.Select", span=""];
m20_16 [cluster="QuantConnect.Logging.Log.Debug(string, int, int)", file="RegressionTests.cs", label="Entry QuantConnect.Logging.Log.Debug(string, int, int)", span="148-148"];
m20_42 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var hourSplitStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''-0.096%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''-0.001%''},\r\n                {''Sharpe Ratio'', ''-11.225''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$1.00''}\r\n            }", span="619-640"];
m20_30 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var parameterizedStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''278.616%''},\r\n                {''Drawdown'', ''0.300%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.717%''},\r\n                {''Sharpe Ratio'', ''11.017''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''78.067''},\r\n                {''Annual Standard Deviation'', ''0.078''},\r\n                {''Annual Variance'', ''0.006''},\r\n                {''Information Ratio'', ''10.897''},\r\n                {''Tracking Error'', ''0.078''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$3.09''},\r\n            }", span="343-364"];
m20_31 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var historyAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''372.677%''},\r\n                {''Drawdown'', ''1.100%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.717%''},\r\n                {''Sharpe Ratio'', ''4.521''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''79.192''},\r\n                {''Annual Standard Deviation'', ''0.193''},\r\n                {''Annual Variance'', ''0.037''},\r\n                {''Information Ratio'', ''4.466''},\r\n                {''Tracking Error'', ''0.193''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$3.09''},\r\n            }", span="366-387"];
m20_32 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var coarseFundamentalTop5AlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''10''},\r\n                {''Average Win'', ''1.15%''},\r\n                {''Average Loss'', ''-0.47%''},\r\n                {''Compounding Annual Return'', ''-0.746%''},\r\n                {''Drawdown'', ''3.000%''},\r\n                {''Expectancy'', ''-0.313''},\r\n                {''Net Profit'', ''-0.746%''},\r\n                {''Sharpe Ratio'', ''-0.267''},\r\n                {''Loss Rate'', ''80%''},\r\n                {''Win Rate'', ''20%''},\r\n                {''Profit-Loss Ratio'', ''2.44''},\r\n                {''Alpha'', ''-0.008''},\r\n                {''Beta'', ''0.032''},\r\n                {''Annual Standard Deviation'', ''0.027''},\r\n                {''Annual Variance'', ''0.001''},\r\n                {''Information Ratio'', ''-1.014''},\r\n                {''Tracking Error'', ''0.027''},\r\n                {''Treynor Ratio'', ''-0.222''},\r\n                {''Total Fees'', ''$10.61''},\r\n            }", span="389-410"];
m20_52 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", color=green, community=0, file="RegressionTests.cs", label="return new List<AlgorithmStatisticsTestParameters>\r\n            {\r\n                // CSharp\r\n                new AlgorithmStatisticsTestParameters(''AddRemoveSecurityRegressionAlgorithm'', addRemoveSecurityRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateAlgorithm'', basicTemplateStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateFrameworkAlgorithm'', basicTemplateFrameworkStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateOptionsAlgorithm'', basicTemplateOptionsStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''CustomDataRegressionAlgorithm'', customDataRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''DropboxBaseDataUniverseSelectionAlgorithm'', dropboxBaseDataUniverseSelectionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''DropboxUniverseSelectionAlgorithm'', dropboxUniverseSelectionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''LimitFillRegressionAlgorithm'', limitFillRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''ParameterizedAlgorithm'', parameterizedStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''RegressionAlgorithm'', regressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''UniverseSelectionRegressionAlgorithm'', universeSelectionRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''UpdateOrderRegressionAlgorithm'', updateOrderRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''HistoryAlgorithm'', historyAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''CoarseFundamentalTop5Algorithm'', coarseFundamentalTop5AlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''CoarseFineFundamentalRegressionAlgorithm'', coarseFineFundamentalRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''MACDTrendAlgorithm'', macdTrendAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionSplitRegressionAlgorithm'', optionSplitRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionRenameRegressionAlgorithm'', optionRenameRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionOpenInterestRegressionAlgorithm'', optionOpenInterestRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionChainConsistencyRegressionAlgorithm'', optionChainConsistencyRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''WeeklyUniverseSelectionRegressionAlgorithm'', weeklyUniverseSelectionRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionExerciseAssignRegressionAlgorithm'',optionExerciseAssignRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateDailyAlgorithm'', basicTemplateDailyStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''HourSplitRegressionAlgorithm'', hourSplitStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''HourReverseSplitRegressionAlgorithm'', hourReverseSplitStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''FractionalQuantityRegressionAlgorithm'', fractionalQuantityRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateCryptoAlgorithm'', basicTemplateCryptoAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateFrameworkCryptoAlgorithm'', basicTemplateCryptoAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''IndicatorSuiteAlgorithm'', indicatorSuiteAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''ForexInternalFeedOnDataSameResolutionRegressionAlgorithm'', emptyStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''ForexInternalFeedOnDataHigherResolutionRegressionAlgorithm'', emptyStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateIntrinioEconomicData'', basicTemplateIntrinioEconomicData, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''DuplicateSecurityWithBenchmarkRegressionAlgorithm'', emptyStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''VolumeWeightedAveragePriceExecutionModelRegressionAlgorithm'', volumeWeightedAveragePriceExecutionModelRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''StandardDeviationExecutionModelRegressionAlgorithm'', standardDeviationExecutionModelRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''CancelOpenOrdersRegressionAlgorithm'', cancelOpenOrdersRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''ScheduledUniverseSelectionModelRegressionAlgorithm'', scheduledUniverseSelectionModelRegressionAlgorithmStatistics, Language.CSharp),\r\n\r\n                // Python\r\n                new AlgorithmStatisticsTestParameters(''AddRemoveSecurityRegressionAlgorithm'', addRemoveSecurityRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateAlgorithm'', basicTemplateStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateFrameworkAlgorithm'', basicTemplateFrameworkStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateOptionsAlgorithm'', basicTemplateOptionsStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''CustomDataRegressionAlgorithm'', customDataRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''DropboxBaseDataUniverseSelectionAlgorithm'', dropboxBaseDataUniverseSelectionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''DropboxUniverseSelectionAlgorithm'', dropboxUniverseSelectionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''LimitFillRegressionAlgorithm'', limitFillRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''ParameterizedAlgorithm'', parameterizedStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''RegressionAlgorithm'', regressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''UniverseSelectionRegressionAlgorithm'', universeSelectionRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''UpdateOrderRegressionAlgorithm'', updateOrderRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''HistoryAlgorithm'', historyAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''CoarseFundamentalTop5Algorithm'', coarseFundamentalTop5AlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''CoarseFineFundamentalRegressionAlgorithm'', coarseFineFundamentalRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''MACDTrendAlgorithm'', macdTrendAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionSplitRegressionAlgorithm'', optionSplitRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionRenameRegressionAlgorithm'', optionRenameRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionOpenInterestRegressionAlgorithm'', optionOpenInterestRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionChainConsistencyRegressionAlgorithm'', optionChainConsistencyRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''WeeklyUniverseSelectionRegressionAlgorithm'', weeklyUniverseSelectionRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionExerciseAssignRegressionAlgorithm'',optionExerciseAssignRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateDailyAlgorithm'', basicTemplateDailyStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''HourSplitRegressionAlgorithm'', hourSplitStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''HourReverseSplitRegressionAlgorithm'', hourReverseSplitStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''FractionalQuantityRegressionAlgorithm'', fractionalQuantityRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''CustomIndicatorAlgorithm'', basicTemplateStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateCryptoAlgorithm'', basicTemplateCryptoAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''IndicatorSuiteAlgorithm'', indicatorSuiteAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''ScheduledUniverseSelectionModelRegressionAlgorithm'', scheduledUniverseSelectionModelRegressionAlgorithmStatistics, Language.Python),\r\n\r\n                // FSharp\r\n                // new AlgorithmStatisticsTestParameters(''BasicTemplateAlgorithm'', basicTemplateStatistics, Language.FSharp),\r\n\r\n                // VisualBasic\r\n                // new AlgorithmStatisticsTestParameters(''BasicTemplateAlgorithm'', basicTemplateStatistics, Language.VisualBasic),\r\n            }.Select(x => new TestCaseData(x).SetName(x.Language + ''/'' + x.Algorithm)).ToArray();", prediction=17, span="888-966"];
m20_46 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var indicatorSuiteAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''19.097%''},\r\n                {''Drawdown'', ''7.300%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''41.840%''},\r\n                {''Sharpe Ratio'', ''1.639''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.29''},\r\n                {''Beta'', ''-5.494''},\r\n                {''Annual Standard Deviation'', ''0.11''},\r\n                {''Annual Variance'', ''0.012''},\r\n                {''Information Ratio'', ''1.457''},\r\n                {''Tracking Error'', ''0.11''},\r\n                {''Treynor Ratio'', ''-0.033''},\r\n                {''Total Fees'', ''$1.00''}\r\n            }", span="711-732"];
m20_47 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var basicTemplateIntrinioEconomicData = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''89''},\r\n                {''Average Win'', ''0.09%''},\r\n                {''Average Loss'', ''-0.01%''},\r\n                {''Compounding Annual Return'', ''5.704%''},\r\n                {''Drawdown'', ''4.800%''},\r\n                {''Expectancy'', ''1.469''},\r\n                {''Net Profit'', ''24.865%''},\r\n                {''Sharpe Ratio'', ''1.143''},\r\n                {''Loss Rate'', ''70%''},\r\n                {''Win Rate'', ''30%''},\r\n                {''Profit-Loss Ratio'', ''7.23''},\r\n                {''Alpha'', ''0.065''},\r\n                {''Beta'', ''-0.522''},\r\n                {''Annual Standard Deviation'', ''0.048''},\r\n                {''Annual Variance'', ''0.002''},\r\n                {''Information Ratio'', ''0.74''},\r\n                {''Tracking Error'', ''0.048''},\r\n                {''Treynor Ratio'', ''-0.105''},\r\n                {''Total Fees'', ''$100.58''}\r\n            }", span="734-755"];
m20_48 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var volumeWeightedAveragePriceExecutionModelRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''61''},\r\n                {''Average Win'', ''0.10%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''585.503%''},\r\n                {''Drawdown'', ''0.600%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''2.492%''},\r\n                {''Sharpe Ratio'', ''9.136''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''100%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''113.313''},\r\n                {''Annual Standard Deviation'', ''0.137''},\r\n                {''Annual Variance'', ''0.019''},\r\n                {''Information Ratio'', ''9.063''},\r\n                {''Tracking Error'', ''0.137''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$96.79''},\r\n                {''Total Insights Generated'', ''5''},\r\n                {''Total Insights Closed'', ''3''},\r\n                {''Total Insights Analysis Completed'', ''0''},\r\n                {''Long Insight Count'', ''3''},\r\n                {''Short Insight Count'', ''2''},\r\n                {''Long/Short Ratio'', ''150.0%''},\r\n                {''Estimated Monthly Alpha Value'', ''$54250.3481''},\r\n                {''Total Accumulated Estimated Alpha Value'', ''$8740.3339''},\r\n                {''Mean Population Estimated Insight Value'', ''$2913.4446''},\r\n                {''Mean Population Direction'', ''0%''},\r\n                {''Mean Population Magnitude'', ''0%''},\r\n                {''Rolling Averaged Population Direction'', ''0%''},\r\n                {''Rolling Averaged Population Magnitude'', ''0%''},\r\n            }", span="757-791"];
m20_49 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var standardDeviationExecutionModelRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''63''},\r\n                {''Average Win'', ''0.06%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''793.499%''},\r\n                {''Drawdown'', ''0.400%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''2.840%''},\r\n                {''Sharpe Ratio'', ''10.781''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''100%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''128.815''},\r\n                {''Annual Standard Deviation'', ''0.132''},\r\n                {''Annual Variance'', ''0.017''},\r\n                {''Information Ratio'', ''10.71''},\r\n                {''Tracking Error'', ''0.132''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$76.61''},\r\n                {''Total Insights Generated'', ''5''},\r\n                {''Total Insights Closed'', ''3''},\r\n                {''Total Insights Analysis Completed'', ''0''},\r\n                {''Long Insight Count'', ''3''},\r\n                {''Short Insight Count'', ''2''},\r\n                {''Long/Short Ratio'', ''150.0%''},\r\n                {''Estimated Monthly Alpha Value'', ''$54250.3481''},\r\n                {''Total Accumulated Estimated Alpha Value'', ''$8740.3339''},\r\n                {''Mean Population Estimated Insight Value'', ''$2913.4446''},\r\n                {''Mean Population Direction'', ''0%''},\r\n                {''Mean Population Magnitude'', ''0%''},\r\n                {''Rolling Averaged Population Direction'', ''0%''},\r\n                {''Rolling Averaged Population Magnitude'', ''0%''},\r\n            }", span="793-827"];
m20_50 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var cancelOpenOrdersRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''-100.000%''},\r\n                {''Drawdown'', ''5.800%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''-3.339%''},\r\n                {''Sharpe Ratio'', ''-11.206''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-8.422''},\r\n                {''Beta'', ''610.348''},\r\n                {''Annual Standard Deviation'', ''0.375''},\r\n                {''Annual Variance'', ''0.141''},\r\n                {''Information Ratio'', ''-11.243''},\r\n                {''Tracking Error'', ''0.375''},\r\n                {''Treynor Ratio'', ''-0.007''},\r\n                {''Total Fees'', ''$0.00''}\r\n            }", span="829-850"];
m20_51 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var scheduledUniverseSelectionModelRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''17''},\r\n                {''Average Win'', ''0.26%''},\r\n                {''Average Loss'', ''-0.11%''},\r\n                {''Compounding Annual Return'', ''26.961%''},\r\n                {''Drawdown'', ''0.700%''},\r\n                {''Expectancy'', ''1.895''},\r\n                {''Net Profit'', ''2.115%''},\r\n                {''Sharpe Ratio'', ''4.218''},\r\n                {''Loss Rate'', ''12%''},\r\n                {''Win Rate'', ''88%''},\r\n                {''Profit-Loss Ratio'', ''2.31''},\r\n                {''Alpha'', ''0.327''},\r\n                {''Beta'', ''-9.439''},\r\n                {''Annual Standard Deviation'', ''0.043''},\r\n                {''Annual Variance'', ''0.002''},\r\n                {''Information Ratio'', ''3.864''},\r\n                {''Tracking Error'', ''0.043''},\r\n                {''Treynor Ratio'', ''-0.019''},\r\n                {''Total Fees'', ''$0.00''},\r\n                {''Total Insights Generated'', ''54''},\r\n                {''Total Insights Closed'', ''52''},\r\n                {''Total Insights Analysis Completed'', ''46''},\r\n                {''Long Insight Count'', ''54''},\r\n                {''Short Insight Count'', ''0''},\r\n                {''Long/Short Ratio'', ''100%''},\r\n                {''Estimated Monthly Alpha Value'', ''$0''},\r\n                {''Total Accumulated Estimated Alpha Value'', ''$0''},\r\n                {''Mean Population Estimated Insight Value'', ''$0''},\r\n                {''Mean Population Direction'', ''43.4783%''},\r\n                {''Mean Population Magnitude'', ''0%''},\r\n                {''Rolling Averaged Population Direction'', ''65.5952%''},\r\n                {''Rolling Averaged Population Magnitude'', ''0%''},\r\n            }", span="852-886"];
m20_13 [cluster="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.ClearEvents()", file="RegressionTests.cs", label="Entry QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler.ClearEvents()", span="170-170"];
m20_62 [cluster="Unk.SetName", file="RegressionTests.cs", label="Entry Unk.SetName", span=""];
m20_35 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var optionSplitRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'',''2''},\r\n                {''Average Win'',''0%''},\r\n                {''Average Loss'',''-0.02%''},\r\n                {''Compounding Annual Return'',''-1.242%''},\r\n                {''Drawdown'',''0.000%''},\r\n                {''Expectancy'',''-1''},\r\n                {''Net Profit'',''-0.017%''},\r\n                {''Sharpe Ratio'',''-7.099''},\r\n                {''Loss Rate'',''100%''},\r\n                {''Win Rate'',''0%''},\r\n                {''Profit-Loss Ratio'',''0''},\r\n                {''Alpha'',''-0.01''},\r\n                {''Beta'',''0''},\r\n                {''Annual Standard Deviation'',''0.001''},\r\n                {''Annual Variance'',''0''},\r\n                {''Information Ratio'',''7.126''},\r\n                {''Tracking Error'',''6.064''},\r\n                {''Treynor Ratio'',''174.306''},\r\n                {''Total Fees'',''$0.50''},\r\n            }", span="458-479"];
m20_18 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var emptyStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''0''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''0%''},\r\n                {''Drawdown'', ''0%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''0%''},\r\n                {''Sharpe Ratio'', ''0''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$0.00''}\r\n            }", span="54-75"];
m20_33 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var coarseFineFundamentalRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''6''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.84%''},\r\n                {''Compounding Annual Return'', ''-57.345%''},\r\n                {''Drawdown'', ''9.100%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-6.763%''},\r\n                {''Sharpe Ratio'', ''-3.288''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.105''},\r\n                {''Beta'', ''-46.73''},\r\n                {''Annual Standard Deviation'', ''0.235''},\r\n                {''Annual Variance'', ''0.055''},\r\n                {''Information Ratio'', ''-3.366''},\r\n                {''Tracking Error'', ''0.236''},\r\n                {''Treynor Ratio'', ''0.017''},\r\n                {''Total Fees'', ''$13.92''},\r\n            }", span="412-433"];
m20_34 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var macdTrendAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''84''},\r\n                {''Average Win'', ''4.79%''},\r\n                {''Average Loss'', ''-4.17%''},\r\n                {''Compounding Annual Return'', ''2.967%''},\r\n                {''Drawdown'', ''34.800%''},\r\n                {''Expectancy'', ''0.228''},\r\n                {''Net Profit'', ''37.970%''},\r\n                {''Sharpe Ratio'', ''0.299''},\r\n                {''Loss Rate'', ''43%''},\r\n                {''Win Rate'', ''57%''},\r\n                {''Profit-Loss Ratio'', ''1.15''},\r\n                {''Alpha'', ''0.111''},\r\n                {''Beta'', ''-3.721''},\r\n                {''Annual Standard Deviation'', ''0.124''},\r\n                {''Annual Variance'', ''0.015''},\r\n                {''Information Ratio'', ''0.137''},\r\n                {''Tracking Error'', ''0.124''},\r\n                {''Treynor Ratio'', ''-0.01''},\r\n                {''Total Fees'', ''$420.57''},\r\n            }", span="435-456"];
m20_26 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var customDataRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''155.365%''},\r\n                {''Drawdown'', ''84.800%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''5123.170%''},\r\n                {''Sharpe Ratio'', ''1.2''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.008''},\r\n                {''Beta'', ''73.725''},\r\n                {''Annual Standard Deviation'', ''0.84''},\r\n                {''Annual Variance'', ''0.706''},\r\n                {''Information Ratio'', ''1.183''},\r\n                {''Tracking Error'', ''0.84''},\r\n                {''Treynor Ratio'', ''0.014''},\r\n                {''Total Fees'', ''$0.00''}\r\n            }", span="251-272"];
m20_36 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var optionRenameRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''4''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.02%''},\r\n                {''Compounding Annual Return'', ''-0.472%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.006%''},\r\n                {''Sharpe Ratio'', ''-3.403''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.016''},\r\n                {''Beta'', ''-0.001''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''10.014''},\r\n                {''Tracking Error'', ''0.877''},\r\n                {''Treynor Ratio'', ''4.203''},\r\n                {''Total Fees'', ''$2.50''},\r\n            }", span="481-502"];
m20_37 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var optionOpenInterestRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.01%''},\r\n                {''Compounding Annual Return'', ''-2.042%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.010%''},\r\n                {''Sharpe Ratio'', ''-11.225''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''-0.036''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''-11.225''},\r\n                {''Tracking Error'', ''0.033''},\r\n                {''Treynor Ratio'', ''0.355''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="504-525"];
m20_38 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var optionChainConsistencyRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-3.86%''},\r\n                {''Compounding Annual Return'', ''-100.000%''},\r\n                {''Drawdown'', ''3.900%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-3.855%''},\r\n                {''Sharpe Ratio'', ''0''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="527-548"];
m20_39 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var weeklyUniverseSelectionRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''8''},\r\n                {''Average Win'', ''0.28%''},\r\n                {''Average Loss'', ''-0.33%''},\r\n                {''Compounding Annual Return'', ''-1.247%''},\r\n                {''Drawdown'', ''1.300%''},\r\n                {''Expectancy'', ''-0.078''},\r\n                {''Net Profit'', ''-0.105%''},\r\n                {''Sharpe Ratio'', ''-0.27''},\r\n                {''Loss Rate'', ''50%''},\r\n                {''Win Rate'', ''50%''},\r\n                {''Profit-Loss Ratio'', ''0.84''},\r\n                {''Alpha'', ''-0.239''},\r\n                {''Beta'', ''12.675''},\r\n                {''Annual Standard Deviation'', ''0.04''},\r\n                {''Annual Variance'', ''0.002''},\r\n                {''Information Ratio'', ''-0.723''},\r\n                {''Tracking Error'', ''0.04''},\r\n                {''Treynor Ratio'', ''-0.001''},\r\n                {''Total Fees'', ''$23.23''},\r\n            }", span="550-571"];
m20_40 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var optionExerciseAssignRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''4''},\r\n                {''Average Win'', ''0.30%''},\r\n                {''Average Loss'', ''-0.33%''},\r\n                {''Compounding Annual Return'', ''-85.023%''},\r\n                {''Drawdown'', ''0.400%''},\r\n                {''Expectancy'', ''-0.358''},\r\n                {''Net Profit'', ''-0.350%''},\r\n                {''Sharpe Ratio'', ''0''},\r\n                {''Loss Rate'', ''67%''},\r\n                {''Win Rate'', ''33%''},\r\n                {''Profit-Loss Ratio'', ''0.93''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="573-594"];
m20_41 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var basicTemplateDailyStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''244.780%''},\r\n                {''Drawdown'', ''1.100%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''4.153%''},\r\n                {''Sharpe Ratio'', ''6.461''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.706''},\r\n                {''Beta'', ''15.77''},\r\n                {''Annual Standard Deviation'', ''0.146''},\r\n                {''Annual Variance'', ''0.021''},\r\n                {''Information Ratio'', ''6.359''},\r\n                {''Tracking Error'', ''0.146''},\r\n                {''Treynor Ratio'', ''0.06''},\r\n                {''Total Fees'', ''$3.09''},\r\n            }", span="596-617"];
m20_43 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var hourReverseSplitStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''-1.444%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''-0.007%''},\r\n                {''Sharpe Ratio'', ''-11.225''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$1.00''}\r\n            }", span="642-663"];
m20_44 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var fractionalQuantityRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''6''},\r\n                {''Average Win'', ''0.95%''},\r\n                {''Average Loss'', ''-2.02%''},\r\n                {''Compounding Annual Return'', ''254.082%''},\r\n                {''Drawdown'', ''6.600%''},\r\n                {''Expectancy'', ''-0.018''},\r\n                {''Net Profit'', ''1.395%''},\r\n                {''Sharpe Ratio'', ''1.176''},\r\n                {''Loss Rate'', ''33%''},\r\n                {''Win Rate'', ''67%''},\r\n                {''Profit-Loss Ratio'', ''0.47''},\r\n                {''Alpha'', ''-1.18''},\r\n                {''Beta'', ''1.249''},\r\n                {''Annual Standard Deviation'', ''0.813''},\r\n                {''Annual Variance'', ''0.66''},\r\n                {''Information Ratio'', ''-4.244''},\r\n                {''Tracking Error'', ''0.178''},\r\n                {''Treynor Ratio'', ''0.765''},\r\n                {''Total Fees'', ''$2045.20''}\r\n            }", span="665-686"];
m20_28 [cluster="QuantConnect.Lean.Engine.Results.IResultHandler.RuntimeError(string, string)", file="RegressionTests.cs", label="Entry QuantConnect.Lean.Engine.Results.IResultHandler.RuntimeError(string, string)", span="121-121"];
m20_67 [file="RegressionTests.cs", label="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters", span=""];
m21_56 [cluster="decimal.Decimal(double)", file="RenkoConsolidator.cs", label="Entry decimal.Decimal(double)", span="0-0"];
m21_9 [cluster="QuantConnect.Indicators.AverageTrueRange.AverageTrueRange(string, int, QuantConnect.Indicators.MovingAverageType)", file="RenkoConsolidator.cs", label="Entry QuantConnect.Indicators.AverageTrueRange.AverageTrueRange(string, int, QuantConnect.Indicators.MovingAverageType)", span="56-56"];
m21_10 [cluster="QuantConnect.Indicators.MovingAverageType.AsIndicator(string, int)", file="RenkoConsolidator.cs", label="Entry QuantConnect.Indicators.MovingAverageType.AsIndicator(string, int)", span="75-75"];
m21_53 [cluster="System.Console.WriteLine(string)", file="RenkoConsolidator.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m21_11 [cluster="QuantConnect.Indicators.FunctionalIndicator<T>.FunctionalIndicator(string, System.Func<T, decimal>, System.Func<QuantConnect.Indicators.IndicatorBase<T>, bool>, System.Action)", file="RenkoConsolidator.cs", label="Entry QuantConnect.Indicators.FunctionalIndicator<T>.FunctionalIndicator(string, System.Func<T, decimal>, System.Func<QuantConnect.Indicators.IndicatorBase<T>, bool>, System.Action)", span="55-55"];
m21_2 [cluster="QuantConnect.Indicators.KeltnerChannels.KeltnerChannels(string, int, decimal, QuantConnect.Indicators.MovingAverageType)", file="RenkoConsolidator.cs", label="Entry QuantConnect.Indicators.KeltnerChannels.KeltnerChannels(string, int, decimal, QuantConnect.Indicators.MovingAverageType)", span="80-80"];
m21_3 [cluster="QuantConnect.Indicators.KeltnerChannels.KeltnerChannels(string, int, decimal, QuantConnect.Indicators.MovingAverageType)", file="RenkoConsolidator.cs", label="_k = k", span="83-83"];
m21_4 [cluster="QuantConnect.Indicators.KeltnerChannels.KeltnerChannels(string, int, decimal, QuantConnect.Indicators.MovingAverageType)", file="RenkoConsolidator.cs", label="AverageTrueRange = new AverageTrueRange(name + ''_AverageTrueRange'', period, MovingAverageType.Simple)", span="86-86"];
m21_5 [cluster="QuantConnect.Indicators.KeltnerChannels.KeltnerChannels(string, int, decimal, QuantConnect.Indicators.MovingAverageType)", file="RenkoConsolidator.cs", label="MiddleBand = movingAverageType.AsIndicator(name + ''_MiddleBand'', period)", span="87-87"];
m21_6 [cluster="QuantConnect.Indicators.KeltnerChannels.KeltnerChannels(string, int, decimal, QuantConnect.Indicators.MovingAverageType)", file="RenkoConsolidator.cs", label="LowerBand = new FunctionalIndicator<TradeBar>(name + ''_LowerBand'',\r\n                input => ComputeLowerBand(),\r\n                lowerBand => MiddleBand.IsReady,\r\n                () => MiddleBand.Reset()\r\n                )", span="90-94"];
m21_7 [cluster="QuantConnect.Indicators.KeltnerChannels.KeltnerChannels(string, int, decimal, QuantConnect.Indicators.MovingAverageType)", file="RenkoConsolidator.cs", label="UpperBand = new FunctionalIndicator<TradeBar>(name + ''_UpperBand'',\r\n                input => ComputeUpperBand(),\r\n                upperBand => MiddleBand.IsReady,\r\n                () => MiddleBand.Reset()\r\n                )", span="97-101"];
m21_8 [cluster="QuantConnect.Indicators.KeltnerChannels.KeltnerChannels(string, int, decimal, QuantConnect.Indicators.MovingAverageType)", file="RenkoConsolidator.cs", label="Exit QuantConnect.Indicators.KeltnerChannels.KeltnerChannels(string, int, decimal, QuantConnect.Indicators.MovingAverageType)", span="80-80"];
m21_50 [cluster="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Update(System.DateTime, decimal)", file="RenkoConsolidator.cs", label="Entry QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Update(System.DateTime, decimal)", span="36-36"];
m21_33 [cluster="QuantConnect.Indicators.KeltnerChannels.Reset()", file="RenkoConsolidator.cs", label="Entry QuantConnect.Indicators.KeltnerChannels.Reset()", span="115-115"];
m21_34 [cluster="QuantConnect.Indicators.KeltnerChannels.Reset()", color=green, community=0, file="RenkoConsolidator.cs", label="AverageTrueRange.Reset()", prediction=18, span="117-117"];
m21_35 [cluster="QuantConnect.Indicators.KeltnerChannels.Reset()", color=green, community=0, file="RenkoConsolidator.cs", label="MiddleBand.Reset()", prediction=18, span="118-118"];
m21_36 [cluster="QuantConnect.Indicators.KeltnerChannels.Reset()", color=green, community=0, file="RenkoConsolidator.cs", label="UpperBand.Reset()", prediction=18, span="119-119"];
m21_37 [cluster="QuantConnect.Indicators.KeltnerChannels.Reset()", color=green, community=0, file="RenkoConsolidator.cs", label="LowerBand.Reset()", prediction=18, span="120-120"];
m21_38 [cluster="QuantConnect.Indicators.KeltnerChannels.Reset()", color=green, community=0, file="RenkoConsolidator.cs", label="base.Reset()", prediction=18, span="121-121"];
m21_39 [cluster="QuantConnect.Indicators.KeltnerChannels.Reset()", file="RenkoConsolidator.cs", label="Exit QuantConnect.Indicators.KeltnerChannels.Reset()", span="115-115"];
m21_49 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Update(T)", file="RenkoConsolidator.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.Update(T)", span="74-74"];
m21_51 [cluster="System.DateTime.ToString(string)", file="RenkoConsolidator.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m21_26 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeUpperBand()", file="RenkoConsolidator.cs", label="Entry QuantConnect.Indicators.KeltnerChannels.ComputeUpperBand()", span="154-154"];
m21_57 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeUpperBand()", color=green, community=0, file="RenkoConsolidator.cs", label="return MiddleBand.IsReady ? MiddleBand + AverageTrueRange*_k : new decimal(0.0);", prediction=18, span="156-156"];
m21_58 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeUpperBand()", file="RenkoConsolidator.cs", label="Exit QuantConnect.Indicators.KeltnerChannels.ComputeUpperBand()", span="154-154"];
m21_22 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Reset()", file="RenkoConsolidator.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.Reset()", span="102-102"];
m21_15 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeLowerBand()", file="RenkoConsolidator.cs", label="Entry QuantConnect.Indicators.KeltnerChannels.ComputeLowerBand()", span="146-146"];
m21_54 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeLowerBand()", color=green, community=0, file="RenkoConsolidator.cs", label="return MiddleBand.IsReady ? MiddleBand - AverageTrueRange*_k : new decimal(0.0);", prediction=18, span="148-148"];
m21_55 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeLowerBand()", file="RenkoConsolidator.cs", label="Exit QuantConnect.Indicators.KeltnerChannels.ComputeLowerBand()", span="146-146"];
m21_40 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeNextValue(QuantConnect.Data.Market.TradeBar)", file="RenkoConsolidator.cs", label="Entry QuantConnect.Indicators.KeltnerChannels.ComputeNextValue(QuantConnect.Data.Market.TradeBar)", span="129-129"];
m21_41 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeNextValue(QuantConnect.Data.Market.TradeBar)", color=green, community=0, file="RenkoConsolidator.cs", label="AverageTrueRange.Update(input)", prediction=18, span="131-131"];
m21_42 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeNextValue(QuantConnect.Data.Market.TradeBar)", color=green, community=0, file="RenkoConsolidator.cs", label="var typicalPrice = (input.High + input.Low + input.Close)/3m", prediction=18, span="133-133"];
m21_43 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeNextValue(QuantConnect.Data.Market.TradeBar)", color=green, community=0, file="RenkoConsolidator.cs", label="MiddleBand.Update(input.Time, typicalPrice)", prediction=18, span="134-134"];
m21_44 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeNextValue(QuantConnect.Data.Market.TradeBar)", color=green, community=0, file="RenkoConsolidator.cs", label="Console.WriteLine(input.Time.ToString(''yyyymmdd'') + ''\t'' + typicalPrice.SmartRounding() + ''\t'' + MiddleBand.Current.Value.SmartRounding())", prediction=18, span="135-135"];
m21_45 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeNextValue(QuantConnect.Data.Market.TradeBar)", color=green, community=0, file="RenkoConsolidator.cs", label="LowerBand.Update(input)", prediction=18, span="138-138"];
m21_46 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeNextValue(QuantConnect.Data.Market.TradeBar)", color=green, community=0, file="RenkoConsolidator.cs", label="UpperBand.Update(input)", prediction=18, span="139-139"];
m21_47 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeNextValue(QuantConnect.Data.Market.TradeBar)", color=green, community=0, file="RenkoConsolidator.cs", label="return MiddleBand;", prediction=18, span="140-140"];
m21_48 [cluster="QuantConnect.Indicators.KeltnerChannels.ComputeNextValue(QuantConnect.Data.Market.TradeBar)", file="RenkoConsolidator.cs", label="Exit QuantConnect.Indicators.KeltnerChannels.ComputeNextValue(QuantConnect.Data.Market.TradeBar)", span="129-129"];
m21_52 [cluster="decimal.SmartRounding()", file="RenkoConsolidator.cs", label="Entry decimal.SmartRounding()", span="173-173"];
m21_30 [cluster="lambda expression", file="RenkoConsolidator.cs", label="Entry lambda expression", span="100-100"];
m21_13 [cluster="lambda expression", file="RenkoConsolidator.cs", label="ComputeLowerBand()", span="91-91"];
m21_17 [cluster="lambda expression", file="RenkoConsolidator.cs", label="MiddleBand.IsReady", span="92-92"];
m21_20 [cluster="lambda expression", file="RenkoConsolidator.cs", label="MiddleBand.Reset()", span="93-93"];
m21_24 [cluster="lambda expression", file="RenkoConsolidator.cs", label="ComputeUpperBand()", span="98-98"];
m21_28 [cluster="lambda expression", file="RenkoConsolidator.cs", label="MiddleBand.IsReady", span="99-99"];
m21_31 [cluster="lambda expression", file="RenkoConsolidator.cs", label="MiddleBand.Reset()", span="100-100"];
m21_12 [cluster="lambda expression", file="RenkoConsolidator.cs", label="Entry lambda expression", span="91-91"];
m21_14 [cluster="lambda expression", file="RenkoConsolidator.cs", label="Exit lambda expression", span="91-91"];
m21_16 [cluster="lambda expression", file="RenkoConsolidator.cs", label="Entry lambda expression", span="92-92"];
m21_18 [cluster="lambda expression", file="RenkoConsolidator.cs", label="Exit lambda expression", span="92-92"];
m21_19 [cluster="lambda expression", file="RenkoConsolidator.cs", label="Entry lambda expression", span="93-93"];
m21_21 [cluster="lambda expression", file="RenkoConsolidator.cs", label="Exit lambda expression", span="93-93"];
m21_23 [cluster="lambda expression", file="RenkoConsolidator.cs", label="Entry lambda expression", span="98-98"];
m21_25 [cluster="lambda expression", file="RenkoConsolidator.cs", label="Exit lambda expression", span="98-98"];
m21_27 [cluster="lambda expression", file="RenkoConsolidator.cs", label="Entry lambda expression", span="99-99"];
m21_29 [cluster="lambda expression", file="RenkoConsolidator.cs", label="Exit lambda expression", span="99-99"];
m21_32 [cluster="lambda expression", file="RenkoConsolidator.cs", label="Exit lambda expression", span="100-100"];
m21_59 [file="RenkoConsolidator.cs", label="QuantConnect.Indicators.KeltnerChannels", span=""];
m23_26 [cluster="QuantConnect.Securities.SecurityHolding.SetLeverage(decimal)", file="RsiAlphaModelTests.cs", label="Entry QuantConnect.Securities.SecurityHolding.SetLeverage(decimal)", span="396-396"];
m23_27 [cluster="QuantConnect.Securities.SecurityHolding.SetLeverage(decimal)", file="RsiAlphaModelTests.cs", label="_leverage = leverage", span="398-398"];
m23_28 [cluster="QuantConnect.Securities.SecurityHolding.SetLeverage(decimal)", file="RsiAlphaModelTests.cs", label="Exit QuantConnect.Securities.SecurityHolding.SetLeverage(decimal)", span="396-396"];
m23_13 [cluster="QuantConnect.Securities.SecurityHolding.AddNewProfit(decimal)", file="RsiAlphaModelTests.cs", label="Entry QuantConnect.Securities.SecurityHolding.AddNewProfit(decimal)", span="360-360"];
m23_14 [cluster="QuantConnect.Securities.SecurityHolding.AddNewProfit(decimal)", file="RsiAlphaModelTests.cs", label="_profit += profitLoss", span="362-362"];
m23_15 [cluster="QuantConnect.Securities.SecurityHolding.AddNewProfit(decimal)", file="RsiAlphaModelTests.cs", label="Exit QuantConnect.Securities.SecurityHolding.AddNewProfit(decimal)", span="360-360"];
m23_45 [cluster="QuantConnect.Securities.Interfaces.ISecurityTransactionModel.GetOrderFee(decimal, decimal)", file="RsiAlphaModelTests.cs", label="Entry QuantConnect.Securities.Interfaces.ISecurityTransactionModel.GetOrderFee(decimal, decimal)", span="84-84"];
m23_29 [cluster="QuantConnect.Securities.SecurityHolding.UpdatePrice(decimal)", file="RsiAlphaModelTests.cs", label="Entry QuantConnect.Securities.SecurityHolding.UpdatePrice(decimal)", span="405-405"];
m23_30 [cluster="QuantConnect.Securities.SecurityHolding.UpdatePrice(decimal)", file="RsiAlphaModelTests.cs", label="_price = closingPrice", span="407-407"];
m23_31 [cluster="QuantConnect.Securities.SecurityHolding.UpdatePrice(decimal)", file="RsiAlphaModelTests.cs", label="Exit QuantConnect.Securities.SecurityHolding.UpdatePrice(decimal)", span="405-405"];
m23_32 [cluster="QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", file="RsiAlphaModelTests.cs", label="Entry QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", span="414-414"];
m23_33 [cluster="QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", file="RsiAlphaModelTests.cs", label="decimal gross = 0, net = 0", span="416-416"];
m23_34 [cluster="QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", file="RsiAlphaModelTests.cs", label="decimal orderFee = 0", span="417-417"];
m23_42 [cluster="QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", file="RsiAlphaModelTests.cs", label="net = gross - orderFee", span="440-440"];
m23_35 [cluster="QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", file="RsiAlphaModelTests.cs", label="AbsoluteQuantity > 0", span="419-419"];
m23_36 [cluster="QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", file="RsiAlphaModelTests.cs", label="orderFee = _model.GetOrderFee(AbsoluteQuantity, _price)", span="421-421"];
m23_37 [cluster="QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", file="RsiAlphaModelTests.cs", label=IsLong, span="424-424"];
m23_38 [cluster="QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", file="RsiAlphaModelTests.cs", label="gross = (_price - AveragePrice) * AbsoluteQuantity", span="427-427"];
m23_39 [cluster="QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", file="RsiAlphaModelTests.cs", label=IsShort, span="429-429"];
m23_40 [cluster="QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", file="RsiAlphaModelTests.cs", label="gross = (AveragePrice - _price) * AbsoluteQuantity", span="432-432"];
m23_41 [cluster="QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", file="RsiAlphaModelTests.cs", label="return 0;", span="437-437"];
m23_43 [cluster="QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", file="RsiAlphaModelTests.cs", label="return net;", span="442-442"];
m23_44 [cluster="QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", file="RsiAlphaModelTests.cs", label="Exit QuantConnect.Securities.SecurityHolding.TotalCloseProfit()", span="414-414"];
m23_2 [cluster="QuantConnect.Securities.SecurityHolding.SecurityHolding(string, QuantConnect.SecurityType, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", file="RsiAlphaModelTests.cs", label="Entry QuantConnect.Securities.SecurityHolding.SecurityHolding(string, QuantConnect.SecurityType, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", span="62-62"];
m23_3 [cluster="QuantConnect.Securities.SecurityHolding.SecurityHolding(string, QuantConnect.SecurityType, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", file="RsiAlphaModelTests.cs", label="_model = transactionModel", span="64-64"];
m23_4 [cluster="QuantConnect.Securities.SecurityHolding.SecurityHolding(string, QuantConnect.SecurityType, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", file="RsiAlphaModelTests.cs", label="_symbol = symbol", span="65-65"];
m23_5 [cluster="QuantConnect.Securities.SecurityHolding.SecurityHolding(string, QuantConnect.SecurityType, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", file="RsiAlphaModelTests.cs", label="_leverage = leverage", span="66-66"];
m23_6 [cluster="QuantConnect.Securities.SecurityHolding.SecurityHolding(string, QuantConnect.SecurityType, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", file="RsiAlphaModelTests.cs", label="_securityType = type", span="67-67"];
m23_7 [cluster="QuantConnect.Securities.SecurityHolding.SecurityHolding(string, QuantConnect.SecurityType, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", file="RsiAlphaModelTests.cs", label="_totalSaleVolume = 0", span="69-69"];
m23_8 [cluster="QuantConnect.Securities.SecurityHolding.SecurityHolding(string, QuantConnect.SecurityType, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", file="RsiAlphaModelTests.cs", label="_lastTradeProfit = 0", span="70-70"];
m23_9 [cluster="QuantConnect.Securities.SecurityHolding.SecurityHolding(string, QuantConnect.SecurityType, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", file="RsiAlphaModelTests.cs", label="Exit QuantConnect.Securities.SecurityHolding.SecurityHolding(string, QuantConnect.SecurityType, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", span="62-62"];
m23_0 [cluster="QuantConnect.Securities.SecurityHolding.SecurityHolding(string, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", file="RsiAlphaModelTests.cs", label="Entry QuantConnect.Securities.SecurityHolding.SecurityHolding(string, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", span="54-54"];
m23_1 [cluster="QuantConnect.Securities.SecurityHolding.SecurityHolding(string, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", file="RsiAlphaModelTests.cs", label="Exit QuantConnect.Securities.SecurityHolding.SecurityHolding(string, decimal, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", span="54-54"];
m23_22 [cluster="QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", file="RsiAlphaModelTests.cs", label="Entry QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", span="386-386"];
m23_23 [cluster="QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", file="RsiAlphaModelTests.cs", label="_averagePrice = averagePrice", span="388-388"];
m23_24 [cluster="QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", file="RsiAlphaModelTests.cs", label="_quantity = quantity", span="389-389"];
m23_25 [cluster="QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", file="RsiAlphaModelTests.cs", label="Exit QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", span="386-386"];
m23_19 [cluster="QuantConnect.Securities.SecurityHolding.SetLastTradeProfit(decimal)", file="RsiAlphaModelTests.cs", label="Entry QuantConnect.Securities.SecurityHolding.SetLastTradeProfit(decimal)", span="378-378"];
m23_20 [cluster="QuantConnect.Securities.SecurityHolding.SetLastTradeProfit(decimal)", file="RsiAlphaModelTests.cs", label="_lastTradeProfit = lastTradeProfit", span="380-380"];
m23_21 [cluster="QuantConnect.Securities.SecurityHolding.SetLastTradeProfit(decimal)", file="RsiAlphaModelTests.cs", label="Exit QuantConnect.Securities.SecurityHolding.SetLastTradeProfit(decimal)", span="378-378"];
m23_10 [cluster="QuantConnect.Securities.SecurityHolding.AddNewFee(decimal)", file="RsiAlphaModelTests.cs", label="Entry QuantConnect.Securities.SecurityHolding.AddNewFee(decimal)", span="351-351"];
m23_11 [cluster="QuantConnect.Securities.SecurityHolding.AddNewFee(decimal)", file="RsiAlphaModelTests.cs", label="_totalFees += newFee", span="353-353"];
m23_12 [cluster="QuantConnect.Securities.SecurityHolding.AddNewFee(decimal)", file="RsiAlphaModelTests.cs", label="Exit QuantConnect.Securities.SecurityHolding.AddNewFee(decimal)", span="351-351"];
m23_16 [cluster="QuantConnect.Securities.SecurityHolding.AddNewSale(decimal)", file="RsiAlphaModelTests.cs", label="Entry QuantConnect.Securities.SecurityHolding.AddNewSale(decimal)", span="369-369"];
m23_17 [cluster="QuantConnect.Securities.SecurityHolding.AddNewSale(decimal)", file="RsiAlphaModelTests.cs", label="_totalSaleVolume += saleValue", span="371-371"];
m23_18 [cluster="QuantConnect.Securities.SecurityHolding.AddNewSale(decimal)", file="RsiAlphaModelTests.cs", label="Exit QuantConnect.Securities.SecurityHolding.AddNewSale(decimal)", span="369-369"];
m23_46 [file="RsiAlphaModelTests.cs", label="QuantConnect.Securities.SecurityHolding", span=""];
m24_10 [cluster="QuantConnect.Notifications.NotificationEmail.NotificationEmail(string, string, string, string)", file="SerializedInsight.cs", label="Entry QuantConnect.Notifications.NotificationEmail.NotificationEmail(string, string, string, string)", span="124-124"];
m24_11 [cluster="QuantConnect.Notifications.NotificationEmail.NotificationEmail(string, string, string, string)", file="SerializedInsight.cs", label="Message = message", span="126-126"];
m24_12 [cluster="QuantConnect.Notifications.NotificationEmail.NotificationEmail(string, string, string, string)", file="SerializedInsight.cs", label="Data = data", span="127-127"];
m24_13 [cluster="QuantConnect.Notifications.NotificationEmail.NotificationEmail(string, string, string, string)", file="SerializedInsight.cs", label="Subject = subject", span="128-128"];
m24_14 [cluster="QuantConnect.Notifications.NotificationEmail.NotificationEmail(string, string, string, string)", file="SerializedInsight.cs", label="Address = address", span="129-129"];
m24_15 [cluster="QuantConnect.Notifications.NotificationEmail.NotificationEmail(string, string, string, string)", file="SerializedInsight.cs", label="Exit QuantConnect.Notifications.NotificationEmail.NotificationEmail(string, string, string, string)", span="124-124"];
m24_6 [cluster="QuantConnect.Notifications.NotificationSms.NotificationSms(string, string)", file="SerializedInsight.cs", label="Entry QuantConnect.Notifications.NotificationSms.NotificationSms(string, string)", span="84-84"];
m24_7 [cluster="QuantConnect.Notifications.NotificationSms.NotificationSms(string, string)", file="SerializedInsight.cs", label="PhoneNumber = number", span="86-86"];
m24_8 [cluster="QuantConnect.Notifications.NotificationSms.NotificationSms(string, string)", file="SerializedInsight.cs", label="Message = message", span="87-87"];
m24_9 [cluster="QuantConnect.Notifications.NotificationSms.NotificationSms(string, string)", file="SerializedInsight.cs", label="Exit QuantConnect.Notifications.NotificationSms.NotificationSms(string, string)", span="84-84"];
m24_0 [cluster="QuantConnect.Notifications.Notification.Send()", file="SerializedInsight.cs", label="Entry QuantConnect.Notifications.Notification.Send()", span="31-31"];
m24_1 [cluster="QuantConnect.Notifications.Notification.Send()", file="SerializedInsight.cs", label="Exit QuantConnect.Notifications.Notification.Send()", span="31-31"];
m24_2 [cluster="QuantConnect.Notifications.NotificationWeb.NotificationWeb(string, object)", file="SerializedInsight.cs", label="Entry QuantConnect.Notifications.NotificationWeb.NotificationWeb(string, object)", span="57-57"];
m24_3 [cluster="QuantConnect.Notifications.NotificationWeb.NotificationWeb(string, object)", file="SerializedInsight.cs", label="Address = address", span="59-59"];
m24_4 [cluster="QuantConnect.Notifications.NotificationWeb.NotificationWeb(string, object)", file="SerializedInsight.cs", label="Data = data", span="60-60"];
m24_5 [cluster="QuantConnect.Notifications.NotificationWeb.NotificationWeb(string, object)", file="SerializedInsight.cs", label="Exit QuantConnect.Notifications.NotificationWeb.NotificationWeb(string, object)", span="57-57"];
m24_16 [file="SerializedInsight.cs", label="QuantConnect.Notifications.NotificationWeb", span=""];
m24_17 [file="SerializedInsight.cs", label="QuantConnect.Notifications.NotificationSms", span=""];
m24_18 [file="SerializedInsight.cs", label="QuantConnect.Notifications.NotificationEmail", span=""];
m3_18 -> m3_28  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_18 -> m3_29  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m3_18 -> m3_31  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m3_14 -> m3_16  [color=green, key=1, label=security, style=dashed];
m3_20 -> m3_22  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m3_35 -> m3_14  [color=green, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m3_35 -> m3_16  [color=green, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m3_35 -> m3_15  [color=green, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m3_35 -> m3_3  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m3_35 -> m3_4  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m3_35 -> m3_5  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m3_35 -> m3_21  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m3_35 -> m3_23  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m3_35 -> m3_28  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m3_35 -> m3_29  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m3_35 -> m3_31  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m3_60 -> m3_64  [color=darkseagreen4, key=1, label=cash, style=dashed];
m3_2 -> m3_4  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.InsightDirection", style=dashed];
m3_2 -> m3_5  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m3_69 -> m3_1  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_2  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_3  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_4  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_11  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_12  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_13  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_14  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_15  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_16  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_17  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_18  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_19  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_20  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_21  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_22  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_23  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_24  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_25  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_26  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_27  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_28  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_29  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_30  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_31  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_32  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_33  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_34  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_35  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_36  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_38  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_44  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_45  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_46  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_47  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m3_69 -> m3_49  [color=darkseagreen4, key=1, label="QuantConnect.TestCashStrategy", style=dashed];
m4_14 -> m4_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_22 -> m4_14  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests", style=dashed];
m4_22 -> m4_19  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.Framework.Alphas.ConstantAlphaModelTests", style=dashed];
m6_12 -> m6_15  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m6_12 -> m6_17  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m6_12 -> m6_20  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m6_13 -> m6_23  [color=darkseagreen4, key=1, label=stop, style=dashed];
m6_14 -> m6_23  [color=darkseagreen4, key=1, label=previousStop, style=dashed];
m6_28 -> m6_5  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters", style=dashed];
m6_28 -> m6_10  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.StopLimitOrderTestParameters", style=dashed];
m11_16 -> m11_18  [color=darkseagreen4, key=1, label=feeThisOrder, style=dashed];
m11_16 -> m11_35  [color=darkseagreen4, key=1, label=feeThisOrder, style=dashed];
m11_42 -> m11_63  [color=darkseagreen4, key=1, label=averageHoldingsPrice, style=dashed];
m11_44 -> m11_46  [color=darkseagreen4, key=1, label=str, style=dashed];
m11_44 -> m11_48  [color=darkseagreen4, key=1, label=str, style=dashed];
m11_45 -> m11_48  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
m11_45 -> m11_63  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
m11_46 -> m11_46  [color=darkseagreen4, key=1, label=str, style=dashed];
m11_46 -> m11_48  [color=darkseagreen4, key=1, label=str, style=dashed];
m11_48 -> m11_48  [color=darkseagreen4, key=1, label=str, style=dashed];
m11_24 -> m11_26  [color=green, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight", style=dashed];
m11_24 -> m11_27  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight", style=dashed];
m11_24 -> m11_31  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight", style=dashed];
m11_24 -> m11_33  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight", style=dashed];
m11_25 -> m11_27  [color=green, key=1, label=insight, style=dashed];
m11_25 -> m11_31  [color=green, key=1, label=insight, style=dashed];
m11_25 -> m11_33  [color=green, key=1, label=insight, style=dashed];
m11_25 -> m11_34  [color=green, key=1, label=insight, style=dashed];
m11_32 -> m11_35  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
m11_0 -> m11_11  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m11_0 -> m11_15  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m11_0 -> m11_17  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m11_0 -> m11_18  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m11_0 -> m11_19  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m11_0 -> m11_20  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m11_0 -> m11_21  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m11_0 -> m11_22  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m11_0 -> m11_26  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m11_0 -> m11_27  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m11_0 -> m11_33  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m11_0 -> m11_34  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m11_0 -> m11_35  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m11_0 -> m11_37  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m11_0 -> m11_40  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m11_0 -> m11_51  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m11_0 -> m11_63  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m11_3 -> m11_19  [color=darkseagreen4, key=1, label=baseCurrency, style=dashed];
m11_3 -> m11_20  [color=darkseagreen4, key=1, label=quoteCurrency, style=dashed];
m11_7 -> m11_21  [color=darkseagreen4, key=1, label=isLong, style=dashed];
m11_7 -> m11_39  [color=darkseagreen4, key=1, label=isLong, style=dashed];
m11_8 -> m11_26  [color=darkseagreen4, key=1, label=isShort, style=dashed];
m11_8 -> m11_50  [color=darkseagreen4, key=1, label=isShort, style=dashed];
m11_9 -> m11_63  [color=darkseagreen4, key=1, label=averageHoldingsPrice, style=dashed];
m11_10 -> m11_22  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
m11_10 -> m11_36  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
m11_10 -> m11_63  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
m11_11 -> m11_27  [color=darkseagreen4, key=1, label=absoluteHoldingsQuantity, style=dashed];
m11_37 -> m11_63  [color=darkseagreen4, key=1, label=averageHoldingsPrice, style=dashed];
m11_53 -> m11_56  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
m11_59 -> m11_63  [color=darkseagreen4, key=1, label=averageHoldingsPrice, style=dashed];
m11_6 -> m11_31  [color=darkseagreen4, key=1, label=closedPosition, style=dashed];
m11_52 -> m11_15  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Insight", style=dashed];
m11_52 -> m11_19  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Insight", style=dashed];
m11_52 -> m11_44  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Insight", style=dashed];
m11_52 -> m11_46  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Insight", style=dashed];
m11_52 -> m11_48  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Insight", style=dashed];
m12_25 -> m12_27  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_25 -> m12_28  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_25 -> m12_29  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_25 -> m12_30  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_25 -> m12_31  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_25 -> m12_32  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_25 -> m12_33  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_25 -> m12_34  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_25 -> m12_35  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_25 -> m12_36  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_25 -> m12_39  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_25 -> m12_40  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_26 -> m12_28  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_26 -> m12_29  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_26 -> m12_30  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_26 -> m12_31  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_26 -> m12_32  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_26 -> m12_33  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_26 -> m12_34  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_26 -> m12_35  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_26 -> m12_36  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_26 -> m12_37  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_26 -> m12_38  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_26 -> m12_39  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_26 -> m12_40  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_1 -> m12_3  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_1 -> m12_4  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_1 -> m12_5  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_1 -> m12_6  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_1 -> m12_7  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_1 -> m12_8  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_1 -> m12_9  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_1 -> m12_10  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_1 -> m12_11  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_1 -> m12_12  [color=darkseagreen4, key=1, label=jObject, style=dashed];
m12_2 -> m12_4  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_2 -> m12_5  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_2 -> m12_6  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_2 -> m12_7  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_2 -> m12_8  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_2 -> m12_9  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_2 -> m12_10  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_2 -> m12_11  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_2 -> m12_12  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_2 -> m12_13  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_2 -> m12_14  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_2 -> m12_15  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_2 -> m12_16  [color=darkseagreen4, key=1, label=result, style=dashed];
m15_46 -> m15_48  [color=darkseagreen4, key=1, label=referenceTimeUtc, style=dashed];
m15_46 -> m15_63  [color=darkseagreen4, key=1, label=referenceTimeUtc, style=dashed];
m15_47 -> m15_50  [color=darkseagreen4, key=1, label="out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm", style=dashed];
m15_47 -> m15_56  [color=darkseagreen4, key=1, label="out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm", style=dashed];
m15_47 -> m15_59  [color=darkseagreen4, key=1, label="out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm", style=dashed];
m15_47 -> m15_64  [color=darkseagreen4, key=1, label="out QuantConnect.Algorithm.CSharp.BasicTemplateAlgorithm", style=dashed];
m15_60 -> m15_64  [color=darkseagreen4, key=1, label="out QuantConnect.Orders.MarketOrder", style=dashed];
m15_55 -> m15_64  [color=darkseagreen4, key=1, label="out QuantConnect.Tests.Common.Orders.Fills.PartialMarketFillModelTests.PartialMarketFillModel", style=dashed];
m15_62 -> m15_64  [color=darkseagreen4, key=1, label="out QuantConnect.Orders.OrderTicket", style=dashed];
m15_49 -> m15_51  [color=darkseagreen4, key=1, label=transactionHandler, style=dashed];
m15_49 -> m15_88  [color=darkseagreen4, key=1, label=transactionHandler, style=dashed];
m15_51 -> m15_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_54 -> m15_56  [color=darkseagreen4, key=1, label="out QuantConnect.Securities.Security", style=dashed];
m15_54 -> m15_64  [color=darkseagreen4, key=1, label="out QuantConnect.Securities.Security", style=dashed];
m15_30 -> m15_32  [color=darkseagreen4, key=1, label=ticket, style=dashed];
m15_30 -> m15_33  [color=darkseagreen4, key=1, label=order, style=dashed];
m15_30 -> m15_36  [color=darkseagreen4, key=1, label=ticket, style=dashed];
m15_30 -> m15_39  [color=darkseagreen4, key=1, label=algorithm, style=dashed];
m15_30 -> m15_41  [color=darkseagreen4, key=1, label=ticket, style=dashed];
m15_30 -> m15_42  [color=darkseagreen4, key=1, label=order, style=dashed];
m15_31 -> m15_33  [color=darkseagreen4, key=1, label=fill1, style=dashed];
m15_31 -> m15_34  [color=darkseagreen4, key=1, label=fill1, style=dashed];
m15_35 -> m15_37  [color=darkseagreen4, key=1, label=fill2, style=dashed];
m15_35 -> m15_38  [color=darkseagreen4, key=1, label=fill2, style=dashed];
m15_40 -> m15_42  [color=darkseagreen4, key=1, label=fill3, style=dashed];
m15_40 -> m15_43  [color=darkseagreen4, key=1, label=fill3, style=dashed];
m15_21 -> m15_119  [color=darkseagreen4, key=1, label="QuantConnect.Orders.MarketOrder", style=dashed];
m15_21 -> m15_97  [color=darkseagreen4, key=1, label="QuantConnect.Orders.MarketOrder", style=dashed];
m15_21 -> m15_101  [color=darkseagreen4, key=1, label="QuantConnect.Orders.MarketOrder", style=dashed];
m15_94 -> m15_97  [color=darkseagreen4, key=1, label=currentUtcTime, style=dashed];
m15_94 -> m15_100  [color=darkseagreen4, key=1, label=currentUtcTime, style=dashed];
m15_94 -> m15_101  [color=darkseagreen4, key=1, label=currentUtcTime, style=dashed];
m15_95 -> m15_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_103 -> m15_107  [color=darkseagreen4, key=1, label=fill, style=dashed];
m15_98 -> m15_100  [color=darkseagreen4, key=1, label=lastOrderEvent, style=dashed];
m15_6 -> m15_9  [color=darkseagreen4, key=1, label=ticket, style=dashed];
m15_6 -> m15_10  [color=darkseagreen4, key=1, label=order, style=dashed];
m15_6 -> m15_12  [color=darkseagreen4, key=1, label=algorithm, style=dashed];
m15_6 -> m15_14  [color=darkseagreen4, key=1, label=ticket, style=dashed];
m15_6 -> m15_15  [color=darkseagreen4, key=1, label=order, style=dashed];
m15_8 -> m15_10  [color=darkseagreen4, key=1, label=fill1, style=dashed];
m15_8 -> m15_11  [color=darkseagreen4, key=1, label=fill1, style=dashed];
m15_13 -> m15_15  [color=darkseagreen4, key=1, label=fill2, style=dashed];
m15_13 -> m15_16  [color=darkseagreen4, key=1, label=fill2, style=dashed];
m15_121 -> m15_88  [color=darkseagreen4, key=1, label=transactionHandler, style=dashed];
m15_123 -> m15_119  [color=darkseagreen4, key=1, label="QuantConnect.Orders.MarketOrder", style=dashed];
m16_18 -> m16_28  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m16_18 -> m16_29  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m16_13 -> m16_15  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m16_14 -> m16_16  [color=darkseagreen4, key=1, label=security, style=dashed];
m16_20 -> m16_22  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m16_35 -> m16_14  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m16_35 -> m16_15  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m16_35 -> m16_16  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m16_35 -> m16_21  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m16_35 -> m16_23  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m16_35 -> m16_28  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m16_35 -> m16_29  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel", style=dashed];
m17_17 -> m17_20  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.Nifty", style=dashed];
m17_17 -> m17_29  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.Nifty", style=dashed];
m17_17 -> m17_32  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.Nifty", style=dashed];
m17_17 -> m17_27  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.Nifty", style=dashed];
m17_17 -> m17_30  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.Nifty", style=dashed];
m17_18 -> m17_29  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m17_18 -> m17_32  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m17_24 -> m17_27  [color=darkseagreen4, key=1, label=highestNifty, style=dashed];
m17_25 -> m17_30  [color=darkseagreen4, key=1, label=lowestNifty, style=dashed];
m17_11 -> m17_13  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.DollarRupee", style=dashed];
m17_87 -> m17_4  [color=green, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_5  [color=green, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_1  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_2  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_3  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_13  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_18  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_20  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_21  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_22  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_23  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_26  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_29  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_32  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_34  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m17_87 -> m17_44  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.CustomDataNIFTYAlgorithm", style=dashed];
m19_147 -> m19_149  [color=darkseagreen4, key=1, label=int, style=dashed];
m19_147 -> m19_156  [color=darkseagreen4, key=1, label=bool, style=dashed];
m19_122 -> m19_127  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m19_122 -> m19_128  [color=green, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Insight", style=dashed];
m19_122 -> m19_124  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Insight", style=dashed];
m19_122 -> m19_135  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Insight", style=dashed];
m19_122 -> m19_136  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Insight", style=dashed];
m19_122 -> m19_137  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Insight", style=dashed];
m19_130 -> m19_134  [color=green, key=1, label=barSize, style=dashed];
m19_131 -> m19_134  [color=darkseagreen4, key=1, label=barSize, style=dashed];
m19_129 -> m19_133  [color=green, key=1, label=exchangeHours, style=dashed];
m19_129 -> m19_136  [color=green, key=1, label=exchangeHours, style=dashed];
m19_132 -> m19_136  [color=darkseagreen4, key=1, label=exchangeHours, style=dashed];
m19_60 -> m19_62  [color=darkseagreen4, key=1, label=ticket, style=dashed];
m19_60 -> m19_63  [color=darkseagreen4, key=1, label=ticket, style=dashed];
m19_133 -> m19_136  [color=darkseagreen4, key=1, label=localStart, style=dashed];
m19_134 -> m19_134  [color=darkseagreen4, key=1, label=barSize, style=dashed];
m19_135 -> m19_135  [color=darkseagreen4, key=1, label=barSize, style=dashed];
m19_169 -> m19_172  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Option.OptionStrategy", style=dashed];
m19_169 -> m19_173  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Option.OptionStrategy", style=dashed];
m19_169 -> m19_219  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Option.OptionStrategy", style=dashed];
m19_169 -> m19_187  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Option.OptionStrategy", style=dashed];
m19_169 -> m19_188  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Option.OptionStrategy", style=dashed];
m19_169 -> m19_189  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Option.OptionStrategy", style=dashed];
m19_170 -> m19_182  [color=darkseagreen4, key=1, label=orders, style=dashed];
m19_170 -> m19_185  [color=darkseagreen4, key=1, label=orders, style=dashed];
m19_170 -> m19_195  [color=darkseagreen4, key=1, label=orders, style=dashed];
m19_170 -> m19_198  [color=darkseagreen4, key=1, label=orders, style=dashed];
m19_170 -> m19_200  [color=darkseagreen4, key=1, label=orders, style=dashed];
m19_173 -> m19_219  [color=darkseagreen4, key=1, label=optionLeg, style=dashed];
m19_173 -> m19_179  [color=darkseagreen4, key=1, label=optionLeg, style=dashed];
m19_173 -> m19_186  [color=darkseagreen4, key=1, label=optionLeg, style=dashed];
m19_174 -> m19_218  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_188 -> m19_192  [color=darkseagreen4, key=1, label=underlyingLeg, style=dashed];
m19_188 -> m19_199  [color=darkseagreen4, key=1, label=underlyingLeg, style=dashed];
m19_108 -> m19_113  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m19_349 -> m19_353  [color=darkseagreen4, key=1, label=security, style=dashed];
m19_55 -> m19_92  [color=green, key=1, label="lambda expression", style=dashed];
m19_55 -> m19_95  [color=green, key=1, label="lambda expression", style=dashed];
m19_46 -> m19_55  [color=green, key=1, label=riskTargetOverrides, style=dashed];
m19_46 -> m19_51  [color=darkseagreen4, key=1, label=riskTargetOverrides, style=dashed];
m19_46 -> m19_52  [color=darkseagreen4, key=1, label=riskTargetOverrides, style=dashed];
m19_46 -> m19_53  [color=darkseagreen4, key=1, label=riskTargetOverrides, style=dashed];
m19_54 -> m19_59  [color=darkseagreen4, key=1, label=request, style=dashed];
m19_53 -> m19_56  [color=green, key=1, label=riskAdjustedTargets, style=dashed];
m19_53 -> m19_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_34 -> m19_37  [color=darkseagreen4, key=1, label=insights, style=dashed];
m19_34 -> m19_38  [color=darkseagreen4, key=1, label=insights, style=dashed];
m19_34 -> m19_39  [color=darkseagreen4, key=1, label=insights, style=dashed];
m19_37 -> m19_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_37 -> m19_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_39 -> m19_46  [color=darkseagreen4, key=1, label=targets, style=dashed];
m19_39 -> m19_53  [color=darkseagreen4, key=1, label=targets, style=dashed];
m19_39 -> m19_44  [color=darkseagreen4, key=1, label=targets, style=dashed];
m19_39 -> m19_45  [color=darkseagreen4, key=1, label=targets, style=dashed];
m19_45 -> m19_76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_45 -> m19_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_50 -> m19_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_52 -> m19_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_52 -> m19_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_35 -> m19_61  [color=darkseagreen4, key=1, label=bool, style=dashed];
m19_40 -> m19_42  [color=darkseagreen4, key=1, label=target, style=dashed];
m19_49 -> m19_51  [color=darkseagreen4, key=1, label=mooTicket, style=dashed];
m19_49 -> m19_52  [color=darkseagreen4, key=1, label=mooTicket, style=dashed];
m19_49 -> m19_53  [color=darkseagreen4, key=1, label=mooTicket, style=dashed];
m19_57 -> m19_59  [color=darkseagreen4, key=1, label=preOrderCheckResponse, style=dashed];
m19_65 -> m19_85  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m19_85 -> m19_88  [color=darkseagreen4, key=1, label=request, style=dashed];
m19_85 -> m19_89  [color=darkseagreen4, key=1, label=request, style=dashed];
m19_86 -> m19_88  [color=darkseagreen4, key=1, label=response, style=dashed];
m19_219 -> m19_219  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<QuantConnect.Symbol, QuantConnect.Securities.Security>", style=dashed];
m19_24 -> m19_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_323 -> m19_331  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m19_323 -> m19_332  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m19_323 -> m19_334  [color=darkseagreen4, key=1, label=bool, style=dashed];
m19_323 -> m19_338  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m19_323 -> m19_340  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_323 -> m19_343  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m19_341 -> m19_343  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m19_336 -> m19_338  [color=darkseagreen4, key=1, label=holdingSymbol, style=dashed];
m19_336 -> m19_340  [color=darkseagreen4, key=1, label=holdingSymbol, style=dashed];
m19_113 -> m19_116  [color=darkseagreen4, key=1, label=request, style=dashed];
m19_114 -> m19_116  [color=darkseagreen4, key=1, label=response, style=dashed];
m19_226 -> m19_229  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_231  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_232  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_233  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_234  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_235  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_236  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_238  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_240  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_241  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_242  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_243  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_245  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_249  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_251  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_256  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_258  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_260  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_263  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_264  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_266  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_268  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_269  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_270  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_271  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_272  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_273  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_277  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_226 -> m19_278  [color=darkseagreen4, key=1, label="QuantConnect.Orders.SubmitOrderRequest", style=dashed];
m19_231 -> m19_235  [color=darkseagreen4, key=1, label=security, style=dashed];
m19_231 -> m19_236  [color=darkseagreen4, key=1, label=security, style=dashed];
m19_231 -> m19_237  [color=darkseagreen4, key=1, label=security, style=dashed];
m19_231 -> m19_240  [color=darkseagreen4, key=1, label=security, style=dashed];
m19_231 -> m19_242  [color=darkseagreen4, key=1, label=security, style=dashed];
m19_231 -> m19_250  [color=darkseagreen4, key=1, label=security, style=dashed];
m19_231 -> m19_252  [color=darkseagreen4, key=1, label=security, style=dashed];
m19_231 -> m19_259  [color=darkseagreen4, key=1, label=security, style=dashed];
m19_231 -> m19_265  [color=darkseagreen4, key=1, label=security, style=dashed];
m19_231 -> m19_267  [color=darkseagreen4, key=1, label=security, style=dashed];
m19_231 -> m19_269  [color=darkseagreen4, key=1, label=security, style=dashed];
m19_231 -> m19_276  [color=darkseagreen4, key=1, label=security, style=dashed];
m19_239 -> m19_244  [color=darkseagreen4, key=1, label=price, style=dashed];
m19_247 -> m19_249  [color=darkseagreen4, key=1, label=quoteCurrency, style=dashed];
m19_247 -> m19_251  [color=darkseagreen4, key=1, label=quoteCurrency, style=dashed];
m19_247 -> m19_256  [color=darkseagreen4, key=1, label=quoteCurrency, style=dashed];
m19_247 -> m19_258  [color=darkseagreen4, key=1, label=quoteCurrency, style=dashed];
m19_254 -> m19_256  [color=darkseagreen4, key=1, label=baseCurrency, style=dashed];
m19_254 -> m19_258  [color=darkseagreen4, key=1, label=baseCurrency, style=dashed];
m19_366 -> m19_368  [color=darkseagreen4, key=1, label=exchangeHours, style=dashed];
m19_98 -> m19_101  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m19_98 -> m19_102  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m19_98 -> m19_103  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m19_98 -> m19_104  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m19_99 -> m19_102  [color=darkseagreen4, key=1, label=request, style=dashed];
m19_99 -> m19_103  [color=darkseagreen4, key=1, label=request, style=dashed];
m19_100 -> m19_102  [color=darkseagreen4, key=1, label=response, style=dashed];
m19_13 -> m19_24  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.GeneratedInsightsCollection", style=dashed];
m19_221 -> m19_223  [color=darkseagreen4, key=1, label=response, style=dashed];
m19_221 -> m19_224  [color=darkseagreen4, key=1, label=response, style=dashed];
m19_162 -> m19_55  [color=green, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_56  [color=green, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_128  [color=green, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_9  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_10  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_11  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_12  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_13  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_24  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_14  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_15  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_16  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_34  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_36  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_37  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_38  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_39  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_41  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_43  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_45  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_46  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_48  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_52  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_101  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_102  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_103  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_104  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_108  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_111  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_120  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_123  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_124  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_133  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_149  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_150  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_151  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_152  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_153  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_154  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_155  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_156  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_157  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_162 -> m19_158  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m19_141 -> m19_144  [color=darkseagreen4, key=1, label=request, style=dashed];
m19_141 -> m19_145  [color=darkseagreen4, key=1, label=request, style=dashed];
m19_142 -> m19_144  [color=darkseagreen4, key=1, label=response, style=dashed];
m19_149 -> m19_151  [color=darkseagreen4, key=1, label=request, style=dashed];
m19_149 -> m19_152  [color=darkseagreen4, key=1, label=request, style=dashed];
m19_149 -> m19_154  [color=darkseagreen4, key=1, label=request, style=dashed];
m19_149 -> m19_155  [color=darkseagreen4, key=1, label=request, style=dashed];
m19_152 -> m19_154  [color=darkseagreen4, key=1, label=preOrderCheckResponse, style=dashed];
m19_155 -> m19_157  [color=darkseagreen4, key=1, label=ticket, style=dashed];
m19_155 -> m19_158  [color=darkseagreen4, key=1, label=ticket, style=dashed];
m19_289 -> m19_292  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m19_289 -> m19_302  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_290 -> m19_306  [color=darkseagreen4, key=1, label=orderIdList, style=dashed];
m19_290 -> m19_307  [color=darkseagreen4, key=1, label=orderIdList, style=dashed];
m19_304 -> m19_306  [color=darkseagreen4, key=1, label=ticket, style=dashed];
m19_291 -> m19_313  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_293 -> m19_295  [color=darkseagreen4, key=1, label=orders, style=dashed];
m19_293 -> m19_297  [color=darkseagreen4, key=1, label=orders, style=dashed];
m19_294 -> m19_303  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m19_297 -> m19_302  [color=darkseagreen4, key=1, label=order, style=dashed];
m19_377 -> m19_6  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_10  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_14  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_18  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_21  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_24  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_27  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_30  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_33  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_36  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_39  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_42  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_45  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_52  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_55  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_56  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_59  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_62  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_79  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_82  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_84  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_85  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_86  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_88  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_89  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_92  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_96  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_102  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_103  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_106  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_110  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_113  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_116  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_120  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_124  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_126  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_127  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_128  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_134  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_138  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_140  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_142  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_144  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_145  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_149  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_150  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_151  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_152  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_154  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_155  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_157  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_161  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_165  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_167  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_189  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_223  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_228  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_231  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_248  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_255  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_261  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_263  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_276  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_291  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_302  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_317  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_321  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_325  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_328  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_331  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_332  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_335  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_340  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_343  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_347  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_353  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_357  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_360  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_363  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_377 -> m19_374  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m19_378 -> m19_219  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Option.OptionStrategy", style=dashed];
m19_379 -> m19_219  [color=darkseagreen4, key=1, label=optionLeg, style=dashed];
m20_0 -> m20_7  [color=darkseagreen4, key=1, label="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters", style=dashed];
m20_8 -> m20_11  [color=darkseagreen4, key=1, label=security, style=dashed];
m20_45 -> m20_52  [color=green, key=1, label=basicTemplateCryptoAlgorithmStatistics, style=dashed];
m20_21 -> m20_52  [color=green, key=1, label=basicTemplateOptionsStatistics, style=dashed];
m20_23 -> m20_52  [color=green, key=1, label=updateOrderRegressionStatistics, style=dashed];
m20_24 -> m20_52  [color=green, key=1, label=regressionStatistics, style=dashed];
m20_19 -> m20_52  [color=green, key=1, label=basicTemplateStatistics, style=dashed];
m20_20 -> m20_52  [color=green, key=1, label=basicTemplateFrameworkStatistics, style=dashed];
m20_22 -> m20_52  [color=green, key=1, label=limitFillRegressionStatistics, style=dashed];
m20_25 -> m20_52  [color=green, key=1, label=universeSelectionRegressionStatistics, style=dashed];
m20_29 -> m20_52  [color=green, key=1, label=dropboxUniverseSelectionStatistics, style=dashed];
m20_55 -> m20_64  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m20_63 -> m20_7  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler", style=dashed];
m20_63 -> m20_8  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler", style=dashed];
m20_63 -> m20_11  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler", style=dashed];
m20_63 -> m20_54  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler", style=dashed];
m20_63 -> m20_55  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler", style=dashed];
m20_63 -> m20_56  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler", style=dashed];
m20_63 -> m20_58  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.RealTime.BacktestingRealTimeHandler", style=dashed];
m20_27 -> m20_52  [color=green, key=1, label=addRemoveSecurityRegressionStatistics, style=dashed];
m20_53 -> m20_56  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m20_42 -> m20_52  [color=green, key=1, label=hourSplitStatistics, style=dashed];
m20_30 -> m20_52  [color=green, key=1, label=parameterizedStatistics, style=dashed];
m20_31 -> m20_52  [color=green, key=1, label=historyAlgorithmStatistics, style=dashed];
m20_32 -> m20_52  [color=green, key=1, label=coarseFundamentalTop5AlgorithmStatistics, style=dashed];
m20_52 -> m20_58  [color=green, key=1, label="lambda expression", style=dashed];
m20_46 -> m20_52  [color=green, key=1, label=indicatorSuiteAlgorithmStatistics, style=dashed];
m20_47 -> m20_52  [color=green, key=1, label=basicTemplateIntrinioEconomicData, style=dashed];
m20_48 -> m20_52  [color=green, key=1, label=volumeWeightedAveragePriceExecutionModelRegressionAlgorithmStatistics, style=dashed];
m20_50 -> m20_52  [color=green, key=1, label=cancelOpenOrdersRegressionAlgorithmStatistics, style=dashed];
m20_35 -> m20_52  [color=green, key=1, label=optionSplitRegressionAlgorithmStatistics, style=dashed];
m20_18 -> m20_52  [color=green, key=1, label=emptyStatistics, style=dashed];
m20_33 -> m20_52  [color=green, key=1, label=coarseFineFundamentalRegressionAlgorithmStatistics, style=dashed];
m20_34 -> m20_52  [color=green, key=1, label=macdTrendAlgorithmStatistics, style=dashed];
m20_26 -> m20_52  [color=green, key=1, label=customDataRegressionStatistics, style=dashed];
m20_36 -> m20_52  [color=green, key=1, label=optionRenameRegressionAlgorithmStatistics, style=dashed];
m20_37 -> m20_52  [color=green, key=1, label=optionOpenInterestRegressionAlgorithmStatistics, style=dashed];
m20_38 -> m20_52  [color=green, key=1, label=optionChainConsistencyRegressionAlgorithmStatistics, style=dashed];
m20_39 -> m20_52  [color=green, key=1, label=weeklyUniverseSelectionRegressionAlgorithmStatistics, style=dashed];
m20_40 -> m20_52  [color=green, key=1, label=optionExerciseAssignRegressionAlgorithmStatistics, style=dashed];
m20_41 -> m20_52  [color=green, key=1, label=basicTemplateDailyStatistics, style=dashed];
m20_43 -> m20_52  [color=green, key=1, label=hourReverseSplitStatistics, style=dashed];
m20_44 -> m20_52  [color=green, key=1, label=fractionalQuantityRegressionStatistics, style=dashed];
m20_28 -> m20_52  [color=green, key=1, label=dropboxBaseDataUniverseSelectionStatistics, style=dashed];
m20_67 -> m20_63  [color=darkseagreen4, key=1, label="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters", style=dashed];
m20_67 -> m20_64  [color=darkseagreen4, key=1, label="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters", style=dashed];
m21_40 -> m21_43  [color=green, key=1, label="QuantConnect.Data.Market.TradeBar", style=dashed];
m21_40 -> m21_44  [color=green, key=1, label="QuantConnect.Data.Market.TradeBar", style=dashed];
m21_40 -> m21_45  [color=green, key=1, label="QuantConnect.Data.Market.TradeBar", style=dashed];
m21_40 -> m21_46  [color=green, key=1, label="QuantConnect.Data.Market.TradeBar", style=dashed];
m21_42 -> m21_44  [color=green, key=1, label=typicalPrice, style=dashed];
m21_59 -> m21_34  [color=green, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_35  [color=green, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_36  [color=green, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_37  [color=green, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_38  [color=green, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_41  [color=green, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_43  [color=green, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_44  [color=green, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_45  [color=green, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_46  [color=green, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_47  [color=green, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_54  [color=green, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_57  [color=green, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_13  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_17  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_20  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_24  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_28  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m21_59 -> m21_31  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.KeltnerChannels", style=dashed];
m23_46 -> m23_35  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityHolding", style=dashed];
m23_46 -> m23_37  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityHolding", style=dashed];
m23_46 -> m23_39  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityHolding", style=dashed];
}
