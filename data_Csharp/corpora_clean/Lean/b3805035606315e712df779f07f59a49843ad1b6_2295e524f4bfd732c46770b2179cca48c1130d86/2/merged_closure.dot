digraph  {
n464 [label=V, span=""];
n465 [label=TKey, span=""];
n466 [label="System.Func<TKey, TValue>", span=""];
n467 [label="System.Func<TKey, TValue, TValue>", span=""];
n468 [label=TKey, span=""];
n469 [label="System.Lazy<TValue>", span=""];
n470 [label=string, span=""];
n0 [cluster="QuantConnect.Extensions.Move<T>(System.Collections.Generic.List<T>, int, int)", label="Entry QuantConnect.Extensions.Move<T>(System.Collections.Generic.List<T>, int, int)", span="45-45"];
n1 [cluster="QuantConnect.Extensions.Move<T>(System.Collections.Generic.List<T>, int, int)", label="var oItem = list[oldIndex]", span="47-47"];
n2 [cluster="QuantConnect.Extensions.Move<T>(System.Collections.Generic.List<T>, int, int)", label="list.RemoveAt(oldIndex)", span="48-48"];
n3 [cluster="QuantConnect.Extensions.Move<T>(System.Collections.Generic.List<T>, int, int)", label="newIndex > oldIndex", span="49-49"];
n4 [cluster="QuantConnect.Extensions.Move<T>(System.Collections.Generic.List<T>, int, int)", label="newIndex--", span="49-49"];
n5 [cluster="QuantConnect.Extensions.Move<T>(System.Collections.Generic.List<T>, int, int)", label="list.Insert(newIndex, oItem)", span="50-50"];
n7 [cluster="System.Collections.Generic.List<T>.RemoveAt(int)", label="Entry System.Collections.Generic.List<T>.RemoveAt(int)", span="0-0"];
n6 [cluster="QuantConnect.Extensions.Move<T>(System.Collections.Generic.List<T>, int, int)", label="Exit QuantConnect.Extensions.Move<T>(System.Collections.Generic.List<T>, int, int)", span="45-45"];
n8 [cluster="System.Collections.Generic.List<T>.Insert(int, T)", label="Entry System.Collections.Generic.List<T>.Insert(int, T)", span="0-0"];
n9 [cluster="QuantConnect.Extensions.GetBytes(string)", label="Entry QuantConnect.Extensions.GetBytes(string)", span="58-58"];
n10 [cluster="QuantConnect.Extensions.GetBytes(string)", label="var bytes = new byte[str.Length * sizeof(char)]", span="60-60"];
n11 [cluster="QuantConnect.Extensions.GetBytes(string)", label="Buffer.BlockCopy(str.ToCharArray(), 0, bytes, 0, bytes.Length)", span="61-61"];
n12 [cluster="QuantConnect.Extensions.GetBytes(string)", label="return bytes;", span="62-62"];
n14 [cluster="string.ToCharArray()", label="Entry string.ToCharArray()", span="0-0"];
n15 [cluster="System.Buffer.BlockCopy(System.Array, int, System.Array, int, int)", label="Entry System.Buffer.BlockCopy(System.Array, int, System.Array, int, int)", span="0-0"];
n13 [cluster="QuantConnect.Extensions.GetBytes(string)", label="Exit QuantConnect.Extensions.GetBytes(string)", span="58-58"];
n16 [cluster="QuantConnect.Extensions.Clear<T>(System.Collections.Concurrent.ConcurrentQueue<T>)", label="Entry QuantConnect.Extensions.Clear<T>(System.Collections.Concurrent.ConcurrentQueue<T>)", span="71-71"];
n17 [cluster="QuantConnect.Extensions.Clear<T>(System.Collections.Concurrent.ConcurrentQueue<T>)", label="T item", span="73-73"];
n18 [cluster="QuantConnect.Extensions.Clear<T>(System.Collections.Concurrent.ConcurrentQueue<T>)", label="queue.TryDequeue(out item)", span="74-74"];
n19 [cluster="QuantConnect.Extensions.Clear<T>(System.Collections.Concurrent.ConcurrentQueue<T>)", label="Exit QuantConnect.Extensions.Clear<T>(System.Collections.Concurrent.ConcurrentQueue<T>)", span="71-71"];
n20 [cluster="System.Collections.Concurrent.ConcurrentQueue<T>.TryDequeue(out T)", label="Entry System.Collections.Concurrent.ConcurrentQueue<T>.TryDequeue(out T)", span="0-0"];
n21 [cluster="QuantConnect.Extensions.GetString(byte[], System.Text.Encoding)", label="Entry QuantConnect.Extensions.GetString(byte[], System.Text.Encoding)", span="85-85"];
n22 [cluster="QuantConnect.Extensions.GetString(byte[], System.Text.Encoding)", label="encoding == null", span="87-87"];
n24 [cluster="QuantConnect.Extensions.GetString(byte[], System.Text.Encoding)", label="return encoding.GetString(bytes);", span="89-89"];
n23 [cluster="QuantConnect.Extensions.GetString(byte[], System.Text.Encoding)", label="encoding = Encoding.ASCII", span="87-87"];
n25 [cluster="QuantConnect.Extensions.GetString(byte[], System.Text.Encoding)", label="Exit QuantConnect.Extensions.GetString(byte[], System.Text.Encoding)", span="85-85"];
n26 [cluster="System.Text.Encoding.GetString(byte[])", label="Entry System.Text.Encoding.GetString(byte[])", span="0-0"];
n27 [cluster="QuantConnect.Extensions.ToMD5(string)", label="Entry QuantConnect.Extensions.ToMD5(string)", span="97-97"];
n28 [cluster="QuantConnect.Extensions.ToMD5(string)", label="var builder = new StringBuilder()", span="99-99"];
n30 [cluster="QuantConnect.Extensions.ToMD5(string)", label="var data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(str))", span="102-102"];
n29 [cluster="QuantConnect.Extensions.ToMD5(string)", label="var md5Hash = MD5.Create()", span="100-100"];
n35 [cluster="System.Text.StringBuilder.StringBuilder()", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
n32 [cluster="QuantConnect.Extensions.ToMD5(string)", label="builder.Append(t.ToString(''x2''))", span="103-103"];
n33 [cluster="QuantConnect.Extensions.ToMD5(string)", label="return builder.ToString();", span="105-105"];
n36 [cluster="System.Security.Cryptography.MD5.Create()", label="Entry System.Security.Cryptography.MD5.Create()", span="0-0"];
n31 [cluster="QuantConnect.Extensions.ToMD5(string)", label=data, span="103-103"];
n37 [cluster="System.Text.Encoding.GetBytes(string)", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
n38 [cluster="System.Security.Cryptography.HashAlgorithm.ComputeHash(byte[])", label="Entry System.Security.Cryptography.HashAlgorithm.ComputeHash(byte[])", span="0-0"];
n39 [cluster="byte.ToString(string)", label="Entry byte.ToString(string)", span="0-0"];
n40 [cluster="System.Text.StringBuilder.Append(string)", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
n34 [cluster="QuantConnect.Extensions.ToMD5(string)", label="Exit QuantConnect.Extensions.ToMD5(string)", span="97-97"];
n41 [cluster="System.Text.StringBuilder.ToString()", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
n42 [cluster="QuantConnect.Extensions.ToSHA256(string)", label="Entry QuantConnect.Extensions.ToSHA256(string)", span="113-113"];
n43 [cluster="QuantConnect.Extensions.ToSHA256(string)", label="var crypt = new SHA256Managed()", span="115-115"];
n45 [cluster="QuantConnect.Extensions.ToSHA256(string)", label="var crypto = crypt.ComputeHash(Encoding.UTF8.GetBytes(data), 0, Encoding.UTF8.GetByteCount(data))", span="117-117"];
n44 [cluster="QuantConnect.Extensions.ToSHA256(string)", label="var hash = new StringBuilder()", span="116-116"];
n50 [cluster="System.Security.Cryptography.SHA256Managed.SHA256Managed()", label="Entry System.Security.Cryptography.SHA256Managed.SHA256Managed()", span="0-0"];
n47 [cluster="QuantConnect.Extensions.ToSHA256(string)", label="hash.Append(theByte.ToString(''x2''))", span="120-120"];
n48 [cluster="QuantConnect.Extensions.ToSHA256(string)", label="return hash.ToString();", span="122-122"];
n46 [cluster="QuantConnect.Extensions.ToSHA256(string)", label=crypto, span="118-118"];
n51 [cluster="System.Text.Encoding.GetByteCount(string)", label="Entry System.Text.Encoding.GetByteCount(string)", span="0-0"];
n52 [cluster="System.Security.Cryptography.HashAlgorithm.ComputeHash(byte[], int, int)", label="Entry System.Security.Cryptography.HashAlgorithm.ComputeHash(byte[], int, int)", span="0-0"];
n49 [cluster="QuantConnect.Extensions.ToSHA256(string)", label="Exit QuantConnect.Extensions.ToSHA256(string)", span="113-113"];
n53 [cluster="QuantConnect.Extensions.AddOrUpdate<K, V>(System.Collections.Concurrent.ConcurrentDictionary<K, V>, K, V)", label="Entry QuantConnect.Extensions.AddOrUpdate<K, V>(System.Collections.Concurrent.ConcurrentDictionary<K, V>, K, V)", span="134-134"];
n54 [cluster="QuantConnect.Extensions.AddOrUpdate<K, V>(System.Collections.Concurrent.ConcurrentDictionary<K, V>, K, V)", label="dictionary.AddOrUpdate(key, value, (oldkey, oldvalue) => value)", span="136-136"];
n58 [cluster="lambda expression", label=value, span="136-136"];
n55 [cluster="QuantConnect.Extensions.AddOrUpdate<K, V>(System.Collections.Concurrent.ConcurrentDictionary<K, V>, K, V)", label="Exit QuantConnect.Extensions.AddOrUpdate<K, V>(System.Collections.Concurrent.ConcurrentDictionary<K, V>, K, V)", span="134-134"];
n56 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)", span="0-0"];
n57 [cluster="lambda expression", label="Entry lambda expression", span="136-136"];
n59 [cluster="lambda expression", label="Exit lambda expression", span="136-136"];
n60 [cluster="QuantConnect.Extensions.AddOrUpdate<TKey, TValue>(System.Collections.Concurrent.ConcurrentDictionary<TKey, System.Lazy<TValue>>, TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>)", label="Entry QuantConnect.Extensions.AddOrUpdate<TKey, TValue>(System.Collections.Concurrent.ConcurrentDictionary<TKey, System.Lazy<TValue>>, TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>)", span="148-148"];
n61 [cluster="QuantConnect.Extensions.AddOrUpdate<TKey, TValue>(System.Collections.Concurrent.ConcurrentDictionary<TKey, System.Lazy<TValue>>, TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>)", label="var result = dictionary.AddOrUpdate(key, new Lazy<TValue>(() => addValueFactory(key)), (key2, old) => new Lazy<TValue>(() => updateValueFactory(key2, old.Value)))", span="150-150"];
n66 [cluster="lambda expression", label="addValueFactory(key)", span="150-150"];
n70 [cluster="lambda expression", label="new Lazy<TValue>(() => updateValueFactory(key2, old.Value))", span="150-150"];
n73 [cluster="lambda expression", label="updateValueFactory(key2, old.Value)", span="150-150"];
n62 [cluster="QuantConnect.Extensions.AddOrUpdate<TKey, TValue>(System.Collections.Concurrent.ConcurrentDictionary<TKey, System.Lazy<TValue>>, TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>)", label="return result.Value;", span="151-151"];
n64 [cluster="System.Lazy<T>.Lazy(System.Func<T>)", label="Entry System.Lazy<T>.Lazy(System.Func<T>)", span="0-0"];
n69 [cluster="lambda expression", label="Entry lambda expression", span="150-150"];
n63 [cluster="QuantConnect.Extensions.AddOrUpdate<TKey, TValue>(System.Collections.Concurrent.ConcurrentDictionary<TKey, System.Lazy<TValue>>, TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>)", label="Exit QuantConnect.Extensions.AddOrUpdate<TKey, TValue>(System.Collections.Concurrent.ConcurrentDictionary<TKey, System.Lazy<TValue>>, TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>)", span="148-148"];
n65 [cluster="lambda expression", label="Entry lambda expression", span="150-150"];
n67 [cluster="lambda expression", label="Exit lambda expression", span="150-150"];
n68 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n71 [cluster="lambda expression", label="Exit lambda expression", span="150-150"];
n72 [cluster="lambda expression", label="Entry lambda expression", span="150-150"];
n74 [cluster="lambda expression", label="Exit lambda expression", span="150-150"];
n75 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
n76 [cluster="QuantConnect.Extensions.Add<TKey, TElement, TCollection>(System.Collections.Generic.IDictionary<TKey, TCollection>, TKey, TElement)", label="Entry QuantConnect.Extensions.Add<TKey, TElement, TCollection>(System.Collections.Generic.IDictionary<TKey, TCollection>, TKey, TElement)", span="164-164"];
n77 [cluster="QuantConnect.Extensions.Add<TKey, TElement, TCollection>(System.Collections.Generic.IDictionary<TKey, TCollection>, TKey, TElement)", label="TCollection list", span="167-167"];
n78 [cluster="QuantConnect.Extensions.Add<TKey, TElement, TCollection>(System.Collections.Generic.IDictionary<TKey, TCollection>, TKey, TElement)", label="!dictionary.TryGetValue(key, out list)", span="168-168"];
n80 [cluster="QuantConnect.Extensions.Add<TKey, TElement, TCollection>(System.Collections.Generic.IDictionary<TKey, TCollection>, TKey, TElement)", label="dictionary.Add(key, list)", span="171-171"];
n81 [cluster="QuantConnect.Extensions.Add<TKey, TElement, TCollection>(System.Collections.Generic.IDictionary<TKey, TCollection>, TKey, TElement)", label="list.Add(element)", span="173-173"];
n79 [cluster="QuantConnect.Extensions.Add<TKey, TElement, TCollection>(System.Collections.Generic.IDictionary<TKey, TCollection>, TKey, TElement)", label="list = new TCollection()", span="170-170"];
n83 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
n84 [cluster="TCollection.cstr", label="Entry TCollection.cstr", span=""];
n85 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
n82 [cluster="QuantConnect.Extensions.Add<TKey, TElement, TCollection>(System.Collections.Generic.IDictionary<TKey, TCollection>, TKey, TElement)", label="Exit QuantConnect.Extensions.Add<TKey, TElement, TCollection>(System.Collections.Generic.IDictionary<TKey, TCollection>, TKey, TElement)", span="164-164"];
n86 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
n87 [cluster="QuantConnect.Extensions.RoundToSignificantDigits(double, int)", label="Entry QuantConnect.Extensions.RoundToSignificantDigits(double, int)", span="182-182"];
n88 [cluster="QuantConnect.Extensions.RoundToSignificantDigits(double, int)", label="d == 0", span="184-184"];
n90 [cluster="QuantConnect.Extensions.RoundToSignificantDigits(double, int)", label="var scale = Math.Pow(10, Math.Floor(Math.Log10(Math.Abs(d))) + 1)", span="185-185"];
n91 [cluster="QuantConnect.Extensions.RoundToSignificantDigits(double, int)", label="return scale * Math.Round(d / scale, digits);", span="186-186"];
n89 [cluster="QuantConnect.Extensions.RoundToSignificantDigits(double, int)", label="return 0;", span="184-184"];
n93 [cluster="System.Math.Abs(double)", label="Entry System.Math.Abs(double)", span="0-0"];
n94 [cluster="System.Math.Log10(double)", label="Entry System.Math.Log10(double)", span="0-0"];
n95 [cluster="System.Math.Floor(double)", label="Entry System.Math.Floor(double)", span="0-0"];
n96 [cluster="System.Math.Pow(double, double)", label="Entry System.Math.Pow(double, double)", span="0-0"];
n92 [cluster="QuantConnect.Extensions.RoundToSignificantDigits(double, int)", label="Exit QuantConnect.Extensions.RoundToSignificantDigits(double, int)", span="182-182"];
n97 [cluster="System.Math.Round(double, int)", label="Entry System.Math.Round(double, int)", span="0-0"];
n98 [cluster="QuantConnect.Extensions.RoundToSignificantDigits(decimal, int)", label="Entry QuantConnect.Extensions.RoundToSignificantDigits(decimal, int)", span="195-195"];
n99 [cluster="QuantConnect.Extensions.RoundToSignificantDigits(decimal, int)", label="d == 0", span="197-197"];
n101 [cluster="QuantConnect.Extensions.RoundToSignificantDigits(decimal, int)", label="var scale = (decimal)Math.Pow(10, Math.Floor(Math.Log10((double) Math.Abs(d))) + 1)", span="198-198"];
n102 [cluster="QuantConnect.Extensions.RoundToSignificantDigits(decimal, int)", label="return scale * Math.Round(d / scale, digits);", span="199-199"];
n100 [cluster="QuantConnect.Extensions.RoundToSignificantDigits(decimal, int)", label="return 0;", span="197-197"];
n104 [cluster="System.Math.Abs(decimal)", label="Entry System.Math.Abs(decimal)", span="0-0"];
n103 [cluster="QuantConnect.Extensions.RoundToSignificantDigits(decimal, int)", label="Exit QuantConnect.Extensions.RoundToSignificantDigits(decimal, int)", span="195-195"];
n105 [cluster="System.Math.Round(decimal, int)", label="Entry System.Math.Round(decimal, int)", span="0-0"];
n106 [cluster="QuantConnect.Extensions.SmartRounding(decimal)", label="Entry QuantConnect.Extensions.SmartRounding(decimal)", span="206-206"];
n107 [cluster="QuantConnect.Extensions.SmartRounding(decimal)", label="input = Normalize(input)", span="208-208"];
n108 [cluster="QuantConnect.Extensions.SmartRounding(decimal)", label="input > 1000", span="211-211"];
n113 [cluster="QuantConnect.Extensions.Normalize(decimal)", label="Entry QuantConnect.Extensions.Normalize(decimal)", span="234-234"];
n109 [cluster="QuantConnect.Extensions.SmartRounding(decimal)", label="return Math.Round(input, 4);", span="213-213"];
n110 [cluster="QuantConnect.Extensions.SmartRounding(decimal)", label="var d = (double)input", span="217-217"];
n111 [cluster="QuantConnect.Extensions.SmartRounding(decimal)", label="return (decimal)d.RoundToSignificantDigits(7);", span="218-218"];
n112 [cluster="QuantConnect.Extensions.SmartRounding(decimal)", label="Exit QuantConnect.Extensions.SmartRounding(decimal)", span="206-206"];
n114 [cluster="double.RoundToSignificantDigits(int)", label="Entry double.RoundToSignificantDigits(int)", span="182-182"];
n115 [cluster="QuantConnect.Extensions.SafeDecimalCast(double)", label="Entry QuantConnect.Extensions.SafeDecimalCast(double)", span="227-227"];
n116 [cluster="QuantConnect.Extensions.SafeDecimalCast(double)", label="input <= (double) decimal.MinValue", span="229-229"];
n118 [cluster="QuantConnect.Extensions.SafeDecimalCast(double)", label="input >= (double) decimal.MaxValue", span="230-230"];
n120 [cluster="QuantConnect.Extensions.SafeDecimalCast(double)", label="return (decimal) input;", span="231-231"];
n117 [cluster="QuantConnect.Extensions.SafeDecimalCast(double)", label="return decimal.MinValue;", span="229-229"];
n119 [cluster="QuantConnect.Extensions.SafeDecimalCast(double)", label="return decimal.MaxValue;", span="230-230"];
n121 [cluster="QuantConnect.Extensions.SafeDecimalCast(double)", label="Exit QuantConnect.Extensions.SafeDecimalCast(double)", span="227-227"];
n122 [cluster="QuantConnect.Extensions.Normalize(decimal)", label="return input / 1.000000000000000000000000000000000m;", span="237-237"];
n123 [cluster="QuantConnect.Extensions.Normalize(decimal)", label="Exit QuantConnect.Extensions.Normalize(decimal)", span="234-234"];
n124 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="Entry QuantConnect.Extensions.ToDecimal(string)", span="248-248"];
n125 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="long value = 0", span="250-250"];
n129 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="var length = str.Length", span="254-254"];
n130 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="index < length && char.IsWhiteSpace(str[index])", span="256-256"];
n132 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="var isNegative = index < length && str[index] == '-'", span="261-261"];
n136 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="var ch = str[index++]", span="269-269"];
n126 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="var decimalPlaces = 0", span="251-251"];
n141 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="value = value * 10 + (ch - '0')", span="281-281"];
n143 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="var lo = (int)value", span="286-286"];
n144 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="var mid = (int)(value >> 32)", span="287-287"];
n127 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="var hasDecimals = false", span="252-252"];
n142 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="decimalPlaces++", span="282-282"];
n145 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="return new decimal(lo, mid, 0, isNegative, (byte)(hasDecimals ? decimalPlaces : 0));", span="288-288"];
n128 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="var index = 0", span="253-253"];
n131 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="index++", span="258-258"];
n134 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="index++", span="264-264"];
n135 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="index < length", span="267-267"];
n147 [cluster="char.IsWhiteSpace(char)", label="Entry char.IsWhiteSpace(char)", span="0-0"];
n133 [cluster="QuantConnect.Extensions.ToDecimal(string)", label=isNegative, span="262-262"];
n137 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="ch == '.'", span="270-270"];
n140 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="char.IsWhiteSpace(ch)", span="275-275"];
n138 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="hasDecimals = true", span="272-272"];
n139 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="decimalPlaces = 0", span="273-273"];
n146 [cluster="QuantConnect.Extensions.ToDecimal(string)", label="Exit QuantConnect.Extensions.ToDecimal(string)", span="248-248"];
n148 [cluster="decimal.Decimal(int, int, int, bool, byte)", label="Entry decimal.Decimal(int, int, int, bool, byte)", span="0-0"];
n149 [cluster="QuantConnect.Extensions.ToInt32(string)", label="Entry QuantConnect.Extensions.ToInt32(string)", span="297-297"];
n150 [cluster="QuantConnect.Extensions.ToInt32(string)", label="int value = 0", span="299-299"];
n152 [cluster="QuantConnect.Extensions.ToInt32(string)", label="i < str.Length", span="300-300"];
n153 [cluster="QuantConnect.Extensions.ToInt32(string)", label="value = value * 10 + (str[i] - '0')", span="302-302"];
n151 [cluster="QuantConnect.Extensions.ToInt32(string)", label="var i = 0", span="300-300"];
n155 [cluster="QuantConnect.Extensions.ToInt32(string)", label="return value;", span="304-304"];
n154 [cluster="QuantConnect.Extensions.ToInt32(string)", label="i++", span="300-300"];
n156 [cluster="QuantConnect.Extensions.ToInt32(string)", label="Exit QuantConnect.Extensions.ToInt32(string)", span="297-297"];
n157 [cluster="QuantConnect.Extensions.ToInt64(string)", label="Entry QuantConnect.Extensions.ToInt64(string)", span="313-313"];
n158 [cluster="QuantConnect.Extensions.ToInt64(string)", label="long value = 0", span="315-315"];
n160 [cluster="QuantConnect.Extensions.ToInt64(string)", label="i < str.Length", span="316-316"];
n161 [cluster="QuantConnect.Extensions.ToInt64(string)", label="value = value * 10 + (str[i] - '0')", span="318-318"];
n159 [cluster="QuantConnect.Extensions.ToInt64(string)", label="var i = 0", span="316-316"];
n163 [cluster="QuantConnect.Extensions.ToInt64(string)", label="return value;", span="320-320"];
n162 [cluster="QuantConnect.Extensions.ToInt64(string)", label="i++", span="316-316"];
n164 [cluster="QuantConnect.Extensions.ToInt64(string)", label="Exit QuantConnect.Extensions.ToInt64(string)", span="313-313"];
n165 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="Entry QuantConnect.Extensions.ToCsv(string, int)", span="329-329"];
n166 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="int last = 0", span="331-331"];
n167 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="var csv = new List<string>(size)", span="332-332"];
n169 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="i < str.Length", span="333-333"];
n170 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="str[i] == ','", span="335-335"];
n173 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="csv.Add(str.Substring(last, i - last))", span="338-338"];
n178 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="csv.Add(str.Substring(last))", span="343-343"];
n171 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="last != 0", span="337-337"];
n172 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="last = last + 1", span="337-337"];
n176 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="last != 0", span="342-342"];
n177 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="last = last + 1", span="342-342"];
n168 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="int i = 0", span="333-333"];
n181 [cluster="System.Collections.Generic.List<T>.List(int)", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
n179 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="return csv;", span="344-344"];
n174 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="last = i", span="339-339"];
n175 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="i++", span="333-333"];
n182 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
n183 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n184 [cluster="string.Substring(int)", label="Entry string.Substring(int)", span="0-0"];
n180 [cluster="QuantConnect.Extensions.ToCsv(string, int)", label="Exit QuantConnect.Extensions.ToCsv(string, int)", span="329-329"];
n185 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="Entry QuantConnect.Extensions.ToCsvData(string, int)", span="353-353"];
n186 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="var csv = new List<string>(size)", span="355-355"];
n190 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="i < str.Length", span="360-360"];
n191 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="str[i]", span="362-362"];
n196 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="csv.Add(str.Substring(last + 1, (i - last)).Trim(' ', ','))", span="370-370"];
n199 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="last != str.Length - 1", span="379-379"];
n200 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="csv.Add(str.Substring(last + 1).Trim())", span="381-381"];
n187 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="int last = -1", span="357-357"];
n201 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="return csv;", span="384-384"];
n188 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="bool textDataField = false", span="358-358"];
n189 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="var i = 0", span="360-360"];
n193 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="textDataField = !textDataField", span="365-365"];
n197 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="last = i", span="371-371"];
n198 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="i++", span="360-360"];
n192 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="''''", span="364-364"];
n194 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="','", span="367-367"];
n195 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="!textDataField", span="368-368"];
n203 [cluster="string.Trim(params char[])", label="Entry string.Trim(params char[])", span="0-0"];
n204 [cluster="string.Trim()", label="Entry string.Trim()", span="0-0"];
n202 [cluster="QuantConnect.Extensions.ToCsvData(string, int)", label="Exit QuantConnect.Extensions.ToCsvData(string, int)", span="353-353"];
n205 [cluster="QuantConnect.Extensions.IsNaNOrZero(double)", label="Entry QuantConnect.Extensions.IsNaNOrZero(double)", span="391-391"];
n206 [cluster="QuantConnect.Extensions.IsNaNOrZero(double)", label="return double.IsNaN(value) || Math.Abs(value) < double.Epsilon;", span="393-393"];
n207 [cluster="QuantConnect.Extensions.IsNaNOrZero(double)", label="Exit QuantConnect.Extensions.IsNaNOrZero(double)", span="391-391"];
n208 [cluster="double.IsNaN(double)", label="Entry double.IsNaN(double)", span="0-0"];
n209 [cluster="QuantConnect.Extensions.GetDecimalEpsilon()", label="Entry QuantConnect.Extensions.GetDecimalEpsilon()", span="400-400"];
n210 [cluster="QuantConnect.Extensions.GetDecimalEpsilon()", label="return new decimal(1, 0, 0, false, 27);", span="402-402"];
n211 [cluster="QuantConnect.Extensions.GetDecimalEpsilon()", label="Exit QuantConnect.Extensions.GetDecimalEpsilon()", span="400-400"];
n212 [cluster="QuantConnect.Extensions.GetExtension(string)", label="Entry QuantConnect.Extensions.GetExtension(string)", span="410-410"];
n213 [cluster="QuantConnect.Extensions.GetExtension(string)", label="var ext = str.Substring(Math.Max(0, str.Length - 4))", span="411-411"];
n214 [cluster="QuantConnect.Extensions.GetExtension(string)", label="var allowedExt = new List<string>() { ''.zip'', ''.csv'', ''.json'' }", span="412-412"];
n219 [cluster="System.Math.Max(int, int)", label="Entry System.Math.Max(int, int)", span="0-0"];
n215 [cluster="QuantConnect.Extensions.GetExtension(string)", label="!allowedExt.Contains(ext)", span="413-413"];
n217 [cluster="QuantConnect.Extensions.GetExtension(string)", label="return ext;", span="417-417"];
n220 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n216 [cluster="QuantConnect.Extensions.GetExtension(string)", label="ext = ''.custom''", span="415-415"];
n221 [cluster="System.Collections.Generic.List<T>.Contains(T)", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
n218 [cluster="QuantConnect.Extensions.GetExtension(string)", label="Exit QuantConnect.Extensions.GetExtension(string)", span="410-410"];
n222 [cluster="QuantConnect.Extensions.ToStream(string)", label="Entry QuantConnect.Extensions.ToStream(string)", span="425-425"];
n223 [cluster="QuantConnect.Extensions.ToStream(string)", label="var stream = new MemoryStream()", span="427-427"];
n225 [cluster="QuantConnect.Extensions.ToStream(string)", label="writer.Write(str)", span="429-429"];
n224 [cluster="QuantConnect.Extensions.ToStream(string)", label="var writer = new StreamWriter(stream)", span="428-428"];
n230 [cluster="System.IO.MemoryStream.MemoryStream()", label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0"];
n227 [cluster="QuantConnect.Extensions.ToStream(string)", label="stream.Position = 0", span="431-431"];
n228 [cluster="QuantConnect.Extensions.ToStream(string)", label="return stream;", span="432-432"];
n231 [cluster="System.IO.StreamWriter.StreamWriter(System.IO.Stream)", label="Entry System.IO.StreamWriter.StreamWriter(System.IO.Stream)", span="0-0"];
n226 [cluster="QuantConnect.Extensions.ToStream(string)", label="writer.Flush()", span="430-430"];
n232 [cluster="System.IO.StreamWriter.Write(string)", label="Entry System.IO.StreamWriter.Write(string)", span="0-0"];
n233 [cluster="System.IO.StreamWriter.Flush()", label="Entry System.IO.StreamWriter.Flush()", span="0-0"];
n229 [cluster="QuantConnect.Extensions.ToStream(string)", label="Exit QuantConnect.Extensions.ToStream(string)", span="425-425"];
n234 [cluster="QuantConnect.Extensions.Round(System.TimeSpan, System.TimeSpan, System.MidpointRounding)", label="Entry QuantConnect.Extensions.Round(System.TimeSpan, System.TimeSpan, System.MidpointRounding)", span="442-442"];
n235 [cluster="QuantConnect.Extensions.Round(System.TimeSpan, System.TimeSpan, System.MidpointRounding)", label="roundingInterval == TimeSpan.Zero", span="444-444"];
n236 [cluster="QuantConnect.Extensions.Round(System.TimeSpan, System.TimeSpan, System.MidpointRounding)", label="return time;", span="447-447"];
n237 [cluster="QuantConnect.Extensions.Round(System.TimeSpan, System.TimeSpan, System.MidpointRounding)", label="return new TimeSpan(\r\n                Convert.ToInt64(Math.Round(\r\n                    time.Ticks / (decimal)roundingInterval.Ticks,\r\n                    roundingType\r\n                )) * roundingInterval.Ticks\r\n            );", span="450-455"];
n238 [cluster="QuantConnect.Extensions.Round(System.TimeSpan, System.TimeSpan, System.MidpointRounding)", label="Exit QuantConnect.Extensions.Round(System.TimeSpan, System.TimeSpan, System.MidpointRounding)", span="442-442"];
n239 [cluster="System.TimeSpan.TimeSpan(long)", label="Entry System.TimeSpan.TimeSpan(long)", span="0-0"];
n240 [cluster="System.Math.Round(decimal, System.MidpointRounding)", label="Entry System.Math.Round(decimal, System.MidpointRounding)", span="0-0"];
n241 [cluster="System.Convert.ToInt64(decimal)", label="Entry System.Convert.ToInt64(decimal)", span="0-0"];
n242 [cluster="QuantConnect.Extensions.Round(System.TimeSpan, System.TimeSpan)", label="Entry QuantConnect.Extensions.Round(System.TimeSpan, System.TimeSpan)", span="465-465"];
n243 [cluster="QuantConnect.Extensions.Round(System.TimeSpan, System.TimeSpan)", label="return Round(time, roundingInterval, MidpointRounding.ToEven);", span="467-467"];
n244 [cluster="QuantConnect.Extensions.Round(System.TimeSpan, System.TimeSpan)", label="Exit QuantConnect.Extensions.Round(System.TimeSpan, System.TimeSpan)", span="465-465"];
n245 [cluster="QuantConnect.Extensions.RoundDown(System.DateTime, System.TimeSpan)", label="Entry QuantConnect.Extensions.RoundDown(System.DateTime, System.TimeSpan)", span="476-476"];
n246 [cluster="QuantConnect.Extensions.RoundDown(System.DateTime, System.TimeSpan)", label="interval == TimeSpan.Zero", span="478-478"];
n247 [cluster="QuantConnect.Extensions.RoundDown(System.DateTime, System.TimeSpan)", label="return dateTime;", span="481-481"];
n248 [cluster="QuantConnect.Extensions.RoundDown(System.DateTime, System.TimeSpan)", label="return dateTime.AddTicks(-(dateTime.Ticks % interval.Ticks));", span="483-483"];
n249 [cluster="QuantConnect.Extensions.RoundDown(System.DateTime, System.TimeSpan)", label="Exit QuantConnect.Extensions.RoundDown(System.DateTime, System.TimeSpan)", span="476-476"];
n250 [cluster="System.DateTime.AddTicks(long)", label="Entry System.DateTime.AddTicks(long)", span="0-0"];
n251 [cluster="QuantConnect.Extensions.RoundDownInTimeZone(System.DateTime, System.TimeSpan, DateTimeZone, DateTimeZone)", label="Entry QuantConnect.Extensions.RoundDownInTimeZone(System.DateTime, System.TimeSpan, DateTimeZone, DateTimeZone)", span="494-494"];
n252 [cluster="QuantConnect.Extensions.RoundDownInTimeZone(System.DateTime, System.TimeSpan, DateTimeZone, DateTimeZone)", label="var dateTimeInRoundingTimeZone = dateTime.ConvertTo(sourceTimeZone, roundingTimeZone)", span="496-496"];
n253 [cluster="QuantConnect.Extensions.RoundDownInTimeZone(System.DateTime, System.TimeSpan, DateTimeZone, DateTimeZone)", label="var roundedDateTimeInRoundingTimeZone = dateTimeInRoundingTimeZone.RoundDown(roundingInterval)", span="497-497"];
n254 [cluster="QuantConnect.Extensions.RoundDownInTimeZone(System.DateTime, System.TimeSpan, DateTimeZone, DateTimeZone)", label="return roundedDateTimeInRoundingTimeZone.ConvertTo(roundingTimeZone, sourceTimeZone);", span="498-498"];
n256 [cluster="System.DateTime.ConvertTo(DateTimeZone, DateTimeZone, bool)", label="Entry System.DateTime.ConvertTo(DateTimeZone, DateTimeZone, bool)", span="585-585"];
n257 [cluster="System.DateTime.RoundDown(System.TimeSpan)", label="Entry System.DateTime.RoundDown(System.TimeSpan)", span="476-476"];
n255 [cluster="QuantConnect.Extensions.RoundDownInTimeZone(System.DateTime, System.TimeSpan, DateTimeZone, DateTimeZone)", label="Exit QuantConnect.Extensions.RoundDownInTimeZone(System.DateTime, System.TimeSpan, DateTimeZone, DateTimeZone)", span="494-494"];
n258 [cluster="QuantConnect.Extensions.ExchangeRoundDown(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, bool)", label="Entry QuantConnect.Extensions.ExchangeRoundDown(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, bool)", span="513-513"];
n259 [cluster="QuantConnect.Extensions.ExchangeRoundDown(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, bool)", label="interval == TimeSpan.Zero", span="516-516"];
n260 [cluster="QuantConnect.Extensions.ExchangeRoundDown(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, bool)", label="return dateTime;", span="516-516"];
n261 [cluster="QuantConnect.Extensions.ExchangeRoundDown(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, bool)", label="var rounded = dateTime.RoundDown(interval)", span="518-518"];
n262 [cluster="QuantConnect.Extensions.ExchangeRoundDown(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, bool)", label="!exchangeHours.IsOpen(rounded, rounded + interval, extendedMarket)", span="519-519"];
n263 [cluster="QuantConnect.Extensions.ExchangeRoundDown(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, bool)", label="rounded -= interval", span="521-521"];
n264 [cluster="QuantConnect.Extensions.ExchangeRoundDown(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, bool)", label="return rounded;", span="523-523"];
n266 [cluster="QuantConnect.Securities.SecurityExchangeHours.IsOpen(System.DateTime, System.DateTime, bool)", label="Entry QuantConnect.Securities.SecurityExchangeHours.IsOpen(System.DateTime, System.DateTime, bool)", span="141-141"];
n265 [cluster="QuantConnect.Extensions.ExchangeRoundDown(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, bool)", label="Exit QuantConnect.Extensions.ExchangeRoundDown(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, bool)", span="513-513"];
n267 [cluster="QuantConnect.Extensions.ExchangeRoundDownInTimeZone(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, DateTimeZone, bool)", label="Entry QuantConnect.Extensions.ExchangeRoundDownInTimeZone(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, DateTimeZone, bool)", span="537-537"];
n268 [cluster="QuantConnect.Extensions.ExchangeRoundDownInTimeZone(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, DateTimeZone, bool)", label="interval == TimeSpan.Zero", span="540-540"];
n269 [cluster="QuantConnect.Extensions.ExchangeRoundDownInTimeZone(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, DateTimeZone, bool)", label="return dateTime;", span="540-540"];
n270 [cluster="QuantConnect.Extensions.ExchangeRoundDownInTimeZone(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, DateTimeZone, bool)", label="var rounded = dateTime.RoundDownInTimeZone(interval, exchangeHours.TimeZone, roundingTimeZone)", span="542-542"];
n271 [cluster="QuantConnect.Extensions.ExchangeRoundDownInTimeZone(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, DateTimeZone, bool)", label="!exchangeHours.IsOpen(rounded, rounded + interval, extendedMarket)", span="543-543"];
n272 [cluster="QuantConnect.Extensions.ExchangeRoundDownInTimeZone(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, DateTimeZone, bool)", label="rounded = (rounded - interval).RoundDownInTimeZone(interval, exchangeHours.TimeZone, roundingTimeZone)", span="545-545"];
n275 [cluster="System.DateTime.RoundDownInTimeZone(System.TimeSpan, DateTimeZone, DateTimeZone)", label="Entry System.DateTime.RoundDownInTimeZone(System.TimeSpan, DateTimeZone, DateTimeZone)", span="494-494"];
n273 [cluster="QuantConnect.Extensions.ExchangeRoundDownInTimeZone(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, DateTimeZone, bool)", label="return rounded;", span="547-547"];
n274 [cluster="QuantConnect.Extensions.ExchangeRoundDownInTimeZone(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, DateTimeZone, bool)", label="Exit QuantConnect.Extensions.ExchangeRoundDownInTimeZone(System.DateTime, System.TimeSpan, QuantConnect.Securities.SecurityExchangeHours, DateTimeZone, bool)", span="537-537"];
n276 [cluster="QuantConnect.Extensions.Round(System.DateTime, System.TimeSpan)", label="Entry QuantConnect.Extensions.Round(System.DateTime, System.TimeSpan)", span="556-556"];
n277 [cluster="QuantConnect.Extensions.Round(System.DateTime, System.TimeSpan)", label="return new DateTime((datetime - DateTime.MinValue).Round(roundingInterval).Ticks);", span="558-558"];
n278 [cluster="QuantConnect.Extensions.Round(System.DateTime, System.TimeSpan)", label="Exit QuantConnect.Extensions.Round(System.DateTime, System.TimeSpan)", span="556-556"];
n279 [cluster="System.DateTime.DateTime(long)", label="Entry System.DateTime.DateTime(long)", span="0-0"];
n280 [cluster="System.TimeSpan.Round(System.TimeSpan)", label="Entry System.TimeSpan.Round(System.TimeSpan)", span="465-465"];
n281 [cluster="QuantConnect.Extensions.RoundUp(System.DateTime, System.TimeSpan)", label="Entry QuantConnect.Extensions.RoundUp(System.DateTime, System.TimeSpan)", span="567-567"];
n282 [cluster="QuantConnect.Extensions.RoundUp(System.DateTime, System.TimeSpan)", label="d == TimeSpan.Zero", span="569-569"];
n283 [cluster="QuantConnect.Extensions.RoundUp(System.DateTime, System.TimeSpan)", label="return time;", span="572-572"];
n284 [cluster="QuantConnect.Extensions.RoundUp(System.DateTime, System.TimeSpan)", label="return new DateTime(((time.Ticks + d.Ticks - 1) / d.Ticks) * d.Ticks);", span="574-574"];
n285 [cluster="QuantConnect.Extensions.RoundUp(System.DateTime, System.TimeSpan)", label="Exit QuantConnect.Extensions.RoundUp(System.DateTime, System.TimeSpan)", span="567-567"];
n286 [cluster="QuantConnect.Extensions.ConvertTo(System.DateTime, DateTimeZone, DateTimeZone, bool)", label="Entry QuantConnect.Extensions.ConvertTo(System.DateTime, DateTimeZone, DateTimeZone, bool)", span="585-585"];
n287 [cluster="QuantConnect.Extensions.ConvertTo(System.DateTime, DateTimeZone, DateTimeZone, bool)", label="ReferenceEquals(from, to)", span="587-587"];
n288 [cluster="QuantConnect.Extensions.ConvertTo(System.DateTime, DateTimeZone, DateTimeZone, bool)", label="return time;", span="587-587"];
n289 [cluster="QuantConnect.Extensions.ConvertTo(System.DateTime, DateTimeZone, DateTimeZone, bool)", label=strict, span="589-589"];
n290 [cluster="QuantConnect.Extensions.ConvertTo(System.DateTime, DateTimeZone, DateTimeZone, bool)", label="return from.AtStrictly(LocalDateTime.FromDateTime(time)).WithZone(to).ToDateTimeUnspecified();", span="591-591"];
n291 [cluster="QuantConnect.Extensions.ConvertTo(System.DateTime, DateTimeZone, DateTimeZone, bool)", label="return from.AtLeniently(LocalDateTime.FromDateTime(time)).WithZone(to).ToDateTimeUnspecified();", span="594-594"];
n293 [cluster="Unk.ReferenceEquals", label="Entry Unk.ReferenceEquals", span=""];
n292 [cluster="QuantConnect.Extensions.ConvertTo(System.DateTime, DateTimeZone, DateTimeZone, bool)", label="Exit QuantConnect.Extensions.ConvertTo(System.DateTime, DateTimeZone, DateTimeZone, bool)", span="585-585"];
n294 [cluster="Unk.FromDateTime", label="Entry Unk.FromDateTime", span=""];
n295 [cluster="Unk.AtStrictly", label="Entry Unk.AtStrictly", span=""];
n296 [cluster="Unk.WithZone", label="Entry Unk.WithZone", span=""];
n297 [cluster="Unk.ToDateTimeUnspecified", label="Entry Unk.ToDateTimeUnspecified", span=""];
n298 [cluster="Unk.AtLeniently", label="Entry Unk.AtLeniently", span=""];
n299 [cluster="QuantConnect.Extensions.ConvertFromUtc(System.DateTime, DateTimeZone, bool)", label="Entry QuantConnect.Extensions.ConvertFromUtc(System.DateTime, DateTimeZone, bool)", span="604-604"];
n300 [cluster="QuantConnect.Extensions.ConvertFromUtc(System.DateTime, DateTimeZone, bool)", label="return time.ConvertTo(TimeZones.Utc, to, strict);", span="606-606"];
n301 [cluster="QuantConnect.Extensions.ConvertFromUtc(System.DateTime, DateTimeZone, bool)", label="Exit QuantConnect.Extensions.ConvertFromUtc(System.DateTime, DateTimeZone, bool)", span="604-604"];
n302 [cluster="QuantConnect.Extensions.ConvertToUtc(System.DateTime, DateTimeZone, bool)", label="Entry QuantConnect.Extensions.ConvertToUtc(System.DateTime, DateTimeZone, bool)", span="616-616"];
n303 [cluster="QuantConnect.Extensions.ConvertToUtc(System.DateTime, DateTimeZone, bool)", label=strict, span="618-618"];
n304 [cluster="QuantConnect.Extensions.ConvertToUtc(System.DateTime, DateTimeZone, bool)", label="return from.AtStrictly(LocalDateTime.FromDateTime(time)).ToDateTimeUtc();", span="620-620"];
n305 [cluster="QuantConnect.Extensions.ConvertToUtc(System.DateTime, DateTimeZone, bool)", label="return from.AtLeniently(LocalDateTime.FromDateTime(time)).ToDateTimeUtc();", span="623-623"];
n306 [cluster="QuantConnect.Extensions.ConvertToUtc(System.DateTime, DateTimeZone, bool)", label="Exit QuantConnect.Extensions.ConvertToUtc(System.DateTime, DateTimeZone, bool)", span="616-616"];
n307 [cluster="Unk.ToDateTimeUtc", label="Entry Unk.ToDateTimeUtc", span=""];
n308 [cluster="QuantConnect.Extensions.IsCommonBusinessDay(System.DateTime)", label="Entry QuantConnect.Extensions.IsCommonBusinessDay(System.DateTime)", span="631-631"];
n309 [cluster="QuantConnect.Extensions.IsCommonBusinessDay(System.DateTime)", label="return (date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday);", span="633-633"];
n310 [cluster="QuantConnect.Extensions.IsCommonBusinessDay(System.DateTime)", label="Exit QuantConnect.Extensions.IsCommonBusinessDay(System.DateTime)", span="631-631"];
n311 [cluster="QuantConnect.Extensions.Reset(System.Timers.Timer)", label="Entry QuantConnect.Extensions.Reset(System.Timers.Timer)", span="640-640"];
n312 [cluster="QuantConnect.Extensions.Reset(System.Timers.Timer)", label="timer.Stop()", span="642-642"];
n313 [cluster="QuantConnect.Extensions.Reset(System.Timers.Timer)", label="timer.Start()", span="643-643"];
n315 [cluster="System.Timers.Timer.Stop()", label="Entry System.Timers.Timer.Stop()", span="0-0"];
n314 [cluster="QuantConnect.Extensions.Reset(System.Timers.Timer)", label="Exit QuantConnect.Extensions.Reset(System.Timers.Timer)", span="640-640"];
n316 [cluster="System.Timers.Timer.Start()", label="Entry System.Timers.Timer.Start()", span="0-0"];
n317 [cluster="QuantConnect.Extensions.MatchesTypeName(System.Type, string)", label="Entry QuantConnect.Extensions.MatchesTypeName(System.Type, string)", span="653-653"];
n318 [cluster="QuantConnect.Extensions.MatchesTypeName(System.Type, string)", label="type.AssemblyQualifiedName == typeName", span="655-655"];
n320 [cluster="QuantConnect.Extensions.MatchesTypeName(System.Type, string)", label="type.FullName == typeName", span="659-659"];
n322 [cluster="QuantConnect.Extensions.MatchesTypeName(System.Type, string)", label="type.Name == typeName", span="663-663"];
n319 [cluster="QuantConnect.Extensions.MatchesTypeName(System.Type, string)", label="return true;", span="657-657"];
n321 [cluster="QuantConnect.Extensions.MatchesTypeName(System.Type, string)", label="return true;", span="661-661"];
n323 [cluster="QuantConnect.Extensions.MatchesTypeName(System.Type, string)", label="return true;", span="665-665"];
n324 [cluster="QuantConnect.Extensions.MatchesTypeName(System.Type, string)", label="return false;", span="667-667"];
n325 [cluster="QuantConnect.Extensions.MatchesTypeName(System.Type, string)", label="Exit QuantConnect.Extensions.MatchesTypeName(System.Type, string)", span="653-653"];
n326 [cluster="QuantConnect.Extensions.IsSubclassOfGeneric(System.Type, System.Type)", label="Entry QuantConnect.Extensions.IsSubclassOfGeneric(System.Type, System.Type)", span="677-677"];
n327 [cluster="QuantConnect.Extensions.IsSubclassOfGeneric(System.Type, System.Type)", label="type != null && type != typeof(object)", span="679-679"];
n329 [cluster="QuantConnect.Extensions.IsSubclassOfGeneric(System.Type, System.Type)", label="type.IsGenericType && possibleSuperType.IsGenericTypeDefinition", span="682-682"];
n330 [cluster="QuantConnect.Extensions.IsSubclassOfGeneric(System.Type, System.Type)", label="cur = type.GetGenericTypeDefinition()", span="684-684"];
n331 [cluster="QuantConnect.Extensions.IsSubclassOfGeneric(System.Type, System.Type)", label="cur = type", span="688-688"];
n332 [cluster="QuantConnect.Extensions.IsSubclassOfGeneric(System.Type, System.Type)", label="possibleSuperType == cur", span="690-690"];
n334 [cluster="QuantConnect.Extensions.IsSubclassOfGeneric(System.Type, System.Type)", label="type = type.BaseType", span="694-694"];
n328 [cluster="QuantConnect.Extensions.IsSubclassOfGeneric(System.Type, System.Type)", label="Type cur", span="681-681"];
n335 [cluster="QuantConnect.Extensions.IsSubclassOfGeneric(System.Type, System.Type)", label="return false;", span="696-696"];
n337 [cluster="System.Type.GetGenericTypeDefinition()", label="Entry System.Type.GetGenericTypeDefinition()", span="0-0"];
n333 [cluster="QuantConnect.Extensions.IsSubclassOfGeneric(System.Type, System.Type)", label="return true;", span="692-692"];
n336 [cluster="QuantConnect.Extensions.IsSubclassOfGeneric(System.Type, System.Type)", label="Exit QuantConnect.Extensions.IsSubclassOfGeneric(System.Type, System.Type)", span="677-677"];
n338 [cluster="QuantConnect.Extensions.GetBetterTypeName(System.Type)", label="Entry QuantConnect.Extensions.GetBetterTypeName(System.Type)", span="705-705"];
n339 [cluster="QuantConnect.Extensions.GetBetterTypeName(System.Type)", label="string name = type.Name", span="707-707"];
n340 [cluster="QuantConnect.Extensions.GetBetterTypeName(System.Type)", label="type.IsGenericType", span="708-708"];
n341 [cluster="QuantConnect.Extensions.GetBetterTypeName(System.Type)", label="var genericArguments = type.GetGenericArguments()", span="710-710"];
n343 [cluster="QuantConnect.Extensions.GetBetterTypeName(System.Type)", label="name = name.Replace(toBeReplaced, ''<'' + string.Join('', '', genericArguments.Select(x => x.GetBetterTypeName())) + ''>'')", span="712-712"];
n344 [cluster="QuantConnect.Extensions.GetBetterTypeName(System.Type)", label="return name;", span="714-714"];
n342 [cluster="QuantConnect.Extensions.GetBetterTypeName(System.Type)", label="var toBeReplaced = ''`'' + (genericArguments.Length)", span="711-711"];
n346 [cluster="System.Type.GetGenericArguments()", label="Entry System.Type.GetGenericArguments()", span="0-0"];
n347 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n348 [cluster="Unk.Join", label="Entry Unk.Join", span=""];
n349 [cluster="Unk.Replace", label="Entry Unk.Replace", span=""];
n350 [cluster="lambda expression", label="Entry lambda expression", span="712-712"];
n345 [cluster="QuantConnect.Extensions.GetBetterTypeName(System.Type)", label="Exit QuantConnect.Extensions.GetBetterTypeName(System.Type)", span="705-705"];
n351 [cluster="lambda expression", label="x.GetBetterTypeName()", span="712-712"];
n352 [cluster="lambda expression", label="Exit lambda expression", span="712-712"];
n353 [cluster="System.Type.GetBetterTypeName()", label="Entry System.Type.GetBetterTypeName()", span="705-705"];
n354 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label="Entry QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", span="722-722"];
n355 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label=resolution, span="724-724"];
n356 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label="Resolution.Tick", span="726-726"];
n358 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label="Resolution.Second", span="729-729"];
n360 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label="Resolution.Minute", span="731-731"];
n362 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label="Resolution.Hour", span="733-733"];
n364 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label="Resolution.Daily", span="735-735"];
n366 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label="throw new ArgumentOutOfRangeException(''resolution'');", span="738-738"];
n357 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label="return TimeSpan.FromTicks(0);", span="728-728"];
n359 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label="return TimeSpan.FromSeconds(1);", span="730-730"];
n361 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label="return TimeSpan.FromMinutes(1);", span="732-732"];
n363 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label="return TimeSpan.FromHours(1);", span="734-734"];
n365 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label="return TimeSpan.FromDays(1);", span="736-736"];
n367 [cluster="QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", label="Exit QuantConnect.Extensions.ToTimeSpan(QuantConnect.Resolution)", span="722-722"];
n371 [cluster="System.TimeSpan.FromHours(double)", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
n368 [cluster="System.TimeSpan.FromTicks(long)", label="Entry System.TimeSpan.FromTicks(long)", span="0-0"];
n372 [cluster="System.TimeSpan.FromDays(double)", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
n369 [cluster="System.TimeSpan.FromSeconds(double)", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
n373 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
n370 [cluster="System.TimeSpan.FromMinutes(double)", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
n374 [cluster="QuantConnect.Extensions.ConvertTo<T>(string)", label="Entry QuantConnect.Extensions.ConvertTo<T>(string)", span="748-748"];
n375 [cluster="QuantConnect.Extensions.ConvertTo<T>(string)", label="return (T) value.ConvertTo(typeof (T));", span="750-750"];
n376 [cluster="QuantConnect.Extensions.ConvertTo<T>(string)", label="Exit QuantConnect.Extensions.ConvertTo<T>(string)", span="748-748"];
n377 [cluster="string.ConvertTo(System.Type)", label="Entry string.ConvertTo(System.Type)", span="759-759"];
n378 [cluster="QuantConnect.Extensions.ConvertTo(string, System.Type)", label="Entry QuantConnect.Extensions.ConvertTo(string, System.Type)", span="759-759"];
n379 [cluster="QuantConnect.Extensions.ConvertTo(string, System.Type)", label="type.IsEnum", span="761-761"];
n380 [cluster="QuantConnect.Extensions.ConvertTo(string, System.Type)", label="return Enum.Parse(type, value);", span="763-763"];
n381 [cluster="QuantConnect.Extensions.ConvertTo(string, System.Type)", label="typeof (IConvertible).IsAssignableFrom(type)", span="766-766"];
n382 [cluster="QuantConnect.Extensions.ConvertTo(string, System.Type)", label="return Convert.ChangeType(value, type, CultureInfo.InvariantCulture);", span="768-768"];
n383 [cluster="QuantConnect.Extensions.ConvertTo(string, System.Type)", label="var parse = type.GetMethod(''Parse'', new[] {typeof (string)})", span="772-772"];
n385 [cluster="QuantConnect.Extensions.ConvertTo(string, System.Type)", label="var result = parse.Invoke(null, new object[] {value})", span="775-775"];
n387 [cluster="QuantConnect.Extensions.ConvertTo(string, System.Type)", label="return JsonConvert.DeserializeObject(value, type);", span="779-779"];
n390 [cluster="System.Type.IsAssignableFrom(System.Type)", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
n384 [cluster="QuantConnect.Extensions.ConvertTo(string, System.Type)", label="parse != null", span="773-773"];
n392 [cluster="System.Type.GetMethod(string, System.Type[])", label="Entry System.Type.GetMethod(string, System.Type[])", span="0-0"];
n386 [cluster="QuantConnect.Extensions.ConvertTo(string, System.Type)", label="return result;", span="776-776"];
n393 [cluster="System.Reflection.MethodBase.Invoke(object, object[])", label="Entry System.Reflection.MethodBase.Invoke(object, object[])", span="0-0"];
n388 [cluster="QuantConnect.Extensions.ConvertTo(string, System.Type)", label="Exit QuantConnect.Extensions.ConvertTo(string, System.Type)", span="759-759"];
n391 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
n394 [cluster="Unk.DeserializeObject", label="Entry Unk.DeserializeObject", span=""];
n389 [cluster="System.Enum.Parse(System.Type, string)", label="Entry System.Enum.Parse(System.Type, string)", span="0-0"];
n395 [cluster="QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, System.Threading.CancellationToken)", label="Entry QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, System.Threading.CancellationToken)", span="790-790"];
n396 [cluster="QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, System.Threading.CancellationToken)", label="return waitHandle.WaitOne(Timeout.Infinite, cancellationToken);", span="792-792"];
n397 [cluster="QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, System.Threading.CancellationToken)", label="Exit QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, System.Threading.CancellationToken)", span="790-790"];
n398 [cluster="System.Threading.WaitHandle.WaitOne(int, System.Threading.CancellationToken)", label="Entry System.Threading.WaitHandle.WaitOne(int, System.Threading.CancellationToken)", span="827-827"];
n399 [cluster="QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, System.TimeSpan, System.Threading.CancellationToken)", label="Entry QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, System.TimeSpan, System.Threading.CancellationToken)", span="808-808"];
n400 [cluster="QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, System.TimeSpan, System.Threading.CancellationToken)", label="return waitHandle.WaitOne((int) timeout.TotalMilliseconds, cancellationToken);", span="810-810"];
n401 [cluster="QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, System.TimeSpan, System.Threading.CancellationToken)", label="Exit QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, System.TimeSpan, System.Threading.CancellationToken)", span="808-808"];
n402 [cluster="QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, int, System.Threading.CancellationToken)", label="Entry QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, int, System.Threading.CancellationToken)", span="827-827"];
n403 [cluster="QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, int, System.Threading.CancellationToken)", label="return WaitHandle.WaitAny(new[] { waitHandle, cancellationToken.WaitHandle }, millisecondsTimeout) == 0;", span="829-829"];
n404 [cluster="QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, int, System.Threading.CancellationToken)", label="Exit QuantConnect.Extensions.WaitOne(System.Threading.WaitHandle, int, System.Threading.CancellationToken)", span="827-827"];
n405 [cluster="System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], int)", label="Entry System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], int)", span="0-0"];
n406 [cluster="QuantConnect.Extensions.GetMD5Hash(System.IO.Stream)", label="Entry QuantConnect.Extensions.GetMD5Hash(System.IO.Stream)", span="837-837"];
n407 [cluster="QuantConnect.Extensions.GetMD5Hash(System.IO.Stream)", label="var md5 = MD5.Create()", span="839-839"];
n408 [cluster="QuantConnect.Extensions.GetMD5Hash(System.IO.Stream)", label="return md5.ComputeHash(stream);", span="841-841"];
n409 [cluster="QuantConnect.Extensions.GetMD5Hash(System.IO.Stream)", label="Exit QuantConnect.Extensions.GetMD5Hash(System.IO.Stream)", span="837-837"];
n410 [cluster="System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)", label="Entry System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)", span="0-0"];
n411 [cluster="QuantConnect.Extensions.WithEmbeddedHtmlAnchors(string)", label="Entry QuantConnect.Extensions.WithEmbeddedHtmlAnchors(string)", span="850-850"];
n412 [cluster="QuantConnect.Extensions.WithEmbeddedHtmlAnchors(string)", label="var regx = new Regex(''http(s)?://([\\w+?\\.\\w+])+([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\,]*([a-zA-Z0-9\\?\\#\\=\\/]){1})?'', RegexOptions.IgnoreCase)", span="852-852"];
n413 [cluster="QuantConnect.Extensions.WithEmbeddedHtmlAnchors(string)", label="var matches = regx.Matches(source)", span="853-853"];
n415 [cluster="QuantConnect.Extensions.WithEmbeddedHtmlAnchors(string)", label="source = source.Replace(match.Value, ''<a href=''' + match.Value + ''' target='blank'>'' + match.Value + ''</a>'')", span="856-856"];
n416 [cluster="QuantConnect.Extensions.WithEmbeddedHtmlAnchors(string)", label="return source;", span="858-858"];
n418 [cluster="System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", label="Entry System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", span="0-0"];
n414 [cluster="QuantConnect.Extensions.WithEmbeddedHtmlAnchors(string)", label=matches, span="854-854"];
n419 [cluster="System.Text.RegularExpressions.Regex.Matches(string)", label="Entry System.Text.RegularExpressions.Regex.Matches(string)", span="0-0"];
n420 [cluster="string.Replace(string, string)", label="Entry string.Replace(string, string)", span="0-0"];
n417 [cluster="QuantConnect.Extensions.WithEmbeddedHtmlAnchors(string)", label="Exit QuantConnect.Extensions.WithEmbeddedHtmlAnchors(string)", span="850-850"];
n421 [cluster="QuantConnect.Extensions.SingleOrAlgorithmTypeName(System.Collections.Generic.List<string>, string)", label="Entry QuantConnect.Extensions.SingleOrAlgorithmTypeName(System.Collections.Generic.List<string>, string)", span="867-867"];
n422 [cluster="QuantConnect.Extensions.SingleOrAlgorithmTypeName(System.Collections.Generic.List<string>, string)", label="return names.Count == 1 ? names.Single() : names.SingleOrDefault(x => x.Contains(''.'' + algorithmTypeName));", span="871-871"];
n427 [cluster="lambda expression", label="x.Contains(''.'' + algorithmTypeName)", span="871-871"];
n423 [cluster="QuantConnect.Extensions.SingleOrAlgorithmTypeName(System.Collections.Generic.List<string>, string)", label="Exit QuantConnect.Extensions.SingleOrAlgorithmTypeName(System.Collections.Generic.List<string>, string)", span="867-867"];
n424 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
n425 [cluster="Unk.SingleOrDefault", label="Entry Unk.SingleOrDefault", span=""];
n426 [cluster="lambda expression", label="Entry lambda expression", span="871-871"];
n428 [cluster="lambda expression", label="Exit lambda expression", span="871-871"];
n429 [cluster="string.Contains(string)", label="Entry string.Contains(string)", span="0-0"];
n430 [cluster="QuantConnect.Extensions.ToLower(System.Enum)", label="Entry QuantConnect.Extensions.ToLower(System.Enum)", span="879-879"];
n431 [cluster="QuantConnect.Extensions.ToLower(System.Enum)", label="return @enum.ToString().ToLower();", span="881-881"];
n432 [cluster="QuantConnect.Extensions.ToLower(System.Enum)", label="Exit QuantConnect.Extensions.ToLower(System.Enum)", span="879-879"];
n433 [cluster="System.Enum.ToString()", label="Entry System.Enum.ToString()", span="0-0"];
n434 [cluster="string.ToLower()", label="Entry string.ToLower()", span="0-0"];
n435 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="Entry QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", span="890-890"];
n436 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="var limitPrice = 0m", span="892-892"];
n438 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="order.Type", span="895-895"];
n440 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="var limitOrder = order as LimitOrder", span="898-898"];
n443 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="var stopMarketOrder = order as StopMarketOrder", span="902-902"];
n446 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="var stopLimitOrder = order as StopLimitOrder", span="906-906"];
n453 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="limitPrice = order.Price", span="914-914"];
n454 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="stopPrice = order.Price", span="915-915"];
n456 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="var submitOrderRequest = new SubmitOrderRequest(order.Type,\r\n                order.SecurityType,\r\n                order.Symbol,\r\n                order.Quantity,\r\n                stopPrice,\r\n                limitPrice,\r\n                order.Time,\r\n                order.Tag)", span="921-928"];
n457 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="submitOrderRequest.SetOrderId(order.Id)", span="930-930"];
n458 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="return new OrderTicket(transactionManager, submitOrderRequest);", span="932-932"];
n437 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="var stopPrice = 0m", span="893-893"];
n439 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="OrderType.Limit", span="897-897"];
n442 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="OrderType.StopMarket", span="901-901"];
n445 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="OrderType.StopLimit", span="905-905"];
n449 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="OrderType.OptionExercise", span="910-910"];
n455 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="throw new ArgumentOutOfRangeException();", span="918-918"];
n441 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="limitPrice = limitOrder.LimitPrice", span="899-899"];
n444 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="stopPrice = stopMarketOrder.StopPrice", span="903-903"];
n447 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="stopPrice = stopLimitOrder.StopPrice", span="907-907"];
n448 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="limitPrice = stopLimitOrder.LimitPrice", span="908-908"];
n450 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="OrderType.Market", span="911-911"];
n451 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="OrderType.MarketOnOpen", span="912-912"];
n452 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="OrderType.MarketOnClose", span="913-913"];
n461 [cluster="QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, QuantConnect.Symbol, decimal, decimal, decimal, System.DateTime, string)", label="Entry QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, QuantConnect.Symbol, decimal, decimal, decimal, System.DateTime, string)", span="92-92"];
n462 [cluster="QuantConnect.Orders.SubmitOrderRequest.SetOrderId(int)", label="Entry QuantConnect.Orders.SubmitOrderRequest.SetOrderId(int)", span="107-107"];
n459 [cluster="QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", label="Exit QuantConnect.Extensions.ToOrderTicket(QuantConnect.Orders.Order, QuantConnect.Securities.SecurityTransactionManager)", span="890-890"];
n460 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException()", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException()", span="0-0"];
n463 [cluster="QuantConnect.Orders.OrderTicket.OrderTicket(QuantConnect.Securities.SecurityTransactionManager, QuantConnect.Orders.SubmitOrderRequest)", label="Entry QuantConnect.Orders.OrderTicket.OrderTicket(QuantConnect.Securities.SecurityTransactionManager, QuantConnect.Orders.SubmitOrderRequest)", span="194-194"];
m1_21 [cluster="QuantConnect.Algorithm.Field.TradeBarPropertyOrValue(System.Func<QuantConnect.Data.Market.TradeBar, decimal>, System.Func<QuantConnect.Data.BaseData, decimal>)", file="Field.cs", label="Entry QuantConnect.Algorithm.Field.TradeBarPropertyOrValue(System.Func<QuantConnect.Data.Market.TradeBar, decimal>, System.Func<QuantConnect.Data.BaseData, decimal>)", span="77-77"];
m1_22 [cluster="QuantConnect.Algorithm.Field.TradeBarPropertyOrValue(System.Func<QuantConnect.Data.Market.TradeBar, decimal>, System.Func<QuantConnect.Data.BaseData, decimal>)", file="Field.cs", label="return x =>\r\n            {\r\n                var bar = x as TradeBar;\r\n                if (bar != null)\r\n                {\r\n                    return selector(bar);\r\n                }\r\n                defaultSelector = defaultSelector ?? (data => data.Value);\r\n                return defaultSelector(x);\r\n            };", span="79-88"];
m1_23 [cluster="QuantConnect.Algorithm.Field.TradeBarPropertyOrValue(System.Func<QuantConnect.Data.Market.TradeBar, decimal>, System.Func<QuantConnect.Data.BaseData, decimal>)", file="Field.cs", label="Exit QuantConnect.Algorithm.Field.TradeBarPropertyOrValue(System.Func<QuantConnect.Data.Market.TradeBar, decimal>, System.Func<QuantConnect.Data.BaseData, decimal>)", span="77-77"];
m1_32 [cluster="lambda expression", file="Field.cs", label="Entry lambda expression", span="86-86"];
m1_0 [cluster="lambda expression", file="Field.cs", label="Entry lambda expression", span="31-31"];
m1_1 [cluster="lambda expression", file="Field.cs", label="x.Open", span="31-31"];
m1_2 [cluster="lambda expression", file="Field.cs", label="Exit lambda expression", span="31-31"];
m1_3 [cluster="lambda expression", file="Field.cs", label="Entry lambda expression", span="39-39"];
m1_4 [cluster="lambda expression", file="Field.cs", label="x.High", span="39-39"];
m1_5 [cluster="lambda expression", file="Field.cs", label="Exit lambda expression", span="39-39"];
m1_6 [cluster="lambda expression", file="Field.cs", label="Entry lambda expression", span="47-47"];
m1_7 [cluster="lambda expression", file="Field.cs", label="x.Low", span="47-47"];
m1_8 [cluster="lambda expression", file="Field.cs", label="Exit lambda expression", span="47-47"];
m1_9 [cluster="lambda expression", file="Field.cs", label="Entry lambda expression", span="55-55"];
m1_10 [cluster="lambda expression", file="Field.cs", label="x.Value", span="55-55"];
m1_11 [cluster="lambda expression", file="Field.cs", label="Exit lambda expression", span="55-55"];
m1_12 [cluster="lambda expression", file="Field.cs", label="Entry lambda expression", span="65-65"];
m1_14 [cluster="lambda expression", file="Field.cs", label="Exit lambda expression", span="65-65"];
m1_15 [cluster="lambda expression", file="Field.cs", label="Entry lambda expression", span="74-74"];
m1_16 [cluster="lambda expression", file="Field.cs", label="x.Volume", span="74-74"];
m1_17 [cluster="lambda expression", file="Field.cs", label="Exit lambda expression", span="74-74"];
m1_18 [cluster="lambda expression", file="Field.cs", label="Entry lambda expression", span="74-74"];
m1_19 [cluster="lambda expression", file="Field.cs", label="0m", span="74-74"];
m1_20 [cluster="lambda expression", file="Field.cs", label="Exit lambda expression", span="74-74"];
m1_27 [cluster="lambda expression", file="Field.cs", label="return selector(bar);", span="84-84"];
m1_25 [cluster="lambda expression", file="Field.cs", label="var bar = x as TradeBar", span="81-81"];
m1_28 [cluster="lambda expression", file="Field.cs", label="defaultSelector = defaultSelector ?? (data => data.Value)", span="86-86"];
m1_29 [cluster="lambda expression", file="Field.cs", label="return defaultSelector(x);", span="87-87"];
m1_24 [cluster="lambda expression", file="Field.cs", label="Entry lambda expression", span="79-88"];
m1_26 [cluster="lambda expression", file="Field.cs", label="bar != null", span="82-82"];
m1_33 [cluster="lambda expression", file="Field.cs", label="data.Value", span="86-86"];
m1_30 [cluster="lambda expression", file="Field.cs", label="Exit lambda expression", span="79-88"];
m1_34 [cluster="lambda expression", file="Field.cs", label="Exit lambda expression", span="86-86"];
m1_35 [file="Field.cs", label="System.Func<QuantConnect.Data.Market.TradeBar, decimal>", span=""];
m1_36 [file="Field.cs", label="System.Func<QuantConnect.Data.BaseData, decimal>", span=""];
m2_27 [cluster="QuantConnect.Util.Composer.GetExportedValueByTypeName<T>(string)", file="LeanEngineAlgorithmHandlers.cs", label="Entry QuantConnect.Util.Composer.GetExportedValueByTypeName<T>(string)", span="72-72"];
m2_36 [cluster="QuantConnect.Lean.Engine.DataFeeds.IDataFeed.Exit()", file="LeanEngineAlgorithmHandlers.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.IDataFeed.Exit()", span="119-119"];
m2_39 [cluster="System.IDisposable.Dispose()", file="LeanEngineAlgorithmHandlers.cs", label="Entry System.IDisposable.Dispose()", span="0-0"];
m2_28 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.Dispose()", file="LeanEngineAlgorithmHandlers.cs", label="Entry QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.Dispose()", span="147-147"];
m2_33 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.Dispose()", file="LeanEngineAlgorithmHandlers.cs", label="Setup.Dispose()", span="153-153"];
m2_34 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.Dispose()", file="LeanEngineAlgorithmHandlers.cs", label="Exit QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.Dispose()", span="147-147"];
m2_37 [cluster="QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler.Exit()", file="LeanEngineAlgorithmHandlers.cs", label="Entry QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler.Exit()", span="59-59"];
m2_0 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="Entry QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", span="87-87"];
m2_1 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="results == null", span="93-93"];
m2_3 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="setup == null", span="97-97"];
m2_5 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="dataFeed == null", span="101-101"];
m2_7 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="transactions == null", span="105-105"];
m2_9 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="realTime == null", span="109-109"];
m2_11 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="_results = results", span="113-113"];
m2_12 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="_setup = setup", span="114-114"];
m2_13 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="_dataFeed = dataFeed", span="115-115"];
m2_14 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="_transactions = transactions", span="116-116"];
m2_15 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="_realTime = realTime", span="117-117"];
m2_2 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="throw new ArgumentNullException(''results'');", span="95-95"];
m2_4 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="throw new ArgumentNullException(''setup'');", span="99-99"];
m2_6 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="throw new ArgumentNullException(''dataFeed'');", span="103-103"];
m2_8 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="throw new ArgumentNullException(''transactions'');", span="107-107"];
m2_10 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="throw new ArgumentNullException(''realTime'');", span="111-111"];
m2_16 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", file="LeanEngineAlgorithmHandlers.cs", label="Exit QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.LeanEngineAlgorithmHandlers(QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", span="87-87"];
m2_17 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="LeanEngineAlgorithmHandlers.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m2_38 [cluster="QuantConnect.Lean.Engine.RealTime.IRealTimeHandler.Exit()", file="LeanEngineAlgorithmHandlers.cs", label="Entry QuantConnect.Lean.Engine.RealTime.IRealTimeHandler.Exit()", span="109-109"];
m2_18 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.FromConfiguration(QuantConnect.Util.Composer)", file="LeanEngineAlgorithmHandlers.cs", label="Entry QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.FromConfiguration(QuantConnect.Util.Composer)", span="126-126"];
m2_19 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.FromConfiguration(QuantConnect.Util.Composer)", file="LeanEngineAlgorithmHandlers.cs", label="var setupHandlerTypeName = Config.Get(''setup-handler'', ''ConsoleSetupHandler'')", span="128-128"];
m2_24 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.FromConfiguration(QuantConnect.Util.Composer)", file="LeanEngineAlgorithmHandlers.cs", label="return new LeanEngineAlgorithmHandlers(\r\n                composer.GetExportedValueByTypeName<IResultHandler>(resultHandlerTypeName),\r\n                composer.GetExportedValueByTypeName<ISetupHandler>(setupHandlerTypeName),\r\n                composer.GetExportedValueByTypeName<IDataFeed>(dataFeedHandlerTypeName),\r\n                composer.GetExportedValueByTypeName<ITransactionHandler>(transactionHandlerTypeName),\r\n                composer.GetExportedValueByTypeName<IRealTimeHandler>(realTimeHandlerTypeName)\r\n                );", span="134-140"];
m2_20 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.FromConfiguration(QuantConnect.Util.Composer)", file="LeanEngineAlgorithmHandlers.cs", label="var transactionHandlerTypeName = Config.Get(''transaction-handler'', ''BacktestingTransactionHandler'')", span="129-129"];
m2_21 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.FromConfiguration(QuantConnect.Util.Composer)", file="LeanEngineAlgorithmHandlers.cs", label="var realTimeHandlerTypeName = Config.Get(''real-time-handler'', ''BacktestingRealTimeHandler'')", span="130-130"];
m2_22 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.FromConfiguration(QuantConnect.Util.Composer)", file="LeanEngineAlgorithmHandlers.cs", label="var dataFeedHandlerTypeName = Config.Get(''data-feed-handler'', ''FileSystemDataFeed'')", span="131-131"];
m2_23 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.FromConfiguration(QuantConnect.Util.Composer)", file="LeanEngineAlgorithmHandlers.cs", label="var resultHandlerTypeName = Config.Get(''result-handler'', ''ConsoleResultHandler'')", span="132-132"];
m2_25 [cluster="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.FromConfiguration(QuantConnect.Util.Composer)", file="LeanEngineAlgorithmHandlers.cs", label="Exit QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers.FromConfiguration(QuantConnect.Util.Composer)", span="126-126"];
m2_26 [cluster="QuantConnect.Configuration.Config.Get(string, string)", file="LeanEngineAlgorithmHandlers.cs", label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="87-87"];
m2_35 [cluster="QuantConnect.Lean.Engine.Results.IResultHandler.Exit()", file="LeanEngineAlgorithmHandlers.cs", label="Entry QuantConnect.Lean.Engine.Results.IResultHandler.Exit()", span="221-221"];
m2_40 [file="LeanEngineAlgorithmHandlers.cs", label="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers", span=""];
m3_6 [cluster="QuantConnect.Views.WinForms.LeanEngineWinForm.ConsoleOnKeyUp(object, KeyEventArgs)", file="LeanEngineWinForm.Events.cs", label="Entry QuantConnect.Views.WinForms.LeanEngineWinForm.ConsoleOnKeyUp(object, KeyEventArgs)", span="40-40"];
m3_7 [cluster="QuantConnect.Views.WinForms.LeanEngineWinForm.ConsoleOnKeyUp(object, KeyEventArgs)", file="LeanEngineWinForm.Events.cs", label="!_resultsHandler.IsActive", span="42-42"];
m3_8 [cluster="QuantConnect.Views.WinForms.LeanEngineWinForm.ConsoleOnKeyUp(object, KeyEventArgs)", file="LeanEngineWinForm.Events.cs", label="Environment.Exit(0)", span="44-44"];
m3_9 [cluster="QuantConnect.Views.WinForms.LeanEngineWinForm.ConsoleOnKeyUp(object, KeyEventArgs)", file="LeanEngineWinForm.Events.cs", label="Exit QuantConnect.Views.WinForms.LeanEngineWinForm.ConsoleOnKeyUp(object, KeyEventArgs)", span="40-40"];
m3_4 [cluster="QuantConnect.Lean.Engine.Engine.Dispose()", file="LeanEngineWinForm.Events.cs", label="Entry QuantConnect.Lean.Engine.Engine.Dispose()", span="426-426"];
m3_5 [cluster="System.Environment.Exit(int)", file="LeanEngineWinForm.Events.cs", label="Entry System.Environment.Exit(int)", span="0-0"];
m3_0 [cluster="QuantConnect.Views.WinForms.LeanEngineWinForm.OnClosed(object, System.EventArgs)", file="LeanEngineWinForm.Events.cs", label="Entry QuantConnect.Views.WinForms.LeanEngineWinForm.OnClosed(object, System.EventArgs)", span="29-29"];
m3_2 [cluster="QuantConnect.Views.WinForms.LeanEngineWinForm.OnClosed(object, System.EventArgs)", file="LeanEngineWinForm.Events.cs", label="Environment.Exit(0)", span="32-32"];
m3_3 [cluster="QuantConnect.Views.WinForms.LeanEngineWinForm.OnClosed(object, System.EventArgs)", file="LeanEngineWinForm.Events.cs", label="Exit QuantConnect.Views.WinForms.LeanEngineWinForm.OnClosed(object, System.EventArgs)", span="29-29"];
m3_10 [file="LeanEngineWinForm.Events.cs", label="QuantConnect.Views.WinForms.LeanEngineWinForm", span=""];
n464 -> n58  [color=darkseagreen4, key=1, label=V, style=dashed];
n465 -> n66  [color=darkseagreen4, key=1, label=TKey, style=dashed];
n466 -> n66  [color=darkseagreen4, key=1, label="System.Func<TKey, TValue>", style=dashed];
n467 -> n70  [color=darkseagreen4, key=1, label="System.Func<TKey, TValue, TValue>", style=dashed];
n467 -> n73  [color=darkseagreen4, key=1, label="System.Func<TKey, TValue, TValue>", style=dashed];
n468 -> n73  [color=darkseagreen4, key=1, label=TKey, style=dashed];
n469 -> n73  [color=darkseagreen4, key=1, label="System.Lazy<TValue>", style=dashed];
n470 -> n427  [color=darkseagreen4, key=1, label=string, style=dashed];
n0 -> n2  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<T>", style=dashed];
n0 -> n3  [color=darkseagreen4, key=1, label=int, style=dashed];
n0 -> n4  [color=darkseagreen4, key=1, label=int, style=dashed];
n0 -> n5  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<T>", style=dashed];
n1 -> n5  [color=darkseagreen4, key=1, label=oItem, style=dashed];
n4 -> n4  [color=darkseagreen4, key=1, label=int, style=dashed];
n9 -> n11  [color=darkseagreen4, key=1, label=string, style=dashed];
n10 -> n12  [color=darkseagreen4, key=1, label=bytes, style=dashed];
n16 -> n18  [color=darkseagreen4, key=1, label="System.Collections.Concurrent.ConcurrentQueue<T>", style=dashed];
n21 -> n24  [color=darkseagreen4, key=1, label="byte[]", style=dashed];
n28 -> n32  [color=darkseagreen4, key=1, label=builder, style=dashed];
n28 -> n33  [color=darkseagreen4, key=1, label=builder, style=dashed];
n44 -> n47  [color=darkseagreen4, key=1, label=hash, style=dashed];
n44 -> n48  [color=darkseagreen4, key=1, label=hash, style=dashed];
n53 -> n58  [color=darkseagreen4, key=1, label=V, style=dashed];
n54 -> n57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n60 -> n66  [color=darkseagreen4, key=1, label=TKey, style=dashed];
n60 -> n70  [color=darkseagreen4, key=1, label="System.Func<TKey, TValue, TValue>", style=dashed];
n60 -> n73  [color=darkseagreen4, key=1, label="System.Func<TKey, TValue, TValue>", style=dashed];
n61 -> n69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n69 -> n73  [color=darkseagreen4, key=1, label=TKey, style=dashed];
n76 -> n78  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<TKey, TCollection>", style=dashed];
n76 -> n80  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<TKey, TCollection>", style=dashed];
n76 -> n81  [color=darkseagreen4, key=1, label=TElement, style=dashed];
n79 -> n81  [color=darkseagreen4, key=1, label=list, style=dashed];
n87 -> n91  [color=darkseagreen4, key=1, label=double, style=dashed];
n98 -> n102  [color=darkseagreen4, key=1, label=decimal, style=dashed];
n107 -> n109  [color=darkseagreen4, key=1, label=decimal, style=dashed];
n115 -> n118  [color=darkseagreen4, key=1, label=double, style=dashed];
n115 -> n120  [color=darkseagreen4, key=1, label=double, style=dashed];
n124 -> n130  [color=darkseagreen4, key=1, label=string, style=dashed];
n129 -> n135  [color=darkseagreen4, key=1, label=length, style=dashed];
n132 -> n145  [color=darkseagreen4, key=1, label=isNegative, style=dashed];
n136 -> n140  [color=darkseagreen4, key=1, label=ch, style=dashed];
n126 -> n142  [color=darkseagreen4, key=1, label=decimalPlaces, style=dashed];
n126 -> n145  [color=darkseagreen4, key=1, label=decimalPlaces, style=dashed];
n143 -> n145  [color=darkseagreen4, key=1, label=lo, style=dashed];
n127 -> n145  [color=darkseagreen4, key=1, label=hasDecimals, style=dashed];
n142 -> n142  [color=darkseagreen4, key=1, label=decimalPlaces, style=dashed];
n142 -> n145  [color=darkseagreen4, key=1, label=decimalPlaces, style=dashed];
n128 -> n130  [color=darkseagreen4, key=1, label=index, style=dashed];
n128 -> n131  [color=darkseagreen4, key=1, label=index, style=dashed];
n128 -> n134  [color=darkseagreen4, key=1, label=index, style=dashed];
n128 -> n135  [color=darkseagreen4, key=1, label=index, style=dashed];
n131 -> n131  [color=darkseagreen4, key=1, label=index, style=dashed];
n131 -> n134  [color=darkseagreen4, key=1, label=index, style=dashed];
n131 -> n135  [color=darkseagreen4, key=1, label=index, style=dashed];
n134 -> n134  [color=darkseagreen4, key=1, label=index, style=dashed];
n138 -> n145  [color=darkseagreen4, key=1, label=hasDecimals, style=dashed];
n139 -> n145  [color=darkseagreen4, key=1, label=decimalPlaces, style=dashed];
n149 -> n152  [color=darkseagreen4, key=1, label=string, style=dashed];
n150 -> n155  [color=darkseagreen4, key=1, label=value, style=dashed];
n153 -> n155  [color=darkseagreen4, key=1, label=value, style=dashed];
n151 -> n154  [color=darkseagreen4, key=1, label=i, style=dashed];
n154 -> n154  [color=darkseagreen4, key=1, label=i, style=dashed];
n157 -> n160  [color=darkseagreen4, key=1, label=string, style=dashed];
n158 -> n163  [color=darkseagreen4, key=1, label=value, style=dashed];
n161 -> n163  [color=darkseagreen4, key=1, label=value, style=dashed];
n159 -> n162  [color=darkseagreen4, key=1, label=i, style=dashed];
n162 -> n162  [color=darkseagreen4, key=1, label=i, style=dashed];
n165 -> n169  [color=darkseagreen4, key=1, label=string, style=dashed];
n165 -> n170  [color=darkseagreen4, key=1, label=string, style=dashed];
n165 -> n173  [color=darkseagreen4, key=1, label=string, style=dashed];
n165 -> n178  [color=darkseagreen4, key=1, label=string, style=dashed];
n166 -> n171  [color=darkseagreen4, key=1, label=last, style=dashed];
n166 -> n173  [color=darkseagreen4, key=1, label=last, style=dashed];
n166 -> n176  [color=darkseagreen4, key=1, label=last, style=dashed];
n166 -> n178  [color=darkseagreen4, key=1, label=last, style=dashed];
n167 -> n173  [color=darkseagreen4, key=1, label=csv, style=dashed];
n167 -> n178  [color=darkseagreen4, key=1, label=csv, style=dashed];
n167 -> n179  [color=darkseagreen4, key=1, label=csv, style=dashed];
n168 -> n170  [color=darkseagreen4, key=1, label=i, style=dashed];
n168 -> n173  [color=darkseagreen4, key=1, label=i, style=dashed];
n168 -> n175  [color=darkseagreen4, key=1, label=i, style=dashed];
n174 -> n176  [color=darkseagreen4, key=1, label=last, style=dashed];
n174 -> n178  [color=darkseagreen4, key=1, label=last, style=dashed];
n175 -> n175  [color=darkseagreen4, key=1, label=i, style=dashed];
n185 -> n190  [color=darkseagreen4, key=1, label=string, style=dashed];
n185 -> n191  [color=darkseagreen4, key=1, label=string, style=dashed];
n185 -> n196  [color=darkseagreen4, key=1, label=string, style=dashed];
n185 -> n199  [color=darkseagreen4, key=1, label=string, style=dashed];
n185 -> n200  [color=darkseagreen4, key=1, label=string, style=dashed];
n186 -> n196  [color=darkseagreen4, key=1, label=csv, style=dashed];
n186 -> n200  [color=darkseagreen4, key=1, label=csv, style=dashed];
n186 -> n201  [color=darkseagreen4, key=1, label=csv, style=dashed];
n187 -> n196  [color=darkseagreen4, key=1, label=last, style=dashed];
n187 -> n199  [color=darkseagreen4, key=1, label=last, style=dashed];
n187 -> n200  [color=darkseagreen4, key=1, label=last, style=dashed];
n189 -> n191  [color=darkseagreen4, key=1, label=i, style=dashed];
n189 -> n196  [color=darkseagreen4, key=1, label=i, style=dashed];
n189 -> n198  [color=darkseagreen4, key=1, label=i, style=dashed];
n193 -> n195  [color=darkseagreen4, key=1, label=textDataField, style=dashed];
n197 -> n199  [color=darkseagreen4, key=1, label=last, style=dashed];
n197 -> n200  [color=darkseagreen4, key=1, label=last, style=dashed];
n198 -> n198  [color=darkseagreen4, key=1, label=i, style=dashed];
n213 -> n215  [color=darkseagreen4, key=1, label=ext, style=dashed];
n213 -> n217  [color=darkseagreen4, key=1, label=ext, style=dashed];
n222 -> n225  [color=darkseagreen4, key=1, label=string, style=dashed];
n223 -> n228  [color=darkseagreen4, key=1, label=stream, style=dashed];
n224 -> n226  [color=darkseagreen4, key=1, label=writer, style=dashed];
n234 -> n236  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
n234 -> n237  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
n237 -> n237  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
n245 -> n247  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
n245 -> n248  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
n248 -> n248  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
n251 -> n254  [color=darkseagreen4, key=1, label=DateTimeZone, style=dashed];
n258 -> n260  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
n258 -> n262  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
n261 -> n264  [color=darkseagreen4, key=1, label=rounded, style=dashed];
n263 -> n264  [color=darkseagreen4, key=1, label=rounded, style=dashed];
n267 -> n269  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
n267 -> n271  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
n270 -> n273  [color=darkseagreen4, key=1, label=rounded, style=dashed];
n272 -> n273  [color=darkseagreen4, key=1, label=rounded, style=dashed];
n281 -> n283  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
n281 -> n284  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
n284 -> n284  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
n286 -> n288  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
n286 -> n289  [color=darkseagreen4, key=1, label=bool, style=dashed];
n286 -> n290  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
n286 -> n291  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
n302 -> n304  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
n302 -> n305  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
n311 -> n313  [color=darkseagreen4, key=1, label="System.Timers.Timer", style=dashed];
n317 -> n320  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n317 -> n322  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n326 -> n329  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n326 -> n332  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n338 -> n340  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n339 -> n344  [color=darkseagreen4, key=1, label=name, style=dashed];
n343 -> n350  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n378 -> n380  [color=darkseagreen4, key=1, label=string, style=dashed];
n378 -> n381  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n378 -> n382  [color=darkseagreen4, key=1, label=string, style=dashed];
n378 -> n387  [color=darkseagreen4, key=1, label=string, style=dashed];
n400 -> n400  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
n403 -> n403  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
n406 -> n408  [color=darkseagreen4, key=1, label="System.IO.Stream", style=dashed];
n411 -> n416  [color=darkseagreen4, key=1, label=string, style=dashed];
n415 -> n416  [color=darkseagreen4, key=1, label=string, style=dashed];
n421 -> n427  [color=darkseagreen4, key=1, label=string, style=dashed];
n422 -> n426  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n435 -> n438  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n435 -> n457  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n435 -> n458  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityTransactionManager", style=dashed];
n456 -> n458  [color=darkseagreen4, key=1, label=submitOrderRequest, style=dashed];
m1_21 -> m1_27  [color=darkseagreen4, key=1, label="System.Func<QuantConnect.Data.Market.TradeBar, decimal>", style=dashed];
m1_22 -> m1_29  [color=darkseagreen4, key=1, label="QuantConnect.Data.BaseData", style=dashed];
m1_25 -> m1_27  [color=darkseagreen4, key=1, label=bar, style=dashed];
m1_28 -> m1_33  [color=darkseagreen4, key=1, label="QuantConnect.Data.BaseData", style=dashed];
m1_24 -> m1_29  [color=darkseagreen4, key=1, label="QuantConnect.Data.BaseData", style=dashed];
m1_35 -> m1_27  [color=darkseagreen4, key=1, label="System.Func<QuantConnect.Data.Market.TradeBar, decimal>", style=dashed];
m2_0 -> m2_3  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.ISetupHandler", style=dashed];
m2_0 -> m2_5  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.DataFeeds.IDataFeed", style=dashed];
m2_0 -> m2_7  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler", style=dashed];
m2_0 -> m2_9  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.RealTime.IRealTimeHandler", style=dashed];
m2_18 -> m2_24  [color=darkseagreen4, key=1, label="QuantConnect.Util.Composer", style=dashed];
m2_19 -> m2_24  [color=darkseagreen4, key=1, label=setupHandlerTypeName, style=dashed];
m2_20 -> m2_24  [color=darkseagreen4, key=1, label=transactionHandlerTypeName, style=dashed];
m2_21 -> m2_24  [color=darkseagreen4, key=1, label=realTimeHandlerTypeName, style=dashed];
m2_22 -> m2_24  [color=darkseagreen4, key=1, label=dataFeedHandlerTypeName, style=dashed];
m2_40 -> m2_33  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers", style=dashed];
m3_10 -> m3_7  [color=darkseagreen4, key=1, label="QuantConnect.Views.WinForms.LeanEngineWinForm", style=dashed];
}
