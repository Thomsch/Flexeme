digraph  {
n0 [cluster="QuantConnect.Securities.ISecurityMarginModel.GetLeverage(QuantConnect.Securities.Security)", label="Entry QuantConnect.Securities.ISecurityMarginModel.GetLeverage(QuantConnect.Securities.Security)", span="29-29"];
n1 [cluster="QuantConnect.Securities.ISecurityMarginModel.GetLeverage(QuantConnect.Securities.Security)", label="Exit QuantConnect.Securities.ISecurityMarginModel.GetLeverage(QuantConnect.Securities.Security)", span="29-29"];
n2 [cluster="QuantConnect.Securities.ISecurityMarginModel.SetLeverage(QuantConnect.Securities.Security, decimal)", label="Entry QuantConnect.Securities.ISecurityMarginModel.SetLeverage(QuantConnect.Securities.Security, decimal)", span="39-39"];
n3 [cluster="QuantConnect.Securities.ISecurityMarginModel.SetLeverage(QuantConnect.Securities.Security, decimal)", label="Exit QuantConnect.Securities.ISecurityMarginModel.SetLeverage(QuantConnect.Securities.Security, decimal)", span="39-39"];
n4 [cluster="QuantConnect.Securities.ISecurityMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", label="Entry QuantConnect.Securities.ISecurityMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="47-47"];
n5 [cluster="QuantConnect.Securities.ISecurityMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", label="Exit QuantConnect.Securities.ISecurityMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="47-47"];
n6 [cluster="QuantConnect.Securities.ISecurityMarginModel.GetMaintenanceMargin(QuantConnect.Securities.Security)", label="Entry QuantConnect.Securities.ISecurityMarginModel.GetMaintenanceMargin(QuantConnect.Securities.Security)", span="54-54"];
n7 [cluster="QuantConnect.Securities.ISecurityMarginModel.GetMaintenanceMargin(QuantConnect.Securities.Security)", label="Exit QuantConnect.Securities.ISecurityMarginModel.GetMaintenanceMargin(QuantConnect.Securities.Security)", span="54-54"];
n8 [cluster="QuantConnect.Securities.ISecurityMarginModel.GetMarginRemaining(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", label="Entry QuantConnect.Securities.ISecurityMarginModel.GetMarginRemaining(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", span="63-63"];
n9 [cluster="QuantConnect.Securities.ISecurityMarginModel.GetMarginRemaining(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", label="Exit QuantConnect.Securities.ISecurityMarginModel.GetMarginRemaining(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", span="63-63"];
n10 [cluster="QuantConnect.Securities.ISecurityMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", label="Entry QuantConnect.Securities.ISecurityMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", span="73-73"];
n11 [cluster="QuantConnect.Securities.ISecurityMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", label="Exit QuantConnect.Securities.ISecurityMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", span="73-73"];
m2_33 [cluster="System.Math.Abs(decimal)", file="GDAXBrokerageIntegrationTests.cs", label="Entry System.Math.Abs(decimal)", span="0-0"];
m2_132 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="GDAXBrokerageIntegrationTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m2_71 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetReservedBuyingPowerForPosition(QuantConnect.Securities.Security)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.GetReservedBuyingPowerForPosition(QuantConnect.Securities.Security)", span="190-190"];
m2_72 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetReservedBuyingPowerForPosition(QuantConnect.Securities.Security)", file="GDAXBrokerageIntegrationTests.cs", label="return 0;", span="193-193"];
m2_73 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetReservedBuyingPowerForPosition(QuantConnect.Securities.Security)", file="GDAXBrokerageIntegrationTests.cs", label="Exit QuantConnect.Securities.CashBuyingPowerModel.GetReservedBuyingPowerForPosition(QuantConnect.Securities.Security)", span="190-190"];
m2_29 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="224-224"];
m2_12 [cluster="QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="totalQuantity = portfolio.CashBook[security.QuoteCurrency.Symbol].Amount", span="67-67"];
m2_0 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetLeverage(QuantConnect.Securities.Security)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.GetLeverage(QuantConnect.Securities.Security)", span="31-31"];
m2_1 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetLeverage(QuantConnect.Securities.Security)", color=green, community=0, file="GDAXBrokerageIntegrationTests.cs", label="return 1m;", prediction=0, span="34-34"];
m2_2 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetLeverage(QuantConnect.Securities.Security)", file="GDAXBrokerageIntegrationTests.cs", label="Exit QuantConnect.Securities.CashBuyingPowerModel.GetLeverage(QuantConnect.Securities.Security)", span="31-31"];
m2_30 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="249-249"];
m2_101 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="var baseCurrency = security as IBaseCurrencySymbol", span="251-251"];
m2_104 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="var targetCurrency = order.Direction == OrderDirection.Buy\r\n                ? security.QuoteCurrency.Symbol\r\n                : baseCurrency.BaseCurrencySymbol", span="255-257"];
m2_106 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="portfolio.Securities.Values", span="260-260"];
m2_113 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="var openOrders = portfolio.Transactions.GetOpenOrders(x =>\r\n                {\r\n                    OrderDirection dir;\r\n                    return symbolDirectionPairs.TryGetValue(x.Symbol, out dir) &&\r\n                           // same direction of our order\r\n                           dir == x.Direction &&\r\n                           // don't count our current order\r\n                           x.Id != order.Id &&\r\n                           // only count working orders\r\n                           (x.Type == OrderType.Limit || x.Type == OrderType.StopMarket);\r\n                }\r\n            )", span="276-287"];
m2_116 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="var orderSecurity = portfolio.Securities[openOrder.Symbol]", span="293-293"];
m2_121 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="quantityInTargetCurrency *= GetOrderPrice(security, openOrder)", span="302-302"];
m2_102 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="baseCurrency == null", span="252-252"];
m2_103 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="return 0;", span="252-252"];
m2_105 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="var symbolDirectionPairs = new Dictionary<Symbol, OrderDirection>()", span="259-259"];
m2_109 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="basePortfolioSecurity.BaseCurrencySymbol == targetCurrency", span="265-265"];
m2_111 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="portfolioSecurity.QuoteCurrency.Symbol == targetCurrency", span="269-269"];
m2_120 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="orderSecurity.QuoteCurrency.Symbol == targetCurrency", span="300-300"];
m2_110 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="symbolDirectionPairs.Add(portfolioSecurity.Symbol, OrderDirection.Sell)", span="267-267"];
m2_112 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="symbolDirectionPairs.Add(portfolioSecurity.Symbol, OrderDirection.Buy)", span="271-271"];
m2_107 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="var basePortfolioSecurity = portfolioSecurity as IBaseCurrencySymbol", span="262-262"];
m2_108 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="basePortfolioSecurity == null", span="263-263"];
m2_114 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="var openOrdersReservedQuantity = 0m", span="290-290"];
m2_115 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label=openOrders, span="291-291"];
m2_122 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="openOrdersReservedQuantity += quantityInTargetCurrency", span="305-305"];
m2_123 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="return openOrdersReservedQuantity;", span="309-309"];
m2_119 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="var quantityInTargetCurrency = openOrder.AbsoluteQuantity", span="299-299"];
m2_117 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="var orderBaseCurrency = orderSecurity as IBaseCurrencySymbol", span="294-294"];
m2_118 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="orderBaseCurrency != null", span="296-296"];
m2_124 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="Exit QuantConnect.Securities.CashBuyingPowerModel.GetOpenOrdersReservedQuantity(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="249-249"];
m2_18 [cluster="QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="return orderQuantity <= totalQuantity - openOrdersReservedQuantity;", span="83-83"];
m2_130 [cluster="lambda expression", file="GDAXBrokerageIntegrationTests.cs", label="return symbolDirectionPairs.TryGetValue(x.Symbol, out dir) &&\r\n                           // same direction of our order\r\n                           dir == x.Direction &&\r\n                           // don't count our current order\r\n                           x.Id != order.Id &&\r\n                           // only count working orders\r\n                           (x.Type == OrderType.Limit || x.Type == OrderType.StopMarket);", span="279-285"];
m2_128 [cluster="lambda expression", file="GDAXBrokerageIntegrationTests.cs", label="Entry lambda expression", span="276-286"];
m2_129 [cluster="lambda expression", file="GDAXBrokerageIntegrationTests.cs", label="OrderDirection dir", span="278-278"];
m2_131 [cluster="lambda expression", file="GDAXBrokerageIntegrationTests.cs", label="Exit lambda expression", span="276-286"];
m2_19 [cluster="QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", color=green, community=0, file="GDAXBrokerageIntegrationTests.cs", label="order.Type == OrderType.Market", prediction=1, span="86-86"];
m2_20 [cluster="QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="var targetValue =\r\n                    portfolio.CashBook.ConvertToAccountCurrency(totalQuantity - openOrdersReservedQuantity,\r\n                        security.QuoteCurrency.Symbol)", span="89-91"];
m2_13 [cluster="QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="orderQuantity = order.AbsoluteQuantity * GetOrderPrice(security, order)", span="68-68"];
m2_89 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="var orderPrice = 0m", span="226-226"];
m2_90 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="order.Type", span="227-227"];
m2_92 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="orderPrice = security.Price", span="230-230"];
m2_94 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="orderPrice = ((LimitOrder)order).LimitPrice", span="234-234"];
m2_96 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="orderPrice = ((StopMarketOrder)order).StopPrice", span="238-238"];
m2_98 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="orderPrice = ((StopLimitOrder)order).LimitPrice", span="242-242"];
m2_91 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="OrderType.Market", span="229-229"];
m2_93 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="OrderType.Limit", span="233-233"];
m2_95 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="OrderType.StopMarket", span="237-237"];
m2_97 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="OrderType.StopLimit", span="241-241"];
m2_99 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="return orderPrice;", span="246-246"];
m2_100 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="Exit QuantConnect.Securities.CashBuyingPowerModel.GetOrderPrice(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="224-224"];
m2_126 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="GDAXBrokerageIntegrationTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m2_32 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", span="117-117"];
m2_36 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="var baseCurrency = security as IBaseCurrencySymbol", span="119-119"];
m2_39 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="var baseCurrencyPosition = portfolio.CashBook.ConvertToAccountCurrency(\r\n                portfolio.CashBook[baseCurrency.BaseCurrencySymbol].Amount,\r\n                baseCurrency.BaseCurrencySymbol)", span="123-125"];
m2_40 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="var quoteCurrencyPosition = portfolio.CashBook.ConvertToAccountCurrency(\r\n                portfolio.CashBook[security.QuoteCurrency.Symbol].Amount,\r\n                security.QuoteCurrency.Symbol)", span="128-130"];
m2_41 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="var unitPrice = new MarketOrder(security.Symbol, 1, DateTime.UtcNow).GetValue(security)", span="133-133"];
m2_44 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="var targetOrderValue = Math.Abs(targetPortfolioValue - baseCurrencyPosition)", span="137-137"];
m2_45 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="var direction = targetPortfolioValue > baseCurrencyPosition ? OrderDirection.Buy : OrderDirection.Sell", span="138-138"];
m2_54 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="orderQuantity -= orderQuantity % security.SymbolProperties.LotSize", span="154-154"];
m2_58 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="var order = new MarketOrder(security.Symbol, orderQuantity, DateTime.UtcNow)", span="164-164"];
m2_59 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="orderValue = order.GetValue(security)", span="165-165"];
m2_60 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="orderFees = security.FeeModel.GetOrderFee(security, order)", span="166-166"];
m2_62 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="feeToPriceRatio -= feeToPriceRatio % security.SymbolProperties.LotSize", span="170-170"];
m2_63 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="feeToPriceRatio < security.SymbolProperties.LotSize", span="171-171"];
m2_64 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="feeToPriceRatio = security.SymbolProperties.LotSize", span="173-173"];
m2_37 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="baseCurrency == null", span="120-120"];
m2_38 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="return 0;", span="120-120"];
m2_46 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="var cashRemaining = direction == OrderDirection.Buy ? quoteCurrencyPosition : baseCurrencyPosition", span="141-141"];
m2_42 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="unitPrice == 0", span="134-134"];
m2_53 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="var orderQuantity = targetOrderValue / unitPrice", span="151-151"];
m2_61 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="feeToPriceRatio = orderFees / unitPrice", span="169-169"];
m2_43 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="return 0;", span="134-134"];
m2_66 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="cashRequired > cashRemaining || orderValue + orderFees > targetOrderValue", span="179-179"];
m2_67 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="return (direction == OrderDirection.Sell ? -1 : 1) * orderQuantity;", span="182-182"];
m2_47 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="cashRemaining <= 0", span="142-142"];
m2_48 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="return 0;", span="142-142"];
m2_49 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="decimal cashRequired", span="145-145"];
m2_50 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="decimal orderValue", span="146-146"];
m2_51 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="decimal orderFees", span="147-147"];
m2_52 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="var feeToPriceRatio = 0m", span="148-148"];
m2_55 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="orderQuantity -= feeToPriceRatio", span="160-160"];
m2_56 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="orderQuantity <= 0", span="161-161"];
m2_57 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="return 0;", span="161-161"];
m2_65 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="cashRequired = orderValue", span="177-177"];
m2_68 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="GDAXBrokerageIntegrationTests.cs", label="Exit QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", span="117-117"];
m2_127 [cluster="QuantConnect.Securities.SecurityTransactionManager.GetOpenOrders(System.Func<QuantConnect.Orders.Order, bool>)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.GetOpenOrders(System.Func<QuantConnect.Orders.Order, bool>)", span="278-278"];
m2_3 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", span="58-58"];
m2_4 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", color=green, community=0, file="GDAXBrokerageIntegrationTests.cs", label="var restClient = new RestClient(''https://api.gdax.com'')", prediction=1, span="60-60"];
m2_15 [cluster="QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="orderQuantity = order.AbsoluteQuantity", span="74-74"];
m2_70 [cluster="QuantConnect.Orders.Order.GetValue(QuantConnect.Securities.Security)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Orders.Order.GetValue(QuantConnect.Securities.Security)", span="191-191"];
m2_74 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", span="203-203"];
m2_75 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="var baseCurrency = security as IBaseCurrencySymbol", span="205-205"];
m2_78 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="var baseCurrencyPosition = portfolio.CashBook[baseCurrency.BaseCurrencySymbol].Amount", span="208-208"];
m2_79 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="var quoteCurrencyPosition = portfolio.CashBook[security.QuoteCurrency.Symbol].Amount", span="209-209"];
m2_80 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="var unitPrice = new MarketOrder(security.Symbol, 1, DateTime.UtcNow).GetValue(security) / security.QuoteCurrency.ConversionRate", span="212-212"];
m2_83 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="direction == OrderDirection.Buy", span="215-215"];
m2_85 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="direction == OrderDirection.Sell", span="218-218"];
m2_76 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="baseCurrency == null", span="206-206"];
m2_77 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="return 0;", span="206-206"];
m2_86 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="return baseCurrencyPosition;", span="219-219"];
m2_84 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="return quoteCurrencyPosition / unitPrice;", span="216-216"];
m2_81 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="unitPrice == 0", span="213-213"];
m2_82 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="return 0;", span="213-213"];
m2_87 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="return 0;", span="221-221"];
m2_88 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageIntegrationTests.cs", label="Exit QuantConnect.Securities.CashBuyingPowerModel.GetBuyingPower(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", span="203-203"];
m2_69 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="49-49"];
m2_5 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", file="GDAXBrokerageIntegrationTests.cs", label="var webSocketClient = new WebSocketWrapper()", span="61-61"];
m2_6 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", color=green, community=0, file="GDAXBrokerageIntegrationTests.cs", label="var algorithm = new Mock<IAlgorithm>()", prediction=1, span="63-63"];
m2_11 [cluster="QuantConnect.Brokerages.WebSocketWrapper.WebSocketWrapper()", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Brokerages.WebSocketWrapper.WebSocketWrapper()", span="29-29"];
m2_14 [cluster="QuantConnect.Brokerages.GDAXBrokerageModel.GDAXBrokerageModel(QuantConnect.AccountType)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Brokerages.GDAXBrokerageModel.GDAXBrokerageModel(QuantConnect.AccountType)", span="44-44"];
m2_16 [cluster="GDAXBrokerage.cstr", file="GDAXBrokerageIntegrationTests.cs", label="Entry GDAXBrokerage.cstr", span=""];
m2_17 [cluster="QuantConnect.Configuration.Config.Get(string, string)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="90-90"];
m2_21 [cluster="QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="var maximumQuantity =\r\n                    GetMaximumOrderQuantityForTargetValue(portfolio, security, targetValue) * GetOrderPrice(security, order)", span="93-94"];
m2_24 [cluster="QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="order.Type == OrderType.Limit", span="101-101"];
m2_25 [cluster="QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="orderFee = security.FeeModel.GetOrderFee(security, order)", span="103-103"];
m2_26 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", span="76-76"];
m2_7 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", color=green, community=0, file="GDAXBrokerageIntegrationTests.cs", label="algorithm.Setup(a => a.BrokerageModel).Returns(new GDAXBrokerageModel(AccountType.Cash))", prediction=4, span="64-64"];
m2_8 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", color=green, community=0, file="GDAXBrokerageIntegrationTests.cs", label="return new GDAXBrokerage(Config.Get(''gdax-url'', ''wss://ws-feed.gdax.com''), webSocketClient, restClient, Config.Get(''gdax-api-key''), Config.Get(''gdax-api-secret''), \r\n                Config.Get(''gdax-passphrase''), algorithm.Object);", prediction=1, span="66-67"];
m2_9 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", file="GDAXBrokerageIntegrationTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", span="58-58"];
m2_27 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", color=green, community=0, file="GDAXBrokerageIntegrationTests.cs", label="Assert.Pass(''Order update not supported'')", prediction=6, span="78-78"];
m2_22 [cluster="QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="return orderQuantity <= Math.Abs(maximumQuantity);", span="96-96"];
m2_23 [cluster="QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="var orderFee = 0m", span="100-100"];
m2_28 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", file="GDAXBrokerageIntegrationTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", span="76-76"];
m2_31 [cluster="QuantConnect.Securities.CashBook.ConvertToAccountCurrency(decimal, string)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Securities.CashBook.ConvertToAccountCurrency(decimal, string)", span="115-115"];
m2_34 [cluster="QuantConnect.Orders.Fees.IFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Orders.Fees.IFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="31-31"];
m2_125 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="GDAXBrokerageIntegrationTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m2_35 [cluster="QuantConnect.Securities.CashBook.Convert(decimal, string, string)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Securities.CashBook.Convert(decimal, string, string)", span="101-101"];
m2_133 [file="GDAXBrokerageIntegrationTests.cs", label="QuantConnect.Securities.CashBuyingPowerModel", span=""];
m2_134 [file="GDAXBrokerageIntegrationTests.cs", label="QuantConnect.Orders.Order", span=""];
m2_135 [file="GDAXBrokerageIntegrationTests.cs", label=symbolDirectionPairs, span=""];
m3_121 [cluster="QuantConnect.Securities.Security.GetLastData()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Securities.Security.GetLastData()", span="513-513"];
m3_41 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", file="GDAXBrokerageTests.cs", label="prices.High > order.StopPrice", span="116-116"];
m3_44 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", file="GDAXBrokerageTests.cs", label="fill.Status == OrderStatus.Filled", span="126-126"];
m3_75 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", span="216-216"];
m3_76 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="var utcTime = asset.LocalTime.ConvertToUtc(asset.Exchange.TimeZone)", span="219-219"];
m3_77 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="var fill = new OrderEvent(order, utcTime, 0)", span="220-220"];
m3_78 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="order.Status == OrderStatus.Canceled", span="223-223"];
m3_80 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="var prices = GetPrices(asset, order.Direction)", span="226-226"];
m3_81 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="order.Direction", span="229-229"];
m3_83 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="prices.Low < order.LimitPrice", span="233-233"];
m3_85 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="fill.FillPrice = Math.Min(prices.High, order.LimitPrice)", span="239-239"];
m3_87 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="prices.High > order.LimitPrice", span="244-244"];
m3_89 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="fill.FillPrice = Math.Max(prices.Low, order.LimitPrice)", span="249-249"];
m3_91 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="fill.FillQuantity = order.Quantity", span="257-257"];
m3_92 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="fill.OrderFee = asset.FeeModel.GetOrderFee(asset, order)", span="258-258"];
m3_79 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="223-223"];
m3_84 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="fill.Status = OrderStatus.Filled", span="236-236"];
m3_88 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="fill.Status = OrderStatus.Filled", span="246-246"];
m3_90 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="fill.Status == OrderStatus.Filled", span="255-255"];
m3_93 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="261-261"];
m3_82 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="OrderDirection.Buy", span="231-231"];
m3_86 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="OrderDirection.Sell", span="242-242"];
m3_94 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Orders.Fills.ImmediateFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", span="216-216"];
m3_45 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", file="GDAXBrokerageTests.cs", label="fill.FillQuantity = order.Quantity", span="128-128"];
m3_179 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="392-392"];
m3_180 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="x.Type", span="392-392"];
m3_181 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="392-392"];
m3_46 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", file="GDAXBrokerageTests.cs", label="fill.OrderFee = asset.FeeModel.GetOrderFee(asset, order)", span="129-129"];
m3_47 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="132-132"];
m3_23 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", color=green, community=0, file="GDAXBrokerageTests.cs", label="var historyAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''372.677%''},\r\n                {''Drawdown'', ''1.100%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.717%''},\r\n                {''Sharpe Ratio'', ''4.521''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''79.192''},\r\n                {''Annual Standard Deviation'', ''0.193''},\r\n                {''Annual Variance'', ''0.037''},\r\n                {''Information Ratio'', ''4.466''},\r\n                {''Tracking Error'', ''0.193''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$3.09''},\r\n            }", prediction=7, span="330-351"];
m3_147 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="var low = asset.Low", span="380-380"];
m3_148 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="var high = asset.High", span="381-381"];
m3_149 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="var open = asset.Open", span="382-382"];
m3_150 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="var close = asset.Close", span="383-383"];
m3_151 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="var current = asset.Price", span="384-384"];
m3_152 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="direction == OrderDirection.Hold", span="386-386"];
m3_154 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="var subscriptionTypes = asset.Subscriptions.Select(x => x.Type).ToList()", span="392-392"];
m3_155 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="var tick = asset.Cache.GetData<Tick>()", span="395-395"];
m3_157 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="var price = direction == OrderDirection.Sell ? tick.BidPrice : tick.AskPrice", span="398-398"];
m3_163 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="var quoteBar = asset.Cache.GetData<QuoteBar>()", span="413-413"];
m3_165 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="var bar = direction == OrderDirection.Sell ? quoteBar.Bid : quoteBar.Ask", span="416-416"];
m3_168 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="var tradeBar = asset.Cache.GetData<TradeBar>()", span="424-424"];
m3_153 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="return new Prices(current, open, high, low, close);", span="388-388"];
m3_171 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="return new Prices(current, open, high, low, close);", span="430-430"];
m3_156 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="subscriptionTypes.Contains(typeof(Tick)) && tick != null", span="396-396"];
m3_164 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="subscriptionTypes.Contains(typeof(QuoteBar)) && quoteBar != null", span="414-414"];
m3_169 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="subscriptionTypes.Contains(typeof(TradeBar)) && tradeBar != null", span="425-425"];
m3_160 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="price = tick.Price", span="405-405"];
m3_158 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="price != 0m", span="399-399"];
m3_159 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="return new Prices(price, 0, 0, 0, 0);", span="401-401"];
m3_161 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="price != 0m", span="406-406"];
m3_162 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="return new Prices(price, 0, 0, 0, 0);", span="408-408"];
m3_166 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="bar != null", span="417-417"];
m3_167 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="return new Prices(bar);", span="419-419"];
m3_170 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="return new Prices(tradeBar);", span="427-427"];
m3_172 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Orders.Fills.ImmediateFillModel.GetPrices(QuantConnect.Securities.Security, QuantConnect.Orders.OrderDirection)", span="378-378"];
m3_123 [cluster="QuantConnect.Securities.SecurityExchange.DateTimeIsOpen(System.DateTime)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Securities.SecurityExchange.DateTimeIsOpen(System.DateTime)", span="107-107"];
m3_124 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", span="330-330"];
m3_125 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="var utcTime = asset.LocalTime.ConvertToUtc(asset.Exchange.TimeZone)", span="332-332"];
m3_126 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="var fill = new OrderEvent(order, utcTime, 0)", span="333-333"];
m3_127 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="order.Status == OrderStatus.Canceled", span="335-335"];
m3_129 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="var localOrderTime = order.Time.ConvertFromUtc(asset.Exchange.TimeZone)", span="337-337"];
m3_130 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="var nextMarketClose = asset.Exchange.Hours.GetNextMarketClose(localOrderTime, false)", span="338-338"];
m3_131 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="asset.LocalTime < nextMarketClose", span="341-341"];
m3_133 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="fill.FillPrice = GetPrices(asset, order.Direction).Close", span="346-346"];
m3_135 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="var slip = asset.SlippageModel.GetSlippageApproximation(asset, order)", span="350-350"];
m3_136 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="order.Direction", span="353-353"];
m3_142 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="fill.FillQuantity = order.Quantity", span="366-366"];
m3_143 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="fill.OrderFee = asset.FeeModel.GetOrderFee(asset, order)", span="367-367"];
m3_128 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="335-335"];
m3_132 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="343-343"];
m3_134 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="fill.Status = OrderStatus.Filled", span="347-347"];
m3_138 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="fill.FillPrice += slip", span="356-356"];
m3_140 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="fill.FillPrice -= slip", span="359-359"];
m3_141 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="fill.Status == OrderStatus.Filled", span="364-364"];
m3_144 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="370-370"];
m3_137 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="OrderDirection.Buy", span="355-355"];
m3_139 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="OrderDirection.Sell", span="358-358"];
m3_145 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", span="330-330"];
m3_22 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var parameterizedStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''278.616%''},\r\n                {''Drawdown'', ''0.300%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.717%''},\r\n                {''Sharpe Ratio'', ''11.017''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''78.067''},\r\n                {''Annual Standard Deviation'', ''0.078''},\r\n                {''Annual Variance'', ''0.006''},\r\n                {''Information Ratio'', ''10.897''},\r\n                {''Tracking Error'', ''0.078''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$3.09''},\r\n            }", span="307-328"];
m3_182 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.IsExchangeOpen(QuantConnect.Securities.Security)", file="GDAXBrokerageTests.cs", label="!asset.Exchange.DateTimeIsOpen(asset.LocalTime)", span="438-438"];
m3_183 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.IsExchangeOpen(QuantConnect.Securities.Security)", file="GDAXBrokerageTests.cs", label="var currentBar = asset.GetLastData()", span="441-441"];
m3_184 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.IsExchangeOpen(QuantConnect.Securities.Security)", file="GDAXBrokerageTests.cs", label="asset.LocalTime.Date != currentBar.EndTime.Date || !asset.Exchange.IsOpenDuringBar(currentBar.Time, currentBar.EndTime, false)", span="442-442"];
m3_186 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.IsExchangeOpen(QuantConnect.Securities.Security)", file="GDAXBrokerageTests.cs", label="return true;", span="447-447"];
m3_185 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.IsExchangeOpen(QuantConnect.Securities.Security)", file="GDAXBrokerageTests.cs", label="return false;", span="444-444"];
m3_187 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.IsExchangeOpen(QuantConnect.Securities.Security)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Orders.Fills.ImmediateFillModel.IsExchangeOpen(QuantConnect.Securities.Security)", span="436-436"];
m3_146 [cluster="QuantConnect.Securities.SecurityExchangeHours.GetNextMarketClose(System.DateTime, bool)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Securities.SecurityExchangeHours.GetNextMarketClose(System.DateTime, bool)", span="238-238"];
m3_42 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", file="GDAXBrokerageTests.cs", label="fill.Status = OrderStatus.Filled", span="118-118"];
m3_50 [cluster="System.Math.Max(decimal, decimal)", file="GDAXBrokerageTests.cs", label="Entry System.Math.Max(decimal, decimal)", span="0-0"];
m3_51 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", span="150-150"];
m3_52 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="var utcTime = asset.LocalTime.ConvertToUtc(asset.Exchange.TimeZone)", span="153-153"];
m3_53 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="var fill = new OrderEvent(order, utcTime, 0)", span="154-154"];
m3_48 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Orders.Fills.ImmediateFillModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", span="83-83"];
m3_175 [cluster="Unk.ToList", file="GDAXBrokerageTests.cs", label="Entry Unk.ToList", span=""];
m3_24 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", color=green, community=0, file="GDAXBrokerageTests.cs", label="var coarseFundamentalTop5AlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''10''},\r\n                {''Average Win'', ''1.15%''},\r\n                {''Average Loss'', ''-0.47%''},\r\n                {''Compounding Annual Return'', ''-0.746%''},\r\n                {''Drawdown'', ''3.000%''},\r\n                {''Expectancy'', ''-0.313''},\r\n                {''Net Profit'', ''-0.746%''},\r\n                {''Sharpe Ratio'', ''-0.266''},\r\n                {''Loss Rate'', ''80%''},\r\n                {''Win Rate'', ''20%''},\r\n                {''Profit-Loss Ratio'', ''2.44''},\r\n                {''Alpha'', ''-0.008''},\r\n                {''Beta'', ''0.025''},\r\n                {''Annual Standard Deviation'', ''0.026''},\r\n                {''Annual Variance'', ''0.001''},\r\n                {''Information Ratio'', ''-1.01''},\r\n                {''Tracking Error'', ''0.026''},\r\n                {''Treynor Ratio'', ''-0.284''},\r\n                {''Total Fees'', ''$10.61''},\r\n            }", prediction=8, span="353-374"];
m3_54 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters", span=""];
m3_56 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="var prices = GetPrices(asset, order.Direction)", span="160-160"];
m3_57 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="order.Direction", span="163-163"];
m3_59 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="prices.High > order.StopPrice || order.StopTriggered", span="167-167"];
m3_60 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="order.StopTriggered = true", span="169-169"];
m3_61 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="asset.Price < order.LimitPrice", span="173-173"];
m3_63 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="fill.FillPrice = order.LimitPrice", span="176-176"];
m3_65 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="prices.Low < order.StopPrice || order.StopTriggered", span="183-183"];
m3_66 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="order.StopTriggered = true", span="185-185"];
m3_67 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="asset.Price > order.LimitPrice", span="189-189"];
m3_69 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="fill.FillPrice = order.LimitPrice", span="192-192"];
m3_71 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="fill.FillQuantity = order.Quantity", span="201-201"];
m3_72 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="fill.OrderFee = asset.FeeModel.GetOrderFee(asset, order)", span="202-202"];
m3_55 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="157-157"];
m3_62 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="fill.Status = OrderStatus.Filled", span="175-175"];
m3_68 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="fill.Status = OrderStatus.Filled", span="191-191"];
m3_70 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="fill.Status == OrderStatus.Filled", span="199-199"];
m3_73 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="205-205"];
m3_58 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="OrderDirection.Buy", span="165-165"];
m3_64 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="OrderDirection.Sell", span="181-181"];
m3_74 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Orders.Fills.ImmediateFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", span="150-150"];
m3_188 [cluster="QuantConnect.Securities.SecurityExchange.IsOpenDuringBar(System.DateTime, System.DateTime, bool)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Securities.SecurityExchange.IsOpenDuringBar(System.DateTime, System.DateTime, bool)", span="115-115"];
m3_178 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.Prices.Prices(QuantConnect.Data.Market.IBar)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.Fills.ImmediateFillModel.Prices.Prices(QuantConnect.Data.Market.IBar)", span="458-458"];
m3_189 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.Prices.Prices(QuantConnect.Data.Market.IBar)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Orders.Fills.ImmediateFillModel.Prices.Prices(QuantConnect.Data.Market.IBar)", span="458-458"];
m3_176 [cluster="QuantConnect.Securities.SecurityCache.GetData<T>()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Securities.SecurityCache.GetData<T>()", span="171-171"];
m3_26 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var macdTrendAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''84''},\r\n                {''Average Win'', ''4.79%''},\r\n                {''Average Loss'', ''-4.17%''},\r\n                {''Compounding Annual Return'', ''2.967%''},\r\n                {''Drawdown'', ''34.800%''},\r\n                {''Expectancy'', ''0.228''},\r\n                {''Net Profit'', ''37.970%''},\r\n                {''Sharpe Ratio'', ''0.27''},\r\n                {''Loss Rate'', ''43%''},\r\n                {''Win Rate'', ''57%''},\r\n                {''Profit-Loss Ratio'', ''1.15''},\r\n                {''Alpha'', ''0.064''},\r\n                {''Beta'', ''-2.051''},\r\n                {''Annual Standard Deviation'', ''0.112''},\r\n                {''Annual Variance'', ''0.013''},\r\n                {''Information Ratio'', ''0.124''},\r\n                {''Tracking Error'', ''0.112''},\r\n                {''Treynor Ratio'', ''-0.015''},\r\n                {''Total Fees'', ''$420.57''},\r\n            }", span="399-420"];
m3_27 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var optionSplitRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0.00%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''0.198%''},\r\n                {''Drawdown'', ''0.500%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''0.002%''},\r\n                {''Sharpe Ratio'', ''0.609''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''100%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.013''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0.002''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''7.935''},\r\n                {''Tracking Error'', ''6.787''},\r\n                {''Treynor Ratio'', ''-4.913''},\r\n                {''Total Fees'', ''$1.25''},\r\n            }", span="422-443"];
m3_28 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var optionRenameRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''4''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.02%''},\r\n                {''Compounding Annual Return'', ''-0.472%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.006%''},\r\n                {''Sharpe Ratio'', ''-3.403''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.016''},\r\n                {''Beta'', ''-0.001''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''10.014''},\r\n                {''Tracking Error'', ''0.877''},\r\n                {''Treynor Ratio'', ''4.203''},\r\n                {''Total Fees'', ''$2.50''},\r\n            }", span="445-466"];
m3_29 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var optionOpenInterestRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.01%''},\r\n                {''Compounding Annual Return'', ''-2.042%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.010%''},\r\n                {''Sharpe Ratio'', ''-11.225''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''-0.036''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''-11.225''},\r\n                {''Tracking Error'', ''0.033''},\r\n                {''Treynor Ratio'', ''0.355''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="468-489"];
m3_31 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var weeklyUniverseSelectionRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''8''},\r\n                {''Average Win'', ''0.28%''},\r\n                {''Average Loss'', ''-0.33%''},\r\n                {''Compounding Annual Return'', ''-1.247%''},\r\n                {''Drawdown'', ''1.300%''},\r\n                {''Expectancy'', ''-0.078''},\r\n                {''Net Profit'', ''-0.105%''},\r\n                {''Sharpe Ratio'', ''-0.27''},\r\n                {''Loss Rate'', ''50%''},\r\n                {''Win Rate'', ''50%''},\r\n                {''Profit-Loss Ratio'', ''0.84''},\r\n                {''Alpha'', ''-0.239''},\r\n                {''Beta'', ''12.675''},\r\n                {''Annual Standard Deviation'', ''0.04''},\r\n                {''Annual Variance'', ''0.002''},\r\n                {''Information Ratio'', ''-0.723''},\r\n                {''Tracking Error'', ''0.04''},\r\n                {''Treynor Ratio'', ''-0.001''},\r\n                {''Total Fees'', ''$23.23''},\r\n            }", span="514-535"];
m3_33 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var basicTemplateDailyStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''244.780%''},\r\n                {''Drawdown'', ''1.100%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''4.153%''},\r\n                {''Sharpe Ratio'', ''6.165''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.865''},\r\n                {''Beta'', ''-0.004''},\r\n                {''Annual Standard Deviation'', ''0.14''},\r\n                {''Annual Variance'', ''0.02''},\r\n                {''Information Ratio'', ''6.066''},\r\n                {''Tracking Error'', ''0.14''},\r\n                {''Treynor Ratio'', ''-212.611''},\r\n                {''Total Fees'', ''$3.09''}\r\n            }", span="560-581"];
m3_34 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var hourSplitStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''-0.096%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''-0.001%''},\r\n                {''Sharpe Ratio'', ''-11.225''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$1.00''}\r\n            }", span="583-604"];
m3_35 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var hourReverseSplitStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''-1.444%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''-0.007%''},\r\n                {''Sharpe Ratio'', ''-11.225''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$1.00''}\r\n            }", span="606-627"];
m3_37 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var basicTemplateFuturesAlgorithmDailyStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''8''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0.00%''},\r\n                {''Compounding Annual Return'', ''-1.655%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.018%''},\r\n                {''Sharpe Ratio'', ''-23.092''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$14.80''}\r\n            }", span="652-673"];
m3_39 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", span="40-40"];
m3_43 [cluster="Unk.Select", file="GDAXBrokerageTests.cs", label="Entry Unk.Select", span=""];
m3_30 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var optionChainConsistencyRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-3.86%''},\r\n                {''Compounding Annual Return'', ''-100.000%''},\r\n                {''Drawdown'', ''3.900%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-3.855%''},\r\n                {''Sharpe Ratio'', ''0''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="491-512"];
m3_32 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var optionExerciseAssignRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''4''},\r\n                {''Average Win'', ''0.30%''},\r\n                {''Average Loss'', ''-0.32%''},\r\n                {''Compounding Annual Return'', ''-85.023%''},\r\n                {''Drawdown'', ''0.400%''},\r\n                {''Expectancy'', ''-0.359''},\r\n                {''Net Profit'', ''-0.350%''},\r\n                {''Sharpe Ratio'', ''0''},\r\n                {''Loss Rate'', ''67%''},\r\n                {''Win Rate'', ''33%''},\r\n                {''Profit-Loss Ratio'', ''0.92''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="537-558"];
m3_38 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="return new List<AlgorithmStatisticsTestParameters>\r\n            {\r\n                // CSharp\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateFuturesAlgorithmDaily'', basicTemplateFuturesAlgorithmDailyStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''AddRemoveSecurityRegressionAlgorithm'', addRemoveSecurityRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateAlgorithm'', basicTemplateStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateFrameworkAlgorithm'', basicTemplateFrameworkStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateOptionsAlgorithm'', basicTemplateOptionsStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''CustomDataRegressionAlgorithm'', customDataRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''DropboxBaseDataUniverseSelectionAlgorithm'', dropboxBaseDataUniverseSelectionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''DropboxUniverseSelectionAlgorithm'', dropboxUniverseSelectionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''LimitFillRegressionAlgorithm'', limitFillRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''ParameterizedAlgorithm'', parameterizedStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''RegressionAlgorithm'', regressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''UniverseSelectionRegressionAlgorithm'', universeSelectionRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''UpdateOrderRegressionAlgorithm'', updateOrderRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''HistoryAlgorithm'', historyAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''CoarseFundamentalTop5Algorithm'', coarseFundamentalTop5AlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''CoarseFineFundamentalRegressionAlgorithm'', coarseFineFundamentalRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''MACDTrendAlgorithm'', macdTrendAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionSplitRegressionAlgorithm'', optionSplitRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionRenameRegressionAlgorithm'', optionRenameRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionOpenInterestRegressionAlgorithm'', optionOpenInterestRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionChainConsistencyRegressionAlgorithm'', optionChainConsistencyRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''WeeklyUniverseSelectionRegressionAlgorithm'', weeklyUniverseSelectionRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionExerciseAssignRegressionAlgorithm'',optionExerciseAssignRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateDailyAlgorithm'', basicTemplateDailyStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''HourSplitRegressionAlgorithm'', hourSplitStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''HourReverseSplitRegressionAlgorithm'', hourReverseSplitStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''FractionalQuantityRegressionAlgorithm'', fractionalQuantityRegressionStatistics, Language.CSharp),\r\n\r\n                // Python\r\n                // new AlgorithmStatisticsTestParameters(''BasicTemplateFuturesAlgorithmDaily'', basicTemplateFuturesAlgorithmDailyStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''AddRemoveSecurityRegressionAlgorithm'', addRemoveSecurityRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateAlgorithm'', basicTemplateStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateOptionsAlgorithm'', basicTemplateOptionsStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''CustomDataRegressionAlgorithm'', customDataRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''DropboxBaseDataUniverseSelectionAlgorithm'', dropboxBaseDataUniverseSelectionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''DropboxUniverseSelectionAlgorithm'', dropboxUniverseSelectionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''LimitFillRegressionAlgorithm'', limitFillRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''ParameterizedAlgorithm'', parameterizedStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''RegressionAlgorithm'', regressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''UniverseSelectionRegressionAlgorithm'', universeSelectionRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''UpdateOrderRegressionAlgorithm'', updateOrderRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''HistoryAlgorithm'', historyAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''CoarseFundamentalTop5Algorithm'', coarseFundamentalTop5AlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''CoarseFineFundamentalRegressionAlgorithm'', coarseFineFundamentalRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''MACDTrendAlgorithm'', macdTrendAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionSplitRegressionAlgorithm'', optionSplitRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionRenameRegressionAlgorithm'', optionRenameRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionOpenInterestRegressionAlgorithm'', optionOpenInterestRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionChainConsistencyRegressionAlgorithm'', optionChainConsistencyRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''WeeklyUniverseSelectionRegressionAlgorithm'', weeklyUniverseSelectionRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionExerciseAssignRegressionAlgorithm'',optionExerciseAssignRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateDailyAlgorithm'', basicTemplateDailyStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''HourSplitRegressionAlgorithm'', hourSplitStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''HourReverseSplitRegressionAlgorithm'', hourReverseSplitStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''FractionalQuantityRegressionAlgorithm'', fractionalQuantityRegressionStatistics, Language.Python),\r\n\r\n                // FSharp\r\n                // new AlgorithmStatisticsTestParameters(''BasicTemplateAlgorithm'', basicTemplateStatistics, Language.FSharp),\r\n\r\n                // VisualBasic\r\n                // new AlgorithmStatisticsTestParameters(''BasicTemplateAlgorithm'', basicTemplateStatistics, Language.VisualBasic),\r\n            }.Select(x => new TestCaseData(x).SetName(x.Language + ''/'' + x.Algorithm)).ToArray();", span="675-739"];
m3_36 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var fractionalQuantityRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''6''},\r\n                {''Average Win'', ''0.95%''},\r\n                {''Average Loss'', ''-2.02%''},\r\n                {''Compounding Annual Return'', ''254.081%''},\r\n                {''Drawdown'', ''6.600%''},\r\n                {''Expectancy'', ''-0.018''},\r\n                {''Net Profit'', ''1.395%''},\r\n                {''Sharpe Ratio'', ''1.176''},\r\n                {''Loss Rate'', ''33%''},\r\n                {''Win Rate'', ''67%''},\r\n                {''Profit-Loss Ratio'', ''0.47''},\r\n                {''Alpha'', ''-1.18''},\r\n                {''Beta'', ''1.249''},\r\n                {''Annual Standard Deviation'', ''0.813''},\r\n                {''Annual Variance'', ''0.66''},\r\n                {''Information Ratio'', ''-4.245''},\r\n                {''Tracking Error'', ''0.178''},\r\n                {''Treynor Ratio'', ''0.765''},\r\n                {''Total Fees'', ''$2045.20''}\r\n            }", span="629-650"];
m3_40 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m3_25 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var coarseFineFundamentalRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''6''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.84%''},\r\n                {''Compounding Annual Return'', ''-57.345%''},\r\n                {''Drawdown'', ''9.100%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-6.763%''},\r\n                {''Sharpe Ratio'', ''-3.288''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.105''},\r\n                {''Beta'', ''-46.73''},\r\n                {''Annual Standard Deviation'', ''0.235''},\r\n                {''Annual Variance'', ''0.055''},\r\n                {''Information Ratio'', ''-3.366''},\r\n                {''Tracking Error'', ''0.236''},\r\n                {''Treynor Ratio'', ''0.017''},\r\n                {''Total Fees'', ''$13.92''},\r\n            }", span="376-397"];
m3_20 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var dropboxBaseDataUniverseSelectionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''90''},\r\n                {''Average Win'', ''0.78%''},\r\n                {''Average Loss'', ''-0.40%''},\r\n                {''Compounding Annual Return'', ''18.626%''},\r\n                {''Drawdown'', ''4.700%''},\r\n                {''Expectancy'', ''1.071''},\r\n                {''Net Profit'', ''18.626%''},\r\n                {''Sharpe Ratio'', ''1.989''},\r\n                {''Loss Rate'', ''30%''},\r\n                {''Win Rate'', ''70%''},\r\n                {''Profit-Loss Ratio'', ''1.97''},\r\n                {''Alpha'', ''0.124''},\r\n                {''Beta'', ''2.375''},\r\n                {''Annual Standard Deviation'', ''0.085''},\r\n                {''Annual Variance'', ''0.007''},\r\n                {''Information Ratio'', ''1.761''},\r\n                {''Tracking Error'', ''0.085''},\r\n                {''Treynor Ratio'', ''0.072''},\r\n                {''Total Fees'', ''$240.17''}\r\n            }", span="261-282"];
m3_0 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", span="36-36"];
m3_1 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="GDAXBrokerageTests.cs", label="var utcTime = asset.LocalTime.ConvertToUtc(asset.Exchange.TimeZone)", span="39-39"];
m3_2 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="GDAXBrokerageTests.cs", label="var fill = new OrderEvent(order, utcTime, 0)", span="40-40"];
m3_3 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="GDAXBrokerageTests.cs", label="order.Status == OrderStatus.Canceled", span="42-42"];
m3_5 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="GDAXBrokerageTests.cs", label="!IsExchangeOpen(asset)", span="45-45"];
m3_7 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="GDAXBrokerageTests.cs", label="fill.FillPrice = GetPrices(asset, order.Direction).Current", span="48-48"];
m3_9 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="GDAXBrokerageTests.cs", label="var slip = asset.SlippageModel.GetSlippageApproximation(asset, order)", span="52-52"];
m3_10 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", span="40-40"];
m3_16 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var regressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''5433''},\r\n                {''Average Win'', ''0.00%''},\r\n                {''Average Loss'', ''0.00%''},\r\n                {''Compounding Annual Return'', ''-3.886%''},\r\n                {''Drawdown'', ''0.100%''},\r\n                {''Expectancy'', ''-0.991''},\r\n                {''Net Profit'', ''-0.054%''},\r\n                {''Sharpe Ratio'', ''-30.336''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''2.40''},\r\n                {''Alpha'', ''-0.019''},\r\n                {''Beta'', ''-0.339''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''-38.93''},\r\n                {''Tracking Error'', ''0.001''},\r\n                {''Treynor Ratio'', ''0.067''},\r\n                {''Total Fees'', ''$5433.00''}\r\n            }", span="169-190"];
m3_17 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var universeSelectionRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''5''},\r\n                {''Average Win'', ''0.70%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''-73.872%''},\r\n                {''Drawdown'', ''6.600%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''-6.060%''},\r\n                {''Sharpe Ratio'', ''-3.562''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''100%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-1.623''},\r\n                {''Beta'', ''39.211''},\r\n                {''Annual Standard Deviation'', ''0.284''},\r\n                {''Annual Variance'', ''0.08''},\r\n                {''Information Ratio'', ''-3.617''},\r\n                {''Tracking Error'', ''0.283''},\r\n                {''Treynor Ratio'', ''-0.026''},\r\n                {''Total Fees'', ''$5.00''}\r\n            }", span="192-213"];
m3_4 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="42-42"];
m3_6 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="45-45"];
m3_8 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="GDAXBrokerageTests.cs", label="fill.Status = OrderStatus.Filled", span="49-49"];
m3_12 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", color=green, community=0, file="GDAXBrokerageTests.cs", label="var basicTemplateFrameworkStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''264.956%''},\r\n                {''Drawdown'', ''2.200%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.669%''},\r\n                {''Sharpe Ratio'', ''4.411''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.007''},\r\n                {''Beta'', ''76.375''},\r\n                {''Annual Standard Deviation'', ''0.193''},\r\n                {''Annual Variance'', ''0.037''},\r\n                {''Information Ratio'', ''4.355''},\r\n                {''Tracking Error'', ''0.193''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$3.09''},\r\n                {''Total Alphas Generated'', ''100''},\r\n                {''Total Alphas Closed'', ''99''},\r\n                {''Total Alphas Analysis Completed'', ''86''},\r\n                {''Long Alpha Count'', ''100''},\r\n                {''Short Alpha Count'', ''0''},\r\n                {''Long/Short Ratio'', ''100%''},\r\n                {''Total Estimated Alpha Value'', ''$24404.2897''},\r\n                {''Mean Population Estimated Alpha Value'', ''$246.508''},\r\n                {''Mean Population Direction'', ''48.8372%''},\r\n                {''Mean Population Magnitude'', ''48.8372%''},\r\n                {''Rolling Averaged Population Direction'', ''68.2411%''},\r\n                {''Rolling Averaged Population Magnitude'', ''68.2411%''}\r\n            }", prediction=9, span="65-98"];
m3_14 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var limitFillRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''34''},\r\n                {''Average Win'', ''0.02%''},\r\n                {''Average Loss'', ''-0.02%''},\r\n                {''Compounding Annual Return'', ''8.350%''},\r\n                {''Drawdown'', ''0.400%''},\r\n                {''Expectancy'', ''0.447''},\r\n                {''Net Profit'', ''0.103%''},\r\n                {''Sharpe Ratio'', ''1.747''},\r\n                {''Loss Rate'', ''31%''},\r\n                {''Win Rate'', ''69%''},\r\n                {''Profit-Loss Ratio'', ''1.10''},\r\n                {''Alpha'', ''-0.107''},\r\n                {''Beta'', ''14.444''},\r\n                {''Annual Standard Deviation'', ''0.03''},\r\n                {''Annual Variance'', ''0.001''},\r\n                {''Information Ratio'', ''1.379''},\r\n                {''Tracking Error'', ''0.03''},\r\n                {''Treynor Ratio'', ''0.004''},\r\n                {''Total Fees'', ''$34.00''}\r\n            }", span="123-144"];
m3_15 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var updateOrderRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''21''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-1.71%''},\r\n                {''Compounding Annual Return'', ''-8.289%''},\r\n                {''Drawdown'', ''16.700%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-15.892%''},\r\n                {''Sharpe Ratio'', ''-1.225''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.147''},\r\n                {''Beta'', ''4.789''},\r\n                {''Annual Standard Deviation'', ''0.056''},\r\n                {''Annual Variance'', ''0.003''},\r\n                {''Information Ratio'', ''-1.515''},\r\n                {''Tracking Error'', ''0.056''},\r\n                {''Treynor Ratio'', ''-0.014''},\r\n                {''Total Fees'', ''$21.00''}\r\n            }", span="146-167"];
m3_18 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var customDataRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''155.365%''},\r\n                {''Drawdown'', ''84.800%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''5123.170%''},\r\n                {''Sharpe Ratio'', ''1.2''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.008''},\r\n                {''Beta'', ''73.725''},\r\n                {''Annual Standard Deviation'', ''0.84''},\r\n                {''Annual Variance'', ''0.706''},\r\n                {''Information Ratio'', ''1.183''},\r\n                {''Tracking Error'', ''0.84''},\r\n                {''Treynor Ratio'', ''0.014''},\r\n                {''Total Fees'', ''$0.00''}\r\n            }", span="215-236"];
m3_11 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var basicTemplateStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''264.956%''},\r\n                {''Drawdown'', ''2.200%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.669%''},\r\n                {''Sharpe Ratio'', ''4.411''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.007''},\r\n                {''Beta'', ''76.375''},\r\n                {''Annual Standard Deviation'', ''0.193''},\r\n                {''Annual Variance'', ''0.037''},\r\n                {''Information Ratio'', ''4.355''},\r\n                {''Tracking Error'', ''0.193''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$3.09''}\r\n            }", span="42-63"];
m3_13 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var basicTemplateOptionsStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.28%''},\r\n                {''Compounding Annual Return'', ''-78.105%''},\r\n                {''Drawdown'', ''0.300%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.280%''},\r\n                {''Sharpe Ratio'', ''0''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="100-121"];
m3_19 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="GDAXBrokerageTests.cs", label="var addRemoveSecurityRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''5''},\r\n                {''Average Win'', ''0.49%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''307.853%''},\r\n                {''Drawdown'', ''1.400%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.814%''},\r\n                {''Sharpe Ratio'', ''6.474''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''100%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.004''},\r\n                {''Beta'', ''82.594''},\r\n                {''Annual Standard Deviation'', ''0.141''},\r\n                {''Annual Variance'', ''0.02''},\r\n                {''Information Ratio'', ''6.4''},\r\n                {''Tracking Error'', ''0.141''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$25.20''}\r\n            }", span="238-259"];
m3_95 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", span="270-270"];
m3_96 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="var utcTime = asset.LocalTime.ConvertToUtc(asset.Exchange.TimeZone)", span="272-272"];
m3_97 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="var fill = new OrderEvent(order, utcTime, 0)", span="273-273"];
m3_98 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="order.Status == OrderStatus.Canceled", span="275-275"];
m3_100 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="var currentBar = asset.GetLastData()", span="283-283"];
m3_101 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="var localOrderTime = order.Time.ConvertFromUtc(asset.Exchange.TimeZone)", span="284-284"];
m3_104 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="asset.Exchange.DateTimeIsOpen(localOrderTime) && localOrderTime.Date == asset.LocalTime.Date", span="288-288"];
m3_106 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="!IsExchangeOpen(asset)", span="295-295"];
m3_108 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="fill.FillPrice = GetPrices(asset, order.Direction).Open", span="297-297"];
m3_110 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="var slip = asset.SlippageModel.GetSlippageApproximation(asset, order)", span="301-301"];
m3_111 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="order.Direction", span="304-304"];
m3_117 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="fill.FillQuantity = order.Quantity", span="317-317"];
m3_118 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="fill.OrderFee = asset.FeeModel.GetOrderFee(asset, order)", span="318-318"];
m3_99 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="275-275"];
m3_103 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="285-285"];
m3_105 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="290-290"];
m3_107 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="295-295"];
m3_109 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="fill.Status = OrderStatus.Filled", span="298-298"];
m3_113 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="fill.FillPrice += slip", span="307-307"];
m3_115 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="fill.FillPrice -= slip", span="310-310"];
m3_116 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="fill.Status == OrderStatus.Filled", span="315-315"];
m3_119 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="return fill;", span="321-321"];
m3_102 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="currentBar == null || localOrderTime >= currentBar.EndTime", span="285-285"];
m3_112 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="OrderDirection.Buy", span="306-306"];
m3_114 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="OrderDirection.Sell", span="309-309"];
m3_120 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Orders.Fills.ImmediateFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", span="270-270"];
m3_49 [cluster="Unk.SetName", file="GDAXBrokerageTests.cs", label="Entry Unk.SetName", span=""];
m3_177 [cluster="Unk.Contains", file="GDAXBrokerageTests.cs", label="Entry Unk.Contains", span=""];
m3_21 [cluster="QuantConnect.Orders.OrderEvent.OrderEvent(QuantConnect.Orders.Order, System.DateTime, decimal, string)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.OrderEvent.OrderEvent(QuantConnect.Orders.Order, System.DateTime, decimal, string)", span="144-144"];
m3_173 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.Prices.Prices(decimal, decimal, decimal, decimal, decimal)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.Fills.ImmediateFillModel.Prices.Prices(decimal, decimal, decimal, decimal, decimal)", span="463-463"];
m3_190 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.Prices.Prices(decimal, decimal, decimal, decimal, decimal)", file="GDAXBrokerageTests.cs", label="Current = current", span="465-465"];
m3_191 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.Prices.Prices(decimal, decimal, decimal, decimal, decimal)", file="GDAXBrokerageTests.cs", label="Open = open == 0 ? current : open", span="466-466"];
m3_192 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.Prices.Prices(decimal, decimal, decimal, decimal, decimal)", file="GDAXBrokerageTests.cs", label="High = high == 0 ? current : high", span="467-467"];
m3_193 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.Prices.Prices(decimal, decimal, decimal, decimal, decimal)", file="GDAXBrokerageTests.cs", label="Low = low == 0 ? current : low", span="468-468"];
m3_194 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.Prices.Prices(decimal, decimal, decimal, decimal, decimal)", file="GDAXBrokerageTests.cs", label="Close = close == 0 ? current : close", span="469-469"];
m3_195 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.Prices.Prices(decimal, decimal, decimal, decimal, decimal)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Orders.Fills.ImmediateFillModel.Prices.Prices(decimal, decimal, decimal, decimal, decimal)", span="463-463"];
m3_174 [cluster="Unk.Select", file="GDAXBrokerageTests.cs", label="Entry Unk.Select", span=""];
m3_122 [cluster="System.DateTime.ConvertFromUtc(DateTimeZone, bool)", file="GDAXBrokerageTests.cs", label="Entry System.DateTime.ConvertFromUtc(DateTimeZone, bool)", span="605-605"];
m3_196 [file="GDAXBrokerageTests.cs", label="QuantConnect.Orders.Fills.ImmediateFillModel", span=""];
m3_197 [file="GDAXBrokerageTests.cs", label="QuantConnect.Orders.Fills.ImmediateFillModel.Prices", span=""];
m2_29 -> m2_90  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m2_12 -> m2_18  [color=darkseagreen4, key=1, label=totalQuantity, style=dashed];
m2_12 -> m2_20  [color=darkseagreen4, key=1, label=totalQuantity, style=dashed];
m2_12 -> m2_27  [color=darkseagreen4, key=1, label=totalQuantity, style=dashed];
m2_30 -> m2_106  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m2_30 -> m2_130  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m2_104 -> m2_109  [color=darkseagreen4, key=1, label=targetCurrency, style=dashed];
m2_104 -> m2_111  [color=darkseagreen4, key=1, label=targetCurrency, style=dashed];
m2_104 -> m2_120  [color=darkseagreen4, key=1, label=targetCurrency, style=dashed];
m2_106 -> m2_110  [color=darkseagreen4, key=1, label=portfolioSecurity, style=dashed];
m2_106 -> m2_111  [color=darkseagreen4, key=1, label=portfolioSecurity, style=dashed];
m2_106 -> m2_112  [color=darkseagreen4, key=1, label=portfolioSecurity, style=dashed];
m2_113 -> m2_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_113 -> m2_115  [color=darkseagreen4, key=1, label=openOrders, style=dashed];
m2_116 -> m2_120  [color=darkseagreen4, key=1, label=orderSecurity, style=dashed];
m2_105 -> m2_110  [color=darkseagreen4, key=1, label=symbolDirectionPairs, style=dashed];
m2_105 -> m2_112  [color=darkseagreen4, key=1, label=symbolDirectionPairs, style=dashed];
m2_105 -> m2_130  [color=darkseagreen4, key=1, label=symbolDirectionPairs, style=dashed];
m2_107 -> m2_109  [color=darkseagreen4, key=1, label=basePortfolioSecurity, style=dashed];
m2_114 -> m2_123  [color=darkseagreen4, key=1, label=openOrdersReservedQuantity, style=dashed];
m2_122 -> m2_123  [color=darkseagreen4, key=1, label=openOrdersReservedQuantity, style=dashed];
m2_130 -> m2_130  [color=darkseagreen4, key=1, label=dir, style=dashed];
m2_128 -> m2_130  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m2_13 -> m2_18  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m2_13 -> m2_22  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m2_13 -> m2_27  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m2_32 -> m2_63  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m2_44 -> m2_66  [color=darkseagreen4, key=1, label=targetOrderValue, style=dashed];
m2_45 -> m2_67  [color=darkseagreen4, key=1, label=direction, style=dashed];
m2_59 -> m2_66  [color=darkseagreen4, key=1, label=orderValue, style=dashed];
m2_60 -> m2_66  [color=darkseagreen4, key=1, label=orderFees, style=dashed];
m2_46 -> m2_66  [color=darkseagreen4, key=1, label=cashRemaining, style=dashed];
m2_55 -> m2_67  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m2_4 -> m2_8  [color=green, key=1, label=restClient, style=dashed];
m2_15 -> m2_18  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m2_15 -> m2_22  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m2_15 -> m2_27  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m2_74 -> m2_83  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderDirection", style=dashed];
m2_74 -> m2_85  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderDirection", style=dashed];
m2_78 -> m2_86  [color=darkseagreen4, key=1, label=baseCurrencyPosition, style=dashed];
m2_79 -> m2_84  [color=darkseagreen4, key=1, label=quoteCurrencyPosition, style=dashed];
m2_80 -> m2_84  [color=darkseagreen4, key=1, label=unitPrice, style=dashed];
m2_5 -> m2_11  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m2_5 -> m2_14  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m2_5 -> m2_16  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m2_5 -> m2_17  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m2_5 -> m2_19  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m2_5 -> m2_20  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m2_5 -> m2_21  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m2_5 -> m2_24  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m2_5 -> m2_26  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m2_5 -> m2_8  [color=green, key=1, label=webSocketClient, style=dashed];
m2_6 -> m2_8  [color=green, key=1, label=algorithm, style=dashed];
m2_14 -> m2_18  [color=darkseagreen4, key=1, label=totalQuantity, style=dashed];
m2_14 -> m2_20  [color=darkseagreen4, key=1, label=totalQuantity, style=dashed];
m2_14 -> m2_27  [color=darkseagreen4, key=1, label=totalQuantity, style=dashed];
m2_16 -> m2_18  [color=darkseagreen4, key=1, label=openOrdersReservedQuantity, style=dashed];
m2_16 -> m2_20  [color=darkseagreen4, key=1, label=openOrdersReservedQuantity, style=dashed];
m2_16 -> m2_27  [color=darkseagreen4, key=1, label=openOrdersReservedQuantity, style=dashed];
m2_26 -> m2_26  [color=darkseagreen4, key=1, label=orderFee, style=dashed];
m2_7 -> m2_18  [color=green, key=1, label="lambda expression", style=dashed];
m2_23 -> m2_27  [color=darkseagreen4, key=1, label=orderFee, style=dashed];
m2_133 -> m2_21  [color=darkseagreen4, key=1, label="QuantConnect.Securities.CashBuyingPowerModel", style=dashed];
m2_134 -> m2_130  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m2_135 -> m2_130  [color=darkseagreen4, key=1, label=symbolDirectionPairs, style=dashed];
m3_75 -> m3_78  [color=darkseagreen4, key=1, label="QuantConnect.Orders.LimitOrder", style=dashed];
m3_75 -> m3_81  [color=darkseagreen4, key=1, label="QuantConnect.Orders.LimitOrder", style=dashed];
m3_75 -> m3_83  [color=darkseagreen4, key=1, label="QuantConnect.Orders.LimitOrder", style=dashed];
m3_75 -> m3_87  [color=darkseagreen4, key=1, label="QuantConnect.Orders.LimitOrder", style=dashed];
m3_77 -> m3_79  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_77 -> m3_90  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_77 -> m3_93  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_80 -> m3_83  [color=darkseagreen4, key=1, label=prices, style=dashed];
m3_80 -> m3_87  [color=darkseagreen4, key=1, label=prices, style=dashed];
m3_23 -> m3_152  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderDirection", style=dashed];
m3_23 -> m3_38  [color=green, key=1, label=historyAlgorithmStatistics, style=dashed];
m3_147 -> m3_153  [color=darkseagreen4, key=1, label=low, style=dashed];
m3_147 -> m3_171  [color=darkseagreen4, key=1, label=low, style=dashed];
m3_148 -> m3_153  [color=darkseagreen4, key=1, label=high, style=dashed];
m3_148 -> m3_171  [color=darkseagreen4, key=1, label=high, style=dashed];
m3_149 -> m3_153  [color=darkseagreen4, key=1, label=open, style=dashed];
m3_149 -> m3_171  [color=darkseagreen4, key=1, label=open, style=dashed];
m3_150 -> m3_153  [color=darkseagreen4, key=1, label=close, style=dashed];
m3_150 -> m3_171  [color=darkseagreen4, key=1, label=close, style=dashed];
m3_151 -> m3_153  [color=darkseagreen4, key=1, label=current, style=dashed];
m3_151 -> m3_171  [color=darkseagreen4, key=1, label=current, style=dashed];
m3_154 -> m3_179  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_154 -> m3_156  [color=darkseagreen4, key=1, label=subscriptionTypes, style=dashed];
m3_154 -> m3_164  [color=darkseagreen4, key=1, label=subscriptionTypes, style=dashed];
m3_154 -> m3_169  [color=darkseagreen4, key=1, label=subscriptionTypes, style=dashed];
m3_157 -> m3_159  [color=darkseagreen4, key=1, label=price, style=dashed];
m3_165 -> m3_167  [color=darkseagreen4, key=1, label=bar, style=dashed];
m3_168 -> m3_170  [color=darkseagreen4, key=1, label=tradeBar, style=dashed];
m3_160 -> m3_162  [color=darkseagreen4, key=1, label=price, style=dashed];
m3_124 -> m3_127  [color=darkseagreen4, key=1, label="QuantConnect.Orders.MarketOnCloseOrder", style=dashed];
m3_124 -> m3_131  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m3_124 -> m3_136  [color=darkseagreen4, key=1, label="QuantConnect.Orders.MarketOnCloseOrder", style=dashed];
m3_126 -> m3_128  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_126 -> m3_132  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_126 -> m3_141  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_126 -> m3_144  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_22 -> m3_184  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m3_22 -> m3_38  [color=darkseagreen4, key=1, label=parameterizedStatistics, style=dashed];
m3_42 -> m3_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m3_51 -> m3_54  [color=darkseagreen4, key=1, label="QuantConnect.Orders.StopLimitOrder", style=dashed];
m3_51 -> m3_57  [color=darkseagreen4, key=1, label="QuantConnect.Orders.StopLimitOrder", style=dashed];
m3_51 -> m3_59  [color=darkseagreen4, key=1, label="QuantConnect.Orders.StopLimitOrder", style=dashed];
m3_51 -> m3_61  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m3_51 -> m3_65  [color=darkseagreen4, key=1, label="QuantConnect.Orders.StopLimitOrder", style=dashed];
m3_51 -> m3_67  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m3_53 -> m3_55  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_53 -> m3_70  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_53 -> m3_73  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_24 -> m3_38  [color=green, key=1, label=coarseFundamentalTop5AlgorithmStatistics, style=dashed];
m3_54 -> m3_50  [color=darkseagreen4, key=1, label="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters", style=dashed];
m3_54 -> m3_51  [color=darkseagreen4, key=1, label="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters", style=dashed];
m3_56 -> m3_59  [color=darkseagreen4, key=1, label=prices, style=dashed];
m3_56 -> m3_65  [color=darkseagreen4, key=1, label=prices, style=dashed];
m3_26 -> m3_39  [color=darkseagreen4, key=1, label="QuantConnect.Orders.StopMarketOrder", style=dashed];
m3_26 -> m3_41  [color=darkseagreen4, key=1, label="QuantConnect.Orders.StopMarketOrder", style=dashed];
m3_26 -> m3_43  [color=darkseagreen4, key=1, label="QuantConnect.Orders.StopMarketOrder", style=dashed];
m3_26 -> m3_38  [color=darkseagreen4, key=1, label=macdTrendAlgorithmStatistics, style=dashed];
m3_27 -> m3_38  [color=darkseagreen4, key=1, label=optionSplitRegressionAlgorithmStatistics, style=dashed];
m3_28 -> m3_38  [color=darkseagreen4, key=1, label=optionRenameRegressionAlgorithmStatistics, style=dashed];
m3_28 -> m3_39  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_28 -> m3_43  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_28 -> m3_44  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_28 -> m3_47  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_29 -> m3_38  [color=darkseagreen4, key=1, label=optionOpenInterestRegressionAlgorithmStatistics, style=dashed];
m3_31 -> m3_38  [color=darkseagreen4, key=1, label=weeklyUniverseSelectionRegressionAlgorithmStatistics, style=dashed];
m3_33 -> m3_39  [color=darkseagreen4, key=1, label=prices, style=dashed];
m3_33 -> m3_41  [color=darkseagreen4, key=1, label=prices, style=dashed];
m3_33 -> m3_43  [color=darkseagreen4, key=1, label=prices, style=dashed];
m3_33 -> m3_38  [color=darkseagreen4, key=1, label=basicTemplateDailyStatistics, style=dashed];
m3_34 -> m3_39  [color=darkseagreen4, key=1, label=slip, style=dashed];
m3_34 -> m3_43  [color=darkseagreen4, key=1, label=slip, style=dashed];
m3_34 -> m3_38  [color=darkseagreen4, key=1, label=hourSplitStatistics, style=dashed];
m3_35 -> m3_38  [color=darkseagreen4, key=1, label=hourReverseSplitStatistics, style=dashed];
m3_30 -> m3_38  [color=darkseagreen4, key=1, label=optionChainConsistencyRegressionAlgorithmStatistics, style=dashed];
m3_32 -> m3_38  [color=darkseagreen4, key=1, label=optionExerciseAssignRegressionAlgorithmStatistics, style=dashed];
m3_36 -> m3_38  [color=darkseagreen4, key=1, label=fractionalQuantityRegressionStatistics, style=dashed];
m3_25 -> m3_38  [color=darkseagreen4, key=1, label=coarseFineFundamentalRegressionAlgorithmStatistics, style=dashed];
m3_20 -> m3_38  [color=darkseagreen4, key=1, label=dropboxBaseDataUniverseSelectionStatistics, style=dashed];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label="QuantConnect.Orders.MarketOrder", style=dashed];
m3_0 -> m3_5  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m3_0 -> m3_10  [color=darkseagreen4, key=1, label="QuantConnect.Orders.MarketOrder", style=dashed];
m3_2 -> m3_4  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_2 -> m3_6  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_16 -> m3_38  [color=darkseagreen4, key=1, label=regressionStatistics, style=dashed];
m3_17 -> m3_38  [color=darkseagreen4, key=1, label=universeSelectionRegressionStatistics, style=dashed];
m3_12 -> m3_38  [color=green, key=1, label=basicTemplateFrameworkStatistics, style=dashed];
m3_14 -> m3_38  [color=darkseagreen4, key=1, label=limitFillRegressionStatistics, style=dashed];
m3_15 -> m3_38  [color=darkseagreen4, key=1, label=updateOrderRegressionStatistics, style=dashed];
m3_18 -> m3_38  [color=darkseagreen4, key=1, label=customDataRegressionStatistics, style=dashed];
m3_11 -> m3_38  [color=darkseagreen4, key=1, label=basicTemplateStatistics, style=dashed];
m3_13 -> m3_38  [color=darkseagreen4, key=1, label=basicTemplateOptionsStatistics, style=dashed];
m3_19 -> m3_38  [color=darkseagreen4, key=1, label=addRemoveSecurityRegressionStatistics, style=dashed];
m3_95 -> m3_98  [color=darkseagreen4, key=1, label="QuantConnect.Orders.MarketOnOpenOrder", style=dashed];
m3_95 -> m3_104  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m3_95 -> m3_106  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m3_95 -> m3_111  [color=darkseagreen4, key=1, label="QuantConnect.Orders.MarketOnOpenOrder", style=dashed];
m3_97 -> m3_99  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_97 -> m3_103  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_97 -> m3_105  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_97 -> m3_107  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_97 -> m3_116  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_97 -> m3_119  [color=darkseagreen4, key=1, label=fill, style=dashed];
m3_100 -> m3_102  [color=darkseagreen4, key=1, label=currentBar, style=dashed];
m3_101 -> m3_104  [color=darkseagreen4, key=1, label=localOrderTime, style=dashed];
m3_21 -> m3_38  [color=darkseagreen4, key=1, label=dropboxUniverseSelectionStatistics, style=dashed];
}
