digraph  {
m0_16 [cluster="QuantConnect.Data.Consolidators.SequentialConsolidator.SequentialConsolidator(QuantConnect.Data.Consolidators.IDataConsolidator, QuantConnect.Data.Consolidators.IDataConsolidator)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Data.Consolidators.SequentialConsolidator.SequentialConsolidator(QuantConnect.Data.Consolidators.IDataConsolidator, QuantConnect.Data.Consolidators.IDataConsolidator)", span="90-90"];
m0_15 [cluster="QuantConnect.Data.Consolidators.IdentityDataConsolidator<T>.IdentityDataConsolidator()", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Data.Consolidators.IdentityDataConsolidator<T>.IdentityDataConsolidator()", span="24-24"];
m0_0 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", span="25-25"];
m0_1 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="var first = new IdentityDataConsolidator<BaseData>()", span="27-27"];
m0_2 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="var second = new IdentityDataConsolidator<BaseData>()", span="28-28"];
m0_3 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="var sequential = new SequentialConsolidator(first, second)", span="29-29"];
m0_7 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="first.DataConsolidated += (sender, consolidated) =>\r\n            {\r\n                firstFired = true;\r\n            }", span="35-38"];
m0_8 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="second.DataConsolidated += (sender, consolidated) =>\r\n            {\r\n                secondFired = true;\r\n            }", span="40-43"];
m0_4 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="bool firstFired = false", span="31-31"];
m0_9 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="sequential.DataConsolidated += (sender, consolidated) =>\r\n            {\r\n                sequentialFired = true;\r\n            }", span="45-48"];
m0_10 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="sequential.Update(new TradeBar())", span="50-50"];
m0_5 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="bool secondFired = false", span="32-32"];
m0_6 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="bool sequentialFired = false", span="33-33"];
m0_11 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="Assert.IsTrue(firstFired)", span="52-52"];
m0_12 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="Assert.IsTrue(secondFired)", span="53-53"];
m0_13 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="Assert.IsTrue(sequentialFired)", span="54-54"];
m0_14 [cluster="QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", file="GDAXBrokerageModelTests.cs", label="Exit QuantConnect.Tests.Common.Data.SequentialConsolidatorTests.SequentialConsolidatorsFiresAllEvents()", span="25-25"];
m0_18 [cluster="QuantConnect.Data.Consolidators.SequentialConsolidator.Update(QuantConnect.Data.BaseData)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Data.Consolidators.SequentialConsolidator.Update(QuantConnect.Data.BaseData)", span="74-74"];
m0_19 [cluster="Unk.IsTrue", file="GDAXBrokerageModelTests.cs", label="Entry Unk.IsTrue", span=""];
m0_17 [cluster="QuantConnect.Data.Market.TradeBar.TradeBar()", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Data.Market.TradeBar.TradeBar()", span="78-78"];
m0_26 [cluster="lambda expression", file="GDAXBrokerageModelTests.cs", label="Entry lambda expression", span="45-48"];
m0_20 [cluster="lambda expression", file="GDAXBrokerageModelTests.cs", label="Entry lambda expression", span="35-38"];
m0_21 [cluster="lambda expression", file="GDAXBrokerageModelTests.cs", label="firstFired = true", span="37-37"];
m0_22 [cluster="lambda expression", file="GDAXBrokerageModelTests.cs", label="Exit lambda expression", span="35-38"];
m0_23 [cluster="lambda expression", file="GDAXBrokerageModelTests.cs", label="Entry lambda expression", span="40-43"];
m0_24 [cluster="lambda expression", file="GDAXBrokerageModelTests.cs", label="secondFired = true", span="42-42"];
m0_25 [cluster="lambda expression", file="GDAXBrokerageModelTests.cs", label="Exit lambda expression", span="40-43"];
m0_27 [cluster="lambda expression", file="GDAXBrokerageModelTests.cs", label="sequentialFired = true", span="47-47"];
m0_28 [cluster="lambda expression", file="GDAXBrokerageModelTests.cs", label="Exit lambda expression", span="45-48"];
m1_0 [cluster="QuantConnect.Orders.Fees.GDAXFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXFeeModel.cs", label="Entry QuantConnect.Orders.Fees.GDAXFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="35-35"];
m1_1 [cluster="QuantConnect.Orders.Fees.GDAXFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXFeeModel.cs", label="order.Type == OrderType.Limit", span="38-38"];
m1_4 [cluster="QuantConnect.Orders.Fees.GDAXFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXFeeModel.cs", label="decimal fee = security.Price * (order.Quantity < 0 ? (order.Quantity * -1) : order.Quantity) * divisor", span="46-46"];
m1_2 [cluster="QuantConnect.Orders.Fees.GDAXFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXFeeModel.cs", label="return 0m;", span="40-40"];
m1_3 [cluster="QuantConnect.Orders.Fees.GDAXFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", color=red, community=0, file="GDAXFeeModel.cs", label="-1: decimal divisor = 0.025m", span="44-44"];
m1_5 [cluster="QuantConnect.Orders.Fees.GDAXFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXFeeModel.cs", label="return fee;", span="47-47"];
m1_6 [cluster="QuantConnect.Orders.Fees.GDAXFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXFeeModel.cs", label="Exit QuantConnect.Orders.Fees.GDAXFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="35-35"];
m2_130 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", span="460-460"];
m2_255 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="_brokerage.OrderStatusChanged += handler", span="466-466"];
m2_256 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="_algorithm.StopMarketOrder(symbol, quantity, stopPrice)", span="468-468"];
m2_258 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="_brokerage.OrderStatusChanged -= handler", span="472-472"];
m2_254 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="EventHandler<OrderEvent> handler = (s, e) => { resetEvent.Set(); }", span="464-464"];
m2_257 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="resetEvent.WaitOne()", span="470-470"];
m2_253 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="var resetEvent = new ManualResetEvent(false)", span="462-462"];
m2_259 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", span="460-460"];
m2_20 [cluster="QuantConnect.Securities.CashBook.Add(string, decimal, decimal)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.CashBook.Add(string, decimal, decimal)", span="63-63"];
m2_155 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", span="288-288"];
m2_156 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(0)", span="290-290"];
m2_157 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="_btcusd.SetMarketPrice(new Tick { Value = 10000m })", span="292-292"];
m2_158 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(''BTC'', 0.5m, 10000m)", span="293-293"];
m2_159 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="var order = new MarketOrder(_btcusd.Symbol, -0.5m, DateTime.UtcNow)", span="296-296"];
m2_160 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="297-297"];
m2_161 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="order = new MarketOrder(_btcusd.Symbol, -0.51m, DateTime.UtcNow)", span="300-300"];
m2_162 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="301-301"];
m2_163 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Assert.AreEqual(-0.5m, _buyingPowerModel.GetMaximumOrderQuantityForTargetValue(_portfolio, _btcusd, 0))", span="304-304"];
m2_164 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", span="288-288"];
m2_44 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetReservedBuyingPowerForPosition(QuantConnect.Securities.Security)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.GetReservedBuyingPowerForPosition(QuantConnect.Securities.Security)", span="204-204"];
m2_34 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.TearDown()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.TearDown()", span="92-92"];
m2_35 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.TearDown()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _transactionHandler.Exit()", span="94-94"];
m2_36 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.TearDown()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.TearDown()", span="92-92"];
m2_180 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", span="338-338"];
m2_181 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(5000)", span="340-340"];
m2_182 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_portfolio.CashBook[''BTC''].SetAmount(1m)", span="341-341"];
m2_183 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_portfolio.CashBook[''ETH''].SetAmount(3m)", span="342-342"];
m2_184 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_btcusd = _algorithm.AddCrypto(''BTCUSD'')", span="344-344"];
m2_185 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_btcusd.SetMarketPrice(new Tick { Value = 15000m })", span="345-345"];
m2_186 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_ethusd = _algorithm.AddCrypto(''ETHUSD'')", span="347-347"];
m2_187 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_ethusd.SetMarketPrice(new Tick { Value = 1000m })", span="348-348"];
m2_188 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_ethbtc = _algorithm.AddCrypto(''ETHBTC'')", span="350-350"];
m2_189 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_ethbtc.SetMarketPrice(new Tick { Value = 0.1m })", span="351-351"];
m2_190 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_algorithm.SetFinishedWarmingUp()", span="352-352"];
m2_191 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="SubmitLimitOrder(_btcusd.Symbol, -0.1m, 15000m)", span="355-355"];
m2_192 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="SubmitLimitOrder(_ethbtc.Symbol, 1m, 0.1m)", span="358-358"];
m2_193 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.AreEqual(-0.798m, _buyingPowerModel.GetMaximumOrderQuantityForTargetValue(_portfolio, _btcusd, 0.2m * 15000))", span="362-362"];
m2_194 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="var order = new MarketOrder(_btcusd.Symbol, -0.80m, DateTime.UtcNow)", span="365-365"];
m2_195 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="366-366"];
m2_196 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="order = new MarketOrder(_btcusd.Symbol, -0.81m, DateTime.UtcNow)", span="369-369"];
m2_197 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="370-370"];
m2_198 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", span="338-338"];
m2_19 [cluster="QuantConnect.Algorithm.QCAlgorithm.QCAlgorithm()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.QCAlgorithm()", span="96-96"];
m2_131 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Orders.StopMarketOrder.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="55-55"];
m2_33 [cluster="QuantConnect.Securities.CashBuyingPowerModel.CashBuyingPowerModel()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.CashBuyingPowerModel()", span="24-24"];
m2_260 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, string)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, string)", span="410-410"];
m2_60 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="55-55"];
m2_209 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", span="391-391"];
m2_210 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(10000)", span="393-393"];
m2_211 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(''EUR'', 10000m, 1.20m)", span="394-394"];
m2_212 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="_btcusd = _algorithm.AddCrypto(''BTCUSD'')", span="396-396"];
m2_213 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="_btcusd.SetMarketPrice(new Tick { Value = 15000m })", span="397-397"];
m2_214 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="_ethusd = _algorithm.AddCrypto(''ETHUSD'')", span="399-399"];
m2_215 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="_ethusd.SetMarketPrice(new Tick { Value = 1000m })", span="400-400"];
m2_216 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="_ethbtc = _algorithm.AddCrypto(''ETHBTC'')", span="402-402"];
m2_217 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="_ethbtc.SetMarketPrice(new Tick { Value = 0.1m })", span="403-403"];
m2_218 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="_btceur = _algorithm.AddCrypto(''BTCEUR'')", span="405-405"];
m2_219 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="_btceur.SetMarketPrice(new Tick { Value = 12000m })", span="406-406"];
m2_220 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="_algorithm.SetFinishedWarmingUp()", span="407-407"];
m2_221 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="Assert.AreEqual(0.665m, _buyingPowerModel.GetMaximumOrderQuantityForTargetValue(_portfolio, _btcusd, 10000))", span="410-410"];
m2_222 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="Assert.AreEqual(9.97m, _buyingPowerModel.GetMaximumOrderQuantityForTargetValue(_portfolio, _ethusd, 10000))", span="413-413"];
m2_223 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="Assert.AreEqual(0m, _buyingPowerModel.GetMaximumOrderQuantityForTargetValue(_portfolio, _ethbtc, 10000))", span="416-416"];
m2_224 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="var targetValue = 10000m * _portfolio.CashBook[''EUR''].ConversionRate", span="419-419"];
m2_225 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="Assert.AreEqual(0.83125m, _buyingPowerModel.GetMaximumOrderQuantityForTargetValue(_portfolio, _btceur, targetValue))", span="420-420"];
m2_226 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", span="391-391"];
m2_83 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", span="164-164"];
m2_84 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(5000)", span="166-166"];
m2_85 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_btcusd = _algorithm.AddCrypto(''BTCUSD'')", span="168-168"];
m2_86 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_btcusd.SetMarketPrice(new Tick { Value = 15000m })", span="169-169"];
m2_87 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_ethusd = _algorithm.AddCrypto(''ETHUSD'')", span="171-171"];
m2_88 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_ethusd.SetMarketPrice(new Tick { Value = 1000m })", span="172-172"];
m2_89 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_algorithm.SetFinishedWarmingUp()", span="173-173"];
m2_90 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="SubmitLimitOrder(_btcusd.Symbol, 0.1m, 15000m)", span="176-176"];
m2_91 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="SubmitLimitOrder(_ethusd.Symbol, 3m, 1000m)", span="179-179"];
m2_92 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="var order = new LimitOrder(_btcusd.Symbol, 0.05m, 10000m, DateTime.UtcNow)", span="182-182"];
m2_93 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="183-183"];
m2_94 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="order = new LimitOrder(_btcusd.Symbol, 0.06m, 10000m, DateTime.UtcNow)", span="186-186"];
m2_95 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="187-187"];
m2_96 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", span="164-164"];
m2_208 [cluster="QuantConnect.Securities.Cash.AddAmount(decimal)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.Cash.AddAmount(decimal)", span="114-114"];
m2_102 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", span="191-191"];
m2_103 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(5000)", span="193-193"];
m2_104 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_portfolio.CashBook[''BTC''].SetAmount(1m)", span="194-194"];
m2_105 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_portfolio.CashBook[''ETH''].SetAmount(3m)", span="195-195"];
m2_106 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_btcusd = _algorithm.AddCrypto(''BTCUSD'')", span="197-197"];
m2_107 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_btcusd.SetMarketPrice(new Tick { Value = 15000m })", span="198-198"];
m2_108 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_ethusd = _algorithm.AddCrypto(''ETHUSD'')", span="200-200"];
m2_109 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_ethusd.SetMarketPrice(new Tick { Value = 1000m })", span="201-201"];
m2_110 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_ethbtc = _algorithm.AddCrypto(''ETHBTC'')", span="203-203"];
m2_111 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_ethbtc.SetMarketPrice(new Tick { Value = 0.1m })", span="204-204"];
m2_112 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_algorithm.SetFinishedWarmingUp()", span="205-205"];
m2_113 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="SubmitLimitOrder(_btcusd.Symbol, -0.1m, 15000m)", span="208-208"];
m2_114 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="SubmitLimitOrder(_ethusd.Symbol, -1m, 1000m)", span="211-211"];
m2_115 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="SubmitLimitOrder(_ethbtc.Symbol, 1m, 0.1m)", span="214-214"];
m2_116 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="SubmitStopMarketOrder(_btcusd.Symbol, -0.1m, 5000m)", span="217-217"];
m2_117 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="var order = new LimitOrder(_btcusd.Symbol, -0.7m, 10000m, DateTime.UtcNow)", span="220-220"];
m2_118 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="221-221"];
m2_119 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="order = new LimitOrder(_btcusd.Symbol, -0.8m, 10000m, DateTime.UtcNow)", span="224-224"];
m2_120 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="225-225"];
m2_121 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="order = new LimitOrder(_ethusd.Symbol, -2m, 1200m, DateTime.UtcNow)", span="228-228"];
m2_122 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _ethusd, order))", span="229-229"];
m2_123 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="order = new LimitOrder(_ethusd.Symbol, -2.1m, 2000m, DateTime.UtcNow)", span="232-232"];
m2_124 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _ethusd, order))", span="233-233"];
m2_125 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="var stopOrder = new StopMarketOrder(_btcusd.Symbol, -0.7m, 5000m, DateTime.UtcNow)", span="236-236"];
m2_126 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, stopOrder))", span="237-237"];
m2_127 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="stopOrder = new StopMarketOrder(_btcusd.Symbol, -0.8m, 5000m, DateTime.UtcNow)", span="240-240"];
m2_128 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, stopOrder))", span="241-241"];
m2_129 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", span="191-191"];
m2_261 [cluster="lambda expression", file="KrakenDataDownloader.cs", label="Entry lambda expression", span="464-464"];
m2_250 [cluster="lambda expression", file="KrakenDataDownloader.cs", label="resetEvent.Set()", span="448-448"];
m2_262 [cluster="lambda expression", file="KrakenDataDownloader.cs", label="resetEvent.Set()", span="464-464"];
m2_249 [cluster="lambda expression", file="KrakenDataDownloader.cs", label="Entry lambda expression", span="448-448"];
m2_251 [cluster="lambda expression", file="KrakenDataDownloader.cs", label="Exit lambda expression", span="448-448"];
m2_263 [cluster="lambda expression", file="KrakenDataDownloader.cs", label="Exit lambda expression", span="464-464"];
m2_31 [cluster="QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", span="157-157"];
m2_63 [cluster="Unk.IsFalse", file="KrakenDataDownloader.cs", label="Entry Unk.IsFalse", span=""];
m2_99 [cluster="QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", span="540-540"];
m2_247 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, decimal, decimal, string)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, decimal, decimal, string)", span="363-363"];
m2_73 [cluster="QuantConnect.Securities.SecurityPortfolioManager.SetCash(string, decimal, decimal)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.SecurityPortfolioManager.SetCash(string, decimal, decimal)", span="485-485"];
m2_227 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", span="424-424"];
m2_228 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(8000)", span="426-426"];
m2_229 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", file="KrakenDataDownloader.cs", label="_portfolio.CashBook.Add(''BTC'', 0.2m, 10000m)", span="427-427"];
m2_230 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", file="KrakenDataDownloader.cs", label="_btcusd = _algorithm.AddCrypto(''BTCUSD'')", span="429-429"];
m2_231 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", file="KrakenDataDownloader.cs", label="_btcusd.SetMarketPrice(new Tick { Value = 10000m })", span="430-430"];
m2_232 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", file="KrakenDataDownloader.cs", label="_algorithm.SetFinishedWarmingUp()", span="431-431"];
m2_233 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", file="KrakenDataDownloader.cs", label="Assert.AreEqual(10000m, _portfolio.TotalPortfolioValue)", span="433-433"];
m2_234 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", file="KrakenDataDownloader.cs", label="var quantity = _buyingPowerModel.GetMaximumOrderQuantityForTargetValue(_portfolio, _btcusd, 10000m)", span="436-436"];
m2_236 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", file="KrakenDataDownloader.cs", label="var order = new MarketOrder(_btcusd.Symbol, quantity, DateTime.UtcNow)", span="440-440"];
m2_237 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="441-441"];
m2_235 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", file="KrakenDataDownloader.cs", label="Assert.AreEqual(0.798m, quantity)", span="437-437"];
m2_238 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksExistingHoldings()", span="424-424"];
m2_246 [cluster="System.Threading.ManualResetEvent.ManualResetEvent(bool)", file="KrakenDataDownloader.cs", label="Entry System.Threading.ManualResetEvent.ManualResetEvent(bool)", span="0-0"];
m2_37 [cluster="QuantConnect.Lean.Engine.TransactionHandlers.BrokerageTransactionHandler.Exit()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Lean.Engine.TransactionHandlers.BrokerageTransactionHandler.Exit()", span="608-608"];
m2_100 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetFinishedWarmingUp()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetFinishedWarmingUp()", span="142-142"];
m2_62 [cluster="Unk.IsTrue", file="KrakenDataDownloader.cs", label="Entry Unk.IsTrue", span=""];
m2_97 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddCrypto(string, QuantConnect.Resolution, string, bool, decimal)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddCrypto(string, QuantConnect.Resolution, string, bool, decimal)", span="1613-1613"];
m2_25 [cluster="QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler.Initialize(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Lean.Engine.Results.IResultHandler)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler.Initialize(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Lean.Engine.Results.IResultHandler)", span="36-36"];
m2_24 [cluster="QuantConnect.Tests.Engine.TestResultHandler.TestResultHandler(System.Action<QuantConnect.Packets.Packet>)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Engine.TestResultHandler.TestResultHandler(System.Action<QuantConnect.Packets.Packet>)", span="51-51"];
m2_143 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", span="122-122"];
m2_50 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", span="113-113"];
m2_51 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _portfolio.SetCash(20000)", span="115-115"];
m2_52 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: var order = new LimitOrder(_btcusd.Symbol, 2m, 10000m, DateTime.UtcNow)", span="118-118"];
m2_53 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="119-119"];
m2_54 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", file="KrakenDataDownloader.cs", label="order = new LimitOrder(_btcusd.Symbol, 2.1m, 10000m, DateTime.UtcNow)", span="122-122"];
m2_55 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="123-123"];
m2_56 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", file="KrakenDataDownloader.cs", label="order = new LimitOrder(_btcusd.Symbol, 2m, 11000m, DateTime.UtcNow)", span="126-126"];
m2_57 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="127-127"];
m2_58 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", span="113-113"];
m2_26 [cluster="System.Threading.Thread.Thread(System.Threading.ThreadStart)", file="KrakenDataDownloader.cs", label="Entry System.Threading.Thread.Thread(System.Threading.ThreadStart)", span="0-0"];
m2_27 [cluster="System.Threading.Thread.Start()", file="KrakenDataDownloader.cs", label="Entry System.Threading.Thread.Start()", span="0-0"];
m2_64 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", span="131-131"];
m2_65 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(''EUR'', 20000m, 1.20m)", span="133-133"];
m2_66 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", file="KrakenDataDownloader.cs", label="var order = new LimitOrder(_btceur.Symbol, 2m, 10000m, DateTime.UtcNow)", span="136-136"];
m2_67 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btceur, order))", span="137-137"];
m2_68 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", file="KrakenDataDownloader.cs", label="order = new LimitOrder(_btceur.Symbol, 2.1m, 10000m, DateTime.UtcNow)", span="140-140"];
m2_69 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btceur, order))", span="141-141"];
m2_70 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", file="KrakenDataDownloader.cs", label="order = new LimitOrder(_btceur.Symbol, 2m, 11000m, DateTime.UtcNow)", span="144-144"];
m2_71 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btceur, order))", span="145-145"];
m2_72 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", span="131-131"];
m2_0 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", span="46-46"];
m2_1 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _algorithm = new QCAlgorithm()", span="48-48"];
m2_2 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _portfolio = _algorithm.Portfolio", span="49-49"];
m2_3 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _portfolio.CashBook.Add(''EUR'', 0, 1.20m)", span="50-50"];
m2_4 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _portfolio.CashBook.Add(''BTC'', 0, 15000m)", span="51-51"];
m2_5 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _portfolio.CashBook.Add(''ETH'', 0, 1000m)", span="52-52"];
m2_6 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _algorithm.SetBrokerageModel(BrokerageName.GDAX, AccountType.Cash)", span="54-54"];
m2_7 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _transactionHandler = new BacktestingTransactionHandler()", span="56-56"];
m2_8 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _brokerage = new BacktestingBrokerage(_algorithm)", span="57-57"];
m2_9 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _transactionHandler.Initialize(_algorithm, _brokerage, new TestResultHandler())", span="58-58"];
m2_10 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: new Thread(_transactionHandler.Run) { IsBackground = true }.Start()", span="59-59"];
m2_11 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _algorithm.Transactions.SetOrderProcessor(_transactionHandler)", span="61-61"];
m2_12 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: var tz = TimeZones.NewYork", span="63-63"];
m2_13 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _btcusd = new Crypto(\r\n                SecurityExchangeHours.AlwaysOpen(tz),\r\n                _portfolio.CashBook[CashBook.AccountCurrency],\r\n                new SubscriptionDataConfig(typeof(TradeBar), Symbols.BTCUSD, Resolution.Minute, tz, tz, true, false, false),\r\n                new SymbolProperties(''BTCUSD'', ''USD'', 1, 0.01m, 0.00000001m))", span="64-68"];
m2_14 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _ethusd = new Crypto(\r\n                SecurityExchangeHours.AlwaysOpen(tz),\r\n                _portfolio.CashBook[CashBook.AccountCurrency],\r\n                new SubscriptionDataConfig(typeof(TradeBar), Symbols.ETHUSD, Resolution.Minute, tz, tz, true, false, false),\r\n                new SymbolProperties(''ETHUSD'', ''USD'', 1, 0.01m, 0.00000001m))", span="70-74"];
m2_15 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _btceur = new Crypto(\r\n                SecurityExchangeHours.AlwaysOpen(tz),\r\n                _portfolio.CashBook[''EUR''],\r\n                new SubscriptionDataConfig(typeof(TradeBar), Symbols.BTCEUR, Resolution.Minute, tz, tz, true, false, false),\r\n                new SymbolProperties(''BTCEUR'', ''EUR'', 1, 0.01m, 0.00000001m))", span="76-80"];
m2_16 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _ethbtc = new Crypto(\r\n                SecurityExchangeHours.AlwaysOpen(tz),\r\n                _portfolio.CashBook[''BTC''],\r\n                new SubscriptionDataConfig(typeof(TradeBar), Symbols.ETHBTC, Resolution.Minute, tz, tz, true, false, false),\r\n                new SymbolProperties(''ETHBTC'', ''BTC'', 1, 0.00001m, 0.00000001m))", span="82-86"];
m2_17 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _buyingPowerModel = new CashBuyingPowerModel()", span="88-88"];
m2_18 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", span="46-46"];
m2_49 [cluster="QuantConnect.Securities.CashBuyingPowerModel.SetLeverage(QuantConnect.Securities.Security, decimal)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.SetLeverage(QuantConnect.Securities.Security, decimal)", span="45-45"];
m2_82 [cluster="QuantConnect.Securities.Cash.SetAmount(decimal)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.Cash.SetAmount(decimal)", span="127-127"];
m2_45 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SetLeverageDoesNotUpdateLeverage()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SetLeverageDoesNotUpdateLeverage()", span="105-105"];
m2_46 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SetLeverageDoesNotUpdateLeverage()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: _buyingPowerModel.SetLeverage(_btcusd, 50m)", span="108-108"];
m2_47 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SetLeverageDoesNotUpdateLeverage()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: Assert.AreEqual(1m, _buyingPowerModel.GetLeverage(_btcusd))", span="109-109"];
m2_48 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SetLeverageDoesNotUpdateLeverage()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SetLeverageDoesNotUpdateLeverage()", span="105-105"];
m2_23 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", span="50-50"];
m2_30 [cluster="QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", span="82-82"];
m2_43 [cluster="Unk.AreEqual", file="KrakenDataDownloader.cs", label="Entry Unk.AreEqual", span=""];
m2_28 [cluster="QuantConnect.Securities.SecurityTransactionManager.SetOrderProcessor(QuantConnect.Securities.IOrderProcessor)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.SetOrderProcessor(QuantConnect.Securities.IOrderProcessor)", span="335-335"];
m2_199 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", span="374-374"];
m2_200 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(20000)", span="376-376"];
m2_201 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", file="KrakenDataDownloader.cs", label="_btcusd.FeeModel = new ConstantFeeModel(50)", span="377-377"];
m2_202 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", file="KrakenDataDownloader.cs", label="var order = new LimitOrder(_btcusd.Symbol, 2m, 10000m, DateTime.UtcNow)", span="380-380"];
m2_203 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="381-381"];
m2_204 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", file="KrakenDataDownloader.cs", label="_portfolio.CashBook[''USD''].AddAmount(50)", span="384-384"];
m2_205 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="387-387"];
m2_206 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", span="374-374"];
m2_142 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="49-49"];
m2_42 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetLeverage(QuantConnect.Securities.Security)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.GetLeverage(QuantConnect.Securities.Security)", span="31-31"];
m2_207 [cluster="QuantConnect.Orders.Fees.ConstantFeeModel.ConstantFeeModel(decimal)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Orders.Fees.ConstantFeeModel.ConstantFeeModel(decimal)", span="31-31"];
m2_61 [cluster="QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="57-57"];
m2_29 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", span="37-37"];
m2_22 [cluster="QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler.BacktestingTransactionHandler()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler.BacktestingTransactionHandler()", span="25-25"];
m2_21 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", span="967-967"];
m2_132 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", span="245-245"];
m2_133 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(20000)", span="247-247"];
m2_134 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="_btcusd.SetMarketPrice(new Tick { Value = 10000m })", span="249-249"];
m2_135 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="var order = new MarketOrder(_btcusd.Symbol, 2m, DateTime.UtcNow)", span="252-252"];
m2_136 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="253-253"];
m2_137 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Assert.AreEqual(1.995m, _buyingPowerModel.GetMaximumOrderQuantityForTargetValue(_portfolio, _btcusd, 20000))", span="256-256"];
m2_138 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="_btcusd.SetMarketPrice(new Tick { Value = 9900m })", span="258-258"];
m2_139 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="order = new MarketOrder(_btcusd.Symbol, 2m, DateTime.UtcNow)", span="261-261"];
m2_140 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="262-262"];
m2_141 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", span="245-245"];
m2_101 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", span="444-444"];
m2_241 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="_brokerage.OrderStatusChanged += handler", span="450-450"];
m2_242 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="_algorithm.LimitOrder(symbol, quantity, limitPrice)", span="452-452"];
m2_244 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="_brokerage.OrderStatusChanged -= handler", span="456-456"];
m2_240 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="EventHandler<OrderEvent> handler = (s, e) => { resetEvent.Set(); }", span="448-448"];
m2_243 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="resetEvent.WaitOne()", span="454-454"];
m2_239 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="var resetEvent = new ManualResetEvent(false)", span="446-446"];
m2_245 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", span="444-444"];
m2_38 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.InitializesCorrectly()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.InitializesCorrectly()", span="98-98"];
m2_39 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.InitializesCorrectly()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: Assert.AreEqual(1m, _buyingPowerModel.GetLeverage(_btcusd))", span="100-100"];
m2_40 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.InitializesCorrectly()", color=green, community=0, file="KrakenDataDownloader.cs", label="-1: Assert.AreEqual(0m, _buyingPowerModel.GetReservedBuyingPowerForPosition(_btcusd))", span="101-101"];
m2_41 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.InitializesCorrectly()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.InitializesCorrectly()", span="98-98"];
m2_248 [cluster="System.Threading.WaitHandle.WaitOne()", file="KrakenDataDownloader.cs", label="Entry System.Threading.WaitHandle.WaitOne()", span="0-0"];
m2_59 [cluster="QuantConnect.Securities.SecurityPortfolioManager.SetCash(decimal)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.SecurityPortfolioManager.SetCash(decimal)", span="474-474"];
m2_144 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", span="266-266"];
m2_145 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(''EUR'', 20000m, 1.20m)", span="268-268"];
m2_146 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="_btceur.SetMarketPrice(new Tick { Value = 10000m })", span="270-270"];
m2_147 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="var order = new MarketOrder(_btceur.Symbol, 2m, DateTime.UtcNow)", span="273-273"];
m2_148 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btceur, order))", span="274-274"];
m2_149 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="var targetValue = 20000m * _portfolio.CashBook[''EUR''].ConversionRate", span="277-277"];
m2_150 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Assert.AreEqual(1.995m, _buyingPowerModel.GetMaximumOrderQuantityForTargetValue(_portfolio, _btceur, targetValue))", span="278-278"];
m2_151 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="_btceur.SetMarketPrice(new Tick { Value = 9900m })", span="280-280"];
m2_152 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="order = new MarketOrder(_btceur.Symbol, 2m, DateTime.UtcNow)", span="283-283"];
m2_153 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btceur, order))", span="284-284"];
m2_154 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", span="266-266"];
m2_32 [cluster="QuantConnect.Securities.SymbolProperties.SymbolProperties(string, string, decimal, decimal, decimal)", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Securities.SymbolProperties.SymbolProperties(string, string, decimal, decimal, decimal)", span="70-70"];
m2_165 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", span="308-308"];
m2_166 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(5000)", span="310-310"];
m2_167 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_btcusd = _algorithm.AddCrypto(''BTCUSD'')", span="312-312"];
m2_168 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_btcusd.SetMarketPrice(new Tick { Value = 15000m })", span="313-313"];
m2_169 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_ethusd = _algorithm.AddCrypto(''ETHUSD'')", span="315-315"];
m2_170 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_ethusd.SetMarketPrice(new Tick { Value = 1000m })", span="316-316"];
m2_171 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="_algorithm.SetFinishedWarmingUp()", span="317-317"];
m2_172 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="SubmitLimitOrder(_btcusd.Symbol, 0.1m, 15000m)", span="320-320"];
m2_173 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="SubmitLimitOrder(_ethusd.Symbol, 3m, 1000m)", span="323-323"];
m2_174 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.AreEqual(0.03325m, _buyingPowerModel.GetMaximumOrderQuantityForTargetValue(_portfolio, _btcusd, 500))", span="326-326"];
m2_175 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="var order = new MarketOrder(_btcusd.Symbol, 0.03m, DateTime.UtcNow)", span="329-329"];
m2_176 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="330-330"];
m2_177 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="order = new MarketOrder(_btcusd.Symbol, 0.04m, DateTime.UtcNow)", span="333-333"];
m2_178 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="334-334"];
m2_179 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", span="308-308"];
m2_74 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", span="149-149"];
m2_75 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", file="KrakenDataDownloader.cs", label="_portfolio.SetCash(0)", span="151-151"];
m2_76 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", file="KrakenDataDownloader.cs", label="_portfolio.CashBook[''BTC''].SetAmount(0.5m)", span="152-152"];
m2_77 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", file="KrakenDataDownloader.cs", label="var order = new LimitOrder(_btcusd.Symbol, -0.5m, 10000m, DateTime.UtcNow)", span="155-155"];
m2_78 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", file="KrakenDataDownloader.cs", label="Assert.IsTrue(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="156-156"];
m2_79 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", file="KrakenDataDownloader.cs", label="order = new LimitOrder(_btcusd.Symbol, -0.6m, 10000m, DateTime.UtcNow)", span="159-159"];
m2_80 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", file="KrakenDataDownloader.cs", label="Assert.IsFalse(_buyingPowerModel.HasSufficientBuyingPowerForOrder(_portfolio, _btcusd, order))", span="160-160"];
m2_81 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", file="KrakenDataDownloader.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", span="149-149"];
m2_98 [cluster="QuantConnect.Data.Market.Tick.Tick()", file="KrakenDataDownloader.cs", label="Entry QuantConnect.Data.Market.Tick.Tick()", span="98-98"];
m2_252 [cluster="System.Threading.EventWaitHandle.Set()", file="KrakenDataDownloader.cs", label="Entry System.Threading.EventWaitHandle.Set()", span="0-0"];
m2_264 [file="KrakenDataDownloader.cs", label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", span=""];
m2_265 [file="KrakenDataDownloader.cs", label=resetEvent, span=""];
m2_266 [file="KrakenDataDownloader.cs", label=resetEvent, span=""];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_15  [key=2, style=dotted];
m0_1 -> m0_3  [color=darkseagreen4, key=1, label=first, style=dashed];
m0_1 -> m0_7  [color=darkseagreen4, key=1, label=first, style=dashed];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_15  [key=2, style=dotted];
m0_2 -> m0_8  [color=darkseagreen4, key=1, label=second, style=dashed];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_16  [key=2, style=dotted];
m0_3 -> m0_9  [color=darkseagreen4, key=1, label=sequential, style=dashed];
m0_3 -> m0_10  [color=darkseagreen4, key=1, label=sequential, style=dashed];
m0_7 -> m0_8  [key=0, style=solid];
m0_8 -> m0_9  [key=0, style=solid];
m0_4 -> m0_5  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_17  [key=2, style=dotted];
m0_10 -> m0_18  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_6 -> m0_7  [key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_19  [key=2, style=dotted];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_19  [key=2, style=dotted];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_19  [key=2, style=dotted];
m0_14 -> m0_0  [color=blue, key=0, style=bold];
m0_26 -> m0_27  [key=0, style=solid];
m0_20 -> m0_21  [key=0, style=solid];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_11  [color=darkseagreen4, key=1, label=firstFired, style=dashed];
m0_22 -> m0_20  [color=blue, key=0, style=bold];
m0_23 -> m0_24  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_12  [color=darkseagreen4, key=1, label=secondFired, style=dashed];
m0_25 -> m0_23  [color=blue, key=0, style=bold];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_13  [color=darkseagreen4, key=1, label=sequentialFired, style=dashed];
m0_28 -> m0_26  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_4  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m1_0 -> m1_2  [color=darkorchid, key=3, label="method methodReturn decimal GetOrderFee", style=bold];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [color=red, key=0, style=solid];
m1_4 -> m1_5  [key=0, style=solid];
m1_2 -> m1_6  [key=0, style=solid];
m1_3 -> m1_4  [color=red, key=0, style=solid];
m1_3 -> m1_3  [color=red, key=3, label="Local variable decimal divisor", style=bold];
m1_5 -> m1_6  [key=0, style=solid];
m1_6 -> m1_0  [color=blue, key=0, style=bold];
m2_130 -> m2_256  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m2_130 -> m2_253  [key=0, style=solid];
m2_255 -> m2_256  [key=0, style=solid];
m2_256 -> m2_257  [key=0, style=solid];
m2_256 -> m2_260  [key=2, style=dotted];
m2_258 -> m2_259  [key=0, style=solid];
m2_254 -> m2_255  [key=0, style=solid];
m2_254 -> m2_258  [color=darkseagreen4, key=1, label=handler, style=dashed];
m2_257 -> m2_258  [key=0, style=solid];
m2_257 -> m2_248  [key=2, style=dotted];
m2_253 -> m2_254  [key=0, style=solid];
m2_253 -> m2_257  [color=darkseagreen4, key=1, label=resetEvent, style=dashed];
m2_253 -> m2_246  [key=2, style=dotted];
m2_253 -> m2_262  [color=darkseagreen4, key=1, label=resetEvent, style=dashed];
m2_259 -> m2_130  [color=blue, key=0, style=bold];
m2_155 -> m2_156  [key=0, style=solid];
m2_156 -> m2_59  [key=2, style=dotted];
m2_156 -> m2_157  [key=0, style=solid];
m2_157 -> m2_158  [key=0, style=solid];
m2_157 -> m2_98  [key=2, style=dotted];
m2_157 -> m2_99  [key=2, style=dotted];
m2_158 -> m2_159  [key=0, style=solid];
m2_158 -> m2_73  [key=2, style=dotted];
m2_159 -> m2_160  [key=0, style=solid];
m2_159 -> m2_142  [key=2, style=dotted];
m2_160 -> m2_161  [key=0, style=solid];
m2_160 -> m2_61  [key=2, style=dotted];
m2_160 -> m2_62  [key=2, style=dotted];
m2_161 -> m2_162  [key=0, style=solid];
m2_161 -> m2_142  [key=2, style=dotted];
m2_162 -> m2_163  [key=0, style=solid];
m2_162 -> m2_61  [key=2, style=dotted];
m2_162 -> m2_63  [key=2, style=dotted];
m2_163 -> m2_43  [key=2, style=dotted];
m2_163 -> m2_164  [key=0, style=solid];
m2_163 -> m2_143  [key=2, style=dotted];
m2_164 -> m2_155  [color=blue, key=0, style=bold];
m2_34 -> m2_35  [color=green, key=0, style=solid];
m2_35 -> m2_36  [color=green, key=0, style=solid];
m2_35 -> m2_37  [color=green, key=2, style=dotted];
m2_36 -> m2_34  [color=blue, key=0, style=bold];
m2_180 -> m2_181  [key=0, style=solid];
m2_181 -> m2_59  [key=2, style=dotted];
m2_181 -> m2_182  [key=0, style=solid];
m2_182 -> m2_183  [key=0, style=solid];
m2_182 -> m2_82  [key=2, style=dotted];
m2_183 -> m2_184  [key=0, style=solid];
m2_183 -> m2_82  [key=2, style=dotted];
m2_184 -> m2_185  [key=0, style=solid];
m2_184 -> m2_97  [key=2, style=dotted];
m2_185 -> m2_186  [key=0, style=solid];
m2_185 -> m2_98  [key=2, style=dotted];
m2_185 -> m2_99  [key=2, style=dotted];
m2_186 -> m2_187  [key=0, style=solid];
m2_186 -> m2_97  [key=2, style=dotted];
m2_187 -> m2_188  [key=0, style=solid];
m2_187 -> m2_98  [key=2, style=dotted];
m2_187 -> m2_99  [key=2, style=dotted];
m2_188 -> m2_189  [key=0, style=solid];
m2_188 -> m2_97  [key=2, style=dotted];
m2_189 -> m2_190  [key=0, style=solid];
m2_189 -> m2_98  [key=2, style=dotted];
m2_189 -> m2_99  [key=2, style=dotted];
m2_190 -> m2_191  [key=0, style=solid];
m2_190 -> m2_100  [key=2, style=dotted];
m2_191 -> m2_192  [key=0, style=solid];
m2_191 -> m2_101  [key=2, style=dotted];
m2_192 -> m2_193  [key=0, style=solid];
m2_192 -> m2_101  [key=2, style=dotted];
m2_193 -> m2_43  [key=2, style=dotted];
m2_193 -> m2_194  [key=0, style=solid];
m2_193 -> m2_143  [key=2, style=dotted];
m2_194 -> m2_195  [key=0, style=solid];
m2_194 -> m2_142  [key=2, style=dotted];
m2_195 -> m2_196  [key=0, style=solid];
m2_195 -> m2_61  [key=2, style=dotted];
m2_195 -> m2_62  [key=2, style=dotted];
m2_196 -> m2_197  [key=0, style=solid];
m2_196 -> m2_142  [key=2, style=dotted];
m2_197 -> m2_198  [key=0, style=solid];
m2_197 -> m2_61  [key=2, style=dotted];
m2_197 -> m2_63  [key=2, style=dotted];
m2_198 -> m2_180  [color=blue, key=0, style=bold];
m2_209 -> m2_210  [key=0, style=solid];
m2_210 -> m2_59  [key=2, style=dotted];
m2_210 -> m2_211  [key=0, style=solid];
m2_211 -> m2_212  [key=0, style=solid];
m2_211 -> m2_73  [key=2, style=dotted];
m2_212 -> m2_213  [key=0, style=solid];
m2_212 -> m2_97  [key=2, style=dotted];
m2_213 -> m2_214  [key=0, style=solid];
m2_213 -> m2_98  [key=2, style=dotted];
m2_213 -> m2_99  [key=2, style=dotted];
m2_214 -> m2_215  [key=0, style=solid];
m2_214 -> m2_97  [key=2, style=dotted];
m2_215 -> m2_216  [key=0, style=solid];
m2_215 -> m2_98  [key=2, style=dotted];
m2_215 -> m2_99  [key=2, style=dotted];
m2_216 -> m2_217  [key=0, style=solid];
m2_216 -> m2_97  [key=2, style=dotted];
m2_217 -> m2_218  [key=0, style=solid];
m2_217 -> m2_98  [key=2, style=dotted];
m2_217 -> m2_99  [key=2, style=dotted];
m2_218 -> m2_219  [key=0, style=solid];
m2_218 -> m2_97  [key=2, style=dotted];
m2_219 -> m2_220  [key=0, style=solid];
m2_219 -> m2_98  [key=2, style=dotted];
m2_219 -> m2_99  [key=2, style=dotted];
m2_220 -> m2_221  [key=0, style=solid];
m2_220 -> m2_100  [key=2, style=dotted];
m2_221 -> m2_43  [key=2, style=dotted];
m2_221 -> m2_222  [key=0, style=solid];
m2_221 -> m2_143  [key=2, style=dotted];
m2_222 -> m2_43  [key=2, style=dotted];
m2_222 -> m2_223  [key=0, style=solid];
m2_222 -> m2_143  [key=2, style=dotted];
m2_223 -> m2_43  [key=2, style=dotted];
m2_223 -> m2_224  [key=0, style=solid];
m2_223 -> m2_143  [key=2, style=dotted];
m2_224 -> m2_225  [key=0, style=solid];
m2_225 -> m2_43  [key=2, style=dotted];
m2_225 -> m2_226  [key=0, style=solid];
m2_225 -> m2_143  [key=2, style=dotted];
m2_226 -> m2_209  [color=blue, key=0, style=bold];
m2_83 -> m2_84  [key=0, style=solid];
m2_84 -> m2_59  [key=2, style=dotted];
m2_84 -> m2_85  [key=0, style=solid];
m2_85 -> m2_86  [key=0, style=solid];
m2_85 -> m2_97  [key=2, style=dotted];
m2_86 -> m2_87  [key=0, style=solid];
m2_86 -> m2_98  [key=2, style=dotted];
m2_86 -> m2_99  [key=2, style=dotted];
m2_87 -> m2_88  [key=0, style=solid];
m2_87 -> m2_97  [key=2, style=dotted];
m2_88 -> m2_89  [key=0, style=solid];
m2_88 -> m2_98  [key=2, style=dotted];
m2_88 -> m2_99  [key=2, style=dotted];
m2_89 -> m2_90  [key=0, style=solid];
m2_89 -> m2_100  [key=2, style=dotted];
m2_90 -> m2_91  [key=0, style=solid];
m2_90 -> m2_101  [key=2, style=dotted];
m2_91 -> m2_92  [key=0, style=solid];
m2_91 -> m2_101  [key=2, style=dotted];
m2_92 -> m2_60  [key=2, style=dotted];
m2_92 -> m2_93  [key=0, style=solid];
m2_93 -> m2_94  [key=0, style=solid];
m2_93 -> m2_61  [key=2, style=dotted];
m2_93 -> m2_62  [key=2, style=dotted];
m2_94 -> m2_60  [key=2, style=dotted];
m2_94 -> m2_95  [key=0, style=solid];
m2_95 -> m2_96  [key=0, style=solid];
m2_95 -> m2_61  [key=2, style=dotted];
m2_95 -> m2_63  [key=2, style=dotted];
m2_96 -> m2_83  [color=blue, key=0, style=bold];
m2_102 -> m2_103  [key=0, style=solid];
m2_103 -> m2_59  [key=2, style=dotted];
m2_103 -> m2_104  [key=0, style=solid];
m2_104 -> m2_105  [key=0, style=solid];
m2_104 -> m2_82  [key=2, style=dotted];
m2_105 -> m2_106  [key=0, style=solid];
m2_105 -> m2_82  [key=2, style=dotted];
m2_106 -> m2_107  [key=0, style=solid];
m2_106 -> m2_97  [key=2, style=dotted];
m2_107 -> m2_108  [key=0, style=solid];
m2_107 -> m2_98  [key=2, style=dotted];
m2_107 -> m2_99  [key=2, style=dotted];
m2_108 -> m2_109  [key=0, style=solid];
m2_108 -> m2_97  [key=2, style=dotted];
m2_109 -> m2_110  [key=0, style=solid];
m2_109 -> m2_98  [key=2, style=dotted];
m2_109 -> m2_99  [key=2, style=dotted];
m2_110 -> m2_111  [key=0, style=solid];
m2_110 -> m2_97  [key=2, style=dotted];
m2_111 -> m2_112  [key=0, style=solid];
m2_111 -> m2_98  [key=2, style=dotted];
m2_111 -> m2_99  [key=2, style=dotted];
m2_112 -> m2_113  [key=0, style=solid];
m2_112 -> m2_100  [key=2, style=dotted];
m2_113 -> m2_114  [key=0, style=solid];
m2_113 -> m2_101  [key=2, style=dotted];
m2_114 -> m2_115  [key=0, style=solid];
m2_114 -> m2_101  [key=2, style=dotted];
m2_115 -> m2_116  [key=0, style=solid];
m2_115 -> m2_101  [key=2, style=dotted];
m2_116 -> m2_117  [key=0, style=solid];
m2_116 -> m2_130  [key=2, style=dotted];
m2_117 -> m2_60  [key=2, style=dotted];
m2_117 -> m2_118  [key=0, style=solid];
m2_118 -> m2_119  [key=0, style=solid];
m2_118 -> m2_61  [key=2, style=dotted];
m2_118 -> m2_62  [key=2, style=dotted];
m2_119 -> m2_60  [key=2, style=dotted];
m2_119 -> m2_120  [key=0, style=solid];
m2_120 -> m2_121  [key=0, style=solid];
m2_120 -> m2_61  [key=2, style=dotted];
m2_120 -> m2_63  [key=2, style=dotted];
m2_121 -> m2_60  [key=2, style=dotted];
m2_121 -> m2_122  [key=0, style=solid];
m2_122 -> m2_123  [key=0, style=solid];
m2_122 -> m2_61  [key=2, style=dotted];
m2_122 -> m2_62  [key=2, style=dotted];
m2_123 -> m2_60  [key=2, style=dotted];
m2_123 -> m2_124  [key=0, style=solid];
m2_124 -> m2_125  [key=0, style=solid];
m2_124 -> m2_61  [key=2, style=dotted];
m2_124 -> m2_63  [key=2, style=dotted];
m2_125 -> m2_126  [key=0, style=solid];
m2_125 -> m2_131  [key=2, style=dotted];
m2_126 -> m2_127  [key=0, style=solid];
m2_126 -> m2_61  [key=2, style=dotted];
m2_126 -> m2_62  [key=2, style=dotted];
m2_127 -> m2_128  [key=0, style=solid];
m2_127 -> m2_131  [key=2, style=dotted];
m2_128 -> m2_129  [key=0, style=solid];
m2_128 -> m2_61  [key=2, style=dotted];
m2_128 -> m2_63  [key=2, style=dotted];
m2_129 -> m2_102  [color=blue, key=0, style=bold];
m2_261 -> m2_262  [key=0, style=solid];
m2_250 -> m2_251  [key=0, style=solid];
m2_250 -> m2_252  [key=2, style=dotted];
m2_262 -> m2_263  [key=0, style=solid];
m2_262 -> m2_252  [key=2, style=dotted];
m2_249 -> m2_250  [key=0, style=solid];
m2_251 -> m2_249  [color=blue, key=0, style=bold];
m2_263 -> m2_261  [color=blue, key=0, style=bold];
m2_227 -> m2_228  [key=0, style=solid];
m2_228 -> m2_59  [key=2, style=dotted];
m2_228 -> m2_229  [key=0, style=solid];
m2_229 -> m2_20  [key=2, style=dotted];
m2_229 -> m2_230  [key=0, style=solid];
m2_230 -> m2_231  [key=0, style=solid];
m2_230 -> m2_97  [key=2, style=dotted];
m2_231 -> m2_232  [key=0, style=solid];
m2_231 -> m2_98  [key=2, style=dotted];
m2_231 -> m2_99  [key=2, style=dotted];
m2_232 -> m2_233  [key=0, style=solid];
m2_232 -> m2_100  [key=2, style=dotted];
m2_233 -> m2_43  [key=2, style=dotted];
m2_233 -> m2_234  [key=0, style=solid];
m2_234 -> m2_235  [key=0, style=solid];
m2_234 -> m2_143  [key=2, style=dotted];
m2_234 -> m2_236  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m2_236 -> m2_237  [key=0, style=solid];
m2_236 -> m2_142  [key=2, style=dotted];
m2_237 -> m2_238  [key=0, style=solid];
m2_237 -> m2_61  [key=2, style=dotted];
m2_237 -> m2_62  [key=2, style=dotted];
m2_235 -> m2_43  [key=2, style=dotted];
m2_235 -> m2_236  [key=0, style=solid];
m2_238 -> m2_227  [color=blue, key=0, style=bold];
m2_50 -> m2_51  [color=green, key=0, style=solid];
m2_51 -> m2_52  [color=green, key=0, style=solid];
m2_51 -> m2_59  [color=green, key=2, style=dotted];
m2_52 -> m2_53  [color=green, key=0, style=solid];
m2_52 -> m2_60  [color=green, key=2, style=dotted];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_61  [key=2, style=dotted];
m2_53 -> m2_62  [key=2, style=dotted];
m2_54 -> m2_60  [key=2, style=dotted];
m2_54 -> m2_55  [key=0, style=solid];
m2_55 -> m2_56  [key=0, style=solid];
m2_55 -> m2_61  [key=2, style=dotted];
m2_55 -> m2_63  [key=2, style=dotted];
m2_56 -> m2_60  [key=2, style=dotted];
m2_56 -> m2_57  [key=0, style=solid];
m2_57 -> m2_58  [key=0, style=solid];
m2_57 -> m2_61  [key=2, style=dotted];
m2_57 -> m2_63  [key=2, style=dotted];
m2_58 -> m2_50  [color=blue, key=0, style=bold];
m2_64 -> m2_65  [key=0, style=solid];
m2_65 -> m2_66  [key=0, style=solid];
m2_65 -> m2_73  [key=2, style=dotted];
m2_66 -> m2_60  [key=2, style=dotted];
m2_66 -> m2_67  [key=0, style=solid];
m2_67 -> m2_68  [key=0, style=solid];
m2_67 -> m2_61  [key=2, style=dotted];
m2_67 -> m2_62  [key=2, style=dotted];
m2_68 -> m2_60  [key=2, style=dotted];
m2_68 -> m2_69  [key=0, style=solid];
m2_69 -> m2_70  [key=0, style=solid];
m2_69 -> m2_61  [key=2, style=dotted];
m2_69 -> m2_63  [key=2, style=dotted];
m2_70 -> m2_60  [key=2, style=dotted];
m2_70 -> m2_71  [key=0, style=solid];
m2_71 -> m2_72  [key=0, style=solid];
m2_71 -> m2_61  [key=2, style=dotted];
m2_71 -> m2_63  [key=2, style=dotted];
m2_72 -> m2_64  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [color=green, key=0, style=solid];
m2_1 -> m2_2  [color=green, key=0, style=solid];
m2_1 -> m2_19  [color=green, key=2, style=dotted];
m2_2 -> m2_3  [color=green, key=0, style=solid];
m2_3 -> m2_4  [color=green, key=0, style=solid];
m2_3 -> m2_20  [color=green, key=2, style=dotted];
m2_4 -> m2_5  [color=green, key=0, style=solid];
m2_4 -> m2_20  [color=green, key=2, style=dotted];
m2_5 -> m2_6  [color=green, key=0, style=solid];
m2_5 -> m2_20  [color=green, key=2, style=dotted];
m2_6 -> m2_7  [color=green, key=0, style=solid];
m2_6 -> m2_21  [color=green, key=2, style=dotted];
m2_7 -> m2_8  [color=green, key=0, style=solid];
m2_7 -> m2_22  [color=green, key=2, style=dotted];
m2_8 -> m2_9  [color=green, key=0, style=solid];
m2_8 -> m2_23  [color=green, key=2, style=dotted];
m2_9 -> m2_10  [color=green, key=0, style=solid];
m2_9 -> m2_24  [color=green, key=2, style=dotted];
m2_9 -> m2_25  [color=green, key=2, style=dotted];
m2_10 -> m2_11  [color=green, key=0, style=solid];
m2_10 -> m2_26  [color=green, key=2, style=dotted];
m2_10 -> m2_27  [color=green, key=2, style=dotted];
m2_11 -> m2_12  [color=green, key=0, style=solid];
m2_11 -> m2_28  [color=green, key=2, style=dotted];
m2_12 -> m2_13  [color=green, key=0, style=solid];
m2_12 -> m2_14  [color=green, key=1, label=tz, style=dashed];
m2_12 -> m2_15  [color=green, key=1, label=tz, style=dashed];
m2_12 -> m2_16  [color=green, key=1, label=tz, style=dashed];
m2_13 -> m2_14  [color=green, key=0, style=solid];
m2_13 -> m2_29  [color=green, key=2, style=dotted];
m2_13 -> m2_30  [color=green, key=2, style=dotted];
m2_13 -> m2_31  [color=green, key=2, style=dotted];
m2_13 -> m2_32  [color=green, key=2, style=dotted];
m2_14 -> m2_15  [color=green, key=0, style=solid];
m2_14 -> m2_29  [color=green, key=2, style=dotted];
m2_14 -> m2_30  [color=green, key=2, style=dotted];
m2_14 -> m2_31  [color=green, key=2, style=dotted];
m2_14 -> m2_32  [color=green, key=2, style=dotted];
m2_15 -> m2_16  [color=green, key=0, style=solid];
m2_15 -> m2_29  [color=green, key=2, style=dotted];
m2_15 -> m2_30  [color=green, key=2, style=dotted];
m2_15 -> m2_31  [color=green, key=2, style=dotted];
m2_15 -> m2_32  [color=green, key=2, style=dotted];
m2_16 -> m2_17  [color=green, key=0, style=solid];
m2_16 -> m2_29  [color=green, key=2, style=dotted];
m2_16 -> m2_30  [color=green, key=2, style=dotted];
m2_16 -> m2_31  [color=green, key=2, style=dotted];
m2_16 -> m2_32  [color=green, key=2, style=dotted];
m2_17 -> m2_18  [color=green, key=0, style=solid];
m2_17 -> m2_33  [color=green, key=2, style=dotted];
m2_18 -> m2_0  [color=blue, key=0, style=bold];
m2_45 -> m2_46  [color=green, key=0, style=solid];
m2_46 -> m2_47  [color=green, key=0, style=solid];
m2_46 -> m2_49  [color=green, key=2, style=dotted];
m2_47 -> m2_48  [color=green, key=0, style=solid];
m2_47 -> m2_42  [color=green, key=2, style=dotted];
m2_47 -> m2_43  [color=green, key=2, style=dotted];
m2_48 -> m2_45  [color=blue, key=0, style=bold];
m2_199 -> m2_200  [key=0, style=solid];
m2_200 -> m2_59  [key=2, style=dotted];
m2_200 -> m2_201  [key=0, style=solid];
m2_201 -> m2_202  [key=0, style=solid];
m2_201 -> m2_207  [key=2, style=dotted];
m2_202 -> m2_60  [key=2, style=dotted];
m2_202 -> m2_203  [key=0, style=solid];
m2_202 -> m2_205  [color=darkseagreen4, key=1, label=order, style=dashed];
m2_203 -> m2_204  [key=0, style=solid];
m2_203 -> m2_61  [key=2, style=dotted];
m2_203 -> m2_63  [key=2, style=dotted];
m2_204 -> m2_205  [key=0, style=solid];
m2_204 -> m2_208  [key=2, style=dotted];
m2_205 -> m2_206  [key=0, style=solid];
m2_205 -> m2_61  [key=2, style=dotted];
m2_205 -> m2_62  [key=2, style=dotted];
m2_206 -> m2_199  [color=blue, key=0, style=bold];
m2_132 -> m2_133  [key=0, style=solid];
m2_133 -> m2_59  [key=2, style=dotted];
m2_133 -> m2_134  [key=0, style=solid];
m2_134 -> m2_135  [key=0, style=solid];
m2_134 -> m2_98  [key=2, style=dotted];
m2_134 -> m2_99  [key=2, style=dotted];
m2_135 -> m2_136  [key=0, style=solid];
m2_135 -> m2_142  [key=2, style=dotted];
m2_136 -> m2_137  [key=0, style=solid];
m2_136 -> m2_61  [key=2, style=dotted];
m2_136 -> m2_63  [key=2, style=dotted];
m2_137 -> m2_43  [key=2, style=dotted];
m2_137 -> m2_138  [key=0, style=solid];
m2_137 -> m2_143  [key=2, style=dotted];
m2_138 -> m2_139  [key=0, style=solid];
m2_138 -> m2_98  [key=2, style=dotted];
m2_138 -> m2_99  [key=2, style=dotted];
m2_139 -> m2_140  [key=0, style=solid];
m2_139 -> m2_142  [key=2, style=dotted];
m2_140 -> m2_141  [key=0, style=solid];
m2_140 -> m2_61  [key=2, style=dotted];
m2_140 -> m2_62  [key=2, style=dotted];
m2_141 -> m2_132  [color=blue, key=0, style=bold];
m2_101 -> m2_242  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m2_101 -> m2_239  [key=0, style=solid];
m2_241 -> m2_242  [key=0, style=solid];
m2_242 -> m2_243  [key=0, style=solid];
m2_242 -> m2_247  [key=2, style=dotted];
m2_244 -> m2_245  [key=0, style=solid];
m2_240 -> m2_241  [key=0, style=solid];
m2_240 -> m2_244  [color=darkseagreen4, key=1, label=handler, style=dashed];
m2_243 -> m2_244  [key=0, style=solid];
m2_243 -> m2_248  [key=2, style=dotted];
m2_239 -> m2_240  [key=0, style=solid];
m2_239 -> m2_243  [color=darkseagreen4, key=1, label=resetEvent, style=dashed];
m2_239 -> m2_246  [key=2, style=dotted];
m2_239 -> m2_250  [color=darkseagreen4, key=1, label=resetEvent, style=dashed];
m2_245 -> m2_101  [color=blue, key=0, style=bold];
m2_38 -> m2_39  [color=green, key=0, style=solid];
m2_39 -> m2_40  [color=green, key=0, style=solid];
m2_39 -> m2_42  [color=green, key=2, style=dotted];
m2_39 -> m2_43  [color=green, key=2, style=dotted];
m2_40 -> m2_41  [color=green, key=0, style=solid];
m2_40 -> m2_44  [color=green, key=2, style=dotted];
m2_40 -> m2_43  [color=green, key=2, style=dotted];
m2_41 -> m2_38  [color=blue, key=0, style=bold];
m2_144 -> m2_145  [key=0, style=solid];
m2_145 -> m2_146  [key=0, style=solid];
m2_145 -> m2_73  [key=2, style=dotted];
m2_146 -> m2_147  [key=0, style=solid];
m2_146 -> m2_98  [key=2, style=dotted];
m2_146 -> m2_99  [key=2, style=dotted];
m2_147 -> m2_148  [key=0, style=solid];
m2_147 -> m2_142  [key=2, style=dotted];
m2_148 -> m2_149  [key=0, style=solid];
m2_148 -> m2_61  [key=2, style=dotted];
m2_148 -> m2_63  [key=2, style=dotted];
m2_149 -> m2_150  [key=0, style=solid];
m2_150 -> m2_43  [key=2, style=dotted];
m2_150 -> m2_151  [key=0, style=solid];
m2_150 -> m2_143  [key=2, style=dotted];
m2_151 -> m2_152  [key=0, style=solid];
m2_151 -> m2_98  [key=2, style=dotted];
m2_151 -> m2_99  [key=2, style=dotted];
m2_152 -> m2_153  [key=0, style=solid];
m2_152 -> m2_142  [key=2, style=dotted];
m2_153 -> m2_154  [key=0, style=solid];
m2_153 -> m2_61  [key=2, style=dotted];
m2_153 -> m2_62  [key=2, style=dotted];
m2_154 -> m2_144  [color=blue, key=0, style=bold];
m2_165 -> m2_166  [key=0, style=solid];
m2_166 -> m2_59  [key=2, style=dotted];
m2_166 -> m2_167  [key=0, style=solid];
m2_167 -> m2_168  [key=0, style=solid];
m2_167 -> m2_97  [key=2, style=dotted];
m2_168 -> m2_169  [key=0, style=solid];
m2_168 -> m2_98  [key=2, style=dotted];
m2_168 -> m2_99  [key=2, style=dotted];
m2_169 -> m2_170  [key=0, style=solid];
m2_169 -> m2_97  [key=2, style=dotted];
m2_170 -> m2_171  [key=0, style=solid];
m2_170 -> m2_98  [key=2, style=dotted];
m2_170 -> m2_99  [key=2, style=dotted];
m2_171 -> m2_172  [key=0, style=solid];
m2_171 -> m2_100  [key=2, style=dotted];
m2_172 -> m2_173  [key=0, style=solid];
m2_172 -> m2_101  [key=2, style=dotted];
m2_173 -> m2_174  [key=0, style=solid];
m2_173 -> m2_101  [key=2, style=dotted];
m2_174 -> m2_43  [key=2, style=dotted];
m2_174 -> m2_175  [key=0, style=solid];
m2_174 -> m2_143  [key=2, style=dotted];
m2_175 -> m2_176  [key=0, style=solid];
m2_175 -> m2_142  [key=2, style=dotted];
m2_176 -> m2_177  [key=0, style=solid];
m2_176 -> m2_61  [key=2, style=dotted];
m2_176 -> m2_62  [key=2, style=dotted];
m2_177 -> m2_178  [key=0, style=solid];
m2_177 -> m2_142  [key=2, style=dotted];
m2_178 -> m2_179  [key=0, style=solid];
m2_178 -> m2_61  [key=2, style=dotted];
m2_178 -> m2_63  [key=2, style=dotted];
m2_179 -> m2_165  [color=blue, key=0, style=bold];
m2_74 -> m2_75  [key=0, style=solid];
m2_75 -> m2_59  [key=2, style=dotted];
m2_75 -> m2_76  [key=0, style=solid];
m2_76 -> m2_77  [key=0, style=solid];
m2_76 -> m2_82  [key=2, style=dotted];
m2_77 -> m2_60  [key=2, style=dotted];
m2_77 -> m2_78  [key=0, style=solid];
m2_78 -> m2_79  [key=0, style=solid];
m2_78 -> m2_61  [key=2, style=dotted];
m2_78 -> m2_62  [key=2, style=dotted];
m2_79 -> m2_60  [key=2, style=dotted];
m2_79 -> m2_80  [key=0, style=solid];
m2_80 -> m2_81  [key=0, style=solid];
m2_80 -> m2_61  [key=2, style=dotted];
m2_80 -> m2_63  [key=2, style=dotted];
m2_81 -> m2_74  [color=blue, key=0, style=bold];
m2_264 -> m2_1  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_2  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_3  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_4  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_5  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_6  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_7  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_8  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_9  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_10  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_11  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_13  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_14  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_15  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_16  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_17  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_35  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_39  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_40  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_46  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_47  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_51  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_52  [color=green, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_53  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_54  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_55  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_56  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_57  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_65  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_66  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_67  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_68  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_69  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_70  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_71  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_75  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_76  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_77  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_78  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_79  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_80  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_84  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_85  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_86  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_87  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_88  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_89  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_90  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_91  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_92  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_93  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_94  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_95  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_103  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_104  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_105  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_106  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_107  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_108  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_109  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_110  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_111  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_112  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_113  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_114  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_115  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_116  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_117  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_118  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_119  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_120  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_121  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_122  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_123  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_124  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_125  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_126  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_127  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_128  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_133  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_134  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_135  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_136  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_137  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_138  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_139  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_140  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_145  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_146  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_147  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_148  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_149  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_150  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_151  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_152  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_153  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_156  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_157  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_158  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_159  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_160  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_161  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_162  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_163  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_166  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_167  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_168  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_169  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_170  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_171  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_172  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_173  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_174  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_175  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_176  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_177  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_178  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_181  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_182  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_183  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_184  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_185  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_186  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_187  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_188  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_189  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_190  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_191  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_192  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_193  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_194  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_195  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_196  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_197  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_200  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_201  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_202  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_203  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_204  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_205  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_210  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_211  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_212  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_213  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_214  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_215  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_216  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_217  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_218  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_219  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_220  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_221  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_222  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_223  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_224  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_225  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_228  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_229  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_230  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_231  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_232  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_233  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_234  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_236  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_237  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_241  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_242  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_244  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_255  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_256  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_264 -> m2_258  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", style=dashed];
m2_265 -> m2_250  [color=darkseagreen4, key=1, label=resetEvent, style=dashed];
m2_266 -> m2_262  [color=darkseagreen4, key=1, label=resetEvent, style=dashed];
}
