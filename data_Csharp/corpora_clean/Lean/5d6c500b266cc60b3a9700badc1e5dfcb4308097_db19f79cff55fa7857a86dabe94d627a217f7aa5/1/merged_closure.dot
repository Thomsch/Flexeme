digraph  {
n36 [label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm", span=""];
n37 [label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel", span=""];
n0 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()", label="Entry QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()", span="32-32"];
n1 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()", label="SetStartDate(2013, 10, 07)", span="34-34"];
n2 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()", label="SetEndDate(2013, 10, 11)", span="35-35"];
n7 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", span="538-538"];
n3 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()", label="SetCash(100000)", span="36-36"];
n8 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", span="563-563"];
n4 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()", label="AddSecurity(SecurityType.Equity, ''SPY'', Resolution.Second)", span="38-38"];
n9 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", span="487-487"];
n5 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()", label="BrokerageModel = new MinimumAccountBalanceBrokerageModel(this, 500.00m)", span="51-51"];
n10 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, bool, bool)", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, bool, bool)", span="718-718"];
n6 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()", label="Exit QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()", span="32-32"];
n11 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.MinimumAccountBalanceBrokerageModel(QuantConnect.Algorithm.QCAlgorithm, decimal)", label="Entry QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.MinimumAccountBalanceBrokerageModel(QuantConnect.Algorithm.QCAlgorithm, decimal)", span="87-87"];
n12 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", label="Entry QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", span="60-60"];
n13 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", label="!Portfolio.Invested", span="62-62"];
n14 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", label="SetHoldings(''SPY'', last)", span="65-65"];
n19 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", label="Exit QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", span="60-60"];
n15 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", label="Portfolio[''SPY''].Quantity == 0", span="66-66"];
n20 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", span="499-499"];
n18 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", label="Debug(Time + '' - Purchased Stock @ SetHoldings( '' + last + '' )'')", span="74-74"];
n17 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", label="last *= 0.95m", span="70-70"];
n21 [cluster="QuantConnect.Algorithm.QCAlgorithm.Debug(string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.Debug(string)", span="864-864"];
n22 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.MinimumAccountBalanceBrokerageModel(QuantConnect.Algorithm.QCAlgorithm, decimal)", label="_algorithm = algorithm", span="89-89"];
n23 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.MinimumAccountBalanceBrokerageModel(QuantConnect.Algorithm.QCAlgorithm, decimal)", label="_minimumAccountBalance = minimumAccountBalance", span="90-90"];
n24 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.MinimumAccountBalanceBrokerageModel(QuantConnect.Algorithm.QCAlgorithm, decimal)", label="Exit QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.MinimumAccountBalanceBrokerageModel(QuantConnect.Algorithm.QCAlgorithm, decimal)", span="87-87"];
n25 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", label="Entry QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", span="96-96"];
n26 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", label="message = null", span="98-98"];
n27 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", label="var orderCost = order.Value", span="102-102"];
n31 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", label="message = new BrokerageMessageEvent(BrokerageMessageType.Warning, ''InsufficientRemainingCapital'', \r\n                        ''Account must maintain a minimum of $500 USD at all times. Order ID: '' + order.Id\r\n                        )", span="108-110"];
n34 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", label="Exit QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", span="96-96"];
n28 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", label="var cash = _algorithm.Portfolio.Cash", span="103-103"];
n29 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", label="var cashAfterOrder = cash - orderCost", span="104-104"];
n30 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", label="cashAfterOrder < _minimumAccountBalance", span="105-105"];
n33 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", label="return true;", span="113-113"];
n32 [cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", label="return false;", span="111-111"];
n35 [cluster="QuantConnect.Brokerages.BrokerageMessageEvent.BrokerageMessageEvent(QuantConnect.Brokerages.BrokerageMessageType, string, string)", label="Entry QuantConnect.Brokerages.BrokerageMessageEvent.BrokerageMessageEvent(QuantConnect.Brokerages.BrokerageMessageType, string, string)", span="56-56"];
d56 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", color=green, community=0, label="var tradeBar = new TradeBar()\r\n                        {\r\n                            Time = Time.UnixTimeStampToDateTime(epochs),\r\n                            Symbol = symbol,\r\n                            Low = decimal.Parse(datapoint[1].ToString()),\r\n                            High = decimal.Parse(datapoint[2].ToString()),\r\n                            Open = decimal.Parse(datapoint[3].ToString()),\r\n                            Close = decimal.Parse(datapoint[4].ToString()),\r\n                            Volume = decimal.Parse(datapoint[5].ToString(), System.Globalization.NumberStyles.Float),\r\n                            Value = decimal.Parse(datapoint[4].ToString()),\r\n                            DataType = MarketDataType.TradeBar,\r\n                            Period = new TimeSpan(0, 0, (int)granularity),\r\n                            EndTime = Time.UnixTimeStampToDateTime(epochs).AddSeconds(granularity)\r\n                        }", prediction=0, span="129-142"];
d26 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", label="Entry QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", span="116-116"];
d54 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", label=parsedData, span="126-126"];
d55 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", label="var epochs = double.Parse(datapoint[0].ToString())", span="128-128"];
d57 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", label="i++", span="143-143"];
d66 [cluster="QuantConnect.Data.Market.TradeBar.TradeBar()", label="Entry QuantConnect.Data.Market.TradeBar.TradeBar()", span="120-120"];
d67 [cluster="QuantConnect.Time.UnixTimeStampToDateTime(double)", label="Entry QuantConnect.Time.UnixTimeStampToDateTime(double)", span="127-127"];
d64 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
d65 [cluster="Unk.Parse", label="Entry Unk.Parse", span=""];
d68 [cluster="System.TimeSpan.TimeSpan(int, int, int)", label="Entry System.TimeSpan.TimeSpan(int, int, int)", span="0-0"];
d19 [cluster="System.DateTime.AddSeconds(double)", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
d58 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", label="returnData.Add(tradeBar)", span="144-144"];
d13 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="returnData.AddRange(ParseCandleData(symbol, granularity, data))", span="66-66"];
d62 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", label="Exit QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", span="116-116"];
d50 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", label="int i = 0", span="118-118"];
d52 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", label="data.Length > 0", span="122-122"];
d53 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", label="var parsedData = JsonConvert.DeserializeObject<string[][]>(data)", span="124-124"];
d0 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="Entry QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", span="45-45"];
d2 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="var granularity = resolution.ToTimeSpan().TotalSeconds", span="48-48"];
d12 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="string data = GetWithRetry(request)", span="65-65"];
d61 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", label="return null;", span="151-151"];
d59 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", label="return returnData.OrderBy(datapoint => datapoint.Time).ToList();", span="147-147"];
d6 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="windowEndTime = windowStartTime.AddSeconds(MaxDatapointsPerRequest * granularity)", span="56-56"];
d51 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", label="List<BaseData> returnData = new List<BaseData>()", span="121-121"];
d69 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
d75 [label="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader", span=""];
d1 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="var returnData = new List<BaseData>()", span="47-47"];
d14 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="windowStartTime != windowEndTime", span="68-68"];
d27 [cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0"];
d29 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="int retryCount = 0", span="81-81"];
d63 [cluster="Unk.>", label="Entry Unk.>", span=""];
d3 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="DateTime windowStartTime = startUtc", span="50-50"];
d4 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="DateTime windowEndTime = startUtc", span="51-51"];
d16 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="Exit QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", span="45-45"];
d7 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="windowEndTime = windowEndTime > endUtc ? endUtc : windowEndTime", span="57-57"];
d9 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="var requestURL = string.Format(HistoricCandlesUrl, symbol.Value, windowStartTime.ToString(), windowEndTime.ToString(), granularity)", span="61-61"];
d18 [cluster="QuantConnect.Resolution.ToTimeSpan()", label="Entry QuantConnect.Resolution.ToTimeSpan()", span="722-722"];
d10 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="var request = (HttpWebRequest)WebRequest.Create(requestURL)", span="62-62"];
d11 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="request.UserAgent = ''.NET Framework Test Client''", span="63-63"];
d25 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="Entry QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", span="78-78"];
d60 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", label=Exception, span="149-149"];
d70 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
d71 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
d72 [cluster="lambda expression", label="Entry lambda expression", span="147-147"];
d5 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="windowStartTime = windowEndTime", span="55-55"];
d17 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
d15 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="return returnData;", span="70-70"];
d28 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="string data = string.Empty", span="80-80"];
d30 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="data == string.Empty", span="82-82"];
d37 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="++retryCount", span="97-97"];
d8 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", label="Log.Trace(String.Format(''Getting data for timeperiod from {0} to {1}..'', windowStartTime, windowEndTime))", span="59-59"];
d22 [cluster="System.DateTime.ToString()", label="Entry System.DateTime.ToString()", span="0-0"];
d23 [cluster="string.Format(string, params object[])", label="Entry string.Format(string, params object[])", span="0-0"];
d24 [cluster="System.Net.WebRequest.Create(string)", label="Entry System.Net.WebRequest.Create(string)", span="0-0"];
d43 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="Exit QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", span="78-78"];
d32 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="var response = (HttpWebResponse)request.GetResponse()", span="87-87"];
d39 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="Log.Error(''REQUEST FAILED: '' + request.Address)", span="100-100"];
d74 [cluster="lambda expression", label="Exit lambda expression", span="147-147"];
d73 [cluster="lambda expression", label="datapoint.Time", span="147-147"];
d42 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="return data;", span="106-106"];
d35 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="data = reader.ReadToEnd()", span="92-92"];
d41 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="Log.Trace(''WARNING: Web request failed with message '' + ex.Message + ''Retrying... '' + retryCount + '' times'')", span="103-103"];
d31 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="Thread.Sleep(1000 / MaxRequestsPerSecond + 1)", span="86-86"];
d36 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label=WebException, span="95-95"];
d38 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="retryCount > 3", span="98-98"];
d20 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
d21 [cluster="QuantConnect.Logging.Log.Trace(string, bool)", label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106"];
d40 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="throw;", span="101-101"];
d33 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="var encoding = Encoding.ASCII", span="88-88"];
d45 [cluster="System.Net.HttpWebRequest.GetResponse()", label="Entry System.Net.HttpWebRequest.GetResponse()", span="0-0"];
d34 [cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", label="var reader = new StreamReader(response.GetResponseStream(), encoding)", span="90-90"];
d49 [cluster="QuantConnect.Logging.Log.Error(string, bool)", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="65-65"];
d48 [cluster="System.IO.StreamReader.ReadToEnd()", label="Entry System.IO.StreamReader.ReadToEnd()", span="0-0"];
d44 [cluster="System.Threading.Thread.Sleep(int)", label="Entry System.Threading.Thread.Sleep(int)", span="0-0"];
d46 [cluster="System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding)", label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding)", span="0-0"];
d47 [cluster="System.Net.HttpWebResponse.GetResponseStream()", label="Entry System.Net.HttpWebResponse.GetResponseStream()", span="0-0"];
n36 -> n1  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm", style=dashed];
n36 -> n2  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm", style=dashed];
n36 -> n3  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm", style=dashed];
n36 -> n4  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm", style=dashed];
n36 -> n13  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm", style=dashed];
n36 -> n14  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm", style=dashed];
n36 -> n15  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm", style=dashed];
n36 -> n18  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm", style=dashed];
n37 -> n30  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel", style=dashed];
n26 -> n34  [color=darkseagreen4, key=1, label="out QuantConnect.Brokerages.BrokerageMessageEvent", style=dashed];
n31 -> n34  [color=darkseagreen4, key=1, label="out QuantConnect.Brokerages.BrokerageMessageEvent", style=dashed];
d56 -> d58  [color=green, key=1, label=tradeBar, style=dashed];
d26 -> d52  [color=darkseagreen4, key=1, label=string, style=dashed];
d57 -> d57  [color=darkseagreen4, key=1, label=i, style=dashed];
d50 -> d57  [color=darkseagreen4, key=1, label=i, style=dashed];
d0 -> d13  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
d2 -> d13  [color=darkseagreen4, key=1, label=granularity, style=dashed];
d59 -> d72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d51 -> d58  [color=darkseagreen4, key=1, label=returnData, style=dashed];
d51 -> d59  [color=darkseagreen4, key=1, label=returnData, style=dashed];
d75 -> d13  [color=darkseagreen4, key=1, label="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader", style=dashed];
d1 -> d13  [color=darkseagreen4, key=1, label=returnData, style=dashed];
d1 -> d15  [color=darkseagreen4, key=1, label=returnData, style=dashed];
d29 -> d37  [color=darkseagreen4, key=1, label=retryCount, style=dashed];
d7 -> d14  [color=darkseagreen4, key=1, label=windowEndTime, style=dashed];
d25 -> d39  [color=darkseagreen4, key=1, label="System.Net.HttpWebRequest", style=dashed];
d5 -> d14  [color=darkseagreen4, key=1, label=windowStartTime, style=dashed];
d5 -> d8  [color=darkseagreen4, key=1, label=windowStartTime, style=dashed];
d28 -> d30  [color=darkseagreen4, key=1, label=data, style=dashed];
d28 -> d42  [color=darkseagreen4, key=1, label=data, style=dashed];
d37 -> d37  [color=darkseagreen4, key=1, label=retryCount, style=dashed];
d37 -> d41  [color=darkseagreen4, key=1, label=retryCount, style=dashed];
d35 -> d42  [color=darkseagreen4, key=1, label=data, style=dashed];
}
