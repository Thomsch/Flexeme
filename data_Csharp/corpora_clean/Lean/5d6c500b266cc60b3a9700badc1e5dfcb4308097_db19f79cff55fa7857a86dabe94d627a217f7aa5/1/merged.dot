digraph  {
n36 [label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm", span=""];
n37 [label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel", span=""];
n0 [label="Entry QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()", span="32-32", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()"];
n1 [label="SetStartDate(2013, 10, 07)", span="34-34", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()"];
n2 [label="SetEndDate(2013, 10, 11)", span="35-35", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()"];
n7 [label="Entry QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", span="538-538", cluster="QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)"];
n3 [label="SetCash(100000)", span="36-36", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()"];
n8 [label="Entry QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", span="563-563", cluster="QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)"];
n4 [label="AddSecurity(SecurityType.Equity, ''SPY'', Resolution.Second)", span="38-38", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()"];
n9 [label="Entry QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", span="487-487", cluster="QuantConnect.Algorithm.QCAlgorithm.SetCash(int)"];
n5 [label="BrokerageModel = new MinimumAccountBalanceBrokerageModel(this, 500.00m)", span="51-51", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()"];
n10 [label="Entry QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, bool, bool)", span="718-718", cluster="QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, bool, bool)"];
n6 [label="Exit QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()", span="32-32", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.Initialize()"];
n11 [label="Entry QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.MinimumAccountBalanceBrokerageModel(QuantConnect.Algorithm.QCAlgorithm, decimal)", span="87-87", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.MinimumAccountBalanceBrokerageModel(QuantConnect.Algorithm.QCAlgorithm, decimal)"];
n12 [label="Entry QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", span="60-60", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)"];
n13 [label="!Portfolio.Invested", span="62-62", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)"];
n14 [label="SetHoldings(''SPY'', last)", span="65-65", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)"];
n19 [label="Exit QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", span="60-60", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)"];
n15 [label="Portfolio[''SPY''].Quantity == 0", span="66-66", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)"];
n20 [label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", span="499-499", cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)"];
n16 [label="Debug(Time + '' - Failed to purchase stock'')", span="69-69", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", color=red, community=0];
n18 [label="Debug(Time + '' - Purchased Stock @ SetHoldings( '' + last + '' )'')", span="74-74", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)"];
n17 [label="last *= 0.95m", span="70-70", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)"];
n21 [label="Entry QuantConnect.Algorithm.QCAlgorithm.Debug(string)", span="864-864", cluster="QuantConnect.Algorithm.QCAlgorithm.Debug(string)"];
n22 [label="_algorithm = algorithm", span="89-89", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.MinimumAccountBalanceBrokerageModel(QuantConnect.Algorithm.QCAlgorithm, decimal)"];
n23 [label="_minimumAccountBalance = minimumAccountBalance", span="90-90", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.MinimumAccountBalanceBrokerageModel(QuantConnect.Algorithm.QCAlgorithm, decimal)"];
n24 [label="Exit QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.MinimumAccountBalanceBrokerageModel(QuantConnect.Algorithm.QCAlgorithm, decimal)", span="87-87", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.MinimumAccountBalanceBrokerageModel(QuantConnect.Algorithm.QCAlgorithm, decimal)"];
n25 [label="Entry QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", span="96-96", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)"];
n26 [label="message = null", span="98-98", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)"];
n27 [label="var orderCost = order.Value", span="102-102", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)"];
n31 [label="message = new BrokerageMessageEvent(BrokerageMessageType.Warning, ''InsufficientRemainingCapital'', \r\n                        ''Account must maintain a minimum of $500 USD at all times. Order ID: '' + order.Id\r\n                        )", span="108-110", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)"];
n34 [label="Exit QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", span="96-96", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)"];
n28 [label="var cash = _algorithm.Portfolio.Cash", span="103-103", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)"];
n29 [label="var cashAfterOrder = cash - orderCost", span="104-104", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)"];
n30 [label="cashAfterOrder < _minimumAccountBalance", span="105-105", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)"];
n33 [label="return true;", span="113-113", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)"];
n32 [label="return false;", span="111-111", cluster="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)"];
n35 [label="Entry QuantConnect.Brokerages.BrokerageMessageEvent.BrokerageMessageEvent(QuantConnect.Brokerages.BrokerageMessageType, string, string)", span="56-56", cluster="QuantConnect.Brokerages.BrokerageMessageEvent.BrokerageMessageEvent(QuantConnect.Brokerages.BrokerageMessageType, string, string)"];
d56 [label="var tradeBar = new TradeBar()\r\n                        {\r\n                            Time = Time.UnixTimeStampToDateTime(epochs),\r\n                            Symbol = symbol,\r\n                            Low = decimal.Parse(datapoint[1].ToString()),\r\n                            High = decimal.Parse(datapoint[2].ToString()),\r\n                            Open = decimal.Parse(datapoint[3].ToString()),\r\n                            Close = decimal.Parse(datapoint[4].ToString()),\r\n                            Volume = decimal.Parse(datapoint[5].ToString(), System.Globalization.NumberStyles.Float),\r\n                            Value = decimal.Parse(datapoint[4].ToString()),\r\n                            DataType = MarketDataType.TradeBar,\r\n                            Period = new TimeSpan(0, 0, (int)granularity),\r\n                            EndTime = Time.UnixTimeStampToDateTime(epochs).AddSeconds(granularity)\r\n                        }", span="129-142", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", color=green, community=0];
d26 [label="Entry QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", span="116-116", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)"];
d54 [label=parsedData, span="126-126", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)"];
d55 [label="var epochs = double.Parse(datapoint[0].ToString())", span="128-128", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)"];
d57 [label="i++", span="143-143", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)"];
d66 [label="Entry QuantConnect.Data.Market.TradeBar.TradeBar()", span="120-120", cluster="QuantConnect.Data.Market.TradeBar.TradeBar()"];
d67 [label="Entry QuantConnect.Time.UnixTimeStampToDateTime(double)", span="127-127", cluster="QuantConnect.Time.UnixTimeStampToDateTime(double)"];
d64 [label="Entry Unk.ToString", span="", cluster="Unk.ToString"];
d65 [label="Entry Unk.Parse", span="", cluster="Unk.Parse"];
d68 [label="Entry System.TimeSpan.TimeSpan(int, int, int)", span="0-0", cluster="System.TimeSpan.TimeSpan(int, int, int)"];
d19 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)"];
d58 [label="returnData.Add(tradeBar)", span="144-144", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)"];
d13 [label="returnData.AddRange(ParseCandleData(symbol, granularity, data))", span="66-66", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d62 [label="Exit QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)", span="116-116", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)"];
d50 [label="int i = 0", span="118-118", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)"];
d52 [label="data.Length > 0", span="122-122", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)"];
d53 [label="var parsedData = JsonConvert.DeserializeObject<string[][]>(data)", span="124-124", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)"];
d0 [label="Entry QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", span="45-45", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d2 [label="var granularity = resolution.ToTimeSpan().TotalSeconds", span="48-48", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d12 [label="string data = GetWithRetry(request)", span="65-65", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d61 [label="return null;", span="151-151", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)"];
d59 [label="return returnData.OrderBy(datapoint => datapoint.Time).ToList();", span="147-147", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)"];
d6 [label="windowEndTime = windowStartTime.AddSeconds(MaxDatapointsPerRequest * granularity)", span="56-56", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d51 [label="List<BaseData> returnData = new List<BaseData>()", span="121-121", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)"];
d69 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
d75 [label="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader", span=""];
d1 [label="var returnData = new List<BaseData>()", span="47-47", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d14 [label="windowStartTime != windowEndTime", span="68-68", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d27 [label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0", cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)"];
d29 [label="int retryCount = 0", span="81-81", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d63 [label="Entry Unk.>", span="", cluster="Unk.>"];
d3 [label="DateTime windowStartTime = startUtc", span="50-50", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d4 [label="DateTime windowEndTime = startUtc", span="51-51", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d16 [label="Exit QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", span="45-45", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d7 [label="windowEndTime = windowEndTime > endUtc ? endUtc : windowEndTime", span="57-57", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d9 [label="var requestURL = string.Format(HistoricCandlesUrl, symbol.Value, windowStartTime.ToString(), windowEndTime.ToString(), granularity)", span="61-61", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d18 [label="Entry QuantConnect.Resolution.ToTimeSpan()", span="722-722", cluster="QuantConnect.Resolution.ToTimeSpan()"];
d10 [label="var request = (HttpWebRequest)WebRequest.Create(requestURL)", span="62-62", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d11 [label="request.UserAgent = ''.NET Framework Test Client''", span="63-63", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d25 [label="Entry QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", span="78-78", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d60 [label=Exception, span="149-149", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.ParseCandleData(QuantConnect.Symbol, double, string)"];
d70 [label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)"];
d71 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()"];
d72 [label="Entry lambda expression", span="147-147", cluster="lambda expression"];
d5 [label="windowStartTime = windowEndTime", span="55-55", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d17 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
d15 [label="return returnData;", span="70-70", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d28 [label="string data = string.Empty", span="80-80", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d30 [label="data == string.Empty", span="82-82", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d37 [label="++retryCount", span="97-97", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d8 [label="Log.Trace(String.Format(''Getting data for timeperiod from {0} to {1}..'', windowStartTime, windowEndTime))", span="59-59", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)"];
d22 [label="Entry System.DateTime.ToString()", span="0-0", cluster="System.DateTime.ToString()"];
d23 [label="Entry string.Format(string, params object[])", span="0-0", cluster="string.Format(string, params object[])"];
d24 [label="Entry System.Net.WebRequest.Create(string)", span="0-0", cluster="System.Net.WebRequest.Create(string)"];
d43 [label="Exit QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)", span="78-78", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d32 [label="var response = (HttpWebResponse)request.GetResponse()", span="87-87", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d39 [label="Log.Error(''REQUEST FAILED: '' + request.Address)", span="100-100", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d74 [label="Exit lambda expression", span="147-147", cluster="lambda expression"];
d73 [label="datapoint.Time", span="147-147", cluster="lambda expression"];
d42 [label="return data;", span="106-106", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d35 [label="data = reader.ReadToEnd()", span="92-92", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d41 [label="Log.Trace(''WARNING: Web request failed with message '' + ex.Message + ''Retrying... '' + retryCount + '' times'')", span="103-103", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d31 [label="Thread.Sleep(1000 / MaxRequestsPerSecond + 1)", span="86-86", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d36 [label=WebException, span="95-95", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d38 [label="retryCount > 3", span="98-98", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d20 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)"];
d21 [label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106", cluster="QuantConnect.Logging.Log.Trace(string, bool)"];
d40 [label="throw;", span="101-101", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d33 [label="var encoding = Encoding.ASCII", span="88-88", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d45 [label="Entry System.Net.HttpWebRequest.GetResponse()", span="0-0", cluster="System.Net.HttpWebRequest.GetResponse()"];
d34 [label="var reader = new StreamReader(response.GetResponseStream(), encoding)", span="90-90", cluster="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader.GetWithRetry(System.Net.HttpWebRequest)"];
d49 [label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="65-65", cluster="QuantConnect.Logging.Log.Error(string, bool)"];
d48 [label="Entry System.IO.StreamReader.ReadToEnd()", span="0-0", cluster="System.IO.StreamReader.ReadToEnd()"];
d44 [label="Entry System.Threading.Thread.Sleep(int)", span="0-0", cluster="System.Threading.Thread.Sleep(int)"];
d46 [label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding)", span="0-0", cluster="System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding)"];
d47 [label="Entry System.Net.HttpWebResponse.GetResponseStream()", span="0-0", cluster="System.Net.HttpWebResponse.GetResponseStream()"];
n36 -> n1  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm"];
n36 -> n2  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm"];
n36 -> n3  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm"];
n36 -> n4  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm"];
n36 -> n5  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm"];
n36 -> n13  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm"];
n36 -> n14  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm"];
n36 -> n15  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm"];
n36 -> n16  [key=1, style=dashed, color=red, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm"];
n36 -> n17  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm"];
n36 -> n18  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm"];
n37 -> n22  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel"];
n37 -> n23  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel"];
n37 -> n28  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel"];
n37 -> n30  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Algorithm.Examples.BrokerageModelAlgorithm.MinimumAccountBalanceBrokerageModel"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n7  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n8  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n3 -> n9  [key=2, style=dotted];
n4 -> n5  [key=0, style=solid];
n4 -> n10  [key=2, style=dotted];
n5 -> n6  [key=0, style=solid];
n5 -> n11  [key=2, style=dotted];
n6 -> n0  [key=0, style=bold, color=blue];
n11 -> n22  [key=0, style=solid];
n11 -> n23  [key=1, style=dashed, color=darkseagreen4, label=decimal];
n12 -> n13  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n13 -> n19  [key=0, style=solid];
n14 -> n15  [key=0, style=solid];
n14 -> n20  [key=2, style=dotted];
n19 -> n12  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid, color=red];
n15 -> n18  [key=0, style=solid];
n16 -> n17  [key=0, style=solid, color=red];
n16 -> n21  [key=2, style=dotted, color=red];
n18 -> n19  [key=0, style=solid];
n18 -> n21  [key=2, style=dotted];
n17 -> n19  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n24 -> n11  [key=0, style=bold, color=blue];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Orders.Order"];
n25 -> n31  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Orders.Order"];
n26 -> n27  [key=0, style=solid];
n26 -> n34  [key=1, style=dashed, color=darkseagreen4, label="out QuantConnect.Brokerages.BrokerageMessageEvent"];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=1, style=dashed, color=darkseagreen4, label=orderCost];
n31 -> n32  [key=0, style=solid];
n31 -> n35  [key=2, style=dotted];
n31 -> n34  [key=1, style=dashed, color=darkseagreen4, label="out QuantConnect.Brokerages.BrokerageMessageEvent"];
n34 -> n25  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid];
n29 -> n30  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n33  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n32 -> n34  [key=0, style=solid];
d56 -> d57  [key=0, style=solid, color=green];
d56 -> d66  [key=2, style=dotted, color=green];
d56 -> d67  [key=2, style=dotted, color=green];
d56 -> d64  [key=2, style=dotted, color=green];
d56 -> d65  [key=2, style=dotted, color=green];
d56 -> d68  [key=2, style=dotted, color=green];
d56 -> d19  [key=2, style=dotted, color=green];
d56 -> d58  [key=1, style=dashed, color=green, label=tradeBar];
d26 -> d56  [key=1, style=dashed, color=green, label="QuantConnect.Symbol"];
d26 -> d50  [key=0, style=solid];
d26 -> d52  [key=1, style=dashed, color=darkseagreen4, label=string];
d26 -> d53  [key=1, style=dashed, color=darkseagreen4, label=string];
d26 -> d0  [key=3, color=darkorchid, style=bold, label="Parameter variable QuantConnect.Symbol symbol"];
d26 -> d2  [key=3, color=darkorchid, style=bold, label="Parameter variable double granularity"];
d26 -> d12  [key=3, color=darkorchid, style=bold, label="Parameter variable string data"];
d26 -> d61  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.List<QuantConnect.Data.BaseData> ParseCandleData"];
d54 -> d56  [key=1, style=dashed, color=green, label=datapoint];
d54 -> d55  [key=0, style=solid];
d54 -> d59  [key=0, style=solid];
d55 -> d56  [key=0, style=solid, color=green];
d55 -> d64  [key=2, style=dotted];
d55 -> d65  [key=2, style=dotted];
d57 -> d57  [key=1, style=dashed, color=darkseagreen4, label=i];
d57 -> d58  [key=0, style=solid];
d58 -> d54  [key=0, style=solid];
d58 -> d69  [key=2, style=dotted];
d13 -> d26  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d13 -> d27  [key=2, style=dotted];
d62 -> d26  [key=0, style=bold, color=blue];
d50 -> d57  [key=1, style=dashed, color=darkseagreen4, label=i];
d50 -> d51  [key=0, style=solid];
d50 -> d29  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
d52 -> d53  [key=0, style=solid];
d52 -> d59  [key=0, style=solid];
d53 -> d54  [key=0, style=solid];
d53 -> d63  [key=2, style=dotted];
d0 -> d13  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Symbol"];
d0 -> d1  [key=0, style=solid];
d0 -> d2  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Resolution"];
d0 -> d3  [key=1, style=dashed, color=darkseagreen4, label="System.DateTime"];
d0 -> d4  [key=1, style=dashed, color=darkseagreen4, label="System.DateTime"];
d0 -> d7  [key=1, style=dashed, color=darkseagreen4, label="System.DateTime"];
d0 -> d9  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Symbol"];
d2 -> d13  [key=1, style=dashed, color=darkseagreen4, label=granularity];
d2 -> d3  [key=0, style=solid];
d2 -> d18  [key=2, style=dotted];
d2 -> d6  [key=1, style=dashed, color=darkseagreen4, label=granularity];
d2 -> d9  [key=1, style=dashed, color=darkseagreen4, label=granularity];
d12 -> d13  [key=0, style=solid];
d12 -> d25  [key=2, style=dotted];
d61 -> d62  [key=0, style=solid];
d59 -> d62  [key=0, style=solid];
d59 -> d70  [key=2, style=dotted];
d59 -> d71  [key=2, style=dotted];
d59 -> d72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d6 -> d19  [key=2, style=dotted];
d6 -> d7  [key=0, style=solid];
d51 -> d58  [key=1, style=dashed, color=darkseagreen4, label=returnData];
d51 -> d52  [key=0, style=solid];
d51 -> d59  [key=1, style=dashed, color=darkseagreen4, label=returnData];
d51 -> d17  [key=2, style=dotted];
d75 -> d13  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader"];
d75 -> d12  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.ToolBox.GDAXDownloader.GDAXDownloader"];
d1 -> d13  [key=1, style=dashed, color=darkseagreen4, label=returnData];
d1 -> d2  [key=0, style=solid];
d1 -> d17  [key=2, style=dotted];
d1 -> d15  [key=1, style=dashed, color=darkseagreen4, label=returnData];
d14 -> d4  [key=0, style=solid];
d14 -> d15  [key=0, style=solid];
d29 -> d29  [key=3, color=darkorchid, style=bold, label="Local variable int retryCount"];
d29 -> d30  [key=0, style=solid];
d29 -> d37  [key=1, style=dashed, color=darkseagreen4, label=retryCount];
d3 -> d0  [key=3, color=darkorchid, style=bold, label="Local variable System.DateTime windowStartTime"];
d3 -> d4  [key=0, style=solid];
d4 -> d0  [key=3, color=darkorchid, style=bold, label="Local variable System.DateTime windowEndTime"];
d4 -> d5  [key=0, style=solid];
d16 -> d0  [key=0, style=bold, color=blue];
d7 -> d14  [key=1, style=dashed, color=darkseagreen4, label=windowEndTime];
d7 -> d7  [key=1, style=dashed, color=darkseagreen4, label=windowEndTime];
d7 -> d8  [key=0, style=solid];
d7 -> d9  [key=1, style=dashed, color=darkseagreen4, label=windowEndTime];
d9 -> d10  [key=0, style=solid];
d9 -> d22  [key=2, style=dotted];
d9 -> d23  [key=2, style=dotted];
d10 -> d12  [key=1, style=dashed, color=darkseagreen4, label=request];
d10 -> d11  [key=0, style=solid];
d10 -> d24  [key=2, style=dotted];
d11 -> d12  [key=0, style=solid];
d25 -> d10  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Net.HttpWebRequest request"];
d25 -> d28  [key=0, style=solid];
d25 -> d32  [key=1, style=dashed, color=darkseagreen4, label="System.Net.HttpWebRequest"];
d25 -> d39  [key=1, style=dashed, color=darkseagreen4, label="System.Net.HttpWebRequest"];
d60 -> d61  [key=0, style=solid];
d72 -> d73  [key=0, style=solid];
d5 -> d6  [key=0, style=solid];
d5 -> d14  [key=1, style=dashed, color=darkseagreen4, label=windowStartTime];
d5 -> d9  [key=1, style=dashed, color=darkseagreen4, label=windowStartTime];
d5 -> d8  [key=1, style=dashed, color=darkseagreen4, label=windowStartTime];
d15 -> d16  [key=0, style=solid];
d28 -> d29  [key=0, style=solid];
d28 -> d30  [key=1, style=dashed, color=darkseagreen4, label=data];
d28 -> d42  [key=1, style=dashed, color=darkseagreen4, label=data];
d30 -> d31  [key=0, style=solid];
d30 -> d42  [key=0, style=solid];
d37 -> d37  [key=1, style=dashed, color=darkseagreen4, label=retryCount];
d37 -> d38  [key=0, style=solid];
d37 -> d41  [key=1, style=dashed, color=darkseagreen4, label=retryCount];
d8 -> d9  [key=0, style=solid];
d8 -> d20  [key=2, style=dotted];
d8 -> d21  [key=2, style=dotted];
d43 -> d25  [key=0, style=bold, color=blue];
d32 -> d33  [key=0, style=solid];
d32 -> d45  [key=2, style=dotted];
d32 -> d34  [key=1, style=dashed, color=darkseagreen4, label=response];
d39 -> d40  [key=0, style=solid];
d39 -> d49  [key=2, style=dotted];
d74 -> d72  [key=0, style=bold, color=blue];
d73 -> d74  [key=0, style=solid];
d42 -> d43  [key=0, style=solid];
d35 -> d30  [key=0, style=solid];
d35 -> d42  [key=1, style=dashed, color=darkseagreen4, label=data];
d35 -> d36  [key=0, style=solid];
d35 -> d48  [key=2, style=dotted];
d41 -> d30  [key=0, style=solid];
d41 -> d21  [key=2, style=dotted];
d31 -> d32  [key=0, style=solid];
d31 -> d44  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d38 -> d39  [key=0, style=solid];
d38 -> d41  [key=0, style=solid];
d40 -> d43  [key=0, style=solid];
d33 -> d34  [key=0, style=solid];
d34 -> d35  [key=0, style=solid];
d34 -> d46  [key=2, style=dotted];
d34 -> d47  [key=2, style=dotted];
}
