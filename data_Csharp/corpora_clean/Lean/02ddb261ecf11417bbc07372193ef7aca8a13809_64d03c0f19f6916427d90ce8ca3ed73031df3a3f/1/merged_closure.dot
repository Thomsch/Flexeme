digraph  {
n211 [label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", span=""];
n0 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", span="50-50"];
n1 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", label="Algorithm = algorithm", span="53-53"];
n2 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", label="_pending = new ConcurrentDictionary<int, Order>()", span="54-54"];
n3 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", span="50-50"];
n4 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary()", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary()", span="0-0"];
n5 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, string)", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, string)", span="62-62"];
n6 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, string)", label="Algorithm = algorithm", span="65-65"];
n7 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, string)", label="_pending = new ConcurrentDictionary<int, Order>()", span="66-66"];
n8 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, string)", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, string)", span="62-62"];
n9 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Brokerages.Backtesting.IBacktestingMarketSimulation)", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Brokerages.Backtesting.IBacktestingMarketSimulation)", span="74-74"];
n10 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Brokerages.Backtesting.IBacktestingMarketSimulation)", label="Algorithm = algorithm", span="77-77"];
n11 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Brokerages.Backtesting.IBacktestingMarketSimulation)", label="MarketSimulation = marketSimulation", span="78-78"];
n12 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Brokerages.Backtesting.IBacktestingMarketSimulation)", label="_pending = new ConcurrentDictionary<int, Order>()", span="79-79"];
n13 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Brokerages.Backtesting.IBacktestingMarketSimulation)", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Brokerages.Backtesting.IBacktestingMarketSimulation)", span="74-74"];
n14 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetOpenOrders()", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetOpenOrders()", span="93-93"];
n15 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetOpenOrders()", label="return Algorithm.Transactions.GetOpenOrders();", span="95-95"];
n16 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetOpenOrders()", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetOpenOrders()", span="93-93"];
n17 [cluster="QuantConnect.Securities.SecurityTransactionManager.GetOpenOrders()", label="Entry QuantConnect.Securities.SecurityTransactionManager.GetOpenOrders()", span="259-259"];
n18 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetAccountHoldings()", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetAccountHoldings()", span="102-102"];
n19 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetAccountHoldings()", label="return (from kvp in Algorithm.Portfolio.Securities.OrderBy(x => x.Value.Symbol)\r\n                    where kvp.Value.Holdings.AbsoluteQuantity > 0\r\n                    select new Holding(kvp.Value)).ToList();", span="105-107"];
n20 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetAccountHoldings()", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetAccountHoldings()", span="102-102"];
n21 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
n22 [cluster="Holding.cstr", label="Entry Holding.cstr", span=""];
n23 [cluster="Unk.ToList", label="Entry Unk.ToList", span=""];
n24 [cluster="lambda expression", label="Entry lambda expression", span="105-105"];
n25 [cluster="lambda expression", label="x.Value.Symbol", span="105-105"];
n26 [cluster="lambda expression", label="Exit lambda expression", span="105-105"];
n27 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetCashBalance()", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetCashBalance()", span="114-114"];
n28 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetCashBalance()", label="return Algorithm.Portfolio.CashBook.Select(x => x.Value).ToList();", span="116-116"];
n29 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetCashBalance()", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.GetCashBalance()", span="114-114"];
n30 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n31 [cluster="lambda expression", label="Entry lambda expression", span="116-116"];
n32 [cluster="lambda expression", label="x.Value", span="116-116"];
n33 [cluster="lambda expression", label="Exit lambda expression", span="116-116"];
n34 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", span="124-124"];
n35 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="Algorithm.LiveMode", span="126-126"];
n36 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="Log.Trace(''BacktestingBrokerage.PlaceOrder(): Type: '' + order.Type + '' Symbol: '' + order.Symbol.Value + '' Quantity: '' + order.Quantity)", span="128-128"];
n37 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="order.Status == OrderStatus.New", span="131-131"];
n40 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="SetPendingOrder(order)", span="136-136"];
n41 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="var orderId = order.Id.ToString()", span="139-139"];
n42 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="!order.BrokerId.Contains(orderId)", span="140-140"];
n43 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="order.BrokerId.Add(orderId)", span="140-140"];
n45 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="var submitted = new OrderEvent(order, Algorithm.UtcTime, orderFee) { Status = OrderStatus.Submitted }", span="144-144"];
n50 [cluster="QuantConnect.Logging.Log.Trace(string, bool)", label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106"];
n38 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label=_needsScanLock, span="133-133"];
n48 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="return false;", span="149-149"];
n39 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="_needsScan = true", span="135-135"];
n51 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.SetPendingOrder(QuantConnect.Orders.Order)", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.SetPendingOrder(QuantConnect.Orders.Order)", span="454-454"];
n52 [cluster="int.ToString()", label="Entry int.ToString()", span="0-0"];
n44 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="int orderFee = 0", span="143-143"];
n53 [cluster="System.Collections.Generic.List<T>.Contains(T)", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
n54 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n46 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="OnOrderEvent(submitted)", span="145-145"];
n55 [cluster="QuantConnect.Orders.OrderEvent.OrderEvent(QuantConnect.Orders.Order, System.DateTime, decimal, string)", label="Entry QuantConnect.Orders.OrderEvent.OrderEvent(QuantConnect.Orders.Order, System.DateTime, decimal, string)", span="144-144"];
n47 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="return true;", span="147-147"];
n56 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)", span="423-423"];
n49 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.PlaceOrder(QuantConnect.Orders.Order)", span="124-124"];
n57 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", span="157-157"];
n58 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="Algorithm.LiveMode", span="159-159"];
n59 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="Log.Trace(''BacktestingBrokerage.UpdateOrder(): Symbol: '' + order.Symbol.Value + '' Quantity: '' + order.Quantity + '' Status: '' + order.Status)", span="161-161"];
n62 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="!_pending.TryGetValue(order.Id, out pending)", span="167-167"];
n65 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="SetPendingOrder(order)", span="174-174"];
n66 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="var orderId = order.Id.ToString()", span="177-177"];
n67 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="!order.BrokerId.Contains(orderId)", span="178-178"];
n68 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="order.BrokerId.Add(orderId)", span="178-178"];
n70 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="var updated = new OrderEvent(order, Algorithm.UtcTime, orderFee) { Status = OrderStatus.Submitted }", span="182-182"];
n60 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label=_needsScanLock, span="164-164"];
n61 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="Order pending", span="166-166"];
n63 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="return false;", span="170-170"];
n64 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="_needsScan = true", span="173-173"];
n74 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
n69 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="int orderFee = 0", span="181-181"];
n71 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="OnOrderEvent(updated)", span="183-183"];
n72 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="return true;", span="185-185"];
n73 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.UpdateOrder(QuantConnect.Orders.Order)", span="157-157"];
n75 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", span="193-193"];
n76 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="Algorithm.LiveMode", span="195-195"];
n77 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="Log.Trace(''BacktestingBrokerage.CancelOrder(): Symbol: '' + order.Symbol.Value + '' Quantity: '' + order.Quantity)", span="197-197"];
n80 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="!_pending.TryRemove(order.Id, out pending)", span="203-203"];
n82 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="var orderId = order.Id.ToString()", span="210-210"];
n83 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="!order.BrokerId.Contains(orderId)", span="211-211"];
n84 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="order.BrokerId.Add(order.Id.ToString())", span="211-211"];
n86 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="var canceled = new OrderEvent(order, Algorithm.UtcTime, orderFee) { Status = OrderStatus.Canceled }", span="215-215"];
n78 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label=_needsScanLock, span="200-200"];
n79 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="Order pending", span="202-202"];
n81 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="return false;", span="206-206"];
n90 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryRemove(TKey, out TValue)", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryRemove(TKey, out TValue)", span="0-0"];
n85 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="int orderFee = 0", span="214-214"];
n87 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="OnOrderEvent(canceled)", span="216-216"];
n88 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="return true;", span="218-218"];
n89 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.CancelOrder(QuantConnect.Orders.Order)", span="193-193"];
n91 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", span="229-229"];
n92 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label=_needsScanLock, span="231-231"];
n93 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="!_needsScan", span="234-234"];
n94 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="return;", span="236-236"];
n96 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="_pending.OrderBy(x => x.Key)", span="242-242"];
n155 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="_needsScan = stillNeedsScan", span="388-388"];
n97 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="var order = kvp.Value", span="244-244"];
n176 [cluster="lambda expression", label="Entry lambda expression", span="242-242"];
n98 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="order == null", span="245-245"];
n99 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Log.Error(''BacktestingBrokerage.Scan(): Null pending order found: '' + kvp.Key)", span="247-247"];
n101 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="order.Status.IsClosed()", span="252-252"];
n102 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="_pending.TryRemove(order.Id, out order)", span="255-255"];
n103 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="order.Time == Algorithm.UtcTime && order.Type != OrderType.Market", span="260-260"];
n105 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="var fills = new[] { new OrderEvent(order, Algorithm.UtcTime, 0) }", span="266-266"];
n107 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="!Algorithm.Securities.TryGetValue(order.Symbol, out security)", span="269-269"];
n108 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Log.Error(''BacktestingBrokerage.Scan(): Unable to process order: '' + order.Id + ''. The security no longer exists.'')", span="271-271"];
n109 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OnOrderEvent(new OrderEvent(order, Algorithm.UtcTime, 0m){Status = OrderStatus.Invalid})", span="273-273"];
n110 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="_pending.TryRemove(order.Id, out order)", span="274-274"];
n111 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="!Algorithm.BrokerageModel.CanExecuteOrder(security, order)", span="279-279"];
n113 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="hasSufficientBuyingPowerResult = security.BuyingPowerModel.HasSufficientBuyingPowerForOrder(Algorithm.Portfolio, security, order)", span="288-288"];
n115 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OnOrderEvent(new OrderEvent(order, Algorithm.UtcTime, 0m, err.Message) { Status = OrderStatus.Invalid })", span="293-293"];
n117 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="_pending.TryRemove(order.Id, out pending)", span="295-295"];
n119 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Algorithm.Error($''Order Error: id: {order.Id}, Error executing margin models: {err.Message}'')", span="298-298"];
n122 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="order.Type", span="311-311"];
n124 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="fills = new[] { model.LimitFill(security, order as LimitOrder) }", span="314-314"];
n126 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="fills = new[] { model.StopMarketFill(security, order as StopMarketOrder) }", span="318-318"];
n128 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="fills = new[] { model.MarketFill(security, order as MarketOrder) }", span="322-322"];
n130 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="fills = new[] { model.StopLimitFill(security, order as StopLimitOrder) }", span="326-326"];
n132 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="fills = new[] { model.MarketOnOpenFill(security, order as MarketOnOpenOrder) }", span="330-330"];
n134 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="fills = new[] { model.MarketOnCloseFill(security, order as MarketOnCloseOrder) }", span="334-334"];
n137 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="fills = option.OptionExerciseModel.OptionExercise(option, order as OptionExerciseOrder).ToArray()", span="339-339"];
n140 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Algorithm.Error($''Order Error: id: {order.Id}, Transaction model failed to fill for order type: {order.Type} with error: {err.Message}'')", span="346-346"];
n141 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="var message = $''Insufficient buying power to complete order (Value:{order.GetValue(security).SmartRounding()}), Reason: {hasSufficientBuyingPowerResult.Reason}.''", span="352-352"];
n142 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OnOrderEvent(new OrderEvent(order, Algorithm.UtcTime, 0m, message) { Status = OrderStatus.Invalid })", span="353-353"];
n144 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="_pending.TryRemove(order.Id, out pending)", span="355-355"];
n145 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Algorithm.Error($''Order Error: id: {order.Id}, {message}'')", span="357-357"];
n147 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="order.Status != fill.Status || fill.FillQuantity != 0", span="364-364"];
n149 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="order.Type == OrderType.OptionExercise", span="370-370"];
n150 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="fill.Message = order.Tag", span="372-372"];
n153 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="_pending.TryRemove(order.Id, out order)", span="379-379"];
n100 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="_pending.TryRemove(kvp.Key, out order)", span="248-248"];
n157 [cluster="QuantConnect.Logging.Log.Error(string, bool)", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="65-65"];
n158 [cluster="QuantConnect.Orders.OrderStatus.IsClosed()", label="Entry QuantConnect.Orders.OrderStatus.IsClosed()", span="27-27"];
n104 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="stillNeedsScan = true", span="262-262"];
n106 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Security security", span="268-268"];
n146 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label=fills, span="361-361"];
n152 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="fills.All(x => x.Status.IsClosed())", span="377-377"];
n159 [cluster="QuantConnect.Securities.SecurityManager.TryGetValue(QuantConnect.Symbol, out QuantConnect.Securities.Security)", label="Entry QuantConnect.Securities.SecurityManager.TryGetValue(QuantConnect.Symbol, out QuantConnect.Securities.Security)", span="193-193"];
n121 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="var model = security.FillModel", span="306-306"];
n136 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="var option = (Option)security", span="338-338"];
n112 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="HasSufficientBuyingPowerForOrderResult hasSufficientBuyingPowerResult", span="285-285"];
n160 [cluster="QuantConnect.Brokerages.IBrokerageModel.CanExecuteOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", label="Entry QuantConnect.Brokerages.IBrokerageModel.CanExecuteOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="78-78"];
n114 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label=Exception, span="290-290"];
n120 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="hasSufficientBuyingPowerResult.IsSufficient", span="303-303"];
n161 [cluster="QuantConnect.Securities.IBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", label="Entry QuantConnect.Securities.IBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="48-48"];
n116 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Order pending", span="294-294"];
n118 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Log.Error(err)", span="297-297"];
n162 [cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)", label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98"];
n123 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OrderType.Limit", span="313-313"];
n125 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OrderType.StopMarket", span="317-317"];
n127 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OrderType.Market", span="321-321"];
n129 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OrderType.StopLimit", span="325-325"];
n131 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OrderType.MarketOnOpen", span="329-329"];
n133 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OrderType.MarketOnClose", span="333-333"];
n135 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OrderType.OptionExercise", span="337-337"];
n138 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label=Exception, span="343-343"];
n167 [cluster="QuantConnect.Orders.Fills.IFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", label="Entry QuantConnect.Orders.Fills.IFillModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", span="46-46"];
n168 [cluster="QuantConnect.Orders.Fills.IFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", label="Entry QuantConnect.Orders.Fills.IFillModel.MarketOnOpenFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnOpenOrder)", span="62-62"];
n165 [cluster="QuantConnect.Orders.Fills.IFillModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", label="Entry QuantConnect.Orders.Fills.IFillModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", span="38-38"];
n166 [cluster="QuantConnect.Orders.Fills.IFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", label="Entry QuantConnect.Orders.Fills.IFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", span="30-30"];
n164 [cluster="QuantConnect.Orders.Fills.IFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", label="Entry QuantConnect.Orders.Fills.IFillModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", span="54-54"];
n170 [cluster="QuantConnect.Orders.OptionExercise.IOptionExerciseModel.OptionExercise(QuantConnect.Securities.Option.Option, QuantConnect.Orders.OptionExerciseOrder)", label="Entry QuantConnect.Orders.OptionExercise.IOptionExerciseModel.OptionExercise(QuantConnect.Securities.Option.Option, QuantConnect.Orders.OptionExerciseOrder)", span="33-33"];
n171 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
n169 [cluster="QuantConnect.Orders.Fills.IFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", label="Entry QuantConnect.Orders.Fills.IFillModel.MarketOnCloseFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOnCloseOrder)", span="70-70"];
n139 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Log.Error(err)", span="345-345"];
n172 [cluster="QuantConnect.Orders.Order.GetValue(QuantConnect.Securities.Security)", label="Entry QuantConnect.Orders.Order.GetValue(QuantConnect.Securities.Security)", span="210-210"];
n173 [cluster="decimal.SmartRounding()", label="Entry decimal.SmartRounding()", span="208-208"];
n143 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Order pending", span="354-354"];
n163 [cluster="QuantConnect.Interfaces.IAlgorithm.Error(string)", label="Entry QuantConnect.Interfaces.IAlgorithm.Error(string)", span="432-432"];
n148 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OnOrderEvent(fill)", span="367-367"];
n151 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OnOptionPositionAssigned(fill)", span="373-373"];
n174 [cluster="QuantConnect.Brokerages.Brokerage.OnOptionPositionAssigned(QuantConnect.Orders.OrderEvent)", label="Entry QuantConnect.Brokerages.Brokerage.OnOptionPositionAssigned(QuantConnect.Orders.OrderEvent)", span="132-132"];
n154 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="stillNeedsScan = true", span="383-383"];
n175 [cluster="Unk.All", label="Entry Unk.All", span=""];
n179 [cluster="lambda expression", label="Entry lambda expression", span="377-377"];
n156 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", span="229-229"];
n177 [cluster="lambda expression", label="x.Key", span="242-242"];
n178 [cluster="lambda expression", label="Exit lambda expression", span="242-242"];
n180 [cluster="lambda expression", label="x.Status.IsClosed()", span="377-377"];
n181 [cluster="lambda expression", label="Exit lambda expression", span="377-377"];
n182 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.SimulateMarket()", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.SimulateMarket()", span="395-395"];
n183 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.SimulateMarket()", label="MarketSimulation?.SimulateMarketConditions(this, Algorithm)", span="398-398"];
n184 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.SimulateMarket()", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.SimulateMarket()", span="395-395"];
n185 [cluster="QuantConnect.Brokerages.Backtesting.IBacktestingMarketSimulation.SimulateMarketConditions(QuantConnect.Interfaces.IBrokerage, QuantConnect.Interfaces.IAlgorithm)", label="Entry QuantConnect.Brokerages.Backtesting.IBacktestingMarketSimulation.SimulateMarketConditions(QuantConnect.Interfaces.IBrokerage, QuantConnect.Interfaces.IAlgorithm)", span="31-31"];
n186 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.ActivateOptionAssignment(QuantConnect.Securities.Option.Option, int)", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.ActivateOptionAssignment(QuantConnect.Securities.Option.Option, int)", span="406-406"];
n187 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.ActivateOptionAssignment(QuantConnect.Securities.Option.Option, int)", label="_pendingOptionAssignments.Contains(option.Symbol)", span="409-409"];
n189 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.ActivateOptionAssignment(QuantConnect.Securities.Option.Option, int)", label="_pendingOptionAssignments.Add(option.Symbol)", span="411-411"];
n190 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.ActivateOptionAssignment(QuantConnect.Securities.Option.Option, int)", label="var request = new SubmitOrderRequest(OrderType.OptionExercise, option.Type, option.Symbol, -quantity, 0m, 0m, Algorithm.UtcTime, ''Simulated option assignment before expiration'')", span="413-413"];
n188 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.ActivateOptionAssignment(QuantConnect.Securities.Option.Option, int)", label="return;", span="409-409"];
n194 [cluster="System.Collections.Generic.HashSet<T>.Contains(T)", label="Entry System.Collections.Generic.HashSet<T>.Contains(T)", span="0-0"];
n195 [cluster="System.Collections.Generic.HashSet<T>.Add(T)", label="Entry System.Collections.Generic.HashSet<T>.Add(T)", span="0-0"];
n191 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.ActivateOptionAssignment(QuantConnect.Securities.Option.Option, int)", label="var ticket = Algorithm.Transactions.ProcessRequest(request)", span="415-415"];
n196 [cluster="QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, QuantConnect.Symbol, decimal, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", label="Entry QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, QuantConnect.Symbol, decimal, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="102-102"];
n192 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.ActivateOptionAssignment(QuantConnect.Securities.Option.Option, int)", label="Log.Trace($''BacktestingBrokerage.ActivateOptionAssignment(): OrderId: {ticket.OrderId}'')", span="416-416"];
n197 [cluster="QuantConnect.Securities.SecurityTransactionManager.ProcessRequest(QuantConnect.Orders.OrderRequest)", label="Entry QuantConnect.Securities.SecurityTransactionManager.ProcessRequest(QuantConnect.Orders.OrderRequest)", span="133-133"];
n193 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.ActivateOptionAssignment(QuantConnect.Securities.Option.Option, int)", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.ActivateOptionAssignment(QuantConnect.Securities.Option.Option, int)", span="406-406"];
n198 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)", label="e.Status.IsClosed() && _pendingOptionAssignments.Contains(e.Symbol)", span="425-425"];
n199 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)", label="_pendingOptionAssignments.Remove(e.Symbol)", span="427-427"];
n200 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)", label="base.OnOrderEvent(e)", span="430-430"];
n202 [cluster="System.Collections.Generic.HashSet<T>.Remove(T)", label="Entry System.Collections.Generic.HashSet<T>.Remove(T)", span="0-0"];
n201 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)", span="423-423"];
n203 [cluster="QuantConnect.Brokerages.Brokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)", label="Entry QuantConnect.Brokerages.Brokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)", span="113-113"];
n204 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Connect()", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Connect()", span="436-436"];
n205 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Connect()", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Connect()", span="436-436"];
n206 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Disconnect()", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Disconnect()", span="444-444"];
n207 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Disconnect()", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Disconnect()", span="444-444"];
n208 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.SetPendingOrder(QuantConnect.Orders.Order)", label="_pending[order.Id] = order.Clone()", span="457-457"];
n209 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.SetPendingOrder(QuantConnect.Orders.Order)", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.SetPendingOrder(QuantConnect.Orders.Order)", span="454-454"];
n210 [cluster="QuantConnect.Orders.Order.Clone()", label="Entry QuantConnect.Orders.Order.Clone()", span="260-260"];
m1_26 [cluster="double.ToString(System.IFormatProvider)", file="GDAXBrokerage.Utility.cs", label="Entry double.ToString(System.IFormatProvider)", span="0-0"];
m1_51 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderStatus(QuantConnect.Brokerages.GDAX.Messages.Order)", file="GDAXBrokerage.Utility.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderStatus(QuantConnect.Brokerages.GDAX.Messages.Order)", span="101-101"];
m1_52 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderStatus(QuantConnect.Brokerages.GDAX.Messages.Order)", file="GDAXBrokerage.Utility.cs", label="order.Size != 0 && order.FilledSize != order.Size", span="103-103"];
m1_54 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderStatus(QuantConnect.Brokerages.GDAX.Messages.Order)", file="GDAXBrokerage.Utility.cs", label="order.Status == ''open'' || order.Status == ''pending'' || order.Status == ''active''", span="107-107"];
m1_56 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderStatus(QuantConnect.Brokerages.GDAX.Messages.Order)", file="GDAXBrokerage.Utility.cs", label="order.Status == ''done'' || order.Status == ''settled''", span="111-111"];
m1_53 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderStatus(QuantConnect.Brokerages.GDAX.Messages.Order)", file="GDAXBrokerage.Utility.cs", label="return Orders.OrderStatus.PartiallyFilled;", span="105-105"];
m1_55 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderStatus(QuantConnect.Brokerages.GDAX.Messages.Order)", file="GDAXBrokerage.Utility.cs", label="return Orders.OrderStatus.Submitted;", span="109-109"];
m1_57 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderStatus(QuantConnect.Brokerages.GDAX.Messages.Order)", file="GDAXBrokerage.Utility.cs", label="return Orders.OrderStatus.Filled;", span="113-113"];
m1_58 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderStatus(QuantConnect.Brokerages.GDAX.Messages.Order)", file="GDAXBrokerage.Utility.cs", label="return Orders.OrderStatus.None;", span="116-116"];
m1_59 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderStatus(QuantConnect.Brokerages.GDAX.Messages.Order)", file="GDAXBrokerage.Utility.cs", label="Exit QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderStatus(QuantConnect.Brokerages.GDAX.Messages.Order)", span="101-101"];
m1_29 [cluster="System.Security.Cryptography.HMACSHA256.HMACSHA256(byte[])", file="GDAXBrokerage.Utility.cs", label="Entry System.Security.Cryptography.HMACSHA256.HMACSHA256(byte[])", span="0-0"];
m1_8 [cluster="Unk.ToUpper", file="GDAXBrokerage.Utility.cs", label="Entry Unk.ToUpper", span=""];
m1_14 [cluster="QuantConnect.Tests.Indicators.IdentityTests.ResetsProperly()", file="GDAXBrokerage.Utility.cs", label="Entry QuantConnect.Tests.Indicators.IdentityTests.ResetsProperly()", span="44-44"];
m1_15 [cluster="QuantConnect.Tests.Indicators.IdentityTests.ResetsProperly()", file="GDAXBrokerage.Utility.cs", label="var identity = new Identity(''test'')", span="46-46"];
m1_17 [cluster="QuantConnect.Tests.Indicators.IdentityTests.ResetsProperly()", file="GDAXBrokerage.Utility.cs", label="Assert.AreEqual(0m, identity.Current.Value)", span="48-48"];
m1_16 [cluster="QuantConnect.Tests.Indicators.IdentityTests.ResetsProperly()", file="GDAXBrokerage.Utility.cs", label="Assert.IsFalse(identity.IsReady)", span="47-47"];
m1_21 [cluster="QuantConnect.Tests.Indicators.IdentityTests.ResetsProperly()", file="GDAXBrokerage.Utility.cs", label="Assert.AreEqual(2, identity.Samples)", span="55-55"];
m1_22 [cluster="QuantConnect.Tests.Indicators.IdentityTests.ResetsProperly()", file="GDAXBrokerage.Utility.cs", label="identity.Reset()", span="57-57"];
m1_19 [cluster="QuantConnect.Tests.Indicators.IdentityTests.ResetsProperly()", file="GDAXBrokerage.Utility.cs", label="identity.Update(data)", span="52-52"];
m1_18 [cluster="QuantConnect.Tests.Indicators.IdentityTests.ResetsProperly()", file="GDAXBrokerage.Utility.cs", label="TestHelper.GetDataStream(2)", span="50-50"];
m1_20 [cluster="QuantConnect.Tests.Indicators.IdentityTests.ResetsProperly()", file="GDAXBrokerage.Utility.cs", label="Assert.IsTrue(identity.IsReady)", span="54-54"];
m1_23 [cluster="QuantConnect.Tests.Indicators.IdentityTests.ResetsProperly()", file="GDAXBrokerage.Utility.cs", label="Assert.IsFalse(identity.IsReady)", span="59-59"];
m1_0 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAuthenticationToken(IRestRequest)", file="GDAXBrokerage.Utility.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAuthenticationToken(IRestRequest)", span="29-29"];
m1_2 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAuthenticationToken(IRestRequest)", color=green, community=0, file="GDAXBrokerage.Utility.cs", label="var token = GetAuthenticationToken(body == null ? '''' : body.Value.ToString(), request.Method.ToString().ToUpper(), request.Resource)", prediction=0, span="32-32"];
m1_1 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAuthenticationToken(IRestRequest)", file="GDAXBrokerage.Utility.cs", label="var body = request.Parameters.SingleOrDefault(b => b.Type == ParameterType.RequestBody)", span="31-31"];
m1_4 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAuthenticationToken(IRestRequest)", color=green, community=0, file="GDAXBrokerage.Utility.cs", label="return token;", prediction=0, span="35-35"];
m1_5 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAuthenticationToken(IRestRequest)", color=green, community=0, file="GDAXBrokerage.Utility.cs", label="Exit QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAuthenticationToken(IRestRequest)", prediction=0, span="29-29"];
m1_6 [cluster="Unk.SingleOrDefault", file="GDAXBrokerage.Utility.cs", label="Entry Unk.SingleOrDefault", span=""];
m1_7 [cluster="Unk.ToString", file="GDAXBrokerage.Utility.cs", label="Entry Unk.ToString", span=""];
m1_11 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Update(T)", file="GDAXBrokerage.Utility.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.Update(T)", span="81-81"];
m1_12 [cluster="Unk.IsTrue", file="GDAXBrokerage.Utility.cs", label="Entry Unk.IsTrue", span=""];
m1_13 [cluster="Unk.AreEqual", file="GDAXBrokerage.Utility.cs", label="Entry Unk.AreEqual", span=""];
m1_50 [cluster="string.Substring(int, int)", file="GDAXBrokerage.Utility.cs", label="Entry string.Substring(int, int)", span="0-0"];
m1_9 [cluster="Unk.GetAuthenticationToken", file="GDAXBrokerage.Utility.cs", label="Entry Unk.GetAuthenticationToken", span=""];
m1_10 [cluster="Unk.AddHeader", file="GDAXBrokerage.Utility.cs", label="Entry Unk.AddHeader", span=""];
m1_32 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderType(QuantConnect.Orders.OrderType)", file="GDAXBrokerage.Utility.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderType(QuantConnect.Orders.OrderType)", span="67-67"];
m1_33 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderType(QuantConnect.Orders.OrderType)", file="GDAXBrokerage.Utility.cs", label="orderType == Orders.OrderType.Limit || orderType == Orders.OrderType.Market", span="69-69"];
m1_34 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderType(QuantConnect.Orders.OrderType)", file="GDAXBrokerage.Utility.cs", label="return orderType.ToString().ToLower();", span="71-71"];
m1_35 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderType(QuantConnect.Orders.OrderType)", file="GDAXBrokerage.Utility.cs", label="orderType == Orders.OrderType.StopMarket", span="73-73"];
m1_37 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderType(QuantConnect.Orders.OrderType)", file="GDAXBrokerage.Utility.cs", label="throw new Exception(''Unsupported order type:'' + orderType.ToString());", span="78-78"];
m1_36 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderType(QuantConnect.Orders.OrderType)", file="GDAXBrokerage.Utility.cs", label="return ''stop'';", span="75-75"];
m1_38 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderType(QuantConnect.Orders.OrderType)", file="GDAXBrokerage.Utility.cs", label="Exit QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertOrderType(QuantConnect.Orders.OrderType)", span="67-67"];
m1_41 [cluster="System.Exception.Exception(string)", file="GDAXBrokerage.Utility.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m1_46 [cluster="QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", file="GDAXBrokerage.Utility.cs", label="Entry QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", span="45-45"];
m1_27 [cluster="System.Convert.FromBase64String(string)", file="GDAXBrokerage.Utility.cs", label="Entry System.Convert.FromBase64String(string)", span="0-0"];
m1_40 [cluster="string.ToLower()", file="GDAXBrokerage.Utility.cs", label="Entry string.ToLower()", span="0-0"];
m1_31 [cluster="System.Convert.ToBase64String(byte[])", file="GDAXBrokerage.Utility.cs", label="Entry System.Convert.ToBase64String(byte[])", span="0-0"];
m1_24 [cluster="QuantConnect.Tests.Indicators.IdentityTests.ResetsProperly()", file="GDAXBrokerage.Utility.cs", label="Assert.AreEqual(0, identity.Samples)", span="60-60"];
m1_39 [cluster="System.Enum.ToString()", file="GDAXBrokerage.Utility.cs", label="Entry System.Enum.ToString()", span="0-0"];
m1_45 [cluster="string.Replace(string, string)", file="GDAXBrokerage.Utility.cs", label="Entry string.Replace(string, string)", span="0-0"];
m1_25 [cluster="QuantConnect.Time.DateTimeToUnixTimeStamp(System.DateTime)", file="GDAXBrokerage.Utility.cs", label="Entry QuantConnect.Time.DateTimeToUnixTimeStamp(System.DateTime)", span="148-148"];
m1_28 [cluster="System.Text.Encoding.GetBytes(string)", file="GDAXBrokerage.Utility.cs", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
m1_47 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertSymbol(QuantConnect.Symbol)", file="GDAXBrokerage.Utility.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertSymbol(QuantConnect.Symbol)", span="96-96"];
m1_48 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertSymbol(QuantConnect.Symbol)", file="GDAXBrokerage.Utility.cs", label="return symbol.Value.Substring(0, 3).ToLower() + ''-'' + symbol.Value.Substring(3, 3).ToLower();", span="98-98"];
m1_49 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertSymbol(QuantConnect.Symbol)", file="GDAXBrokerage.Utility.cs", label="Exit QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertSymbol(QuantConnect.Symbol)", span="96-96"];
m1_42 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertProductId(string)", file="GDAXBrokerage.Utility.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertProductId(string)", span="86-86"];
m1_43 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertProductId(string)", file="GDAXBrokerage.Utility.cs", label="return Symbol.Create(productId.Replace(''-'', ''''), SecurityType.Forex, Market.GDAX);", span="88-88"];
m1_44 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertProductId(string)", file="GDAXBrokerage.Utility.cs", label="Exit QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertProductId(string)", span="86-86"];
m1_30 [cluster="System.Security.Cryptography.HashAlgorithm.ComputeHash(byte[])", file="GDAXBrokerage.Utility.cs", label="Entry System.Security.Cryptography.HashAlgorithm.ComputeHash(byte[])", span="0-0"];
m1_60 [file="GDAXBrokerage.Utility.cs", label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", span=""];
m3_8 [cluster="RestSharp.RestClient.cstr", file="GDAXBrokerageIntegrationtests.cs", label="Entry RestSharp.RestClient.cstr", span=""];
m3_12 [cluster="QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.GetAskPrice(QuantConnect.Symbol)", file="GDAXBrokerageIntegrationtests.cs", label="Entry QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.GetAskPrice(QuantConnect.Symbol)", span="66-66"];
m3_13 [cluster="QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.GetAskPrice(QuantConnect.Symbol)", color=green, community=0, file="GDAXBrokerageIntegrationtests.cs", label="var tick = ((GDAXBrokerage)this.Brokerage).GetTick(symbol)", prediction=3, span="68-68"];
m3_14 [cluster="QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.GetAskPrice(QuantConnect.Symbol)", color=green, community=0, file="GDAXBrokerageIntegrationtests.cs", label="return tick.AskPrice;", prediction=4, span="69-69"];
m3_15 [cluster="QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.GetAskPrice(QuantConnect.Symbol)", file="GDAXBrokerageIntegrationtests.cs", label="Exit QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.GetAskPrice(QuantConnect.Symbol)", span="66-66"];
m3_10 [cluster="GDAXBrokerage.cstr", file="GDAXBrokerageIntegrationtests.cs", label="Entry GDAXBrokerage.cstr", span=""];
m3_0 [cluster="QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.GetDefaultQuantity()", file="GDAXBrokerageIntegrationtests.cs", label="Entry QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.GetDefaultQuantity()", span="51-51"];
m3_1 [cluster="QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.GetDefaultQuantity()", color=green, community=0, file="GDAXBrokerageIntegrationtests.cs", label="return 0.01m;", prediction=5, span="53-53"];
m3_2 [cluster="QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.GetDefaultQuantity()", file="GDAXBrokerageIntegrationtests.cs", label="Exit QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.GetDefaultQuantity()", span="51-51"];
m3_3 [cluster="QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", file="GDAXBrokerageIntegrationtests.cs", label="Entry QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", span="57-57"];
m3_4 [cluster="QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", color=green, community=0, file="GDAXBrokerageIntegrationtests.cs", label="var restClient = new RestSharp.RestClient()", prediction=6, span="59-59"];
m3_5 [cluster="QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", color=green, community=0, file="GDAXBrokerageIntegrationtests.cs", label="var webSocketClient = new WebSocketWrapper()", prediction=7, span="60-60"];
m3_6 [cluster="QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", color=green, community=0, file="GDAXBrokerageIntegrationtests.cs", label="return new GDAXBrokerage(Config.Get(''gdax-url'', ''wss://ws-feed.gdax.com''), webSocketClient, restClient, Config.Get(''gdax-api-key''), Config.Get(''gdax-api-secret''), \r\n                Config.Get(''gdax-passphrase''));", prediction=6, span="62-63"];
m3_7 [cluster="QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", file="GDAXBrokerageIntegrationtests.cs", label="Exit QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", span="57-57"];
m3_11 [cluster="QuantConnect.Configuration.Config.Get(string, string)", file="GDAXBrokerageIntegrationtests.cs", label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="90-90"];
m3_9 [cluster="QuantConnect.Brokerages.WebSocketWrapper.WebSocketWrapper()", file="GDAXBrokerageIntegrationtests.cs", label="Entry QuantConnect.Brokerages.WebSocketWrapper.WebSocketWrapper()", span="27-27"];
m3_16 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetTick(QuantConnect.Symbol)", file="GDAXBrokerageIntegrationtests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetTick(QuantConnect.Symbol)", span="218-218"];
m3_17 [file="GDAXBrokerageIntegrationtests.cs", label="QuantConnect.Tests.Brokerages.Bitfinex.BitfinexBrokerageTests", span=""];
m4_108 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", span="144-144"];
m4_109 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="string json = _matchData", span="146-146"];
m4_114 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="GDAXTestsHelpers.AddOrder(_unit, 1, id, orderQuantity)", span="155-155"];
m4_118 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="_unit.OrderStatusChanged += (s, e) =>\r\n            {\r\n                Assert.AreEqual(''BTCUSD'', e.Symbol.Value);\r\n                actualFee += e.OrderFee;\r\n                actualQuantity += e.AbsoluteFillQuantity;\r\n\r\n                Assert.AreEqual(actualQuantity != orderQuantity ? Orders.OrderStatus.PartiallyFilled : Orders.OrderStatus.Filled, e.Status);\r\n                Assert.AreEqual(5.23512m, actualQuantity);\r\n                Assert.AreEqual(0.01m, Math.Round(actualFee, 8));\r\n                raised.Set();\r\n            }", span="161-171"];
m4_119 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="_unit.OnMessage(_unit, GDAXTestsHelpers.GetArgs(json))", span="173-173"];
m4_110 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="string id = ''132fb6ae-456b-4654-b4e0-d681ac05cea1''", span="147-147"];
m4_112 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="json = json.Replace(id, Guid.NewGuid().ToString())", span="151-151"];
m4_113 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="decimal orderQuantity = 6.1m", span="154-154"];
m4_115 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="ManualResetEvent raised = new ManualResetEvent(false)", span="156-156"];
m4_116 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="decimal actualFee = 0", span="158-158"];
m4_117 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="decimal actualQuantity = 0", span="159-159"];
m4_120 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(raised.WaitOne(1000), expectedQuantity != 99)", span="176-176"];
m4_111 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="expectedQuantity == 99", span="149-149"];
m4_121 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", span="144-144"];
m4_222 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", span="271-271"];
m4_223 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="SetupResponse(_holdingData)", span="273-273"];
m4_224 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="_unit.CachedOrderIDs.TryAdd(1, new Orders.MarketOrder { BrokerId = new List<string> { ''1'' }, Price = 123 })", span="275-275"];
m4_225 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="var actual = _unit.GetAccountHoldings()", span="277-277"];
m4_226 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(2, actual.Count())", span="279-279"];
m4_227 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(0.005m, actual.First().Quantity)", span="280-280"];
m4_228 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(10m, actual.First().AveragePrice)", span="281-281"];
m4_229 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(-0.5m, actual.Last().Quantity)", span="283-283"];
m4_230 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(1000m, actual.Last().AveragePrice)", span="284-284"];
m4_231 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", span="271-271"];
m4_67 [cluster="Unk.Connect", file="GDAXBrokerageTests.cs", label="Entry Unk.Connect", span=""];
m4_10 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_rest.Setup(m => m.Execute(It.Is<IRestRequest>(r => r.Resource.StartsWith(''/orders/'' + _brokerId) || r.Resource.StartsWith(''/orders/'' + _matchBrokerId))))\r\n            .Returns(new RestSharp.RestResponse\r\n            {\r\n                Content = File.ReadAllText(''TestData\\gdax_orderById.txt''),\r\n                StatusCode = HttpStatusCode.OK\r\n            })", span="74-79"];
m4_56 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", span="101-101"];
m4_57 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", file="GDAXBrokerageTests.cs", label="_wss.Setup(m => m.Connect()).Verifiable()", span="103-103"];
m4_58 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", file="GDAXBrokerageTests.cs", label="_unit.Connect()", span="105-105"];
m4_59 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", file="GDAXBrokerageTests.cs", label="_wss.Verify()", span="106-106"];
m4_60 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", span="101-101"];
m4_193 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetOpenOrders()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetOpenOrders()", span="120-120"];
m4_124 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXTestsHelpers.AddOrder(QuantConnect.Brokerages.GDAX.GDAXBrokerage, int, string, decimal)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXTestsHelpers.AddOrder(QuantConnect.Brokerages.GDAX.GDAXBrokerage, int, string, decimal)", span="30-30"];
m4_48 [cluster="Unk.IsTrue", file="GDAXBrokerageTests.cs", label="Entry Unk.IsTrue", span=""];
m4_94 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue)", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue)", span="0-0"];
m4_96 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.OnMessage(object, MessageEventArgs)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.OnMessage(object, MessageEventArgs)", span="81-81"];
m4_232 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", span="189-189"];
m4_203 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", span="253-253"];
m4_204 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="SetupResponse(_accountsData)", span="255-255"];
m4_205 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="var actual = _unit.GetCashBalance()", span="257-257"];
m4_206 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(2, actual.Count())", span="259-259"];
m4_207 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="var usd = actual.Single(a => a.Symbol == ''USD'')", span="261-261"];
m4_208 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="var btc = actual.Single(a => a.Symbol == ''BTC'')", span="262-262"];
m4_209 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(80.2301373066930000m, usd.Amount)", span="264-264"];
m4_210 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(1, usd.ConversionRate)", span="265-265"];
m4_211 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(1.1, btc.Amount)", span="266-266"];
m4_212 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(333.985m, btc.ConversionRate)", span="267-267"];
m4_213 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", span="253-253"];
m4_171 [cluster="Unk.Any", file="GDAXBrokerageTests.cs", label="Entry Unk.Any", span=""];
m4_22 [cluster="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.Create(System.Type, JToken)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.Create(System.Type, JToken)", span="85-85"];
m4_214 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", span="235-235"];
m4_170 [cluster="Unk.SelectMany", file="GDAXBrokerageTests.cs", label="Entry Unk.SelectMany", span=""];
m4_97 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m4_126 [cluster="System.Threading.WaitHandle.WaitOne(int)", file="GDAXBrokerageTests.cs", label="Entry System.Threading.WaitHandle.WaitOne(int)", span="0-0"];
m4_0 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", span="54-54"];
m4_1 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", color=green, community=0, file="GDAXBrokerageTests.cs", label="_unit = new GDAXBrokerage(''wss://localhost'', _wss.Object, _rest.Object, ''abc'', ''MTIz'', ''pass'')", prediction=9, span="56-56"];
m4_2 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_orderData = File.ReadAllText(''TestData\\gdax_order.txt'')", span="57-57"];
m4_5 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_accountsData = File.ReadAllText(''TestData\\gdax_accounts.txt'')", span="60-60"];
m4_3 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_matchData = File.ReadAllText(''TestData\\gdax_match.txt'')", span="58-58"];
m4_6 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_holdingData = File.ReadAllText(''TestData\\gdax_holding.txt'')", span="61-61"];
m4_4 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_openOrderData = File.ReadAllText(''TestData\\gdax_openOrders.txt'')", span="59-59"];
m4_7 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_orderByIdData = File.ReadAllText(''TestData\\gdax_orderById.txt'')", span="62-62"];
m4_175 [cluster="Unk.Where", file="GDAXBrokerageTests.cs", label="Entry Unk.Where", span=""];
m4_61 [cluster="Unk.Verifiable", file="GDAXBrokerageTests.cs", label="Entry Unk.Verifiable", span=""];
m4_233 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", span="290-290"];
m4_234 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", file="GDAXBrokerageTests.cs", label="_rest.Setup(m => m.Execute(It.Is<IRestRequest>(r => !r.Resource.EndsWith(''1'')))).Returns(new RestSharp.RestResponse\r\n            {\r\n                StatusCode = code\r\n            })", span="292-295"];
m4_235 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", file="GDAXBrokerageTests.cs", label="_rest.Setup(m => m.Execute(It.Is<IRestRequest>(r => !r.Resource.EndsWith(''2'')))).Returns(new RestSharp.RestResponse\r\n            {\r\n                StatusCode = code2\r\n            })", span="297-300"];
m4_236 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", file="GDAXBrokerageTests.cs", label="var actual = _unit.CancelOrder(new Orders.LimitOrder { BrokerId = new List<string> { ''1'', ''2'' } })", span="302-302"];
m4_237 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(expected, actual)", span="304-304"];
m4_238 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", span="290-290"];
m4_158 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string)", span="53-53"];
m4_145 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAuthenticationToken(string, string, string)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAuthenticationToken(string, string, string)", span="51-51"];
m4_192 [cluster="System.Collections.Generic.List<T>.List()", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m4_239 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder()", span="41-41"];
m4_251 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="297-297"];
m4_166 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.IsTrue(orderId == null || _unit.CachedOrderIDs.SelectMany(c => c.Value.BrokerId.Where(b => b == _brokerId)).Any())", span="211-211"];
m4_258 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="_unit.UpdateOrder(new LimitOrder())", span="311-311"];
m4_18 [cluster="Unk.Serialize", file="GDAXBrokerageTests.cs", label="Entry Unk.Serialize", span=""];
m4_27 [cluster="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.Convert(T)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.Convert(T)", span="96-96"];
m4_36 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="84-84"];
m4_50 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="94-94"];
m4_53 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="96-96"];
m4_64 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="103-103"];
m4_75 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="112-112"];
m4_102 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="136-136"];
m4_105 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="136-136"];
m4_128 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(''BTCUSD'', e.Symbol.Value)", span="163-163"];
m4_129 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="actualFee += e.OrderFee", span="164-164"];
m4_130 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="actualQuantity += e.AbsoluteFillQuantity", span="165-165"];
m4_131 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(actualQuantity != orderQuantity ? Orders.OrderStatus.PartiallyFilled : Orders.OrderStatus.Filled, e.Status)", span="167-167"];
m4_161 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(status, e.Status)", span="205-205"];
m4_163 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(''BTCUSD'', e.Symbol.Value)", span="208-208"];
m4_164 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(0.11, e.OrderFee)", span="209-209"];
m4_165 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.That((quantity > 0 && e.Direction == Orders.OrderDirection.Buy) || (quantity < 0 && e.Direction == Orders.OrderDirection.Sell))", span="210-210"];
m4_167 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="raised.Set()", span="213-213"];
m4_172 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="211-211"];
m4_241 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="292-292"];
m4_248 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="297-297"];
m4_257 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="311-311"];
m4_259 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="311-311"];
m4_20 [cluster="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.CanConvert(System.Type)", file="GDAXBrokerageTests.cs", label="return typeof(T) == objectType;", span="76-76"];
m4_19 [cluster="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.CanConvert(System.Type)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.CanConvert(System.Type)", span="74-74"];
m4_29 [cluster="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.Convert(TResult)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.Convert(TResult)", span="103-103"];
m4_28 [cluster="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.Convert(TResult)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.Convert(TResult)", span="103-103"];
m4_38 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="84-84"];
m4_37 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="m.Execute(It.Is<IRestRequest>(r => !r.Resource.StartsWith(''/products/'') && !r.Resource.StartsWith(''/orders/'' + _brokerId)))", span="84-84"];
m4_52 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="94-94"];
m4_51 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="w.ReadyState", span="94-94"];
m4_55 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="96-96"];
m4_54 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="w.ReadyState", span="96-96"];
m4_66 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="103-103"];
m4_65 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="m.Connect()", span="103-103"];
m4_77 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="112-112"];
m4_76 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="m.Close()", span="112-112"];
m4_104 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="136-136"];
m4_103 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="a.Value", span="136-136"];
m4_107 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="136-136"];
m4_106 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="b.Value", span="136-136"];
m4_134 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="raised.Set()", span="170-170"];
m4_127 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="161-171"];
m4_133 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(0.01m, Math.Round(actualFee, 8))", span="169-169"];
m4_132 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(5.23512m, actualQuantity)", span="168-168"];
m4_162 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="orderId != null", span="206-206"];
m4_160 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="203-214"];
m4_168 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="203-214"];
m4_174 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="211-211"];
m4_173 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="c.Value.BrokerId.Where(b => b == _brokerId)", span="211-211"];
m4_216 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="261-261"];
m4_219 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="262-262"];
m4_243 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="292-292"];
m4_242 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="m.Execute(It.Is<IRestRequest>(r => !r.Resource.EndsWith(''1'')))", span="292-292"];
m4_250 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="297-297"];
m4_249 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="m.Execute(It.Is<IRestRequest>(r => !r.Resource.EndsWith(''2'')))", span="297-297"];
m4_23 [cluster="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.Create(System.Type, JToken)", file="GDAXBrokerageTests.cs", label="return Convert(token.Value<TResult>());", span="88-88"];
m4_30 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>", span=""];
m4_39 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="84-84"];
m4_135 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="161-171"];
m4_176 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="211-211"];
m4_218 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="261-261"];
m4_217 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="a.Symbol == ''USD''", span="261-261"];
m4_221 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="262-262"];
m4_220 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="a.Symbol == ''BTC''", span="262-262"];
m4_244 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="292-292"];
m4_25 [cluster="Unk.>", file="GDAXBrokerageTests.cs", label="Entry Unk.>", span=""];
m4_24 [cluster="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.Create(System.Type, JToken)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.Create(System.Type, JToken)", span="85-85"];
m4_32 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="74-74"];
m4_31 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="r.Resource.StartsWith(''/orders/'' + _brokerId) || r.Resource.StartsWith(''/orders/'' + _matchBrokerId)", span="74-74"];
m4_41 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="84-84"];
m4_40 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="!r.Resource.StartsWith(''/products/'') && !r.Resource.StartsWith(''/orders/'' + _brokerId)", span="84-84"];
m4_178 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="211-211"];
m4_177 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="b == _brokerId", span="211-211"];
m4_246 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="292-292"];
m4_245 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="!r.Resource.EndsWith(''1'')", span="292-292"];
m4_252 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="!r.Resource.EndsWith(''2'')", span="297-297"];
m4_253 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="297-297"];
m4_8 [cluster="Unk.Load", file="GDAXBrokerageTests.cs", label="Entry Unk.Load", span=""];
m4_9 [cluster="Unk.Create", file="GDAXBrokerageTests.cs", label="Entry Unk.Create", span=""];
m4_11 [cluster="Unk.CreateReader", file="GDAXBrokerageTests.cs", label="Entry Unk.CreateReader", span=""];
m4_125 [cluster="System.Threading.ManualResetEvent.ManualResetEvent(bool)", file="GDAXBrokerageTests.cs", label="Entry System.Threading.ManualResetEvent.ManualResetEvent(bool)", span="0-0"];
m4_62 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", span="98-98"];
m4_240 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.CancelOrder(QuantConnect.Orders.Order)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.CancelOrder(QuantConnect.Orders.Order)", span="92-92"];
m4_191 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder()", span="28-28"];
m4_254 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.UpdateOrderTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.UpdateOrderTest()", span="309-309"];
m4_255 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.UpdateOrderTest()", file="GDAXBrokerageTests.cs", label="Assert.Throws<NotSupportedException>(() => _unit.UpdateOrder(new LimitOrder()))", span="311-311"];
m4_256 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.UpdateOrderTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.UpdateOrderTest()", span="309-309"];
m4_95 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXTestsHelpers.GetArgs(string)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXTestsHelpers.GetArgs(string)", span="38-38"];
m4_17 [cluster="Unk.Returns", file="GDAXBrokerageTests.cs", label="Entry Unk.Returns", span=""];
m4_122 [cluster="System.Guid.NewGuid()", file="GDAXBrokerageTests.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m4_247 [cluster="Unk.EndsWith", file="GDAXBrokerageTests.cs", label="Entry Unk.EndsWith", span=""];
m4_137 [cluster="System.Threading.EventWaitHandle.Set()", file="GDAXBrokerageTests.cs", label="Entry System.Threading.EventWaitHandle.Set()", span="0-0"];
m4_100 [cluster="System.Collections.Generic.IEnumerable<TSource>.Max<TSource>(System.Func<TSource, decimal>)", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Max<TSource>(System.Func<TSource, decimal>)", span="0-0"];
m4_63 [cluster="Unk.Verify", file="GDAXBrokerageTests.cs", label="Entry Unk.Verify", span=""];
m4_202 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetTick(QuantConnect.Symbol)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetTick(QuantConnect.Symbol)", span="218-218"];
m4_260 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.UpdateOrder(QuantConnect.Orders.Order)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.UpdateOrder(QuantConnect.Orders.Order)", span="82-82"];
m4_12 [cluster="GDAXBrokerage.cstr", file="GDAXBrokerageTests.cs", label="Entry GDAXBrokerage.cstr", span=""];
m4_33 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SetupResponse(string, System.Net.HttpStatusCode)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SetupResponse(string, System.Net.HttpStatusCode)", span="82-82"];
m4_34 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SetupResponse(string, System.Net.HttpStatusCode)", file="GDAXBrokerageTests.cs", label="_rest.Setup(m => m.Execute(It.Is<IRestRequest>(r => !r.Resource.StartsWith(''/products/'') && !r.Resource.StartsWith(''/orders/'' + _brokerId)))).Returns(new RestSharp.RestResponse\r\n            {\r\n                Content = body,\r\n                StatusCode = httpStatus\r\n            })", span="84-88"];
m4_35 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SetupResponse(string, System.Net.HttpStatusCode)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SetupResponse(string, System.Net.HttpStatusCode)", span="82-82"];
m4_159 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", span="34-34"];
m4_123 [cluster="System.Guid.ToString()", file="GDAXBrokerageTests.cs", label="Entry System.Guid.ToString()", span="0-0"];
m4_93 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.Subscribe(QuantConnect.Packets.LiveNodePacket, System.Collections.Generic.IEnumerable<QuantConnect.Symbol>)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.Subscribe(QuantConnect.Packets.LiveNodePacket, System.Collections.Generic.IEnumerable<QuantConnect.Symbol>)", span="289-289"];
m4_196 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", span="242-242"];
m4_197 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", file="GDAXBrokerageTests.cs", label="var actual = _unit.GetTick(_symbol)", span="244-244"];
m4_198 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(333.98m, actual.BidPrice)", span="245-245"];
m4_199 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(333.99m, actual.AskPrice)", span="246-246"];
m4_200 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(5957, actual.Quantity)", span="248-248"];
m4_201 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", span="242-242"];
m4_42 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", span="92-92"];
m4_43 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", file="GDAXBrokerageTests.cs", label="_wss.Setup(w => w.ReadyState).Returns(WebSocketState.Open)", span="94-94"];
m4_44 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", file="GDAXBrokerageTests.cs", label="Assert.IsTrue(_unit.IsConnected)", span="95-95"];
m4_45 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", file="GDAXBrokerageTests.cs", label="_wss.Setup(w => w.ReadyState).Returns(WebSocketState.Closed)", span="96-96"];
m4_46 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", file="GDAXBrokerageTests.cs", label="Assert.IsFalse(_unit.IsConnected)", span="97-97"];
m4_47 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", span="92-92"];
m4_98 [cluster="Unk.AreEqual", file="GDAXBrokerageTests.cs", label="Entry Unk.AreEqual", span=""];
m4_136 [cluster="System.Math.Round(decimal, int)", file="GDAXBrokerageTests.cs", label="Entry System.Math.Round(decimal, int)", span="0-0"];
m4_147 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal)", span="193-193"];
m4_149 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal)", file="GDAXBrokerageTests.cs", label="SetupResponse(JsonConvert.SerializeObject(response), httpStatus)", span="200-200"];
m4_151 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal)", file="GDAXBrokerageTests.cs", label="_unit.OrderStatusChanged += (s, e) =>\r\n            {\r\n                Assert.AreEqual(status, e.Status);\r\n                if (orderId != null)\r\n                {\r\n                    Assert.AreEqual(''BTCUSD'', e.Symbol.Value);\r\n                    Assert.AreEqual(0.11, e.OrderFee);\r\n                    Assert.That((quantity > 0 && e.Direction == Orders.OrderDirection.Buy) || (quantity < 0 && e.Direction == Orders.OrderDirection.Sell));\r\n                    Assert.IsTrue(orderId == null || _unit.CachedOrderIDs.SelectMany(c => c.Value.BrokerId.Where(b => b == _brokerId)).Any());\r\n                }\r\n                raised.Set();\r\n            }", span="203-214"];
m4_152 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal)", file="GDAXBrokerageTests.cs", label="bool actual = _unit.PlaceOrder(new Orders.LimitOrder(_symbol, quantity, price, DateTime.UtcNow))", span="215-215"];
m4_148 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal)", file="GDAXBrokerageTests.cs", label="var response = new\r\n            {\r\n                order_id = _brokerId,\r\n                fill_fees = ''0.11''\r\n            }", span="195-199"];
m4_150 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal)", file="GDAXBrokerageTests.cs", label="ManualResetEvent raised = new ManualResetEvent(false)", span="202-202"];
m4_153 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal)", file="GDAXBrokerageTests.cs", label="Assert.IsTrue(actual || (orderId == null && !actual))", span="217-217"];
m4_154 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal)", file="GDAXBrokerageTests.cs", label="Assert.IsTrue(raised.WaitOne(1000))", span="218-218"];
m4_155 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal)", span="193-193"];
m4_169 [cluster="Unk.That", file="GDAXBrokerageTests.cs", label="Entry Unk.That", span=""];
m4_21 [cluster="Unk.>", file="GDAXBrokerageTests.cs", label="Entry Unk.>", span=""];
m4_68 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", span="110-110"];
m4_69 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", file="GDAXBrokerageTests.cs", label="_wss.Setup(m => m.Close()).Verifiable()", span="112-112"];
m4_70 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", file="GDAXBrokerageTests.cs", label="_unit.Connect()", span="113-113"];
m4_71 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", file="GDAXBrokerageTests.cs", label="_unit.Disconnect()", span="114-114"];
m4_72 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", file="GDAXBrokerageTests.cs", label="_wss.Verify()", span="115-115"];
m4_73 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", span="110-110"];
m4_138 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", span="180-180"];
m4_139 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="var actual = _unit.GetAuthenticationToken('''', ''POST'', ''http://localhost'')", span="182-182"];
m4_140 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="Assert.IsFalse(string.IsNullOrEmpty(actual.Signature))", span="184-184"];
m4_141 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="Assert.IsFalse(string.IsNullOrEmpty(actual.Timestamp))", span="185-185"];
m4_142 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(''pass'', actual.Passphrase)", span="186-186"];
m4_143 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(''abc'', actual.Key)", span="187-187"];
m4_144 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", span="180-180"];
m4_101 [cluster="string.ToString()", file="GDAXBrokerageTests.cs", label="Entry string.ToString()", span="0-0"];
m4_194 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m4_99 [cluster="System.Collections.Generic.IEnumerable<TSource>.Min<TSource>(System.Func<TSource, decimal>)", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Min<TSource>(System.Func<TSource, decimal>)", span="0-0"];
m4_215 [cluster="Unk.Single", file="GDAXBrokerageTests.cs", label="Entry Unk.Single", span=""];
m4_13 [cluster="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.WriteJson(JsonWriter, object, JsonSerializer)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.WriteJson(JsonWriter, object, JsonSerializer)", span="59-59"];
m4_157 [cluster="Unk.SetupResponse", file="GDAXBrokerageTests.cs", label="Entry Unk.SetupResponse", span=""];
m4_16 [cluster="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.WriteJson(JsonWriter, object, JsonSerializer)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.WriteJson(JsonWriter, object, JsonSerializer)", span="59-59"];
m4_156 [cluster="Unk.SerializeObject", file="GDAXBrokerageTests.cs", label="Entry Unk.SerializeObject", span=""];
m4_195 [cluster="System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", span="0-0"];
m4_49 [cluster="Unk.IsFalse", file="GDAXBrokerageTests.cs", label="Entry Unk.IsFalse", span=""];
m4_15 [cluster="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.WriteJson(JsonWriter, object, JsonSerializer)", file="GDAXBrokerageTests.cs", label="serializer.Serialize(writer, valueToSerialize)", span="64-64"];
m4_14 [cluster="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>.WriteJson(JsonWriter, object, JsonSerializer)", file="GDAXBrokerageTests.cs", label="var valueToSerialize = Convert((T)value)", span="62-62"];
m4_79 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", span="122-122"];
m4_80 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", file="GDAXBrokerageTests.cs", label="string json = _orderData.Replace(''type_value'', type).Replace(''side_value'', side)", span="124-124"];
m4_82 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", file="GDAXBrokerageTests.cs", label="_unit.Subscribe(null, new[] { _symbol })", span="127-127"];
m4_83 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", file="GDAXBrokerageTests.cs", label="_unit.AskPrices[_symbol].TryAdd(orderId, 124m)", span="129-129"];
m4_84 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", file="GDAXBrokerageTests.cs", label="_unit.BidPrices[_symbol].TryAdd(orderId, 122m)", span="130-130"];
m4_85 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", file="GDAXBrokerageTests.cs", label="_unit.OnMessage(_unit, GDAXTestsHelpers.GetArgs(json))", span="132-132"];
m4_86 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", file="GDAXBrokerageTests.cs", label="var actual = _unit.Ticks.First()", span="133-133"];
m4_88 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", file="GDAXBrokerageTests.cs", label="var mid = (_unit.AskPrices[_symbol].Min(a => a.Value) + _unit.BidPrices[_symbol].Max(b => b.Value)) / 2m", span="136-136"];
m4_81 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", file="GDAXBrokerageTests.cs", label="string orderId = ''d50ec984-77a8-460a-b958-66f114b0de9b''", span="125-125"];
m4_87 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(123.45m, side == ''buy'' ? actual.BidPrice : actual.AskPrice)", span="135-135"];
m4_89 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(mid, actual.Price)", span="137-137"];
m4_90 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(''BTCUSD'', actual.Symbol.Value.ToString())", span="138-138"];
m4_91 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageOrderOpenOrChangeTest(string, string)", span="122-122"];
m4_92 [cluster="string.Replace(string, string)", file="GDAXBrokerageTests.cs", label="Entry string.Replace(string, string)", span="0-0"];
m4_78 [cluster="Unk.Close", file="GDAXBrokerageTests.cs", label="Entry Unk.Close", span=""];
m4_74 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.Disconnect()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.Disconnect()", span="111-111"];
m4_179 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", span="222-222"];
m4_180 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="SetupResponse(_openOrderData)", span="224-224"];
m4_181 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="_unit.CachedOrderIDs.TryAdd(1, new Orders.MarketOrder { BrokerId = new List<string> { ''1'' }, Price = 123 })", span="226-226"];
m4_182 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="var actual = _unit.GetOpenOrders()", span="228-228"];
m4_183 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(2, actual.Count())", span="230-230"];
m4_184 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(0.01, actual.First().Quantity)", span="231-231"];
m4_185 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(OrderDirection.Buy, actual.First().Direction)", span="232-232"];
m4_186 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(0.1, actual.First().Price)", span="233-233"];
m4_187 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(-1, actual.Last().Quantity)", span="235-235"];
m4_188 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(OrderDirection.Sell, actual.Last().Direction)", span="236-236"];
m4_189 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(1, actual.Last().Price)", span="237-237"];
m4_190 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", span="222-222"];
m4_26 [cluster="Unk.StartsWith", file="GDAXBrokerageTests.cs", label="Entry Unk.StartsWith", span=""];
m4_146 [cluster="string.IsNullOrEmpty(string)", file="GDAXBrokerageTests.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m4_261 [file="GDAXBrokerageTests.cs", label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", span=""];
m4_267 [file="GDAXBrokerageTests.cs", label=string, span=""];
m4_262 [file="GDAXBrokerageTests.cs", label=actualFee, span=""];
m4_263 [file="GDAXBrokerageTests.cs", label=actualQuantity, span=""];
m4_264 [file="GDAXBrokerageTests.cs", label=orderQuantity, span=""];
m4_266 [file="GDAXBrokerageTests.cs", label="QuantConnect.Orders.OrderStatus", span=""];
m4_268 [file="GDAXBrokerageTests.cs", label=decimal, span=""];
m4_269 [file="GDAXBrokerageTests.cs", label=raised, span=""];
m4_265 [file="GDAXBrokerageTests.cs", label=raised, span=""];
n211 -> n15  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n19  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n28  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n35  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n38  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n40  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n46  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n58  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n60  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n62  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n65  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n71  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n76  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n78  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n80  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n87  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n92  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n93  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n96  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n100  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n102  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n103  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n107  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n110  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n111  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n117  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n119  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n140  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n144  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n145  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n148  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n151  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n153  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n183  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n187  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n189  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n198  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n199  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n211 -> n200  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
n19 -> n24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n19 -> n19  [color=darkseagreen4, key=1, label=kvp, style=dashed];
n25 -> n25  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<QuantConnect.Symbol, QuantConnect.Securities.Security>", style=dashed];
n28 -> n31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n32 -> n32  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, QuantConnect.Securities.Cash>", style=dashed];
n34 -> n36  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n34 -> n37  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n34 -> n40  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n34 -> n42  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n34 -> n43  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n41 -> n43  [color=darkseagreen4, key=1, label=orderId, style=dashed];
n56 -> n199  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n56 -> n200  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n57 -> n59  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n57 -> n62  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n57 -> n65  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n57 -> n67  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n57 -> n68  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n66 -> n68  [color=darkseagreen4, key=1, label=orderId, style=dashed];
n75 -> n77  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n75 -> n80  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n75 -> n83  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n75 -> n84  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n96 -> n176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n97 -> n99  [color=darkseagreen4, key=1, label=kvp, style=dashed];
n97 -> n101  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n102  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n103  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n107  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n108  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n110  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n111  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n117  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n119  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n122  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n140  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n144  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n145  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n147  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n149  [color=darkseagreen4, key=1, label=order, style=dashed];
n97 -> n153  [color=darkseagreen4, key=1, label=order, style=dashed];
n99 -> n99  [color=darkseagreen4, key=1, label=kvp, style=dashed];
n102 -> n102  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n103  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n107  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n108  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n110  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n111  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n117  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n119  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n122  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n140  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n144  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n145  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n147  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n149  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n153  [color=darkseagreen4, key=1, label=order, style=dashed];
n105 -> n146  [color=darkseagreen4, key=1, label=fills, style=dashed];
n105 -> n152  [color=darkseagreen4, key=1, label=fills, style=dashed];
n110 -> n110  [color=darkseagreen4, key=1, label=order, style=dashed];
n110 -> n111  [color=darkseagreen4, key=1, label=order, style=dashed];
n110 -> n117  [color=darkseagreen4, key=1, label=order, style=dashed];
n110 -> n119  [color=darkseagreen4, key=1, label=order, style=dashed];
n110 -> n122  [color=darkseagreen4, key=1, label=order, style=dashed];
n110 -> n140  [color=darkseagreen4, key=1, label=order, style=dashed];
n110 -> n144  [color=darkseagreen4, key=1, label=order, style=dashed];
n110 -> n145  [color=darkseagreen4, key=1, label=order, style=dashed];
n110 -> n147  [color=darkseagreen4, key=1, label=order, style=dashed];
n110 -> n149  [color=darkseagreen4, key=1, label=order, style=dashed];
n110 -> n153  [color=darkseagreen4, key=1, label=order, style=dashed];
n137 -> n152  [color=darkseagreen4, key=1, label=fills, style=dashed];
n141 -> n145  [color=darkseagreen4, key=1, label=message, style=dashed];
n153 -> n153  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n100  [color=darkseagreen4, key=1, label=kvp, style=dashed];
n100 -> n101  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n102  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n103  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n107  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n108  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n110  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n111  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n117  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n119  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n122  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n140  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n144  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n145  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n147  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n149  [color=darkseagreen4, key=1, label=order, style=dashed];
n100 -> n153  [color=darkseagreen4, key=1, label=order, style=dashed];
n146 -> n148  [color=darkseagreen4, key=1, label=fill, style=dashed];
n146 -> n151  [color=darkseagreen4, key=1, label=fill, style=dashed];
n152 -> n179  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n177 -> n177  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<int, QuantConnect.Orders.Order>", style=dashed];
n186 -> n189  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Option.Option", style=dashed];
m1_51 -> m1_54  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.Messages.Order", style=dashed];
m1_51 -> m1_56  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.Messages.Order", style=dashed];
m1_14 -> m1_17  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_15 -> m1_17  [color=darkseagreen4, key=1, label=identity, style=dashed];
m1_15 -> m1_21  [color=darkseagreen4, key=1, label=identity, style=dashed];
m1_15 -> m1_22  [color=darkseagreen4, key=1, label=identity, style=dashed];
m1_15 -> m1_23  [color=darkseagreen4, key=1, label=identity, style=dashed];
m1_15 -> m1_19  [color=darkseagreen4, key=1, label=identity, style=dashed];
m1_15 -> m1_20  [color=darkseagreen4, key=1, label=identity, style=dashed];
m1_16 -> m1_19  [color=darkseagreen4, key=1, label=data, style=dashed];
m1_18 -> m1_20  [color=darkseagreen4, key=1, label=bytes, style=dashed];
m1_2 -> m1_4  [color=darkseagreen4, key=1, label=token, style=dashed];
m1_1 -> m1_4  [color=green, key=1, label=identity, style=dashed];
m1_1 -> m1_5  [color=green, key=1, label=identity, style=dashed];
m1_1 -> m1_6  [color=darkseagreen4, key=1, label=identity, style=dashed];
m1_1 -> m1_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_32 -> m1_34  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderType", style=dashed];
m1_32 -> m1_35  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderType", style=dashed];
m1_32 -> m1_37  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderType", style=dashed];
m1_60 -> m1_16  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m3_4 -> m3_6  [color=green, key=1, label=restClient, style=dashed];
m4_108 -> m4_111  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m4_108 -> m4_120  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m4_109 -> m4_119  [color=darkseagreen4, key=1, label=json, style=dashed];
m4_118 -> m4_128  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m4_118 -> m4_131  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m4_110 -> m4_114  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_112 -> m4_119  [color=darkseagreen4, key=1, label=json, style=dashed];
m4_113 -> m4_131  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m4_115 -> m4_134  [color=darkseagreen4, key=1, label=raised, style=dashed];
m4_115 -> m4_120  [color=darkseagreen4, key=1, label=raised, style=dashed];
m4_225 -> m4_227  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_225 -> m4_228  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_225 -> m4_229  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_225 -> m4_230  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_10 -> m4_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_57 -> m4_64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_207 -> m4_216  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_207 -> m4_209  [color=darkseagreen4, key=1, label=usd, style=dashed];
m4_207 -> m4_210  [color=darkseagreen4, key=1, label=usd, style=dashed];
m4_208 -> m4_219  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_208 -> m4_211  [color=darkseagreen4, key=1, label=btc, style=dashed];
m4_208 -> m4_212  [color=darkseagreen4, key=1, label=btc, style=dashed];
m4_233 -> m4_237  [color=darkseagreen4, key=1, label=bool, style=dashed];
m4_234 -> m4_241  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_235 -> m4_248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_166 -> m4_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_129 -> m4_133  [color=darkseagreen4, key=1, label=actualFee, style=dashed];
m4_130 -> m4_132  [color=darkseagreen4, key=1, label=actualQuantity, style=dashed];
m4_19 -> m4_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_28 -> m4_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_37 -> m4_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_103 -> m4_103  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, decimal>", style=dashed];
m4_106 -> m4_106  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, decimal>", style=dashed];
m4_127 -> m4_131  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m4_160 -> m4_163  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m4_160 -> m4_164  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m4_160 -> m4_165  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m4_173 -> m4_173  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<int, QuantConnect.Orders.Order>", style=dashed];
m4_173 -> m4_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_242 -> m4_244  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_249 -> m4_251  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_30 -> m4_23  [color=darkseagreen4, key=1, label="QuantConnect.Util.TypeChangeJsonConverter<T, TResult>", style=dashed];
m4_9 -> m4_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_255 -> m4_257  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_34 -> m4_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_197 -> m4_199  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_197 -> m4_200  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_43 -> m4_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_45 -> m4_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_147 -> m4_149  [color=darkseagreen4, key=1, label="System.Net.HttpStatusCode", style=dashed];
m4_147 -> m4_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_147 -> m4_161  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderStatus", style=dashed];
m4_147 -> m4_162  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_147 -> m4_165  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m4_147 -> m4_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_151 -> m4_161  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m4_151 -> m4_163  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m4_151 -> m4_164  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m4_151 -> m4_165  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m4_150 -> m4_167  [color=darkseagreen4, key=1, label=raised, style=dashed];
m4_150 -> m4_154  [color=darkseagreen4, key=1, label=raised, style=dashed];
m4_69 -> m4_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_139 -> m4_141  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_139 -> m4_142  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_139 -> m4_143  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_13 -> m4_15  [color=darkseagreen4, key=1, label=JsonWriter, style=dashed];
m4_79 -> m4_87  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_80 -> m4_85  [color=darkseagreen4, key=1, label=json, style=dashed];
m4_86 -> m4_89  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_86 -> m4_90  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_88 -> m4_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_88 -> m4_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_81 -> m4_83  [color=darkseagreen4, key=1, label=orderId, style=dashed];
m4_81 -> m4_84  [color=darkseagreen4, key=1, label=orderId, style=dashed];
m4_182 -> m4_184  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_182 -> m4_185  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_182 -> m4_186  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_182 -> m4_187  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_182 -> m4_188  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_182 -> m4_189  [color=darkseagreen4, key=1, label=actual, style=dashed];
m4_261 -> m4_8  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_9  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_43  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_44  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_45  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_46  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_57  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_58  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_59  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_69  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_70  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_71  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_72  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_82  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_83  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_84  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_85  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_114  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_119  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_149  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_166  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_180  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_204  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_223  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_255  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_261 -> m4_258  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m4_267 -> m4_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_267 -> m4_162  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_264 -> m4_131  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m4_266 -> m4_161  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderStatus", style=dashed];
m4_268 -> m4_165  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m4_269 -> m4_167  [color=darkseagreen4, key=1, label=raised, style=dashed];
m4_265 -> m4_134  [color=darkseagreen4, key=1, label=raised, style=dashed];
}
