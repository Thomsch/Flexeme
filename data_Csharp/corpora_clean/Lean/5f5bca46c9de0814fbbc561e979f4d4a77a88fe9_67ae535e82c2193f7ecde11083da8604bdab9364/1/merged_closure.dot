digraph  {
n0 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="Entry QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", span="33-33"];
n1 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="var isLong = security.Holdings.IsLong", span="36-36"];
n2 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="var isShort = security.Holdings.IsShort", span="37-37"];
n4 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="var quantityHoldings = (decimal)security.Holdings.Quantity", span="40-40"];
n5 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="var absoluteHoldingsQuantity = security.Holdings.AbsoluteQuantity", span="41-41"];
n6 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="var averageHoldingsPrice = security.Holdings.AveragePrice", span="42-42"];
n8 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="security.Holdings.AddNewSale(fill.FillPrice * Convert.ToDecimal(fill.AbsoluteFillQuantity))", span="49-49"];
n9 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="var feeThisOrder = fill.OrderFee", span="52-52"];
n10 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="security.Holdings.AddNewFee(feeThisOrder)", span="53-53"];
n11 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="portfolio.CashBook[CashBook.AccountCurrency].AddAmount(-feeThisOrder)", span="54-54"];
n12 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="isLong && fill.Direction == OrderDirection.Sell", span="58-58"];
n13 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="quantityHoldings >= fill.AbsoluteFillQuantity", span="61-61"];
n14 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="lastTradeProfit = (fill.FillPrice - averageHoldingsPrice) * fill.AbsoluteFillQuantity", span="64-64"];
n15 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="lastTradeProfit = (fill.FillPrice - averageHoldingsPrice) * quantityHoldings", span="69-69"];
n17 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="isShort && fill.Direction == OrderDirection.Buy", span="73-73"];
n18 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="absoluteHoldingsQuantity >= fill.FillQuantity", span="76-76"];
n19 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="lastTradeProfit = (averageHoldingsPrice - fill.FillPrice) * fill.AbsoluteFillQuantity", span="79-79"];
n20 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="lastTradeProfit = (averageHoldingsPrice - fill.FillPrice) * absoluteHoldingsQuantity", span="84-84"];
n23 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="security.Holdings.AddNewProfit(lastTradeProfit)", span="93-93"];
n24 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="security.Holdings.SetLastTradeProfit(lastTradeProfit)", span="94-94"];
n25 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="portfolio.AddTransactionRecord(security.LocalTime.ConvertToUtc(security.Exchange.TimeZone), lastTradeProfit - 2 * feeThisOrder)", span="95-95"];
n26 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="var amount = fill.FillPrice * Convert.ToDecimal(fill.FillQuantity)", span="99-99"];
n27 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="security.SettlementModel.ApplyFunds(portfolio, security, fill.UtcTime, CashBook.AccountCurrency, -amount)", span="100-100"];
n29 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="averageHoldingsPrice = fill.FillPrice", span="107-107"];
n30 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="quantityHoldings = fill.FillQuantity", span="108-108"];
n32 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="fill.Direction", span="113-113"];
n34 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="averageHoldingsPrice = ((averageHoldingsPrice * quantityHoldings) + (fill.FillQuantity * fill.FillPrice)) / (quantityHoldings + (decimal)fill.FillQuantity)", span="117-117"];
n35 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="quantityHoldings += fill.FillQuantity", span="119-119"];
n37 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="quantityHoldings += fill.FillQuantity", span="124-124"];
n39 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="averageHoldingsPrice = fill.FillPrice", span="128-128"];
n43 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="fill.Direction", span="140-140"];
n45 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="quantityHoldings += fill.FillQuantity", span="144-144"];
n47 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="averageHoldingsPrice = fill.FillPrice", span="148-148"];
n51 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="averageHoldingsPrice = ((averageHoldingsPrice * quantityHoldings) + (Convert.ToDecimal(fill.FillQuantity) * fill.FillPrice)) / (quantityHoldings + (decimal)fill.FillQuantity)", span="160-160"];
n52 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="quantityHoldings += fill.FillQuantity", span="161-161"];
n55 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="security.Holdings.SetHoldings(averageHoldingsPrice, Convert.ToInt32(quantityHoldings))", span="172-172"];
n31 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label=isLong, span="110-110"];
n3 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="var closedPosition = false", span="38-38"];
n42 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label=isShort, span="137-137"];
n22 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label=closedPosition, span="90-90"];
n28 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="quantityHoldings == 0", span="104-104"];
n7 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="var lastTradeProfit = 0m", span="44-44"];
n57 [cluster="System.Convert.ToDecimal(int)", label="Entry System.Convert.ToDecimal(int)", span="0-0"];
n58 [cluster="QuantConnect.Securities.SecurityHolding.AddNewSale(decimal)", label="Entry QuantConnect.Securities.SecurityHolding.AddNewSale(decimal)", span="326-326"];
n59 [cluster="QuantConnect.Securities.SecurityHolding.AddNewFee(decimal)", label="Entry QuantConnect.Securities.SecurityHolding.AddNewFee(decimal)", span="308-308"];
n60 [cluster="QuantConnect.Securities.Cash.AddAmount(decimal)", label="Entry QuantConnect.Securities.Cash.AddAmount(decimal)", span="100-100"];
n16 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="closedPosition = true", span="71-71"];
n21 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="closedPosition = true", span="86-86"];
n61 [cluster="QuantConnect.Securities.SecurityHolding.AddNewProfit(decimal)", label="Entry QuantConnect.Securities.SecurityHolding.AddNewProfit(decimal)", span="317-317"];
n62 [cluster="QuantConnect.Securities.SecurityHolding.SetLastTradeProfit(decimal)", label="Entry QuantConnect.Securities.SecurityHolding.SetLastTradeProfit(decimal)", span="335-335"];
n63 [cluster="System.DateTime.ConvertToUtc(DateTimeZone, bool)", label="Entry System.DateTime.ConvertToUtc(DateTimeZone, bool)", span="449-449"];
n64 [cluster="QuantConnect.Securities.SecurityPortfolioManager.AddTransactionRecord(System.DateTime, decimal)", label="Entry QuantConnect.Securities.SecurityPortfolioManager.AddTransactionRecord(System.DateTime, decimal)", span="665-665"];
n65 [cluster="QuantConnect.Securities.ISettlementModel.ApplyFunds(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, System.DateTime, string, decimal)", label="Entry QuantConnect.Securities.ISettlementModel.ApplyFunds(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, System.DateTime, string, decimal)", span="32-32"];
n33 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="OrderDirection.Buy", span="115-115"];
n36 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="OrderDirection.Sell", span="123-123"];
n38 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="quantityHoldings < 0", span="125-125"];
n40 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="quantityHoldings == 0", span="130-130"];
n41 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="averageHoldingsPrice = 0", span="132-132"];
n53 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label=Exception, span="166-166"];
n44 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="OrderDirection.Buy", span="142-142"];
n50 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="OrderDirection.Sell", span="156-156"];
n46 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="quantityHoldings > 0", span="145-145"];
n48 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="quantityHoldings == 0", span="150-150"];
n49 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="averageHoldingsPrice = 0", span="152-152"];
n54 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="Log.Error(err)", span="168-168"];
n66 [cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)", label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98"];
n56 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", label="Exit QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", span="33-33"];
n67 [cluster="System.Convert.ToInt32(decimal)", label="Entry System.Convert.ToInt32(decimal)", span="0-0"];
n68 [cluster="QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", label="Entry QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", span="343-343"];
m0_69 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label="var entry = zipStream.GetNextEntry()", span="186-186"];
m0_64 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.UnzipData(byte[])", span="171-171"];
m0_65 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label="var data = new Dictionary<string, string>()", span="174-174"];
m0_66 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label="var ms = new MemoryStream(zipData)", span="178-178"];
m0_73 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label="data.Add(entry.Name, buffer.GetString())", span="195-195"];
m0_76 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label="return data;", span="210-210"];
m0_67 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label="var zipStream = new ZipInputStream(ms)", span="181-181"];
m0_68 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label=true, span="183-183"];
m0_72 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label="zipStream.Read(buffer, 0, (int)entry.Size)", span="192-192"];
m0_74 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label=Exception, span="206-206"];
m0_70 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label="entry != null", span="188-188"];
m0_71 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label="var buffer = new byte[entry.Size]", span="191-191"];
m0_75 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label="Log.Error(err)", span="208-208"];
m0_77 [cluster="QuantConnect.Compression.UnzipData(byte[])", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.UnzipData(byte[])", span="171-171"];
m0_16 [cluster="QuantConnect.Compression.ZipData(string, System.Collections.Generic.Dictionary<string, string>)", file="GDAXBrokerageModel.cs", label="Log.Error(err)", span="82-82"];
m0_262 [cluster="QuantConnect.Compression.ReadZipEntry(Ionic.Zip.ZipEntry)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.ReadZipEntry(Ionic.Zip.ZipEntry)", span="557-557"];
m0_258 [cluster="QuantConnect.Compression.ReadZipEntry(Ionic.Zip.ZipEntry)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.ReadZipEntry(Ionic.Zip.ZipEntry)", span="557-557"];
m0_259 [cluster="QuantConnect.Compression.ReadZipEntry(Ionic.Zip.ZipEntry)", file="GDAXBrokerageModel.cs", label="var entryReader = new StreamReader(entry.OpenReader())", span="559-559"];
m0_261 [cluster="QuantConnect.Compression.ReadZipEntry(Ionic.Zip.ZipEntry)", file="GDAXBrokerageModel.cs", label="yield return entryReader.ReadLine();", span="563-563"];
m0_260 [cluster="QuantConnect.Compression.ReadZipEntry(Ionic.Zip.ZipEntry)", file="GDAXBrokerageModel.cs", label="!entryReader.EndOfStream", span="561-561"];
m0_210 [cluster="ZipFile.cstr", file="GDAXBrokerageModel.cs", label="Entry ZipFile.cstr", span=""];
m0_128 [cluster="QuantConnect.Compression.Zip(string, string, string)", file="GDAXBrokerageModel.cs", label="stream.PutNextEntry(entry)", span="295-295"];
m0_125 [cluster="QuantConnect.Compression.Zip(string, string, string)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.Zip(string, string, string)", span="290-290"];
m0_126 [cluster="QuantConnect.Compression.Zip(string, string, string)", file="GDAXBrokerageModel.cs", label="var stream = new ZipOutputStream(File.Create(zipPath))", span="292-292"];
m0_127 [cluster="QuantConnect.Compression.Zip(string, string, string)", file="GDAXBrokerageModel.cs", label="var entry = new ZipEntry(zipEntry)", span="294-294"];
m0_130 [cluster="QuantConnect.Compression.Zip(string, string, string)", file="GDAXBrokerageModel.cs", label="var dataReader = new MemoryStream(Encoding.Default.GetBytes(data))", span="297-297"];
m0_133 [cluster="QuantConnect.Compression.Zip(string, string, string)", file="GDAXBrokerageModel.cs", label="stream.Write(buffer, 0, sourceBytes)", span="303-303"];
m0_129 [cluster="QuantConnect.Compression.Zip(string, string, string)", file="GDAXBrokerageModel.cs", label="var buffer = new byte[4096]", span="296-296"];
m0_132 [cluster="QuantConnect.Compression.Zip(string, string, string)", file="GDAXBrokerageModel.cs", label="sourceBytes = dataReader.Read(buffer, 0, buffer.Length)", span="302-302"];
m0_131 [cluster="QuantConnect.Compression.Zip(string, string, string)", file="GDAXBrokerageModel.cs", label="int sourceBytes", span="299-299"];
m0_134 [cluster="QuantConnect.Compression.Zip(string, string, string)", file="GDAXBrokerageModel.cs", label="sourceBytes > 0", span="305-305"];
m0_135 [cluster="QuantConnect.Compression.Zip(string, string, string)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.Zip(string, string, string)", span="290-290"];
m0_300 [cluster="string.LastIndexOf(char)", file="GDAXBrokerageModel.cs", label="Entry string.LastIndexOf(char)", span="0-0"];
m0_118 [cluster="System.IO.File.OpenRead(string)", file="GDAXBrokerageModel.cs", label="Entry System.IO.File.OpenRead(string)", span="0-0"];
m0_25 [cluster="QuantConnect.Notifications.NotificationManager.Email(string, string, string, string)", file="GDAXBrokerageModel.cs", label="return allow;", span="102-102"];
m0_27 [cluster="QuantConnect.Notifications.NotificationEmail.NotificationEmail(string, string, string, string)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Notifications.NotificationEmail.NotificationEmail(string, string, string, string)", span="124-124"];
m0_62 [cluster="StreamWriter.cstr", file="GDAXBrokerageModel.cs", label="Entry StreamWriter.cstr", span=""];
m0_231 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="GDAXBrokerageModel.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m0_48 [cluster="QuantConnect.Compression.ZipData(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>)", file="GDAXBrokerageModel.cs", label="return success;", span="133-133"];
m0_277 [cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0"];
m0_244 [cluster="QuantConnect.Compression.ReadLines(string)", file="GDAXBrokerageModel.cs", label="return ReadLinesImpl(filename, firstEntryOnly: true).Single().Value;", span="531-531"];
m0_240 [cluster="QuantConnect.Compression.ReadLines(string)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.ReadLines(string)", span="521-521"];
m0_241 [cluster="QuantConnect.Compression.ReadLines(string)", file="GDAXBrokerageModel.cs", label="!File.Exists(filename)", span="523-523"];
m0_242 [cluster="QuantConnect.Compression.ReadLines(string)", file="GDAXBrokerageModel.cs", label="Log.Error(''Compression.ReadFirstZipEntry(): File does not exist: '' + filename)", span="525-525"];
m0_243 [cluster="QuantConnect.Compression.ReadLines(string)", file="GDAXBrokerageModel.cs", label="return Enumerable.Empty<string>();", span="526-526"];
m0_245 [cluster="QuantConnect.Compression.ReadLines(string)", file="GDAXBrokerageModel.cs", label=Exception, span="533-533"];
m0_246 [cluster="QuantConnect.Compression.ReadLines(string)", file="GDAXBrokerageModel.cs", label="Log.Error(err)", span="535-535"];
m0_247 [cluster="QuantConnect.Compression.ReadLines(string)", file="GDAXBrokerageModel.cs", label="return Enumerable.Empty<string>();", span="537-537"];
m0_248 [cluster="QuantConnect.Compression.ReadLines(string)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.ReadLines(string)", span="521-521"];
m0_339 [cluster="System.IO.MemoryStream.ToArray()", file="GDAXBrokerageModel.cs", label="Entry System.IO.MemoryStream.ToArray()", span="0-0"];
m0_23 [cluster="QuantConnect.Notifications.NotificationManager.Email(string, string, string, string)", file="GDAXBrokerageModel.cs", label="var email = new NotificationEmail(address, subject, message, data)", span="98-98"];
m0_306 [cluster="System.Collections.Generic.List<T>.Add(T)", file="GDAXBrokerageModel.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m0_88 [cluster="QuantConnect.Compression.ZipBytes(byte[], string)", file="GDAXBrokerageModel.cs", label="stream.PutNextEntry(entry)", span="225-225"];
m0_84 [cluster="QuantConnect.Compression.ZipBytes(byte[], string)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.ZipBytes(byte[], string)", span="219-219"];
m0_85 [cluster="QuantConnect.Compression.ZipBytes(byte[], string)", file="GDAXBrokerageModel.cs", label="var memoryStream = new MemoryStream()", span="221-221"];
m0_87 [cluster="QuantConnect.Compression.ZipBytes(byte[], string)", file="GDAXBrokerageModel.cs", label="var entry = new ZipEntry(zipEntryName)", span="224-224"];
m0_90 [cluster="QuantConnect.Compression.ZipBytes(byte[], string)", file="GDAXBrokerageModel.cs", label="StreamUtils.Copy(new MemoryStream(bytes), stream, buffer)", span="227-227"];
m0_86 [cluster="QuantConnect.Compression.ZipBytes(byte[], string)", file="GDAXBrokerageModel.cs", label="var stream = new ZipOutputStream(memoryStream)", span="222-222"];
m0_91 [cluster="QuantConnect.Compression.ZipBytes(byte[], string)", file="GDAXBrokerageModel.cs", label="return memoryStream.GetBuffer();", span="228-228"];
m0_89 [cluster="QuantConnect.Compression.ZipBytes(byte[], string)", file="GDAXBrokerageModel.cs", label="var buffer = new byte[16*1024]", span="226-226"];
m0_92 [cluster="QuantConnect.Compression.ZipBytes(byte[], string)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.ZipBytes(byte[], string)", span="219-219"];
m0_216 [cluster="System.IO.StreamReader.Close()", file="GDAXBrokerageModel.cs", label="Entry System.IO.StreamReader.Close()", span="0-0"];
m0_314 [cluster="Unk.CreateInputTarArchive", file="GDAXBrokerageModel.cs", label="Entry Unk.CreateInputTarArchive", span=""];
m0_355 [cluster="System.Math.Max(int, int)", file="GDAXBrokerageModel.cs", label="Entry System.Math.Max(int, int)", span="0-0"];
m0_6 [cluster="QuantConnect.Compression.ZipData(string, System.Collections.Generic.Dictionary<string, string>)", file="GDAXBrokerageModel.cs", label="var file = Encoding.Default.GetBytes(filenamesAndData[filename])", span="60-60"];
m0_29 [cluster="Unk.Close", file="GDAXBrokerageModel.cs", label="Entry Unk.Close", span=""];
m0_30 [cluster="QuantConnect.Notifications.NotificationManager.Sms(string, string)", file="GDAXBrokerageModel.cs", label="!_liveMode", span="112-112"];
m0_32 [cluster="QuantConnect.Compression.ZipData(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>)", file="GDAXBrokerageModel.cs", label="var success = true", span="96-96"];
m0_35 [cluster="QuantConnect.Compression.ZipData(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>)", file="GDAXBrokerageModel.cs", label=filenamesAndData, span="104-104"];
m0_31 [cluster="QuantConnect.Compression.ZipData(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.ZipData(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>)", span="94-94"];
m0_33 [cluster="QuantConnect.Compression.ZipData(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>)", file="GDAXBrokerageModel.cs", label="var buffer = new byte[4096]", span="97-97"];
m0_36 [cluster="QuantConnect.Compression.ZipData(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>)", file="GDAXBrokerageModel.cs", label="var entry = new ZipEntry(file.Key)", span="107-107"];
m0_34 [cluster="QuantConnect.Compression.ZipData(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>)", file="GDAXBrokerageModel.cs", label="var stream = new ZipOutputStream(File.Create(zipPath))", span="102-102"];
m0_37 [cluster="QuantConnect.Compression.ZipData(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>)", file="GDAXBrokerageModel.cs", label="stream.PutNextEntry(entry)", span="109-109"];
m0_299 [cluster="System.Collections.Generic.List<T>.List()", file="GDAXBrokerageModel.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_18 [cluster="QuantConnect.Compression.ZipData(string, System.Collections.Generic.Dictionary<string, string>)", file="GDAXBrokerageModel.cs", label="return success;", span="85-85"];
m0_19 [cluster="QuantConnect.Compression.ZipData(string, System.Collections.Generic.Dictionary<string, string>)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.ZipData(string, System.Collections.Generic.Dictionary<string, string>)", span="45-45"];
m0_21 [cluster="System.IO.File.Create(string)", file="GDAXBrokerageModel.cs", label="Entry System.IO.File.Create(string)", span="0-0"];
m0_24 [cluster="Unk.PutNextEntry", file="GDAXBrokerageModel.cs", label="Entry Unk.PutNextEntry", span=""];
m0_20 [cluster="ZipOutputStream.cstr", file="GDAXBrokerageModel.cs", label="Entry ZipOutputStream.cstr", span=""];
m0_22 [cluster="ZipEntry.cstr", file="GDAXBrokerageModel.cs", label="Entry ZipEntry.cstr", span=""];
m0_26 [cluster="System.IO.MemoryStream.Read(byte[], int, int)", file="GDAXBrokerageModel.cs", label="Entry System.IO.MemoryStream.Read(byte[], int, int)", span="0-0"];
m0_316 [cluster="System.IO.Stream.Close()", file="GDAXBrokerageModel.cs", label="Entry System.IO.Stream.Close()", span="0-0"];
m0_146 [cluster="Unk.CreateFromDirectory", file="GDAXBrokerageModel.cs", label="Entry Unk.CreateFromDirectory", span=""];
m0_218 [cluster="lambda expression", file="GDAXBrokerageModel.cs", label="Entry lambda expression", span="442-442"];
m0_219 [cluster="lambda expression", file="GDAXBrokerageModel.cs", label="zipEntryName == null || string.Compare(x.FileName, zipEntryName, StringComparison.OrdinalIgnoreCase) == 0", span="442-442"];
m0_220 [cluster="lambda expression", file="GDAXBrokerageModel.cs", label="Exit lambda expression", span="442-442"];
m0_5 [cluster="QuantConnect.Notifications.NotificationManager.NotificationManager(bool)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Notifications.NotificationManager.NotificationManager(bool)", span="56-56"];
m0_0 [cluster="QuantConnect.Notifications.NotificationManager.NotificationManager(bool)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Notifications.NotificationManager.NotificationManager(bool)", span="56-56"];
m0_1 [cluster="QuantConnect.Notifications.NotificationManager.NotificationManager(bool)", file="GDAXBrokerageModel.cs", label="_liveMode = liveMode", span="58-58"];
m0_3 [cluster="QuantConnect.Notifications.NotificationManager.NotificationManager(bool)", file="GDAXBrokerageModel.cs", label="_count = 0", span="60-60"];
m0_4 [cluster="QuantConnect.Notifications.NotificationManager.NotificationManager(bool)", file="GDAXBrokerageModel.cs", label="_resetTime = DateTime.Now", span="61-61"];
m0_2 [cluster="QuantConnect.Notifications.NotificationManager.NotificationManager(bool)", file="GDAXBrokerageModel.cs", label="Messages = new ConcurrentQueue<Notification>()", span="59-59"];
m0_10 [cluster="QuantConnect.Notifications.NotificationManager.Allow()", file="GDAXBrokerageModel.cs", label="_resetTime = DateTime.Now.RoundUp(TimeSpan.FromHours(1))", span="73-73"];
m0_11 [cluster="QuantConnect.Notifications.NotificationManager.Allow()", file="GDAXBrokerageModel.cs", label="_count < _rateLimit", span="76-76"];
m0_7 [cluster="QuantConnect.Notifications.NotificationManager.Allow()", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Notifications.NotificationManager.Allow()", span="68-68"];
m0_13 [cluster="QuantConnect.Notifications.NotificationManager.Allow()", file="GDAXBrokerageModel.cs", label="return true;", span="79-79"];
m0_14 [cluster="QuantConnect.Notifications.NotificationManager.Allow()", file="GDAXBrokerageModel.cs", label="return false;", span="81-81"];
m0_8 [cluster="QuantConnect.Notifications.NotificationManager.Allow()", file="GDAXBrokerageModel.cs", label="DateTime.Now > _resetTime", span="70-70"];
m0_9 [cluster="QuantConnect.Notifications.NotificationManager.Allow()", file="GDAXBrokerageModel.cs", label="_count = 0", span="72-72"];
m0_12 [cluster="QuantConnect.Notifications.NotificationManager.Allow()", file="GDAXBrokerageModel.cs", label="_count++", span="78-78"];
m0_15 [cluster="QuantConnect.Notifications.NotificationManager.Allow()", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Notifications.NotificationManager.Allow()", span="68-68"];
m0_17 [cluster="System.DateTime.RoundUp(System.TimeSpan)", file="GDAXBrokerageModel.cs", label="Entry System.DateTime.RoundUp(System.TimeSpan)", span="300-300"];
m0_171 [cluster="System.IO.DirectoryInfo.Create()", file="GDAXBrokerageModel.cs", label="Entry System.IO.DirectoryInfo.Create()", span="0-0"];
m0_338 [cluster="KeyValuePair<string, byte[]>.cstr", file="GDAXBrokerageModel.cs", label="Entry KeyValuePair<string, byte[]>.cstr", span=""];
m0_82 [cluster="byte[].GetString()", file="GDAXBrokerageModel.cs", label="Entry byte[].GetString()", span="84-84"];
m0_95 [cluster="System.IO.MemoryStream.GetBuffer()", file="GDAXBrokerageModel.cs", label="Entry System.IO.MemoryStream.GetBuffer()", span="0-0"];
m0_83 [cluster="Unk.Add", file="GDAXBrokerageModel.cs", label="Entry Unk.Add", span=""];
m0_120 [cluster="System.IO.File.Delete(string)", file="GDAXBrokerageModel.cs", label="Entry System.IO.File.Delete(string)", span="0-0"];
m0_79 [cluster="ZipInputStream.cstr", file="GDAXBrokerageModel.cs", label="Entry ZipInputStream.cstr", span=""];
m0_215 [cluster="Unk.Dispose", file="GDAXBrokerageModel.cs", label="Entry Unk.Dispose", span=""];
m0_81 [cluster="Unk.Read", file="GDAXBrokerageModel.cs", label="Entry Unk.Read", span=""];
m0_170 [cluster="System.IO.FileInfo.FileInfo(string)", file="GDAXBrokerageModel.cs", label="Entry System.IO.FileInfo.FileInfo(string)", span="0-0"];
m0_186 [cluster="QuantConnect.Logging.Log.Trace(string, bool)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106"];
m0_147 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.Unzip(string, string, bool)", span="338-338"];
m0_148 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="!File.Exists(zip)", span="340-340"];
m0_150 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="!overwrite", span="344-344"];
m0_151 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="System.IO.Compression.ZipFile.ExtractToDirectory(zip, directory)", span="346-346"];
m0_152 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="var archive = new ZipArchive(File.OpenRead(zip))", span="350-350"];
m0_155 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="var filepath = Path.Combine(directory, file.FullName)", span="356-356"];
m0_149 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="return false;", span="340-340"];
m0_153 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="archive.Entries", span="352-352"];
m0_154 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="file.Name == ''''", span="355-355"];
m0_162 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="return true;", span="368-368"];
m0_161 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="file.ExtractToFile(outputFile.FullName, true)", span="363-363"];
m0_156 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="OS.IsLinux", span="357-357"];
m0_157 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="filepath = filepath.Replace(@''\'', ''/'')", span="357-357"];
m0_158 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="var outputFile = new FileInfo(filepath)", span="358-358"];
m0_159 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="!outputFile.Directory.Exists", span="359-359"];
m0_160 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="outputFile.Directory.Create()", span="361-361"];
m0_163 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label=Exception, span="370-370"];
m0_164 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="Log.Error(err)", span="372-372"];
m0_165 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="return false;", span="373-373"];
m0_166 [cluster="QuantConnect.Compression.Unzip(string, string, bool)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.Unzip(string, string, bool)", span="338-338"];
m0_124 [cluster="System.IO.Path.GetFileName(string)", file="GDAXBrokerageModel.cs", label="Entry System.IO.Path.GetFileName(string)", span="0-0"];
m0_221 [cluster="Unk.Compare", file="GDAXBrokerageModel.cs", label="Entry Unk.Compare", span=""];
m0_80 [cluster="Unk.GetNextEntry", file="GDAXBrokerageModel.cs", label="Entry Unk.GetNextEntry", span=""];
m0_249 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="GDAXBrokerageModel.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m0_263 [cluster="System.IO.StreamReader.ReadLine()", file="GDAXBrokerageModel.cs", label="Entry System.IO.StreamReader.ReadLine()", span="0-0"];
m0_40 [cluster="QuantConnect.Notifications.NotificationManager.Web(string, object)", file="GDAXBrokerageModel.cs", label="!_liveMode", span="129-129"];
m0_41 [cluster="QuantConnect.Notifications.NotificationManager.Web(string, object)", file="GDAXBrokerageModel.cs", label="return false;", span="129-129"];
m0_43 [cluster="QuantConnect.Notifications.NotificationManager.Web(string, object)", file="GDAXBrokerageModel.cs", label=allow, span="131-131"];
m0_44 [cluster="QuantConnect.Notifications.NotificationManager.Web(string, object)", color=green, community=0, file="GDAXBrokerageModel.cs", label="var web = new NotificationWeb(address, data)", prediction=0, span="133-133"];
m0_38 [cluster="QuantConnect.Notifications.NotificationSms.NotificationSms(string, string)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Notifications.NotificationSms.NotificationSms(string, string)", span="84-84"];
m0_39 [cluster="QuantConnect.Notifications.NotificationManager.Web(string, object)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Notifications.NotificationManager.Web(string, object)", span="127-127"];
m0_42 [cluster="QuantConnect.Notifications.NotificationManager.Web(string, object)", file="GDAXBrokerageModel.cs", label="var allow = Allow()", span="130-130"];
m0_45 [cluster="QuantConnect.Notifications.NotificationManager.Web(string, object)", color=green, community=0, file="GDAXBrokerageModel.cs", label="Messages.Enqueue(web)", prediction=1, span="134-134"];
m0_46 [cluster="QuantConnect.Notifications.NotificationManager.Web(string, object)", color=green, community=0, file="GDAXBrokerageModel.cs", label="return allow;", prediction=2, span="136-136"];
m0_47 [cluster="QuantConnect.Notifications.NotificationManager.Web(string, object)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Notifications.NotificationManager.Web(string, object)", span="127-127"];
m0_49 [cluster="QuantConnect.Compression.ZipData(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>)", file="GDAXBrokerageModel.cs", label="QuantConnect.Notifications.NotificationManager", span=""];
m0_317 [cluster="QuantConnect.Compression.UnTarGzFiles(string, string)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.UnTarGzFiles(string, string)", span="680-680"];
m0_318 [cluster="QuantConnect.Compression.UnTarGzFiles(string, string)", file="GDAXBrokerageModel.cs", label="var inStream = File.OpenRead(source)", span="682-682"];
m0_321 [cluster="QuantConnect.Compression.UnTarGzFiles(string, string)", file="GDAXBrokerageModel.cs", label="tarArchive.ExtractContents(destination)", span="685-685"];
m0_319 [cluster="QuantConnect.Compression.UnTarGzFiles(string, string)", file="GDAXBrokerageModel.cs", label="var gzipStream = new GZipInputStream(inStream)", span="683-683"];
m0_324 [cluster="QuantConnect.Compression.UnTarGzFiles(string, string)", file="GDAXBrokerageModel.cs", label="inStream.Close()", span="688-688"];
m0_320 [cluster="QuantConnect.Compression.UnTarGzFiles(string, string)", file="GDAXBrokerageModel.cs", label="var tarArchive = TarArchive.CreateInputTarArchive(gzipStream)", span="684-684"];
m0_323 [cluster="QuantConnect.Compression.UnTarGzFiles(string, string)", file="GDAXBrokerageModel.cs", label="gzipStream.Close()", span="687-687"];
m0_322 [cluster="QuantConnect.Compression.UnTarGzFiles(string, string)", file="GDAXBrokerageModel.cs", label="tarArchive.Close()", span="686-686"];
m0_325 [cluster="QuantConnect.Compression.UnTarGzFiles(string, string)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.UnTarGzFiles(string, string)", span="680-680"];
m0_307 [cluster="QuantConnect.Compression.UnTarFiles(string, string)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.UnTarFiles(string, string)", span="666-666"];
m0_308 [cluster="QuantConnect.Compression.UnTarFiles(string, string)", file="GDAXBrokerageModel.cs", label="var inStream = File.OpenRead(source)", span="668-668"];
m0_310 [cluster="QuantConnect.Compression.UnTarFiles(string, string)", file="GDAXBrokerageModel.cs", label="tarArchive.ExtractContents(destination)", span="670-670"];
m0_309 [cluster="QuantConnect.Compression.UnTarFiles(string, string)", file="GDAXBrokerageModel.cs", label="var tarArchive = TarArchive.CreateInputTarArchive(inStream)", span="669-669"];
m0_312 [cluster="QuantConnect.Compression.UnTarFiles(string, string)", file="GDAXBrokerageModel.cs", label="inStream.Close()", span="672-672"];
m0_311 [cluster="QuantConnect.Compression.UnTarFiles(string, string)", file="GDAXBrokerageModel.cs", label="tarArchive.Close()", span="671-671"];
m0_313 [cluster="QuantConnect.Compression.UnTarFiles(string, string)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.UnTarFiles(string, string)", span="666-666"];
m0_213 [cluster="StreamReader.cstr", file="GDAXBrokerageModel.cs", label="Entry StreamReader.cstr", span=""];
m0_212 [cluster="System.ArgumentException.ArgumentException(string)", file="GDAXBrokerageModel.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m0_179 [cluster="QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="var entry = new ZipEntry(Path.GetFileName(file))", span="395-395"];
m0_173 [cluster="QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", span="380-380"];
m0_174 [cluster="QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="var zipStream = new ZipOutputStream(File.Create(destination))", span="384-384"];
m0_176 [cluster="QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label=files, span="387-387"];
m0_175 [cluster="QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="var buffer = new byte[4096]", span="386-386"];
m0_180 [cluster="QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="zipStream.PutNextEntry(entry)", span="396-396"];
m0_182 [cluster="QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="StreamUtils.Copy(fstream, zipStream, buffer)", span="399-399"];
m0_177 [cluster="QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="!File.Exists(file)", span="389-389"];
m0_183 [cluster="QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label=Exception, span="404-404"];
m0_178 [cluster="QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="Log.Trace(''ZipFiles(): File does not exist: '' + file)", span="391-391"];
m0_181 [cluster="QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="var fstream = File.OpenRead(file)", span="397-397"];
m0_184 [cluster="QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="Log.Error(err)", span="406-406"];
m0_185 [cluster="QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.ZipFiles(string, System.Collections.Generic.IEnumerable<string>)", span="380-380"];
m0_315 [cluster="Unk.ExtractContents", file="GDAXBrokerageModel.cs", label="Entry Unk.ExtractContents", span=""];
m0_211 [cluster="Unk.FirstOrDefault", file="GDAXBrokerageModel.cs", label="Entry Unk.FirstOrDefault", span=""];
m0_356 [cluster="string.Substring(int)", file="GDAXBrokerageModel.cs", label="Entry string.Substring(int)", span="0-0"];
m0_326 [cluster="GZipInputStream.cstr", file="GDAXBrokerageModel.cs", label="Entry GZipInputStream.cstr", span=""];
m0_302 [cluster="ICSharpCode.SharpZipLib.Zip.ZipFile.cstr", file="GDAXBrokerageModel.cs", label="Entry ICSharpCode.SharpZipLib.Zip.ZipFile.cstr", span=""];
m0_268 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="var entry = zipStream.GetNextEntry()", span="583-583"];
m0_264 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.UnzipStream(System.IO.Stream)", span="571-571"];
m0_265 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="StreamReader reader = null", span="573-573"];
m0_267 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="var zipStream = new ZipInputStream(zipstream)", span="580-580"];
m0_266 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="MemoryStream file", span="577-577"];
m0_270 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="zipStream.Read(buffer, 0, (int)entry.Size)", span="585-585"];
m0_269 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="var buffer = new byte[entry.Size]", span="584-584"];
m0_271 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="file = new MemoryStream(buffer)", span="588-588"];
m0_272 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="reader = new StreamReader(file)", span="592-592"];
m0_273 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="GDAXBrokerageModel.cs", label=Exception, span="594-594"];
m0_275 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="return reader;", span="599-599"];
m0_274 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="Log.Error(err)", span="596-596"];
m0_276 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.UnzipStream(System.IO.Stream)", span="571-571"];
m0_251 [cluster="QuantConnect.Compression.ReadLinesImpl(string, bool)", file="GDAXBrokerageModel.cs", label=firstEntryOnly, span="544-544"];
m0_232 [cluster="QuantConnect.Compression.ReadLinesImpl(string, bool)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.ReadLinesImpl(string, bool)", span="540-540"];
m0_250 [cluster="QuantConnect.Compression.ReadLinesImpl(string, bool)", file="GDAXBrokerageModel.cs", label="var zip = ZipFile.Read(filename)", span="542-542"];
m0_253 [cluster="QuantConnect.Compression.ReadLinesImpl(string, bool)", file="GDAXBrokerageModel.cs", label="yield return new KeyValuePair<string, IEnumerable<string>>(entry.FileName, ReadZipEntry(entry));", span="547-547"];
m0_254 [cluster="QuantConnect.Compression.ReadLinesImpl(string, bool)", file="GDAXBrokerageModel.cs", label="yield break;", span="548-548"];
m0_256 [cluster="QuantConnect.Compression.ReadLinesImpl(string, bool)", file="GDAXBrokerageModel.cs", label="yield return new KeyValuePair<string, IEnumerable<string>>(entry.FileName, ReadZipEntry(entry));", span="552-552"];
m0_252 [cluster="QuantConnect.Compression.ReadLinesImpl(string, bool)", file="GDAXBrokerageModel.cs", label="var entry = zip[0]", span="546-546"];
m0_255 [cluster="QuantConnect.Compression.ReadLinesImpl(string, bool)", file="GDAXBrokerageModel.cs", label=zip, span="550-550"];
m0_257 [cluster="QuantConnect.Compression.ReadLinesImpl(string, bool)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.ReadLinesImpl(string, bool)", span="540-540"];
m0_305 [cluster="System.IO.Path.Combine(string, string)", file="GDAXBrokerageModel.cs", label="Entry System.IO.Path.Combine(string, string)", span="0-0"];
m0_333 [cluster="QuantConnect.Compression.UnTar(System.IO.Stream, bool)", file="GDAXBrokerageModel.cs", label="tar.CopyEntryContents(output)", span="708-708"];
m0_327 [cluster="QuantConnect.Compression.UnTar(System.IO.Stream, bool)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.UnTar(System.IO.Stream, bool)", span="697-697"];
m0_328 [cluster="QuantConnect.Compression.UnTar(System.IO.Stream, bool)", file="GDAXBrokerageModel.cs", label="var tar = new TarInputStream(isTarGz ? (Stream)new GZipInputStream(stream) : stream)", span="699-699"];
m0_334 [cluster="QuantConnect.Compression.UnTar(System.IO.Stream, bool)", file="GDAXBrokerageModel.cs", label="yield return new KeyValuePair<string, byte[]>(entry.Name, output.ToArray());", span="709-709"];
m0_329 [cluster="QuantConnect.Compression.UnTar(System.IO.Stream, bool)", file="GDAXBrokerageModel.cs", label="TarEntry entry", span="701-701"];
m0_330 [cluster="QuantConnect.Compression.UnTar(System.IO.Stream, bool)", file="GDAXBrokerageModel.cs", label="(entry = tar.GetNextEntry()) != null", span="702-702"];
m0_331 [cluster="QuantConnect.Compression.UnTar(System.IO.Stream, bool)", file="GDAXBrokerageModel.cs", label="entry.IsDirectory", span="704-704"];
m0_332 [cluster="QuantConnect.Compression.UnTar(System.IO.Stream, bool)", file="GDAXBrokerageModel.cs", label="var output = new MemoryStream()", span="706-706"];
m0_335 [cluster="QuantConnect.Compression.UnTar(System.IO.Stream, bool)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.UnTar(System.IO.Stream, bool)", span="697-697"];
m0_239 [cluster="Unk.ReadZipEntry", file="GDAXBrokerageModel.cs", label="Entry Unk.ReadZipEntry", span=""];
m0_214 [cluster="Unk.OpenReader", file="GDAXBrokerageModel.cs", label="Entry Unk.OpenReader", span=""];
m0_304 [cluster="Unk.GetInputStream", file="GDAXBrokerageModel.cs", label="Entry Unk.GetInputStream", span=""];
m0_289 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="var entryFileName = Path.GetFileName(zipEntry.Name)", span="630-630"];
m0_278 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.UnzipToFolder(string)", span="607-607"];
m0_279 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="var files = new List<string>()", span="610-610"];
m0_280 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="var slash = zipFile.LastIndexOf(Path.DirectorySeparatorChar)", span="611-611"];
m0_283 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="outFolder = zipFile.Substring(0, slash)", span="615-615"];
m0_285 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="var fs = File.OpenRead(zipFile)", span="621-621"];
m0_294 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="files.Add(fullZipToPath)", span="640-640"];
m0_297 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="return files;", span="658-658"];
m0_281 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="var outFolder = ''''", span="612-612"];
m0_282 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="slash > 0", span="613-613"];
m0_293 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="var fullZipToPath = Path.Combine(outFolder, entryFileName)", span="637-637"];
m0_284 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="ICSharpCode.SharpZipLib.Zip.ZipFile zf = null", span="617-617"];
m0_286 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="zf = new ICSharpCode.SharpZipLib.Zip.ZipFile(fs)", span="622-622"];
m0_287 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label=zf, span="624-624"];
m0_292 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="var zipStream = zf.GetInputStream(zipEntry)", span="634-634"];
m0_288 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="!zipEntry.IsFile", span="627-627"];
m0_290 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="entryFileName == null", span="631-631"];
m0_291 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="var buffer = new byte[4096]", span="633-633"];
m0_296 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="StreamUtils.Copy(zipStream, streamWriter, buffer)", span="646-646"];
m0_295 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="var streamWriter = File.Create(fullZipToPath)", span="644-644"];
m0_298 [cluster="QuantConnect.Compression.UnzipToFolder(string)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.UnzipToFolder(string)", span="607-607"];
m0_303 [cluster="Unk.GetFileName", file="GDAXBrokerageModel.cs", label="Entry Unk.GetFileName", span=""];
m0_197 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="throw new ArgumentException(''Unable to locate zip entry with name: '' + zipEntryName);", span="445-445"];
m0_190 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", span="430-430"];
m0_191 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="StreamReader reader = null", span="432-432"];
m0_193 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="File.Exists(filename)", span="437-437"];
m0_194 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="zip = new ZipFile(filename)", span="441-441"];
m0_195 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="var entry = zip.FirstOrDefault(x => zipEntryName == null || string.Compare(x.FileName, zipEntryName, StringComparison.OrdinalIgnoreCase) == 0)", span="442-442"];
m0_205 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="Log.Error(''Data.UnZip(2): File doesn't exist: '' + filename)", span="459-459"];
m0_207 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="Log.Error(err, ''File: '' + filename)", span="464-464"];
m0_192 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="zip = null", span="433-433"];
m0_208 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="return reader;", span="466-466"];
m0_201 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="zip != null", span="453-453"];
m0_202 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="zip.Dispose()", span="453-453"];
m0_196 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="entry == null", span="443-443"];
m0_198 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="reader = new StreamReader(entry.OpenReader())", span="448-448"];
m0_199 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label=Exception, span="450-450"];
m0_206 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label=Exception, span="462-462"];
m0_203 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="reader != null", span="454-454"];
m0_204 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="reader.Close()", span="454-454"];
m0_200 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="Log.Error(err, ''Inner try/catch'')", span="452-452"];
m0_209 [cluster="QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.Unzip(string, string, out Ionic.Zip.ZipFile)", span="430-430"];
m0_93 [cluster="System.IO.MemoryStream.MemoryStream()", file="GDAXBrokerageModel.cs", label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0"];
m0_28 [cluster="System.Collections.Concurrent.ConcurrentQueue<T>.Enqueue(T)", file="GDAXBrokerageModel.cs", label="Entry System.Collections.Concurrent.ConcurrentQueue<T>.Enqueue(T)", span="0-0"];
m0_136 [cluster="QuantConnect.Compression.ZipDirectory(string, string, bool)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.ZipDirectory(string, string, bool)", span="317-317"];
m0_137 [cluster="QuantConnect.Compression.ZipDirectory(string, string, bool)", file="GDAXBrokerageModel.cs", label="File.Exists(destination)", span="321-321"];
m0_138 [cluster="QuantConnect.Compression.ZipDirectory(string, string, bool)", file="GDAXBrokerageModel.cs", label="File.Delete(destination)", span="321-321"];
m0_139 [cluster="QuantConnect.Compression.ZipDirectory(string, string, bool)", file="GDAXBrokerageModel.cs", label="System.IO.Compression.ZipFile.CreateFromDirectory(directory, destination, CompressionLevel.Fastest, includeRootInZip)", span="322-322"];
m0_140 [cluster="QuantConnect.Compression.ZipDirectory(string, string, bool)", file="GDAXBrokerageModel.cs", label="return true;", span="323-323"];
m0_141 [cluster="QuantConnect.Compression.ZipDirectory(string, string, bool)", file="GDAXBrokerageModel.cs", label=Exception, span="325-325"];
m0_142 [cluster="QuantConnect.Compression.ZipDirectory(string, string, bool)", file="GDAXBrokerageModel.cs", label="Log.Error(err)", span="327-327"];
m0_143 [cluster="QuantConnect.Compression.ZipDirectory(string, string, bool)", file="GDAXBrokerageModel.cs", label="return false;", span="328-328"];
m0_144 [cluster="QuantConnect.Compression.ZipDirectory(string, string, bool)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.ZipDirectory(string, string, bool)", span="317-317"];
m0_238 [cluster="KeyValuePair<string, IEnumerable<string>>.cstr", file="GDAXBrokerageModel.cs", label="Entry KeyValuePair<string, IEnumerable<string>>.cstr", span=""];
m0_236 [cluster="QuantConnect.Compression.Unzip(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="yield return new KeyValuePair<string, IEnumerable<string>>(entry.FileName, ReadZipEntry(entry));", span="511-511"];
m0_233 [cluster="QuantConnect.Compression.Unzip(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.Unzip(System.IO.Stream)", span="505-505"];
m0_234 [cluster="QuantConnect.Compression.Unzip(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="var zip = ZipFile.Read(stream)", span="507-507"];
m0_235 [cluster="QuantConnect.Compression.Unzip(System.IO.Stream)", file="GDAXBrokerageModel.cs", label=zip, span="509-509"];
m0_237 [cluster="QuantConnect.Compression.Unzip(System.IO.Stream)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.Unzip(System.IO.Stream)", span="505-505"];
m0_121 [cluster="QuantConnect.Compression.Zip(string, bool)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.Zip(string, bool)", span="285-285"];
m0_122 [cluster="QuantConnect.Compression.Zip(string, bool)", file="GDAXBrokerageModel.cs", label="return Zip(textPath, Path.GetFileName(textPath), deleteOriginal);", span="287-287"];
m0_123 [cluster="QuantConnect.Compression.Zip(string, bool)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.Zip(string, bool)", span="285-285"];
m0_169 [cluster="Unk.Combine", file="GDAXBrokerageModel.cs", label="Entry Unk.Combine", span=""];
m0_301 [cluster="string.Substring(int, int)", file="GDAXBrokerageModel.cs", label="Entry string.Substring(int, int)", span="0-0"];
m0_217 [cluster="QuantConnect.Logging.Log.Error(string, bool)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="65-65"];
m0_94 [cluster="Unk.Copy", file="GDAXBrokerageModel.cs", label="Entry Unk.Copy", span=""];
m0_187 [cluster="QuantConnect.Compression.Unzip(string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.Unzip(string, out Ionic.Zip.ZipFile)", span="417-417"];
m0_188 [cluster="QuantConnect.Compression.Unzip(string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="return Unzip(filename, null, out zip);", span="419-419"];
m0_189 [cluster="QuantConnect.Compression.Unzip(string, out Ionic.Zip.ZipFile)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.Unzip(string, out Ionic.Zip.ZipFile)", span="417-417"];
m0_337 [cluster="Unk.CopyEntryContents", file="GDAXBrokerageModel.cs", label="Entry Unk.CopyEntryContents", span=""];
m0_222 [cluster="QuantConnect.Compression.Unzip(string)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.Unzip(string)", span="480-480"];
m0_223 [cluster="QuantConnect.Compression.Unzip(string)", file="GDAXBrokerageModel.cs", label="!File.Exists(filename)", span="482-482"];
m0_224 [cluster="QuantConnect.Compression.Unzip(string)", file="GDAXBrokerageModel.cs", label="Log.Error(''Compression.Unzip(): File does not exist: '' + filename)", span="484-484"];
m0_226 [cluster="QuantConnect.Compression.Unzip(string)", file="GDAXBrokerageModel.cs", label="return ReadLinesImpl(filename);", span="490-490"];
m0_225 [cluster="QuantConnect.Compression.Unzip(string)", file="GDAXBrokerageModel.cs", label="return Enumerable.Empty<KeyValuePair<string, IEnumerable<string>>>();", span="485-485"];
m0_227 [cluster="QuantConnect.Compression.Unzip(string)", file="GDAXBrokerageModel.cs", label=Exception, span="492-492"];
m0_228 [cluster="QuantConnect.Compression.Unzip(string)", file="GDAXBrokerageModel.cs", label="Log.Error(err)", span="494-494"];
m0_229 [cluster="QuantConnect.Compression.Unzip(string)", file="GDAXBrokerageModel.cs", label="return Enumerable.Empty<KeyValuePair<string, IEnumerable<string>>>();", span="496-496"];
m0_230 [cluster="QuantConnect.Compression.Unzip(string)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.Unzip(string)", span="480-480"];
m0_54 [cluster="QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="stream.PutNextEntry(entry)", span="151-151"];
m0_50 [cluster="QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", span="143-143"];
m0_51 [cluster="QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="var stream = new ZipOutputStream(File.Create(zipPath))", span="147-147"];
m0_53 [cluster="QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="var entry = new ZipEntry(zipEntry)", span="150-150"];
m0_55 [cluster="QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label=lines, span="152-152"];
m0_52 [cluster="QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="var writer = new StreamWriter(stream)", span="148-148"];
m0_56 [cluster="QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="writer.WriteLine(line)", span="154-154"];
m0_57 [cluster="QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="return true;", span="157-157"];
m0_58 [cluster="QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label=Exception, span="159-159"];
m0_59 [cluster="QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="Log.Error(err)", span="161-161"];
m0_60 [cluster="QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="return false;", span="162-162"];
m0_61 [cluster="QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.ZipData(string, string, System.Collections.Generic.IEnumerable<string>)", span="143-143"];
m0_336 [cluster="TarInputStream.cstr", file="GDAXBrokerageModel.cs", label="Entry TarInputStream.cstr", span=""];
m0_117 [cluster="string.Replace(string, string)", file="GDAXBrokerageModel.cs", label="Entry string.Replace(string, string)", span="0-0"];
m0_145 [cluster="System.IO.File.Exists(string)", file="GDAXBrokerageModel.cs", label="Entry System.IO.File.Exists(string)", span="0-0"];
m0_63 [cluster="System.IO.TextWriter.WriteLine(string)", file="GDAXBrokerageModel.cs", label="Entry System.IO.TextWriter.WriteLine(string)", span="0-0"];
m0_103 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="stream.PutNextEntry(entry)", span="253-253"];
m0_96 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.Zip(string, string, bool)", span="239-239"];
m0_97 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="var zipPath = ''''", span="241-241"];
m0_99 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="zipPath = textPath.Replace(''.csv'', ''.zip'')", span="246-246"];
m0_102 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="var entry = new ZipEntry(zipEntryName)", span="252-252"];
m0_104 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="var fs = File.OpenRead(textPath)", span="255-255"];
m0_111 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label=deleteOriginal, span="270-270"];
m0_112 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="File.Delete(textPath)", span="270-270"];
m0_98 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="var buffer = new byte[4096]", span="245-245"];
m0_106 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="sourceBytes = fs.Read(buffer, 0, buffer.Length)", span="260-260"];
m0_107 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="stream.Write(buffer, 0, sourceBytes)", span="261-261"];
m0_100 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="zipPath = zipPath.Replace(''.txt'', ''.zip'')", span="247-247"];
m0_101 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="var stream = new ZipOutputStream(File.Create(zipPath))", span="249-249"];
m0_115 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="return zipPath;", span="276-276"];
m0_109 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="stream.Finish()", span="266-266"];
m0_110 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="stream.Close()", span="267-267"];
m0_105 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="int sourceBytes", span="257-257"];
m0_108 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="sourceBytes > 0", span="263-263"];
m0_113 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label=Exception, span="272-272"];
m0_114 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="Log.Error(err)", span="274-274"];
m0_116 [cluster="QuantConnect.Compression.Zip(string, string, bool)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.Zip(string, string, bool)", span="239-239"];
m0_349 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="tarEntry.IsDirectory", span="738-738"];
m0_340 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Compression.UnTar(string)", span="720-720"];
m0_341 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="var gzip = (source.Substring(Math.Max(0, source.Length - 6)) == ''tar.gz'')", span="723-723"];
m0_352 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="yield return new KeyValuePair<string, byte[]>(tarEntry.Name, stream.ToArray());", span="743-743"];
m0_342 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="var file = File.OpenRead(source)", span="725-725"];
m0_344 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label=gzip, span="729-729"];
m0_343 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="var tarIn = new TarInputStream(file)", span="727-727"];
m0_345 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="var gzipStream = new GZipInputStream(file)", span="731-731"];
m0_348 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="(tarEntry = tarIn.GetNextEntry()) != null", span="736-736"];
m0_351 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="tarIn.CopyEntryContents(stream)", span="742-742"];
m0_353 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="tarIn.Close()", span="746-746"];
m0_347 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="TarEntry tarEntry", span="735-735"];
m0_346 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="tarIn = new TarInputStream(gzipStream)", span="732-732"];
m0_350 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="var stream = new MemoryStream()", span="740-740"];
m0_354 [cluster="QuantConnect.Compression.UnTar(string)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Compression.UnTar(string)", span="720-720"];
m0_78 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="GDAXBrokerageModel.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_119 [cluster="System.IO.FileStream.Read(byte[], int, int)", file="GDAXBrokerageModel.cs", label="Entry System.IO.FileStream.Read(byte[], int, int)", span="0-0"];
m0_172 [cluster="Unk.ExtractToFile", file="GDAXBrokerageModel.cs", label="Entry Unk.ExtractToFile", span=""];
m0_167 [cluster="Unk.ExtractToDirectory", file="GDAXBrokerageModel.cs", label="Entry Unk.ExtractToDirectory", span=""];
m0_168 [cluster="ZipArchive.cstr", file="GDAXBrokerageModel.cs", label="Entry ZipArchive.cstr", span=""];
m0_357 [file="GDAXBrokerageModel.cs", label=string, span=""];
m2_61 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.ImmediateFillModel()", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Orders.Fills.ImmediateFillModel.ImmediateFillModel()", span="26-26"];
m2_63 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", span="89-89"];
m2_64 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="var noon = new DateTime(2014, 6, 24, 12, 0, 0)", span="91-91"];
m2_65 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="var timeKeeper = new TimeKeeper(noon.ConvertToUtc(TimeZones.NewYork), new[] { TimeZones.NewYork })", span="92-92"];
m2_70 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="security.SetMarketPrice(new IndicatorDataPoint(Symbols.SPY, noon, 101.123m))", span="98-98"];
m2_66 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="var symbol = Symbol.Create(''SPY'', SecurityType.Equity, Market.USA)", span="93-93"];
m2_69 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="security.SetLocalTimeKeeper(timeKeeper.GetLocalTimeKeeper(TimeZones.NewYork))", span="97-97"];
m2_67 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="var config = new SubscriptionDataConfig(typeof(TradeBar), Symbols.SPY, Resolution.Minute, TimeZones.NewYork, TimeZones.NewYork, true, true, false)", span="95-95"];
m2_71 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="security.Cache.AddData(new TradeBar(DateTime.MinValue, symbol, 1.0m, 1.0m, 1.0m, 1.0m, 1.0m))", span="102-102"];
m2_74 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="var order = new MarketOrder(symbol, 1000, DateTime.Now)", span="106-106"];
m2_68 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="var security = new Security(SecurityExchangeHoursTests.CreateUsEquitySecurityExchangeHours(), config, new Cash(CashBook.AccountCurrency, 0, 1m), SymbolProperties.GetDefault(CashBook.AccountCurrency))", span="96-96"];
m2_72 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="security.Cache.AddData(new Tick(config, ''42525000,1000000,100,A,@,0'', DateTime.MinValue))", span="103-103"];
m2_75 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="var fill = fillModel.MarketFill(security, order)", span="107-107"];
m2_73 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="var fillModel = new ImmediateFillModel()", span="105-105"];
m2_76 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="Assert.AreEqual(fill.FillPrice, 1.0m)", span="110-110"];
m2_77 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", file="ImmediateFillModelTests.cs", label="Exit QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelDoesNotUseTicksWhenThereIsNoTickSubscription()", span="89-89"];
m2_59 [cluster="QuantConnect.Securities.SecurityCache.AddData(QuantConnect.Data.BaseData)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Securities.SecurityCache.AddData(QuantConnect.Data.BaseData)", span="94-94"];
m2_26 [cluster="QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", span="157-157"];
m2_35 [cluster="QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", span="612-612"];
m2_60 [cluster="QuantConnect.Data.Market.Tick.Tick(QuantConnect.Data.SubscriptionDataConfig, string, System.DateTime)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Data.Market.Tick.Tick(QuantConnect.Data.SubscriptionDataConfig, string, System.DateTime)", span="215-215"];
m2_22 [cluster="QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", span="45-45"];
m2_27 [cluster="QuantConnect.Securities.Forex.Forex.Forex(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Securities.Forex.Forex.Forex(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", span="36-36"];
m2_30 [cluster="QuantConnect.TimeKeeper.GetLocalTimeKeeper(DateTimeZone)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.TimeKeeper.GetLocalTimeKeeper(DateTimeZone)", span="93-93"];
m2_31 [cluster="QuantConnect.Securities.Security.SetLocalTimeKeeper(QuantConnect.LocalTimeKeeper)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Securities.Security.SetLocalTimeKeeper(QuantConnect.LocalTimeKeeper)", span="595-595"];
m2_33 [cluster="QuantConnect.Brokerages.FxcmBrokerageModel.GetFillModel(QuantConnect.Securities.Security)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Brokerages.FxcmBrokerageModel.GetFillModel(QuantConnect.Securities.Security)", span="165-165"];
m2_23 [cluster="QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", span="82-82"];
m2_0 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", span="34-34"];
m2_1 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var symbol = Symbol.Create(''EURUSD'', SecurityType.Forex, ''fxcm'')", span="36-36"];
m2_16 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var quantity = direction == OrderDirection.Buy ? 1 : -1", span="56-56"];
m2_19 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var expected = direction == OrderDirection.Buy ? askPrice : bidPrice", span="60-60"];
m2_2 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var exchangeHours = SecurityExchangeHours.AlwaysOpen(TimeZones.NewYork)", span="37-37"];
m2_5 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var config = new SubscriptionDataConfig(typeof(Tick), symbol, Resolution.Tick, TimeZones.NewYork, TimeZones.NewYork, true, true, false)", span="40-40"];
m2_15 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="security.SetMarketPrice(new Tick(DateTime.Now, symbol, bidPrice, askPrice))", span="54-54"];
m2_17 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var order = new MarketOrder(symbol, quantity, DateTime.Now)", span="57-57"];
m2_3 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var quoteCash = new Cash(''USD'', 1000, 1)", span="38-38"];
m2_6 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var security = new Forex(exchangeHours, quoteCash, config, symbolProperties)", span="41-41"];
m2_4 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var symbolProperties = SymbolProperties.GetDefault(''USD'')", span="39-39"];
m2_7 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var reference = DateTime.Now", span="43-43"];
m2_10 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="security.SetLocalTimeKeeper(timeKeeper.GetLocalTimeKeeper(TimeZones.NewYork))", span="46-46"];
m2_12 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var fillModel = brokerageModel.GetFillModel(security)", span="49-49"];
m2_18 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var fill = fillModel.MarketFill(security, order)", span="58-58"];
m2_8 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var referenceUtc = reference.ConvertToUtc(TimeZones.NewYork)", span="44-44"];
m2_9 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var timeKeeper = new TimeKeeper(referenceUtc)", span="45-45"];
m2_11 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="var brokerageModel = new FxcmBrokerageModel()", span="48-48"];
m2_13 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="decimal bidPrice = 1.13739m", span="51-51"];
m2_14 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="decimal askPrice = 1.13746m", span="52-52"];
m2_20 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="Assert.AreEqual(expected, fill.FillPrice)", span="61-61"];
m2_21 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", file="ImmediateFillModelTests.cs", label="Exit QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.MarketOrderFillsAtBidAsk(QuantConnect.Orders.OrderDirection)", span="34-34"];
m2_38 [cluster="Unk.AreEqual", file="ImmediateFillModelTests.cs", label="Entry Unk.AreEqual", span=""];
m2_57 [cluster="QuantConnect.Indicators.IndicatorDataPoint.IndicatorDataPoint(QuantConnect.Symbol, System.DateTime, decimal)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Indicators.IndicatorDataPoint.IndicatorDataPoint(QuantConnect.Symbol, System.DateTime, decimal)", span="52-52"];
m2_32 [cluster="QuantConnect.Brokerages.FxcmBrokerageModel.FxcmBrokerageModel(QuantConnect.AccountType)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Brokerages.FxcmBrokerageModel.FxcmBrokerageModel(QuantConnect.AccountType)", span="55-55"];
m2_36 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="49-49"];
m2_29 [cluster="QuantConnect.TimeKeeper.TimeKeeper(System.DateTime, params DateTimeZone[])", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.TimeKeeper.TimeKeeper(System.DateTime, params DateTimeZone[])", span="46-46"];
m2_39 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", span="65-65"];
m2_40 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="var noon = new DateTime(2014, 6, 24, 12, 0, 0)", span="67-67"];
m2_41 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="var timeKeeper = new TimeKeeper(noon.ConvertToUtc(TimeZones.NewYork), new[] { TimeZones.NewYork })", span="68-68"];
m2_46 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="security.SetMarketPrice(new IndicatorDataPoint(Symbols.SPY, noon, 101.123m))", span="73-73"];
m2_42 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="var symbol = Symbol.Create(''SPY'', SecurityType.Equity, Market.USA)", span="69-69"];
m2_45 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="security.SetLocalTimeKeeper(timeKeeper.GetLocalTimeKeeper(TimeZones.NewYork))", span="72-72"];
m2_43 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="var config = new SubscriptionDataConfig(typeof(Tick), Symbols.SPY, Resolution.Tick, TimeZones.NewYork, TimeZones.NewYork, true, true, false)", span="70-70"];
m2_47 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="security.Cache.AddData(new TradeBar(DateTime.MinValue, symbol, 1.0m, 1.0m, 1.0m, 1.0m, 1.0m))", span="77-77"];
m2_50 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="var order = new MarketOrder(symbol, 1000, DateTime.Now)", span="81-81"];
m2_44 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="var security = new Security(SecurityExchangeHoursTests.CreateUsEquitySecurityExchangeHours(), config, new Cash(CashBook.AccountCurrency, 0, 1m), SymbolProperties.GetDefault(CashBook.AccountCurrency))", span="71-71"];
m2_48 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="security.Cache.AddData(new Tick(config, ''42525000,1000000,100,A,@,0'', DateTime.MinValue))", span="78-78"];
m2_51 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="var fill = fillModel.MarketFill(security, order)", span="82-82"];
m2_49 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="var fillModel = new ImmediateFillModel()", span="80-80"];
m2_52 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="Assert.AreEqual(fill.FillPrice, 100m)", span="85-85"];
m2_53 [cluster="QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", file="ImmediateFillModelTests.cs", label="Exit QuantConnect.Tests.Common.Orders.Fills.ImmediateFillModelTests.ImmediateFillModelUsesPriceForTicksWhenBidAskSpreadsAreNotAvailable()", span="65-65"];
m2_55 [cluster="QuantConnect.Securities.Security.Security(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Securities.Security.Security(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", span="317-317"];
m2_56 [cluster="QuantConnect.Tests.Common.Securities.SecurityExchangeHoursTests.CreateUsEquitySecurityExchangeHours()", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.SecurityExchangeHoursTests.CreateUsEquitySecurityExchangeHours()", span="258-258"];
m2_37 [cluster="QuantConnect.Orders.Fills.IFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Orders.Fills.IFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", span="30-30"];
m2_54 [cluster="System.DateTime.DateTime(int, int, int, int, int, int)", file="ImmediateFillModelTests.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int)", span="0-0"];
m2_34 [cluster="QuantConnect.Data.Market.Tick.Tick(System.DateTime, QuantConnect.Symbol, decimal, decimal)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Data.Market.Tick.Tick(System.DateTime, QuantConnect.Symbol, decimal, decimal)", span="142-142"];
m2_25 [cluster="QuantConnect.Securities.SymbolProperties.GetDefault(string)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Securities.SymbolProperties.GetDefault(string)", span="84-84"];
m2_62 [cluster="QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Orders.Fills.ImmediateFillModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", span="36-36"];
m2_24 [cluster="QuantConnect.Securities.Cash.Cash(string, decimal, decimal)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Securities.Cash.Cash(string, decimal, decimal)", span="65-65"];
m2_58 [cluster="QuantConnect.Data.Market.TradeBar.TradeBar(System.DateTime, QuantConnect.Symbol, decimal, decimal, decimal, decimal, decimal, System.TimeSpan?)", file="ImmediateFillModelTests.cs", label="Entry QuantConnect.Data.Market.TradeBar.TradeBar(System.DateTime, QuantConnect.Symbol, decimal, decimal, decimal, decimal, decimal, System.TimeSpan?)", span="158-158"];
n0 -> n8  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
n0 -> n10  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
n0 -> n11  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
n0 -> n12  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n0 -> n13  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n0 -> n17  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n0 -> n18  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n0 -> n23  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
n0 -> n24  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
n0 -> n25  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
n0 -> n27  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
n0 -> n32  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n0 -> n43  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n0 -> n55  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
n1 -> n12  [color=darkseagreen4, key=1, label=isLong, style=dashed];
n1 -> n31  [color=darkseagreen4, key=1, label=isLong, style=dashed];
n2 -> n17  [color=darkseagreen4, key=1, label=isShort, style=dashed];
n2 -> n42  [color=darkseagreen4, key=1, label=isShort, style=dashed];
n4 -> n13  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
n4 -> n28  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
n4 -> n55  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
n5 -> n18  [color=darkseagreen4, key=1, label=absoluteHoldingsQuantity, style=dashed];
n6 -> n55  [color=darkseagreen4, key=1, label=averageHoldingsPrice, style=dashed];
n9 -> n11  [color=darkseagreen4, key=1, label=feeThisOrder, style=dashed];
n9 -> n25  [color=darkseagreen4, key=1, label=feeThisOrder, style=dashed];
n14 -> n23  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n14 -> n24  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n14 -> n25  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n15 -> n23  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n15 -> n24  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n15 -> n25  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n19 -> n23  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n19 -> n24  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n19 -> n25  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n20 -> n23  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n20 -> n24  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n20 -> n25  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n29 -> n55  [color=darkseagreen4, key=1, label=averageHoldingsPrice, style=dashed];
n34 -> n55  [color=darkseagreen4, key=1, label=averageHoldingsPrice, style=dashed];
n37 -> n40  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
n37 -> n55  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
n45 -> n48  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
n51 -> n55  [color=darkseagreen4, key=1, label=averageHoldingsPrice, style=dashed];
n3 -> n22  [color=darkseagreen4, key=1, label=closedPosition, style=dashed];
n7 -> n23  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n7 -> n24  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
n7 -> n25  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
m0_69 -> m0_72  [color=darkseagreen4, key=1, label=entry, style=dashed];
m0_69 -> m0_73  [color=darkseagreen4, key=1, label=entry, style=dashed];
m0_65 -> m0_73  [color=darkseagreen4, key=1, label=data, style=dashed];
m0_65 -> m0_76  [color=darkseagreen4, key=1, label=data, style=dashed];
m0_67 -> m0_72  [color=darkseagreen4, key=1, label=zipStream, style=dashed];
m0_71 -> m0_73  [color=darkseagreen4, key=1, label=buffer, style=dashed];
m0_259 -> m0_261  [color=darkseagreen4, key=1, label=entryReader, style=dashed];
m0_126 -> m0_128  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_126 -> m0_133  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_129 -> m0_133  [color=darkseagreen4, key=1, label=buffer, style=dashed];
m0_132 -> m0_134  [color=darkseagreen4, key=1, label=sourceBytes, style=dashed];
m0_240 -> m0_242  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_240 -> m0_244  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_84 -> m0_90  [color=darkseagreen4, key=1, label="byte[]", style=dashed];
m0_85 -> m0_91  [color=darkseagreen4, key=1, label=memoryStream, style=dashed];
m0_86 -> m0_88  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_86 -> m0_90  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_6 -> m0_8  [color=darkseagreen4, key=1, label=file, style=dashed];
m0_31 -> m0_35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>", style=dashed];
m0_33 -> m0_40  [color=darkseagreen4, key=1, label=buffer, style=dashed];
m0_33 -> m0_41  [color=darkseagreen4, key=1, label=buffer, style=dashed];
m0_36 -> m0_38  [color=darkseagreen4, key=1, label=file, style=dashed];
m0_34 -> m0_37  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_34 -> m0_41  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_34 -> m0_43  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_21 -> m0_25  [color=darkseagreen4, key=1, label=allow, style=dashed];
m0_5 -> m0_7  [color=darkseagreen4, key=1, label=entry, style=dashed];
m0_3 -> m0_7  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_3 -> m0_11  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_3 -> m0_13  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_3 -> m0_14  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_2 -> m0_11  [color=darkseagreen4, key=1, label=buffer, style=dashed];
m0_10 -> m0_12  [color=darkseagreen4, key=1, label=sourceBytes, style=dashed];
m0_147 -> m0_150  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_147 -> m0_151  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_153 -> m0_161  [color=darkseagreen4, key=1, label=file, style=dashed];
m0_158 -> m0_160  [color=darkseagreen4, key=1, label=outputFile, style=dashed];
m0_158 -> m0_161  [color=darkseagreen4, key=1, label=outputFile, style=dashed];
m0_38 -> m0_38  [color=darkseagreen4, key=1, label=file, style=dashed];
m0_38 -> m0_40  [color=darkseagreen4, key=1, label=ms, style=dashed];
m0_42 -> m0_46  [color=green, key=1, label=allow, style=dashed];
m0_49 -> m0_45  [color=green, key=1, label="QuantConnect.Notifications.NotificationManager", style=dashed];
m0_49 -> m0_8  [color=darkseagreen4, key=1, label="QuantConnect.Notifications.NotificationManager", style=dashed];
m0_49 -> m0_11  [color=darkseagreen4, key=1, label="QuantConnect.Notifications.NotificationManager", style=dashed];
m0_49 -> m0_12  [color=darkseagreen4, key=1, label="QuantConnect.Notifications.NotificationManager", style=dashed];
m0_49 -> m0_19  [color=darkseagreen4, key=1, label="QuantConnect.Notifications.NotificationManager", style=dashed];
m0_49 -> m0_21  [color=darkseagreen4, key=1, label="QuantConnect.Notifications.NotificationManager", style=dashed];
m0_49 -> m0_24  [color=darkseagreen4, key=1, label="QuantConnect.Notifications.NotificationManager", style=dashed];
m0_49 -> m0_30  [color=darkseagreen4, key=1, label="QuantConnect.Notifications.NotificationManager", style=dashed];
m0_49 -> m0_35  [color=darkseagreen4, key=1, label="QuantConnect.Notifications.NotificationManager", style=dashed];
m0_49 -> m0_40  [color=darkseagreen4, key=1, label="QuantConnect.Notifications.NotificationManager", style=dashed];
m0_317 -> m0_321  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_318 -> m0_324  [color=darkseagreen4, key=1, label=inStream, style=dashed];
m0_319 -> m0_323  [color=darkseagreen4, key=1, label=gzipStream, style=dashed];
m0_320 -> m0_322  [color=darkseagreen4, key=1, label=tarArchive, style=dashed];
m0_307 -> m0_310  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_308 -> m0_312  [color=darkseagreen4, key=1, label=inStream, style=dashed];
m0_309 -> m0_311  [color=darkseagreen4, key=1, label=tarArchive, style=dashed];
m0_173 -> m0_176  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_174 -> m0_180  [color=darkseagreen4, key=1, label=zipStream, style=dashed];
m0_174 -> m0_182  [color=darkseagreen4, key=1, label=zipStream, style=dashed];
m0_176 -> m0_178  [color=darkseagreen4, key=1, label=file, style=dashed];
m0_175 -> m0_182  [color=darkseagreen4, key=1, label=buffer, style=dashed];
m0_268 -> m0_270  [color=darkseagreen4, key=1, label=entry, style=dashed];
m0_267 -> m0_270  [color=darkseagreen4, key=1, label=zipStream, style=dashed];
m0_232 -> m0_251  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_250 -> m0_255  [color=darkseagreen4, key=1, label=zip, style=dashed];
m0_328 -> m0_333  [color=darkseagreen4, key=1, label=tar, style=dashed];
m0_330 -> m0_334  [color=darkseagreen4, key=1, label=entry, style=dashed];
m0_332 -> m0_334  [color=darkseagreen4, key=1, label=output, style=dashed];
m0_279 -> m0_294  [color=darkseagreen4, key=1, label=files, style=dashed];
m0_279 -> m0_297  [color=darkseagreen4, key=1, label=files, style=dashed];
m0_280 -> m0_282  [color=darkseagreen4, key=1, label=slash, style=dashed];
m0_292 -> m0_296  [color=darkseagreen4, key=1, label=zipStream, style=dashed];
m0_291 -> m0_296  [color=darkseagreen4, key=1, label=buffer, style=dashed];
m0_190 -> m0_193  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_190 -> m0_219  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_190 -> m0_197  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_190 -> m0_205  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_190 -> m0_207  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_191 -> m0_208  [color=darkseagreen4, key=1, label=reader, style=dashed];
m0_194 -> m0_201  [color=darkseagreen4, key=1, label="out Ionic.Zip.ZipFile", style=dashed];
m0_194 -> m0_202  [color=darkseagreen4, key=1, label="out Ionic.Zip.ZipFile", style=dashed];
m0_194 -> m0_209  [color=darkseagreen4, key=1, label="out Ionic.Zip.ZipFile", style=dashed];
m0_195 -> m0_218  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_192 -> m0_209  [color=darkseagreen4, key=1, label="out Ionic.Zip.ZipFile", style=dashed];
m0_198 -> m0_203  [color=darkseagreen4, key=1, label=reader, style=dashed];
m0_198 -> m0_204  [color=darkseagreen4, key=1, label=reader, style=dashed];
m0_136 -> m0_138  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_136 -> m0_139  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_222 -> m0_224  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_222 -> m0_226  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_50 -> m0_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_51 -> m0_54  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_52 -> m0_56  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_96 -> m0_111  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_96 -> m0_112  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_98 -> m0_107  [color=darkseagreen4, key=1, label=buffer, style=dashed];
m0_106 -> m0_108  [color=darkseagreen4, key=1, label=sourceBytes, style=dashed];
m0_100 -> m0_115  [color=darkseagreen4, key=1, label=zipPath, style=dashed];
m0_101 -> m0_103  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_101 -> m0_107  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_101 -> m0_109  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_101 -> m0_110  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_341 -> m0_344  [color=darkseagreen4, key=1, label=gzip, style=dashed];
m0_343 -> m0_351  [color=darkseagreen4, key=1, label=tarIn, style=dashed];
m0_343 -> m0_353  [color=darkseagreen4, key=1, label=tarIn, style=dashed];
m0_348 -> m0_352  [color=darkseagreen4, key=1, label=tarEntry, style=dashed];
m0_346 -> m0_351  [color=darkseagreen4, key=1, label=tarIn, style=dashed];
m0_346 -> m0_353  [color=darkseagreen4, key=1, label=tarIn, style=dashed];
m0_350 -> m0_352  [color=darkseagreen4, key=1, label=stream, style=dashed];
m0_357 -> m0_219  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_64 -> m2_70  [color=darkseagreen4, key=1, label=noon, style=dashed];
m2_65 -> m2_69  [color=darkseagreen4, key=1, label=timeKeeper, style=dashed];
m2_66 -> m2_71  [color=darkseagreen4, key=1, label=symbol, style=dashed];
m2_67 -> m2_72  [color=darkseagreen4, key=1, label=config, style=dashed];
m2_68 -> m2_70  [color=darkseagreen4, key=1, label=security, style=dashed];
m2_68 -> m2_71  [color=darkseagreen4, key=1, label=security, style=dashed];
m2_68 -> m2_72  [color=darkseagreen4, key=1, label=security, style=dashed];
m2_1 -> m2_15  [color=darkseagreen4, key=1, label=symbol, style=dashed];
m2_6 -> m2_10  [color=darkseagreen4, key=1, label=security, style=dashed];
m2_6 -> m2_15  [color=darkseagreen4, key=1, label=security, style=dashed];
m2_18 -> m2_20  [color=darkseagreen4, key=1, label=fill, style=dashed];
m2_13 -> m2_15  [color=darkseagreen4, key=1, label=bidPrice, style=dashed];
m2_40 -> m2_46  [color=darkseagreen4, key=1, label=noon, style=dashed];
m2_41 -> m2_45  [color=darkseagreen4, key=1, label=timeKeeper, style=dashed];
m2_42 -> m2_47  [color=darkseagreen4, key=1, label=symbol, style=dashed];
m2_43 -> m2_48  [color=darkseagreen4, key=1, label=config, style=dashed];
m2_44 -> m2_46  [color=darkseagreen4, key=1, label=security, style=dashed];
m2_44 -> m2_47  [color=darkseagreen4, key=1, label=security, style=dashed];
m2_44 -> m2_48  [color=darkseagreen4, key=1, label=security, style=dashed];
}
