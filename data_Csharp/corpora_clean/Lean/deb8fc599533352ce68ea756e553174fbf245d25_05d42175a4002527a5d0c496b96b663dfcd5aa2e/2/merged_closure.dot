digraph  {
n289 [label="QuantConnect.Tests.Brokerages.BrokerageTests", span=""];
n290 [label=sync, span=""];
n291 [label=remaining, span=""];
n292 [label=manualResetEvent, span=""];
n293 [label=filledResetEvent, span=""];
n294 [label="QuantConnect.Orders.Order", span=""];
n295 [label=requiredStatusEvent, span=""];
n296 [label="QuantConnect.Orders.OrderStatus", span=""];
n297 [label=desiredStatusEvent, span=""];
n0 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", span="58-58"];
n1 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="Log.Trace('''')", span="60-60"];
n2 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="Log.Trace('''')", span="61-61"];
n14 [cluster="QuantConnect.Logging.Log.Trace(string, bool)", label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106"];
n3 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="Log.Trace(''--- SETUP ---'')", span="62-62"];
n4 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="Log.Trace('''')", span="63-63"];
n5 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="Log.Trace('''')", span="64-64"];
n6 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="_brokerage = null", span="66-66"];
n7 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="_orderProvider = null", span="67-67"];
n8 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="_securityProvider = null", span="68-68"];
n9 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="Thread.Sleep(1000)", span="69-69"];
n10 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="CancelOpenOrders()", span="70-70"];
n15 [cluster="System.Threading.Thread.Sleep(int)", label="Entry System.Threading.Thread.Sleep(int)", span="0-0"];
n11 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="LiquidateHoldings()", span="71-71"];
n16 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CancelOpenOrders()", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.CancelOpenOrders()", span="233-233"];
n12 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="Thread.Sleep(1000)", span="72-72"];
n17 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", span="215-215"];
n13 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.Setup()", span="58-58"];
n18 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Teardown()", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.Teardown()", span="76-76"];
n19 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Teardown()", label="Log.Trace('''')", span="80-80"];
n20 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Teardown()", label="Log.Trace('''')", span="81-81"];
n21 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Teardown()", label="Log.Trace(''--- TEARDOWN ---'')", span="82-82"];
n22 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Teardown()", label="Log.Trace('''')", span="83-83"];
n23 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Teardown()", label="Log.Trace('''')", span="84-84"];
n24 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Teardown()", label="Thread.Sleep(1000)", span="85-85"];
n25 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Teardown()", label="CancelOpenOrders()", span="86-86"];
n26 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Teardown()", label="LiquidateHoldings()", span="87-87"];
n27 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Teardown()", label="Thread.Sleep(1000)", span="88-88"];
n28 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.Teardown()", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.Teardown()", span="76-76"];
n29 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", span="111-111"];
n30 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="Log.Trace('''')", span="113-113"];
n31 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="Log.Trace(''- INITIALIZING BROKERAGE -'')", span="114-114"];
n32 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="Log.Trace('''')", span="115-115"];
n33 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="var brokerage = CreateBrokerage(OrderProvider, SecurityProvider)", span="117-117"];
n34 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="brokerage.Connect()", span="118-118"];
n52 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", span="202-202"];
n35 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="!brokerage.IsConnected", span="120-120"];
n37 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="brokerage.Name == ''GDAX''", span="126-126"];
n38 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="((QuantConnect.Brokerages.GDAX.GDAXBrokerage)brokerage).Subscribe(null, new[] { Symbol })", span="128-128"];
n42 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="brokerage.GetOpenOrders()", span="134-134"];
n47 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="brokerage.GetAccountHoldings()", span="142-142"];
n49 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="brokerage.OrderStatusChanged += (sender, args) =>\r\n            {\r\n                Log.Trace('''');\r\n                Log.Trace(''ORDER STATUS CHANGED: '' + args);\r\n                Log.Trace('''');\r\n\r\n                // we need to keep this maintained properly\r\n                if (args.Status == OrderStatus.Filled || args.Status == OrderStatus.PartiallyFilled)\r\n                {\r\n                    Log.Trace(''FILL EVENT: '' + args.FillQuantity + '' units of '' + args.Symbol.ToString());\r\n\r\n                    Security security;\r\n                    if (_securityProvider.TryGetValue(args.Symbol, out security))\r\n                    {\r\n                        var holding = _securityProvider[args.Symbol].Holdings;\r\n                        holding.SetHoldings(args.FillPrice, holding.Quantity + args.FillQuantity);\r\n                    }\r\n                    else\r\n                    {\r\n                        _securityProvider[args.Symbol] = CreateSecurity(args.Symbol);\r\n                        _securityProvider[args.Symbol].Holdings.SetHoldings(args.FillPrice, args.FillQuantity);\r\n                    }\r\n\r\n                    Log.Trace(''--HOLDINGS: '' + _securityProvider[args.Symbol]);\r\n\r\n                    // update order mapping\r\n                    var order = _orderProvider.GetOrderById(args.OrderId);\r\n                    order.Status = args.Status;\r\n                }\r\n            }", span="148-177"];
n50 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="return brokerage;", span="178-178"];
n53 [cluster="QuantConnect.Interfaces.IBrokerage.Connect()", label="Entry QuantConnect.Interfaces.IBrokerage.Connect()", span="103-103"];
n36 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="Assert.Fail(''Failed to connect to brokerage'')", span="122-122"];
n54 [cluster="Unk.Fail", label="Entry Unk.Fail", span=""];
n39 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="Log.Trace('''')", span="131-131"];
n55 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.Subscribe(QuantConnect.Packets.LiveNodePacket, System.Collections.Generic.IEnumerable<QuantConnect.Symbol>)", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.Subscribe(QuantConnect.Packets.LiveNodePacket, System.Collections.Generic.IEnumerable<QuantConnect.Symbol>)", span="259-259"];
n40 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="Log.Trace(''GET OPEN ORDERS'')", span="132-132"];
n41 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="Log.Trace('''')", span="133-133"];
n43 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="OrderProvider.Add(openOrder)", span="136-136"];
n44 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="Log.Trace('''')", span="139-139"];
n56 [cluster="QuantConnect.Interfaces.IBrokerage.GetOpenOrders()", label="Entry QuantConnect.Interfaces.IBrokerage.GetOpenOrders()", span="65-65"];
n57 [cluster="QuantConnect.Tests.Brokerages.OrderProvider.Add(QuantConnect.Orders.Order)", label="Entry QuantConnect.Tests.Brokerages.OrderProvider.Add(QuantConnect.Orders.Order)", span="42-42"];
n45 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="Log.Trace(''GET ACCOUNT HOLDINGS'')", span="140-140"];
n46 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="Log.Trace('''')", span="141-141"];
n48 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="SecurityProvider[accountHolding.Symbol] = CreateSecurity(accountHolding.Symbol)", span="146-146"];
n58 [cluster="QuantConnect.Interfaces.IBrokerage.GetAccountHoldings()", label="Entry QuantConnect.Interfaces.IBrokerage.GetAccountHoldings()", span="71-71"];
n59 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CreateSecurity(QuantConnect.Symbol)", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.CreateSecurity(QuantConnect.Symbol)", span="181-181"];
n62 [cluster="lambda expression", label="Log.Trace(''ORDER STATUS CHANGED: '' + args)", span="151-151"];
n64 [cluster="lambda expression", label="args.Status == OrderStatus.Filled || args.Status == OrderStatus.PartiallyFilled", span="155-155"];
n65 [cluster="lambda expression", label="Log.Trace(''FILL EVENT: '' + args.FillQuantity + '' units of '' + args.Symbol.ToString())", span="157-157"];
n67 [cluster="lambda expression", label="_securityProvider.TryGetValue(args.Symbol, out security)", span="160-160"];
n68 [cluster="lambda expression", label="var holding = _securityProvider[args.Symbol].Holdings", span="162-162"];
n69 [cluster="lambda expression", label="holding.SetHoldings(args.FillPrice, holding.Quantity + args.FillQuantity)", span="163-163"];
n70 [cluster="lambda expression", label="_securityProvider[args.Symbol] = CreateSecurity(args.Symbol)", span="167-167"];
n71 [cluster="lambda expression", label="_securityProvider[args.Symbol].Holdings.SetHoldings(args.FillPrice, args.FillQuantity)", span="168-168"];
n72 [cluster="lambda expression", label="Log.Trace(''--HOLDINGS: '' + _securityProvider[args.Symbol])", span="171-171"];
n73 [cluster="lambda expression", label="var order = _orderProvider.GetOrderById(args.OrderId)", span="174-174"];
n74 [cluster="lambda expression", label="order.Status = args.Status", span="175-175"];
n51 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.InitializeBrokerage()", span="111-111"];
n60 [cluster="lambda expression", label="Entry lambda expression", span="148-177"];
n61 [cluster="lambda expression", label="Log.Trace('''')", span="150-150"];
n63 [cluster="lambda expression", label="Log.Trace('''')", span="152-152"];
n75 [cluster="lambda expression", label="Exit lambda expression", span="148-177"];
n66 [cluster="lambda expression", label="Security security", span="159-159"];
n76 [cluster="QuantConnect.Symbol.ToString()", label="Entry QuantConnect.Symbol.ToString()", span="350-350"];
n77 [cluster="QuantConnect.Tests.Brokerages.SecurityProvider.TryGetValue(QuantConnect.Symbol, out QuantConnect.Securities.Security)", label="Entry QuantConnect.Tests.Brokerages.SecurityProvider.TryGetValue(QuantConnect.Symbol, out QuantConnect.Securities.Security)", span="52-52"];
n78 [cluster="QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, decimal)", label="Entry QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, decimal)", span="392-392"];
n79 [cluster="QuantConnect.Tests.Brokerages.OrderProvider.GetOrderById(int)", label="Entry QuantConnect.Tests.Brokerages.OrderProvider.GetOrderById(int)", span="53-53"];
n81 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CreateSecurity(QuantConnect.Symbol)", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.CreateSecurity(QuantConnect.Symbol)", span="181-181"];
n82 [cluster="QuantConnect.Securities.Security.Security(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", label="Entry QuantConnect.Securities.Security.Security(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", span="315-315"];
n83 [cluster="QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", label="Entry QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", span="82-82"];
n84 [cluster="QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", label="Entry QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", span="161-161"];
n85 [cluster="QuantConnect.Securities.Cash.Cash(string, decimal, decimal)", label="Entry QuantConnect.Securities.Cash.Cash(string, decimal, decimal)", span="68-68"];
n86 [cluster="QuantConnect.Securities.SymbolProperties.GetDefault(string)", label="Entry QuantConnect.Securities.SymbolProperties.GetDefault(string)", span="84-84"];
n87 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", span="202-202"];
n88 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.DisposeBrokerage(QuantConnect.Interfaces.IBrokerage)", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.DisposeBrokerage(QuantConnect.Interfaces.IBrokerage)", span="208-208"];
n89 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.DisposeBrokerage(QuantConnect.Interfaces.IBrokerage)", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.DisposeBrokerage(QuantConnect.Interfaces.IBrokerage)", span="208-208"];
n90 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", label="Log.Trace('''')", span="217-217"];
n91 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", label="Log.Trace(''LIQUIDATE HOLDINGS'')", span="218-218"];
n92 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", label="Log.Trace('''')", span="219-219"];
n93 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", label="var holdings = Brokerage.GetAccountHoldings()", span="221-221"];
n94 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", label=holdings, span="223-223"];
n95 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", label="holding.Quantity == 0", span="225-225"];
n100 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", span="215-215"];
n96 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", label="Log.Trace(''Liquidating: '' + holding)", span="226-226"];
n97 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", label="var order = new MarketOrder(holding.Symbol, (int)-holding.Quantity, DateTime.Now)", span="227-227"];
n98 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", label="_orderProvider.Add(order)", span="228-228"];
n101 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string)", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string)", span="47-47"];
n99 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LiquidateHoldings()", label="PlaceOrderWaitForStatus(order, OrderStatus.Filled)", span="229-229"];
n102 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PlaceOrderWaitForStatus(QuantConnect.Orders.Order, QuantConnect.Orders.OrderStatus, double, bool)", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.PlaceOrderWaitForStatus(QuantConnect.Orders.Order, QuantConnect.Orders.OrderStatus, double, bool)", span="498-498"];
n103 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CancelOpenOrders()", label="Log.Trace('''')", span="235-235"];
n104 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CancelOpenOrders()", label="Log.Trace(''CANCEL OPEN ORDERS'')", span="236-236"];
n105 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CancelOpenOrders()", label="Log.Trace('''')", span="237-237"];
n106 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CancelOpenOrders()", label="var openOrders = Brokerage.GetOpenOrders()", span="238-238"];
n107 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CancelOpenOrders()", label=openOrders, span="239-239"];
n108 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CancelOpenOrders()", label="Log.Trace(''Canceling: '' + openOrder)", span="241-241"];
n110 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CancelOpenOrders()", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.CancelOpenOrders()", span="233-233"];
n109 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CancelOpenOrders()", label="Brokerage.CancelOrder(openOrder)", span="242-242"];
n111 [cluster="QuantConnect.Interfaces.IBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="Entry QuantConnect.Interfaces.IBrokerage.CancelOrder(QuantConnect.Orders.Order)", span="98-98"];
n112 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAskPrice(QuantConnect.Symbol)", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.GetAskPrice(QuantConnect.Symbol)", span="271-271"];
n113 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAskPrice(QuantConnect.Symbol)", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.GetAskPrice(QuantConnect.Symbol)", span="271-271"];
n114 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetDefaultQuantity()", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.GetDefaultQuantity()", span="276-276"];
n115 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetDefaultQuantity()", label="return 1;", span="278-278"];
n116 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetDefaultQuantity()", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.GetDefaultQuantity()", span="276-276"];
n117 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.IsConnected()", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.IsConnected()", span="282-282"];
n118 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.IsConnected()", label="Assert.IsTrue(Brokerage.IsConnected)", span="284-284"];
n119 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.IsConnected()", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.IsConnected()", span="282-282"];
n120 [cluster="Unk.IsTrue", label="Entry Unk.IsTrue", span=""];
n121 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.LongFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", span="288-288"];
n122 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace('''')", span="290-290"];
n125 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="PlaceOrderWaitForStatus(parameters.CreateLongOrder(GetDefaultQuantity()), parameters.ExpectedStatus)", span="293-293"];
n123 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace(''LONG FROM ZERO'')", span="291-291"];
n124 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace('''')", span="292-292"];
n126 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.LongFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", span="288-288"];
n127 [cluster="QuantConnect.Tests.Brokerages.OrderTestParameters.CreateLongOrder(decimal)", label="Entry QuantConnect.Tests.Brokerages.OrderTestParameters.CreateLongOrder(decimal)", span="51-51"];
n128 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", span="297-297"];
n129 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace('''')", span="299-299"];
n132 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="PlaceOrderWaitForStatus(parameters.CreateLongMarketOrder(GetDefaultQuantity()), OrderStatus.Filled)", span="303-303"];
n133 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="PlaceOrderWaitForStatus(parameters.CreateShortOrder(GetDefaultQuantity()), parameters.ExpectedStatus)", span="306-306"];
n130 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace(''CLOSE FROM LONG'')", span="300-300"];
n131 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace('''')", span="301-301"];
n135 [cluster="QuantConnect.Tests.Brokerages.OrderTestParameters.CreateLongMarketOrder(decimal)", label="Entry QuantConnect.Tests.Brokerages.OrderTestParameters.CreateLongMarketOrder(decimal)", span="35-35"];
n134 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", span="297-297"];
n136 [cluster="QuantConnect.Tests.Brokerages.OrderTestParameters.CreateShortOrder(decimal)", label="Entry QuantConnect.Tests.Brokerages.OrderTestParameters.CreateShortOrder(decimal)", span="47-47"];
n137 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", span="310-310"];
n138 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace('''')", span="312-312"];
n141 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="PlaceOrderWaitForStatus(parameters.CreateShortOrder(GetDefaultQuantity()), parameters.ExpectedStatus)", span="315-315"];
n139 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace(''SHORT FROM ZERO'')", span="313-313"];
n140 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace('''')", span="314-314"];
n142 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromZero(QuantConnect.Tests.Brokerages.OrderTestParameters)", span="310-310"];
n143 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", span="319-319"];
n144 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace('''')", span="321-321"];
n147 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="PlaceOrderWaitForStatus(parameters.CreateShortMarketOrder(GetDefaultQuantity()), OrderStatus.Filled)", span="325-325"];
n148 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="PlaceOrderWaitForStatus(parameters.CreateLongOrder(GetDefaultQuantity()), parameters.ExpectedStatus)", span="328-328"];
n145 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace(''CLOSE FROM SHORT'')", span="322-322"];
n146 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace('''')", span="323-323"];
n150 [cluster="QuantConnect.Tests.Brokerages.OrderTestParameters.CreateShortMarketOrder(decimal)", label="Entry QuantConnect.Tests.Brokerages.OrderTestParameters.CreateShortMarketOrder(decimal)", span="39-39"];
n149 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.CloseFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", span="319-319"];
n151 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", span="332-332"];
n152 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace('''')", span="334-334"];
n155 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="PlaceOrderWaitForStatus(parameters.CreateLongMarketOrder(GetDefaultQuantity()))", span="338-338"];
n156 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="var order = PlaceOrderWaitForStatus(parameters.CreateShortOrder(2 * GetDefaultQuantity()), parameters.ExpectedStatus)", span="341-341"];
n157 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="parameters.ModifyUntilFilled", span="343-343"];
n158 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="ModifyOrderUntilFilled(order, parameters)", span="345-345"];
n153 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace(''SHORT FROM LONG'')", span="335-335"];
n154 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace('''')", span="336-336"];
n159 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.ShortFromLong(QuantConnect.Tests.Brokerages.OrderTestParameters)", span="332-332"];
n160 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", span="439-439"];
n161 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.LongFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", span="350-350"];
n162 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace('''')", span="352-352"];
n165 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="PlaceOrderWaitForStatus(parameters.CreateShortMarketOrder(-GetDefaultQuantity()), OrderStatus.Filled)", span="356-356"];
n166 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="var order = PlaceOrderWaitForStatus(parameters.CreateLongOrder(2 * GetDefaultQuantity()), parameters.ExpectedStatus)", span="359-359"];
n167 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="parameters.ModifyUntilFilled", span="361-361"];
n168 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="ModifyOrderUntilFilled(order, parameters)", span="363-363"];
n163 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace(''LONG FROM SHORT'')", span="353-353"];
n164 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Log.Trace('''')", span="354-354"];
n169 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.LongFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.LongFromShort(QuantConnect.Tests.Brokerages.OrderTestParameters)", span="350-350"];
n170 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetCashBalanceContainsUSD()", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.GetCashBalanceContainsUSD()", span="368-368"];
n171 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetCashBalanceContainsUSD()", label="Log.Trace('''')", span="370-370"];
n172 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetCashBalanceContainsUSD()", label="Log.Trace(''GET CASH BALANCE'')", span="371-371"];
n173 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetCashBalanceContainsUSD()", label="Log.Trace('''')", span="372-372"];
n174 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetCashBalanceContainsUSD()", label="var balance = Brokerage.GetCashBalance()", span="373-373"];
n175 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetCashBalanceContainsUSD()", label="Assert.AreEqual(1, balance.Count(x => x.Symbol == ''USD''))", span="374-374"];
n177 [cluster="QuantConnect.Interfaces.IBrokerage.GetCashBalance()", label="Entry QuantConnect.Interfaces.IBrokerage.GetCashBalance()", span="77-77"];
n176 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetCashBalanceContainsUSD()", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.GetCashBalanceContainsUSD()", span="368-368"];
n178 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", span="0-0"];
n179 [cluster="Unk.AreEqual", label="Entry Unk.AreEqual", span=""];
n180 [cluster="lambda expression", label="Entry lambda expression", span="374-374"];
n181 [cluster="lambda expression", label="x.Symbol == ''USD''", span="374-374"];
n182 [cluster="lambda expression", label="Exit lambda expression", span="374-374"];
n183 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", span="378-378"];
n184 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", label="Log.Trace('''')", span="380-380"];
n185 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", label="Log.Trace(''GET ACCOUNT HOLDINGS'')", span="381-381"];
n186 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", label="Log.Trace('''')", span="382-382"];
n187 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", label="var before = Brokerage.GetAccountHoldings()", span="383-383"];
n188 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", label="PlaceOrderWaitForStatus(new MarketOrder(Symbol, GetDefaultQuantity(), DateTime.Now))", span="385-385"];
n190 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", label="var beforeHoldings = before.FirstOrDefault(x => x.Symbol == Symbol)", span="389-389"];
n189 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", label="var after = Brokerage.GetAccountHoldings()", span="387-387"];
n191 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", label="var afterHoldings = after.FirstOrDefault(x => x.Symbol == Symbol)", span="390-390"];
n196 [cluster="Unk.FirstOrDefault", label="Entry Unk.FirstOrDefault", span=""];
n197 [cluster="lambda expression", label="Entry lambda expression", span="389-389"];
n192 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", label="var beforeQuantity = beforeHoldings == null ? 0 : beforeHoldings.Quantity", span="392-392"];
n200 [cluster="lambda expression", label="Entry lambda expression", span="390-390"];
n193 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", label="var afterQuantity = afterHoldings == null ? 0 : afterHoldings.Quantity", span="393-393"];
n194 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", label="Assert.AreEqual(GetDefaultQuantity(), afterQuantity - beforeQuantity)", span="395-395"];
n195 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.GetAccountHoldings()", span="378-378"];
n198 [cluster="lambda expression", label="x.Symbol == Symbol", span="389-389"];
n199 [cluster="lambda expression", label="Exit lambda expression", span="389-389"];
n201 [cluster="lambda expression", label="x.Symbol == Symbol", span="390-390"];
n202 [cluster="lambda expression", label="Exit lambda expression", span="390-390"];
n203 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="Entry QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", span="399-399"];
n204 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="var manualResetEvent = new ManualResetEvent(false)", span="401-401"];
n205 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="var qty = 1000000m", span="403-403"];
n218 [cluster="System.Threading.ManualResetEvent.ManualResetEvent(bool)", label="Entry System.Threading.ManualResetEvent.ManualResetEvent(bool)", span="0-0"];
n208 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="Brokerage.OrderStatusChanged += (sender, orderEvent) =>\r\n            {\r\n                lock (sync)\r\n                {\r\n                    remaining -= orderEvent.FillQuantity;\r\n                    Console.WriteLine(''Remaining: '' + remaining + '' FillQuantity: '' + orderEvent.FillQuantity);\r\n                    if (orderEvent.Status == OrderStatus.Filled)\r\n                    {\r\n                        manualResetEvent.Set();\r\n                    }\r\n                }\r\n            }", span="406-417"];
n228 [cluster="lambda expression", label="manualResetEvent.Set()", span="414-414"];
n212 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="manualResetEvent.WaitOne(2500)", span="425-425"];
n213 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="manualResetEvent.WaitOne(2500)", span="426-426"];
n214 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="manualResetEvent.WaitOne(2500)", span="427-427"];
n206 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="var remaining = qty", span="404-404"];
n210 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="var order = new MarketOrder(symbol, qty, DateTime.UtcNow) { Id = 1 }", span="421-421"];
n207 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="var sync = new object()", span="405-405"];
n219 [cluster="object.Object()", label="Entry object.Object()", span="0-0"];
n224 [cluster="lambda expression", label=sync, span="408-408"];
n209 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="var symbol = Symbols.EURUSD", span="420-420"];
n225 [cluster="lambda expression", label="remaining -= orderEvent.FillQuantity", span="410-410"];
n226 [cluster="lambda expression", label="Console.WriteLine(''Remaining: '' + remaining + '' FillQuantity: '' + orderEvent.FillQuantity)", span="411-411"];
n227 [cluster="lambda expression", label="orderEvent.Status == OrderStatus.Filled", span="412-412"];
n211 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="Brokerage.PlaceOrder(order)", span="422-422"];
n220 [cluster="QuantConnect.Interfaces.IBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="Entry QuantConnect.Interfaces.IBrokerage.PlaceOrder(QuantConnect.Orders.Order)", span="84-84"];
n221 [cluster="System.Threading.WaitHandle.WaitOne(int)", label="Entry System.Threading.WaitHandle.WaitOne(int)", span="0-0"];
n215 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="Console.WriteLine(''Remaining: '' + remaining)", span="429-429"];
n216 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="Assert.AreEqual(0, remaining)", span="430-430"];
n222 [cluster="System.Console.WriteLine(string)", label="Entry System.Console.WriteLine(string)", span="0-0"];
n217 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.PartialFills()", span="399-399"];
n223 [cluster="lambda expression", label="Entry lambda expression", span="406-417"];
n229 [cluster="lambda expression", label="Exit lambda expression", span="406-417"];
n230 [cluster="System.Threading.EventWaitHandle.Set()", label="Entry System.Threading.EventWaitHandle.Set()", span="0-0"];
n231 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="order.Status == OrderStatus.Filled", span="441-441"];
n234 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="EventHandler<OrderEvent> brokerageOnOrderStatusChanged = (sender, args) =>\r\n            {\r\n                if (args.Status == OrderStatus.Filled)\r\n                {\r\n                    filledResetEvent.Set();\r\n                }\r\n                if (args.Status == OrderStatus.Canceled || args.Status == OrderStatus.Invalid)\r\n                {\r\n                    Log.Trace(''ModifyOrderUntilFilled(): '' + order);\r\n                    Assert.Fail(''Unexpected order status: '' + args.Status);\r\n                }\r\n            }", span="447-458"];
n261 [cluster="lambda expression", label="Log.Trace(''ModifyOrderUntilFilled(): '' + order)", span="455-455"];
n237 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="Log.Trace(''MODIFY UNTIL FILLED: '' + order)", span="463-463"];
n240 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="!filledResetEvent.WaitOne(3000) && stopwatch.Elapsed.TotalSeconds < secondsTimeout", span="466-466"];
n242 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="order.Status == OrderStatus.PartiallyFilled", span="469-469"];
n243 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="var marketPrice = GetAskPrice(order.Symbol)", span="471-471"];
n245 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="var updateOrder = parameters.ModifyOrderToFill(Brokerage, order, marketPrice)", span="474-474"];
n247 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="order.Status == OrderStatus.Filled", span="477-477"];
n248 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="Log.Trace(''BrokerageTests.ModifyOrderUntilFilled(): '' + order)", span="479-479"];
n249 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="!Brokerage.UpdateOrder(order)", span="480-480"];
n232 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="return;", span="443-443"];
n233 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="var filledResetEvent = new ManualResetEvent(false)", span="446-446"];
n259 [cluster="lambda expression", label="filledResetEvent.Set()", span="451-451"];
n241 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="filledResetEvent.Reset()", span="468-468"];
n235 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="Brokerage.OrderStatusChanged += brokerageOnOrderStatusChanged", span="460-460"];
n258 [cluster="lambda expression", label="args.Status == OrderStatus.Filled", span="449-449"];
n260 [cluster="lambda expression", label="args.Status == OrderStatus.Canceled || args.Status == OrderStatus.Invalid", span="453-453"];
n262 [cluster="lambda expression", label="Assert.Fail(''Unexpected order status: '' + args.Status)", span="456-456"];
n251 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="Brokerage.OrderStatusChanged -= brokerageOnOrderStatusChanged", span="487-487"];
n236 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="Log.Trace('''')", span="462-462"];
n238 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="Log.Trace('''')", span="464-464"];
n239 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="var stopwatch = Stopwatch.StartNew()", span="465-465"];
n253 [cluster="System.Diagnostics.Stopwatch.StartNew()", label="Entry System.Diagnostics.Stopwatch.StartNew()", span="0-0"];
n254 [cluster="System.Threading.EventWaitHandle.Reset()", label="Entry System.Threading.EventWaitHandle.Reset()", span="0-0"];
n244 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="Log.Trace(''BrokerageTests.ModifyOrderUntilFilled(): Ask: '' + marketPrice)", span="472-472"];
n246 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label=updateOrder, span="475-475"];
n255 [cluster="QuantConnect.Tests.Brokerages.OrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", label="Entry QuantConnect.Tests.Brokerages.OrderTestParameters.ModifyOrderToFill(QuantConnect.Interfaces.IBrokerage, QuantConnect.Orders.Order, decimal)", span="55-55"];
n250 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="Assert.Fail(''Brokerage failed to update the order'')", span="482-482"];
n256 [cluster="QuantConnect.Interfaces.IBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="Entry QuantConnect.Interfaces.IBrokerage.UpdateOrder(QuantConnect.Orders.Order)", span="91-91"];
n252 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.ModifyOrderUntilFilled(QuantConnect.Orders.Order, QuantConnect.Tests.Brokerages.OrderTestParameters, double)", span="439-439"];
n257 [cluster="lambda expression", label="Entry lambda expression", span="447-458"];
n263 [cluster="lambda expression", label="Exit lambda expression", span="447-458"];
n264 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PlaceOrderWaitForStatus(QuantConnect.Orders.Order, QuantConnect.Orders.OrderStatus, double, bool)", label="var requiredStatusEvent = new ManualResetEvent(false)", span="500-500"];
n266 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PlaceOrderWaitForStatus(QuantConnect.Orders.Order, QuantConnect.Orders.OrderStatus, double, bool)", label="EventHandler<OrderEvent> brokerageOnOrderStatusChanged = (sender, args) =>\r\n            {\r\n                // no matter what, every order should fire at least one of these\r\n                if (args.Status == OrderStatus.Submitted || args.Status == OrderStatus.Invalid)\r\n                {\r\n                    Log.Trace('''');\r\n                    Log.Trace(''SUBMITTED: '' + args);\r\n                    Log.Trace('''');\r\n                    requiredStatusEvent.Set();\r\n                }\r\n                // make sure we fire the status we're expecting\r\n                if (args.Status == expectedStatus)\r\n                {\r\n                    Log.Trace('''');\r\n                    Log.Trace(''EXPECTED: '' + args);\r\n                    Log.Trace('''');\r\n                    desiredStatusEvent.Set();\r\n                }\r\n            }", span="502-520"];
n283 [cluster="lambda expression", label="args.Status == expectedStatus", span="513-513"];
n268 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PlaceOrderWaitForStatus(QuantConnect.Orders.Order, QuantConnect.Orders.OrderStatus, double, bool)", label="OrderProvider.Add(order)", span="524-524"];
n269 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PlaceOrderWaitForStatus(QuantConnect.Orders.Order, QuantConnect.Orders.OrderStatus, double, bool)", label="!Brokerage.PlaceOrder(order) && !allowFailedSubmission", span="525-525"];
n270 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PlaceOrderWaitForStatus(QuantConnect.Orders.Order, QuantConnect.Orders.OrderStatus, double, bool)", label="Assert.Fail(''Brokerage failed to place the order: '' + order)", span="527-527"];
n274 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PlaceOrderWaitForStatus(QuantConnect.Orders.Order, QuantConnect.Orders.OrderStatus, double, bool)", label="return order;", span="534-534"];
n265 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PlaceOrderWaitForStatus(QuantConnect.Orders.Order, QuantConnect.Orders.OrderStatus, double, bool)", label="var desiredStatusEvent = new ManualResetEvent(false)", span="501-501"];
n282 [cluster="lambda expression", label="requiredStatusEvent.Set()", span="510-510"];
n287 [cluster="lambda expression", label="desiredStatusEvent.Set()", span="518-518"];
n267 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PlaceOrderWaitForStatus(QuantConnect.Orders.Order, QuantConnect.Orders.OrderStatus, double, bool)", label="Brokerage.OrderStatusChanged += brokerageOnOrderStatusChanged", span="522-522"];
n278 [cluster="lambda expression", label="args.Status == OrderStatus.Submitted || args.Status == OrderStatus.Invalid", span="505-505"];
n280 [cluster="lambda expression", label="Log.Trace(''SUBMITTED: '' + args)", span="508-508"];
n285 [cluster="lambda expression", label="Log.Trace(''EXPECTED: '' + args)", span="516-516"];
n273 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PlaceOrderWaitForStatus(QuantConnect.Orders.Order, QuantConnect.Orders.OrderStatus, double, bool)", label="Brokerage.OrderStatusChanged -= brokerageOnOrderStatusChanged", span="532-532"];
n276 [cluster="System.Threading.WaitHandle.WaitOneAssertFail(int, string)", label="Entry System.Threading.WaitHandle.WaitOneAssertFail(int, string)", span="32-32"];
n275 [cluster="QuantConnect.Tests.Brokerages.BrokerageTests.PlaceOrderWaitForStatus(QuantConnect.Orders.Order, QuantConnect.Orders.OrderStatus, double, bool)", label="Exit QuantConnect.Tests.Brokerages.BrokerageTests.PlaceOrderWaitForStatus(QuantConnect.Orders.Order, QuantConnect.Orders.OrderStatus, double, bool)", span="498-498"];
n277 [cluster="lambda expression", label="Entry lambda expression", span="502-520"];
n279 [cluster="lambda expression", label="Log.Trace('''')", span="507-507"];
n281 [cluster="lambda expression", label="Log.Trace('''')", span="509-509"];
n284 [cluster="lambda expression", label="Log.Trace('''')", span="515-515"];
n288 [cluster="lambda expression", label="Exit lambda expression", span="502-520"];
n286 [cluster="lambda expression", label="Log.Trace('''')", span="517-517"];
m0_150 [cluster="QuantConnect.Holding.Holding()", file="GDAXBrokerage.cs", label="Entry QuantConnect.Holding.Holding()", span="83-83"];
m0_54 [cluster="QuantConnect.Util.Composer.Reset()", file="GDAXBrokerage.cs", label="Entry QuantConnect.Util.Composer.Reset()", span="198-198"];
m0_80 [cluster="lambda expression", file="GDAXBrokerage.cs", label="var algorithmManager = new AlgorithmManager(false)", span="84-84"];
m0_81 [cluster="lambda expression", file="GDAXBrokerage.cs", label="engine.Run(job, algorithmManager, algorithmPath)", span="85-85"];
m0_82 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Exit lambda expression", span="80-86"];
m0_102 [cluster="lambda expression", file="GDAXBrokerage.cs", label="s.TotalAlphasClosed", span="115-115"];
m0_105 [cluster="lambda expression", file="GDAXBrokerage.cs", label="s.TotalAlphasGenerated", span="116-116"];
m0_110 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Entry lambda expression", span="118-118"];
m0_83 [cluster="QuantConnect.Interfaces.IJobQueueHandler.NextJob(out string)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Interfaces.IJobQueueHandler.NextJob(out string)", span="36-36"];
m0_84 [cluster="QuantConnect.Lean.Engine.AlgorithmManager.AlgorithmManager(bool)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Lean.Engine.AlgorithmManager.AlgorithmManager(bool)", span="108-108"];
m0_85 [cluster="QuantConnect.Lean.Engine.Engine.Run(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.AlgorithmManager, string)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Lean.Engine.Engine.Run(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.AlgorithmManager, string)", span="83-83"];
m0_86 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Entry lambda expression", span="110-110"];
m0_103 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Exit lambda expression", span="115-115"];
m0_87 [cluster="lambda expression", file="GDAXBrokerage.cs", label="s.MeanPopulationScore.Direction", span="110-110"];
m0_88 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Exit lambda expression", span="110-110"];
m0_89 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Entry lambda expression", span="111-111"];
m0_90 [cluster="lambda expression", file="GDAXBrokerage.cs", label="s.MeanPopulationScore.Magnitude", span="111-111"];
m0_91 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Exit lambda expression", span="111-111"];
m0_92 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Entry lambda expression", span="112-112"];
m0_93 [cluster="lambda expression", file="GDAXBrokerage.cs", label="s.RollingAveragedPopulationScore.Direction", span="112-112"];
m0_94 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Exit lambda expression", span="112-112"];
m0_95 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Entry lambda expression", span="113-113"];
m0_96 [cluster="lambda expression", file="GDAXBrokerage.cs", label="s.RollingAveragedPopulationScore.Magnitude", span="113-113"];
m0_97 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Exit lambda expression", span="113-113"];
m0_98 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Entry lambda expression", span="114-114"];
m0_100 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Exit lambda expression", span="114-114"];
m0_101 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Entry lambda expression", span="115-115"];
m0_99 [cluster="lambda expression", file="GDAXBrokerage.cs", label="s.LongShortRatio", span="114-114"];
m0_104 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Entry lambda expression", span="116-116"];
m0_106 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Exit lambda expression", span="116-116"];
m0_107 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Entry lambda expression", span="117-117"];
m0_109 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Exit lambda expression", span="117-117"];
m0_108 [cluster="lambda expression", file="GDAXBrokerage.cs", label="s.TotalEstimatedAlphaValue", span="117-117"];
m0_111 [cluster="lambda expression", file="GDAXBrokerage.cs", label="s.TotalAlphasAnalysisCompleted", span="118-118"];
m0_40 [cluster="QuantConnect.Tests.AlgorithmRunner.RunLocalBacktest(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.AlphaRuntimeStatistics, QuantConnect.Language)", file="GDAXBrokerage.cs", label="AssertAlphaStatistics(expectedAlphaStatistics, alphaStatistics, s => s.RollingAveragedPopulationScore.Direction)", span="112-112"];
m0_35 [cluster="QuantConnect.Tests.AlgorithmRunner.RunLocalBacktest(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.AlphaRuntimeStatistics, QuantConnect.Language)", file="GDAXBrokerage.cs", label="Assert.AreEqual(true, statistics.ContainsKey(stat.Key), ''Missing key: '' + stat.Key)", span="104-104"];
m0_116 [cluster="QuantConnect.Tests.AlgorithmRunner.AssertAlphaStatistics(QuantConnect.AlphaRuntimeStatistics, QuantConnect.AlphaRuntimeStatistics, System.Linq.Expressions.Expression<System.Func<QuantConnect.AlphaRuntimeStatistics, object>>)", file="GDAXBrokerage.cs", label="var expectedValue = func(expected)", span="136-136"];
m0_74 [cluster="lambda expression", file="GDAXBrokerage.cs", label=a, span="146-146"];
m0_113 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder()", file="GDAXBrokerage.cs", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder()", span="41-41"];
m0_115 [cluster="Unk.Error", file="GDAXBrokerage.cs", label="Entry Unk.Error", span=""];
m0_117 [cluster="Unk.ConvertProductId", file="GDAXBrokerage.cs", label="Entry Unk.ConvertProductId", span=""];
m0_119 [cluster="QuantConnect.Orders.OrderStatus.IsOpen()", file="GDAXBrokerage.cs", label="Entry QuantConnect.Orders.OrderStatus.IsOpen()", span="39-39"];
m0_120 [cluster="Unk.Where", file="GDAXBrokerage.cs", label="Entry Unk.Where", span=""];
m0_114 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder()", file="GDAXBrokerage.cs", label="Entry QuantConnect.Orders.StopMarketOrder.StopMarketOrder()", span="41-41"];
m0_118 [cluster="Unk.ConvertOrderStatus", file="GDAXBrokerage.cs", label="Entry Unk.ConvertOrderStatus", span=""];
m0_121 [cluster="Unk.Any", file="GDAXBrokerage.cs", label="Entry Unk.Any", span=""];
m0_125 [cluster="lambda expression", file="GDAXBrokerage.cs", label="Exit lambda expression", span="214-214"];
m0_49 [cluster="QuantConnect.Tests.AlgorithmRunner.RunLocalBacktest(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.AlphaRuntimeStatistics, QuantConnect.Language)", file="GDAXBrokerage.cs", label="File.Delete(passedFile)", span="125-125"];
m0_0 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", span="49-49"];
m0_31 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", color=green, community=0, file="GDAXBrokerage.cs", label="OnOrderEvent(new OrderEvent(order, DateTime.UtcNow, 0, ''GDAX Order Event'') { Status = OrderStatus.Invalid })", prediction=0, span="111-111"];
m0_16 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="Log.Error(''GDAXBrokerage.PlaceOrder: Error parsing response from place order'')", span="77-77"];
m0_30 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="return true;", span="107-107"];
m0_32 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", color=green, community=0, file="GDAXBrokerage.cs", label="Log.Trace(''GDAXBrokerage.PlaceOrder(): Order failed Order Id: '' + order.Id + '' timestamp:'' + order.Time + '' quantity: '' + order.Quantity.ToString()\r\n                + '' content:'' + response.Content)", prediction=1, span="112-113"];
m0_34 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="Exit QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", span="49-49"];
m0_33 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="return false;", span="114-114"];
m0_15 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="raw == null || raw.id == null", span="75-75"];
m0_17 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="return false;", span="79-79"];
m0_29 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="Log.Trace(''GDAXBrokerage.PlaceOrder: Order completed successfully orderid:'' + order.Id.ToString())", span="106-106"];
m0_38 [cluster="System.Enum.ToString()", file="GDAXBrokerage.cs", label="Entry System.Enum.ToString()", span="0-0"];
m0_39 [cluster="string.ToLower()", file="GDAXBrokerage.cs", label="Entry string.ToLower()", span="0-0"];
m0_41 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertSymbol(QuantConnect.Symbol)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.ConvertSymbol(QuantConnect.Symbol)", span="133-133"];
m0_42 [cluster="Unk.AddJsonBody", file="GDAXBrokerage.cs", label="Entry Unk.AddJsonBody", span=""];
m0_43 [cluster="Unk.GetAuthenticationToken", file="GDAXBrokerage.cs", label="Entry Unk.GetAuthenticationToken", span=""];
m0_44 [cluster="Unk.Execute", file="GDAXBrokerage.cs", label="Entry Unk.Execute", span=""];
m0_45 [cluster="Unk.>", file="GDAXBrokerage.cs", label="Entry Unk.>", span=""];
m0_46 [cluster="QuantConnect.Logging.Log.Error(string, bool)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="65-65"];
m0_36 [cluster="System.Dynamic.ExpandoObject.ExpandoObject()", file="GDAXBrokerage.cs", label="Entry System.Dynamic.ExpandoObject.ExpandoObject()", span="0-0"];
m0_37 [cluster="System.Math.Abs(decimal)", file="GDAXBrokerage.cs", label="Entry System.Math.Abs(decimal)", span="0-0"];
m0_14 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="dynamic raw = JsonConvert.DeserializeObject<dynamic>(response.Content)", span="73-73"];
m0_4 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="payload.side = order.Direction.ToString().ToLower()", span="56-56"];
m0_18 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="string brokerId = raw.id", span="82-82"];
m0_19 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="CachedOrderIDs.ContainsKey(order.Id)", span="83-83"];
m0_47 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)", file="GDAXBrokerage.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m0_1 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="var req = new RestRequest(''/orders'', Method.POST)", span="51-51"];
m0_7 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="payload.product_id = ConvertSymbol(order.Symbol)", span="59-59"];
m0_23 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="OnOrderEvent(new OrderEvent(order, DateTime.UtcNow, 0, ''GDAX Order Event'') { Status = OrderStatus.Submitted })", span="93-93"];
m0_13 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="response.StatusCode == System.Net.HttpStatusCode.OK && response.Content != null", span="71-71"];
m0_8 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="_algorithm.BrokerageModel.AccountType == AccountType.Margin", span="61-61"];
m0_9 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="payload.overdraft_enabled = true", span="63-63"];
m0_10 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="req.AddJsonBody(payload)", span="66-66"];
m0_11 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="GetAuthenticationToken(req)", span="68-68"];
m0_12 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="var response = RestClient.Execute(req)", span="69-69"];
m0_3 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="payload.size = Math.Abs(order.Quantity)", span="55-55"];
m0_5 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="payload.type = ConvertOrderType(order.Type)", span="57-57"];
m0_6 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="payload.price = order is LimitOrder ? ((LimitOrder)order).LimitPrice : order is StopMarketOrder ? ((StopMarketOrder)order).StopPrice : 0", span="58-58"];
m0_50 [cluster="QuantConnect.Orders.OrderEvent.OrderEvent(QuantConnect.Orders.Order, System.DateTime, decimal, string)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Orders.OrderEvent.OrderEvent(QuantConnect.Orders.Order, System.DateTime, decimal, string)", span="128-128"];
m0_20 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="CachedOrderIDs[order.Id].BrokerId.Add(brokerId)", span="85-85"];
m0_25 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="OnOrderEvent(new OrderEvent(order, DateTime.UtcNow, (decimal)raw.fill_fees, ''GDAX Order Event'') { Status = OrderStatus.Filled })", span="97-97"];
m0_27 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="CachedOrderIDs.TryRemove(order.Id, out outOrder)", span="99-99"];
m0_48 [cluster="System.Collections.Generic.List<T>.Add(T)", file="GDAXBrokerage.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m0_2 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="dynamic payload = new ExpandoObject()", span="53-53"];
m0_22 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="CachedOrderIDs.TryAdd(order.Id, order)", span="90-90"];
m0_24 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="order.Type == OrderType.Market", span="95-95"];
m0_21 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="order.BrokerId.Add(brokerId)", span="89-89"];
m0_26 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="Orders.Order outOrder = null", span="98-98"];
m0_51 [cluster="QuantConnect.Brokerages.Brokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Brokerages.Brokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)", span="113-113"];
m0_55 [cluster="System.Enum.ToLower()", file="GDAXBrokerage.cs", label="Entry System.Enum.ToLower()", span="909-909"];
m0_64 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.CancelOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="order.BrokerId", span="137-137"];
m0_79 [cluster="lambda expression", file="GDAXBrokerage.cs", label="var job = systemHandlers.JobQueue.NextJob(out algorithmPath)", span="83-83"];
m0_146 [cluster="Unk.Substring", file="GDAXBrokerage.cs", label="Entry Unk.Substring", span=""];
m0_128 [cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", file="GDAXBrokerage.cs", label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0"];
m0_129 [cluster="System.Func<T, TResult>.Invoke(T)", file="GDAXBrokerage.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m0_130 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label=systemHandlers, span=""];
m0_142 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label="list.Add(new Holding\r\n                    {\r\n                        Symbol = ConvertProductId(item.ProductId),\r\n                        Quantity = item.Side == ''sell'' ? -item.FilledSize : item.FilledSize,\r\n                        Type = SecurityType.Forex,\r\n                        CurrencySymbol = item.ProductId.Substring(0, 3).ToUpper(),\r\n                        ConversionRate = conversionRate,\r\n                        MarketPrice = item.Price,\r\n                        //todo: check this\r\n                        AveragePrice = item.FilledSize > 0 ? item.ExecutedValue / item.FilledSize : 0\r\n                    })", span="256-266"];
m0_143 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label="return list;", span="270-270"];
m0_131 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label=engine, span=""];
m0_132 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label="var response = RestClient.Execute(req)", span="236-236"];
m0_133 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label="response != null", span="237-237"];
m0_134 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label="JsonConvert.DeserializeObject<Messages.Order[]>(response.Content)", span="239-239"];
m0_135 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label="decimal conversionRate", span="242-242"];
m0_136 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label="!item.ProductId.EndsWith(''USD'', StringComparison.InvariantCultureIgnoreCase)", span="243-243"];
m0_137 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label="var baseSymbol = (item.ProductId.Substring(0, 3) + ''USD'').ToLower()", span="246-246"];
m0_140 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label="var tick = this.GetTick(ConvertProductId(item.ProductId))", span="252-252"];
m0_138 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label="var tick = this.GetTick(Symbol.Create(baseSymbol, SecurityType.Forex, Market.GDAX))", span="247-247"];
m0_139 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label="conversionRate = tick.Price", span="248-248"];
m0_141 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label="conversionRate = tick.Price", span="253-253"];
m0_144 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerage.cs", label="Exit QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", span="230-230"];
m0_122 [cluster="Unk.First", file="GDAXBrokerage.cs", label="Entry Unk.First", span=""];
m0_56 [cluster="decimal.ToString()", file="GDAXBrokerage.cs", label="Entry decimal.ToString()", span="0-0"];
m0_62 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.CancelOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.CancelOrder(QuantConnect.Orders.Order)", span="133-133"];
m0_71 [cluster="System.Collections.Generic.List<T>.List()", file="GDAXBrokerage.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_152 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerage.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", span="277-277"];
m0_153 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerage.cs", label="var list = new List<Securities.Cash>()", span="279-279"];
m0_154 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerage.cs", label="var req = new RestRequest(''/accounts'', Method.GET)", span="281-281"];
m0_160 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerage.cs", label="list.Add(new Securities.Cash(item.Currency, item.Balance, 1))", span="291-291"];
m0_162 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerage.cs", label="list.Add(new Securities.Cash(item.Currency.ToUpper(), item.Balance, tick.Price))", span="297-297"];
m0_163 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerage.cs", label="return list;", span="301-301"];
m0_155 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerage.cs", label="GetAuthenticationToken(req)", span="282-282"];
m0_156 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerage.cs", label="var response = RestClient.Execute(req)", span="283-283"];
m0_157 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerage.cs", label="JsonConvert.DeserializeObject<Messages.Account[]>(response.Content)", span="285-285"];
m0_158 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerage.cs", label="item.Balance > 0", span="287-287"];
m0_159 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerage.cs", label="item.Currency == ''USD''", span="289-289"];
m0_161 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerage.cs", label="var tick = GetTick(Symbol.Create(item.Currency + ''USD'', SecurityType.Forex, Market.GDAX))", span="295-295"];
m0_164 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerage.cs", label="Exit QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", span="277-277"];
m0_69 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.CancelOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="return success.All(a => a);", span="146-146"];
m0_124 [cluster="lambda expression", file="GDAXBrokerage.cs", label="c.Value.BrokerId.Contains(item.BrokerId.First())", span="214-214"];
m0_126 [cluster="string.IndexOf(char)", file="GDAXBrokerage.cs", label="Entry string.IndexOf(char)", span="0-0"];
m0_61 [cluster="QuantConnect.Logging.ConsoleLogHandler.ConsoleLogHandler()", file="GDAXBrokerage.cs", label="Entry QuantConnect.Logging.ConsoleLogHandler.ConsoleLogHandler()", span="33-33"];
m0_72 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="GDAXBrokerage.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m0_65 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.CancelOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="var req = new RestRequest(''/orders/'' + id, Method.DELETE)", span="139-139"];
m0_77 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.Disconnect()", file="GDAXBrokerage.cs", label="WebSocket.Close()", span="154-154"];
m0_73 [cluster="Unk.AreEqual", file="GDAXBrokerage.cs", label="Entry Unk.AreEqual", span=""];
m0_75 [cluster="string.Replace(string, string)", file="GDAXBrokerage.cs", label="Entry string.Replace(string, string)", span="0-0"];
m0_123 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="GDAXBrokerage.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m0_112 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder()", file="GDAXBrokerage.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder()", span="28-28"];
m0_78 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.Disconnect()", file="GDAXBrokerage.cs", label="Exit QuantConnect.Brokerages.GDAX.GDAXBrokerage.Disconnect()", span="152-152"];
m0_166 [cluster="Unk.Create", file="GDAXBrokerage.cs", label="Entry Unk.Create", span=""];
m0_63 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.CancelOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="List<bool> success = new List<bool>()", span="135-135"];
m0_68 [cluster="QuantConnect.Lean.Engine.Engine.Engine(QuantConnect.Lean.Engine.LeanEngineSystemHandlers, QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers, bool)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Lean.Engine.Engine.Engine(QuantConnect.Lean.Engine.LeanEngineSystemHandlers, QuantConnect.Lean.Engine.LeanEngineAlgorithmHandlers, bool)", span="70-70"];
m0_66 [cluster="QuantConnect.Logging.ILogHandler.Trace(string)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Logging.ILogHandler.Trace(string)", span="42-42"];
m0_67 [cluster="QuantConnect.Logging.ILogHandler.Trace(string, params object[])", file="GDAXBrokerage.cs", label="Entry QuantConnect.Logging.ILogHandler.Trace(string, params object[])", span="62-62"];
m0_70 [cluster="System.Threading.Tasks.Task.Wait()", file="GDAXBrokerage.cs", label="Entry System.Threading.Tasks.Task.Wait()", span="0-0"];
m0_58 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.UpdateOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.UpdateOrder(QuantConnect.Orders.Order)", span="123-123"];
m0_60 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.UpdateOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="Exit QuantConnect.Brokerages.GDAX.GDAXBrokerage.UpdateOrder(QuantConnect.Orders.Order)", span="123-123"];
m0_76 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.Disconnect()", file="GDAXBrokerage.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.Disconnect()", span="152-152"];
m0_145 [cluster="Unk.EndsWith", file="GDAXBrokerage.cs", label="Entry Unk.EndsWith", span=""];
m0_165 [cluster="Securities.Cash.cstr", file="GDAXBrokerage.cs", label="Entry Securities.Cash.cstr", span=""];
m0_57 [cluster="System.IO.Directory.CreateDirectory(string)", file="GDAXBrokerage.cs", label="Entry System.IO.Directory.CreateDirectory(string)", span="0-0"];
m0_174 [cluster="System.Collections.Generic.List<T>.Clear()", file="GDAXBrokerage.cs", label="Entry System.Collections.Generic.List<T>.Clear()", span="0-0"];
m0_151 [cluster="Unk.ToUpper", file="GDAXBrokerage.cs", label="Entry Unk.ToUpper", span=""];
m0_53 [cluster="QuantConnect.Brokerages.GDAX.GDAXFill.GDAXFill(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXFill.GDAXFill(QuantConnect.Orders.Order)", span="49-49"];
m0_59 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.UpdateOrder(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="throw new NotSupportedException(''Order update not supported. Please cancel and re-create.'');", span="125-125"];
m0_149 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetTick(QuantConnect.Symbol)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetTick(QuantConnect.Symbol)", span="202-202"];
m0_52 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="GDAXBrokerage.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_127 [cluster="string.Substring(int)", file="GDAXBrokerage.cs", label="Entry string.Substring(int)", span="0-0"];
m0_175 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetFee(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetFee(QuantConnect.Orders.Order)", span="324-324"];
m0_176 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetFee(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="var totalFee = 0m", span="326-326"];
m0_177 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetFee(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="order.BrokerId", span="328-328"];
m0_182 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetFee(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="totalFee += (decimal)fill.fill_fees", span="335-335"];
m0_183 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetFee(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="return totalFee;", span="338-338"];
m0_178 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetFee(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="var req = new RestRequest(''/orders/'' + item, Method.GET)", span="330-330"];
m0_179 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetFee(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="GetAuthenticationToken(req)", span="331-331"];
m0_180 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetFee(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="var response = RestClient.Execute(req)", span="332-332"];
m0_181 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetFee(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="var fill = JsonConvert.DeserializeObject<dynamic>(response.Content)", span="333-333"];
m0_184 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetFee(QuantConnect.Orders.Order)", file="GDAXBrokerage.cs", label="Exit QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetFee(QuantConnect.Orders.Order)", span="324-324"];
m0_167 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetNextTicks()", file="GDAXBrokerage.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetNextTicks()", span="308-308"];
m0_168 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetNextTicks()", file="GDAXBrokerage.cs", label=Ticks, span="310-310"];
m0_169 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetNextTicks()", file="GDAXBrokerage.cs", label="var copy = Ticks.ToArray()", span="312-312"];
m0_170 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetNextTicks()", file="GDAXBrokerage.cs", label="Ticks.Clear()", span="313-313"];
m0_171 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetNextTicks()", file="GDAXBrokerage.cs", label="return copy;", span="314-314"];
m0_172 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetNextTicks()", file="GDAXBrokerage.cs", label="Exit QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetNextTicks()", span="308-308"];
m0_147 [cluster="Unk.ToLower", file="GDAXBrokerage.cs", label="Entry Unk.ToLower", span=""];
m0_148 [cluster="QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", file="GDAXBrokerage.cs", label="Entry QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", span="45-45"];
m0_173 [cluster="System.Collections.Generic.List<T>.ToArray()", file="GDAXBrokerage.cs", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
m0_185 [file="GDAXBrokerage.cs", label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", span=""];
m0_186 [file="GDAXBrokerage.cs", label=item, span=""];
m1_0 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs.CommissionReportEventArgs(CommissionReport)", file="GDAXBrokerage.Messaging.cs", label="Entry QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs.CommissionReportEventArgs(CommissionReport)", span="33-33"];
m1_1 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs.CommissionReportEventArgs(CommissionReport)", file="GDAXBrokerage.Messaging.cs", label="CommissionReport = commissionReport", span="35-35"];
m1_2 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs.CommissionReportEventArgs(CommissionReport)", file="GDAXBrokerage.Messaging.cs", label="Exit QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs.CommissionReportEventArgs(CommissionReport)", span="33-33"];
m1_3 [file="GDAXBrokerage.Messaging.cs", label="QuantConnect.Brokerages.InteractiveBrokers.Client.CommissionReportEventArgs", span=""];
m2_8 [cluster="RestSharp.RestClient.cstr", file="GDAXBrokerageIntegrationTests.cs", label="Entry RestSharp.RestClient.cstr", span=""];
m2_10 [cluster="GDAXBrokerage.cstr", file="GDAXBrokerageIntegrationTests.cs", label="Entry GDAXBrokerage.cstr", span=""];
m2_3 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", span="57-57"];
m2_5 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", file="GDAXBrokerageIntegrationTests.cs", label="var webSocketClient = new WebSocketWrapper()", span="60-60"];
m2_7 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", file="GDAXBrokerageIntegrationTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.CreateBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", span="57-57"];
m2_12 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.GetAskPrice(QuantConnect.Symbol)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.GetAskPrice(QuantConnect.Symbol)", span="66-66"];
m2_13 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.GetAskPrice(QuantConnect.Symbol)", file="GDAXBrokerageIntegrationTests.cs", label="var tick = ((GDAXBrokerage)this.Brokerage).GetTick(symbol)", span="68-68"];
m2_14 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.GetAskPrice(QuantConnect.Symbol)", file="GDAXBrokerageIntegrationTests.cs", label="return tick.AskPrice;", span="69-69"];
m2_15 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.GetAskPrice(QuantConnect.Symbol)", file="GDAXBrokerageIntegrationTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.GetAskPrice(QuantConnect.Symbol)", span="66-66"];
m2_0 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.GetDefaultQuantity()", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.GetDefaultQuantity()", span="51-51"];
m2_2 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.GetDefaultQuantity()", file="GDAXBrokerageIntegrationTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests.GetDefaultQuantity()", span="51-51"];
m2_11 [cluster="QuantConnect.Configuration.Config.Get(string, string)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="90-90"];
m2_9 [cluster="QuantConnect.Brokerages.WebSocketWrapper.WebSocketWrapper()", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Brokerages.WebSocketWrapper.WebSocketWrapper()", span="29-29"];
m2_16 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetTick(QuantConnect.Symbol)", file="GDAXBrokerageIntegrationTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetTick(QuantConnect.Symbol)", span="202-202"];
m2_17 [file="GDAXBrokerageIntegrationTests.cs", label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageIntegrationTests", span=""];
m3_92 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", span="124-124"];
m3_93 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="string json = _matchData", span="126-126"];
m3_95 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="expectedQuantity == 99", span="129-129"];
m3_104 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(raised.WaitOne(1000), expectedQuantity != 99)", span="156-156"];
m3_94 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="string id = ''132fb6ae-456b-4654-b4e0-d681ac05cea1''", span="127-127"];
m3_96 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="json = json.Replace(id, Guid.NewGuid().ToString())", span="131-131"];
m3_103 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="_unit.OnMessage(_unit, GDAXTestsHelpers.GetArgs(json))", span="153-153"];
m3_98 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="GDAXTestsHelpers.AddOrder(_unit, 1, id, orderQuantity)", span="135-135"];
m3_97 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="decimal orderQuantity = 6.1m", span="134-134"];
m3_102 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="_unit.OrderStatusChanged += (s, e) =>\r\n            {\r\n                Assert.AreEqual(''BTCUSD'', e.Symbol.Value);\r\n                actualFee += e.OrderFee;\r\n                actualQuantity += e.AbsoluteFillQuantity;\r\n\r\n                Assert.AreEqual(actualQuantity != orderQuantity ? Orders.OrderStatus.PartiallyFilled : Orders.OrderStatus.Filled, e.Status);\r\n                Assert.AreEqual(5.23512m, actualQuantity);\r\n                Assert.AreEqual(0.01m, Math.Round(actualFee, 8));\r\n                raised.Set();\r\n            }", span="141-151"];
m3_99 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="ManualResetEvent raised = new ManualResetEvent(false)", span="136-136"];
m3_100 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="decimal actualFee = 0", span="138-138"];
m3_101 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="decimal actualQuantity = 0", span="139-139"];
m3_105 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageFillTest(decimal)", span="124-124"];
m3_219 [cluster="Unk.Single", file="GDAXBrokerageTests.cs", label="Entry Unk.Single", span=""];
m3_135 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", span="179-179"];
m3_136 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="var response = new\r\n            {\r\n                id = _brokerId,\r\n                fill_fees = ''0.11''\r\n            }", span="181-185"];
m3_137 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="SetupResponse(JsonConvert.SerializeObject(response), httpStatus)", span="186-186"];
m3_139 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="orderType == OrderType.Market && httpStatus == HttpStatusCode.OK", span="190-190"];
m3_142 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="_unit.OrderStatusChanged += (s, e) =>\r\n            {\r\n                if (orderType == OrderType.Market && e.Status == OrderStatus.Filled)\r\n                {\r\n                    hasFilled = true;\r\n                    Assert.AreEqual(0.11, e.OrderFee);\r\n                }\r\n                else\r\n                {\r\n                    Assert.AreEqual(status, e.Status);\r\n                    if (orderId != null)\r\n                    {\r\n                        Assert.AreEqual(''BTCUSD'', e.Symbol.Value);\r\n                        Assert.That((quantity > 0 && e.Direction == Orders.OrderDirection.Buy) || (quantity < 0 && e.Direction == Orders.OrderDirection.Sell));\r\n                        Assert.IsTrue(orderId == null || _unit.CachedOrderIDs.SelectMany(c => c.Value.BrokerId.Where(b => b == _brokerId)).Any());\r\n                    }\r\n                    raised.Set();\r\n                }\r\n            }", span="196-214"];
m3_144 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="orderType == OrderType.Limit", span="217-217"];
m3_145 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="order = new Orders.LimitOrder(_symbol, quantity, price, DateTime.UtcNow)", span="219-219"];
m3_146 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="orderType == OrderType.Market", span="221-221"];
m3_147 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="order = new Orders.MarketOrder(_symbol, quantity, DateTime.UtcNow)", span="223-223"];
m3_148 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="order = new Orders.StopMarketOrder(_symbol, quantity, price, DateTime.UtcNow)", span="227-227"];
m3_150 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="Assert.IsTrue(actual || (orderId == null && !actual))", span="232-232"];
m3_138 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="bool? hasFilled = null", span="188-188"];
m3_140 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="hasFilled = false", span="192-192"];
m3_141 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="ManualResetEvent raised = new ManualResetEvent(false)", span="195-195"];
m3_152 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="Assert.IsTrue(raised.WaitOne(1000))", span="234-234"];
m3_143 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="Order order = null", span="216-216"];
m3_151 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="Assert.IsTrue(hasFilled ?? true)", span="233-233"];
m3_149 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="bool actual = _unit.PlaceOrder(order)", span="230-230"];
m3_153 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.PlaceOrderTest(string, System.Net.HttpStatusCode, QuantConnect.Orders.OrderStatus, decimal, decimal, QuantConnect.Orders.OrderType)", span="179-179"];
m3_177 [cluster="Unk.Where", file="GDAXBrokerageTests.cs", label="Entry Unk.Where", span=""];
m3_15 [cluster="System.IO.File.ReadAllText(string)", file="GDAXBrokerageTests.cs", label="Entry System.IO.File.ReadAllText(string)", span="0-0"];
m3_226 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", span="287-287"];
m3_227 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="SetupResponse(_holdingData)", span="289-289"];
m3_228 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="_unit.CachedOrderIDs.TryAdd(1, new Orders.MarketOrder { BrokerId = new List<string> { ''1'' }, Price = 123 })", span="291-291"];
m3_229 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="var actual = _unit.GetAccountHoldings()", span="293-293"];
m3_230 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(2, actual.Count())", span="295-295"];
m3_231 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(0.005m, actual.First().Quantity)", span="296-296"];
m3_232 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(10m, actual.First().AveragePrice)", span="297-297"];
m3_233 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(-0.5m, actual.Last().Quantity)", span="299-299"];
m3_234 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(1000m, actual.Last().AveragePrice)", span="300-300"];
m3_235 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAccountHoldingsTest()", span="287-287"];
m3_67 [cluster="Unk.Verifiable", file="GDAXBrokerageTests.cs", label="Entry Unk.Verifiable", span=""];
m3_155 [cluster="Unk.SetupResponse", file="GDAXBrokerageTests.cs", label="Entry Unk.SetupResponse", span=""];
m3_237 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", span="306-306"];
m3_238 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", file="GDAXBrokerageTests.cs", label="_rest.Setup(m => m.Execute(It.Is<IRestRequest>(r => !r.Resource.EndsWith(''1'')))).Returns(new RestSharp.RestResponse\r\n            {\r\n                StatusCode = code\r\n            })", span="308-311"];
m3_239 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", file="GDAXBrokerageTests.cs", label="_rest.Setup(m => m.Execute(It.Is<IRestRequest>(r => !r.Resource.EndsWith(''2'')))).Returns(new RestSharp.RestResponse\r\n            {\r\n                StatusCode = code2\r\n            })", span="313-316"];
m3_241 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(expected, actual)", span="320-320"];
m3_240 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", file="GDAXBrokerageTests.cs", label="var actual = _unit.CancelOrder(new Orders.LimitOrder { BrokerId = new List<string> { ''1'', ''2'' } })", span="318-318"];
m3_242 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.CancelOrderTest(System.Net.HttpStatusCode, System.Net.HttpStatusCode, bool)", span="306-306"];
m3_73 [cluster="Unk.Connect", file="GDAXBrokerageTests.cs", label="Entry Unk.Connect", span=""];
m3_156 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string)", span="53-53"];
m3_69 [cluster="Unk.Verify", file="GDAXBrokerageTests.cs", label="Entry Unk.Verify", span=""];
m3_133 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAuthenticationToken(string, string, string)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAuthenticationToken(string, string, string)", span="81-81"];
m3_194 [cluster="System.Collections.Generic.List<T>.List()", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m3_243 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder()", span="41-41"];
m3_18 [cluster="RestSharp.RestResponse.cstr", file="GDAXBrokerageTests.cs", label="Entry RestSharp.RestResponse.cstr", span=""];
m3_112 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.OnMessage(object, MessageReceivedEventArgs)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.OnMessage(object, MessageReceivedEventArgs)", span="75-75"];
m3_277 [cluster="System.Collections.Generic.List<T>.Clear()", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Generic.List<T>.Clear()", span="0-0"];
m3_61 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", span="102-102"];
m3_62 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", file="GDAXBrokerageTests.cs", label="_wss.Setup(m => m.Connect()).Verifiable()", span="104-104"];
m3_63 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", file="GDAXBrokerageTests.cs", label="_wss.Setup(m => m.IsOpen).Returns(true)", span="105-105"];
m3_64 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", file="GDAXBrokerageTests.cs", label="_unit.Connect()", span="107-107"];
m3_65 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", file="GDAXBrokerageTests.cs", label="_wss.Verify()", span="108-108"];
m3_66 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.ConnectTest()", span="102-102"];
m3_154 [cluster="Unk.SerializeObject", file="GDAXBrokerageTests.cs", label="Entry Unk.SerializeObject", span=""];
m3_199 [cluster="System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", span="0-0"];
m3_206 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetTick(QuantConnect.Symbol)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetTick(QuantConnect.Symbol)", span="202-202"];
m3_284 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="335-335"];
m3_20 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="67-67"];
m3_29 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="73-73"];
m3_35 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="80-80"];
m3_21 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="m.Execute(It.Is<IRestRequest>(r => r.Resource.StartsWith(''/products/'')))", span="67-67"];
m3_22 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="67-67"];
m3_25 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="67-67"];
m3_26 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="r.Resource.StartsWith(''/products/'')", span="67-67"];
m3_27 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="67-67"];
m3_30 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="m.Execute(It.Is<IRestRequest>(r => r.Resource.StartsWith(''/orders/'' + _brokerId) || r.Resource.StartsWith(''/orders/'' + _matchBrokerId)))", span="73-73"];
m3_31 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="73-73"];
m3_32 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="73-73"];
m3_33 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="r.Resource.StartsWith(''/orders/'' + _brokerId) || r.Resource.StartsWith(''/orders/'' + _matchBrokerId)", span="73-73"];
m3_34 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="73-73"];
m3_36 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="a.BrokerageModel.AccountType", span="80-80"];
m3_37 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="80-80"];
m3_41 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="85-85"];
m3_43 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="85-85"];
m3_44 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="85-85"];
m3_46 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="85-85"];
m3_55 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="95-95"];
m3_58 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="97-97"];
m3_56 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="w.IsOpen", span="95-95"];
m3_57 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="95-95"];
m3_59 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="w.IsOpen", span="97-97"];
m3_60 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="97-97"];
m3_70 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="104-104"];
m3_74 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="105-105"];
m3_71 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="m.Connect()", span="104-104"];
m3_72 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="104-104"];
m3_75 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="m.IsOpen", span="105-105"];
m3_76 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="105-105"];
m3_85 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="114-114"];
m3_89 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="115-115"];
m3_86 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="m.Close()", span="114-114"];
m3_87 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="114-114"];
m3_90 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="m.IsOpen", span="115-115"];
m3_91 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="115-115"];
m3_119 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(actualQuantity != orderQuantity ? Orders.OrderStatus.PartiallyFilled : Orders.OrderStatus.Filled, e.Status)", span="147-147"];
m3_122 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="raised.Set()", span="150-150"];
m3_116 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(''BTCUSD'', e.Symbol.Value)", span="143-143"];
m3_117 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="actualFee += e.OrderFee", span="144-144"];
m3_118 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="actualQuantity += e.AbsoluteFillQuantity", span="145-145"];
m3_115 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="141-151"];
m3_121 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(0.01m, Math.Round(actualFee, 8))", span="149-149"];
m3_120 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(5.23512m, actualQuantity)", span="148-148"];
m3_123 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="141-151"];
m3_161 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="orderType == OrderType.Market && e.Status == OrderStatus.Filled", span="198-198"];
m3_164 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(status, e.Status)", span="205-205"];
m3_165 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="orderId != null", span="206-206"];
m3_167 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.That((quantity > 0 && e.Direction == Orders.OrderDirection.Buy) || (quantity < 0 && e.Direction == Orders.OrderDirection.Sell))", span="209-209"];
m3_168 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.IsTrue(orderId == null || _unit.CachedOrderIDs.SelectMany(c => c.Value.BrokerId.Where(b => b == _brokerId)).Any())", span="210-210"];
m3_169 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="raised.Set()", span="212-212"];
m3_163 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(0.11, e.OrderFee)", span="201-201"];
m3_166 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(''BTCUSD'', e.Symbol.Value)", span="208-208"];
m3_160 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="196-214"];
m3_162 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="hasFilled = true", span="200-200"];
m3_170 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="196-214"];
m3_174 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="210-210"];
m3_175 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="c.Value.BrokerId.Where(b => b == _brokerId)", span="210-210"];
m3_176 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="210-210"];
m3_178 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="210-210"];
m3_179 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="b == _brokerId", span="210-210"];
m3_180 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="210-210"];
m3_220 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="277-277"];
m3_223 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="278-278"];
m3_221 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="a.Symbol == ''USD''", span="277-277"];
m3_222 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="277-277"];
m3_224 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="a.Symbol == ''BTC''", span="278-278"];
m3_225 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="278-278"];
m3_245 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="308-308"];
m3_252 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="313-313"];
m3_246 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="m.Execute(It.Is<IRestRequest>(r => !r.Resource.EndsWith(''1'')))", span="308-308"];
m3_247 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="308-308"];
m3_248 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="308-308"];
m3_249 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="!r.Resource.EndsWith(''1'')", span="308-308"];
m3_250 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="308-308"];
m3_253 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="m.Execute(It.Is<IRestRequest>(r => !r.Resource.EndsWith(''2'')))", span="313-313"];
m3_254 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="313-313"];
m3_255 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="313-313"];
m3_256 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="!r.Resource.EndsWith(''2'')", span="313-313"];
m3_257 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="313-313"];
m3_261 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="327-327"];
m3_262 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="_unit.UpdateOrder(new LimitOrder())", span="327-327"];
m3_263 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="327-327"];
m3_280 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Entry lambda expression", span="335-335"];
m3_281 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="w.Send(It.IsAny<string>())", span="335-335"];
m3_282 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="335-335"];
m3_285 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="actual = c", span="335-335"];
m3_286 [cluster="lambda expression", file="GDAXBrokerageTests.cs", label="Exit lambda expression", span="335-335"];
m3_54 [cluster="Unk.IsFalse", file="GDAXBrokerageTests.cs", label="Entry Unk.IsFalse", span=""];
m3_17 [cluster="Unk.Setup", file="GDAXBrokerageTests.cs", label="Entry Unk.Setup", span=""];
m3_264 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.UpdateOrder(QuantConnect.Orders.Order)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.UpdateOrder(QuantConnect.Orders.Order)", span="123-123"];
m3_196 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetOpenOrders()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetOpenOrders()", span="161-161"];
m3_0 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", span="54-54"];
m3_1 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_unit = new GDAXBrokerage(''wss://localhost'', _wss.Object, _rest.Object, ''abc'', ''MTIz'', ''pass'', _algo.Object)", span="56-56"];
m3_2 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_orderData = File.ReadAllText(''TestData//gdax_order.txt'')", span="57-57"];
m3_3 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_matchData = File.ReadAllText(''TestData//gdax_match.txt'')", span="58-58"];
m3_4 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_openOrderData = File.ReadAllText(''TestData//gdax_openOrders.txt'')", span="59-59"];
m3_5 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_accountsData = File.ReadAllText(''TestData//gdax_accounts.txt'')", span="60-60"];
m3_6 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_holdingData = File.ReadAllText(''TestData//gdax_holding.txt'')", span="61-61"];
m3_7 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_orderByIdData = File.ReadAllText(''TestData//gdax_orderById.txt'')", span="62-62"];
m3_8 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_tickerData = File.ReadAllText(''TestData//gdax_ticker.txt'')", span="63-63"];
m3_9 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_symbol = Symbol.Create(''BTCUSD'', SecurityType.Forex, Market.GDAX)", span="65-65"];
m3_10 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_rest.Setup(m => m.Execute(It.Is<IRestRequest>(r => r.Resource.StartsWith(''/products/'')))).Returns(new RestSharp.RestResponse\r\n            {\r\n                Content = File.ReadAllText(''TestData//gdax_tick.txt''),\r\n                StatusCode = HttpStatusCode.OK\r\n            })", span="67-71"];
m3_11 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_rest.Setup(m => m.Execute(It.Is<IRestRequest>(r => r.Resource.StartsWith(''/orders/'' + _brokerId) || r.Resource.StartsWith(''/orders/'' + _matchBrokerId))))\r\n            .Returns(new RestSharp.RestResponse\r\n            {\r\n                Content = File.ReadAllText(''TestData//gdax_orderById.txt''),\r\n                StatusCode = HttpStatusCode.OK\r\n            })", span="73-78"];
m3_12 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="_algo.Setup(a => a.BrokerageModel.AccountType).Returns(_accountType)", span="80-80"];
m3_13 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.Setup()", span="54-54"];
m3_38 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SetupResponse(string, System.Net.HttpStatusCode)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SetupResponse(string, System.Net.HttpStatusCode)", span="83-83"];
m3_40 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SetupResponse(string, System.Net.HttpStatusCode)", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SetupResponse(string, System.Net.HttpStatusCode)", span="83-83"];
m3_109 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXTestsHelpers.AddOrder(QuantConnect.Brokerages.GDAX.GDAXBrokerage, int, string, decimal)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXTestsHelpers.AddOrder(QuantConnect.Brokerages.GDAX.GDAXBrokerage, int, string, decimal)", span="25-25"];
m3_159 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.PlaceOrder(QuantConnect.Orders.Order)", span="49-49"];
m3_107 [cluster="System.Guid.ToString()", file="GDAXBrokerageTests.cs", label="Entry System.Guid.ToString()", span="0-0"];
m3_68 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", span="100-100"];
m3_53 [cluster="Unk.IsTrue", file="GDAXBrokerageTests.cs", label="Entry Unk.IsTrue", span=""];
m3_158 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.StopMarketOrder.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string)", span="53-53"];
m3_195 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue)", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue)", span="0-0"];
m3_16 [cluster="QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", span="45-45"];
m3_23 [cluster="Unk.>", file="GDAXBrokerageTests.cs", label="Entry Unk.>", span=""];
m3_244 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.CancelOrder(QuantConnect.Orders.Order)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.CancelOrder(QuantConnect.Orders.Order)", span="133-133"];
m3_193 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder()", span="28-28"];
m3_200 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", span="258-258"];
m3_201 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", file="GDAXBrokerageTests.cs", label="var actual = _unit.GetTick(_symbol)", span="260-260"];
m3_202 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(333.98m, actual.BidPrice)", span="261-261"];
m3_203 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(333.99m, actual.AskPrice)", span="262-262"];
m3_204 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(5957.11914015, actual.Quantity)", span="264-264"];
m3_205 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetTickTest()", span="258-258"];
m3_19 [cluster="Unk.Returns", file="GDAXBrokerageTests.cs", label="Entry Unk.Returns", span=""];
m3_258 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.UpdateOrderTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.UpdateOrderTest()", span="325-325"];
m3_259 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.UpdateOrderTest()", file="GDAXBrokerageTests.cs", label="Assert.Throws<NotSupportedException>(() => _unit.UpdateOrder(new LimitOrder()))", span="327-327"];
m3_260 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.UpdateOrderTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.UpdateOrderTest()", span="325-325"];
m3_47 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", span="93-93"];
m3_48 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", file="GDAXBrokerageTests.cs", label="_wss.Setup(w => w.IsOpen).Returns(true)", span="95-95"];
m3_49 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", file="GDAXBrokerageTests.cs", label="Assert.IsTrue(_unit.IsConnected)", span="96-96"];
m3_50 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", file="GDAXBrokerageTests.cs", label="_wss.Setup(w => w.IsOpen).Returns(false)", span="97-97"];
m3_51 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", file="GDAXBrokerageTests.cs", label="Assert.IsFalse(_unit.IsConnected)", span="98-98"];
m3_52 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.IsConnectedTest()", span="93-93"];
m3_111 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXTestsHelpers.GetArgs(string)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXTestsHelpers.GetArgs(string)", span="32-32"];
m3_265 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", span="331-331"];
m3_266 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", file="GDAXBrokerageTests.cs", label="string actual = null", span="333-333"];
m3_267 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", file="GDAXBrokerageTests.cs", label="string expected = ''[\''BTC-USD\'',\''BTC-ETH\'']''", span="334-334"];
m3_268 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", file="GDAXBrokerageTests.cs", label="_wss.Setup(w => w.Send(It.IsAny<string>())).Callback<string>(c => actual = c)", span="335-335"];
m3_271 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", file="GDAXBrokerageTests.cs", label="StringAssert.Contains(expected, actual)", span="342-342"];
m3_269 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", file="GDAXBrokerageTests.cs", label="_unit.Ticks.Clear()", span="337-337"];
m3_270 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", file="GDAXBrokerageTests.cs", label="_unit.Subscribe(Mock.Of<LiveNodePacket>(), new[] { Symbol.Create(''BTCUSD'', SecurityType.Forex, Market.GDAX), Symbol.Create(''GBPUSD'', SecurityType.Forex, Market.GDAX),\r\n                Symbol.Create(''BTCETH'', SecurityType.Forex, Market.GDAX)})", span="339-340"];
m3_272 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(2, _unit.Ticks.Count())", span="344-344"];
m3_273 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(333.98, _unit.Ticks.First().BidPrice)", span="345-345"];
m3_274 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(333.99, _unit.Ticks.First().AskPrice)", span="346-346"];
m3_275 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(333.985, _unit.Ticks.First().Price)", span="347-347"];
m3_276 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.SubscribeTest()", span="331-331"];
m3_114 [cluster="Unk.AreEqual", file="GDAXBrokerageTests.cs", label="Entry Unk.AreEqual", span=""];
m3_197 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m3_236 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetAccountHoldings()", span="230-230"];
m3_108 [cluster="string.Replace(string, string)", file="GDAXBrokerageTests.cs", label="Entry string.Replace(string, string)", span="0-0"];
m3_207 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", span="269-269"];
m3_208 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="SetupResponse(_accountsData)", span="271-271"];
m3_209 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="var actual = _unit.GetCashBalance()", span="273-273"];
m3_210 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(2, actual.Count())", span="275-275"];
m3_211 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="var usd = actual.Single(a => a.Symbol == ''USD'')", span="277-277"];
m3_212 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="var btc = actual.Single(a => a.Symbol == ''BTC'')", span="278-278"];
m3_213 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(80.2301373066930000m, usd.Amount)", span="280-280"];
m3_214 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(1, usd.ConversionRate)", span="281-281"];
m3_215 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(1.1, btc.Amount)", span="282-282"];
m3_216 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(333.985m, btc.ConversionRate)", span="283-283"];
m3_217 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetCashBalanceTest()", span="269-269"];
m3_88 [cluster="Unk.Close", file="GDAXBrokerageTests.cs", label="Entry Unk.Close", span=""];
m3_84 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.Disconnect()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.Disconnect()", span="152-152"];
m3_283 [cluster="Unk.Send", file="GDAXBrokerageTests.cs", label="Entry Unk.Send", span=""];
m3_173 [cluster="Unk.Any", file="GDAXBrokerageTests.cs", label="Entry Unk.Any", span=""];
m3_124 [cluster="System.Math.Round(decimal, int)", file="GDAXBrokerageTests.cs", label="Entry System.Math.Round(decimal, int)", span="0-0"];
m3_181 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", span="238-238"];
m3_182 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="SetupResponse(_openOrderData)", span="240-240"];
m3_183 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="_unit.CachedOrderIDs.TryAdd(1, new Orders.MarketOrder { BrokerId = new List<string> { ''1'' }, Price = 123 })", span="242-242"];
m3_184 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="var actual = _unit.GetOpenOrders()", span="244-244"];
m3_185 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(2, actual.Count())", span="246-246"];
m3_186 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(0.01, actual.First().Quantity)", span="247-247"];
m3_187 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(OrderDirection.Buy, actual.First().Direction)", span="248-248"];
m3_188 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(0.1, actual.First().Price)", span="249-249"];
m3_189 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(-1, actual.Last().Quantity)", span="251-251"];
m3_190 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(OrderDirection.Sell, actual.Last().Direction)", span="252-252"];
m3_191 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(1, actual.Last().Price)", span="253-253"];
m3_192 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetOpenOrdersTest()", span="238-238"];
m3_106 [cluster="System.Guid.NewGuid()", file="GDAXBrokerageTests.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m3_24 [cluster="Unk.Execute", file="GDAXBrokerageTests.cs", label="Entry Unk.Execute", span=""];
m3_171 [cluster="Unk.That", file="GDAXBrokerageTests.cs", label="Entry Unk.That", span=""];
m3_218 [cluster="QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Brokerages.GDAX.GDAXBrokerage.GetCashBalance()", span="277-277"];
m3_14 [cluster="GDAXBrokerage.cstr", file="GDAXBrokerageTests.cs", label="Entry GDAXBrokerage.cstr", span=""];
m3_251 [cluster="Unk.EndsWith", file="GDAXBrokerageTests.cs", label="Entry Unk.EndsWith", span=""];
m3_172 [cluster="Unk.SelectMany", file="GDAXBrokerageTests.cs", label="Entry Unk.SelectMany", span=""];
m3_279 [cluster="Unk.Contains", file="GDAXBrokerageTests.cs", label="Entry Unk.Contains", span=""];
m3_134 [cluster="string.IsNullOrEmpty(string)", file="GDAXBrokerageTests.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m3_77 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", span="112-112"];
m3_78 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", file="GDAXBrokerageTests.cs", label="_wss.Setup(m => m.Close()).Verifiable()", span="114-114"];
m3_79 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", file="GDAXBrokerageTests.cs", label="_wss.Setup(m => m.IsOpen).Returns(true)", span="115-115"];
m3_80 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", file="GDAXBrokerageTests.cs", label="_unit.Connect()", span="116-116"];
m3_81 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", file="GDAXBrokerageTests.cs", label="_unit.Disconnect()", span="117-117"];
m3_82 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", file="GDAXBrokerageTests.cs", label="_wss.Verify()", span="118-118"];
m3_83 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.DisconnectTest()", span="112-112"];
m3_126 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", span="160-160"];
m3_127 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="var actual = _unit.GetAuthenticationToken('''', ''POST'', ''http://localhost'')", span="162-162"];
m3_128 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="Assert.IsFalse(string.IsNullOrEmpty(actual.Signature))", span="164-164"];
m3_129 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="Assert.IsFalse(string.IsNullOrEmpty(actual.Timestamp))", span="165-165"];
m3_130 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(''pass'', actual.Passphrase)", span="166-166"];
m3_131 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(''abc'', actual.Key)", span="167-167"];
m3_132 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.GetAuthenticationTokenTest()", span="160-160"];
m3_287 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", span="351-351"];
m3_288 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", file="GDAXBrokerageTests.cs", label="string json = _tickerData", span="353-353"];
m3_289 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", file="GDAXBrokerageTests.cs", label="_unit.OnMessage(_unit, GDAXTestsHelpers.GetArgs(json))", span="355-355"];
m3_290 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", file="GDAXBrokerageTests.cs", label="var actual = _unit.Ticks.First()", span="357-357"];
m3_291 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(''BTCUSD'', actual.Symbol.Value)", span="359-359"];
m3_292 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(4388.005m, actual.Price)", span="360-360"];
m3_293 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(4388m, actual.BidPrice)", span="361-361"];
m3_294 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(4388.01m, actual.AskPrice)", span="362-362"];
m3_295 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", file="GDAXBrokerageTests.cs", label="actual = _unit.Ticks.Last()", span="364-364"];
m3_296 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(''BTCUSD'', actual.Symbol.Value)", span="366-366"];
m3_297 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(4388.01m, actual.Price)", span="367-367"];
m3_298 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", file="GDAXBrokerageTests.cs", label="Assert.AreEqual(0.03m, actual.Quantity)", span="368-368"];
m3_299 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", file="GDAXBrokerageTests.cs", label="Exit QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests.OnMessageTickerTest()", span="351-351"];
m3_28 [cluster="Unk.StartsWith", file="GDAXBrokerageTests.cs", label="Entry Unk.StartsWith", span=""];
m3_198 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="GDAXBrokerageTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m3_113 [cluster="System.Threading.WaitHandle.WaitOne(int)", file="GDAXBrokerageTests.cs", label="Entry System.Threading.WaitHandle.WaitOne(int)", span="0-0"];
m3_125 [cluster="System.Threading.EventWaitHandle.Set()", file="GDAXBrokerageTests.cs", label="Entry System.Threading.EventWaitHandle.Set()", span="0-0"];
m3_278 [cluster="Unk.Subscribe", file="GDAXBrokerageTests.cs", label="Entry Unk.Subscribe", span=""];
m3_157 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string)", file="GDAXBrokerageTests.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string)", span="47-47"];
m3_300 [file="GDAXBrokerageTests.cs", label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", span=""];
m3_301 [file="GDAXBrokerageTests.cs", label=actualFee, span=""];
m3_302 [file="GDAXBrokerageTests.cs", label=actualQuantity, span=""];
m3_303 [file="GDAXBrokerageTests.cs", label=orderQuantity, span=""];
m3_304 [file="GDAXBrokerageTests.cs", label=raised, span=""];
m3_305 [file="GDAXBrokerageTests.cs", label="QuantConnect.Orders.OrderType", span=""];
m3_306 [file="GDAXBrokerageTests.cs", label="QuantConnect.Orders.OrderStatus", span=""];
m3_307 [file="GDAXBrokerageTests.cs", label=string, span=""];
m3_308 [file="GDAXBrokerageTests.cs", label=decimal, span=""];
m3_309 [file="GDAXBrokerageTests.cs", label=raised, span=""];
n289 -> n10  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n11  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n25  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n26  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n38  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n43  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n67  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n71  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n72  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n98  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n99  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n109  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n118  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n125  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n132  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n133  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n141  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n147  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n148  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n155  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n158  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n165  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n168  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n188  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n198  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n201  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n194  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n211  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n249  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n268  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n289 -> n269  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.BrokerageTests", style=dashed];
n290 -> n224  [color=darkseagreen4, key=1, label=sync, style=dashed];
n292 -> n228  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n293 -> n259  [color=darkseagreen4, key=1, label=filledResetEvent, style=dashed];
n294 -> n261  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n295 -> n282  [color=darkseagreen4, key=1, label=requiredStatusEvent, style=dashed];
n296 -> n283  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderStatus", style=dashed];
n297 -> n287  [color=darkseagreen4, key=1, label=desiredStatusEvent, style=dashed];
n33 -> n35  [color=darkseagreen4, key=1, label=brokerage, style=dashed];
n33 -> n37  [color=darkseagreen4, key=1, label=brokerage, style=dashed];
n33 -> n38  [color=darkseagreen4, key=1, label=brokerage, style=dashed];
n33 -> n42  [color=darkseagreen4, key=1, label=brokerage, style=dashed];
n33 -> n47  [color=darkseagreen4, key=1, label=brokerage, style=dashed];
n33 -> n50  [color=darkseagreen4, key=1, label=brokerage, style=dashed];
n49 -> n62  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n49 -> n64  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n49 -> n65  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n49 -> n67  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n49 -> n69  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n49 -> n71  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n49 -> n72  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n60 -> n62  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n60 -> n64  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n60 -> n65  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n60 -> n67  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n60 -> n69  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n60 -> n71  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n60 -> n72  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n94 -> n96  [color=darkseagreen4, key=1, label=holding, style=dashed];
n97 -> n99  [color=darkseagreen4, key=1, label=order, style=dashed];
n102 -> n283  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderStatus", style=dashed];
n102 -> n268  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n102 -> n269  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n102 -> n270  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n102 -> n274  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n107 -> n109  [color=darkseagreen4, key=1, label=openOrder, style=dashed];
n121 -> n125  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.OrderTestParameters", style=dashed];
n128 -> n132  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.OrderTestParameters", style=dashed];
n128 -> n133  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.OrderTestParameters", style=dashed];
n137 -> n141  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.OrderTestParameters", style=dashed];
n143 -> n147  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.OrderTestParameters", style=dashed];
n143 -> n148  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.OrderTestParameters", style=dashed];
n151 -> n155  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.OrderTestParameters", style=dashed];
n151 -> n157  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.OrderTestParameters", style=dashed];
n151 -> n158  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.OrderTestParameters", style=dashed];
n156 -> n158  [color=darkseagreen4, key=1, label=order, style=dashed];
n160 -> n261  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n160 -> n237  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n160 -> n240  [color=darkseagreen4, key=1, label=double, style=dashed];
n160 -> n242  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n160 -> n247  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n160 -> n248  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n160 -> n249  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n161 -> n165  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.OrderTestParameters", style=dashed];
n161 -> n167  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.OrderTestParameters", style=dashed];
n161 -> n168  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.OrderTestParameters", style=dashed];
n166 -> n168  [color=darkseagreen4, key=1, label=order, style=dashed];
n175 -> n180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n190 -> n197  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n191 -> n200  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n192 -> n194  [color=darkseagreen4, key=1, label=beforeQuantity, style=dashed];
n204 -> n228  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n204 -> n212  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n204 -> n213  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n204 -> n214  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n208 -> n226  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n208 -> n227  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n207 -> n224  [color=darkseagreen4, key=1, label=sync, style=dashed];
n225 -> n215  [color=darkseagreen4, key=1, label=remaining, style=dashed];
n225 -> n216  [color=darkseagreen4, key=1, label=remaining, style=dashed];
n225 -> n229  [color=darkseagreen4, key=1, label=remaining, style=dashed];
n223 -> n226  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n223 -> n227  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n234 -> n258  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n234 -> n260  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n234 -> n262  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n233 -> n259  [color=darkseagreen4, key=1, label=filledResetEvent, style=dashed];
n233 -> n240  [color=darkseagreen4, key=1, label=filledResetEvent, style=dashed];
n233 -> n241  [color=darkseagreen4, key=1, label=filledResetEvent, style=dashed];
n257 -> n260  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n257 -> n262  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n264 -> n282  [color=darkseagreen4, key=1, label=requiredStatusEvent, style=dashed];
n266 -> n278  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n266 -> n280  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n266 -> n283  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n266 -> n285  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n265 -> n287  [color=darkseagreen4, key=1, label=desiredStatusEvent, style=dashed];
n277 -> n280  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n277 -> n283  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n277 -> n285  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m0_81 -> m0_102  [color=darkseagreen4, key=1, label=list, style=dashed];
m0_81 -> m0_105  [color=darkseagreen4, key=1, label=list, style=dashed];
m0_81 -> m0_110  [color=darkseagreen4, key=1, label=list, style=dashed];
m0_82 -> m0_84  [color=darkseagreen4, key=1, label=req, style=dashed];
m0_105 -> m0_107  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_105 -> m0_124  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_105 -> m0_109  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_84 -> m0_86  [color=darkseagreen4, key=1, label=response, style=dashed];
m0_87 -> m0_89  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_87 -> m0_90  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_87 -> m0_91  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_87 -> m0_92  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_87 -> m0_93  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_87 -> m0_94  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_87 -> m0_95  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_87 -> m0_96  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_87 -> m0_97  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_87 -> m0_98  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_87 -> m0_100  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_87 -> m0_101  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_88 -> m0_96  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_88 -> m0_97  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_88 -> m0_98  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_88 -> m0_99  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_88 -> m0_100  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_88 -> m0_101  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_88 -> m0_102  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_90 -> m0_97  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_90 -> m0_98  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_90 -> m0_99  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_90 -> m0_100  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_90 -> m0_101  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_90 -> m0_102  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_92 -> m0_97  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_92 -> m0_98  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_92 -> m0_99  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_92 -> m0_100  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_92 -> m0_101  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_92 -> m0_102  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_94 -> m0_97  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_94 -> m0_98  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_94 -> m0_99  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_94 -> m0_100  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_94 -> m0_101  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_94 -> m0_102  [color=darkseagreen4, key=1, label=order, style=dashed];
m0_107 -> m0_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_107 -> m0_109  [color=darkseagreen4, key=1, label=cached, style=dashed];
m0_40 -> m0_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_35 -> m0_35  [color=darkseagreen4, key=1, label=stat, style=dashed];
m0_116 -> m0_118  [color=darkseagreen4, key=1, label=expectedValue, style=dashed];
m0_116 -> m0_119  [color=darkseagreen4, key=1, label=expectedValue, style=dashed];
m0_116 -> m0_120  [color=darkseagreen4, key=1, label=expectedValue, style=dashed];
m0_74 -> m0_115  [color=darkseagreen4, key=1, label="System.Linq.Expressions.Expression<System.Func<QuantConnect.AlphaRuntimeStatistics, object>>", style=dashed];
m0_74 -> m0_117  [color=darkseagreen4, key=1, label="QuantConnect.AlphaRuntimeStatistics", style=dashed];
m0_115 -> m0_117  [color=darkseagreen4, key=1, label=func, style=dashed];
m0_117 -> m0_119  [color=darkseagreen4, key=1, label=actualValue, style=dashed];
m0_117 -> m0_120  [color=darkseagreen4, key=1, label=actualValue, style=dashed];
m0_114 -> m0_119  [color=darkseagreen4, key=1, label=field, style=dashed];
m0_114 -> m0_120  [color=darkseagreen4, key=1, label=field, style=dashed];
m0_114 -> m0_114  [color=darkseagreen4, key=1, label=field, style=dashed];
m0_0 -> m0_34  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, string>", style=dashed];
m0_0 -> m0_15  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_0 -> m0_38  [color=darkseagreen4, key=1, label="QuantConnect.AlphaRuntimeStatistics", style=dashed];
m0_0 -> m0_39  [color=darkseagreen4, key=1, label="QuantConnect.AlphaRuntimeStatistics", style=dashed];
m0_0 -> m0_40  [color=darkseagreen4, key=1, label="QuantConnect.AlphaRuntimeStatistics", style=dashed];
m0_0 -> m0_41  [color=darkseagreen4, key=1, label="QuantConnect.AlphaRuntimeStatistics", style=dashed];
m0_0 -> m0_42  [color=darkseagreen4, key=1, label="QuantConnect.AlphaRuntimeStatistics", style=dashed];
m0_0 -> m0_43  [color=darkseagreen4, key=1, label="QuantConnect.AlphaRuntimeStatistics", style=dashed];
m0_0 -> m0_44  [color=darkseagreen4, key=1, label="QuantConnect.AlphaRuntimeStatistics", style=dashed];
m0_0 -> m0_45  [color=darkseagreen4, key=1, label="QuantConnect.AlphaRuntimeStatistics", style=dashed];
m0_0 -> m0_46  [color=darkseagreen4, key=1, label="QuantConnect.AlphaRuntimeStatistics", style=dashed];
m0_0 -> m0_37  [color=darkseagreen4, key=1, label="QuantConnect.AlphaRuntimeStatistics", style=dashed];
m0_0 -> m0_19  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m0_0 -> m0_20  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m0_0 -> m0_21  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m0_0 -> m0_22  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m0_0 -> m0_24  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m0_0 -> m0_27  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m0_0 -> m0_29  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m0_0 -> m0_32  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m0_30 -> m0_38  [color=darkseagreen4, key=1, label=alphaStatistics, style=dashed];
m0_30 -> m0_39  [color=darkseagreen4, key=1, label=alphaStatistics, style=dashed];
m0_30 -> m0_40  [color=darkseagreen4, key=1, label=alphaStatistics, style=dashed];
m0_30 -> m0_41  [color=darkseagreen4, key=1, label=alphaStatistics, style=dashed];
m0_30 -> m0_42  [color=darkseagreen4, key=1, label=alphaStatistics, style=dashed];
m0_30 -> m0_43  [color=darkseagreen4, key=1, label=alphaStatistics, style=dashed];
m0_30 -> m0_44  [color=darkseagreen4, key=1, label=alphaStatistics, style=dashed];
m0_30 -> m0_45  [color=darkseagreen4, key=1, label=alphaStatistics, style=dashed];
m0_30 -> m0_46  [color=darkseagreen4, key=1, label=alphaStatistics, style=dashed];
m0_38 -> m0_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_39 -> m0_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_41 -> m0_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_42 -> m0_98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_43 -> m0_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_44 -> m0_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_45 -> m0_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_46 -> m0_110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_36 -> m0_36  [color=darkseagreen4, key=1, label=stat, style=dashed];
m0_4 -> m0_17  [color=darkseagreen4, key=1, label=logFile, style=dashed];
m0_4 -> m0_47  [color=darkseagreen4, key=1, label=logFile, style=dashed];
m0_4 -> m0_50  [color=darkseagreen4, key=1, label=logFile, style=dashed];
m0_18 -> m0_20  [color=darkseagreen4, key=1, label=brokerId, style=dashed];
m0_18 -> m0_21  [color=darkseagreen4, key=1, label=brokerId, style=dashed];
m0_19 -> m0_29  [color=darkseagreen4, key=1, label=algorithmHandlers, style=dashed];
m0_19 -> m0_27  [color=darkseagreen4, key=1, label=algorithmHandlers, style=dashed];
m0_47 -> m0_49  [color=darkseagreen4, key=1, label=passedFile, style=dashed];
m0_47 -> m0_50  [color=darkseagreen4, key=1, label=passedFile, style=dashed];
m0_1 -> m0_10  [color=darkseagreen4, key=1, label=req, style=dashed];
m0_1 -> m0_11  [color=darkseagreen4, key=1, label=req, style=dashed];
m0_12 -> m0_32  [color=darkseagreen4, key=1, label=response, style=dashed];
m0_25 -> m0_81  [color=darkseagreen4, key=1, label=engine, style=dashed];
m0_2 -> m0_10  [color=darkseagreen4, key=1, label=payload, style=dashed];
m0_26 -> m0_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_79 -> m0_81  [color=darkseagreen4, key=1, label=algorithmPath, style=dashed];
m0_129 -> m0_143  [color=darkseagreen4, key=1, label=list, style=dashed];
m0_131 -> m0_81  [color=darkseagreen4, key=1, label=engine, style=dashed];
m0_132 -> m0_134  [color=darkseagreen4, key=1, label=response, style=dashed];
m0_134 -> m0_136  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_62 -> m0_64  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m0_153 -> m0_160  [color=darkseagreen4, key=1, label=list, style=dashed];
m0_153 -> m0_162  [color=darkseagreen4, key=1, label=list, style=dashed];
m0_153 -> m0_163  [color=darkseagreen4, key=1, label=list, style=dashed];
m0_157 -> m0_159  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_157 -> m0_160  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_157 -> m0_162  [color=darkseagreen4, key=1, label=item, style=dashed];
m0_69 -> m0_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_124 -> m0_124  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<int, QuantConnect.Orders.Order>", style=dashed];
m0_65 -> m0_67  [color=darkseagreen4, key=1, label=req, style=dashed];
m0_63 -> m0_68  [color=darkseagreen4, key=1, label=success, style=dashed];
m0_63 -> m0_69  [color=darkseagreen4, key=1, label=success, style=dashed];
m0_175 -> m0_177  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
m0_176 -> m0_183  [color=darkseagreen4, key=1, label=totalFee, style=dashed];
m0_182 -> m0_183  [color=darkseagreen4, key=1, label=totalFee, style=dashed];
m0_169 -> m0_171  [color=darkseagreen4, key=1, label=copy, style=dashed];
m0_185 -> m0_8  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_11  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_19  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_20  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_22  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_27  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_66  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_67  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_77  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_83  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_84  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_98  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_100  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_107  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_109  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_131  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_155  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_168  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_170  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_185 -> m0_179  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.GDAX.GDAXBrokerage", style=dashed];
m0_186 -> m0_124  [color=darkseagreen4, key=1, label=item, style=dashed];
m3_92 -> m3_95  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m3_92 -> m3_104  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m3_93 -> m3_103  [color=darkseagreen4, key=1, label=json, style=dashed];
m3_94 -> m3_98  [color=darkseagreen4, key=1, label=id, style=dashed];
m3_96 -> m3_103  [color=darkseagreen4, key=1, label=json, style=dashed];
m3_97 -> m3_119  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m3_102 -> m3_116  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m3_102 -> m3_119  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m3_99 -> m3_122  [color=darkseagreen4, key=1, label=raised, style=dashed];
m3_99 -> m3_104  [color=darkseagreen4, key=1, label=raised, style=dashed];
m3_135 -> m3_137  [color=darkseagreen4, key=1, label="System.Net.HttpStatusCode", style=dashed];
m3_135 -> m3_139  [color=darkseagreen4, key=1, label="System.Net.HttpStatusCode", style=dashed];
m3_135 -> m3_161  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderType", style=dashed];
m3_135 -> m3_164  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderStatus", style=dashed];
m3_135 -> m3_165  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_135 -> m3_167  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m3_135 -> m3_168  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_135 -> m3_144  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderType", style=dashed];
m3_135 -> m3_146  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderType", style=dashed];
m3_135 -> m3_150  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_142 -> m3_161  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m3_142 -> m3_163  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m3_142 -> m3_164  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m3_142 -> m3_166  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m3_142 -> m3_167  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m3_142 -> m3_151  [color=darkseagreen4, key=1, label=hasFilled, style=dashed];
m3_141 -> m3_169  [color=darkseagreen4, key=1, label=raised, style=dashed];
m3_141 -> m3_152  [color=darkseagreen4, key=1, label=raised, style=dashed];
m3_229 -> m3_231  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_229 -> m3_232  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_229 -> m3_233  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_229 -> m3_234  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_237 -> m3_241  [color=darkseagreen4, key=1, label=bool, style=dashed];
m3_238 -> m3_245  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_239 -> m3_252  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_62 -> m3_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_63 -> m3_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_21 -> m3_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_30 -> m3_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_117 -> m3_121  [color=darkseagreen4, key=1, label=actualFee, style=dashed];
m3_118 -> m3_120  [color=darkseagreen4, key=1, label=actualQuantity, style=dashed];
m3_115 -> m3_119  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m3_168 -> m3_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_160 -> m3_163  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m3_160 -> m3_164  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m3_160 -> m3_166  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m3_160 -> m3_167  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m3_162 -> m3_151  [color=darkseagreen4, key=1, label=hasFilled, style=dashed];
m3_162 -> m3_170  [color=darkseagreen4, key=1, label=hasFilled, style=dashed];
m3_175 -> m3_175  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<int, QuantConnect.Orders.Order>", style=dashed];
m3_175 -> m3_178  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_246 -> m3_248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_253 -> m3_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_10 -> m3_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_11 -> m3_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_12 -> m3_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_201 -> m3_203  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_201 -> m3_204  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_259 -> m3_261  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_48 -> m3_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_50 -> m3_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_267 -> m3_271  [color=darkseagreen4, key=1, label=expected, style=dashed];
m3_268 -> m3_280  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_268 -> m3_284  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_268 -> m3_271  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_211 -> m3_220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_211 -> m3_213  [color=darkseagreen4, key=1, label=usd, style=dashed];
m3_211 -> m3_214  [color=darkseagreen4, key=1, label=usd, style=dashed];
m3_212 -> m3_223  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_212 -> m3_215  [color=darkseagreen4, key=1, label=btc, style=dashed];
m3_212 -> m3_216  [color=darkseagreen4, key=1, label=btc, style=dashed];
m3_184 -> m3_186  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_184 -> m3_187  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_184 -> m3_188  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_184 -> m3_189  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_184 -> m3_190  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_184 -> m3_191  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_78 -> m3_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_79 -> m3_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_127 -> m3_129  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_127 -> m3_130  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_127 -> m3_131  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_290 -> m3_292  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_290 -> m3_293  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_290 -> m3_294  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_295 -> m3_297  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_295 -> m3_298  [color=darkseagreen4, key=1, label=actual, style=dashed];
m3_300 -> m3_12  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_48  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_49  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_50  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_51  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_62  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_63  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_64  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_65  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_78  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_79  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_80  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_81  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_82  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_98  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_103  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_137  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_168  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_182  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_208  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_227  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_259  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_262  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_269  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_270  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_272  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_273  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_274  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_275  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_300 -> m3_289  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.GDAX.GDAXBrokerageTests", style=dashed];
m3_303 -> m3_119  [color=darkseagreen4, key=1, label=orderQuantity, style=dashed];
m3_304 -> m3_122  [color=darkseagreen4, key=1, label=raised, style=dashed];
m3_305 -> m3_161  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderType", style=dashed];
m3_306 -> m3_164  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderStatus", style=dashed];
m3_307 -> m3_165  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_307 -> m3_168  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_308 -> m3_167  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m3_309 -> m3_169  [color=darkseagreen4, key=1, label=raised, style=dashed];
}
