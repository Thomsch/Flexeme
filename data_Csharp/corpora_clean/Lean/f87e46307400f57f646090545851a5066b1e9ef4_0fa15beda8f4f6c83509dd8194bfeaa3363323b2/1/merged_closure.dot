digraph  {
n480 [label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", span=""];
n481 [label=filledResetEvent, span=""];
n482 [label=canceledResetEvent, span=""];
n483 [label=manualResetEvent, span=""];
n484 [label=manualResetEvent, span=""];
n485 [label=manualResetEvent, span=""];
n486 [label=manualResetEvent, span=""];
n487 [label=orderedResetEvent, span=""];
n488 [label=canceledResetEvent, span=""];
n489 [label=order, span=""];
n490 [label=orderFilledEventCount, span=""];
n491 [label=orderFilledResetEvent, span=""];
n492 [label=order, span=""];
n493 [label=orderResetEvent, span=""];
n494 [label=orderEventFired, span=""];
n495 [label=cashBalanceUpdates, span=""];
n496 [label=accountChangedFired, span=""];
n497 [label=manualResetEvent, span=""];
n498 [label=orderEventFired, span=""];
n499 [label=order, span=""];
n500 [label=executions, span=""];
n501 [label=string, span=""];
n502 [label=orderEventFired, span=""];
n503 [label="QuantConnect.Orders.Order", span=""];
n504 [label=string, span=""];
n0 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.InitializeBrokerage()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.InitializeBrokerage()", span="41-41"];
n1 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.InitializeBrokerage()", label="InteractiveBrokersGatewayRunner.Start(Config.Get(''ib-controller-dir''), \r\n                Config.Get(''ib-tws-dir''), \r\n                Config.Get(''ib-user-name''), \r\n                Config.Get(''ib-password''),\r\n                Config.Get(''ib-trading-mode''),\r\n                Config.GetBool(''ib-use-tws'')\r\n                )", span="43-49"];
n2 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.InitializeBrokerage()", label="var securityProvider = new SecurityProvider()", span="52-52"];
n7 [cluster="QuantConnect.Configuration.Config.Get(string, string)", label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="90-90"];
n8 [cluster="QuantConnect.Configuration.Config.GetBool(string, bool)", label="Entry QuantConnect.Configuration.Config.GetBool(string, bool)", span="141-141"];
n9 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersGatewayRunner.Start(string, string, string, string, string, bool)", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersGatewayRunner.Start(string, string, string, string, string, bool)", span="68-68"];
n3 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.InitializeBrokerage()", label="securityProvider[Symbols.USDJPY] = new Security(SecurityExchangeHours.AlwaysOpen(TimeZones.NewYork),\r\n                new SubscriptionDataConfig(typeof(TradeBar), Symbols.USDJPY, Resolution.Minute, TimeZones.NewYork, TimeZones.NewYork, false, false, false),\r\n                new Cash(CashBook.AccountCurrency, 0, 1m), SymbolProperties.GetDefault(CashBook.AccountCurrency))", span="53-55"];
n10 [cluster="QuantConnect.Tests.Brokerages.SecurityProvider.SecurityProvider()", label="Entry QuantConnect.Tests.Brokerages.SecurityProvider.SecurityProvider()", span="33-33"];
n4 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.InitializeBrokerage()", label="_interactiveBrokersBrokerage = new InteractiveBrokersBrokerage(new OrderProvider(_orders), securityProvider)", span="57-57"];
n11 [cluster="QuantConnect.Securities.Security.Security(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", label="Entry QuantConnect.Securities.Security.Security(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", span="315-315"];
n12 [cluster="QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", label="Entry QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", span="82-82"];
n13 [cluster="QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", label="Entry QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", span="161-161"];
n14 [cluster="QuantConnect.Securities.Cash.Cash(string, decimal, decimal)", label="Entry QuantConnect.Securities.Cash.Cash(string, decimal, decimal)", span="68-68"];
n15 [cluster="QuantConnect.Securities.SymbolProperties.GetDefault(string)", label="Entry QuantConnect.Securities.SymbolProperties.GetDefault(string)", span="84-84"];
n5 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.InitializeBrokerage()", label="_interactiveBrokersBrokerage.Connect()", span="58-58"];
n16 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.InteractiveBrokersBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.InteractiveBrokersBrokerage(QuantConnect.Securities.IOrderProvider, QuantConnect.Securities.ISecurityProvider)", span="130-130"];
n17 [cluster="QuantConnect.Tests.Brokerages.OrderProvider.OrderProvider(System.Collections.Generic.IList<QuantConnect.Orders.Order>)", label="Entry QuantConnect.Tests.Brokerages.OrderProvider.OrderProvider(System.Collections.Generic.IList<QuantConnect.Orders.Order>)", span="32-32"];
n6 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.InitializeBrokerage()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.InitializeBrokerage()", span="41-41"];
n18 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.Connect()", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.Connect()", span="449-449"];
n19 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", span="62-62"];
n20 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="Log.Trace(''-----'')", span="66-66"];
n21 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="Log.Trace(''InteractiveBrokersBrokerageTests.Teardown(): Starting teardown...'')", span="67-67"];
n42 [cluster="QuantConnect.Logging.Log.Trace(string, bool)", label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106"];
n22 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="Log.Trace(''-----'')", span="68-68"];
n23 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="var canceledResetEvent = new ManualResetEvent(false)", span="70-70"];
n24 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="var filledResetEvent = new ManualResetEvent(false)", span="71-71"];
n43 [cluster="System.Threading.ManualResetEvent.ManualResetEvent(bool)", label="Entry System.Threading.ManualResetEvent.ManualResetEvent(bool)", span="0-0"];
n25 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="_interactiveBrokersBrokerage.OrderStatusChanged += (sender, orderEvent) =>\r\n                {\r\n                    if (orderEvent.Status == OrderStatus.Filled)\r\n                    {\r\n                        filledResetEvent.Set();\r\n                    }\r\n                    if (orderEvent.Status == OrderStatus.Canceled)\r\n                    {\r\n                        canceledResetEvent.Set();\r\n                    }\r\n                }", span="72-82"];
n58 [cluster="lambda expression", label="canceledResetEvent.Set()", span="80-80"];
n30 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="canceledResetEvent.WaitOne(3000)", span="92-92"];
n31 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="canceledResetEvent.Reset()", span="93-93"];
n56 [cluster="lambda expression", label="filledResetEvent.Set()", span="76-76"];
n26 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="Log.Trace(''InteractiveBrokersBrokerageTests.Teardown(): Canceling open orders...'')", span="86-86"];
n55 [cluster="lambda expression", label="orderEvent.Status == OrderStatus.Filled", span="74-74"];
n57 [cluster="lambda expression", label="orderEvent.Status == OrderStatus.Canceled", span="78-78"];
n27 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="var orders = _interactiveBrokersBrokerage.GetOpenOrders()", span="88-88"];
n28 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label=orders, span="89-89"];
n44 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetOpenOrders()", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetOpenOrders()", span="309-309"];
n29 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="_interactiveBrokersBrokerage.CancelOrder(order)", span="91-91"];
n32 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="Log.Trace(''InteractiveBrokersBrokerageTests.Teardown(): Liquidating open positions...'')", span="96-96"];
n45 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.CancelOrder(QuantConnect.Orders.Order)", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.CancelOrder(QuantConnect.Orders.Order)", span="279-279"];
n46 [cluster="System.Threading.WaitHandle.WaitOne(int)", label="Entry System.Threading.WaitHandle.WaitOne(int)", span="0-0"];
n47 [cluster="System.Threading.EventWaitHandle.Reset()", label="Entry System.Threading.EventWaitHandle.Reset()", span="0-0"];
n33 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="var holdings = _interactiveBrokersBrokerage.GetAccountHoldings()", span="99-99"];
n34 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="holdings.Where(x => x.Quantity != 0)", span="100-100"];
n48 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetAccountHoldings()", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetAccountHoldings()", span="349-349"];
n35 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="var openOrdersText = _interactiveBrokersBrokerage.GetOpenOrders().Select(x => x.Symbol.ToString() + '' '' + x.Quantity)", span="108-108"];
n49 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n61 [cluster="lambda expression", label="Entry lambda expression", span="100-100"];
n36 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="Log.Trace(''InteractiveBrokersBrokerageTests.Teardown(): Open orders: '' + string.Join('', '', openOrdersText))", span="109-109"];
n50 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n64 [cluster="lambda expression", label="Entry lambda expression", span="108-108"];
n37 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="var holdingsText = _interactiveBrokersBrokerage.GetAccountHoldings().Where(x => x.Quantity != 0).Select(x => x.Symbol.ToString() + '' '' + x.Quantity)", span="112-112"];
n51 [cluster="Unk.Join", label="Entry Unk.Join", span=""];
n52 [cluster="Unk.Trace", label="Entry Unk.Trace", span=""];
n38 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="Log.Trace(''InteractiveBrokersBrokerageTests.Teardown(): Account holdings: '' + string.Join('', '', holdingsText))", span="113-113"];
n68 [cluster="lambda expression", label="Entry lambda expression", span="112-112"];
n71 [cluster="lambda expression", label="Entry lambda expression", span="112-112"];
n39 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="_interactiveBrokersBrokerage.Dispose()", span="116-116"];
n40 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="_interactiveBrokersBrokerage = null", span="117-117"];
n53 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.Dispose()", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.Dispose()", span="649-649"];
n41 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.Teardown()", span="62-62"];
n54 [cluster="lambda expression", label="Entry lambda expression", span="72-82"];
n60 [cluster="System.Threading.EventWaitHandle.Set()", label="Entry System.Threading.EventWaitHandle.Set()", span="0-0"];
n59 [cluster="lambda expression", label="Exit lambda expression", span="72-82"];
n62 [cluster="lambda expression", label="x.Quantity != 0", span="100-100"];
n63 [cluster="lambda expression", label="Exit lambda expression", span="100-100"];
n65 [cluster="lambda expression", label="x.Symbol.ToString() + '' '' + x.Quantity", span="108-108"];
n66 [cluster="lambda expression", label="Exit lambda expression", span="108-108"];
n67 [cluster="QuantConnect.Symbol.ToString()", label="Entry QuantConnect.Symbol.ToString()", span="350-350"];
n69 [cluster="lambda expression", label="x.Quantity != 0", span="112-112"];
n70 [cluster="lambda expression", label="Exit lambda expression", span="112-112"];
n72 [cluster="lambda expression", label="x.Symbol.ToString() + '' '' + x.Quantity", span="112-112"];
n73 [cluster="lambda expression", label="Exit lambda expression", span="112-112"];
n74 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
n75 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientConnects()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientConnects()", span="126-126"];
n76 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientConnects()", label="var ib = _interactiveBrokersBrokerage", span="128-128"];
n77 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientConnects()", label="Assert.IsTrue(ib.IsConnected)", span="129-129"];
n78 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientConnects()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientConnects()", span="126-126"];
n79 [cluster="Unk.IsTrue", label="Entry Unk.IsTrue", span=""];
n80 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedUpdatesCorrectly()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedUpdatesCorrectly()", span="133-133"];
n81 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedUpdatesCorrectly()", label="var ib = _interactiveBrokersBrokerage", span="135-135"];
n82 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedUpdatesCorrectly()", label="Assert.IsTrue(ib.IsConnected)", span="136-136"];
n83 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedUpdatesCorrectly()", label="ib.Disconnect()", span="138-138"];
n88 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.Disconnect()", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.Disconnect()", span="641-641"];
n89 [cluster="Unk.IsFalse", label="Entry Unk.IsFalse", span=""];
n87 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedUpdatesCorrectly()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedUpdatesCorrectly()", span="133-133"];
n90 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedAfterReset()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedAfterReset()", span="146-146"];
n91 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedAfterReset()", label="var ib = _interactiveBrokersBrokerage", span="148-148"];
n92 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedAfterReset()", label="Assert.IsTrue(ib.IsConnected)", span="149-149"];
n93 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedAfterReset()", label="ib.ResetGatewayConnection()", span="151-151"];
n95 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedAfterReset()", label="Assert.IsTrue(ib.IsConnected)", span="153-153"];
n96 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedAfterReset()", label="ib.CheckIbGateway()", span="155-155"];
n97 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedAfterReset()", label="Assert.IsTrue(ib.IsConnected)", span="156-156"];
n94 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedAfterReset()", label="Assert.IsTrue(InteractiveBrokersGatewayRunner.IsRunning())", span="152-152"];
n99 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.ResetGatewayConnection()", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.ResetGatewayConnection()", span="1110-1110"];
n100 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersGatewayRunner.IsRunning()", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersGatewayRunner.IsRunning()", span="183-183"];
n101 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.CheckIbGateway()", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.CheckIbGateway()", span="2599-2599"];
n98 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedAfterReset()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.IsConnectedAfterReset()", span="146-146"];
n102 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", span="160-160"];
n103 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", label="var ib = _interactiveBrokersBrokerage", span="162-162"];
n104 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", label="var order = new MarketOrder(Symbols.USDJPY, buyQuantity, DateTime.UtcNow)", span="164-164"];
n106 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", label="ib.PlaceOrder(order)", span="166-166"];
n111 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", label="ib.PlaceOrder(order)", span="173-173"];
n105 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", label="_orders.Add(order)", span="165-165"];
n114 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string)", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string)", span="47-47"];
n107 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", label="var brokerageID = order.BrokerId.Single()", span="168-168"];
n115 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n116 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.PlaceOrder(QuantConnect.Orders.Order)", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.PlaceOrder(QuantConnect.Orders.Order)", span="237-237"];
n108 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", label="Assert.AreNotEqual(0, brokerageID)", span="169-169"];
n117 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
n112 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", label="Assert.AreNotEqual(brokerageID, order.BrokerId.Single())", span="175-175"];
n109 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", label="order = new MarketOrder(Symbols.USDJPY, buyQuantity, DateTime.UtcNow)", span="171-171"];
n118 [cluster="Unk.AreNotEqual", label="Entry Unk.AreNotEqual", span=""];
n110 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", label="_orders.Add(order)", span="172-172"];
n113 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.PlacedOrderHasNewBrokerageOrderID()", span="160-160"];
n119 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", span="179-179"];
n120 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", label="bool orderFilled = false", span="181-181"];
n121 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", label="var manualResetEvent = new ManualResetEvent(false)", span="182-182"];
n122 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", label="var ib = _interactiveBrokersBrokerage", span="183-183"];
n123 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", label="ib.OrderStatusChanged += (sender, orderEvent) =>\r\n            {\r\n                if (orderEvent.Status == OrderStatus.Filled)\r\n                {\r\n                    orderFilled = true;\r\n                    manualResetEvent.Set();\r\n                }\r\n            }", span="185-192"];
n136 [cluster="lambda expression", label="manualResetEvent.Set()", span="190-190"];
n127 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", label="manualResetEvent.WaitOne(2500)", span="198-198"];
n126 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", label="ib.PlaceOrder(order)", span="196-196"];
n128 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", label="var orderFromIB = AssertOrderOpened(orderFilled, ib, order)", span="199-199"];
n124 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", label="var order = new MarketOrder(Symbols.USDJPY, buyQuantity, DateTime.UtcNow) {Id = 1}", span="194-194"];
n134 [cluster="lambda expression", label="orderEvent.Status == OrderStatus.Filled", span="187-187"];
n125 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", label="_orders.Add(order)", span="195-195"];
n129 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", label="Assert.AreEqual(OrderType.Market, orderFromIB.Type)", span="200-200"];
n131 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.AssertOrderOpened(bool, QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage, QuantConnect.Orders.Order)", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.AssertOrderOpened(bool, QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage, QuantConnect.Orders.Order)", span="641-641"];
n130 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesMarketOrder()", span="179-179"];
n132 [cluster="Unk.AreEqual", label="Entry Unk.AreEqual", span=""];
n133 [cluster="lambda expression", label="Entry lambda expression", span="185-192"];
n135 [cluster="lambda expression", label="orderFilled = true", span="189-189"];
n137 [cluster="lambda expression", label="Exit lambda expression", span="185-192"];
n138 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", span="204-204"];
n139 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", label="bool orderFilled = false", span="206-206"];
n140 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", label="var manualResetEvent = new ManualResetEvent(false)", span="207-207"];
n141 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", label="var ib = _interactiveBrokersBrokerage", span="209-209"];
n142 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", label="ib.OrderStatusChanged += (sender, orderEvent) =>\r\n            {\r\n                if (orderEvent.Status == OrderStatus.Filled)\r\n                {\r\n                    orderFilled = true;\r\n                    manualResetEvent.Set();\r\n                }\r\n            }", span="211-218"];
n153 [cluster="lambda expression", label="manualResetEvent.Set()", span="216-216"];
n146 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", label="manualResetEvent.WaitOne(2500)", span="225-225"];
n145 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", label="ib.PlaceOrder(order)", span="223-223"];
n147 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", label="var orderFromIB = AssertOrderOpened(orderFilled, ib, order)", span="227-227"];
n143 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", label="var order = new MarketOrder(Symbols.USDJPY, -buyQuantity, DateTime.UtcNow)", span="221-221"];
n151 [cluster="lambda expression", label="orderEvent.Status == OrderStatus.Filled", span="213-213"];
n144 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", label="_orders.Add(order)", span="222-222"];
n148 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", label="Assert.AreEqual(OrderType.Market, orderFromIB.Type)", span="228-228"];
n149 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientSellsMarketOrder()", span="204-204"];
n150 [cluster="lambda expression", label="Entry lambda expression", span="211-218"];
n152 [cluster="lambda expression", label="orderFilled = true", span="215-215"];
n154 [cluster="lambda expression", label="Exit lambda expression", span="211-218"];
n155 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", span="232-232"];
n156 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="bool orderFilled = false", span="234-234"];
n157 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="var manualResetEvent = new ManualResetEvent(false)", span="235-235"];
n158 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="var ib = _interactiveBrokersBrokerage", span="236-236"];
n161 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="ib.OrderStatusChanged += (sender, orderEvent) =>\r\n            {\r\n                if (orderEvent.Status == OrderStatus.Filled)\r\n                {\r\n                    orderFilled = true;\r\n                    manualResetEvent.Set();\r\n                }\r\n                price = orderEvent.FillPrice;\r\n                delta = 0.02m;\r\n            }", span="240-249"];
n182 [cluster="lambda expression", label="manualResetEvent.Set()", span="245-245"];
n166 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="manualResetEvent.WaitOne(2000)", span="257-257"];
n167 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="manualResetEvent.Reset()", span="258-258"];
n174 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="manualResetEvent.WaitOne(1000)", span="270-270"];
n159 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="decimal price = 100m", span="238-238"];
n165 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="ib.PlaceOrder(order)", span="255-255"];
n170 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="ib.PlaceOrder(order)", span="264-264"];
n173 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="ib.PlaceOrder(order)", span="268-268"];
n175 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="var orderFromIB = AssertOrderOpened(orderFilled, ib, order)", span="272-272"];
n160 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="decimal delta = 85.0m", span="239-239"];
n162 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="int id = 0", span="252-252"];
n180 [cluster="lambda expression", label="orderEvent.Status == OrderStatus.Filled", span="242-242"];
n183 [cluster="lambda expression", label="price = orderEvent.FillPrice", span="247-247"];
n163 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="Order order = new MarketOrder(Symbols.USDJPY, buyQuantity, DateTime.UtcNow) { Id = ++id }", span="253-253"];
n164 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="_orders.Add(order)", span="254-254"];
n168 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="order = new LimitOrder(Symbols.USDJPY, buyQuantity, price - delta, DateTime.UtcNow, null) { Id = ++id }", span="262-262"];
n169 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="_orders.Add(order)", span="263-263"];
n178 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string)", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string)", span="53-53"];
n171 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="order = new LimitOrder(Symbols.USDJPY, -buyQuantity, price + delta, DateTime.UtcNow, null) { Id = ++id }", span="266-266"];
n172 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="_orders.Add(order)", span="267-267"];
n176 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="Assert.AreEqual(OrderType.Limit, orderFromIB.Type)", span="273-273"];
n177 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesLimitOrder()", span="232-232"];
n179 [cluster="lambda expression", label="Entry lambda expression", span="240-249"];
n181 [cluster="lambda expression", label="orderFilled = true", span="244-244"];
n185 [cluster="lambda expression", label="Exit lambda expression", span="240-249"];
n184 [cluster="lambda expression", label="delta = 0.02m", span="248-248"];
n186 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", span="277-277"];
n187 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="bool orderFilled = false", span="279-279"];
n188 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="var manualResetEvent = new ManualResetEvent(false)", span="280-280"];
n189 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="var ib = _interactiveBrokersBrokerage", span="281-281"];
n192 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="ib.OrderStatusChanged += (sender, args) =>\r\n            {\r\n                orderFilled = true;\r\n                fillPrice = args.FillPrice;\r\n                delta = 0.02m;\r\n                manualResetEvent.Set();\r\n            }", span="285-291"];
n216 [cluster="lambda expression", label="manualResetEvent.Set()", span="290-290"];
n197 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="manualResetEvent.WaitOne(2000)", span="299-299"];
n198 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="manualResetEvent.Reset()", span="300-300"];
n207 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="manualResetEvent.WaitOne(1000)", span="315-315"];
n190 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="decimal fillPrice = 100m", span="283-283"];
n196 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="ib.PlaceOrder(order)", span="297-297"];
n203 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="ib.PlaceOrder(order)", span="309-309"];
n206 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="ib.PlaceOrder(order)", span="313-313"];
n208 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="var orderFromIB = AssertOrderOpened(orderFilled, ib, order)", span="317-317"];
n191 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="decimal delta = 85.0m", span="284-284"];
n193 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="int id = 0", span="294-294"];
n214 [cluster="lambda expression", label="fillPrice = args.FillPrice", span="288-288"];
n194 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="Order order = new MarketOrder(Symbols.USDJPY, buyQuantity, DateTime.UtcNow) { Id = ++id }", span="295-295"];
n195 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="_orders.Add(order)", span="296-296"];
n201 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="order = new StopMarketOrder(Symbols.USDJPY, buyQuantity, fillPrice - delta, DateTime.UtcNow) { Id = ++id }", span="307-307"];
n199 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="Assert.IsTrue(orderFilled)", span="301-301"];
n200 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="orderFilled = false", span="303-303"];
n202 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="_orders.Add(order)", span="308-308"];
n211 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string)", label="Entry QuantConnect.Orders.StopMarketOrder.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string)", span="53-53"];
n204 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="order = new StopMarketOrder(Symbols.USDJPY, -buyQuantity, fillPrice + delta, DateTime.UtcNow) { Id = ++id }", span="311-311"];
n205 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="_orders.Add(order)", span="312-312"];
n209 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="Assert.AreEqual(OrderType.StopMarket, orderFromIB.Type)", span="318-318"];
n210 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientPlacesStopLimitOrder()", span="277-277"];
n212 [cluster="lambda expression", label="Entry lambda expression", span="285-291"];
n213 [cluster="lambda expression", label="orderFilled = true", span="287-287"];
n217 [cluster="lambda expression", label="Exit lambda expression", span="285-291"];
n215 [cluster="lambda expression", label="delta = 0.02m", span="289-289"];
n218 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", span="322-322"];
n219 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="int id = 0", span="324-324"];
n220 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="var ib = _interactiveBrokersBrokerage", span="325-325"];
n224 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="var order = new LimitOrder(Symbols.USDJPY, -buyQuantity, limitPrice, DateTime.UtcNow) {Id = ++id}", span="337-337"];
n221 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="bool filled = false", span="327-327"];
n222 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="ib.OrderStatusChanged += (sender, args) =>\r\n            {\r\n                if (args.Status == OrderStatus.Filled)\r\n                {\r\n                    filled = true;\r\n                }\r\n            }", span="328-334"];
n226 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="ib.PlaceOrder(order)", span="339-339"];
n231 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="ib.UpdateOrder(order)", span="347-347"];
n223 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="decimal limitPrice = 10000m", span="336-336"];
n238 [cluster="lambda expression", label="args.Status == OrderStatus.Filled", span="330-330"];
n228 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="!filled && stopwatch.Elapsed.TotalSeconds < 10", span="342-342"];
n232 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="Assert.IsTrue(filled)", span="350-350"];
n225 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="_orders.Add(order)", span="338-338"];
n230 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="order.LimitPrice = order.LimitPrice/2", span="346-346"];
n227 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="var stopwatch = Stopwatch.StartNew()", span="341-341"];
n234 [cluster="System.Diagnostics.Stopwatch.StartNew()", label="Entry System.Diagnostics.Stopwatch.StartNew()", span="0-0"];
n229 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="Thread.Sleep(1000)", span="345-345"];
n235 [cluster="System.Threading.Thread.Sleep(int)", label="Entry System.Threading.Thread.Sleep(int)", span="0-0"];
n236 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.UpdateOrder(QuantConnect.Orders.Order)", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.UpdateOrder(QuantConnect.Orders.Order)", span="258-258"];
n233 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientUpdatesLimitOrder()", span="322-322"];
n237 [cluster="lambda expression", label="Entry lambda expression", span="328-334"];
n239 [cluster="lambda expression", label="filled = true", span="332-332"];
n240 [cluster="lambda expression", label="Exit lambda expression", span="328-334"];
n241 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", span="354-354"];
n242 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="var orderedResetEvent = new ManualResetEvent(false)", span="356-356"];
n243 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="var canceledResetEvent = new ManualResetEvent(false)", span="357-357"];
n245 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="ib.OrderStatusChanged += (sender, orderEvent) =>\r\n            {\r\n                if (orderEvent.Status == OrderStatus.Submitted)\r\n                {\r\n                    orderedResetEvent.Set();\r\n                }\r\n                if (orderEvent.Status == OrderStatus.Canceled)\r\n                {\r\n                    canceledResetEvent.Set();\r\n                }\r\n            }", span="361-371"];
n262 [cluster="lambda expression", label="orderedResetEvent.Set()", span="365-365"];
n249 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="orderedResetEvent.WaitOneAssertFail(2500, ''Limit order failed to be submitted.'')", span="377-377"];
n244 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="var ib = _interactiveBrokersBrokerage", span="359-359"];
n264 [cluster="lambda expression", label="canceledResetEvent.Set()", span="369-369"];
n252 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="canceledResetEvent.WaitOneAssertFail(2500, ''Canceled event did not fire.'')", span="383-383"];
n248 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="ib.PlaceOrder(order)", span="376-376"];
n251 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="ib.CancelOrder(order)", span="381-381"];
n253 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="var openOrders = ib.GetOpenOrders()", span="385-385"];
n246 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="var order = new LimitOrder(Symbols.USDJPY, -buyQuantity, 100000, DateTime.UtcNow, null)", span="374-374"];
n261 [cluster="lambda expression", label="orderEvent.Status == OrderStatus.Submitted", span="363-363"];
n263 [cluster="lambda expression", label="orderEvent.Status == OrderStatus.Canceled", span="367-367"];
n247 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="_orders.Add(order)", span="375-375"];
n254 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="var cancelledOrder = openOrders.FirstOrDefault(x => x.BrokerId.Contains(order.BrokerId[0]))", span="386-386"];
n267 [cluster="lambda expression", label="x.BrokerId.Contains(order.BrokerId[0])", span="386-386"];
n250 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="Thread.Sleep(500)", span="379-379"];
n257 [cluster="System.Threading.WaitHandle.WaitOneAssertFail(int, string)", label="Entry System.Threading.WaitHandle.WaitOneAssertFail(int, string)", span="32-32"];
n255 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="Assert.IsNull(cancelledOrder)", span="387-387"];
n258 [cluster="Unk.FirstOrDefault", label="Entry Unk.FirstOrDefault", span=""];
n266 [cluster="lambda expression", label="Entry lambda expression", span="386-386"];
n256 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientCancelsLimitOrder()", span="354-354"];
n259 [cluster="Unk.IsNull", label="Entry Unk.IsNull", span=""];
n260 [cluster="lambda expression", label="Entry lambda expression", span="361-371"];
n265 [cluster="lambda expression", label="Exit lambda expression", span="361-371"];
n268 [cluster="lambda expression", label="Exit lambda expression", span="386-386"];
n269 [cluster="System.Collections.Generic.List<T>.Contains(T)", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
n270 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", span="391-391"];
n271 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", label="var ib = _interactiveBrokersBrokerage", span="393-393"];
n272 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", label="var order = new MarketOrder(Symbols.USDJPY, buyQuantity, new DateTime()) {Id = 1}", span="395-395"];
n276 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", label="ib.OrderStatusChanged += (sender, fill) =>\r\n            {\r\n                if (fill.Status == OrderStatus.Filled)\r\n                {\r\n                    orderFilledEventCount++;\r\n                    orderFilledResetEvent.Set();\r\n                }\r\n\r\n                // mimic what the transaction handler would do\r\n                order.Status = fill.Status;\r\n            }", span="400-410"];
n277 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", label="ib.PlaceOrder(order)", span="412-412"];
n273 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", label="_orders.Add(order)", span="396-396"];
n282 [cluster="System.DateTime.DateTime()", label="Entry System.DateTime.DateTime()", span="0-0"];
n287 [cluster="lambda expression", label="order.Status = fill.Status", span="409-409"];
n274 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", label="int orderFilledEventCount = 0", span="398-398"];
n275 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", label="var orderFilledResetEvent = new ManualResetEvent(false)", span="399-399"];
n286 [cluster="lambda expression", label="orderFilledResetEvent.Set()", span="405-405"];
n278 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", label="orderFilledResetEvent.WaitOneAssertFail(2500, ''Didnt fire order filled event'')", span="414-414"];
n284 [cluster="lambda expression", label="fill.Status == OrderStatus.Filled", span="402-402"];
n285 [cluster="lambda expression", label="orderFilledEventCount++", span="404-404"];
n280 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", label="Assert.AreEqual(1, orderFilledEventCount)", span="419-419"];
n279 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", label="Thread.Sleep(2000)", span="417-417"];
n281 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientFiresSingleOrderFilledEvent()", span="391-391"];
n283 [cluster="lambda expression", label="Entry lambda expression", span="400-410"];
n288 [cluster="lambda expression", label="Exit lambda expression", span="400-410"];
n289 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", span="423-423"];
n290 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="var ib = _interactiveBrokersBrokerage", span="425-425"];
n291 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="Thread.Sleep(500)", span="427-427"];
n292 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="var previousHoldings = ib.GetAccountHoldings().ToDictionary(x => x.Symbol)", span="429-429"];
n298 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="ib.OrderStatusChanged += (sender, fill) =>\r\n            {\r\n                if (fill.Status == OrderStatus.Filled) orderResetEvent.Set();\r\n            }", span="442-445"];
n302 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="ib.PlaceOrder(order)", span="451-451"];
n305 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="var newHoldings = ib.GetAccountHoldings().ToDictionary(x => x.Symbol)", span="459-459"];
n293 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label=previousHoldings, span="431-431"];
n312 [cluster="Unk.ToDictionary", label="Entry Unk.ToDictionary", span=""];
n315 [cluster="lambda expression", label="Entry lambda expression", span="429-429"];
n295 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="Log.Trace(''Quantity: '' + previousHoldings[Symbols.USDJPY].Quantity)", span="436-436"];
n296 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="bool hasSymbol = previousHoldings.ContainsKey(Symbols.USDJPY)", span="438-438"];
n308 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="Assert.AreEqual(previousHoldings[Symbols.USDJPY].Quantity, newHoldings[Symbols.USDJPY].Quantity - quantity)", span="464-464"];
n294 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="Console.WriteLine(holding.Value)", span="433-433"];
n313 [cluster="Unk.WriteLine", label="Entry Unk.WriteLine", span=""];
n297 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="var orderResetEvent = new ManualResetEvent(false)", span="441-441"];
n314 [cluster="Unk.ContainsKey", label="Entry Unk.ContainsKey", span=""];
n307 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label=hasSymbol, span="462-462"];
n320 [cluster="lambda expression", label="orderResetEvent.Set()", span="444-444"];
n303 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="orderResetEvent.WaitOneAssertFail(3000, ''Didn't receive order event'')", span="454-454"];
n299 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="int quantity = -buyQuantity", span="448-448"];
n319 [cluster="lambda expression", label="fill.Status == OrderStatus.Filled", span="444-444"];
n300 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="var order = new MarketOrder(Symbols.USDJPY, quantity, DateTime.UtcNow)", span="449-449"];
n310 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="Assert.AreEqual(newHoldings[Symbols.USDJPY].Quantity, quantity)", span="469-469"];
n301 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="_orders.Add(order)", span="450-450"];
n304 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="Thread.Sleep(5000)", span="457-457"];
n306 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="Log.Trace(''New Quantity: '' + newHoldings[Symbols.USDJPY].Quantity)", span="460-460"];
n322 [cluster="lambda expression", label="Entry lambda expression", span="459-459"];
n309 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="Assert.IsTrue(newHoldings.ContainsKey(Symbols.USDJPY))", span="468-468"];
n311 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsAccountHoldings()", span="423-423"];
n316 [cluster="lambda expression", label="x.Symbol", span="429-429"];
n317 [cluster="lambda expression", label="Exit lambda expression", span="429-429"];
n318 [cluster="lambda expression", label="Entry lambda expression", span="442-445"];
n321 [cluster="lambda expression", label="Exit lambda expression", span="442-445"];
n323 [cluster="lambda expression", label="x.Symbol", span="459-459"];
n324 [cluster="lambda expression", label="Exit lambda expression", span="459-459"];
n325 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterConnect()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterConnect()", span="474-474"];
n326 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterConnect()", label="var ib = _interactiveBrokersBrokerage", span="476-476"];
n327 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterConnect()", label="var cashBalance = ib.GetCashBalance()", span="477-477"];
n328 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterConnect()", label="Assert.IsTrue(cashBalance.Any(x => x.Symbol == ''USD''))", span="478-478"];
n334 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetCashBalance()", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetCashBalance()", span="386-386"];
n329 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterConnect()", label=cashBalance, span="479-479"];
n332 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterConnect()", label="Assert.AreNotEqual(0m, cashBalance.Single(x => x.Symbol == ''USD''))", span="484-484"];
n335 [cluster="Unk.Any", label="Entry Unk.Any", span=""];
n338 [cluster="lambda expression", label="Entry lambda expression", span="478-478"];
n330 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterConnect()", label="Console.WriteLine(cash)", span="481-481"];
n333 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterConnect()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterConnect()", span="474-474"];
n331 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterConnect()", label="cash.Symbol == ''USD''", span="482-482"];
n336 [cluster="System.Console.WriteLine(object)", label="Entry System.Console.WriteLine(object)", span="0-0"];
n337 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n341 [cluster="lambda expression", label="Entry lambda expression", span="484-484"];
n339 [cluster="lambda expression", label="x.Symbol == ''USD''", span="478-478"];
n340 [cluster="lambda expression", label="Exit lambda expression", span="478-478"];
n342 [cluster="lambda expression", label="x.Symbol == ''USD''", span="484-484"];
n343 [cluster="lambda expression", label="Exit lambda expression", span="484-484"];
n344 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", span="490-490"];
n345 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="var ib = _interactiveBrokersBrokerage", span="492-492"];
n346 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="var orderEventFired = new ManualResetEvent(false)", span="494-494"];
n347 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="ib.OrderStatusChanged += (sender, args) =>\r\n            {\r\n                if (args.Status == OrderStatus.Filled)\r\n                {\r\n                    orderEventFired.Set();\r\n                }\r\n            }", span="495-501"];
n350 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="ib.AccountChanged += (sender, args) =>\r\n            {\r\n                cashBalanceUpdates.Add(args.CashBalance);\r\n                accountChangedFired.Set();\r\n            }", span="505-509"];
n356 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="ib.PlaceOrder(order)", span="516-516"];
n367 [cluster="lambda expression", label="orderEventFired.Set()", span="499-499"];
n357 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="orderEventFired.WaitOneAssertFail(1500, ''Didnt receive order event #'' + i)", span="518-518"];
n358 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="orderEventFired.Reset()", span="519-519"];
n348 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="var cashBalanceUpdates = new List<decimal>()", span="503-503"];
n366 [cluster="lambda expression", label="args.Status == OrderStatus.Filled", span="497-497"];
n349 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="var accountChangedFired = new ManualResetEvent(false)", span="504-504"];
n364 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n370 [cluster="lambda expression", label="cashBalanceUpdates.Add(args.CashBalance)", span="507-507"];
n362 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="Assert.AreEqual(orderCount, cashBalanceUpdates.Count)", span="525-525"];
n371 [cluster="lambda expression", label="accountChangedFired.Set()", span="508-508"];
n359 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="accountChangedFired.WaitOneAssertFail(1500, ''Didnt receive account event #'' + i)", span="521-521"];
n360 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="accountChangedFired.Reset()", span="522-522"];
n351 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="int orderCount = 3", span="511-511"];
n352 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="int i = 0", span="512-512"];
n353 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="i < orderCount", span="512-512"];
n354 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="var order = new MarketOrder(Symbols.USDJPY, buyQuantity*(i + 1), new DateTime()) {Id = i + 1}", span="514-514"];
n361 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="i++", span="512-512"];
n355 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="_orders.Add(order)", span="515-515"];
n363 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.FiresMultipleAccountBalanceEvents()", span="490-490"];
n365 [cluster="lambda expression", label="Entry lambda expression", span="495-501"];
n368 [cluster="lambda expression", label="Exit lambda expression", span="495-501"];
n369 [cluster="lambda expression", label="Entry lambda expression", span="505-509"];
n372 [cluster="lambda expression", label="Exit lambda expression", span="505-509"];
n373 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", span="529-529"];
n374 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", label="var ib = _interactiveBrokersBrokerage", span="531-531"];
n375 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", label="decimal balance = ib.GetCashBalance().Single(x => x.Symbol == ''USD'').Amount", span="533-533"];
n377 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", label="ib.AccountChanged += (sender, orderEvent) => manualResetEvent.Set()", span="537-537"];
n380 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", label="ib.PlaceOrder(order)", span="541-541"];
n382 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", label="decimal balanceAfterTrade = ib.GetCashBalance().Single(x => x.Symbol == ''USD'').Amount", span="545-545"];
n376 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", label="var manualResetEvent = new ManualResetEvent(false)", span="536-536"];
n385 [cluster="lambda expression", label="Entry lambda expression", span="533-533"];
n383 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", label="Assert.AreNotEqual(balance, balanceAfterTrade)", span="547-547"];
n389 [cluster="lambda expression", label="manualResetEvent.Set()", span="537-537"];
n381 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", label="manualResetEvent.WaitOneAssertFail(1500, ''Didn't receive account changed event'')", span="543-543"];
n378 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", label="var order = new MarketOrder(Symbols.USDJPY, buyQuantity, DateTime.UtcNow)", span="539-539"];
n379 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", label="_orders.Add(order)", span="540-540"];
n391 [cluster="lambda expression", label="Entry lambda expression", span="545-545"];
n384 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetsCashBalanceAfterTrade()", span="529-529"];
n386 [cluster="lambda expression", label="x.Symbol == ''USD''", span="533-533"];
n387 [cluster="lambda expression", label="Exit lambda expression", span="533-533"];
n388 [cluster="lambda expression", label="Entry lambda expression", span="537-537"];
n390 [cluster="lambda expression", label="Exit lambda expression", span="537-537"];
n392 [cluster="lambda expression", label="x.Symbol == ''USD''", span="545-545"];
n393 [cluster="lambda expression", label="Exit lambda expression", span="545-545"];
n394 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", span="551-551"];
n395 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="var ib = _interactiveBrokersBrokerage", span="553-553"];
n396 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="var orderEventFired = new ManualResetEvent(false)", span="555-555"];
n397 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="ib.OrderStatusChanged += (sender, args) =>\r\n            {\r\n                if (args.Status == OrderStatus.Filled)\r\n                {\r\n                    orderEventFired.Set();\r\n                }\r\n            }", span="556-562"];
n400 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="ib.PlaceOrder(order)", span="566-566"];
n403 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="var executions = ib.GetExecutions(null, null, null, DateTime.UtcNow.AddDays(-1), null)", span="571-571"];
n414 [cluster="lambda expression", label="orderEventFired.Set()", span="560-560"];
n401 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="orderEventFired.WaitOne(1500)", span="567-567"];
n398 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="var order = new MarketOrder(Symbols.USDJPY, -buyQuantity, new DateTime())", span="564-564"];
n413 [cluster="lambda expression", label="args.Status == OrderStatus.Filled", span="558-558"];
n399 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="_orders.Add(order)", span="565-565"];
n406 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="Assert.IsTrue(executions.Any(x => order.BrokerId.Any(id => executions.Any(e => e.Execution.OrderId == int.Parse(id)))))", span="576-576"];
n417 [cluster="lambda expression", label="order.BrokerId.Any(id => executions.Any(e => e.Execution.OrderId == int.Parse(id)))", span="576-576"];
n402 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="var stopwatch = Stopwatch.StartNew()", span="569-569"];
n404 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="stopwatch.Stop()", span="573-573"];
n405 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="Console.WriteLine(''Total executions fetched: {0}, elapsed time: {1} ms'', executions.Count, stopwatch.ElapsedMilliseconds)", span="574-574"];
n408 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
n409 [cluster="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetExecutions(string, string, string, System.DateTime?, string)", label="Entry QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage.GetExecutions(string, string, string, System.DateTime?, string)", span="397-397"];
n420 [cluster="lambda expression", label="executions.Any(e => e.Execution.OrderId == int.Parse(id))", span="576-576"];
n410 [cluster="System.Diagnostics.Stopwatch.Stop()", label="Entry System.Diagnostics.Stopwatch.Stop()", span="0-0"];
n411 [cluster="System.Console.WriteLine(string, object, object)", label="Entry System.Console.WriteLine(string, object, object)", span="0-0"];
n407 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetExecutions()", span="551-551"];
n416 [cluster="lambda expression", label="Entry lambda expression", span="576-576"];
n412 [cluster="lambda expression", label="Entry lambda expression", span="556-562"];
n415 [cluster="lambda expression", label="Exit lambda expression", span="556-562"];
n418 [cluster="lambda expression", label="Exit lambda expression", span="576-576"];
n419 [cluster="lambda expression", label="Entry lambda expression", span="576-576"];
n423 [cluster="lambda expression", label="e.Execution.OrderId == int.Parse(id)", span="576-576"];
n421 [cluster="lambda expression", label="Exit lambda expression", span="576-576"];
n422 [cluster="lambda expression", label="Entry lambda expression", span="576-576"];
n424 [cluster="lambda expression", label="Exit lambda expression", span="576-576"];
n425 [cluster="int.Parse(string)", label="Entry int.Parse(string)", span="0-0"];
n426 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", span="580-580"];
n427 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", label="var ib = _interactiveBrokersBrokerage", span="582-582"];
n428 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", label="var orderEventFired = new ManualResetEvent(false)", span="584-584"];
n429 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", label="ib.OrderStatusChanged += (sender, args) =>\r\n            {\r\n                if (args.Status == OrderStatus.Submitted)\r\n                {\r\n                    orderEventFired.Set();\r\n                }\r\n            }", span="585-591"];
n432 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", label="ib.PlaceOrder(order)", span="595-595"];
n435 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", label="var openOrders = ib.GetOpenOrders()", span="601-601"];
n440 [cluster="lambda expression", label="orderEventFired.Set()", span="589-589"];
n433 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", label="orderEventFired.WaitOne(1500)", span="597-597"];
n430 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", label="var order = new LimitOrder(Symbols.USDJPY, buyQuantity, 0.01m, DateTime.UtcNow)", span="593-593"];
n439 [cluster="lambda expression", label="args.Status == OrderStatus.Submitted", span="587-587"];
n431 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", label="_orders.Add(order)", span="594-594"];
n434 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", label="Thread.Sleep(250)", span="599-599"];
n436 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", label="Assert.AreNotEqual(0, openOrders.Count)", span="603-603"];
n437 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.GetOpenOrders()", span="580-580"];
n438 [cluster="lambda expression", label="Entry lambda expression", span="585-591"];
n441 [cluster="lambda expression", label="Exit lambda expression", span="585-591"];
n442 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Entry QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", span="607-607"];
n443 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="var ib = _interactiveBrokersBrokerage", span="609-609"];
n444 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Assert.IsTrue(ib.IsConnected)", span="610-610"];
n449 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="ib.IsConnected", span="619-619"];
n456 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="!ib.IsConnected && stopwatch.Elapsed < tenMinutes", span="632-632"];
n459 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Assert.IsTrue(ib.IsConnected)", span="638-638"];
n445 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="var tenMinutes = TimeSpan.FromMinutes(10)", span="612-612"];
n446 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Console.WriteLine(''------'')", span="614-614"];
n461 [cluster="System.TimeSpan.FromMinutes(double)", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
n447 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Console.WriteLine(''Waiting for internet disconnection '')", span="615-615"];
n462 [cluster="System.Console.WriteLine(string)", label="Entry System.Console.WriteLine(string)", span="0-0"];
n448 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Console.WriteLine(''------'')", span="616-616"];
n450 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Thread.Sleep(2500)", span="621-621"];
n452 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="var stopwatch = Stopwatch.StartNew()", span="625-625"];
n451 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Console.Write(''.'')", span="622-622"];
n463 [cluster="System.Console.Write(string)", label="Entry System.Console.Write(string)", span="0-0"];
n453 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Console.WriteLine(''------'')", span="627-627"];
n454 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Console.WriteLine(''Trying to reconnect '')", span="628-628"];
n455 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Console.WriteLine(''------'')", span="629-629"];
n457 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Thread.Sleep(2500)", span="634-634"];
n458 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Console.Write(''.'')", span="635-635"];
n460 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.ClientReconnectsAfterInternetDisconnect()", span="607-607"];
n464 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.AssertOrderOpened(bool, QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage, QuantConnect.Orders.Order)", label="!orderFilled", span="644-644"];
n465 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.AssertOrderOpened(bool, QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage, QuantConnect.Orders.Order)", label="ib.GetOpenOrders()", span="647-647"];
n466 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.AssertOrderOpened(bool, QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage, QuantConnect.Orders.Order)", label="openOrder.BrokerId.Any(id => order.BrokerId.Any(x => x == id))", span="649-649"];
n475 [cluster="lambda expression", label="order.BrokerId.Any(x => x == id)", span="649-649"];
n469 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.AssertOrderOpened(bool, QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage, QuantConnect.Orders.Order)", label="Assert.Pass(''The order was successfully filled!'')", span="657-657"];
n468 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.AssertOrderOpened(bool, QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage, QuantConnect.Orders.Order)", label="Assert.Fail(''The order was not filled and was unable to be located via GetOpenOrders()'')", span="654-654"];
n467 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.AssertOrderOpened(bool, QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage, QuantConnect.Orders.Order)", label="return openOrder;", span="651-651"];
n474 [cluster="lambda expression", label="Entry lambda expression", span="649-649"];
n472 [cluster="Unk.Fail", label="Entry Unk.Fail", span=""];
n470 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.AssertOrderOpened(bool, QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage, QuantConnect.Orders.Order)", label="return null;", span="658-658"];
n473 [cluster="Unk.Pass", label="Entry Unk.Pass", span=""];
n471 [cluster="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.AssertOrderOpened(bool, QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage, QuantConnect.Orders.Order)", label="Exit QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests.AssertOrderOpened(bool, QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage, QuantConnect.Orders.Order)", span="641-641"];
n478 [cluster="lambda expression", label="x == id", span="649-649"];
n476 [cluster="lambda expression", label="Exit lambda expression", span="649-649"];
n477 [cluster="lambda expression", label="Entry lambda expression", span="649-649"];
n479 [cluster="lambda expression", label="Exit lambda expression", span="649-649"];
m0_31 [cluster="QuantConnect.Algorithm.QCAlgorithm.Debug(string)", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Debug(string)", span="1791-1791"];
m0_22 [cluster="QuantConnect.Algorithm.Framework.Execution.ImmediateExecutionModel.ImmediateExecutionModel()", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.Framework.Execution.ImmediateExecutionModel.ImmediateExecutionModel()", span="25-25"];
m0_26 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", span="61-61"];
m0_27 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", file="CustomData_NitfyINR.cs", label="orderEvent.Status.IsFill()", span="63-63"];
m0_28 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", file="CustomData_NitfyINR.cs", label="Debug($''Purchased Stock: {orderEvent.Symbol}'')", span="65-65"];
m0_29 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", file="CustomData_NitfyINR.cs", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", span="61-61"];
m0_25 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetRiskManagement(QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel)", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetRiskManagement(QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel)", span="288-288"];
m0_16 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetUniverseSelection(QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel)", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetUniverseSelection(QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel)", span="252-252"];
m0_19 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetAlpha(QuantConnect.Algorithm.Framework.Alphas.IAlphaModel)", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetAlpha(QuantConnect.Algorithm.Framework.Alphas.IAlphaModel)", span="261-261"];
m0_23 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetExecution(QuantConnect.Algorithm.Framework.Execution.IExecutionModel)", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetExecution(QuantConnect.Algorithm.Framework.Execution.IExecutionModel)", span="279-279"];
m0_21 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetPortfolioConstruction(QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel)", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.SetPortfolioConstruction(QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel)", span="270-270"];
m0_12 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", span="1197-1197"];
m0_14 [cluster="QuantConnect.Algorithm.Framework.Selection.ManualUniverseSelectionModel.ManualUniverseSelectionModel(params QuantConnect.Symbol[])", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.Framework.Selection.ManualUniverseSelectionModel.ManualUniverseSelectionModel(params QuantConnect.Symbol[])", span="53-53"];
m0_20 [cluster="QuantConnect.Algorithm.Framework.Portfolio.EqualWeightingPortfolioConstructionModel.EqualWeightingPortfolioConstructionModel()", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.Framework.Portfolio.EqualWeightingPortfolioConstructionModel.EqualWeightingPortfolioConstructionModel()", span="29-29"];
m0_15 [cluster="QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", span="45-45"];
m0_11 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", span="1172-1172"];
m0_0 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", span="39-39"];
m0_1 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", file="CustomData_NitfyINR.cs", label="UniverseSettings.Resolution = Resolution.Minute", span="42-42"];
m0_2 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", file="CustomData_NitfyINR.cs", label="SetStartDate(2013, 10, 07)", span="44-44"];
m0_3 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", file="CustomData_NitfyINR.cs", label="SetEndDate(2013, 10, 11)", span="45-45"];
m0_4 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", file="CustomData_NitfyINR.cs", label="SetCash(100000)", span="46-46"];
m0_5 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", file="CustomData_NitfyINR.cs", label="SetUniverseSelection(new ManualUniverseSelectionModel(QuantConnect.Symbol.Create(''SPY'', SecurityType.Equity, Market.USA)))", span="54-54"];
m0_6 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", file="CustomData_NitfyINR.cs", label="SetAlpha(new ConstantAlphaModel(InsightType.Price, InsightDirection.Up, TimeSpan.FromMinutes(20), 0.025, null))", span="55-55"];
m0_7 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", file="CustomData_NitfyINR.cs", label="SetPortfolioConstruction(new EqualWeightingPortfolioConstructionModel())", span="56-56"];
m0_8 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", file="CustomData_NitfyINR.cs", label="SetExecution(new ImmediateExecutionModel())", span="57-57"];
m0_9 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", file="CustomData_NitfyINR.cs", label="SetRiskManagement(new MaximumDrawdownPercentPerSecurity(0.01m))", span="58-58"];
m0_10 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", file="CustomData_NitfyINR.cs", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", span="39-39"];
m0_17 [cluster="QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.ConstantAlphaModel.ConstantAlphaModel(QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, System.TimeSpan, double?, double?)", span="55-55"];
m0_13 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", span="1121-1121"];
m0_24 [cluster="QuantConnect.Algorithm.Framework.Risk.MaximumDrawdownPercentPerSecurity.MaximumDrawdownPercentPerSecurity(decimal)", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Algorithm.Framework.Risk.MaximumDrawdownPercentPerSecurity.MaximumDrawdownPercentPerSecurity(decimal)", span="34-34"];
m0_30 [cluster="QuantConnect.Orders.OrderStatus.IsFill()", file="CustomData_NitfyINR.cs", label="Entry QuantConnect.Orders.OrderStatus.IsFill()", span="50-50"];
m0_32 [file="CustomData_NitfyINR.cs", label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", span=""];
m1_36 [cluster="QuantConnect.Time.UnixTimeStampToDateTime(double)", file="LiveFeaturesAlgorithm.cs", label="Entry QuantConnect.Time.UnixTimeStampToDateTime(double)", span="127-127"];
m1_40 [cluster="System.Guid.Parse(string)", file="LiveFeaturesAlgorithm.cs", label="Entry System.Guid.Parse(string)", span="0-0"];
m1_2 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", span="118-118"];
m1_3 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Id = Guid.NewGuid()", span="120-120"];
m1_5 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Symbol = symbol", span="123-123"];
m1_6 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Type = type", span="124-124"];
m1_7 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Direction = direction", span="125-125"];
m1_8 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Period = period", span="126-126"];
m1_9 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Magnitude = magnitude", span="129-129"];
m1_10 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Confidence = confidence", span="130-130"];
m1_4 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Score = new InsightScore()", span="121-121"];
m1_11 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", span="118-118"];
m1_14 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(System.DateTime, QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(System.DateTime, QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", span="145-145"];
m1_15 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(System.DateTime, QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="GeneratedTimeUtc = generatedTimeUtc", span="148-148"];
m1_16 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(System.DateTime, QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="CloseTimeUtc = generatedTimeUtc + period", span="149-149"];
m1_17 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(System.DateTime, QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(System.DateTime, QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", span="145-145"];
m1_0 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection)", file="LiveFeaturesAlgorithm.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection)", span="104-104"];
m1_1 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection)", file="LiveFeaturesAlgorithm.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.Insight.Insight(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightType, QuantConnect.Algorithm.Framework.Alphas.InsightDirection)", span="104-104"];
m1_37 [cluster="QuantConnect.Symbol.Symbol(QuantConnect.SecurityIdentifier, string)", file="LiveFeaturesAlgorithm.cs", label="Entry QuantConnect.Symbol.Symbol(QuantConnect.SecurityIdentifier, string)", span="242-242"];
m1_24 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", file="LiveFeaturesAlgorithm.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", span="188-188"];
m1_25 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", file="LiveFeaturesAlgorithm.cs", label="var insight = new Insight(\r\n                Time.UnixTimeStampToDateTime(serializedInsight.GeneratedTime),\r\n                new Symbol(SecurityIdentifier.Parse(serializedInsight.Symbol), serializedInsight.Ticker),\r\n                TimeSpan.FromSeconds(serializedInsight.Period),\r\n                serializedInsight.Type,\r\n                serializedInsight.Direction,\r\n                serializedInsight.Magnitude,\r\n                serializedInsight.Confidence\r\n            )\r\n            {\r\n                Id = Guid.Parse(serializedInsight.Id),\r\n                CloseTimeUtc = Time.UnixTimeStampToDateTime(serializedInsight.CloseTime),\r\n                EstimatedValue = serializedInsight.EstimatedValue,\r\n                ReferenceValue = serializedInsight.ReferenceValue\r\n            }", span="190-204"];
m1_26 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", file="LiveFeaturesAlgorithm.cs", label="serializedInsight.ScoreIsFinal", span="207-207"];
m1_27 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", file="LiveFeaturesAlgorithm.cs", label="insight.Score.SetScore(InsightScoreType.Magnitude, serializedInsight.ScoreMagnitude, insight.CloseTimeUtc)", span="209-209"];
m1_28 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", file="LiveFeaturesAlgorithm.cs", label="insight.Score.SetScore(InsightScoreType.Direction, serializedInsight.ScoreDirection, insight.CloseTimeUtc)", span="210-210"];
m1_30 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", file="LiveFeaturesAlgorithm.cs", label="serializedInsight.ScoreMagnitude != 0", span="215-215"];
m1_31 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", file="LiveFeaturesAlgorithm.cs", label="insight.Score.SetScore(InsightScoreType.Magnitude, serializedInsight.ScoreMagnitude, insight.CloseTimeUtc)", span="217-217"];
m1_32 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", file="LiveFeaturesAlgorithm.cs", label="serializedInsight.ScoreDirection != 0", span="220-220"];
m1_33 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", file="LiveFeaturesAlgorithm.cs", label="insight.Score.SetScore(InsightScoreType.Direction, serializedInsight.ScoreDirection, insight.CloseTimeUtc)", span="222-222"];
m1_29 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", file="LiveFeaturesAlgorithm.cs", label="insight.Score.Finalize(insight.CloseTimeUtc)", span="211-211"];
m1_34 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", file="LiveFeaturesAlgorithm.cs", label="return insight;", span="226-226"];
m1_35 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", file="LiveFeaturesAlgorithm.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.Insight.FromSerializedInsight(QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight)", span="188-188"];
m1_18 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Clone()", file="LiveFeaturesAlgorithm.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.Clone()", span="156-156"];
m1_19 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Clone()", file="LiveFeaturesAlgorithm.cs", label="return new Insight(Symbol, Period, Type, Direction, Magnitude, Confidence)\r\n            {\r\n                GeneratedTimeUtc = GeneratedTimeUtc,\r\n                CloseTimeUtc = CloseTimeUtc,\r\n                Score = Score,\r\n                Id = Id,\r\n                EstimatedValue = EstimatedValue,\r\n                ReferenceValue = ReferenceValue\r\n            };", span="158-166"];
m1_20 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Clone()", file="LiveFeaturesAlgorithm.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.Insight.Clone()", span="156-156"];
m1_41 [cluster="QuantConnect.Algorithm.Framework.Alphas.InsightScore.SetScore(QuantConnect.Algorithm.Framework.Alphas.InsightScoreType, double, System.DateTime)", file="LiveFeaturesAlgorithm.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.InsightScore.SetScore(QuantConnect.Algorithm.Framework.Alphas.InsightScoreType, double, System.DateTime)", span="76-76"];
m1_42 [cluster="QuantConnect.Algorithm.Framework.Alphas.InsightScore.Finalize(System.DateTime)", file="LiveFeaturesAlgorithm.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.InsightScore.Finalize(System.DateTime)", span="101-101"];
m1_43 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.ToString()", file="LiveFeaturesAlgorithm.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.ToString()", span="232-232"];
m1_44 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.ToString()", file="LiveFeaturesAlgorithm.cs", label="var str = $''{Id}: {Symbol} {Type} {Direction} within {Period}''", span="234-234"];
m1_45 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.ToString()", file="LiveFeaturesAlgorithm.cs", label="Magnitude.HasValue", span="235-235"];
m1_46 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.ToString()", file="LiveFeaturesAlgorithm.cs", label="str += $'' by {Magnitude.Value}%''", span="237-237"];
m1_48 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.ToString()", file="LiveFeaturesAlgorithm.cs", label="str += $'' with {Math.Round(100 * Confidence.Value, 1)}% confidence''", span="241-241"];
m1_49 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.ToString()", file="LiveFeaturesAlgorithm.cs", label="return str;", span="244-244"];
m1_47 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.ToString()", file="LiveFeaturesAlgorithm.cs", label="Confidence.HasValue", span="239-239"];
m1_50 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.ToString()", file="LiveFeaturesAlgorithm.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.Insight.ToString()", span="232-232"];
m1_21 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Price(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Insight.Price(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", span="178-178"];
m1_22 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Price(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="return new Insight(symbol, period, InsightType.Price, direction, magnitude, confidence);", span="180-180"];
m1_23 [cluster="QuantConnect.Algorithm.Framework.Alphas.Insight.Price(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", file="LiveFeaturesAlgorithm.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.Insight.Price(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Algorithm.Framework.Alphas.InsightDirection, double?, double?)", span="178-178"];
m1_38 [cluster="QuantConnect.SecurityIdentifier.Parse(string)", file="LiveFeaturesAlgorithm.cs", label="Entry QuantConnect.SecurityIdentifier.Parse(string)", span="557-557"];
m1_51 [cluster="System.Math.Round(double, int)", file="LiveFeaturesAlgorithm.cs", label="Entry System.Math.Round(double, int)", span="0-0"];
m1_12 [cluster="System.Guid.NewGuid()", file="LiveFeaturesAlgorithm.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m1_39 [cluster="System.TimeSpan.FromSeconds(double)", file="LiveFeaturesAlgorithm.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m1_13 [cluster="QuantConnect.Algorithm.Framework.Alphas.InsightScore.InsightScore()", file="LiveFeaturesAlgorithm.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.InsightScore.InsightScore()", span="53-53"];
m1_52 [file="LiveFeaturesAlgorithm.cs", label="QuantConnect.Algorithm.Framework.Alphas.Insight", span=""];
m2_198 [cluster="string.GetExtension()", file="SubscriptionDataReader.cs", label="Entry string.GetExtension()", span="202-202"];
m2_206 [cluster="QuantConnect.Lean.Engine.SubscriptionStreamReader.SubscriptionStreamReader(string, QuantConnect.DataFeedEndpoint)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionStreamReader.SubscriptionStreamReader(string, QuantConnect.DataFeedEndpoint)", span="84-84"];
m2_154 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", span="647-647"];
m2_228 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="SubscriptionDataReader.cs", label="var newSource = ''''", span="649-649"];
m2_230 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="SubscriptionDataReader.cs", label="newSource = _getSourceMethod.Invoke(_dataFactory, new object[] { _config, date, _feedEndpoint }) as String", span="655-655"];
m2_229 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="SubscriptionDataReader.cs", label="_dataFactory != null", span="651-651"];
m2_234 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="SubscriptionDataReader.cs", label="return newSource;", span="664-664"];
m2_231 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="SubscriptionDataReader.cs", label=Exception, span="657-657"];
m2_232 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="SubscriptionDataReader.cs", label="Log.Error(''SubscriptionDataReader.GetSource(): '' + err.Message)", span="659-659"];
m2_233 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="SubscriptionDataReader.cs", label="Engine.ResultHandler.ErrorMessage(''Error getting string source location for custom data source: '' + err.Message, err.StackTrace)", span="660-660"];
m2_235 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="SubscriptionDataReader.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", span="647-647"];
m2_200 [cluster="System.Net.WebClient.WebClient()", file="SubscriptionDataReader.cs", label="Entry System.Net.WebClient.WebClient()", span="0-0"];
m2_226 [cluster="QuantConnect.Lean.Engine.SubscriptionStreamReader.Dispose()", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionStreamReader.Dispose()", span="154-154"];
m2_109 [cluster="QuantConnect.Data.SubscriptionDataConfig.SetMappedSymbol(string)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Data.SubscriptionDataConfig.SetMappedSymbol(string)", span="139-139"];
m2_33 [cluster="object.GetType()", file="SubscriptionDataReader.cs", label="Entry object.GetType()", span="0-0"];
m2_120 [cluster="System.NotImplementedException.NotImplementedException(string)", file="SubscriptionDataReader.cs", label="Entry System.NotImplementedException.NotImplementedException(string)", span="0-0"];
m2_155 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", span="628-628"];
m2_219 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="SubscriptionDataReader.cs", label="_reader != null", span="630-630"];
m2_220 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="SubscriptionDataReader.cs", label="_reader.Close()", span="632-632"];
m2_222 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="SubscriptionDataReader.cs", label="_web != null", span="636-636"];
m2_221 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="SubscriptionDataReader.cs", label="_reader.Dispose()", span="633-633"];
m2_223 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="SubscriptionDataReader.cs", label="_web.Dispose()", span="638-638"];
m2_224 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="SubscriptionDataReader.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", span="628-628"];
m2_40 [cluster="QuantConnect.Logging.Log.Error(string, bool)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="85-85"];
m2_42 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", span="241-241"];
m2_43 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="BaseData instance = null", span="243-243"];
m2_44 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="var instanceMarketOpen = false", span="244-244"];
m2_51 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="instance == null && !_reader.EndOfStream", span="267-267"];
m2_77 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="_lastBarOfStream = _lastBarOutsideMarketHours ?? instance", span="345-345"];
m2_80 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="Current = instance", span="355-355"];
m2_81 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="_reader.EndOfStream && instance == null", span="358-358"];
m2_45 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="_endOfStream || _reader == null || _reader.EndOfStream", span="248-248"];
m2_46 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="_reader == null", span="250-250"];
m2_47 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="Current = null", span="253-253"];
m2_48 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="_lastBarOfStream = Current", span="258-258"];
m2_49 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="_endOfStream = true", span="260-260"];
m2_50 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="return false;", span="261-261"];
m2_52 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="var line = _reader.ReadLine()", span="270-270"];
m2_75 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="Current == null", span="339-339"];
m2_53 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="instance = _readerMethodInvoker(_dataFactory, _config, line, _date, _feedEndpoint) as BaseData", span="274-274"];
m2_55 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="Engine.ResultHandler.RuntimeError(''Error invoking '' + _config.Symbol + '' data reader. Line: '' + line + '' Error: '' + err.Message, err.StackTrace)", span="279-279"];
m2_54 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label=Exception, span="276-276"];
m2_57 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="instance != null", span="284-284"];
m2_58 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="instanceMarketOpen = _security.Exchange.DateTimeIsOpen(instance.Time)", span="286-286"];
m2_59 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="!_security.DataFilter.Filter(_security, instance)", span="291-291"];
m2_64 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="instance == null", span="303-303"];
m2_66 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="instance.Time < _periodStart", span="311-311"];
m2_67 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="_lastBarOutsideMarketHours = instance", span="313-313"];
m2_69 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="instance.Time > _periodFinish", span="317-317"];
m2_72 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="_lastBarOutsideMarketHours = instance", span="326-326"];
m2_56 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="_endOfStream = true", span="280-280"];
m2_71 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="!instanceMarketOpen", span="324-324"];
m2_73 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="!_config.ExtendedMarketHours && !instanceMarketOpen", span="330-330"];
m2_60 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="instance = null", span="293-293"];
m2_61 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label=Exception, span="297-297"];
m2_62 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="Log.Error(''SubscriptionDataReader.MoveNext(): Error applying filter: '' + err.Message)", span="299-299"];
m2_63 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="Engine.ResultHandler.RuntimeError(''Runtime error applying data filter. Assuming filter pass: '' + err.Message, err.StackTrace)", span="300-300"];
m2_65 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="Log.Trace(''SubscriptionDataReader.MoveNext(): Instance null, continuing...'')", span="305-305"];
m2_68 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="instance = null", span="314-314"];
m2_70 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="instance = null", span="319-319"];
m2_74 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="instance = null", span="332-332"];
m2_76 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="_lastBarOfStream == null", span="342-342"];
m2_79 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="Previous = Current", span="352-352"];
m2_78 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="Previous = _lastBarOfStream", span="348-348"];
m2_82 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="_endOfStream = true", span="361-361"];
m2_88 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="return true;", span="374-374"];
m2_83 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="_isFillForward && Previous != null", span="363-363"];
m2_84 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="Current = Previous.Clone(true)", span="366-366"];
m2_87 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="return false;", span="372-372"];
m2_85 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="Current.Time = _security.Exchange.TimeOfDayClosed(Previous.Time)", span="368-368"];
m2_86 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="_lastBarOfStream = Previous", span="370-370"];
m2_89 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="SubscriptionDataReader.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", span="241-241"];
m2_31 [cluster="QuantConnect.Lean.Engine.Results.IResultHandler.ErrorMessage(string, string)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.Results.IResultHandler.ErrorMessage(string, string)", span="114-114"];
m2_227 [cluster="System.ComponentModel.Component.Dispose()", file="SubscriptionDataReader.cs", label="Entry System.ComponentModel.Component.Dispose()", span="0-0"];
m2_107 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetTimePriceFactor(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.DateTime)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.GetTimePriceFactor(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.DateTime)", span="74-74"];
m2_93 [cluster="QuantConnect.Securities.SecurityExchange.DateTimeIsOpen(System.DateTime)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Securities.SecurityExchange.DateTimeIsOpen(System.DateTime)", span="196-196"];
m2_204 [cluster="QuantConnect.Compression.Unzip(string)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Compression.Unzip(string)", span="248-248"];
m2_158 [cluster="System.Exception.Exception(string)", file="SubscriptionDataReader.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m2_37 [cluster="QuantConnect.Data.Custom.Quandl.SetAuthCode(string)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Data.Custom.Quandl.SetAuthCode(string)", span="108-108"];
m2_90 [cluster="QuantConnect.Lean.Engine.SubscriptionStreamReader.ReadLine()", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionStreamReader.ReadLine()", span="117-117"];
m2_97 [cluster="QuantConnect.Securities.SecurityExchange.TimeOfDayClosed(System.DateTime)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Securities.SecurityExchange.TimeOfDayClosed(System.DateTime)", span="185-185"];
m2_199 [cluster="System.Uri.Uri(string, System.UriKind)", file="SubscriptionDataReader.cs", label="Entry System.Uri.Uri(string, System.UriKind)", span="0-0"];
m2_225 [cluster="QuantConnect.Lean.Engine.SubscriptionStreamReader.Close()", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionStreamReader.Close()", span="146-146"];
m2_91 [cluster="Unk._readerMethodInvoker", file="SubscriptionDataReader.cs", label="Entry Unk._readerMethodInvoker", span=""];
m2_29 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.HasScalingFactors(string)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.HasScalingFactors(string)", span="58-58"];
m2_35 [cluster="Unk.DelegateForCallMethod", file="SubscriptionDataReader.cs", label="Entry Unk.DelegateForCallMethod", span=""];
m2_121 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", span="431-431"];
m2_122 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="_date = date", span="434-434"];
m2_125 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="UpdateScaleFactors(date)", span="440-440"];
m2_126 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="!_security.Exchange.DateIsOpen(date)", span="444-444"];
m2_129 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="newSource = GetSource(date)", span="451-451"];
m2_142 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="Log.Error(''Failed to get StreamReader for data source('' + _source + ''), symbol('' + _mappedSymbol + ''). Skipping date('' + date.ToShortDateString() + ''). Reader is null.'')", span="485-485"];
m2_123 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="var newSource = ''''", span="435-435"];
m2_124 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label=_hasScaleFactors, span="438-438"];
m2_127 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="_endOfStream = true", span="446-446"];
m2_128 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="return false;", span="447-447"];
m2_130 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="newSource == ''''", span="454-454"];
m2_133 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="_source != newSource && newSource != ''''", span="461-461"];
m2_135 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="_source = newSource", span="466-466"];
m2_131 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="_endOfStream = true", span="456-456"];
m2_132 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="return false;", span="457-457"];
m2_134 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="_endOfStream = false", span="464-464"];
m2_151 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="return true;", span="512-512"];
m2_136 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="Dispose()", span="468-468"];
m2_137 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="_reader = GetReader(_source)", span="474-474"];
m2_138 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label=Exception, span="476-476"];
m2_141 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="_reader == null", span="483-483"];
m2_139 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="Log.Error(''SubscriptionDataReader.RefreshSource(): Failed to get reader: '' + err.Message)", span="478-478"];
m2_140 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="return false;", span="480-480"];
m2_146 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="Current = null", span="496-496"];
m2_143 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label=_isDynamicallyLoadedData, span="488-488"];
m2_144 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="Engine.ResultHandler.ErrorMessage(''We could not fetch the requested data. This may not be valid data, or a failed download of custom data. Skipping source ('' + _source + '').'')", span="490-490"];
m2_145 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="return false;", span="492-492"];
m2_147 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="Previous = null", span="497-497"];
m2_148 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="MoveNext()", span="503-503"];
m2_149 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label=Exception, span="505-505"];
m2_150 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="throw new Exception(''SubscriptionDataReader.RefreshSource(): Could not MoveNext to init stream: '' + _source + '' '' + err.Message + '' >> '' + err.StackTrace);", span="507-507"];
m2_152 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="SubscriptionDataReader.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", span="431-431"];
m2_194 [cluster="System.IO.Directory.CreateDirectory(string)", file="SubscriptionDataReader.cs", label="Entry System.IO.Directory.CreateDirectory(string)", span="0-0"];
m2_116 [cluster="QuantConnect.Securities.SecurityExchange.DateTimeIsExtendedOpen(System.DateTime)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Securities.SecurityExchange.DateTimeIsExtendedOpen(System.DateTime)", span="207-207"];
m2_207 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", span="603-603"];
m2_208 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="SubscriptionDataReader.cs", label="StreamReader reader", span="606-606"];
m2_210 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="SubscriptionDataReader.cs", label="var stream = _web.OpenRead(source)", span="610-610"];
m2_211 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="SubscriptionDataReader.cs", label="source.GetExtension() == ''.zip''", span="613-613"];
m2_209 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="SubscriptionDataReader.cs", label="_web = new WebClient()", span="609-609"];
m2_212 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="SubscriptionDataReader.cs", label="reader = Compression.UnzipStream(stream)", span="615-615"];
m2_213 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="SubscriptionDataReader.cs", label="reader = new StreamReader(stream)", span="619-619"];
m2_214 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="SubscriptionDataReader.cs", label="return reader;", span="622-622"];
m2_215 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="SubscriptionDataReader.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", span="603-603"];
m2_205 [cluster="QuantConnect.Lean.Engine.SubscriptionStreamReader.SubscriptionStreamReader(System.IO.StreamReader, QuantConnect.DataFeedEndpoint)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionStreamReader.SubscriptionStreamReader(System.IO.StreamReader, QuantConnect.DataFeedEndpoint)", span="104-104"];
m2_94 [cluster="QuantConnect.Securities.Interfaces.ISecurityDataFilter.Filter(QuantConnect.Securities.Security, QuantConnect.Data.BaseData)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Securities.Interfaces.ISecurityDataFilter.Filter(QuantConnect.Securities.Security, QuantConnect.Data.BaseData)", span="46-46"];
m2_196 [cluster="System.IO.File.Delete(string)", file="SubscriptionDataReader.cs", label="Entry System.IO.File.Delete(string)", span="0-0"];
m2_216 [cluster="System.Net.WebClient.OpenRead(string)", file="SubscriptionDataReader.cs", label="Entry System.Net.WebClient.OpenRead(string)", span="0-0"];
m2_193 [cluster="System.IO.Directory.Exists(string)", file="SubscriptionDataReader.cs", label="Entry System.IO.Directory.Exists(string)", span="0-0"];
m2_96 [cluster="QuantConnect.Data.BaseData.Clone(bool)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Data.BaseData.Clone(bool)", span="189-189"];
m2_197 [cluster="string.ToMD5()", file="SubscriptionDataReader.cs", label="Entry string.ToMD5()", span="109-109"];
m2_113 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.ExtendedMarketOpen(System.DateTime)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.ExtendedMarketOpen(System.DateTime)", span="412-412"];
m2_114 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.ExtendedMarketOpen(System.DateTime)", file="SubscriptionDataReader.cs", label="return _security.Exchange.DateTimeIsExtendedOpen(time);", span="414-414"];
m2_115 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.ExtendedMarketOpen(System.DateTime)", file="SubscriptionDataReader.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.ExtendedMarketOpen(System.DateTime)", span="412-412"];
m2_0 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", span="165-165"];
m2_1 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_config = config", span="168-168"];
m2_2 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_isFillForward = config.FillDataForward", span="171-171"];
m2_3 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_periodStart = periodStart", span="174-174"];
m2_4 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_periodFinish = periodFinish", span="175-175"];
m2_5 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_security = security", span="178-178"];
m2_6 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_isDynamicallyLoadedData = security.IsDynamicallyLoadedData", span="179-179"];
m2_7 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_hasScaleFactors = SubscriptionAdjustment.HasScalingFactors(config.Symbol)", span="182-182"];
m2_8 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_feedEndpoint = feed", span="185-185"];
m2_9 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_objectActivator = ObjectActivator.GetActivator(config.Type)", span="188-188"];
m2_11 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="Engine.ResultHandler.ErrorMessage(''Custom data type ''' + config.Type.Name + ''' missing parameterless constructor E.g. public '' + config.Type.Name + ''() { }'')", span="192-192"];
m2_22 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_priceFactors = SubscriptionAdjustment.GetFactorTable(config.Symbol)", span="221-221"];
m2_23 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_symbolMap = SubscriptionAdjustment.GetMapTable(config.Symbol)", span="222-222"];
m2_10 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_objectActivator == null", span="190-190"];
m2_14 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="var userObj = _objectActivator.Invoke(new object[] { })", span="198-198"];
m2_12 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_endOfStream = true", span="193-193"];
m2_13 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="return;", span="194-194"];
m2_15 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_dataFactory = userObj as BaseData", span="199-199"];
m2_16 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="var readerMethod = _dataFactory.GetType().GetMethod(''Reader'', new[] { typeof(SubscriptionDataConfig), typeof(string), typeof(DateTime), typeof(DataFeedEndpoint) })", span="202-202"];
m2_17 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_readerMethodInvoker = readerMethod.DelegateForCallMethod()", span="205-205"];
m2_18 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_getSourceMethod = _dataFactory.GetType().GetMethod(''GetSource'', new[] { typeof(SubscriptionDataConfig), typeof(DateTime), typeof(DataFeedEndpoint) })", span="208-208"];
m2_19 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_dataFactory.GetType().Name == ''Quandl''", span="211-211"];
m2_20 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="((Quandl)_dataFactory).SetAuthCode(Config.Get(''quandl-auth-token''))", span="213-213"];
m2_21 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label=_hasScaleFactors, span="219-219"];
m2_24 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label=Exception, span="225-225"];
m2_25 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="Log.Error(''SubscriptionDataReader(): Fetching Price/Map Factors: '' + err.Message)", span="227-227"];
m2_26 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_priceFactors = new SortedDictionary<DateTime, decimal>()", span="228-228"];
m2_27 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="_symbolMap = new SortedDictionary<DateTime, string>()", span="229-229"];
m2_28 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="SubscriptionDataReader.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", span="165-165"];
m2_202 [cluster="QuantConnect.Lean.Engine.Results.IResultHandler.SamplePerformance(System.DateTime, decimal)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.Results.IResultHandler.SamplePerformance(System.DateTime, decimal)", span="150-150"];
m2_203 [cluster="System.IO.File.Exists(string)", file="SubscriptionDataReader.cs", label="Entry System.IO.File.Exists(string)", span="0-0"];
m2_201 [cluster="System.Net.WebClient.DownloadFile(string, string)", file="SubscriptionDataReader.cs", label="Entry System.Net.WebClient.DownloadFile(string, string)", span="0-0"];
m2_217 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Compression.UnzipStream(System.IO.Stream)", span="287-287"];
m2_218 [cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", file="SubscriptionDataReader.cs", label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0"];
m2_30 [cluster="QuantConnect.Util.ObjectActivator.GetActivator(System.Type)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Util.ObjectActivator.GetActivator(System.Type)", span="39-39"];
m2_34 [cluster="System.Type.GetMethod(string, System.Type[])", file="SubscriptionDataReader.cs", label="Entry System.Type.GetMethod(string, System.Type[])", span="0-0"];
m2_106 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(System.Collections.Generic.SortedDictionary<System.DateTime, string>, System.DateTime)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(System.Collections.Generic.SortedDictionary<System.DateTime, string>, System.DateTime)", span="176-176"];
m2_32 [cluster="System.Func<T, TResult>.Invoke(T)", file="SubscriptionDataReader.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m2_98 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", span="382-382"];
m2_99 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="SubscriptionDataReader.cs", label="_mappedSymbol = SubscriptionAdjustment.GetMappedSymbol(_symbolMap, date)", span="385-385"];
m2_100 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="SubscriptionDataReader.cs", label="_priceFactor = SubscriptionAdjustment.GetTimePriceFactor(_priceFactors, date)", span="386-386"];
m2_101 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="SubscriptionDataReader.cs", label=Exception, span="388-388"];
m2_103 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="SubscriptionDataReader.cs", label="_config.SetPriceScaleFactor(_priceFactor)", span="392-392"];
m2_102 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="SubscriptionDataReader.cs", label="Log.Error(''SubscriptionDataReader.UpdateScaleFactors(): '' + err.Message)", span="390-390"];
m2_104 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="SubscriptionDataReader.cs", label="_config.SetMappedSymbol(_mappedSymbol)", span="393-393"];
m2_105 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="SubscriptionDataReader.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", span="382-382"];
m2_157 [cluster="System.DateTime.ToShortDateString()", file="SubscriptionDataReader.cs", label="Entry System.DateTime.ToShortDateString()", span="0-0"];
m2_236 [cluster="System.Reflection.MethodBase.Invoke(object, object[])", file="SubscriptionDataReader.cs", label="Entry System.Reflection.MethodBase.Invoke(object, object[])", span="0-0"];
m2_110 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MarketOpen(System.DateTime)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.MarketOpen(System.DateTime)", span="401-401"];
m2_111 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MarketOpen(System.DateTime)", file="SubscriptionDataReader.cs", label="return _security.Exchange.DateTimeIsOpen(time);", span="403-403"];
m2_112 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MarketOpen(System.DateTime)", file="SubscriptionDataReader.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.MarketOpen(System.DateTime)", span="401-401"];
m2_153 [cluster="QuantConnect.Securities.SecurityExchange.DateIsOpen(System.DateTime)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Securities.SecurityExchange.DateIsOpen(System.DateTime)", span="163-163"];
m2_41 [cluster="System.Collections.Generic.SortedDictionary<TKey, TValue>.SortedDictionary()", file="SubscriptionDataReader.cs", label="Entry System.Collections.Generic.SortedDictionary<TKey, TValue>.SortedDictionary()", span="0-0"];
m2_156 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", span="521-521"];
m2_159 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="string cache = ''./cache/data''", span="524-524"];
m2_165 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="var filename = source.ToMD5() + source.GetExtension()", span="531-531"];
m2_170 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="var uri = new Uri(source, UriKind.RelativeOrAbsolute)", span="540-540"];
m2_173 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="client.DownloadFile(source, location)", span="549-549"];
m2_179 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="File.Exists(source)", span="564-564"];
m2_180 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="source.GetExtension() == ''.zip''", span="566-566"];
m2_181 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="var sr = Compression.Unzip(source)", span="569-569"];
m2_185 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="reader = new SubscriptionStreamReader(source, _feedEndpoint)", span="576-576"];
m2_186 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="Log.Trace(''SubscriptionDataReader.GetReader(): Could not find QC Data, skipped: '' + source)", span="581-581"];
m2_190 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="reader = new SubscriptionStreamReader(source, _feedEndpoint)", span="589-589"];
m2_160 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="SubscriptionStreamReader reader = null", span="525-525"];
m2_161 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="!Directory.Exists(cache)", span="526-526"];
m2_162 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="Directory.CreateDirectory(cache)", span="526-526"];
m2_163 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="Directory.EnumerateFiles(cache)", span="527-527"];
m2_166 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="var location = cache + @''/'' + filename", span="532-532"];
m2_164 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="File.Delete(file)", span="527-527"];
m2_167 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label=_feedEndpoint, span="535-535"];
m2_174 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="source = location", span="552-552"];
m2_168 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="DataFeedEndpoint.FileSystem", span="537-537"];
m2_189 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="DataFeedEndpoint.LiveTrading", span="588-588"];
m2_169 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="DataFeedEndpoint.Backtesting", span="538-538"];
m2_171 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="uri.IsAbsoluteUri && !uri.IsLoopback", span="543-543"];
m2_172 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="var client = new WebClient()", span="547-547"];
m2_175 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label=Exception, span="555-555"];
m2_176 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="Engine.ResultHandler.ErrorMessage(''Error downloading custom data source file, skipped: '' + source + '' Err: '' + err.Message, err.StackTrace)", span="557-557"];
m2_177 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="Engine.ResultHandler.SamplePerformance(_date.Date, 0)", span="558-558"];
m2_178 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="return null;", span="559-559"];
m2_182 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="sr == null", span="570-570"];
m2_184 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="reader = new SubscriptionStreamReader(sr, _feedEndpoint)", span="571-571"];
m2_183 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="return null;", span="570-570"];
m2_187 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="Engine.ResultHandler.SamplePerformance(_date.Date, 0)", span="582-582"];
m2_188 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="return null;", span="583-583"];
m2_191 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="return reader;", span="593-593"];
m2_192 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="SubscriptionDataReader.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", span="521-521"];
m2_108 [cluster="QuantConnect.Data.SubscriptionDataConfig.SetPriceScaleFactor(decimal)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Data.SubscriptionDataConfig.SetPriceScaleFactor(decimal)", span="130-130"];
m2_195 [cluster="System.IO.Directory.EnumerateFiles(string)", file="SubscriptionDataReader.cs", label="Entry System.IO.Directory.EnumerateFiles(string)", span="0-0"];
m2_38 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", span="92-92"];
m2_117 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Reset()", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.Reset()", span="421-421"];
m2_118 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Reset()", file="SubscriptionDataReader.cs", label="throw new NotImplementedException(''Reset method not implemented. Assumes loop will only be used once.'');", span="423-423"];
m2_119 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Reset()", file="SubscriptionDataReader.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.Reset()", span="421-421"];
m2_36 [cluster="QuantConnect.Configuration.Config.Get(string, string)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="90-90"];
m2_39 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", span="119-119"];
m2_92 [cluster="QuantConnect.Lean.Engine.Results.IResultHandler.RuntimeError(string, string)", file="SubscriptionDataReader.cs", label="Entry QuantConnect.Lean.Engine.Results.IResultHandler.RuntimeError(string, string)", span="121-121"];
m2_237 [file="SubscriptionDataReader.cs", label="QuantConnect.Lean.Engine.SubscriptionDataReader", span=""];
m3_0 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.HasScalingFactors(string)", file="SubscriptionScaling.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.HasScalingFactors(string)", span="59-59"];
m3_1 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.HasScalingFactors(string)", file="SubscriptionScaling.cs", label="File.Exists(DataFolder + ''equity/factor_files/'' + symbol.ToLower() + ''.csv'')", span="62-62"];
m3_2 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.HasScalingFactors(string)", file="SubscriptionScaling.cs", label="return true;", span="64-64"];
m3_3 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.HasScalingFactors(string)", file="SubscriptionScaling.cs", label="return false;", span="66-66"];
m3_56 [cluster="QuantConnect.Logging.Log.Error(string, bool)", file="SubscriptionScaling.cs", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="85-85"];
m3_32 [cluster="QuantConnect.Time.ParseDate(string)", file="SubscriptionScaling.cs", label="Entry QuantConnect.Time.ParseDate(string)", span="117-117"];
m3_28 [cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", file="SubscriptionScaling.cs", label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0"];
m3_30 [cluster="System.IO.StreamReader.ReadLine()", file="SubscriptionScaling.cs", label="Entry System.IO.StreamReader.ReadLine()", span="0-0"];
m3_34 [cluster="System.Collections.Generic.SortedDictionary<TKey, TValue>.Add(TKey, TValue)", file="SubscriptionScaling.cs", label="Entry System.Collections.Generic.SortedDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m3_46 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(string, string, System.DateTime)", file="SubscriptionScaling.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(string, string, System.DateTime)", span="149-149"];
m3_48 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(string, string, System.DateTime)", file="SubscriptionScaling.cs", label="var symbolMapTable = GetMapTable(symbol)", span="155-155"];
m3_47 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(string, string, System.DateTime)", file="SubscriptionScaling.cs", label="var mappedSymbol = symbol", span="151-151"];
m3_49 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(string, string, System.DateTime)", file="SubscriptionScaling.cs", label="symbolMapTable.Keys", span="157-157"];
m3_51 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(string, string, System.DateTime)", file="SubscriptionScaling.cs", label="mappedSymbol = symbolMapTable[splitDate]", span="160-160"];
m3_50 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(string, string, System.DateTime)", file="SubscriptionScaling.cs", label="splitDate < searchDate", span="159-159"];
m3_54 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(string, string, System.DateTime)", file="SubscriptionScaling.cs", label="return mappedSymbol;", span="167-167"];
m3_52 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(string, string, System.DateTime)", file="SubscriptionScaling.cs", label=Exception, span="163-163"];
m3_53 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(string, string, System.DateTime)", file="SubscriptionScaling.cs", label="Log.Error(''GetMappedTick(): '' + err.Message)", span="165-165"];
m3_55 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(string, string, System.DateTime)", file="SubscriptionScaling.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(string, string, System.DateTime)", span="149-149"];
m3_26 [cluster="System.Collections.Generic.SortedDictionary<TKey, TValue>.SortedDictionary()", file="SubscriptionScaling.cs", label="Entry System.Collections.Generic.SortedDictionary<TKey, TValue>.SortedDictionary()", span="0-0"];
m3_6 [cluster="System.IO.File.Exists(string)", file="SubscriptionScaling.cs", label="Entry System.IO.File.Exists(string)", span="0-0"];
m3_27 [cluster="System.IO.File.ReadAllBytes(string)", file="SubscriptionScaling.cs", label="Entry System.IO.File.ReadAllBytes(string)", span="0-0"];
m3_31 [cluster="string.Split(params char[])", file="SubscriptionScaling.cs", label="Entry string.Split(params char[])", span="0-0"];
m3_4 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.HasScalingFactors(string)", file="SubscriptionScaling.cs", label="QuantConnect.Lean.Engine.DataFeeds.CreateStreamReaderErrorEventArgs", span=""];
m3_15 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", file="SubscriptionScaling.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", span="93-93"];
m3_23 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", color=green, community=0, file="SubscriptionScaling.cs", label="factorTable.Add(Time.ParseDate(csv[0]), Convert.ToDecimal(csv[1], CultureInfo.InvariantCulture) * Convert.ToDecimal(csv[2], CultureInfo.InvariantCulture))", prediction=0, span="107-107"];
m3_16 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", file="SubscriptionScaling.cs", label="var factorTable = new SortedDictionary<DateTime, decimal>()", span="96-96"];
m3_22 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", file="SubscriptionScaling.cs", label="var csv = line.Split(',')", span="106-106"];
m3_19 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", file="SubscriptionScaling.cs", label="!stream.EndOfStream", span="101-101"];
m3_17 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", file="SubscriptionScaling.cs", label="var mapFile = File.ReadAllBytes(DataFolder + ''equity/factor_files/'' + symbol.ToLower() + ''.csv'')", span="97-97"];
m3_24 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", file="SubscriptionScaling.cs", label="return factorTable;", span="110-110"];
m3_20 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", file="SubscriptionScaling.cs", label="var line = stream.ReadLine()", span="103-103"];
m3_21 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", file="SubscriptionScaling.cs", label="line == null", span="104-104"];
m3_18 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", file="SubscriptionScaling.cs", label="var stream = new StreamReader(new MemoryStream(mapFile))", span="99-99"];
m3_25 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", file="SubscriptionScaling.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", span="93-93"];
m3_29 [cluster="System.IO.MemoryStream.MemoryStream(byte[])", file="SubscriptionScaling.cs", label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0"];
m3_5 [cluster="string.ToLower()", file="SubscriptionScaling.cs", label="Entry string.ToLower()", span="0-0"];
m3_33 [cluster="System.Convert.ToDecimal(string, System.IFormatProvider)", file="SubscriptionScaling.cs", label="Entry System.Convert.ToDecimal(string, System.IFormatProvider)", span="0-0"];
m3_35 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", file="SubscriptionScaling.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", span="120-120"];
m3_43 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", file="SubscriptionScaling.cs", label="symbolMapTable.Add(Time.ParseDate(csv[0]), csv[1])", span="134-134"];
m3_36 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", file="SubscriptionScaling.cs", label="var symbolMapTable = new SortedDictionary<DateTime, string>()", span="122-122"];
m3_42 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", file="SubscriptionScaling.cs", label="var csv = line.Split(',')", span="133-133"];
m3_39 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", file="SubscriptionScaling.cs", label="!stream.EndOfStream", span="128-128"];
m3_37 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", file="SubscriptionScaling.cs", label="var mapFile = File.ReadAllBytes(DataFolder + ''equity/map_files/'' + symbol.ToLower() + ''.csv'')", span="123-123"];
m3_44 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", file="SubscriptionScaling.cs", label="return symbolMapTable;", span="138-138"];
m3_40 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", file="SubscriptionScaling.cs", label="var line = stream.ReadLine()", span="130-130"];
m3_41 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", file="SubscriptionScaling.cs", label="line == null", span="131-131"];
m3_38 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", file="SubscriptionScaling.cs", label="var stream = new StreamReader(new MemoryStream(mapFile))", span="126-126"];
m3_45 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", file="SubscriptionScaling.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", span="120-120"];
m4_128 [cluster="System.Math.Abs(decimal)", file="Test_LiveAlgorithm.cs", label="Entry System.Math.Abs(decimal)", span="0-0"];
m4_0 [cluster="QuantConnect.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>)", span="89-89"];
m4_1 [cluster="QuantConnect.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>)", file="Test_LiveAlgorithm.cs", label="var dictionary = new SortedDictionary<DateTime, decimal>()", span="91-91"];
m4_2 [cluster="QuantConnect.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>)", file="Test_LiveAlgorithm.cs", label=points, span="94-94"];
m4_4 [cluster="QuantConnect.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>)", file="Test_LiveAlgorithm.cs", label="!dictionary.ContainsKey(x)", span="97-97"];
m4_5 [cluster="QuantConnect.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>)", file="Test_LiveAlgorithm.cs", label="dictionary.Add(x, point.y)", span="99-99"];
m4_6 [cluster="QuantConnect.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>)", file="Test_LiveAlgorithm.cs", label="dictionary[x] = point.y", span="103-103"];
m4_9 [cluster="QuantConnect.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>)", file="Test_LiveAlgorithm.cs", label="return dictionary;", span="111-111"];
m4_3 [cluster="QuantConnect.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>)", file="Test_LiveAlgorithm.cs", label="var x = Time.UnixTimeStampToDateTime(point.x)", span="96-96"];
m4_7 [cluster="QuantConnect.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>)", file="Test_LiveAlgorithm.cs", label=Exception, span="107-107"];
m4_8 [cluster="QuantConnect.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>)", file="Test_LiveAlgorithm.cs", label="Log.Error(''Statistics.ChartPointToDictionary(): '' + err.Message)", span="109-109"];
m4_10 [cluster="QuantConnect.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.ChartPointToDictionary(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>)", span="89-89"];
m4_14 [cluster="System.Collections.Generic.SortedDictionary<TKey, TValue>.Add(TKey, TValue)", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.SortedDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m4_201 [cluster="Unk.Variance", file="Test_LiveAlgorithm.cs", label="Entry Unk.Variance", span=""];
m4_13 [cluster="System.Collections.Generic.SortedDictionary<TKey, TValue>.ContainsKey(TKey)", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.SortedDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m4_137 [cluster="QuantConnect.Statistics.Statistics.Alpha(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.Alpha(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>, double)", span="497-497"];
m4_208 [cluster="QuantConnect.Statistics.Statistics.Alpha(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="return AnnualPerformance(algoPerformance) - (riskFreeRate + Beta(algoPerformance, benchmarkPerformance) * (AnnualPerformance(benchmarkPerformance) - riskFreeRate));", span="499-499"];
m4_209 [cluster="QuantConnect.Statistics.Statistics.Alpha(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.Alpha(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>, double)", span="497-497"];
m4_204 [cluster="Unk.Sqrt", file="Test_LiveAlgorithm.cs", label="Entry Unk.Sqrt", span=""];
m4_207 [cluster="Unk.Covariance", file="Test_LiveAlgorithm.cs", label="Entry Unk.Covariance", span=""];
m4_143 [cluster="QuantConnect.Statistics.Statistics.TreynorRatio(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.TreynorRatio(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>, double)", span="547-547"];
m4_217 [cluster="QuantConnect.Statistics.Statistics.TreynorRatio(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="return (AnnualPerformance(algoPerformance) - riskFreeRate) / (Beta(algoPerformance, benchmarkPerformance));", span="549-549"];
m4_218 [cluster="QuantConnect.Statistics.Statistics.TreynorRatio(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.TreynorRatio(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>, double)", span="547-547"];
m4_123 [cluster="System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", span="0-0"];
m4_120 [cluster="System.Collections.Generic.IEnumerable<TSource>.LastOrDefault<TSource>()", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.LastOrDefault<TSource>()", span="0-0"];
m4_147 [cluster="lambda expression", file="Test_LiveAlgorithm.cs", label="Entry lambda expression", span="165-180"];
m4_145 [cluster="lambda expression", file="Test_LiveAlgorithm.cs", label="listPerformance.Add((double)(i / 100))", span="162-162"];
m4_151 [cluster="lambda expression", file="Test_LiveAlgorithm.cs", label="listBenchmark.Add((double)(deltaBenchmark))", span="172-172"];
m4_152 [cluster="lambda expression", file="Test_LiveAlgorithm.cs", label="listBenchmark.Add(0)", span="176-176"];
m4_148 [cluster="lambda expression", file="Test_LiveAlgorithm.cs", label="dt >= equity.Keys.FirstOrDefault().AddDays(-1) && dt < equity.Keys.LastOrDefault()", span="167-167"];
m4_144 [cluster="lambda expression", file="Test_LiveAlgorithm.cs", label="Entry lambda expression", span="162-162"];
m4_149 [cluster="lambda expression", file="Test_LiveAlgorithm.cs", label="Benchmark.ContainsKey(dtPrevious)", span="169-169"];
m4_150 [cluster="lambda expression", file="Test_LiveAlgorithm.cs", label="var deltaBenchmark = (Benchmark[dt] - Benchmark[dtPrevious]) / Benchmark[dtPrevious]", span="171-171"];
m4_146 [cluster="lambda expression", file="Test_LiveAlgorithm.cs", label="Exit lambda expression", span="162-162"];
m4_153 [cluster="lambda expression", file="Test_LiveAlgorithm.cs", label="dtPrevious = dt", span="178-178"];
m4_154 [cluster="lambda expression", file="Test_LiveAlgorithm.cs", label="Exit lambda expression", span="165-180"];
m4_15 [cluster="QuantConnect.Logging.Log.Error(string, bool)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="104-104"];
m4_12 [cluster="QuantConnect.Time.UnixTimeStampToDateTime(double)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Time.UnixTimeStampToDateTime(double)", span="69-69"];
m4_133 [cluster="QuantConnect.Statistics.Statistics.SharpeRatio(System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.SharpeRatio(System.Collections.Generic.List<double>, double)", span="535-535"];
m4_215 [cluster="QuantConnect.Statistics.Statistics.SharpeRatio(System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="return (AnnualPerformance(algoPerformance) - riskFreeRate) / (AnnualStandardDeviation(algoPerformance));", span="537-537"];
m4_216 [cluster="QuantConnect.Statistics.Statistics.SharpeRatio(System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.SharpeRatio(System.Collections.Generic.List<double>, double)", span="535-535"];
m4_194 [cluster="System.Math.Pow(double, double)", file="Test_LiveAlgorithm.cs", label="Entry System.Math.Pow(double, double)", span="0-0"];
m4_142 [cluster="QuantConnect.Statistics.Statistics.TrackingError(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.TrackingError(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", span="509-509"];
m4_210 [cluster="QuantConnect.Statistics.Statistics.TrackingError(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", file="Test_LiveAlgorithm.cs", label="return Math.Sqrt(AnnualVariance(algoPerformance) - 2 * Correlation.Pearson(algoPerformance, benchmarkPerformance) * AnnualStandardDeviation(algoPerformance) * AnnualStandardDeviation(benchmarkPerformance) + AnnualVariance(benchmarkPerformance));", span="511-511"];
m4_211 [cluster="QuantConnect.Statistics.Statistics.TrackingError(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.TrackingError(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", span="509-509"];
m4_126 [cluster="System.Collections.Generic.IEnumerable<int>.Sum()", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.IEnumerable<int>.Sum()", span="0-0"];
m4_121 [cluster="System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", span="0-0"];
m4_16 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", span="124-124"];
m4_17 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="double riskFreeRate = 0", span="127-127"];
m4_29 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal profitLossValue = 0, runningCash = startingCash", span="139-139"];
m4_46 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="performance = ChartPointToDictionary(pointsPerformance)", span="160-160"];
m4_47 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="equity = ChartPointToDictionary(pointsEquity)", span="161-161"];
m4_61 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="algoCompoundingPerformance = CompoundingAnnualPerformance(startingCash, equity.Values.LastOrDefault(), (decimal)fractionOfYears)", span="211-211"];
m4_62 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="finalBenchmarkCash = ((Benchmark.Values.Last() - Benchmark.Values.First()) / Benchmark.Values.First()) * startingCash", span="212-212"];
m4_63 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="benchCompoundingPerformance = CompoundingAnnualPerformance(startingCash, finalBenchmarkCash, (decimal)fractionOfYears)", span="213-213"];
m4_66 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="profitLoss.Keys", span="223-223"];
m4_67 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="profitLossValue = profitLoss[closedTrade]", span="225-225"];
m4_85 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="profitLoss.Keys.Count > 0", span="268-268"];
m4_89 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="totalNetProfit = (equity.Values.LastOrDefault() / startingCash) - 1", span="273-273"];
m4_109 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="statistics = new Dictionary<string, string>() { \r\n                    { ''Total Trades'', Math.Round(totalTrades, 0).ToString() },\r\n                    { ''Average Win'', Math.Round(averageWin * 100, 2) + ''%''  },\r\n                    { ''Average Loss'', Math.Round(averageLoss * 100, 2) + ''%'' },\r\n                    { ''Compounding Annual Return'', Math.Round(algoCompoundingPerformance * 100, 3) + ''%'' },\r\n                    { ''Drawdown'', (DrawdownPercent(equity, 3) * 100) + ''%'' },\r\n                    { ''Expectancy'', Math.Round((winRate * averageWinRatio) - (lossRate), 3).ToString() },\r\n                    { ''Net Profit'', Math.Round(totalNetProfit * 100, 3) + ''%''},\r\n                    { ''Sharpe Ratio'', Math.Round(SharpeRatio(listPerformance, riskFreeRate), 3).ToString() },\r\n                    { ''Loss Rate'', Math.Round(lossRate * 100) + ''%'' },\r\n                    { ''Win Rate'', Math.Round(winRate * 100) + ''%'' }, \r\n                    { ''Profit-Loss Ratio'', profitLossRatioHuman },\r\n                    { ''Alpha'', Math.Round(Alpha(listPerformance, listBenchmark, riskFreeRate), 3).ToString() },\r\n                    { ''Beta'', Math.Round(Beta(listPerformance, listBenchmark), 3).ToString() },\r\n                    { ''Annual Standard Deviation'', Math.Round(AnnualStandardDeviation(listPerformance, tradingDaysPerYear), 3).ToString() },\r\n                    { ''Annual Variance'', Math.Round(AnnualVariance(listPerformance, tradingDaysPerYear), 3).ToString() },\r\n                    { ''Information Ratio'', Math.Round(InformationRatio(listPerformance, listBenchmark), 3).ToString() },\r\n                    { ''Tracking Error'', Math.Round(TrackingError(listPerformance, listBenchmark), 3).ToString() },\r\n                    { ''Treynor Ratio'', Math.Round(TreynorRatio(listPerformance, listBenchmark, riskFreeRate), 3).ToString() }\r\n                }", span="317-336"];
m4_18 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal totalTrades = 0", span="128-128"];
m4_19 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal totalWins = 0", span="129-129"];
m4_20 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal totalLosses = 0", span="130-130"];
m4_21 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal averageWin = 0", span="131-131"];
m4_22 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal averageLoss = 0", span="132-132"];
m4_105 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="var profitLossRatio = Statistics.ProfitLossRatio(averageWin, averageLoss)", span="312-312"];
m4_23 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal averageWinRatio = 0", span="133-133"];
m4_24 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal winRate = 0", span="134-134"];
m4_25 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal lossRate = 0", span="135-135"];
m4_26 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal totalNetProfit = 0", span="136-136"];
m4_27 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal averageAnnualReturn = 0", span="137-137"];
m4_28 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="double fractionOfYears = 1", span="138-138"];
m4_30 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal algoCompoundingPerformance = 0", span="140-140"];
m4_79 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="annualWinTotal[year] += profitLossValue / runningCash", span="247-247"];
m4_81 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="annualLossTotal[year] += profitLossValue / runningCash", span="252-252"];
m4_82 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="runningCash += profitLossValue", span="256-256"];
m4_31 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal finalBenchmarkCash = 0", span="141-141"];
m4_32 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="decimal benchCompoundingPerformance = 0", span="142-142"];
m4_33 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="var years = new List<int>()", span="143-143"];
m4_34 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="var annualTrades = new SortedDictionary<int, int>()", span="144-144"];
m4_69 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="!years.Contains(year)", span="229-229"];
m4_70 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="years.Add(year)", span="232-232"];
m4_83 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label=years, span="260-260"];
m4_35 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="var annualWins = new SortedDictionary<int, int>()", span="145-145"];
m4_71 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="annualTrades.Add(year, 0)", span="233-233"];
m4_76 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="annualTrades[year]++", span="241-241"];
m4_86 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="totalTrades = annualTrades.Values.Sum()", span="270-270"];
m4_36 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="var annualLosses = new SortedDictionary<int, int>()", span="146-146"];
m4_72 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="annualWins.Add(year, 0)", span="234-234"];
m4_78 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="annualWins[year]++", span="246-246"];
m4_87 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="totalWins = annualWins.Values.Sum()", span="271-271"];
m4_37 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="var annualLossTotal = new SortedDictionary<int, decimal>()", span="147-147"];
m4_74 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="annualLosses.Add(year, 0)", span="236-236"];
m4_80 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="annualLosses[year]++", span="251-251"];
m4_88 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="totalLosses = annualLosses.Values.Sum()", span="272-272"];
m4_38 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="var annualWinTotal = new SortedDictionary<int, decimal>()", span="148-148"];
m4_75 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="annualLossTotal.Add(year, 0)", span="237-237"];
m4_84 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="annualNetProfit[year] = (annualWinTotal[year] + annualLossTotal[year])", span="262-262"];
m4_96 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="averageLoss = annualLossTotal.Values.Sum() / totalLosses", span="291-291"];
m4_73 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="annualWinTotal.Add(year, 0)", span="235-235"];
m4_92 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="averageWin = annualWinTotal.Values.Sum() / totalWins", span="282-282"];
m4_49 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="Benchmark.Keys.ToList().ForEach(dt =>\r\n                {\r\n                    if (dt >= equity.Keys.FirstOrDefault().AddDays(-1) && dt < equity.Keys.LastOrDefault())\r\n                    {\r\n                        if (Benchmark.ContainsKey(dtPrevious))\r\n                        {\r\n                            var deltaBenchmark = (Benchmark[dt] - Benchmark[dtPrevious]) / Benchmark[dtPrevious];\r\n                            listBenchmark.Add((double)(deltaBenchmark));\r\n                        }\r\n                        else\r\n                        {\r\n                            listBenchmark.Add(0);\r\n                        }\r\n                        dtPrevious = dt;\r\n                    }\r\n                })", span="165-180"];
m4_43 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="var listBenchmark = new List<double>()", span="153-153"];
m4_48 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="performance.Values.ToList().ForEach(i => listPerformance.Add((double)(i / 100)))", span="162-162"];
m4_50 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="listPerformance.Count < listBenchmark.Count", span="183-183"];
m4_51 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="listPerformance.Add(0)", span="185-185"];
m4_53 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="listPerformance.Count > listBenchmark.Count", span="188-188"];
m4_44 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="var equity = new SortedDictionary<DateTime, decimal>()", span="154-154"];
m4_54 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="listBenchmark.Add(0)", span="190-190"];
m4_45 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="var performance = new SortedDictionary<DateTime, decimal>()", span="155-155"];
m4_58 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="fractionOfYears = (equity.Keys.LastOrDefault() - equity.Keys.FirstOrDefault()).TotalDays / 365", span="202-202"];
m4_52 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="Log.Error(''Statistics.Generate(): Padded Performance'')", span="186-186"];
m4_56 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label=Exception, span="194-194"];
m4_55 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="Log.Error(''Statistics.Generate(): Padded Benchmark'')", span="191-191"];
m4_57 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="Log.Error(''Statistics.Generate.Dic-Array Convert: '' + err.Message)", span="196-196"];
m4_59 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label=Exception, span="204-204"];
m4_60 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="Log.Error(''Statistics.Generate(): Fraction of Years: '' + err.Message)", span="206-206"];
m4_64 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label=Exception, span="215-215"];
m4_65 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="Log.Error(''Statistics.Generate(): Compounding: '' + err.Message)", span="217-217"];
m4_68 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="var year = closedTrade.Year", span="228-228"];
m4_77 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="profitLossValue > 0", span="244-244"];
m4_103 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label=Exception, span="307-307"];
m4_98 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="totalTrades == 0", span="294-294"];
m4_101 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="winRate = Math.Round(totalWins / totalTrades, 5)", span="301-301"];
m4_102 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="lossRate = Math.Round(totalLosses / totalTrades, 5)", span="302-302"];
m4_90 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="totalWins == 0", span="276-276"];
m4_93 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="totalLosses == 0", span="284-284"];
m4_91 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="averageWin = 0", span="278-278"];
m4_97 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="averageWinRatio = Math.Abs(averageWin / averageLoss)", span="292-292"];
m4_94 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="averageLoss = 0", span="286-286"];
m4_95 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="averageWinRatio = 0", span="287-287"];
m4_99 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="winRate = 0", span="296-296"];
m4_100 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="lossRate = 0", span="297-297"];
m4_104 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="Log.Error(''Statistics.RunOrders(): Second Half: '' + err.Message)", span="309-309"];
m4_106 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="var profitLossRatioHuman = profitLossRatio.ToString()", span="313-313"];
m4_107 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="profitLossRatio == -1", span="314-314"];
m4_108 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="profitLossRatioHuman = ''0''", span="314-314"];
m4_110 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label=Exception, span="338-338"];
m4_112 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="return statistics;", span="342-342"];
m4_111 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="Log.Error(''QC.Statistics.RunOrders(): '' + err.Message + err.InnerException + err.TargetSite)", span="340-340"];
m4_113 [cluster="QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.Generate(System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>, decimal, double)", span="124-124"];
m4_173 [cluster="System.Collections.Generic.IEnumerable<decimal>.Min()", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.IEnumerable<decimal>.Min()", span="0-0"];
m4_125 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m4_139 [cluster="QuantConnect.Statistics.Statistics.AnnualStandardDeviation(System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.AnnualStandardDeviation(System.Collections.Generic.List<double>, double)", span="473-473"];
m4_202 [cluster="QuantConnect.Statistics.Statistics.AnnualStandardDeviation(System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="return Math.Sqrt(performance.Variance() * tradingDaysPerYear);", span="475-475"];
m4_203 [cluster="QuantConnect.Statistics.Statistics.AnnualStandardDeviation(System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.AnnualStandardDeviation(System.Collections.Generic.List<double>, double)", span="473-473"];
m4_212 [cluster="Unk.Pearson", file="Test_LiveAlgorithm.cs", label="Entry Unk.Pearson", span=""];
m4_117 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m4_122 [cluster="QuantConnect.Statistics.Statistics.CompoundingAnnualPerformance(decimal, decimal, decimal)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.CompoundingAnnualPerformance(decimal, decimal, decimal)", span="434-434"];
m4_192 [cluster="QuantConnect.Statistics.Statistics.CompoundingAnnualPerformance(decimal, decimal, decimal)", file="Test_LiveAlgorithm.cs", label="return (decimal)Math.Pow((double)finalCapital / (double)startingCapital, (1 / (double)years)) - 1;", span="436-436"];
m4_193 [cluster="QuantConnect.Statistics.Statistics.CompoundingAnnualPerformance(decimal, decimal, decimal)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.CompoundingAnnualPerformance(decimal, decimal, decimal)", span="434-434"];
m4_198 [cluster="System.Collections.Generic.IEnumerable<double>.Average()", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.IEnumerable<double>.Average()", span="0-0"];
m4_141 [cluster="QuantConnect.Statistics.Statistics.InformationRatio(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.InformationRatio(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", span="523-523"];
m4_213 [cluster="QuantConnect.Statistics.Statistics.InformationRatio(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", file="Test_LiveAlgorithm.cs", label="return (AnnualPerformance(algoPerformance) - AnnualPerformance(benchmarkPerformance)) / (TrackingError(algoPerformance, benchmarkPerformance));", span="525-525"];
m4_214 [cluster="QuantConnect.Statistics.Statistics.InformationRatio(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.InformationRatio(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", span="523-523"];
m4_129 [cluster="System.Math.Round(decimal, int)", file="Test_LiveAlgorithm.cs", label="Entry System.Math.Round(decimal, int)", span="0-0"];
m4_134 [cluster="System.Math.Round(double, int)", file="Test_LiveAlgorithm.cs", label="Entry System.Math.Round(double, int)", span="0-0"];
m4_132 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", span="363-363"];
m4_160 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="var dd = 0m", span="365-365"];
m4_161 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="var lPrices = equityOverTime.Values.ToList()", span="368-368"];
m4_168 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="dd = Math.Round(Math.Abs(lDrawdowns.Min()), rounding)", span="376-376"];
m4_162 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="var lDrawdowns = new List<decimal>()", span="369-369"];
m4_163 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="var high = lPrices[0]", span="370-370"];
m4_164 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label=lPrices, span="371-371"];
m4_167 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="lDrawdowns.Add((price/high) - 1)", span="374-374"];
m4_165 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="price >= high", span="373-373"];
m4_166 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="high = price", span="373-373"];
m4_169 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label=Exception, span="378-378"];
m4_171 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="return dd;", span="382-382"];
m4_170 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="Log.Error(''Statistics.DrawdownPercentage(): '' + err.Message)", span="380-380"];
m4_172 [cluster="QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.DrawdownPercent(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", span="363-363"];
m4_118 [cluster="System.Collections.Generic.List<T>.ForEach(System.Action<T>)", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.List<T>.ForEach(System.Action<T>)", span="0-0"];
m4_115 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m4_127 [cluster="System.Collections.Generic.IEnumerable<decimal>.Sum()", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.IEnumerable<decimal>.Sum()", span="0-0"];
m4_174 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", span="391-391"];
m4_175 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="var priceMaximum = 0", span="394-394"];
m4_178 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="var lPrices = equityOverTime.Values.ToList()", span="400-400"];
m4_187 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="return Math.Round((lPrices[previousMaximum] - lPrices[previousMinimum]), rounding);", span="417-417"];
m4_176 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="var previousMinimum = 0", span="395-395"];
m4_181 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="lPrices[id] >= lPrices[priceMaximum]", span="404-404"];
m4_183 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="(lPrices[priceMaximum] - lPrices[id]) > (lPrices[previousMaximum] - lPrices[previousMinimum])", span="410-410"];
m4_184 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="previousMaximum = priceMaximum", span="412-412"];
m4_177 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="var previousMaximum = 0", span="396-396"];
m4_179 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="var id = 0", span="402-402"];
m4_180 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="id < lPrices.Count", span="402-402"];
m4_182 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="priceMaximum = id", span="406-406"];
m4_185 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="previousMinimum = id", span="413-413"];
m4_186 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="id++", span="402-402"];
m4_188 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label=Exception, span="419-419"];
m4_189 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="Log.Error(''Statistics.DrawdownValue(): '' + err.Message)", span="421-421"];
m4_190 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="return 0;", span="423-423"];
m4_191 [cluster="QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.DrawdownValue(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, int)", span="391-391"];
m4_136 [cluster="System.Math.Round(decimal)", file="Test_LiveAlgorithm.cs", label="Entry System.Math.Round(decimal)", span="0-0"];
m4_138 [cluster="QuantConnect.Statistics.Statistics.Beta(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.Beta(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", span="485-485"];
m4_205 [cluster="QuantConnect.Statistics.Statistics.Beta(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", file="Test_LiveAlgorithm.cs", label="return algoPerformance.Covariance(benchmarkPerformance) / benchmarkPerformance.Variance();", span="487-487"];
m4_206 [cluster="QuantConnect.Statistics.Statistics.Beta(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.Beta(System.Collections.Generic.List<double>, System.Collections.Generic.List<double>)", span="485-485"];
m4_119 [cluster="System.Collections.Generic.List<T>.Add(T)", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m4_130 [cluster="QuantConnect.Statistics.Statistics.ProfitLossRatio(decimal, decimal)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.ProfitLossRatio(decimal, decimal)", span="351-351"];
m4_156 [cluster="QuantConnect.Statistics.Statistics.ProfitLossRatio(decimal, decimal)", file="Test_LiveAlgorithm.cs", label="averageLoss == 0", span="353-353"];
m4_158 [cluster="QuantConnect.Statistics.Statistics.ProfitLossRatio(decimal, decimal)", file="Test_LiveAlgorithm.cs", label="return Math.Round(averageWin / Math.Abs(averageLoss), 2);", span="354-354"];
m4_157 [cluster="QuantConnect.Statistics.Statistics.ProfitLossRatio(decimal, decimal)", file="Test_LiveAlgorithm.cs", label="return -1;", span="353-353"];
m4_159 [cluster="QuantConnect.Statistics.Statistics.ProfitLossRatio(decimal, decimal)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.ProfitLossRatio(decimal, decimal)", span="351-351"];
m4_131 [cluster="decimal.ToString()", file="Test_LiveAlgorithm.cs", label="Entry decimal.ToString()", span="0-0"];
m4_140 [cluster="QuantConnect.Statistics.Statistics.AnnualVariance(System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.AnnualVariance(System.Collections.Generic.List<double>, double)", span="458-458"];
m4_199 [cluster="QuantConnect.Statistics.Statistics.AnnualVariance(System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="return (performance.Variance())*tradingDaysPerYear;", span="460-460"];
m4_200 [cluster="QuantConnect.Statistics.Statistics.AnnualVariance(System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.AnnualVariance(System.Collections.Generic.List<double>, double)", span="458-458"];
m4_11 [cluster="System.Collections.Generic.SortedDictionary<TKey, TValue>.SortedDictionary()", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.SortedDictionary<TKey, TValue>.SortedDictionary()", span="0-0"];
m4_195 [cluster="QuantConnect.Statistics.Statistics.AnnualPerformance(System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="Entry QuantConnect.Statistics.Statistics.AnnualPerformance(System.Collections.Generic.List<double>, double)", span="446-446"];
m4_196 [cluster="QuantConnect.Statistics.Statistics.AnnualPerformance(System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="return performance.Average() * tradingDaysPerYear;", span="448-448"];
m4_197 [cluster="QuantConnect.Statistics.Statistics.AnnualPerformance(System.Collections.Generic.List<double>, double)", file="Test_LiveAlgorithm.cs", label="Exit QuantConnect.Statistics.Statistics.AnnualPerformance(System.Collections.Generic.List<double>, double)", span="446-446"];
m4_135 [cluster="double.ToString()", file="Test_LiveAlgorithm.cs", label="Entry double.ToString()", span="0-0"];
m4_124 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="Test_LiveAlgorithm.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m4_116 [cluster="System.DateTime.DateTime()", file="Test_LiveAlgorithm.cs", label="Entry System.DateTime.DateTime()", span="0-0"];
m4_155 [cluster="System.DateTime.AddDays(double)", file="Test_LiveAlgorithm.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m4_219 [file="Test_LiveAlgorithm.cs", label=listPerformance, span=""];
m4_220 [file="Test_LiveAlgorithm.cs", label=equity, span=""];
m4_221 [file="Test_LiveAlgorithm.cs", label=dtPrevious, span=""];
m4_222 [file="Test_LiveAlgorithm.cs", label=listBenchmark, span=""];
m6_20 [cluster="System.Enum.Parse(System.Type, string)", file="Tick.cs", label="Entry System.Enum.Parse(System.Type, string)", span="0-0"];
m6_27 [cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)", file="Tick.cs", label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98"];
m6_0 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="Entry QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", span="29-29"];
m6_1 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="resolution.IsNullOrEmpty() || tickers.IsNullOrEmpty()", span="31-31"];
m6_6 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="var castResolution = (Resolution)Enum.Parse(typeof(Resolution), resolution)", span="41-41"];
m6_9 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label=tickers, span="47-47"];
m6_11 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="var data = downloader.Get(pairObject, castResolution, startDate, endDate)", span="51-51"];
m6_2 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="Console.WriteLine(''KrakenDownloader ERROR: '--tickers=' or '--resolution=' parameter is missing'')", span="33-33"];
m6_3 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="Console.WriteLine(''--tickers=eg XXBTZUSD,XETHZUSD'')", span="34-34"];
m6_4 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="Console.WriteLine(''--resolution=Minute/Hour/Daily/Tick'')", span="35-35"];
m6_5 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="Environment.Exit(1)", span="36-36"];
m6_7 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="var dataDirectory = Config.Get(''data-directory'', ''../../../Data'')", span="44-44"];
m6_12 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="var writer = new LeanDataWriter(castResolution, pairObject, dataDirectory)", span="54-54"];
m6_8 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="var downloader = new KrakenDataDownloader()", span="45-45"];
m6_10 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="var pairObject = Symbol.Create(pair, SecurityType.Crypto, Market.Kraken)", span="50-50"];
m6_14 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label=Exception, span="58-58"];
m6_13 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="writer.Write(data)", span="55-55"];
m6_15 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="Log.Error(err)", span="60-60"];
m6_16 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", file="Tick.cs", label="Exit QuantConnect.ToolBox.KrakenDownloader.KrakenDownloaderProgram.KrakenDownloader(System.Collections.Generic.IList<string>, string, System.DateTime, System.DateTime)", span="29-29"];
m6_25 [cluster="QuantConnect.ToolBox.LeanDataWriter.LeanDataWriter(QuantConnect.Resolution, QuantConnect.Symbol, string, QuantConnect.TickType)", file="Tick.cs", label="Entry QuantConnect.ToolBox.LeanDataWriter.LeanDataWriter(QuantConnect.Resolution, QuantConnect.Symbol, string, QuantConnect.TickType)", span="48-48"];
m6_24 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDataDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", file="Tick.cs", label="Entry QuantConnect.ToolBox.KrakenDownloader.KrakenDataDownloader.Get(QuantConnect.Symbol, QuantConnect.Resolution, System.DateTime, System.DateTime)", span="40-40"];
m6_26 [cluster="QuantConnect.ToolBox.LeanDataWriter.Write(System.Collections.Generic.IEnumerable<QuantConnect.Data.BaseData>)", file="Tick.cs", label="Entry QuantConnect.ToolBox.LeanDataWriter.Write(System.Collections.Generic.IEnumerable<QuantConnect.Data.BaseData>)", span="73-73"];
m6_22 [cluster="QuantConnect.ToolBox.KrakenDownloader.KrakenDataDownloader.KrakenDataDownloader()", file="Tick.cs", label="Entry QuantConnect.ToolBox.KrakenDownloader.KrakenDataDownloader.KrakenDataDownloader()", span="28-28"];
m6_23 [cluster="QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", file="Tick.cs", label="Entry QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", span="45-45"];
m6_17 [cluster="System.Collections.Generic.IEnumerable<T>.IsNullOrEmpty<T>()", file="Tick.cs", label="Entry System.Collections.Generic.IEnumerable<T>.IsNullOrEmpty<T>()", span="118-118"];
m6_19 [cluster="System.Environment.Exit(int)", file="Tick.cs", label="Entry System.Environment.Exit(int)", span="0-0"];
m6_21 [cluster="QuantConnect.Configuration.Config.Get(string, string)", file="Tick.cs", label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="137-137"];
n480 -> n5  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n29  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n39  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n105  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n110  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n125  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n144  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n164  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n169  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n172  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n195  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n202  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n205  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n225  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n247  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n273  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n301  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n355  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n379  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n399  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n480 -> n431  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerageTests", style=dashed];
n481 -> n56  [color=darkseagreen4, key=1, label=filledResetEvent, style=dashed];
n482 -> n58  [color=darkseagreen4, key=1, label=canceledResetEvent, style=dashed];
n483 -> n136  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n484 -> n153  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n485 -> n182  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n486 -> n216  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n487 -> n262  [color=darkseagreen4, key=1, label=orderedResetEvent, style=dashed];
n488 -> n264  [color=darkseagreen4, key=1, label=canceledResetEvent, style=dashed];
n489 -> n267  [color=darkseagreen4, key=1, label=order, style=dashed];
n490 -> n285  [color=darkseagreen4, key=1, label=orderFilledEventCount, style=dashed];
n490 -> n288  [color=darkseagreen4, key=1, label=orderFilledEventCount, style=dashed];
n491 -> n286  [color=darkseagreen4, key=1, label=orderFilledResetEvent, style=dashed];
n493 -> n320  [color=darkseagreen4, key=1, label=orderResetEvent, style=dashed];
n494 -> n367  [color=darkseagreen4, key=1, label=orderEventFired, style=dashed];
n495 -> n370  [color=darkseagreen4, key=1, label=cashBalanceUpdates, style=dashed];
n496 -> n371  [color=darkseagreen4, key=1, label=accountChangedFired, style=dashed];
n497 -> n389  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n498 -> n414  [color=darkseagreen4, key=1, label=orderEventFired, style=dashed];
n499 -> n417  [color=darkseagreen4, key=1, label=order, style=dashed];
n500 -> n417  [color=darkseagreen4, key=1, label=executions, style=dashed];
n500 -> n420  [color=darkseagreen4, key=1, label=executions, style=dashed];
n501 -> n423  [color=darkseagreen4, key=1, label=string, style=dashed];
n502 -> n440  [color=darkseagreen4, key=1, label=orderEventFired, style=dashed];
n503 -> n475  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n504 -> n478  [color=darkseagreen4, key=1, label=string, style=dashed];
n23 -> n58  [color=darkseagreen4, key=1, label=canceledResetEvent, style=dashed];
n23 -> n30  [color=darkseagreen4, key=1, label=canceledResetEvent, style=dashed];
n23 -> n31  [color=darkseagreen4, key=1, label=canceledResetEvent, style=dashed];
n24 -> n56  [color=darkseagreen4, key=1, label=filledResetEvent, style=dashed];
n25 -> n55  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n25 -> n57  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n34 -> n61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n35 -> n64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n37 -> n68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n37 -> n71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n54 -> n57  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n81 -> n83  [color=darkseagreen4, key=1, label=ib, style=dashed];
n91 -> n93  [color=darkseagreen4, key=1, label=ib, style=dashed];
n91 -> n95  [color=darkseagreen4, key=1, label=ib, style=dashed];
n91 -> n96  [color=darkseagreen4, key=1, label=ib, style=dashed];
n91 -> n97  [color=darkseagreen4, key=1, label=ib, style=dashed];
n103 -> n106  [color=darkseagreen4, key=1, label=ib, style=dashed];
n103 -> n111  [color=darkseagreen4, key=1, label=ib, style=dashed];
n104 -> n106  [color=darkseagreen4, key=1, label=order, style=dashed];
n107 -> n112  [color=darkseagreen4, key=1, label=brokerageID, style=dashed];
n109 -> n111  [color=darkseagreen4, key=1, label=order, style=dashed];
n109 -> n112  [color=darkseagreen4, key=1, label=order, style=dashed];
n121 -> n136  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n121 -> n127  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n122 -> n126  [color=darkseagreen4, key=1, label=ib, style=dashed];
n123 -> n134  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n124 -> n126  [color=darkseagreen4, key=1, label=order, style=dashed];
n131 -> n465  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.InteractiveBrokers.InteractiveBrokersBrokerage", style=dashed];
n131 -> n466  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n131 -> n475  [color=darkseagreen4, key=1, label="QuantConnect.Orders.Order", style=dashed];
n135 -> n137  [color=darkseagreen4, key=1, label=orderFilled, style=dashed];
n140 -> n153  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n140 -> n146  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n141 -> n145  [color=darkseagreen4, key=1, label=ib, style=dashed];
n142 -> n151  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n143 -> n145  [color=darkseagreen4, key=1, label=order, style=dashed];
n152 -> n154  [color=darkseagreen4, key=1, label=orderFilled, style=dashed];
n157 -> n182  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n157 -> n166  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n157 -> n167  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n157 -> n174  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n158 -> n165  [color=darkseagreen4, key=1, label=ib, style=dashed];
n158 -> n170  [color=darkseagreen4, key=1, label=ib, style=dashed];
n158 -> n173  [color=darkseagreen4, key=1, label=ib, style=dashed];
n161 -> n180  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n183 -> n185  [color=darkseagreen4, key=1, label=price, style=dashed];
n163 -> n165  [color=darkseagreen4, key=1, label=order, style=dashed];
n168 -> n170  [color=darkseagreen4, key=1, label=order, style=dashed];
n171 -> n173  [color=darkseagreen4, key=1, label=order, style=dashed];
n181 -> n185  [color=darkseagreen4, key=1, label=orderFilled, style=dashed];
n188 -> n216  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n188 -> n197  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n188 -> n198  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n188 -> n207  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n189 -> n196  [color=darkseagreen4, key=1, label=ib, style=dashed];
n189 -> n203  [color=darkseagreen4, key=1, label=ib, style=dashed];
n189 -> n206  [color=darkseagreen4, key=1, label=ib, style=dashed];
n214 -> n217  [color=darkseagreen4, key=1, label=fillPrice, style=dashed];
n194 -> n196  [color=darkseagreen4, key=1, label=order, style=dashed];
n201 -> n203  [color=darkseagreen4, key=1, label=order, style=dashed];
n204 -> n206  [color=darkseagreen4, key=1, label=order, style=dashed];
n213 -> n199  [color=darkseagreen4, key=1, label=orderFilled, style=dashed];
n213 -> n217  [color=darkseagreen4, key=1, label=orderFilled, style=dashed];
n215 -> n217  [color=darkseagreen4, key=1, label=delta, style=dashed];
n220 -> n226  [color=darkseagreen4, key=1, label=ib, style=dashed];
n220 -> n231  [color=darkseagreen4, key=1, label=ib, style=dashed];
n224 -> n226  [color=darkseagreen4, key=1, label=order, style=dashed];
n224 -> n231  [color=darkseagreen4, key=1, label=order, style=dashed];
n222 -> n238  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n222 -> n228  [color=darkseagreen4, key=1, label=filled, style=dashed];
n222 -> n232  [color=darkseagreen4, key=1, label=filled, style=dashed];
n239 -> n228  [color=darkseagreen4, key=1, label=filled, style=dashed];
n239 -> n232  [color=darkseagreen4, key=1, label=filled, style=dashed];
n242 -> n262  [color=darkseagreen4, key=1, label=orderedResetEvent, style=dashed];
n242 -> n249  [color=darkseagreen4, key=1, label=orderedResetEvent, style=dashed];
n243 -> n264  [color=darkseagreen4, key=1, label=canceledResetEvent, style=dashed];
n243 -> n252  [color=darkseagreen4, key=1, label=canceledResetEvent, style=dashed];
n245 -> n261  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n245 -> n263  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n244 -> n248  [color=darkseagreen4, key=1, label=ib, style=dashed];
n244 -> n251  [color=darkseagreen4, key=1, label=ib, style=dashed];
n246 -> n248  [color=darkseagreen4, key=1, label=order, style=dashed];
n246 -> n251  [color=darkseagreen4, key=1, label=order, style=dashed];
n246 -> n267  [color=darkseagreen4, key=1, label=order, style=dashed];
n254 -> n266  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n260 -> n263  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n271 -> n277  [color=darkseagreen4, key=1, label=ib, style=dashed];
n272 -> n277  [color=darkseagreen4, key=1, label=order, style=dashed];
n276 -> n284  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n276 -> n285  [color=darkseagreen4, key=1, label=orderFilledEventCount, style=dashed];
n276 -> n280  [color=darkseagreen4, key=1, label=orderFilledEventCount, style=dashed];
n275 -> n286  [color=darkseagreen4, key=1, label=orderFilledResetEvent, style=dashed];
n275 -> n278  [color=darkseagreen4, key=1, label=orderFilledResetEvent, style=dashed];
n285 -> n285  [color=darkseagreen4, key=1, label=orderFilledEventCount, style=dashed];
n285 -> n280  [color=darkseagreen4, key=1, label=orderFilledEventCount, style=dashed];
n285 -> n288  [color=darkseagreen4, key=1, label=orderFilledEventCount, style=dashed];
n290 -> n302  [color=darkseagreen4, key=1, label=ib, style=dashed];
n292 -> n315  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n292 -> n295  [color=darkseagreen4, key=1, label=previousHoldings, style=dashed];
n292 -> n308  [color=darkseagreen4, key=1, label=previousHoldings, style=dashed];
n298 -> n319  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n305 -> n322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n305 -> n308  [color=darkseagreen4, key=1, label=newHoldings, style=dashed];
n305 -> n309  [color=darkseagreen4, key=1, label=newHoldings, style=dashed];
n305 -> n310  [color=darkseagreen4, key=1, label=newHoldings, style=dashed];
n296 -> n307  [color=darkseagreen4, key=1, label=hasSymbol, style=dashed];
n297 -> n320  [color=darkseagreen4, key=1, label=orderResetEvent, style=dashed];
n297 -> n303  [color=darkseagreen4, key=1, label=orderResetEvent, style=dashed];
n299 -> n308  [color=darkseagreen4, key=1, label=quantity, style=dashed];
n299 -> n310  [color=darkseagreen4, key=1, label=quantity, style=dashed];
n300 -> n302  [color=darkseagreen4, key=1, label=order, style=dashed];
n327 -> n329  [color=darkseagreen4, key=1, label=cashBalance, style=dashed];
n327 -> n332  [color=darkseagreen4, key=1, label=cashBalance, style=dashed];
n328 -> n338  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n329 -> n331  [color=darkseagreen4, key=1, label=cash, style=dashed];
n332 -> n341  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n345 -> n356  [color=darkseagreen4, key=1, label=ib, style=dashed];
n346 -> n367  [color=darkseagreen4, key=1, label=orderEventFired, style=dashed];
n346 -> n357  [color=darkseagreen4, key=1, label=orderEventFired, style=dashed];
n346 -> n358  [color=darkseagreen4, key=1, label=orderEventFired, style=dashed];
n347 -> n366  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n350 -> n370  [color=darkseagreen4, key=1, label="QuantConnect.Securities.AccountEvent", style=dashed];
n348 -> n370  [color=darkseagreen4, key=1, label=cashBalanceUpdates, style=dashed];
n348 -> n362  [color=darkseagreen4, key=1, label=cashBalanceUpdates, style=dashed];
n349 -> n371  [color=darkseagreen4, key=1, label=accountChangedFired, style=dashed];
n349 -> n359  [color=darkseagreen4, key=1, label=accountChangedFired, style=dashed];
n349 -> n360  [color=darkseagreen4, key=1, label=accountChangedFired, style=dashed];
n351 -> n353  [color=darkseagreen4, key=1, label=orderCount, style=dashed];
n351 -> n362  [color=darkseagreen4, key=1, label=orderCount, style=dashed];
n352 -> n357  [color=darkseagreen4, key=1, label=i, style=dashed];
n352 -> n359  [color=darkseagreen4, key=1, label=i, style=dashed];
n352 -> n361  [color=darkseagreen4, key=1, label=i, style=dashed];
n354 -> n356  [color=darkseagreen4, key=1, label=order, style=dashed];
n361 -> n361  [color=darkseagreen4, key=1, label=i, style=dashed];
n374 -> n380  [color=darkseagreen4, key=1, label=ib, style=dashed];
n375 -> n385  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n375 -> n383  [color=darkseagreen4, key=1, label=balance, style=dashed];
n382 -> n391  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n376 -> n389  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n376 -> n381  [color=darkseagreen4, key=1, label=manualResetEvent, style=dashed];
n378 -> n380  [color=darkseagreen4, key=1, label=order, style=dashed];
n395 -> n400  [color=darkseagreen4, key=1, label=ib, style=dashed];
n396 -> n414  [color=darkseagreen4, key=1, label=orderEventFired, style=dashed];
n396 -> n401  [color=darkseagreen4, key=1, label=orderEventFired, style=dashed];
n397 -> n413  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n403 -> n405  [color=darkseagreen4, key=1, label=executions, style=dashed];
n403 -> n406  [color=darkseagreen4, key=1, label=executions, style=dashed];
n403 -> n417  [color=darkseagreen4, key=1, label=executions, style=dashed];
n403 -> n420  [color=darkseagreen4, key=1, label=executions, style=dashed];
n398 -> n400  [color=darkseagreen4, key=1, label=order, style=dashed];
n398 -> n406  [color=darkseagreen4, key=1, label=order, style=dashed];
n398 -> n417  [color=darkseagreen4, key=1, label=order, style=dashed];
n406 -> n416  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n417 -> n419  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n402 -> n404  [color=darkseagreen4, key=1, label=stopwatch, style=dashed];
n402 -> n405  [color=darkseagreen4, key=1, label=stopwatch, style=dashed];
n420 -> n422  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n419 -> n423  [color=darkseagreen4, key=1, label=string, style=dashed];
n427 -> n432  [color=darkseagreen4, key=1, label=ib, style=dashed];
n428 -> n440  [color=darkseagreen4, key=1, label=orderEventFired, style=dashed];
n428 -> n433  [color=darkseagreen4, key=1, label=orderEventFired, style=dashed];
n429 -> n439  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
n430 -> n432  [color=darkseagreen4, key=1, label=order, style=dashed];
n443 -> n449  [color=darkseagreen4, key=1, label=ib, style=dashed];
n443 -> n456  [color=darkseagreen4, key=1, label=ib, style=dashed];
n443 -> n459  [color=darkseagreen4, key=1, label=ib, style=dashed];
n445 -> n456  [color=darkseagreen4, key=1, label=tenMinutes, style=dashed];
n452 -> n456  [color=darkseagreen4, key=1, label=stopwatch, style=dashed];
n465 -> n467  [color=darkseagreen4, key=1, label=openOrder, style=dashed];
n466 -> n474  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n475 -> n477  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n474 -> n478  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_26 -> m0_28  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m0_32 -> m0_2  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
m0_32 -> m0_3  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
m0_32 -> m0_4  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
m0_32 -> m0_5  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
m0_32 -> m0_6  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
m0_32 -> m0_7  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
m0_32 -> m0_8  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
m0_32 -> m0_9  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
m0_32 -> m0_28  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
m1_24 -> m1_26  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight", style=dashed];
m1_24 -> m1_27  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight", style=dashed];
m1_24 -> m1_28  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight", style=dashed];
m1_24 -> m1_30  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight", style=dashed];
m1_24 -> m1_31  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight", style=dashed];
m1_24 -> m1_32  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight", style=dashed];
m1_24 -> m1_33  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Serialization.SerializedInsight", style=dashed];
m1_25 -> m1_27  [color=darkseagreen4, key=1, label=insight, style=dashed];
m1_25 -> m1_28  [color=darkseagreen4, key=1, label=insight, style=dashed];
m1_25 -> m1_29  [color=darkseagreen4, key=1, label=insight, style=dashed];
m1_25 -> m1_31  [color=darkseagreen4, key=1, label=insight, style=dashed];
m1_25 -> m1_33  [color=darkseagreen4, key=1, label=insight, style=dashed];
m1_25 -> m1_34  [color=darkseagreen4, key=1, label=insight, style=dashed];
m1_44 -> m1_49  [color=darkseagreen4, key=1, label=str, style=dashed];
m1_46 -> m1_49  [color=darkseagreen4, key=1, label=str, style=dashed];
m1_52 -> m1_45  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Insight", style=dashed];
m1_52 -> m1_47  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Insight", style=dashed];
m2_228 -> m2_234  [color=darkseagreen4, key=1, label=newSource, style=dashed];
m2_43 -> m2_51  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_43 -> m2_81  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_52 -> m2_55  [color=darkseagreen4, key=1, label=line, style=dashed];
m2_53 -> m2_59  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_53 -> m2_64  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_53 -> m2_66  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_53 -> m2_69  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_53 -> m2_81  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_58 -> m2_71  [color=darkseagreen4, key=1, label=instanceMarketOpen, style=dashed];
m2_58 -> m2_73  [color=darkseagreen4, key=1, label=instanceMarketOpen, style=dashed];
m2_60 -> m2_64  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_60 -> m2_66  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_60 -> m2_69  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_60 -> m2_81  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_68 -> m2_69  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_68 -> m2_81  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_70 -> m2_81  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_74 -> m2_81  [color=darkseagreen4, key=1, label=instance, style=dashed];
m2_121 -> m2_125  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m2_121 -> m2_126  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m2_121 -> m2_142  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m2_129 -> m2_133  [color=darkseagreen4, key=1, label=newSource, style=dashed];
m2_207 -> m2_211  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_0 -> m2_11  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionDataConfig", style=dashed];
m2_156 -> m2_173  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_156 -> m2_179  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_156 -> m2_180  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_156 -> m2_186  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_159 -> m2_161  [color=darkseagreen4, key=1, label=cache, style=dashed];
m2_159 -> m2_162  [color=darkseagreen4, key=1, label=cache, style=dashed];
m2_159 -> m2_163  [color=darkseagreen4, key=1, label=cache, style=dashed];
m2_166 -> m2_173  [color=darkseagreen4, key=1, label=location, style=dashed];
m2_174 -> m2_176  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_174 -> m2_180  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_174 -> m2_186  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_237 -> m2_10  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_19  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_20  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_21  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_45  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_46  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_51  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_55  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_59  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_66  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_69  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_73  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_75  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_76  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_81  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_83  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_103  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_104  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_111  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_114  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_124  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_125  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_126  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_133  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_136  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_141  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_142  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_143  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_144  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_148  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_150  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_167  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_177  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_187  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_219  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_220  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_221  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_222  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_223  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m2_237 -> m2_229  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m3_0 -> m3_2  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionDataSource", style=dashed];
m3_46 -> m3_50  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m3_47 -> m3_54  [color=darkseagreen4, key=1, label=mappedSymbol, style=dashed];
m3_51 -> m3_54  [color=darkseagreen4, key=1, label=mappedSymbol, style=dashed];
m3_4 -> m3_1  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.DataFeeds.CreateStreamReaderErrorEventArgs", style=dashed];
m3_4 -> m3_2  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.DataFeeds.CreateStreamReaderErrorEventArgs", style=dashed];
m3_16 -> m3_23  [color=green, key=1, label=factorTable, style=dashed];
m3_16 -> m3_24  [color=darkseagreen4, key=1, label=factorTable, style=dashed];
m3_36 -> m3_43  [color=darkseagreen4, key=1, label=symbolMapTable, style=dashed];
m3_36 -> m3_44  [color=darkseagreen4, key=1, label=symbolMapTable, style=dashed];
m4_0 -> m4_2  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<QuantConnect.ChartPoint>", style=dashed];
m4_1 -> m4_4  [color=darkseagreen4, key=1, label=dictionary, style=dashed];
m4_1 -> m4_5  [color=darkseagreen4, key=1, label=dictionary, style=dashed];
m4_1 -> m4_9  [color=darkseagreen4, key=1, label=dictionary, style=dashed];
m4_2 -> m4_5  [color=darkseagreen4, key=1, label=point, style=dashed];
m4_3 -> m4_5  [color=darkseagreen4, key=1, label=x, style=dashed];
m4_16 -> m4_66  [color=darkseagreen4, key=1, label="System.Collections.Generic.SortedDictionary<System.DateTime, decimal>", style=dashed];
m4_16 -> m4_85  [color=darkseagreen4, key=1, label="System.Collections.Generic.SortedDictionary<System.DateTime, decimal>", style=dashed];
m4_46 -> m4_48  [color=darkseagreen4, key=1, label=performance, style=dashed];
m4_47 -> m4_148  [color=darkseagreen4, key=1, label=equity, style=dashed];
m4_67 -> m4_77  [color=darkseagreen4, key=1, label=profitLossValue, style=dashed];
m4_105 -> m4_107  [color=darkseagreen4, key=1, label=profitLossRatio, style=dashed];
m4_33 -> m4_69  [color=darkseagreen4, key=1, label=years, style=dashed];
m4_33 -> m4_70  [color=darkseagreen4, key=1, label=years, style=dashed];
m4_33 -> m4_83  [color=darkseagreen4, key=1, label=years, style=dashed];
m4_34 -> m4_71  [color=darkseagreen4, key=1, label=annualTrades, style=dashed];
m4_34 -> m4_76  [color=darkseagreen4, key=1, label=annualTrades, style=dashed];
m4_35 -> m4_72  [color=darkseagreen4, key=1, label=annualWins, style=dashed];
m4_35 -> m4_78  [color=darkseagreen4, key=1, label=annualWins, style=dashed];
m4_86 -> m4_98  [color=darkseagreen4, key=1, label=totalTrades, style=dashed];
m4_36 -> m4_74  [color=darkseagreen4, key=1, label=annualLosses, style=dashed];
m4_36 -> m4_80  [color=darkseagreen4, key=1, label=annualLosses, style=dashed];
m4_87 -> m4_90  [color=darkseagreen4, key=1, label=totalWins, style=dashed];
m4_37 -> m4_75  [color=darkseagreen4, key=1, label=annualLossTotal, style=dashed];
m4_88 -> m4_93  [color=darkseagreen4, key=1, label=totalLosses, style=dashed];
m4_38 -> m4_73  [color=darkseagreen4, key=1, label=annualWinTotal, style=dashed];
m4_49 -> m4_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_49 -> m4_149  [color=darkseagreen4, key=1, label=dtPrevious, style=dashed];
m4_43 -> m4_151  [color=darkseagreen4, key=1, label=listBenchmark, style=dashed];
m4_43 -> m4_152  [color=darkseagreen4, key=1, label=listBenchmark, style=dashed];
m4_43 -> m4_50  [color=darkseagreen4, key=1, label=listBenchmark, style=dashed];
m4_43 -> m4_53  [color=darkseagreen4, key=1, label=listBenchmark, style=dashed];
m4_43 -> m4_54  [color=darkseagreen4, key=1, label=listBenchmark, style=dashed];
m4_48 -> m4_144  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_68 -> m4_70  [color=darkseagreen4, key=1, label=year, style=dashed];
m4_68 -> m4_71  [color=darkseagreen4, key=1, label=year, style=dashed];
m4_68 -> m4_72  [color=darkseagreen4, key=1, label=year, style=dashed];
m4_68 -> m4_73  [color=darkseagreen4, key=1, label=year, style=dashed];
m4_68 -> m4_74  [color=darkseagreen4, key=1, label=year, style=dashed];
m4_68 -> m4_75  [color=darkseagreen4, key=1, label=year, style=dashed];
m4_68 -> m4_76  [color=darkseagreen4, key=1, label=year, style=dashed];
m4_68 -> m4_78  [color=darkseagreen4, key=1, label=year, style=dashed];
m4_68 -> m4_80  [color=darkseagreen4, key=1, label=year, style=dashed];
m4_161 -> m4_164  [color=darkseagreen4, key=1, label=lPrices, style=dashed];
m4_162 -> m4_167  [color=darkseagreen4, key=1, label=lDrawdowns, style=dashed];
m4_163 -> m4_165  [color=darkseagreen4, key=1, label=high, style=dashed];
m4_163 -> m4_167  [color=darkseagreen4, key=1, label=high, style=dashed];
m4_164 -> m4_167  [color=darkseagreen4, key=1, label=price, style=dashed];
m4_174 -> m4_187  [color=darkseagreen4, key=1, label=int, style=dashed];
m4_175 -> m4_181  [color=darkseagreen4, key=1, label=priceMaximum, style=dashed];
m4_175 -> m4_183  [color=darkseagreen4, key=1, label=priceMaximum, style=dashed];
m4_178 -> m4_180  [color=darkseagreen4, key=1, label=lPrices, style=dashed];
m4_178 -> m4_181  [color=darkseagreen4, key=1, label=lPrices, style=dashed];
m4_178 -> m4_183  [color=darkseagreen4, key=1, label=lPrices, style=dashed];
m4_178 -> m4_187  [color=darkseagreen4, key=1, label=lPrices, style=dashed];
m4_176 -> m4_183  [color=darkseagreen4, key=1, label=previousMinimum, style=dashed];
m4_176 -> m4_187  [color=darkseagreen4, key=1, label=previousMinimum, style=dashed];
m4_184 -> m4_187  [color=darkseagreen4, key=1, label=previousMaximum, style=dashed];
m4_177 -> m4_183  [color=darkseagreen4, key=1, label=previousMaximum, style=dashed];
m4_177 -> m4_187  [color=darkseagreen4, key=1, label=previousMaximum, style=dashed];
m4_179 -> m4_181  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_179 -> m4_183  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_179 -> m4_186  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_185 -> m4_187  [color=darkseagreen4, key=1, label=previousMinimum, style=dashed];
m4_186 -> m4_186  [color=darkseagreen4, key=1, label=id, style=dashed];
m4_130 -> m4_158  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m4_219 -> m4_145  [color=darkseagreen4, key=1, label=listPerformance, style=dashed];
m4_220 -> m4_148  [color=darkseagreen4, key=1, label=equity, style=dashed];
m4_221 -> m4_149  [color=darkseagreen4, key=1, label=dtPrevious, style=dashed];
m4_222 -> m4_151  [color=darkseagreen4, key=1, label=listBenchmark, style=dashed];
m4_222 -> m4_152  [color=darkseagreen4, key=1, label=listBenchmark, style=dashed];
m6_0 -> m6_9  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<string>", style=dashed];
m6_11 -> m6_13  [color=darkseagreen4, key=1, label=data, style=dashed];
}
