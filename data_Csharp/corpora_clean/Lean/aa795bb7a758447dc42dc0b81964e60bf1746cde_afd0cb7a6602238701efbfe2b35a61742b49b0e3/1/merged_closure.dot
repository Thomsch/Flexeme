digraph  {
n226 [label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", span=""];
n227 [label=algorithmName, span=""];
n228 [label=liveJob, span=""];
n229 [label="QuantConnect.Interfaces.IAlgorithm", span=""];
n230 [label="QuantConnect.Packets.AlgorithmNodePacket", span=""];
n231 [label="QuantConnect.Lean.Engine.RealTime.IRealTimeHandler", span=""];
n232 [label=liveJob, span=""];
n233 [label=order, span=""];
n234 [label=canonicalOption, span=""];
n0 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", span="72-72"];
n1 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", label="Errors = new List<string>()", span="74-74"];
n2 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", label="MaximumRuntime = TimeSpan.FromDays(10*365)", span="75-75"];
n5 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n3 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", label="MaxOrders = int.MaxValue", span="76-76"];
n6 [cluster="System.TimeSpan.FromDays(double)", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
n4 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", span="72-72"];
n7 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", span="85-85"];
n8 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="string error", span="87-87"];
n10 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="var loader = new Loader(algorithmNodePacket.Language, TimeSpan.FromSeconds(15), names =>\r\n            {\r\n                // if there's only one use that guy\r\n                if (names.Count == 1)\r\n                {\r\n                    return names.Single();\r\n                }\r\n\r\n                // if there's more than one then check configuration for which one we should use\r\n                var algorithmName = Config.Get(''algorithm-type-name'');\r\n                return names.Single(x => x.Contains(''.'' + algorithmName));\r\n            })", span="91-102"];
n11 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="var complete = loader.TryCreateAlgorithmInstanceWithIsolator(assemblyPath, algorithmNodePacket.RamAllocation, out algorithm, out error)", span="104-104"];
n9 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="IAlgorithm algorithm", span="88-88"];
n16 [cluster="Loader.cstr", label="Entry Loader.cstr", span=""];
n17 [cluster="System.TimeSpan.FromSeconds(double)", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
n21 [cluster="lambda expression", label="names.Count == 1", span="94-94"];
n22 [cluster="lambda expression", label="return names.Single();", span="96-96"];
n24 [cluster="lambda expression", label="return names.Single(x => x.Contains(''.'' + algorithmName));", span="101-101"];
n12 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="!complete", span="105-105"];
n18 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", label="Entry QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", span="357-357"];
n13 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="throw new Exception(error + '' Try re-building algorithm and remove duplicate QCAlgorithm base classes.'');", span="105-105"];
n14 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="return algorithm;", span="107-107"];
n15 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", span="85-85"];
n19 [cluster="System.Exception.Exception(string)", label="Entry System.Exception.Exception(string)", span="0-0"];
n20 [cluster="lambda expression", label="Entry lambda expression", span="91-102"];
n23 [cluster="lambda expression", label="var algorithmName = Config.Get(''algorithm-type-name'')", span="100-100"];
n27 [cluster="QuantConnect.Configuration.Config.Get(string, string)", label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="90-90"];
n30 [cluster="lambda expression", label="x.Contains(''.'' + algorithmName)", span="101-101"];
n25 [cluster="lambda expression", label="Exit lambda expression", span="91-102"];
n28 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n29 [cluster="lambda expression", label="Entry lambda expression", span="101-101"];
n26 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
n31 [cluster="lambda expression", label="Exit lambda expression", span="101-101"];
n32 [cluster="string.Contains(string)", label="Entry string.Contains(string)", span="0-0"];
n33 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", span="117-117"];
n34 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="var liveJob = algorithmNodePacket as LiveNodePacket", span="119-119"];
n39 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="var brokerage = _factory.CreateBrokerage(liveJob, uninitializedAlgorithm)", span="130-130"];
n35 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="liveJob == null", span="120-120"];
n37 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="_factory = Composer.Instance.Single<IBrokerageFactory>(brokerageFactory => brokerageFactory.BrokerageType.MatchesTypeName(liveJob.Brokerage))", span="126-126"];
n46 [cluster="lambda expression", label="brokerageFactory.BrokerageType.MatchesTypeName(liveJob.Brokerage)", span="126-126"];
n36 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="throw new ArgumentException(''BrokerageSetupHandler.CreateBrokerage requires a live node packet'');", span="122-122"];
n38 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="factory = _factory", span="127-127"];
n43 [cluster="QuantConnect.Util.Composer.Single<T>(System.Func<T, bool>)", label="Entry QuantConnect.Util.Composer.Single<T>(System.Func<T, bool>)", span="60-60"];
n45 [cluster="lambda expression", label="Entry lambda expression", span="126-126"];
n41 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", span="117-117"];
n40 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="return brokerage;", span="132-132"];
n44 [cluster="QuantConnect.Interfaces.IBrokerageFactory.CreateBrokerage(QuantConnect.Packets.LiveNodePacket, QuantConnect.Interfaces.IAlgorithm)", label="Entry QuantConnect.Interfaces.IBrokerageFactory.CreateBrokerage(QuantConnect.Packets.LiveNodePacket, QuantConnect.Interfaces.IAlgorithm)", span="55-55"];
n42 [cluster="System.ArgumentException.ArgumentException(string)", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
n47 [cluster="lambda expression", label="Exit lambda expression", span="126-126"];
n48 [cluster="System.Type.MatchesTypeName(string)", label="Entry System.Type.MatchesTypeName(string)", span="608-608"];
n49 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", span="145-145"];
n50 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="_algorithm = algorithm", span="147-147"];
n51 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var liveJob = job as LiveNodePacket", span="150-150"];
n60 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="resultHandler.SendStatusUpdate(AlgorithmStatus.Initializing, ''Initializing algorithm...'')", span="178-178"];
n61 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var controls = job.Controls", span="181-181"];
n63 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var initializeComplete = isolator.ExecuteWithTimeLimit(TimeSpan.FromSeconds(300), () =>\r\n                {\r\n                    try\r\n                    {\r\n                        //Set the default brokerage model before initialize\r\n                        algorithm.SetBrokerageModel(_factory.BrokerageModel);\r\n                        //Margin calls are disabled by default in live mode\r\n                        algorithm.Portfolio.MarginCallModel = MarginCallModel.Null;\r\n                        //Set our parameters\r\n                        algorithm.SetParameters(job.Parameters);\r\n                        algorithm.SetAvailableDataTypes(GetConfiguredDataFeeds());\r\n                        //Algorithm is live, not backtesting:\r\n                        algorithm.SetLiveMode(true);\r\n                        //Initialize the algorithm's starting date\r\n                        algorithm.SetDateTime(DateTime.UtcNow);\r\n                        //Set the source impl for the event scheduling\r\n                        algorithm.Schedule.SetEventSchedule(realTimeHandler);\r\n                        //Initialise the algorithm, get the required data:\r\n                        algorithm.Initialize();\r\n                        if (liveJob.Brokerage != ''PaperBrokerage'')\r\n                        {\r\n                            //Zero the CashBook - we'll populate directly from brokerage\r\n                            foreach (var kvp in algorithm.Portfolio.CashBook)\r\n                            {\r\n                                kvp.Value.SetAmount(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (Exception err)\r\n                    {\r\n                        AddInitializationError(err.Message);\r\n                    }\r\n                }, controls.RamAllocation)", span="183-215"];
n172 [cluster="lambda expression", label="algorithm.SetBrokerageModel(_factory.BrokerageModel)", span="188-188"];
n173 [cluster="lambda expression", label="algorithm.Portfolio.MarginCallModel = MarginCallModel.Null", span="190-190"];
n174 [cluster="lambda expression", label="algorithm.SetParameters(job.Parameters)", span="192-192"];
n175 [cluster="lambda expression", label="algorithm.SetAvailableDataTypes(GetConfiguredDataFeeds())", span="193-193"];
n176 [cluster="lambda expression", label="algorithm.SetLiveMode(true)", span="195-195"];
n177 [cluster="lambda expression", label="algorithm.SetDateTime(DateTime.UtcNow)", span="197-197"];
n178 [cluster="lambda expression", label="algorithm.Schedule.SetEventSchedule(realTimeHandler)", span="199-199"];
n179 [cluster="lambda expression", label="algorithm.Initialize()", span="201-201"];
n181 [cluster="lambda expression", label="algorithm.Portfolio.CashBook", span="205-205"];
n67 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="resultHandler.SendStatusUpdate(AlgorithmStatus.LoggingIn, ''Logging into brokerage...'')", span="224-224"];
n68 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="brokerage.Message += brokerageOnMessage", span="226-226"];
n70 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="brokerage.Connect()", span="232-232"];
n75 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="!brokerage.IsConnected", span="242-242"];
n79 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var cashBalance = brokerage.GetCashBalance()", span="253-253"];
n82 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="algorithm.Portfolio.SetCash(cash.Symbol, cash.Amount, cash.ConversionRate)", span="257-257"];
n88 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var openOrders = brokerage.GetOpenOrders()", span="271-271"];
n91 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="order.Id = algorithm.Transactions.GetIncrementOrderId()", span="276-276"];
n92 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="transactionHandler.Orders.AddOrUpdate(order.Id, order, (i, o) => order)", span="277-277"];
n98 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var holdings = brokerage.GetAccountHoldings()", span="291-291"];
n100 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var minResolution = new Lazy<Resolution>(() => algorithm.Securities.Select(x => x.Value.Resolution).DefaultIfEmpty(Resolution.Second).Min())", span="293-293"];
n199 [cluster="lambda expression", label="algorithm.Securities.Select(x => x.Value.Resolution).DefaultIfEmpty(Resolution.Second).Min()", span="293-293"];
n106 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="!algorithm.Portfolio.ContainsKey(holding.Symbol)", span="309-309"];
n112 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var canonicalOption = algorithm.AddSecurity(holding.Type, underlying, minResolution.Value, null, true, 1.0m, false)", span="323-323"];
n113 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var universe = algorithm.UniverseManager.Where(x => x.Key == canonicalOption.Symbol).First().Value", span="324-324"];
n114 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var option = universe.CreateSecurity(holding.Symbol, algorithm, marketHoursDatabase, symbolPropertiesDatabase)", span="327-327"];
n115 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="algorithm.Securities.Add(holding.Symbol, option)", span="328-328"];
n118 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="algorithm.AddSecurity(holding.Type, holding.Symbol.Value, minResolution.Value, null, true, 1.0m, false)", span="338-338"];
n119 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="algorithm.Portfolio[holding.Symbol].SetHoldings(holding.AveragePrice, (int) holding.Quantity)", span="342-342"];
n120 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="algorithm.Securities[holding.Symbol].SetMarketPrice(new TradeBar\r\n                        {\r\n                            Time = DateTime.Now,\r\n                            Open = holding.MarketPrice,\r\n                            High = holding.MarketPrice,\r\n                            Low = holding.MarketPrice,\r\n                            Close = holding.MarketPrice,\r\n                            Volume = 0,\r\n                            Symbol = holding.Symbol,\r\n                            DataType = MarketDataType.TradeBar\r\n                        })", span="343-353"];
n125 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="algorithm.PostInitialize()", span="363-363"];
n126 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="StartingPortfolioValue = algorithm.Portfolio.TotalPortfolioValue", span="366-366"];
n52 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="liveJob == null", span="151-151"];
n55 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="string.IsNullOrWhiteSpace(liveJob.Brokerage)", span="158-158"];
n180 [cluster="lambda expression", label="liveJob.Brokerage != ''PaperBrokerage''", span="202-202"];
n53 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''BrokerageSetupHandler requires a LiveNodePacket'')", span="153-153"];
n54 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="154-154"];
n132 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)", span="406-406"];
n56 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''A brokerage must be specified'')", span="160-160"];
n58 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="EventHandler<BrokerageMessageEvent> brokerageOnMessage = (sender, args) =>\r\n            {\r\n                if (args.Type == BrokerageMessageType.Error)\r\n                {\r\n                    AddInitializationError(string.Format(''Brokerage Error Code: {0} - {1}'', args.Code, args.Message));\r\n                }\r\n            }", span="166-172"];
n133 [cluster="string.IsNullOrWhiteSpace(string)", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
n57 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="161-161"];
n59 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Initializing algorithm...'')", span="176-176"];
n167 [cluster="lambda expression", label="args.Type == BrokerageMessageType.Error", span="168-168"];
n168 [cluster="lambda expression", label="AddInitializationError(string.Format(''Brokerage Error Code: {0} - {1}'', args.Code, args.Message))", span="170-170"];
n134 [cluster="QuantConnect.Logging.Log.Trace(string, bool)", label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106"];
n135 [cluster="QuantConnect.Lean.Engine.Results.IResultHandler.SendStatusUpdate(QuantConnect.AlgorithmStatus, string)", label="Entry QuantConnect.Lean.Engine.Results.IResultHandler.SendStatusUpdate(QuantConnect.AlgorithmStatus, string)", span="219-219"];
n62 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var isolator = new Isolator()", span="182-182"];
n136 [cluster="QuantConnect.Isolator.Isolator()", label="Entry QuantConnect.Isolator.Isolator()", span="55-55"];
n64 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="!initializeComplete", span="217-217"];
n137 [cluster="QuantConnect.Isolator.ExecuteWithTimeLimit(System.TimeSpan, System.Action, long)", label="Entry QuantConnect.Isolator.ExecuteWithTimeLimit(System.TimeSpan, System.Action, long)", span="145-145"];
n171 [cluster="lambda expression", label="Entry lambda expression", span="183-215"];
n65 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''Initialization timed out.'')", span="219-219"];
n66 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="220-220"];
n69 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Connecting to brokerage...'')", span="228-228"];
n71 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=Exception, span="234-234"];
n138 [cluster="QuantConnect.Interfaces.IBrokerage.Connect()", label="Entry QuantConnect.Interfaces.IBrokerage.Connect()", span="103-103"];
n72 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Error(err)", span="236-236"];
n73 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(string.Format(''Error connecting to brokerage: {0}. '' +\r\n                        ''This may be caused by incorrect login credentials or an unsupported account type.'', err.Message))", span="237-238"];
n139 [cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)", label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98"];
n74 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="239-239"];
n140 [cluster="string.Format(string, object)", label="Entry string.Format(string, object)", span="0-0"];
n76 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''Unable to connect to brokerage.'')", span="245-245"];
n78 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Fetching cash balance from brokerage...'')", span="249-249"];
n77 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="246-246"];
n80 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=cashBalance, span="254-254"];
n141 [cluster="QuantConnect.Interfaces.IBrokerage.GetCashBalance()", label="Entry QuantConnect.Interfaces.IBrokerage.GetCashBalance()", span="77-77"];
n81 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Setting '' + cash.Symbol + '' cash to '' + cash.Amount)", span="256-256"];
n83 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=Exception, span="260-260"];
n87 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Fetching open orders from brokerage...'')", span="267-267"];
n142 [cluster="QuantConnect.Securities.SecurityPortfolioManager.SetCash(string, decimal, decimal)", label="Entry QuantConnect.Securities.SecurityPortfolioManager.SetCash(string, decimal, decimal)", span="483-483"];
n84 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Error(err)", span="262-262"];
n85 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''Error getting cash balance from brokerage: '' + err.Message)", span="263-263"];
n86 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="264-264"];
n89 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=openOrders, span="272-272"];
n143 [cluster="QuantConnect.Interfaces.IBrokerage.GetOpenOrders()", label="Entry QuantConnect.Interfaces.IBrokerage.GetOpenOrders()", span="65-65"];
n90 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Has open order: '' + order.Symbol.ToString() + '' - '' + order.Quantity)", span="275-275"];
n93 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=Exception, span="280-280"];
n97 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Fetching holdings from brokerage...'')", span="287-287"];
n196 [cluster="lambda expression", label=order, span="277-277"];
n144 [cluster="QuantConnect.Symbol.ToString()", label="Entry QuantConnect.Symbol.ToString()", span="350-350"];
n145 [cluster="QuantConnect.Securities.SecurityTransactionManager.GetIncrementOrderId()", label="Entry QuantConnect.Securities.SecurityTransactionManager.GetIncrementOrderId()", span="365-365"];
n146 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)", span="0-0"];
n195 [cluster="lambda expression", label="Entry lambda expression", span="277-277"];
n94 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Error(err)", span="282-282"];
n95 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''Error getting open orders from brokerage: '' + err.Message)", span="283-283"];
n96 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="284-284"];
n99 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var supportedSecurityTypes = new HashSet<SecurityType> { SecurityType.Equity, SecurityType.Forex, SecurityType.Cfd, SecurityType.Option, SecurityType.Future }", span="292-292"];
n147 [cluster="QuantConnect.Interfaces.IBrokerage.GetAccountHoldings()", label="Entry QuantConnect.Interfaces.IBrokerage.GetAccountHoldings()", span="71-71"];
n101 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=holdings, span="294-294"];
n148 [cluster="System.Collections.Generic.HashSet<T>.HashSet()", label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0"];
n103 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="!supportedSecurityTypes.Contains(holding.Type)", span="299-299"];
n105 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''Found unsupported security type in existing brokerage holdings: '' + holding.Type + ''. '' +\r\n                                ''QuantConnect currently supports the following security types: '' + string.Join('','', supportedSecurityTypes))", span="302-303"];
n149 [cluster="Lazy<Resolution>.cstr", label="Entry Lazy<Resolution>.cstr", span=""];
n102 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Has existing holding: '' + holding)", span="296-296"];
n121 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=Exception, span="356-356"];
n104 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Error(''BrokerageSetupHandler.Setup(): Unsupported security type: '' + holding.Type + ''-'' + holding.Symbol.Value)", span="301-301"];
n107 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Adding unrequested security: '' + holding.Symbol.ToString())", span="311-311"];
n110 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="holding.Type == SecurityType.Option", span="318-318"];
n111 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var underlying = holding.Symbol.Underlying.Value", span="320-320"];
n116 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="holding.Type == SecurityType.Future", span="330-330"];
n150 [cluster="System.Collections.Generic.HashSet<T>.Contains(T)", label="Entry System.Collections.Generic.HashSet<T>.Contains(T)", span="0-0"];
n151 [cluster="QuantConnect.Logging.Log.Error(string, bool)", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="65-65"];
n153 [cluster="QuantConnect.Securities.SecurityPortfolioManager.ContainsKey(QuantConnect.Symbol)", label="Entry QuantConnect.Securities.SecurityPortfolioManager.ContainsKey(QuantConnect.Symbol)", span="129-129"];
n108 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var marketHoursDatabase = MarketHoursDatabase.FromDataFolder()", span="313-313"];
n109 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var symbolPropertiesDatabase = SymbolPropertiesDatabase.FromDataFolder()", span="314-314"];
n154 [cluster="QuantConnect.Securities.MarketHoursDatabase.FromDataFolder()", label="Entry QuantConnect.Securities.MarketHoursDatabase.FromDataFolder()", span="119-119"];
n155 [cluster="QuantConnect.Securities.SymbolPropertiesDatabase.FromDataFolder()", label="Entry QuantConnect.Securities.SymbolPropertiesDatabase.FromDataFolder()", span="87-87"];
n156 [cluster="QuantConnect.Interfaces.IAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, string, bool, decimal, bool)", label="Entry QuantConnect.Interfaces.IAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, string, bool, decimal, bool)", span="457-457"];
n208 [cluster="lambda expression", label="x.Key == canonicalOption.Symbol", span="324-324"];
n157 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
n158 [cluster="Unk.First", label="Entry Unk.First", span=""];
n207 [cluster="lambda expression", label="Entry lambda expression", span="324-324"];
n159 [cluster="Unk.CreateSecurity", label="Entry Unk.CreateSecurity", span=""];
n161 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddFutureContract(QuantConnect.Symbol, QuantConnect.Resolution, bool, decimal)", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddFutureContract(QuantConnect.Symbol, QuantConnect.Resolution, bool, decimal)", span="1411-1411"];
n160 [cluster="Unk.Add", label="Entry Unk.Add", span=""];
n162 [cluster="QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", label="Entry QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", span="383-383"];
n163 [cluster="QuantConnect.Data.Market.TradeBar.TradeBar()", label="Entry QuantConnect.Data.Market.TradeBar.TradeBar()", span="121-121"];
n164 [cluster="QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", label="Entry QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", span="610-610"];
n152 [cluster="string.Join<T>(string, System.Collections.Generic.IEnumerable<T>)", label="Entry string.Join<T>(string, System.Collections.Generic.IEnumerable<T>)", span="0-0"];
n122 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Error(err)", span="358-358"];
n123 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''Error getting account holdings from brokerage: '' + err.Message)", span="359-359"];
n124 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="360-360"];
n165 [cluster="QuantConnect.Interfaces.IAlgorithm.PostInitialize()", label="Entry QuantConnect.Interfaces.IAlgorithm.PostInitialize()", span="291-291"];
n127 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="StartingDate = DateTime.Now", span="367-367"];
n128 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=Exception, span="369-369"];
n130 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return Errors.Count == 0;", span="381-381"];
n129 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(err.Message)", span="371-371"];
n131 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", span="145-145"];
n166 [cluster="lambda expression", label="Entry lambda expression", span="166-172"];
n169 [cluster="lambda expression", label="Exit lambda expression", span="166-172"];
n170 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
n186 [cluster="QuantConnect.Interfaces.IAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.IBrokerageModel)", label="Entry QuantConnect.Interfaces.IAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.IBrokerageModel)", span="313-313"];
n187 [cluster="QuantConnect.Interfaces.IAlgorithm.SetParameters(System.Collections.Generic.Dictionary<string, string>)", label="Entry QuantConnect.Interfaces.IAlgorithm.SetParameters(System.Collections.Generic.Dictionary<string, string>)", span="305-305"];
n188 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", span="388-388"];
n189 [cluster="QuantConnect.Interfaces.IAlgorithm.SetAvailableDataTypes(System.Collections.Generic.Dictionary<QuantConnect.SecurityType, System.Collections.Generic.List<QuantConnect.TickType>>)", label="Entry QuantConnect.Interfaces.IAlgorithm.SetAvailableDataTypes(System.Collections.Generic.Dictionary<QuantConnect.SecurityType, System.Collections.Generic.List<QuantConnect.TickType>>)", span="542-542"];
n190 [cluster="QuantConnect.Interfaces.IAlgorithm.SetLiveMode(bool)", label="Entry QuantConnect.Interfaces.IAlgorithm.SetLiveMode(bool)", span="492-492"];
n191 [cluster="QuantConnect.Interfaces.IAlgorithm.SetDateTime(System.DateTime)", label="Entry QuantConnect.Interfaces.IAlgorithm.SetDateTime(System.DateTime)", span="422-422"];
n192 [cluster="QuantConnect.Scheduling.ScheduleManager.SetEventSchedule(QuantConnect.Scheduling.IEventSchedule)", label="Entry QuantConnect.Scheduling.ScheduleManager.SetEventSchedule(QuantConnect.Scheduling.IEventSchedule)", span="65-65"];
n193 [cluster="QuantConnect.Interfaces.IAlgorithm.Initialize()", label="Entry QuantConnect.Interfaces.IAlgorithm.Initialize()", span="285-285"];
n183 [cluster="lambda expression", label=Exception, span="211-211"];
n185 [cluster="lambda expression", label="Exit lambda expression", span="183-215"];
n182 [cluster="lambda expression", label="kvp.Value.SetAmount(0)", span="207-207"];
n194 [cluster="QuantConnect.Securities.Cash.SetAmount(decimal)", label="Entry QuantConnect.Securities.Cash.SetAmount(decimal)", span="114-114"];
n184 [cluster="lambda expression", label="AddInitializationError(err.Message)", span="213-213"];
n197 [cluster="lambda expression", label="Exit lambda expression", span="277-277"];
n198 [cluster="lambda expression", label="Entry lambda expression", span="293-293"];
n200 [cluster="lambda expression", label="Exit lambda expression", span="293-293"];
n201 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n202 [cluster="Unk.DefaultIfEmpty", label="Entry Unk.DefaultIfEmpty", span=""];
n203 [cluster="Unk.Min", label="Entry Unk.Min", span=""];
n204 [cluster="lambda expression", label="Entry lambda expression", span="293-293"];
n205 [cluster="lambda expression", label="x.Value.Resolution", span="293-293"];
n206 [cluster="lambda expression", label="Exit lambda expression", span="293-293"];
n209 [cluster="lambda expression", label="Exit lambda expression", span="324-324"];
n210 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="var dataFeedsConfigString = Config.Get(''security-data-feeds'')", span="390-390"];
n211 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="Dictionary<SecurityType, List<TickType>> dataFeeds = new Dictionary<SecurityType, List<TickType>>()", span="392-392"];
n212 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="dataFeedsConfigString != string.Empty", span="393-393"];
n213 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="dataFeeds = JsonConvert.DeserializeObject<Dictionary<SecurityType, List<TickType>>>(dataFeedsConfigString)", span="395-395"];
n216 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n214 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="return dataFeeds;", span="398-398"];
n217 [cluster="Unk.>", label="Entry Unk.>", span=""];
n215 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", span="388-388"];
n218 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)", label="Errors.Add(''Failed to initialize algorithm: '' + message)", span="408-408"];
n219 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)", span="406-406"];
n220 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n221 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", span="415-415"];
n222 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", label="_factory != null", span="417-417"];
n223 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", label="_factory.Dispose()", span="419-419"];
n224 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", span="415-415"];
n225 [cluster="System.IDisposable.Dispose()", label="Entry System.IDisposable.Dispose()", span="0-0"];
m1_44 [cluster="lambda expression", file="FactorFileTests.cs", label="Entry lambda expression", span="703-703"];
m1_45 [cluster="lambda expression", file="FactorFileTests.cs", label="new TestCaseData(x).SetName(x.Language + ''/'' + x.Algorithm)", span="703-703"];
m1_46 [cluster="lambda expression", file="FactorFileTests.cs", label="Exit lambda expression", span="703-703"];
m1_9 [cluster="QuantConnect.Tests.AlgorithmRunner.RunLocalBacktest(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="FactorFileTests.cs", label="Entry QuantConnect.Tests.AlgorithmRunner.RunLocalBacktest(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", span="38-38"];
m1_0 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="FactorFileTests.cs", label="Entry QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", span="25-25"];
m1_1 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="FactorFileTests.cs", label="QuantConnect.Configuration.Config.Set(''quandl-auth-token'', ''WyAazVXnq7ATy_fefTqm'')", span="27-27"];
m1_2 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="FactorFileTests.cs", label="parameters.Algorithm == ''OptionChainConsistencyRegressionAlgorithm''", span="29-29"];
m1_6 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="FactorFileTests.cs", label="AlgorithmRunner.RunLocalBacktest(parameters.Algorithm, parameters.Statistics, parameters.Language)", span="37-37"];
m1_3 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="FactorFileTests.cs", label="QuantConnect.Configuration.Config.Set(''symbol-minute-limit'', ''100'')", span="32-32"];
m1_4 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="FactorFileTests.cs", label="QuantConnect.Configuration.Config.Set(''symbol-second-limit'', ''100'')", span="33-33"];
m1_5 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="FactorFileTests.cs", label="QuantConnect.Configuration.Config.Set(''symbol-tick-limit'', ''100'')", span="34-34"];
m1_7 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="FactorFileTests.cs", label="Exit QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", span="25-25"];
m1_41 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="FactorFileTests.cs", label="Entry QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", span="712-712"];
m1_49 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="FactorFileTests.cs", label="Algorithm = algorithm", span="714-714"];
m1_50 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="FactorFileTests.cs", label="Statistics = statistics", span="715-715"];
m1_51 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="FactorFileTests.cs", label="Language = language", span="716-716"];
m1_52 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="FactorFileTests.cs", label="Exit QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", span="712-712"];
m1_48 [cluster="Unk.SetName", file="FactorFileTests.cs", label="Entry Unk.SetName", span=""];
m1_10 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="Entry QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", span="40-40"];
m1_11 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var basicTemplateStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''264.956%''},\r\n                {''Drawdown'', ''2.200%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''0%''},\r\n                {''Sharpe Ratio'', ''4.411''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.002''},\r\n                {''Beta'', ''1''},\r\n                {''Annual Standard Deviation'', ''0.193''},\r\n                {''Annual Variance'', ''0.037''},\r\n                {''Information Ratio'', ''6.816''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0.851''},\r\n                {''Total Fees'', ''$3.09''}\r\n            }", span="42-63"];
m1_12 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var basicTemplateOptionsStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.28%''},\r\n                {''Compounding Annual Return'', ''-78.105%''},\r\n                {''Drawdown'', ''0.300%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.280%''},\r\n                {''Sharpe Ratio'', ''0''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="65-86"];
m1_37 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="return new List<AlgorithmStatisticsTestParameters>\r\n            {\r\n                // CSharp\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateFuturesAlgorithmDaily'', basicTemplateFuturesAlgorithmDailyStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''AddRemoveSecurityRegressionAlgorithm'', addRemoveSecurityRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateAlgorithm'', basicTemplateStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateOptionsAlgorithm'', basicTemplateOptionsStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''CustomDataRegressionAlgorithm'', customDataRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''DropboxBaseDataUniverseSelectionAlgorithm'', dropboxBaseDataUniverseSelectionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''DropboxUniverseSelectionAlgorithm'', dropboxUniverseSelectionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''LimitFillRegressionAlgorithm'', limitFillRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''ParameterizedAlgorithm'', parameterizedStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''RegressionAlgorithm'', regressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''UniverseSelectionRegressionAlgorithm'', universeSelectionRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''UpdateOrderRegressionAlgorithm'', updateOrderRegressionStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''HistoryAlgorithm'', historyAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''CoarseFundamentalTop5Algorithm'', coarseFundamentalTop5AlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''CoarseFineFundamentalRegressionAlgorithm'', coarseFineFundamentalRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''MACDTrendAlgorithm'', macdTrendAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionSplitRegressionAlgorithm'', optionSplitRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionRenameRegressionAlgorithm'', optionRenameRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionOpenInterestRegressionAlgorithm'', optionOpenInterestRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionChainConsistencyRegressionAlgorithm'', optionChainConsistencyRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''WeeklyUniverseSelectionRegressionAlgorithm'', weeklyUniverseSelectionRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''OptionExerciseAssignRegressionAlgorithm'',optionExerciseAssignRegressionAlgorithmStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateDailyAlgorithm'', basicTemplateDailyStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''HourSplitRegressionAlgorithm'', hourSplitStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''HourReverseSplitRegressionAlgorithm'', hourReverseSplitStatistics, Language.CSharp),\r\n                new AlgorithmStatisticsTestParameters(''FractionalQuantityRegressionAlgorithm'', fractionalQuantityRegressionStatistics, Language.CSharp),\r\n\r\n                // Python\r\n                // new AlgorithmStatisticsTestParameters(''BasicTemplateFuturesAlgorithmDaily'', basicTemplateFuturesAlgorithmDailyStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''AddRemoveSecurityRegressionAlgorithm'', addRemoveSecurityRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateAlgorithm'', basicTemplateStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateOptionsAlgorithm'', basicTemplateOptionsStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''CustomDataRegressionAlgorithm'', customDataRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''DropboxBaseDataUniverseSelectionAlgorithm'', dropboxBaseDataUniverseSelectionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''DropboxUniverseSelectionAlgorithm'', dropboxUniverseSelectionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''LimitFillRegressionAlgorithm'', limitFillRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''ParameterizedAlgorithm'', parameterizedStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''RegressionAlgorithm'', regressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''UniverseSelectionRegressionAlgorithm'', universeSelectionRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''UpdateOrderRegressionAlgorithm'', updateOrderRegressionStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''HistoryAlgorithm'', historyAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''CoarseFundamentalTop5Algorithm'', coarseFundamentalTop5AlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''CoarseFineFundamentalRegressionAlgorithm'', coarseFineFundamentalRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''MACDTrendAlgorithm'', macdTrendAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionSplitRegressionAlgorithm'', optionSplitRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionRenameRegressionAlgorithm'', optionRenameRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionOpenInterestRegressionAlgorithm'', optionOpenInterestRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionChainConsistencyRegressionAlgorithm'', optionChainConsistencyRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''WeeklyUniverseSelectionRegressionAlgorithm'', weeklyUniverseSelectionRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''OptionExerciseAssignRegressionAlgorithm'',optionExerciseAssignRegressionAlgorithmStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''BasicTemplateDailyAlgorithm'', basicTemplateDailyStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''HourSplitRegressionAlgorithm'', hourSplitStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''HourReverseSplitRegressionAlgorithm'', hourReverseSplitStatistics, Language.Python),\r\n                new AlgorithmStatisticsTestParameters(''FractionalQuantityRegressionAlgorithm'', fractionalQuantityRegressionStatistics, Language.Python),\r\n\r\n                // FSharp\r\n                // new AlgorithmStatisticsTestParameters(''BasicTemplateAlgorithm'', basicTemplateStatistics, Language.FSharp),\r\n\r\n                // VisualBasic\r\n                // new AlgorithmStatisticsTestParameters(''BasicTemplateAlgorithm'', basicTemplateStatistics, Language.VisualBasic),\r\n            }.Select(x => new TestCaseData(x).SetName(x.Language + ''/'' + x.Algorithm)).ToArray();", span="640-703"];
m1_13 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var limitFillRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''34''},\r\n                {''Average Win'', ''0.02%''},\r\n                {''Average Loss'', ''-0.02%''},\r\n                {''Compounding Annual Return'', ''8.350%''},\r\n                {''Drawdown'', ''0.400%''},\r\n                {''Expectancy'', ''0.447''},\r\n                {''Net Profit'', ''0.103%''},\r\n                {''Sharpe Ratio'', ''1.747''},\r\n                {''Loss Rate'', ''31%''},\r\n                {''Win Rate'', ''69%''},\r\n                {''Profit-Loss Ratio'', ''1.10''},\r\n                {''Alpha'', ''-0.077''},\r\n                {''Beta'', ''0.152''},\r\n                {''Annual Standard Deviation'', ''0.03''},\r\n                {''Annual Variance'', ''0.001''},\r\n                {''Information Ratio'', ''-4.87''},\r\n                {''Tracking Error'', ''0.164''},\r\n                {''Treynor Ratio'', ''0.343''},\r\n                {''Total Fees'', ''$34.00''}\r\n            }", span="88-109"];
m1_14 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var updateOrderRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''21''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-1.71%''},\r\n                {''Compounding Annual Return'', ''-8.289%''},\r\n                {''Drawdown'', ''16.700%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-15.892%''},\r\n                {''Sharpe Ratio'', ''-1.225''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.011''},\r\n                {''Beta'', ''-0.469''},\r\n                {''Annual Standard Deviation'', ''0.056''},\r\n                {''Annual Variance'', ''0.003''},\r\n                {''Information Ratio'', ''-1.573''},\r\n                {''Tracking Error'', ''0.152''},\r\n                {''Treynor Ratio'', ''0.147''},\r\n                {''Total Fees'', ''$21.00''}\r\n            }", span="111-132"];
m1_15 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var regressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''5433''},\r\n                {''Average Win'', ''0.00%''},\r\n                {''Average Loss'', ''0.00%''},\r\n                {''Compounding Annual Return'', ''-3.886%''},\r\n                {''Drawdown'', ''0.100%''},\r\n                {''Expectancy'', ''-0.991''},\r\n                {''Net Profit'', ''-0.054%''},\r\n                {''Sharpe Ratio'', ''-30.336''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''2.40''},\r\n                {''Alpha'', ''-0.022''},\r\n                {''Beta'', ''-0.001''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''-4.198''},\r\n                {''Tracking Error'', ''0.174''},\r\n                {''Treynor Ratio'', ''35.023''},\r\n                {''Total Fees'', ''$5433.00''}\r\n            }", span="134-155"];
m1_16 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var universeSelectionRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''5''},\r\n                {''Average Win'', ''0.70%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''-73.872%''},\r\n                {''Drawdown'', ''6.600%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''-6.060%''},\r\n                {''Sharpe Ratio'', ''-3.562''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''100%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.681''},\r\n                {''Beta'', ''2.014''},\r\n                {''Annual Standard Deviation'', ''0.284''},\r\n                {''Annual Variance'', ''0.08''},\r\n                {''Information Ratio'', ''-3.67''},\r\n                {''Tracking Error'', ''0.231''},\r\n                {''Treynor Ratio'', ''-0.502''},\r\n                {''Total Fees'', ''$5.00''}\r\n            }", span="157-178"];
m1_17 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var customDataRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''155.210%''},\r\n                {''Drawdown'', ''84.800%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''0%''},\r\n                {''Sharpe Ratio'', ''1.199''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.99''},\r\n                {''Beta'', ''0.168''},\r\n                {''Annual Standard Deviation'', ''0.84''},\r\n                {''Annual Variance'', ''0.706''},\r\n                {''Information Ratio'', ''1.072''},\r\n                {''Tracking Error'', ''0.845''},\r\n                {''Treynor Ratio'', ''5.997''},\r\n                {''Total Fees'', ''$0.00''}\r\n            }", span="180-201"];
m1_18 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var addRemoveSecurityRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''5''},\r\n                {''Average Win'', ''0.49%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''307.853%''},\r\n                {''Drawdown'', ''1.400%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.814%''},\r\n                {''Sharpe Ratio'', ''6.474''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''100%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.306''},\r\n                {''Beta'', ''0.718''},\r\n                {''Annual Standard Deviation'', ''0.141''},\r\n                {''Annual Variance'', ''0.02''},\r\n                {''Information Ratio'', ''1.077''},\r\n                {''Tracking Error'', ''0.062''},\r\n                {''Treynor Ratio'', ''1.275''},\r\n                {''Total Fees'', ''$25.20''}\r\n            }", span="203-224"];
m1_19 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var dropboxBaseDataUniverseSelectionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''67''},\r\n                {''Average Win'', ''1.13%''},\r\n                {''Average Loss'', ''-0.69%''},\r\n                {''Compounding Annual Return'', ''17.718%''},\r\n                {''Drawdown'', ''5.100%''},\r\n                {''Expectancy'', ''0.813''},\r\n                {''Net Profit'', ''17.718%''},\r\n                {''Sharpe Ratio'', ''1.38''},\r\n                {''Loss Rate'', ''31%''},\r\n                {''Win Rate'', ''69%''},\r\n                {''Profit-Loss Ratio'', ''1.64''},\r\n                {''Alpha'', ''0.055''},\r\n                {''Beta'', ''0.379''},\r\n                {''Annual Standard Deviation'', ''0.099''},\r\n                {''Annual Variance'', ''0.01''},\r\n                {''Information Ratio'', ''-0.703''},\r\n                {''Tracking Error'', ''0.11''},\r\n                {''Treynor Ratio'', ''0.359''},\r\n                {''Total Fees'', ''$300.15''}\r\n            }", span="226-247"];
m1_20 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var dropboxUniverseSelectionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''49''},\r\n                {''Average Win'', ''1.58%''},\r\n                {''Average Loss'', ''-1.03%''},\r\n                {''Compounding Annual Return'', ''21.281%''},\r\n                {''Drawdown'', ''8.200%''},\r\n                {''Expectancy'', ''0.646''},\r\n                {''Net Profit'', ''21.281%''},\r\n                {''Sharpe Ratio'', ''1.362''},\r\n                {''Loss Rate'', ''35%''},\r\n                {''Win Rate'', ''65%''},\r\n                {''Profit-Loss Ratio'', ''1.52''},\r\n                {''Alpha'', ''0.012''},\r\n                {''Beta'', ''0.705''},\r\n                {''Annual Standard Deviation'', ''0.12''},\r\n                {''Annual Variance'', ''0.014''},\r\n                {''Information Ratio'', ''-0.51''},\r\n                {''Tracking Error'', ''0.101''},\r\n                {''Treynor Ratio'', ''0.232''},\r\n                {''Total Fees'', ''$232.92''}\r\n            }", span="249-270"];
m1_21 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var parameterizedStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''278.616%''},\r\n                {''Drawdown'', ''0.300%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''0%''},\r\n                {''Sharpe Ratio'', ''11.017''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.553''},\r\n                {''Beta'', ''0.364''},\r\n                {''Annual Standard Deviation'', ''0.078''},\r\n                {''Annual Variance'', ''0.006''},\r\n                {''Information Ratio'', ''0.101''},\r\n                {''Tracking Error'', ''0.127''},\r\n                {''Treynor Ratio'', ''2.367''},\r\n                {''Total Fees'', ''$3.09''},\r\n            }", span="272-293"];
m1_22 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var historyAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''372.677%''},\r\n                {''Drawdown'', ''1.100%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''0%''},\r\n                {''Sharpe Ratio'', ''4.521''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.006''},\r\n                {''Beta'', ''0.997''},\r\n                {''Annual Standard Deviation'', ''0.193''},\r\n                {''Annual Variance'', ''0.037''},\r\n                {''Information Ratio'', ''6.231''},\r\n                {''Tracking Error'', ''0.001''},\r\n                {''Treynor Ratio'', ''0.876''},\r\n                {''Total Fees'', ''$3.09''},\r\n            }", span="295-316"];
m1_23 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var coarseFundamentalTop5AlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''10''},\r\n                {''Average Win'', ''1.15%''},\r\n                {''Average Loss'', ''-0.47%''},\r\n                {''Compounding Annual Return'', ''-0.746%''},\r\n                {''Drawdown'', ''3.000%''},\r\n                {''Expectancy'', ''-0.313''},\r\n                {''Net Profit'', ''-0.746%''},\r\n                {''Sharpe Ratio'', ''-0.242''},\r\n                {''Loss Rate'', ''80%''},\r\n                {''Win Rate'', ''20%''},\r\n                {''Profit-Loss Ratio'', ''2.44''},\r\n                {''Alpha'', ''-0.01''},\r\n                {''Beta'', ''0.044''},\r\n                {''Annual Standard Deviation'', ''0.024''},\r\n                {''Annual Variance'', ''0.001''},\r\n                {''Information Ratio'', ''-0.973''},\r\n                {''Tracking Error'', ''0.1''},\r\n                {''Treynor Ratio'', ''-0.13''},\r\n                {''Total Fees'', ''$10.61''},\r\n            }", span="318-339"];
m1_24 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var coarseFineFundamentalRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''6''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.84%''},\r\n                {''Compounding Annual Return'', ''-57.345%''},\r\n                {''Drawdown'', ''9.100%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-6.763%''},\r\n                {''Sharpe Ratio'', ''-3.025''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.754''},\r\n                {''Beta'', ''1.258''},\r\n                {''Annual Standard Deviation'', ''0.217''},\r\n                {''Annual Variance'', ''0.047''},\r\n                {''Information Ratio'', ''-4.525''},\r\n                {''Tracking Error'', ''0.162''},\r\n                {''Treynor Ratio'', ''-0.521''},\r\n                {''Total Fees'', ''$13.92''},\r\n            }", span="341-362"];
m1_25 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var macdTrendAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''84''},\r\n                {''Average Win'', ''4.79%''},\r\n                {''Average Loss'', ''-4.17%''},\r\n                {''Compounding Annual Return'', ''2.967%''},\r\n                {''Drawdown'', ''34.800%''},\r\n                {''Expectancy'', ''0.228''},\r\n                {''Net Profit'', ''37.970%''},\r\n                {''Sharpe Ratio'', ''0.27''},\r\n                {''Loss Rate'', ''43%''},\r\n                {''Win Rate'', ''57%''},\r\n                {''Profit-Loss Ratio'', ''1.15''},\r\n                {''Alpha'', ''-0.002''},\r\n                {''Beta'', ''0.411''},\r\n                {''Annual Standard Deviation'', ''0.112''},\r\n                {''Annual Variance'', ''0.013''},\r\n                {''Information Ratio'', ''-0.352''},\r\n                {''Tracking Error'', ''0.134''},\r\n                {''Treynor Ratio'', ''0.073''},\r\n                {''Total Fees'', ''$420.57''},\r\n            }", span="364-385"];
m1_26 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var optionSplitRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0.00%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''0.198%''},\r\n                {''Drawdown'', ''0.500%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''0.002%''},\r\n                {''Sharpe Ratio'', ''0.609''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''100%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.013''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0.002''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''7.935''},\r\n                {''Tracking Error'', ''6.787''},\r\n                {''Treynor Ratio'', ''-4.913''},\r\n                {''Total Fees'', ''$1.25''},\r\n            }", span="387-408"];
m1_27 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var optionRenameRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''4''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.02%''},\r\n                {''Compounding Annual Return'', ''-0.472%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.006%''},\r\n                {''Sharpe Ratio'', ''-3.403''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.016''},\r\n                {''Beta'', ''-0.001''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''10.014''},\r\n                {''Tracking Error'', ''0.877''},\r\n                {''Treynor Ratio'', ''4.203''},\r\n                {''Total Fees'', ''$2.50''},\r\n            }", span="410-431"];
m1_28 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var optionOpenInterestRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.01%''},\r\n                {''Compounding Annual Return'', ''-2.042%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.010%''},\r\n                {''Sharpe Ratio'', ''-11.225''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''-0.036''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''-11.225''},\r\n                {''Tracking Error'', ''0.033''},\r\n                {''Treynor Ratio'', ''0.355''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="433-454"];
m1_29 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var optionChainConsistencyRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-3.86%''},\r\n                {''Compounding Annual Return'', ''-100.000%''},\r\n                {''Drawdown'', ''3.900%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-3.855%''},\r\n                {''Sharpe Ratio'', ''0''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="456-477"];
m1_30 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var weeklyUniverseSelectionRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''8''},\r\n                {''Average Win'', ''1.68%''},\r\n                {''Average Loss'', ''-0.77%''},\r\n                {''Compounding Annual Return'', ''23.389%''},\r\n                {''Drawdown'', ''1.900%''},\r\n                {''Expectancy'', ''0.597''},\r\n                {''Net Profit'', ''1.801%''},\r\n                {''Sharpe Ratio'', ''1.884''},\r\n                {''Loss Rate'', ''50%''},\r\n                {''Win Rate'', ''50%''},\r\n                {''Profit-Loss Ratio'', ''2.19''},\r\n                {''Alpha'', ''-0.003''},\r\n                {''Beta'', ''0.421''},\r\n                {''Annual Standard Deviation'', ''0.087''},\r\n                {''Annual Variance'', ''0.008''},\r\n                {''Information Ratio'', ''-2.459''},\r\n                {''Tracking Error'', ''0.094''},\r\n                {''Treynor Ratio'', ''0.391''},\r\n                {''Total Fees'', ''$23.05''},\r\n            }", span="479-500"];
m1_31 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var optionExerciseAssignRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''4''},\r\n                {''Average Win'', ''0.30%''},\r\n                {''Average Loss'', ''-0.32%''},\r\n                {''Compounding Annual Return'', ''-85.023%''},\r\n                {''Drawdown'', ''0.400%''},\r\n                {''Expectancy'', ''-0.359''},\r\n                {''Net Profit'', ''-0.350%''},\r\n                {''Sharpe Ratio'', ''0''},\r\n                {''Loss Rate'', ''67%''},\r\n                {''Win Rate'', ''33%''},\r\n                {''Profit-Loss Ratio'', ''0.92''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="502-523"];
m1_32 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var basicTemplateDailyStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''244.780%''},\r\n                {''Drawdown'', ''1.100%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''0%''},\r\n                {''Sharpe Ratio'', ''6.165''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.254''},\r\n                {''Beta'', ''0.898''},\r\n                {''Annual Standard Deviation'', ''0.14''},\r\n                {''Annual Variance'', ''0.02''},\r\n                {''Information Ratio'', ''4.625''},\r\n                {''Tracking Error'', ''0.04''},\r\n                {''Treynor Ratio'', ''0.963''},\r\n                {''Total Fees'', ''$3.09''}\r\n            }", span="525-546"];
m1_33 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var hourSplitStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''-0.096%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''0%''},\r\n                {''Sharpe Ratio'', ''-11.225''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$1.00''}\r\n            }", span="548-569"];
m1_34 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var hourReverseSplitStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''-1.444%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''0%''},\r\n                {''Sharpe Ratio'', ''-11.225''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$1.00''}\r\n            }", span="571-592"];
m1_35 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var fractionalQuantityRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''6''},\r\n                {''Average Win'', ''0.53%''},\r\n                {''Average Loss'', ''-2.00%''},\r\n                {''Compounding Annual Return'', ''65.652%''},\r\n                {''Drawdown'', ''5.000%''},\r\n                {''Expectancy'', ''-0.158''},\r\n                {''Net Profit'', ''0.555%''},\r\n                {''Sharpe Ratio'', ''0.731''},\r\n                {''Loss Rate'', ''33%''},\r\n                {''Win Rate'', ''67%''},\r\n                {''Profit-Loss Ratio'', ''0.26''},\r\n                {''Alpha'', ''-1.237''},\r\n                {''Beta'', ''1.189''},\r\n                {''Annual Standard Deviation'', ''0.544''},\r\n                {''Annual Variance'', ''0.296''},\r\n                {''Information Ratio'', ''-8.473''},\r\n                {''Tracking Error'', ''0.115''},\r\n                {''Treynor Ratio'', ''0.335''},\r\n                {''Total Fees'', ''$2023.72''}\r\n            }", span="594-615"];
m1_36 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="var basicTemplateFuturesAlgorithmDailyStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''8''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0.00%''},\r\n                {''Compounding Annual Return'', ''-1.655%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.018%''},\r\n                {''Sharpe Ratio'', ''-23.092''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$14.80''}\r\n            }", span="617-638"];
m1_38 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="FactorFileTests.cs", label="Exit QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", span="40-40"];
m1_47 [cluster="TestCaseData.cstr", file="FactorFileTests.cs", label="Entry TestCaseData.cstr", span=""];
m1_42 [cluster="Unk.Select", file="FactorFileTests.cs", label="Entry Unk.Select", span=""];
m1_43 [cluster="Unk.ToArray", file="FactorFileTests.cs", label="Entry Unk.ToArray", span=""];
m1_8 [cluster="QuantConnect.Configuration.Config.Set(string, string)", file="FactorFileTests.cs", label="Entry QuantConnect.Configuration.Config.Set(string, string)", span="118-118"];
m1_39 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="FactorFileTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m1_53 [file="FactorFileTests.cs", label="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters", span=""];
m4_28 [cluster="QuantConnect.Indicators.IndicatorBase<T>.CompareTo(QuantConnect.Indicators.IndicatorBase<T>)", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.CompareTo(QuantConnect.Indicators.IndicatorBase<T>)", span="123-123"];
m4_32 [cluster="QuantConnect.Indicators.IndicatorBase<T>.CompareTo(QuantConnect.Indicators.IndicatorBase<T>)", file="FuturesExpiryFunctions.cs", label="Exit QuantConnect.Indicators.IndicatorBase<T>.CompareTo(QuantConnect.Indicators.IndicatorBase<T>)", span="123-123"];
m4_56 [cluster="QuantConnect.Indicators.IndicatorBase<T>.ToDetailedString()", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.ToDetailedString()", span="189-189"];
m4_58 [cluster="QuantConnect.Indicators.IndicatorBase<T>.ToDetailedString()", file="FuturesExpiryFunctions.cs", label="Exit QuantConnect.Indicators.IndicatorBase<T>.ToDetailedString()", span="189-189"];
m4_40 [cluster="object.GetType()", file="FuturesExpiryFunctions.cs", label="Entry object.GetType()", span="0-0"];
m4_0 [cluster="QuantConnect.Indicators.IndicatorBase<T>.IndicatorBase(string)", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.IndicatorBase(string)", span="48-48"];
m4_1 [cluster="QuantConnect.Indicators.IndicatorBase<T>.IndicatorBase(string)", file="FuturesExpiryFunctions.cs", label="Name = name", span="50-50"];
m4_2 [cluster="QuantConnect.Indicators.IndicatorBase<T>.IndicatorBase(string)", file="FuturesExpiryFunctions.cs", label="Current = new IndicatorDataPoint(DateTime.MinValue, 0m)", span="51-51"];
m4_3 [cluster="QuantConnect.Indicators.IndicatorBase<T>.IndicatorBase(string)", file="FuturesExpiryFunctions.cs", label="Exit QuantConnect.Indicators.IndicatorBase<T>.IndicatorBase(string)", span="48-48"];
m4_20 [cluster="object.ReferenceEquals(object, object)", file="FuturesExpiryFunctions.cs", label="Entry object.ReferenceEquals(object, object)", span="0-0"];
m4_60 [cluster="QuantConnect.Indicators.IndicatorBase<T>.ComputeNextValue(T)", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.ComputeNextValue(T)", span="199-199"];
m4_61 [cluster="QuantConnect.Indicators.IndicatorBase<T>.ComputeNextValue(T)", file="FuturesExpiryFunctions.cs", label="Exit QuantConnect.Indicators.IndicatorBase<T>.ComputeNextValue(T)", span="199-199"];
m4_4 [cluster="QuantConnect.Indicators.IndicatorDataPoint.IndicatorDataPoint(System.DateTime, decimal)", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorDataPoint.IndicatorDataPoint(System.DateTime, decimal)", span="40-40"];
m4_34 [cluster="QuantConnect.Indicators.IndicatorBase<T>.CompareTo(object)", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.CompareTo(object)", span="141-141"];
m4_39 [cluster="QuantConnect.Indicators.IndicatorBase<T>.CompareTo(object)", file="FuturesExpiryFunctions.cs", label="Exit QuantConnect.Indicators.IndicatorBase<T>.CompareTo(object)", span="141-141"];
m4_18 [cluster="System.DateTime.ToString(string)", file="FuturesExpiryFunctions.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m4_23 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Reset()", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.Reset()", span="109-109"];
m4_27 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Reset()", file="FuturesExpiryFunctions.cs", label="Exit QuantConnect.Indicators.IndicatorBase<T>.Reset()", span="109-109"];
m4_22 [cluster="QuantConnect.Indicators.IndicatorBase<T>.OnUpdated(QuantConnect.Indicators.IndicatorDataPoint)", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.OnUpdated(QuantConnect.Indicators.IndicatorDataPoint)", span="217-217"];
m4_68 [cluster="QuantConnect.Indicators.IndicatorBase<T>.OnUpdated(QuantConnect.Indicators.IndicatorDataPoint)", file="FuturesExpiryFunctions.cs", label="Exit QuantConnect.Indicators.IndicatorBase<T>.OnUpdated(QuantConnect.Indicators.IndicatorDataPoint)", span="217-217"];
m4_33 [cluster="QuantConnect.Indicators.IndicatorDataPoint.CompareTo(QuantConnect.Indicators.IndicatorDataPoint)", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorDataPoint.CompareTo(QuantConnect.Indicators.IndicatorDataPoint)", span="82-82"];
m4_5 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Update(T)", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.Update(T)", span="81-81"];
m4_16 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Update(T)", file="FuturesExpiryFunctions.cs", label="Exit QuantConnect.Indicators.IndicatorBase<T>.Update(T)", span="81-81"];
m4_21 [cluster="QuantConnect.Indicators.IndicatorBase<T>.ValidateAndComputeNextValue(T)", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.ValidateAndComputeNextValue(T)", span="207-207"];
m4_63 [cluster="QuantConnect.Indicators.IndicatorBase<T>.ValidateAndComputeNextValue(T)", file="FuturesExpiryFunctions.cs", label="Exit QuantConnect.Indicators.IndicatorBase<T>.ValidateAndComputeNextValue(T)", span="207-207"];
m4_41 [cluster="System.Type.GetBetterTypeName()", file="FuturesExpiryFunctions.cs", label="Entry System.Type.GetBetterTypeName()", span="564-564"];
m4_52 [cluster="QuantConnect.Indicators.IndicatorBase<T>.ToString()", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.ToString()", span="180-180"];
m4_54 [cluster="QuantConnect.Indicators.IndicatorBase<T>.ToString()", file="FuturesExpiryFunctions.cs", label="Exit QuantConnect.Indicators.IndicatorBase<T>.ToString()", span="180-180"];
m4_64 [cluster="QuantConnect.Indicators.IndicatorResult.IndicatorResult(decimal, QuantConnect.Indicators.IndicatorStatus)", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorResult.IndicatorResult(decimal, QuantConnect.Indicators.IndicatorStatus)", span="45-45"];
m4_19 [cluster="string.Format(string, object, object, object)", file="FuturesExpiryFunctions.cs", label="Entry string.Format(string, object, object, object)", span="0-0"];
m4_59 [cluster="string.Format(string, object, object)", file="FuturesExpiryFunctions.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m4_69 [cluster="QuantConnect.Indicators.IndicatorUpdatedHandler.Invoke(object, QuantConnect.Indicators.IndicatorDataPoint)", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorUpdatedHandler.Invoke(object, QuantConnect.Indicators.IndicatorDataPoint)", span="26-26"];
m4_42 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Equals(object)", file="FuturesExpiryFunctions.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.Equals(object)", span="159-159"];
m4_49 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Equals(object)", file="FuturesExpiryFunctions.cs", label="Exit QuantConnect.Indicators.IndicatorBase<T>.Equals(object)", span="159-159"];
m4_51 [cluster="System.Convert.ToDecimal(object)", file="FuturesExpiryFunctions.cs", label="Entry System.Convert.ToDecimal(object)", span="0-0"];
m4_55 [cluster="decimal.ToString(string)", file="FuturesExpiryFunctions.cs", label="Entry decimal.ToString(string)", span="0-0"];
m4_50 [cluster="System.Type.IsSubclassOf(System.Type)", file="FuturesExpiryFunctions.cs", label="Entry System.Type.IsSubclassOf(System.Type)", span="0-0"];
m4_70 [file="FuturesExpiryFunctions.cs", label="QuantConnect.Indicators.IndicatorBase<T>", span=""];
m5_198 [cluster="string.GetExtension()", file="FuturesExpiryFunctionsTests.cs", label="Entry string.GetExtension()", span="202-202"];
m5_206 [cluster="QuantConnect.Lean.Engine.SubscriptionStreamReader.SubscriptionStreamReader(string, QuantConnect.DataFeedEndpoint)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionStreamReader.SubscriptionStreamReader(string, QuantConnect.DataFeedEndpoint)", span="84-84"];
m5_154 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", span="641-641"];
m5_228 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="var newSource = ''''", span="643-643"];
m5_230 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="newSource = _getSourceMethod.Invoke(_dataFactory, new object[] { _config, date, _feedEndpoint }) as String", span="649-649"];
m5_229 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_dataFactory != null", span="645-645"];
m5_234 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="return newSource;", span="658-658"];
m5_231 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label=Exception, span="651-651"];
m5_232 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Log.Error(''SubscriptionDataReader.GetSource(): '' + err.Message)", span="653-653"];
m5_233 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Engine.ResultHandler.ErrorMessage(''Error getting string source location for custom data source: '' + err.Message, err.StackTrace)", span="654-654"];
m5_235 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.GetSource(System.DateTime)", span="641-641"];
m5_200 [cluster="System.Net.WebClient.WebClient()", file="FuturesExpiryFunctionsTests.cs", label="Entry System.Net.WebClient.WebClient()", span="0-0"];
m5_226 [cluster="QuantConnect.Lean.Engine.SubscriptionStreamReader.Dispose()", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionStreamReader.Dispose()", span="154-154"];
m5_109 [cluster="QuantConnect.Data.SubscriptionDataConfig.SetMappedSymbol(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Data.SubscriptionDataConfig.SetMappedSymbol(string)", span="137-137"];
m5_33 [cluster="object.GetType()", file="FuturesExpiryFunctionsTests.cs", label="Entry object.GetType()", span="0-0"];
m5_120 [cluster="System.NotImplementedException.NotImplementedException(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry System.NotImplementedException.NotImplementedException(string)", span="0-0"];
m5_155 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", span="622-622"];
m5_219 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="FuturesExpiryFunctionsTests.cs", label="_reader != null", span="624-624"];
m5_220 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="FuturesExpiryFunctionsTests.cs", label="_reader.Close()", span="626-626"];
m5_222 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="FuturesExpiryFunctionsTests.cs", label="_web != null", span="630-630"];
m5_221 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="FuturesExpiryFunctionsTests.cs", label="_reader.Dispose()", span="627-627"];
m5_223 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="FuturesExpiryFunctionsTests.cs", label="_web.Dispose()", span="632-632"];
m5_224 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", file="FuturesExpiryFunctionsTests.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.Dispose()", span="622-622"];
m5_42 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", span="237-237"];
m5_43 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="BaseData instance = null", span="239-239"];
m5_44 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="var instanceMarketOpen = false", span="240-240"];
m5_51 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="instance == null  && !_reader.EndOfStream", span="262-262"];
m5_77 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="_lastBarOfStream = _lastBarOutsideMarketHours ?? instance", span="339-339"];
m5_80 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="Current = instance", span="349-349"];
m5_81 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="_reader.EndOfStream && instance == null", span="352-352"];
m5_45 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="_endOfStream || _reader == null || _reader.EndOfStream", span="244-244"];
m5_46 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="_reader == null", span="246-246"];
m5_47 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="Current = null", span="249-249"];
m5_48 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="_lastBarOfStream = Current", span="254-254"];
m5_49 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="_endOfStream = true", span="256-256"];
m5_50 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="return false;", span="257-257"];
m5_52 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="var line = _reader.ReadLine()", span="265-265"];
m5_75 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="Current == null", span="333-333"];
m5_53 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="instance = _readerMethodInvoker(_dataFactory, _config, line, _date, _feedEndpoint) as BaseData", span="269-269"];
m5_55 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="Engine.ResultHandler.RuntimeError(''Error invoking '' + _config.Symbol + '' data reader. Line: '' + line + '' Error: '' + err.Message, err.StackTrace)", span="274-274"];
m5_54 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label=Exception, span="271-271"];
m5_57 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="instance != null", span="278-278"];
m5_58 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="instanceMarketOpen = _security.Exchange.DateTimeIsOpen(instance.Time)", span="280-280"];
m5_59 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="!_security.DataFilter.Filter(_security, instance)", span="285-285"];
m5_64 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="instance == null", span="297-297"];
m5_66 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="instance.Time < _periodStart", span="305-305"];
m5_67 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="_lastBarOutsideMarketHours = instance", span="307-307"];
m5_69 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="instance.Time > _periodFinish", span="311-311"];
m5_72 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="_lastBarOutsideMarketHours = instance", span="320-320"];
m5_56 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="_endOfStream = true", span="275-275"];
m5_71 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="!instanceMarketOpen", span="318-318"];
m5_73 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="!_config.ExtendedMarketHours && !instanceMarketOpen", span="324-324"];
m5_60 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="instance = null", span="287-287"];
m5_61 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label=Exception, span="291-291"];
m5_62 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="Log.Error(''SubscriptionDataReader.MoveNext(): Error applying filter: '' + err.Message)", span="293-293"];
m5_63 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="Engine.ResultHandler.RuntimeError(''Runtime error applying data filter. Assuming filter pass: '' + err.Message, err.StackTrace)", span="294-294"];
m5_65 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="Log.Trace(''SubscriptionDataReader.MoveNext(): Instance null, continuing...'')", span="299-299"];
m5_68 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="instance = null", span="308-308"];
m5_70 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="instance = null", span="313-313"];
m5_74 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="instance = null", span="326-326"];
m5_76 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="_lastBarOfStream == null", span="336-336"];
m5_79 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="Previous = Current", span="346-346"];
m5_78 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="Previous = _lastBarOfStream", span="342-342"];
m5_82 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="_endOfStream = true", span="355-355"];
m5_88 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="return true;", span="368-368"];
m5_83 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="_isFillForward && Previous != null", span="357-357"];
m5_84 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="Current = Previous.Clone(true)", span="360-360"];
m5_87 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="return false;", span="366-366"];
m5_85 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="Current.Time = _security.Exchange.TimeOfDayClosed(Previous.Time)", span="362-362"];
m5_86 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="_lastBarOfStream = Previous", span="364-364"];
m5_89 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", file="FuturesExpiryFunctionsTests.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.MoveNext()", span="237-237"];
m5_31 [cluster="QuantConnect.Lean.Engine.Results.IResultHandler.ErrorMessage(string, string)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.Results.IResultHandler.ErrorMessage(string, string)", span="114-114"];
m5_227 [cluster="System.ComponentModel.Component.Dispose()", file="FuturesExpiryFunctionsTests.cs", label="Entry System.ComponentModel.Component.Dispose()", span="0-0"];
m5_107 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetTimePriceFactor(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.GetTimePriceFactor(System.Collections.Generic.SortedDictionary<System.DateTime, decimal>, System.DateTime)", span="74-74"];
m5_93 [cluster="QuantConnect.Securities.SecurityExchange.DateTimeIsOpen(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Securities.SecurityExchange.DateTimeIsOpen(System.DateTime)", span="196-196"];
m5_204 [cluster="QuantConnect.Compression.Unzip(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Compression.Unzip(string)", span="248-248"];
m5_158 [cluster="System.Exception.Exception(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m5_37 [cluster="QuantConnect.Data.Custom.Quandl.SetAuthCode(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Data.Custom.Quandl.SetAuthCode(string)", span="108-108"];
m5_90 [cluster="QuantConnect.Lean.Engine.SubscriptionStreamReader.ReadLine()", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionStreamReader.ReadLine()", span="117-117"];
m5_97 [cluster="QuantConnect.Securities.SecurityExchange.TimeOfDayClosed(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Securities.SecurityExchange.TimeOfDayClosed(System.DateTime)", span="185-185"];
m5_199 [cluster="System.Uri.Uri(string, System.UriKind)", file="FuturesExpiryFunctionsTests.cs", label="Entry System.Uri.Uri(string, System.UriKind)", span="0-0"];
m5_225 [cluster="QuantConnect.Lean.Engine.SubscriptionStreamReader.Close()", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionStreamReader.Close()", span="146-146"];
m5_91 [cluster="Unk._readerMethodInvoker", file="FuturesExpiryFunctionsTests.cs", label="Entry Unk._readerMethodInvoker", span=""];
m5_29 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.HasScalingFactors(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.HasScalingFactors(string)", span="58-58"];
m5_35 [cluster="Unk.DelegateForCallMethod", file="FuturesExpiryFunctionsTests.cs", label="Entry Unk.DelegateForCallMethod", span=""];
m5_121 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", span="425-425"];
m5_122 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_date = date", span="428-428"];
m5_125 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="UpdateScaleFactors(date)", span="434-434"];
m5_126 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="!_security.Exchange.DateIsOpen(date)", span="438-438"];
m5_129 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="newSource = GetSource(date)", span="445-445"];
m5_142 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Log.Error(''Failed to get StreamReader for data source('' + _source + ''), symbol('' + _mappedSymbol + ''). Skipping date('' + date.ToShortDateString() + ''). Reader is null.'')", span="479-479"];
m5_123 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="var newSource = ''''", span="429-429"];
m5_124 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label=_hasScaleFactors, span="432-432"];
m5_127 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_endOfStream = true", span="440-440"];
m5_128 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="return false;", span="441-441"];
m5_130 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="newSource == ''''", span="448-448"];
m5_133 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_source != newSource && newSource != ''''", span="455-455"];
m5_135 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_source = newSource", span="460-460"];
m5_131 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_endOfStream = true", span="450-450"];
m5_132 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="return false;", span="451-451"];
m5_134 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_endOfStream = false", span="458-458"];
m5_151 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="return true;", span="506-506"];
m5_136 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Dispose()", span="462-462"];
m5_137 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_reader = GetReader(_source)", span="468-468"];
m5_138 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label=Exception, span="470-470"];
m5_141 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_reader == null", span="477-477"];
m5_139 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Log.Error(''SubscriptionDataReader.RefreshSource(): Failed to get reader: '' + err.Message)", span="472-472"];
m5_140 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="return false;", span="474-474"];
m5_146 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Current = null", span="490-490"];
m5_143 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label=_isDynamicallyLoadedData, span="482-482"];
m5_144 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Engine.ResultHandler.ErrorMessage(''We could not fetch the requested data. This may not be valid data, or a failed download of custom data. Skipping source ('' + _source + '').'')", span="484-484"];
m5_145 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="return false;", span="486-486"];
m5_147 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Previous = null", span="491-491"];
m5_148 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="MoveNext()", span="497-497"];
m5_149 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label=Exception, span="499-499"];
m5_150 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="throw new Exception(''SubscriptionDataReader.RefreshSource(): Could not MoveNext to init stream: '' + _source + '' '' + err.Message + '' >> '' + err.StackTrace);", span="501-501"];
m5_152 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.RefreshSource(System.DateTime)", span="425-425"];
m5_194 [cluster="System.IO.Directory.CreateDirectory(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry System.IO.Directory.CreateDirectory(string)", span="0-0"];
m5_116 [cluster="QuantConnect.Securities.SecurityExchange.DateTimeIsExtendedOpen(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Securities.SecurityExchange.DateTimeIsExtendedOpen(System.DateTime)", span="207-207"];
m5_207 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", span="597-597"];
m5_208 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="FuturesExpiryFunctionsTests.cs", label="StreamReader reader", span="600-600"];
m5_210 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="FuturesExpiryFunctionsTests.cs", label="var stream = _web.OpenRead(source)", span="604-604"];
m5_211 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="FuturesExpiryFunctionsTests.cs", label="source.GetExtension() == ''.zip''", span="607-607"];
m5_209 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="FuturesExpiryFunctionsTests.cs", label="_web = new WebClient()", span="603-603"];
m5_212 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="FuturesExpiryFunctionsTests.cs", label="reader = Compression.UnzipStream(stream)", span="609-609"];
m5_213 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="FuturesExpiryFunctionsTests.cs", label="reader = new StreamReader(stream)", span="613-613"];
m5_214 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="FuturesExpiryFunctionsTests.cs", label="return reader;", span="616-616"];
m5_215 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", file="FuturesExpiryFunctionsTests.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.WebReader(string)", span="597-597"];
m5_205 [cluster="QuantConnect.Lean.Engine.SubscriptionStreamReader.SubscriptionStreamReader(System.IO.StreamReader, QuantConnect.DataFeedEndpoint)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionStreamReader.SubscriptionStreamReader(System.IO.StreamReader, QuantConnect.DataFeedEndpoint)", span="104-104"];
m5_94 [cluster="QuantConnect.Securities.Interfaces.ISecurityDataFilter.Filter(QuantConnect.Securities.Security, QuantConnect.Data.BaseData)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Securities.Interfaces.ISecurityDataFilter.Filter(QuantConnect.Securities.Security, QuantConnect.Data.BaseData)", span="46-46"];
m5_196 [cluster="System.IO.File.Delete(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry System.IO.File.Delete(string)", span="0-0"];
m5_216 [cluster="System.Net.WebClient.OpenRead(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry System.Net.WebClient.OpenRead(string)", span="0-0"];
m5_193 [cluster="System.IO.Directory.Exists(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry System.IO.Directory.Exists(string)", span="0-0"];
m5_96 [cluster="QuantConnect.Data.BaseData.Clone(bool)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Data.BaseData.Clone(bool)", span="189-189"];
m5_197 [cluster="string.ToMD5()", file="FuturesExpiryFunctionsTests.cs", label="Entry string.ToMD5()", span="109-109"];
m5_113 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.ExtendedMarketOpen(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.ExtendedMarketOpen(System.DateTime)", span="406-406"];
m5_114 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.ExtendedMarketOpen(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="return _security.Exchange.DateTimeIsExtendedOpen(time);", span="408-408"];
m5_115 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.ExtendedMarketOpen(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.ExtendedMarketOpen(System.DateTime)", span="406-406"];
m5_0 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", span="161-161"];
m5_8 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_feedEndpoint = feed", span="181-181"];
m5_14 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="var userObj = _objectActivator.Invoke(new object[] { })", span="194-194"];
m5_28 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.SubscriptionDataReader(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Security, QuantConnect.DataFeedEndpoint, System.DateTime, System.DateTime)", span="161-161"];
m5_202 [cluster="QuantConnect.Lean.Engine.Results.IResultHandler.SamplePerformance(System.DateTime, decimal)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.Results.IResultHandler.SamplePerformance(System.DateTime, decimal)", span="150-150"];
m5_203 [cluster="System.IO.File.Exists(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry System.IO.File.Exists(string)", span="0-0"];
m5_201 [cluster="System.Net.WebClient.DownloadFile(string, string)", file="FuturesExpiryFunctionsTests.cs", label="Entry System.Net.WebClient.DownloadFile(string, string)", span="0-0"];
m5_217 [cluster="QuantConnect.Compression.UnzipStream(System.IO.Stream)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Compression.UnzipStream(System.IO.Stream)", span="287-287"];
m5_218 [cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", file="FuturesExpiryFunctionsTests.cs", label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0"];
m5_30 [cluster="QuantConnect.Util.ObjectActivator.GetActivator(System.Type)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Util.ObjectActivator.GetActivator(System.Type)", span="39-39"];
m5_34 [cluster="System.Type.GetMethod(string, System.Type[])", file="FuturesExpiryFunctionsTests.cs", label="Entry System.Type.GetMethod(string, System.Type[])", span="0-0"];
m5_106 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(System.Collections.Generic.SortedDictionary<System.DateTime, string>, System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMappedSymbol(System.Collections.Generic.SortedDictionary<System.DateTime, string>, System.DateTime)", span="176-176"];
m5_32 [cluster="System.Func<T, TResult>.Invoke(T)", file="FuturesExpiryFunctionsTests.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m5_98 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", span="376-376"];
m5_99 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_mappedSymbol = SubscriptionAdjustment.GetMappedSymbol(_symbolMap, date)", span="379-379"];
m5_100 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_priceFactor = SubscriptionAdjustment.GetTimePriceFactor(_priceFactors, date)", span="380-380"];
m5_101 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label=Exception, span="382-382"];
m5_103 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_config.SetPriceScaleFactor(_priceFactor)", span="386-386"];
m5_102 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Log.Error(''SubscriptionDataReader.UpdateScaleFactors(): '' + err.Message)", span="384-384"];
m5_104 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="_config.SetMappedSymbol(_mappedSymbol)", span="387-387"];
m5_105 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.UpdateScaleFactors(System.DateTime)", span="376-376"];
m5_157 [cluster="System.DateTime.ToShortDateString()", file="FuturesExpiryFunctionsTests.cs", label="Entry System.DateTime.ToShortDateString()", span="0-0"];
m5_236 [cluster="System.Reflection.MethodBase.Invoke(object, object[])", file="FuturesExpiryFunctionsTests.cs", label="Entry System.Reflection.MethodBase.Invoke(object, object[])", span="0-0"];
m5_110 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MarketOpen(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.MarketOpen(System.DateTime)", span="395-395"];
m5_111 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MarketOpen(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="return _security.Exchange.DateTimeIsOpen(time);", span="397-397"];
m5_112 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.MarketOpen(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.MarketOpen(System.DateTime)", span="395-395"];
m5_153 [cluster="QuantConnect.Securities.SecurityExchange.DateIsOpen(System.DateTime)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Securities.SecurityExchange.DateIsOpen(System.DateTime)", span="163-163"];
m5_41 [cluster="System.Collections.Generic.SortedDictionary<TKey, TValue>.SortedDictionary()", file="FuturesExpiryFunctionsTests.cs", label="Entry System.Collections.Generic.SortedDictionary<TKey, TValue>.SortedDictionary()", span="0-0"];
m5_156 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", span="515-515"];
m5_159 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="string cache = ''./cache/data''", span="518-518"];
m5_165 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="var filename = source.ToMD5() + source.GetExtension()", span="525-525"];
m5_170 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="var uri = new Uri(source, UriKind.RelativeOrAbsolute)", span="534-534"];
m5_173 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="client.DownloadFile(source, location)", span="543-543"];
m5_179 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="File.Exists(source)", span="558-558"];
m5_180 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="source.GetExtension() == ''.zip''", span="560-560"];
m5_181 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="var sr = Compression.Unzip(source)", span="563-563"];
m5_185 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="reader = new SubscriptionStreamReader(source, _feedEndpoint)", span="570-570"];
m5_186 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="Log.Trace(''SubscriptionDataReader.GetReader(): Could not find QC Data, skipped: '' + source)", span="575-575"];
m5_190 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="reader = new SubscriptionStreamReader(source, _feedEndpoint)", span="583-583"];
m5_160 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="SubscriptionStreamReader reader = null", span="519-519"];
m5_161 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="!Directory.Exists(cache)", span="520-520"];
m5_162 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="Directory.CreateDirectory(cache)", span="520-520"];
m5_163 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="Directory.EnumerateFiles(cache)", span="521-521"];
m5_166 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="var location = cache + @''/'' + filename", span="526-526"];
m5_164 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="File.Delete(file)", span="521-521"];
m5_167 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label=_feedEndpoint, span="529-529"];
m5_174 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="source = location", span="546-546"];
m5_168 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="DataFeedEndpoint.FileSystem", span="531-531"];
m5_189 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="DataFeedEndpoint.LiveTrading", span="582-582"];
m5_169 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="DataFeedEndpoint.Backtesting", span="532-532"];
m5_171 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="uri.IsAbsoluteUri && !uri.IsLoopback", span="537-537"];
m5_172 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="var client = new WebClient()", span="541-541"];
m5_175 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label=Exception, span="549-549"];
m5_176 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="Engine.ResultHandler.ErrorMessage(''Error downloading custom data source file, skipped: '' + source + '' Err: '' + err.Message, err.StackTrace)", span="551-551"];
m5_177 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="Engine.ResultHandler.SamplePerformance(_date.Date, 0)", span="552-552"];
m5_178 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="return null;", span="553-553"];
m5_182 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="sr == null", span="564-564"];
m5_184 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="reader = new SubscriptionStreamReader(sr, _feedEndpoint)", span="565-565"];
m5_183 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="return null;", span="564-564"];
m5_187 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="Engine.ResultHandler.SamplePerformance(_date.Date, 0)", span="576-576"];
m5_188 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="return null;", span="577-577"];
m5_191 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="return reader;", span="587-587"];
m5_192 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", file="FuturesExpiryFunctionsTests.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.GetReader(string)", span="515-515"];
m5_108 [cluster="QuantConnect.Data.SubscriptionDataConfig.SetPriceScaleFactor(decimal)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Data.SubscriptionDataConfig.SetPriceScaleFactor(decimal)", span="128-128"];
m5_195 [cluster="System.IO.Directory.EnumerateFiles(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry System.IO.Directory.EnumerateFiles(string)", span="0-0"];
m5_95 [cluster="QuantConnect.Logging.Log.Trace(string, bool)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="128-128"];
m5_38 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.GetFactorTable(string)", span="92-92"];
m5_117 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Reset()", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionDataReader.Reset()", span="415-415"];
m5_118 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Reset()", file="FuturesExpiryFunctionsTests.cs", label="throw new NotImplementedException(''Reset method not implemented. Assumes loop will only be used once.'');", span="417-417"];
m5_119 [cluster="QuantConnect.Lean.Engine.SubscriptionDataReader.Reset()", file="FuturesExpiryFunctionsTests.cs", label="Exit QuantConnect.Lean.Engine.SubscriptionDataReader.Reset()", span="415-415"];
m5_36 [cluster="QuantConnect.Configuration.Config.Get(string, string)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="90-90"];
m5_39 [cluster="QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.SubscriptionAdjustment.GetMapTable(string)", span="119-119"];
m5_92 [cluster="QuantConnect.Lean.Engine.Results.IResultHandler.RuntimeError(string, string)", file="FuturesExpiryFunctionsTests.cs", label="Entry QuantConnect.Lean.Engine.Results.IResultHandler.RuntimeError(string, string)", span="121-121"];
m5_237 [file="FuturesExpiryFunctionsTests.cs", label="QuantConnect.Lean.Engine.SubscriptionDataReader", span=""];
m6_38 [cluster="System.DateTime.DaysInMonth(int, int)", file="FuturesExpiryUtilityFunctions.cs", label="Entry System.DateTime.DaysInMonth(int, int)", span="0-0"];
m6_42 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.ThirdFriday(System.DateTime)", file="FuturesExpiryUtilityFunctions.cs", label="Entry QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.ThirdFriday(System.DateTime)", span="103-103"];
m6_45 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.ThirdFriday(System.DateTime)", file="FuturesExpiryUtilityFunctions.cs", label="Exit QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.ThirdFriday(System.DateTime)", span="103-103"];
m6_22 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NotHoliday(System.DateTime)", file="FuturesExpiryUtilityFunctions.cs", label="Entry QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NotHoliday(System.DateTime)", span="129-129"];
m6_54 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NotHoliday(System.DateTime)", file="FuturesExpiryUtilityFunctions.cs", label="Exit QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NotHoliday(System.DateTime)", span="129-129"];
m6_0 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.AddBusinessDays(System.DateTime, int)", file="FuturesExpiryUtilityFunctions.cs", label="Entry QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.AddBusinessDays(System.DateTime, int)", span="32-32"];
m6_20 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.AddBusinessDays(System.DateTime, int)", file="FuturesExpiryUtilityFunctions.cs", label="Exit QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.AddBusinessDays(System.DateTime, int)", span="32-32"];
m6_23 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NthLastBusinessDay(System.DateTime, int)", file="FuturesExpiryUtilityFunctions.cs", label="Entry QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NthLastBusinessDay(System.DateTime, int)", span="74-74"];
m6_37 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NthLastBusinessDay(System.DateTime, int)", file="FuturesExpiryUtilityFunctions.cs", label="Exit QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NthLastBusinessDay(System.DateTime, int)", span="74-74"];
m6_39 [cluster="System.DateTime.DateTime(int, int, int)", file="FuturesExpiryUtilityFunctions.cs", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
m6_40 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", file="FuturesExpiryUtilityFunctions.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0"];
m6_55 [cluster="System.DateTime.IsCommonBusinessDay()", file="FuturesExpiryUtilityFunctions.cs", label="Entry System.DateTime.IsCommonBusinessDay()", span="586-586"];
m6_46 [cluster="System.Linq.Enumerable.Range(int, int)", file="FuturesExpiryUtilityFunctions.cs", label="Entry System.Linq.Enumerable.Range(int, int)", span="0-0"];
m6_49 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.ThirdWednesday(System.DateTime)", file="FuturesExpiryUtilityFunctions.cs", label="Entry QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.ThirdWednesday(System.DateTime)", span="116-116"];
m6_52 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.ThirdWednesday(System.DateTime)", file="FuturesExpiryUtilityFunctions.cs", label="Exit QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.ThirdWednesday(System.DateTime)", span="116-116"];
m6_47 [cluster="DateTime.cstr", file="FuturesExpiryUtilityFunctions.cs", label="Entry DateTime.cstr", span=""];
m6_57 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NotPrecededByHoliday(System.DateTime)", file="FuturesExpiryUtilityFunctions.cs", label="Entry QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NotPrecededByHoliday(System.DateTime)", span="139-139"];
m6_69 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NotPrecededByHoliday(System.DateTime)", file="FuturesExpiryUtilityFunctions.cs", label="Exit QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NotPrecededByHoliday(System.DateTime)", span="139-139"];
m6_21 [cluster="System.DateTime.AddDays(double)", file="FuturesExpiryUtilityFunctions.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m6_70 [cluster="System.ArgumentException.ArgumentException(string)", file="FuturesExpiryUtilityFunctions.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m6_48 [cluster="Unk.ElementAt", file="FuturesExpiryUtilityFunctions.cs", label="Entry Unk.ElementAt", span=""];
m6_56 [cluster="System.Collections.Generic.HashSet<T>.Contains(T)", file="FuturesExpiryUtilityFunctions.cs", label="Entry System.Collections.Generic.HashSet<T>.Contains(T)", span="0-0"];
m7_6 [cluster="System.DateTime.ParseExact(string, string, System.IFormatProvider)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry System.DateTime.ParseExact(string, string, System.IFormatProvider)", span="0-0"];
m7_46 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotHoliday_ForABusinessDay_ShouldReturnTrue(string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotHoliday_ForABusinessDay_ShouldReturnTrue(string)", span="135-135"];
m7_50 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotHoliday_ForABusinessDay_ShouldReturnTrue(string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Exit QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotHoliday_ForABusinessDay_ShouldReturnTrue(string)", span="135-135"];
m7_8 [cluster="Unk.AreEqual", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry Unk.AreEqual", span=""];
m7_22 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NthLastBusinessDay_WithInputsMoreThanDaysInMonth_ShouldThrowException(string, int)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NthLastBusinessDay_WithInputsMoreThanDaysInMonth_ShouldThrowException(string, int)", span="75-75"];
m7_25 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NthLastBusinessDay_WithInputsMoreThanDaysInMonth_ShouldThrowException(string, int)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Exit QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NthLastBusinessDay_WithInputsMoreThanDaysInMonth_ShouldThrowException(string, int)", span="75-75"];
m7_32 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.ThirdFriday(System.DateTime)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.ThirdFriday(System.DateTime)", span="103-103"];
m7_7 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.AddBusinessDays(System.DateTime, int)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.AddBusinessDays(System.DateTime, int)", span="32-32"];
m7_21 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NthLastBusinessDay(System.DateTime, int)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NthLastBusinessDay(System.DateTime, int)", span="74-74"];
m7_45 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NotHoliday(System.DateTime)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NotHoliday(System.DateTime)", span="129-129"];
m7_33 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.ThirdWednesday_WithNormalMonth_ShouldReturnThridWednesday(string, string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.ThirdWednesday_WithNormalMonth_ShouldReturnThridWednesday(string, string)", span="104-104"];
m7_38 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.ThirdWednesday_WithNormalMonth_ShouldReturnThridWednesday(string, string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Exit QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.ThirdWednesday_WithNormalMonth_ShouldReturnThridWednesday(string, string)", span="104-104"];
m7_9 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.AddBusinessDays_WithNegativeInput_ShouldReturnNthprecedingBusinessDay(string, int, string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.AddBusinessDays_WithNegativeInput_ShouldReturnNthprecedingBusinessDay(string, int, string)", span="43-43"];
m7_14 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.AddBusinessDays_WithNegativeInput_ShouldReturnNthprecedingBusinessDay(string, int, string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Exit QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.AddBusinessDays_WithNegativeInput_ShouldReturnNthprecedingBusinessDay(string, int, string)", span="43-43"];
m7_0 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.AddBusinessDays_WithPositiveInput_ShouldReturnNthSuccedingBusinessDay(string, int, string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.AddBusinessDays_WithPositiveInput_ShouldReturnNthSuccedingBusinessDay(string, int, string)", span="27-27"];
m7_5 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.AddBusinessDays_WithPositiveInput_ShouldReturnNthSuccedingBusinessDay(string, int, string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Exit QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.AddBusinessDays_WithPositiveInput_ShouldReturnNthSuccedingBusinessDay(string, int, string)", span="27-27"];
m7_56 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotPrecededByHoliday_ForThursdayWithNoHolidayInFourPrecedingDays_ShouldReturnTrue(string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotPrecededByHoliday_ForThursdayWithNoHolidayInFourPrecedingDays_ShouldReturnTrue(string)", span="163-163"];
m7_60 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotPrecededByHoliday_ForThursdayWithNoHolidayInFourPrecedingDays_ShouldReturnTrue(string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Exit QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotPrecededByHoliday_ForThursdayWithNoHolidayInFourPrecedingDays_ShouldReturnTrue(string)", span="163-163"];
m7_61 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotPrecededByHoliday_ForThursdayWithHolidayInFourPrecedingDays_ShouldReturnFalse(string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotPrecededByHoliday_ForThursdayWithHolidayInFourPrecedingDays_ShouldReturnFalse(string)", span="177-177"];
m7_65 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotPrecededByHoliday_ForThursdayWithHolidayInFourPrecedingDays_ShouldReturnFalse(string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Exit QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotPrecededByHoliday_ForThursdayWithHolidayInFourPrecedingDays_ShouldReturnFalse(string)", span="177-177"];
m7_15 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NthLastBusinessDay_WithInputsLessThanDaysInMonth_ShouldReturnNthLastBusinessDay(string, int, string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NthLastBusinessDay_WithInputsLessThanDaysInMonth_ShouldReturnNthLastBusinessDay(string, int, string)", span="59-59"];
m7_20 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NthLastBusinessDay_WithInputsLessThanDaysInMonth_ShouldReturnNthLastBusinessDay(string, int, string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Exit QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NthLastBusinessDay_WithInputsLessThanDaysInMonth_ShouldReturnNthLastBusinessDay(string, int, string)", span="59-59"];
m7_39 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.ThirdWednesday(System.DateTime)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.ThirdWednesday(System.DateTime)", span="116-116"];
m7_55 [cluster="QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NotPrecededByHoliday(System.DateTime)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Securities.Future.FuturesExpiryUtilityFunctions.NotPrecededByHoliday(System.DateTime)", span="139-139"];
m7_40 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotHoliday_ForAHoliday_ShouldReturnFalse(string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotHoliday_ForAHoliday_ShouldReturnFalse(string)", span="120-120"];
m7_44 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotHoliday_ForAHoliday_ShouldReturnFalse(string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Exit QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotHoliday_ForAHoliday_ShouldReturnFalse(string)", span="120-120"];
m7_26 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.ThirdFriday_WithNormalMonth_ShouldReturnThridFriday(string, string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.ThirdFriday_WithNormalMonth_ShouldReturnThridFriday(string, string)", span="88-88"];
m7_31 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.ThirdFriday_WithNormalMonth_ShouldReturnThridFriday(string, string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Exit QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.ThirdFriday_WithNormalMonth_ShouldReturnThridFriday(string, string)", span="88-88"];
m7_51 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotPrecededByHoliday_WithNonThrusdayWeekday_ShouldThrowException(string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Entry QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotPrecededByHoliday_WithNonThrusdayWeekday_ShouldThrowException(string)", span="151-151"];
m7_54 [cluster="QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotPrecededByHoliday_WithNonThrusdayWeekday_ShouldThrowException(string)", file="FuturesExpiryUtilityFunctionsTests.cs", label="Exit QuantConnect.Tests.Common.Securities.Futures.FuturesExpiryUtilityFunctionsTests.NotPrecededByHoliday_WithNonThrusdayWeekday_ShouldThrowException(string)", span="151-151"];
n226 -> n53  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n56  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n168  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n172  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n184  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n65  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n73  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n76  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n85  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n95  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n105  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n123  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n129  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n130  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n218  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n222  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n226 -> n223  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n227 -> n30  [color=darkseagreen4, key=1, label=algorithmName, style=dashed];
n228 -> n46  [color=darkseagreen4, key=1, label=liveJob, style=dashed];
n229 -> n172  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n229 -> n174  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n229 -> n175  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n229 -> n176  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n229 -> n177  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n229 -> n178  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n229 -> n179  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n229 -> n181  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n229 -> n199  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n230 -> n174  [color=darkseagreen4, key=1, label="QuantConnect.Packets.AlgorithmNodePacket", style=dashed];
n231 -> n178  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.RealTime.IRealTimeHandler", style=dashed];
n232 -> n180  [color=darkseagreen4, key=1, label=liveJob, style=dashed];
n233 -> n196  [color=darkseagreen4, key=1, label=order, style=dashed];
n234 -> n208  [color=darkseagreen4, key=1, label=canonicalOption, style=dashed];
n10 -> n21  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<string>", style=dashed];
n10 -> n22  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<string>", style=dashed];
n10 -> n24  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<string>", style=dashed];
n11 -> n13  [color=darkseagreen4, key=1, label=error, style=dashed];
n11 -> n14  [color=darkseagreen4, key=1, label=algorithm, style=dashed];
n24 -> n29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n20 -> n22  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<string>", style=dashed];
n20 -> n24  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<string>", style=dashed];
n23 -> n30  [color=darkseagreen4, key=1, label=algorithmName, style=dashed];
n34 -> n46  [color=darkseagreen4, key=1, label=liveJob, style=dashed];
n37 -> n45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n38 -> n41  [color=darkseagreen4, key=1, label="out QuantConnect.Interfaces.IBrokerageFactory", style=dashed];
n49 -> n60  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.IResultHandler", style=dashed];
n49 -> n172  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n174  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n175  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n176  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n177  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n178  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n179  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n181  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n67  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.IResultHandler", style=dashed];
n49 -> n70  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IBrokerage", style=dashed];
n49 -> n75  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IBrokerage", style=dashed];
n49 -> n82  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n92  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler", style=dashed];
n49 -> n199  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n106  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n115  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n118  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n119  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n125  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n51 -> n55  [color=darkseagreen4, key=1, label=liveJob, style=dashed];
n51 -> n180  [color=darkseagreen4, key=1, label=liveJob, style=dashed];
n63 -> n171  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n92 -> n195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n98 -> n101  [color=darkseagreen4, key=1, label=holdings, style=dashed];
n100 -> n118  [color=darkseagreen4, key=1, label=minResolution, style=dashed];
n199 -> n204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n112 -> n208  [color=darkseagreen4, key=1, label=canonicalOption, style=dashed];
n113 -> n207  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n58 -> n167  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BrokerageMessageEvent", style=dashed];
n58 -> n168  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BrokerageMessageEvent", style=dashed];
n80 -> n82  [color=darkseagreen4, key=1, label=cash, style=dashed];
n89 -> n92  [color=darkseagreen4, key=1, label=order, style=dashed];
n89 -> n196  [color=darkseagreen4, key=1, label=order, style=dashed];
n99 -> n103  [color=darkseagreen4, key=1, label=supportedSecurityTypes, style=dashed];
n99 -> n105  [color=darkseagreen4, key=1, label=supportedSecurityTypes, style=dashed];
n101 -> n103  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n104  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n105  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n106  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n107  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n110  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n115  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n116  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n118  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n119  [color=darkseagreen4, key=1, label=holding, style=dashed];
n208 -> n208  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<QuantConnect.Symbol, QuantConnect.Data.UniverseSelection.Universe>", style=dashed];
n166 -> n168  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BrokerageMessageEvent", style=dashed];
n182 -> n182  [color=darkseagreen4, key=1, label=kvp, style=dashed];
n205 -> n205  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<QuantConnect.Symbol, QuantConnect.Securities.Security>", style=dashed];
n210 -> n212  [color=darkseagreen4, key=1, label=dataFeedsConfigString, style=dashed];
n211 -> n214  [color=darkseagreen4, key=1, label=dataFeeds, style=dashed];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters", style=dashed];
m1_0 -> m1_6  [color=darkseagreen4, key=1, label="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters", style=dashed];
m1_11 -> m1_37  [color=darkseagreen4, key=1, label=basicTemplateStatistics, style=dashed];
m1_12 -> m1_37  [color=darkseagreen4, key=1, label=basicTemplateOptionsStatistics, style=dashed];
m1_37 -> m1_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_13 -> m1_37  [color=darkseagreen4, key=1, label=limitFillRegressionStatistics, style=dashed];
m1_14 -> m1_37  [color=darkseagreen4, key=1, label=updateOrderRegressionStatistics, style=dashed];
m1_15 -> m1_37  [color=darkseagreen4, key=1, label=regressionStatistics, style=dashed];
m1_16 -> m1_37  [color=darkseagreen4, key=1, label=universeSelectionRegressionStatistics, style=dashed];
m1_17 -> m1_37  [color=darkseagreen4, key=1, label=customDataRegressionStatistics, style=dashed];
m1_18 -> m1_37  [color=darkseagreen4, key=1, label=addRemoveSecurityRegressionStatistics, style=dashed];
m1_19 -> m1_37  [color=darkseagreen4, key=1, label=dropboxBaseDataUniverseSelectionStatistics, style=dashed];
m1_20 -> m1_37  [color=darkseagreen4, key=1, label=dropboxUniverseSelectionStatistics, style=dashed];
m1_21 -> m1_37  [color=darkseagreen4, key=1, label=parameterizedStatistics, style=dashed];
m1_22 -> m1_37  [color=darkseagreen4, key=1, label=historyAlgorithmStatistics, style=dashed];
m1_23 -> m1_37  [color=darkseagreen4, key=1, label=coarseFundamentalTop5AlgorithmStatistics, style=dashed];
m1_24 -> m1_37  [color=darkseagreen4, key=1, label=coarseFineFundamentalRegressionAlgorithmStatistics, style=dashed];
m1_25 -> m1_37  [color=darkseagreen4, key=1, label=macdTrendAlgorithmStatistics, style=dashed];
m1_26 -> m1_37  [color=darkseagreen4, key=1, label=optionSplitRegressionAlgorithmStatistics, style=dashed];
m1_27 -> m1_37  [color=darkseagreen4, key=1, label=optionRenameRegressionAlgorithmStatistics, style=dashed];
m1_28 -> m1_37  [color=darkseagreen4, key=1, label=optionOpenInterestRegressionAlgorithmStatistics, style=dashed];
m1_29 -> m1_37  [color=darkseagreen4, key=1, label=optionChainConsistencyRegressionAlgorithmStatistics, style=dashed];
m1_30 -> m1_37  [color=darkseagreen4, key=1, label=weeklyUniverseSelectionRegressionAlgorithmStatistics, style=dashed];
m1_31 -> m1_37  [color=darkseagreen4, key=1, label=optionExerciseAssignRegressionAlgorithmStatistics, style=dashed];
m1_32 -> m1_37  [color=darkseagreen4, key=1, label=basicTemplateDailyStatistics, style=dashed];
m1_33 -> m1_37  [color=darkseagreen4, key=1, label=hourSplitStatistics, style=dashed];
m1_34 -> m1_37  [color=darkseagreen4, key=1, label=hourReverseSplitStatistics, style=dashed];
m1_35 -> m1_37  [color=darkseagreen4, key=1, label=fractionalQuantityRegressionStatistics, style=dashed];
m5_228 -> m5_234  [color=darkseagreen4, key=1, label=newSource, style=dashed];
m5_43 -> m5_51  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_43 -> m5_81  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_52 -> m5_55  [color=darkseagreen4, key=1, label=line, style=dashed];
m5_53 -> m5_59  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_53 -> m5_64  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_53 -> m5_66  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_53 -> m5_69  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_53 -> m5_81  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_58 -> m5_71  [color=darkseagreen4, key=1, label=instanceMarketOpen, style=dashed];
m5_58 -> m5_73  [color=darkseagreen4, key=1, label=instanceMarketOpen, style=dashed];
m5_60 -> m5_64  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_60 -> m5_66  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_60 -> m5_69  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_60 -> m5_81  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_68 -> m5_69  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_68 -> m5_81  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_70 -> m5_81  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_74 -> m5_81  [color=darkseagreen4, key=1, label=instance, style=dashed];
m5_121 -> m5_125  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m5_121 -> m5_126  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m5_121 -> m5_142  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m5_129 -> m5_133  [color=darkseagreen4, key=1, label=newSource, style=dashed];
m5_207 -> m5_211  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_156 -> m5_173  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_156 -> m5_179  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_156 -> m5_180  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_156 -> m5_186  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_159 -> m5_161  [color=darkseagreen4, key=1, label=cache, style=dashed];
m5_159 -> m5_162  [color=darkseagreen4, key=1, label=cache, style=dashed];
m5_159 -> m5_163  [color=darkseagreen4, key=1, label=cache, style=dashed];
m5_166 -> m5_173  [color=darkseagreen4, key=1, label=location, style=dashed];
m5_174 -> m5_176  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_174 -> m5_180  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_174 -> m5_186  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_237 -> m5_45  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_46  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_51  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_55  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_59  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_66  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_69  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_73  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_75  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_76  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_81  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_83  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_103  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_104  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_111  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_114  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_124  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_125  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_126  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_133  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_136  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_141  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_142  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_143  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_144  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_148  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_150  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_167  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_177  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_187  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_219  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_220  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_221  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_222  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_223  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
m5_237 -> m5_229  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.SubscriptionDataReader", style=dashed];
}
