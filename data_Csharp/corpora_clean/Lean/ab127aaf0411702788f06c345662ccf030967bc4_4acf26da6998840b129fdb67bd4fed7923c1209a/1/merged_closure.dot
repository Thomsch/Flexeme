digraph  {
n0 [cluster="QuantConnect.Tests.Indicators.MovingAverageConvergenceDivergenceTests.CreateIndicator()", label="Entry QuantConnect.Tests.Indicators.MovingAverageConvergenceDivergenceTests.CreateIndicator()", span="24-24"];
n1 [cluster="QuantConnect.Tests.Indicators.MovingAverageConvergenceDivergenceTests.CreateIndicator()", label="return new MovingAverageConvergenceDivergence(12, 26, 9);", span="26-26"];
n2 [cluster="QuantConnect.Tests.Indicators.MovingAverageConvergenceDivergenceTests.CreateIndicator()", label="Exit QuantConnect.Tests.Indicators.MovingAverageConvergenceDivergenceTests.CreateIndicator()", span="24-24"];
n3 [cluster="QuantConnect.Indicators.MovingAverageConvergenceDivergence.MovingAverageConvergenceDivergence(int, int, int, QuantConnect.Indicators.MovingAverageType)", label="Entry QuantConnect.Indicators.MovingAverageConvergenceDivergence.MovingAverageConvergenceDivergence(int, int, int, QuantConnect.Indicators.MovingAverageType)", span="62-62"];
d10 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", color=green, community=0, label="var liveJob = new LiveNodePacket\r\n                {\r\n                    Type = PacketType.LiveNode,\r\n                    Algorithm = File.ReadAllBytes(AlgorithmLocation),\r\n                    Brokerage = Config.Get(''live-mode-brokerage'', PaperBrokerageTypeName),\r\n                    Channel = AccessToken,\r\n                    UserId = UserId,\r\n                    ProjectId = ProjectId,\r\n                    Version = Globals.Version,\r\n                    DeployId = AlgorithmTypeName,\r\n                    RamAllocation = int.MaxValue,\r\n                    Parameters = parameters,\r\n                    Language = Language,\r\n                    Controls = new Controls()\r\n                    {\r\n                        MinuteLimit = Config.GetInt(''symbol-minute-limit'', 10000),\r\n                        SecondLimit = Config.GetInt(''symbol-second-limit'', 10000),\r\n                        TickLimit = Config.GetInt(''symbol-tick-limit'', 10000)\r\n                    }\r\n                }", prediction=0, span="82-101"];
d41 [label="QuantConnect.Queues.JobQueue", span=""];
d2 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="Entry QuantConnect.Queues.JobQueue.NextJob(out string)", span="66-66"];
d5 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="var parameters = new Dictionary<string, string>()", span="72-72"];
d8 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="parameters = JsonConvert.DeserializeObject<Dictionary<string, string>>(parametersConfigString)", span="76-76"];
d9 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label=_liveMode, span="80-80"];
d11 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="var brokerageFactory = Composer.Instance.Single<IBrokerageFactory>(factory => factory.BrokerageType.MatchesTypeName(liveJob.Brokerage))", span="106-106"];
d23 [cluster="QuantConnect.Packets.LiveNodePacket.LiveNodePacket()", label="Entry QuantConnect.Packets.LiveNodePacket.LiveNodePacket()", span="47-47"];
d24 [cluster="System.IO.File.ReadAllBytes(string)", label="Entry System.IO.File.ReadAllBytes(string)", span="0-0"];
d21 [cluster="QuantConnect.Configuration.Config.Get(string, string)", label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="90-90"];
d25 [cluster="QuantConnect.Packets.Controls.Controls()", label="Entry QuantConnect.Packets.Controls.Controls()", span="46-46"];
d26 [cluster="QuantConnect.Configuration.Config.GetInt(string, int)", label="Entry QuantConnect.Configuration.Config.GetInt(string, int)", span="152-152"];
d32 [cluster="lambda expression", label="factory.BrokerageType.MatchesTypeName(liveJob.Brokerage)", span="106-106"];
d12 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="liveJob.BrokerageData = brokerageFactory.BrokerageData", span="107-107"];
d14 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="Log.Error(err, string.Format(''Error resolving BrokerageData for live job for brokerage {0}:'', liveJob.Brokerage))", span="111-111"];
d15 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="return liveJob;", span="114-114"];
d3 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="location = AlgorithmLocation", span="68-68"];
d16 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="var backtestJob = new BacktestNodePacket(0, 0, '''', new byte[] {}, 10000, ''local'')\r\n            {\r\n                Type = PacketType.BacktestNode,\r\n                Algorithm = File.ReadAllBytes(AlgorithmLocation),\r\n                Channel = AccessToken,\r\n                UserId = UserId,\r\n                ProjectId = ProjectId,\r\n                Version = Globals.Version,\r\n                BacktestId = AlgorithmTypeName,\r\n                RamAllocation = int.MaxValue,\r\n                Language = Language,\r\n                Parameters = parameters\r\n            }", span="118-130"];
d18 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="Exit QuantConnect.Queues.JobQueue.NextJob(out string)", span="66-66"];
d4 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="Log.Trace(''JobQueue.NextJob(): Selected '' + location)", span="69-69"];
d6 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="var parametersConfigString = Config.Get(''parameters'')", span="73-73"];
d20 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
d7 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="parametersConfigString != string.Empty", span="74-74"];
d22 [cluster="Unk.>", label="Entry Unk.>", span=""];
d27 [cluster="QuantConnect.Util.Composer.Single<T>(System.Func<T, bool>)", label="Entry QuantConnect.Util.Composer.Single<T>(System.Func<T, bool>)", span="60-60"];
d31 [cluster="lambda expression", label="Entry lambda expression", span="106-106"];
d42 [label=liveJob, span=""];
d33 [cluster="lambda expression", label="Exit lambda expression", span="106-106"];
d34 [cluster="System.Type.MatchesTypeName(string)", label="Entry System.Type.MatchesTypeName(string)", span="512-512"];
d13 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label=Exception, span="109-109"];
d28 [cluster="string.Format(string, object)", label="Entry string.Format(string, object)", span="0-0"];
d29 [cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)", label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98"];
d17 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", label="return backtestJob;", span="132-132"];
d30 [cluster="QuantConnect.Packets.BacktestNodePacket.BacktestNodePacket(int, int, string, byte[], decimal, string, QuantConnect.UserPlan)", label="Entry QuantConnect.Packets.BacktestNodePacket.BacktestNodePacket(int, int, string, byte[], decimal, string, QuantConnect.UserPlan)", span="81-81"];
d19 [cluster="QuantConnect.Logging.Log.Trace(string, bool)", label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106"];
d10 -> d32  [color=green, key=1, label=liveJob, style=dashed];
d10 -> d14  [color=green, key=1, label=liveJob, style=dashed];
d10 -> d15  [color=green, key=1, label=liveJob, style=dashed];
d41 -> d9  [color=darkseagreen4, key=1, label="QuantConnect.Queues.JobQueue", style=dashed];
d11 -> d31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d3 -> d18  [color=darkseagreen4, key=1, label="out string", style=dashed];
d42 -> d32  [color=darkseagreen4, key=1, label=liveJob, style=dashed];
}
