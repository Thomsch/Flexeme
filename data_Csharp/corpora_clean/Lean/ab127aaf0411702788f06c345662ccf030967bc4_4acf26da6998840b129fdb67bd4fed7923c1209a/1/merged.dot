digraph  {
n0 [label="Entry QuantConnect.Tests.Indicators.MovingAverageConvergenceDivergenceTests.CreateIndicator()", span="24-24", cluster="QuantConnect.Tests.Indicators.MovingAverageConvergenceDivergenceTests.CreateIndicator()"];
n1 [label="return new MovingAverageConvergenceDivergence(12, 26, 9);", span="26-26", cluster="QuantConnect.Tests.Indicators.MovingAverageConvergenceDivergenceTests.CreateIndicator()"];
n2 [label="Exit QuantConnect.Tests.Indicators.MovingAverageConvergenceDivergenceTests.CreateIndicator()", span="24-24", cluster="QuantConnect.Tests.Indicators.MovingAverageConvergenceDivergenceTests.CreateIndicator()"];
n3 [label="Entry QuantConnect.Indicators.MovingAverageConvergenceDivergence.MovingAverageConvergenceDivergence(int, int, int, QuantConnect.Indicators.MovingAverageType)", span="62-62", cluster="QuantConnect.Indicators.MovingAverageConvergenceDivergence.MovingAverageConvergenceDivergence(int, int, int, QuantConnect.Indicators.MovingAverageType)"];
d10 [label="var liveJob = new LiveNodePacket\r\n                {\r\n                    Type = PacketType.LiveNode,\r\n                    Algorithm = File.ReadAllBytes(AlgorithmLocation),\r\n                    Brokerage = Config.Get(''live-mode-brokerage'', PaperBrokerageTypeName),\r\n                    Channel = AccessToken,\r\n                    UserId = UserId,\r\n                    ProjectId = ProjectId,\r\n                    Version = Globals.Version,\r\n                    DeployId = AlgorithmTypeName,\r\n                    RamAllocation = int.MaxValue,\r\n                    Parameters = parameters,\r\n                    Language = Language,\r\n                    Controls = new Controls()\r\n                    {\r\n                        MinuteLimit = Config.GetInt(''symbol-minute-limit'', 10000),\r\n                        SecondLimit = Config.GetInt(''symbol-second-limit'', 10000),\r\n                        TickLimit = Config.GetInt(''symbol-tick-limit'', 10000)\r\n                    }\r\n                }", span="82-101", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", color=green, community=0];
d41 [label="QuantConnect.Queues.JobQueue", span=""];
d2 [label="Entry QuantConnect.Queues.JobQueue.NextJob(out string)", span="66-66", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d5 [label="var parameters = new Dictionary<string, string>()", span="72-72", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d8 [label="parameters = JsonConvert.DeserializeObject<Dictionary<string, string>>(parametersConfigString)", span="76-76", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d9 [label=_liveMode, span="80-80", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d11 [label="var brokerageFactory = Composer.Instance.Single<IBrokerageFactory>(factory => factory.BrokerageType.MatchesTypeName(liveJob.Brokerage))", span="106-106", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d23 [label="Entry QuantConnect.Packets.LiveNodePacket.LiveNodePacket()", span="47-47", cluster="QuantConnect.Packets.LiveNodePacket.LiveNodePacket()"];
d24 [label="Entry System.IO.File.ReadAllBytes(string)", span="0-0", cluster="System.IO.File.ReadAllBytes(string)"];
d21 [label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="90-90", cluster="QuantConnect.Configuration.Config.Get(string, string)"];
d25 [label="Entry QuantConnect.Packets.Controls.Controls()", span="46-46", cluster="QuantConnect.Packets.Controls.Controls()"];
d26 [label="Entry QuantConnect.Configuration.Config.GetInt(string, int)", span="152-152", cluster="QuantConnect.Configuration.Config.GetInt(string, int)"];
d32 [label="factory.BrokerageType.MatchesTypeName(liveJob.Brokerage)", span="106-106", cluster="lambda expression"];
d12 [label="liveJob.BrokerageData = brokerageFactory.BrokerageData", span="107-107", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d14 [label="Log.Error(err, string.Format(''Error resolving BrokerageData for live job for brokerage {0}:'', liveJob.Brokerage))", span="111-111", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d15 [label="return liveJob;", span="114-114", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d3 [label="location = AlgorithmLocation", span="68-68", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d16 [label="var backtestJob = new BacktestNodePacket(0, 0, '''', new byte[] {}, 10000, ''local'')\r\n            {\r\n                Type = PacketType.BacktestNode,\r\n                Algorithm = File.ReadAllBytes(AlgorithmLocation),\r\n                Channel = AccessToken,\r\n                UserId = UserId,\r\n                ProjectId = ProjectId,\r\n                Version = Globals.Version,\r\n                BacktestId = AlgorithmTypeName,\r\n                RamAllocation = int.MaxValue,\r\n                Language = Language,\r\n                Parameters = parameters\r\n            }", span="118-130", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d18 [label="Exit QuantConnect.Queues.JobQueue.NextJob(out string)", span="66-66", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d4 [label="Log.Trace(''JobQueue.NextJob(): Selected '' + location)", span="69-69", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d6 [label="var parametersConfigString = Config.Get(''parameters'')", span="73-73", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d20 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
d7 [label="parametersConfigString != string.Empty", span="74-74", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d22 [label="Entry Unk.>", span="", cluster="Unk.>"];
d27 [label="Entry QuantConnect.Util.Composer.Single<T>(System.Func<T, bool>)", span="60-60", cluster="QuantConnect.Util.Composer.Single<T>(System.Func<T, bool>)"];
d31 [label="Entry lambda expression", span="106-106", cluster="lambda expression"];
d42 [label=liveJob, span=""];
d33 [label="Exit lambda expression", span="106-106", cluster="lambda expression"];
d34 [label="Entry System.Type.MatchesTypeName(string)", span="512-512", cluster="System.Type.MatchesTypeName(string)"];
d13 [label=Exception, span="109-109", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d28 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)"];
d29 [label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98", cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)"];
d17 [label="return backtestJob;", span="132-132", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)"];
d30 [label="Entry QuantConnect.Packets.BacktestNodePacket.BacktestNodePacket(int, int, string, byte[], decimal, string, QuantConnect.UserPlan)", span="81-81", cluster="QuantConnect.Packets.BacktestNodePacket.BacktestNodePacket(int, int, string, byte[], decimal, string, QuantConnect.UserPlan)"];
d19 [label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106", cluster="QuantConnect.Logging.Log.Trace(string, bool)"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
d10 -> d11  [key=0, style=solid, color=green];
d10 -> d23  [key=2, style=dotted, color=green];
d10 -> d24  [key=2, style=dotted, color=green];
d10 -> d21  [key=2, style=dotted, color=green];
d10 -> d25  [key=2, style=dotted, color=green];
d10 -> d26  [key=2, style=dotted, color=green];
d10 -> d32  [key=1, style=dashed, color=green, label=liveJob];
d10 -> d12  [key=1, style=dashed, color=green, label=liveJob];
d10 -> d14  [key=1, style=dashed, color=green, label=liveJob];
d10 -> d15  [key=1, style=dashed, color=green, label=liveJob];
d41 -> d10  [key=1, style=dashed, color=green, label="QuantConnect.Queues.JobQueue"];
d41 -> d3  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Queues.JobQueue"];
d41 -> d9  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Queues.JobQueue"];
d41 -> d16  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Queues.JobQueue"];
d2 -> d10  [key=3, color=green, style=bold, label="method methodReturn QuantConnect.Packets.AlgorithmNodePacket NextJob"];
d2 -> d3  [key=0, style=solid];
d2 -> d16  [key=3, color=darkorchid, style=bold, label="method methodReturn QuantConnect.Packets.AlgorithmNodePacket NextJob"];
d5 -> d10  [key=1, style=dashed, color=green, label=parameters];
d5 -> d6  [key=0, style=solid];
d5 -> d20  [key=2, style=dotted];
d5 -> d16  [key=1, style=dashed, color=darkseagreen4, label=parameters];
d8 -> d10  [key=1, style=dashed, color=green, label=parameters];
d8 -> d9  [key=0, style=solid];
d8 -> d22  [key=2, style=dotted];
d8 -> d16  [key=1, style=dashed, color=darkseagreen4, label=parameters];
d9 -> d10  [key=0, style=solid, color=green];
d9 -> d16  [key=0, style=solid];
d11 -> d12  [key=0, style=solid];
d11 -> d27  [key=2, style=dotted];
d11 -> d31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d32 -> d33  [key=0, style=solid];
d32 -> d34  [key=2, style=dotted];
d12 -> d13  [key=0, style=solid];
d12 -> d15  [key=0, style=solid];
d14 -> d15  [key=0, style=solid];
d14 -> d28  [key=2, style=dotted];
d14 -> d29  [key=2, style=dotted];
d15 -> d18  [key=0, style=solid];
d3 -> d4  [key=0, style=solid];
d3 -> d18  [key=1, style=dashed, color=darkseagreen4, label="out string"];
d16 -> d24  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d16 -> d30  [key=2, style=dotted];
d18 -> d2  [key=0, style=bold, color=blue];
d4 -> d5  [key=0, style=solid];
d4 -> d19  [key=2, style=dotted];
d6 -> d8  [key=1, style=dashed, color=darkseagreen4, label=parametersConfigString];
d6 -> d21  [key=2, style=dotted];
d6 -> d7  [key=0, style=solid];
d7 -> d8  [key=0, style=solid];
d7 -> d9  [key=0, style=solid];
d31 -> d32  [key=0, style=solid];
d42 -> d32  [key=1, style=dashed, color=darkseagreen4, label=liveJob];
d33 -> d31  [key=0, style=bold, color=blue];
d13 -> d14  [key=0, style=solid];
d17 -> d18  [key=0, style=solid];
}
