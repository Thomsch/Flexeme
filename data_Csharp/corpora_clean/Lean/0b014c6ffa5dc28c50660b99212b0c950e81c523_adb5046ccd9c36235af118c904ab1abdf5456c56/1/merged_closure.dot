digraph  {
n11 [label="QuantConnect.Orders.StopLimitOrder", span=""];
n0 [cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder()", label="Entry QuantConnect.Orders.StopLimitOrder.StopLimitOrder()", span="59-59"];
n1 [cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder()", label="Type = OrderType.StopLimit", span="61-61"];
n2 [cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder()", label="Exit QuantConnect.Orders.StopLimitOrder.StopLimitOrder()", span="59-59"];
n3 [cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", label="Entry QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="74-74"];
n4 [cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", label="StopPrice = stopPrice", span="77-77"];
n5 [cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", label="LimitPrice = limitPrice", span="78-78"];
n7 [cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", label="tag == ''''", span="81-81"];
n8 [cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", label="Tag = ''Stop Price: '' + stopPrice.ToString(''C'') + '' Limit Price: '' + limitPrice.ToString(''C'')", span="84-84"];
n6 [cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", label="Type = OrderType.StopLimit", span="79-79"];
n9 [cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", label="Exit QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="74-74"];
n10 [cluster="decimal.ToString(string)", label="Entry decimal.ToString(string)", span="0-0"];
m0_8 [cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", file="Engine.cs", label="Entry QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", span="34-34"];
m0_9 [cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", file="Engine.cs", label="int i = 0", span="36-36"];
m0_10 [cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", file="Engine.cs", label="var enumerable = Enumerable.Range(0, 10).Select(x => i++)", span="37-37"];
m0_11 [cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", file="Engine.cs", label="var memoized = new MemoizingEnumerable<int>(enumerable)", span="38-38"];
m0_12 [cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", file="Engine.cs", label="CollectionAssert.AreEqual(memoized, memoized)", span="40-40"];
m0_13 [cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", file="Engine.cs", label="Exit QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", span="34-34"];
m0_7 [cluster="Unk.AreEqual", file="Engine.cs", label="Entry Unk.AreEqual", span=""];
m0_5 [cluster="System.Collections.Generic.List<T>.List()", file="Engine.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_14 [cluster="System.Linq.Enumerable.Range(int, int)", file="Engine.cs", label="Entry System.Linq.Enumerable.Range(int, int)", span="0-0"];
m0_16 [cluster="MemoizingEnumerable<int>.cstr", file="Engine.cs", label="Entry MemoizingEnumerable<int>.cstr", span=""];
m0_15 [cluster="Unk.Select", file="Engine.cs", label="Entry Unk.Select", span=""];
m0_0 [cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", file="Engine.cs", label="Entry QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", span="26-26"];
m0_1 [cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", file="Engine.cs", label="var list = new List<int> {1, 2, 3, 4, 5}", span="28-28"];
m0_2 [cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", file="Engine.cs", label="var memoized = new MemoizingEnumerable<int>(list)", span="29-29"];
m0_3 [cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", file="Engine.cs", label="CollectionAssert.AreEqual(list, memoized)", span="30-30"];
m0_4 [cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", file="Engine.cs", label="Exit QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", span="26-26"];
m0_6 [cluster="QuantConnect.Util.MemoizingEnumerable<T>.MemoizingEnumerable(System.Collections.Generic.IEnumerable<T>)", file="Engine.cs", label="Entry QuantConnect.Util.MemoizingEnumerable<T>.MemoizingEnumerable(System.Collections.Generic.IEnumerable<T>)", span="40-40"];
m0_17 [cluster="lambda expression", file="Engine.cs", label="Entry lambda expression", span="37-37"];
m0_18 [cluster="lambda expression", file="Engine.cs", label="i++", span="37-37"];
m0_19 [cluster="lambda expression", file="Engine.cs", label="Exit lambda expression", span="37-37"];
m0_20 [file="Engine.cs", label=i, span=""];
m1_2 [cluster="QuantConnect.Interfaces.IJobQueueHandler.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", file="IJobQueueHandler.cs", label="Entry QuantConnect.Interfaces.IJobQueueHandler.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", span="41-41"];
m1_3 [cluster="QuantConnect.Interfaces.IJobQueueHandler.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", file="IJobQueueHandler.cs", label="Exit QuantConnect.Interfaces.IJobQueueHandler.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", span="41-41"];
m1_0 [cluster="QuantConnect.Interfaces.IJobQueueHandler.NextJob(out string)", file="IJobQueueHandler.cs", label="Entry QuantConnect.Interfaces.IJobQueueHandler.NextJob(out string)", span="35-35"];
m1_1 [cluster="QuantConnect.Interfaces.IJobQueueHandler.NextJob(out string)", file="IJobQueueHandler.cs", label="Exit QuantConnect.Interfaces.IJobQueueHandler.NextJob(out string)", span="35-35"];
m2_0 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs", label="Entry QuantConnect.Queues.JobQueue.NextJob(out string)", span="65-65"];
m2_1 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", color=green, community=0, file="JobQueue.cs", label="location = AlgorithmLocation", prediction=0, span="67-67"];
m2_2 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs", label="!BacktestingMode", span="70-70"];
m2_3 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs", label="var liveJob = new LiveNodePacket\r\n                {\r\n                    ResultEndpoint = ResultHandlerEndpoint.LiveTrading,\r\n                    SetupEndpoint = SetupHandlerEndpoint.PaperTrading,\r\n                    DataEndpoint = DataFeedEndpoint.LiveTrading,\r\n                    TransactionEndpoint = TransactionHandlerEndpoint.Brokerage,\r\n                    RealTimeEndpoint = RealTimeEndpoint.LiveTrading,\r\n                    Type = PacketType.LiveNode,\r\n                    Algorithm = File.ReadAllBytes(AlgorithmLocation),\r\n                    Brokerage = Config.Get(''live-mode-brokerage'', ''Paper Brokerage'')\r\n                }", span="72-82"];
m2_5 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs", label="var backtestJob = new BacktestNodePacket(0, 0, '''', new byte[] {}, 10000, ''local'')\r\n            {\r\n                ResultEndpoint = ResultHandlerEndpoint.Console,\r\n                SetupEndpoint = SetupHandlerEndpoint.Console,\r\n                DataEndpoint = DataFeedEndpoint.FileSystem,\r\n                TransactionEndpoint = TransactionHandlerEndpoint.Backtesting,\r\n                RealTimeEndpoint = RealTimeEndpoint.Backtesting,\r\n                Type = PacketType.BacktestNode,\r\n                Algorithm = File.ReadAllBytes(AlgorithmLocation)\r\n            }", span="87-96"];
m2_4 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs", label="return liveJob;", span="83-83"];
m2_6 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs", label="return backtestJob;", span="97-97"];
m2_7 [cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs", label="Exit QuantConnect.Queues.JobQueue.NextJob(out string)", span="65-65"];
m2_11 [cluster="QuantConnect.Packets.BacktestNodePacket.BacktestNodePacket(int, int, string, byte[], decimal, string, QuantConnect.UserPlan)", file="JobQueue.cs", label="Entry QuantConnect.Packets.BacktestNodePacket.BacktestNodePacket(int, int, string, byte[], decimal, string, QuantConnect.UserPlan)", span="87-87"];
m2_9 [cluster="System.IO.File.ReadAllBytes(string)", file="JobQueue.cs", label="Entry System.IO.File.ReadAllBytes(string)", span="0-0"];
m2_8 [cluster="QuantConnect.Packets.LiveNodePacket.LiveNodePacket()", file="JobQueue.cs", label="Entry QuantConnect.Packets.LiveNodePacket.LiveNodePacket()", span="90-90"];
m2_12 [cluster="QuantConnect.Queues.JobQueue.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", file="JobQueue.cs", label="Entry QuantConnect.Queues.JobQueue.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", span="104-104"];
m2_13 [cluster="QuantConnect.Queues.JobQueue.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", file="JobQueue.cs", label="Exit QuantConnect.Queues.JobQueue.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", span="104-104"];
m2_10 [cluster="QuantConnect.Configuration.Config.Get(string, string)", file="JobQueue.cs", label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="89-89"];
m2_14 [file="JobQueue.cs", label="QuantConnect.Queues.JobQueue", span=""];
n3 -> n7  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_10 -> m0_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_10 -> m0_18  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_1 -> m0_3  [color=darkseagreen4, key=1, label=list, style=dashed];
m0_18 -> m0_18  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_20 -> m0_18  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_1 -> m2_7  [color=green, key=1, label="out string", style=dashed];
m2_14 -> m2_2  [color=darkseagreen4, key=1, label="QuantConnect.Queues.JobQueue", style=dashed];
}
