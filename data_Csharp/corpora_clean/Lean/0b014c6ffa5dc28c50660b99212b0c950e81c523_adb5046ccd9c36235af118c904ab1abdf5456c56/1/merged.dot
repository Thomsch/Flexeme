digraph  {
n11 [label="QuantConnect.Orders.StopLimitOrder", span=""];
n0 [label="Entry QuantConnect.Orders.StopLimitOrder.StopLimitOrder()", span="59-59", cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder()"];
n1 [label="Type = OrderType.StopLimit", span="61-61", cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder()"];
n2 [label="Exit QuantConnect.Orders.StopLimitOrder.StopLimitOrder()", span="59-59", cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder()"];
n3 [label="Entry QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="74-74", cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)"];
n4 [label="StopPrice = stopPrice", span="77-77", cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)"];
n5 [label="LimitPrice = limitPrice", span="78-78", cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)"];
n7 [label="tag == ''''", span="81-81", cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)"];
n8 [label="Tag = ''Stop Price: '' + stopPrice.ToString(''C'') + '' Limit Price: '' + limitPrice.ToString(''C'')", span="84-84", cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)"];
n6 [label="Type = OrderType.StopLimit", span="79-79", cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)"];
n9 [label="Exit QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="74-74", cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)"];
n10 [label="Entry decimal.ToString(string)", span="0-0", cluster="decimal.ToString(string)"];
m0_8 [label="Entry QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", span="34-34", cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", file="Engine.cs"];
m0_9 [label="int i = 0", span="36-36", cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", file="Engine.cs"];
m0_10 [label="var enumerable = Enumerable.Range(0, 10).Select(x => i++)", span="37-37", cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", file="Engine.cs"];
m0_11 [label="var memoized = new MemoizingEnumerable<int>(enumerable)", span="38-38", cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", file="Engine.cs"];
m0_12 [label="CollectionAssert.AreEqual(memoized, memoized)", span="40-40", cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", file="Engine.cs"];
m0_13 [label="Exit QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", span="34-34", cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesOnce()", file="Engine.cs"];
m0_7 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="Engine.cs"];
m0_5 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="Engine.cs"];
m0_14 [label="Entry System.Linq.Enumerable.Range(int, int)", span="0-0", cluster="System.Linq.Enumerable.Range(int, int)", file="Engine.cs"];
m0_16 [label="Entry MemoizingEnumerable<int>.cstr", span="", cluster="MemoizingEnumerable<int>.cstr", file="Engine.cs"];
m0_15 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="Engine.cs"];
m0_0 [label="Entry QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", span="26-26", cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", file="Engine.cs"];
m0_1 [label="var list = new List<int> {1, 2, 3, 4, 5}", span="28-28", cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", file="Engine.cs"];
m0_2 [label="var memoized = new MemoizingEnumerable<int>(list)", span="29-29", cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", file="Engine.cs"];
m0_3 [label="CollectionAssert.AreEqual(list, memoized)", span="30-30", cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", file="Engine.cs"];
m0_4 [label="Exit QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", span="26-26", cluster="QuantConnect.Tests.Common.Util.MemoizingEnumerableTests.EnumeratesList()", file="Engine.cs"];
m0_6 [label="Entry QuantConnect.Util.MemoizingEnumerable<T>.MemoizingEnumerable(System.Collections.Generic.IEnumerable<T>)", span="40-40", cluster="QuantConnect.Util.MemoizingEnumerable<T>.MemoizingEnumerable(System.Collections.Generic.IEnumerable<T>)", file="Engine.cs"];
m0_17 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="Engine.cs"];
m0_18 [label="i++", span="37-37", cluster="lambda expression", file="Engine.cs"];
m0_19 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="Engine.cs"];
m0_20 [label=i, span="", file="Engine.cs"];
m1_2 [label="Entry QuantConnect.Interfaces.IJobQueueHandler.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", span="41-41", cluster="QuantConnect.Interfaces.IJobQueueHandler.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", file="IJobQueueHandler.cs"];
m1_3 [label="Exit QuantConnect.Interfaces.IJobQueueHandler.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", span="41-41", cluster="QuantConnect.Interfaces.IJobQueueHandler.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", file="IJobQueueHandler.cs"];
m1_0 [label="Entry QuantConnect.Interfaces.IJobQueueHandler.NextJob(out string)", span="35-35", cluster="QuantConnect.Interfaces.IJobQueueHandler.NextJob(out string)", file="IJobQueueHandler.cs"];
m1_1 [label="Exit QuantConnect.Interfaces.IJobQueueHandler.NextJob(out string)", span="35-35", cluster="QuantConnect.Interfaces.IJobQueueHandler.NextJob(out string)", file="IJobQueueHandler.cs"];
m2_0 [label="Entry QuantConnect.Queues.JobQueue.NextJob(out string)", span="65-65", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs"];
m2_1 [label="location = AlgorithmLocation", span="67-67", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs", color=green, community=0];
m2_2 [label="!BacktestingMode", span="70-70", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs"];
m2_3 [label="var liveJob = new LiveNodePacket\r\n                {\r\n                    ResultEndpoint = ResultHandlerEndpoint.LiveTrading,\r\n                    SetupEndpoint = SetupHandlerEndpoint.PaperTrading,\r\n                    DataEndpoint = DataFeedEndpoint.LiveTrading,\r\n                    TransactionEndpoint = TransactionHandlerEndpoint.Brokerage,\r\n                    RealTimeEndpoint = RealTimeEndpoint.LiveTrading,\r\n                    Type = PacketType.LiveNode,\r\n                    Algorithm = File.ReadAllBytes(AlgorithmLocation),\r\n                    Brokerage = Config.Get(''live-mode-brokerage'', ''Paper Brokerage'')\r\n                }", span="72-82", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs"];
m2_5 [label="var backtestJob = new BacktestNodePacket(0, 0, '''', new byte[] {}, 10000, ''local'')\r\n            {\r\n                ResultEndpoint = ResultHandlerEndpoint.Console,\r\n                SetupEndpoint = SetupHandlerEndpoint.Console,\r\n                DataEndpoint = DataFeedEndpoint.FileSystem,\r\n                TransactionEndpoint = TransactionHandlerEndpoint.Backtesting,\r\n                RealTimeEndpoint = RealTimeEndpoint.Backtesting,\r\n                Type = PacketType.BacktestNode,\r\n                Algorithm = File.ReadAllBytes(AlgorithmLocation)\r\n            }", span="87-96", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs"];
m2_4 [label="return liveJob;", span="83-83", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs"];
m2_6 [label="return backtestJob;", span="97-97", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs"];
m2_7 [label="Exit QuantConnect.Queues.JobQueue.NextJob(out string)", span="65-65", cluster="QuantConnect.Queues.JobQueue.NextJob(out string)", file="JobQueue.cs"];
m2_11 [label="Entry QuantConnect.Packets.BacktestNodePacket.BacktestNodePacket(int, int, string, byte[], decimal, string, QuantConnect.UserPlan)", span="87-87", cluster="QuantConnect.Packets.BacktestNodePacket.BacktestNodePacket(int, int, string, byte[], decimal, string, QuantConnect.UserPlan)", file="JobQueue.cs"];
m2_9 [label="Entry System.IO.File.ReadAllBytes(string)", span="0-0", cluster="System.IO.File.ReadAllBytes(string)", file="JobQueue.cs"];
m2_8 [label="Entry QuantConnect.Packets.LiveNodePacket.LiveNodePacket()", span="90-90", cluster="QuantConnect.Packets.LiveNodePacket.LiveNodePacket()", file="JobQueue.cs"];
m2_12 [label="Entry QuantConnect.Queues.JobQueue.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", span="104-104", cluster="QuantConnect.Queues.JobQueue.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", file="JobQueue.cs"];
m2_13 [label="Exit QuantConnect.Queues.JobQueue.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", span="104-104", cluster="QuantConnect.Queues.JobQueue.AcknowledgeJob(QuantConnect.Packets.AlgorithmNodePacket)", file="JobQueue.cs"];
m2_10 [label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="89-89", cluster="QuantConnect.Configuration.Config.Get(string, string)", file="JobQueue.cs"];
m2_14 [label="QuantConnect.Queues.JobQueue", span="", file="JobQueue.cs"];
n11 -> n1  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Orders.StopLimitOrder"];
n11 -> n4  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Orders.StopLimitOrder"];
n11 -> n5  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Orders.StopLimitOrder"];
n11 -> n6  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Orders.StopLimitOrder"];
n11 -> n8  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Orders.StopLimitOrder"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n2 -> n0  [key=0, style=bold, color=blue];
n3 -> n4  [key=0, style=solid];
n3 -> n5  [key=1, style=dashed, color=darkseagreen4, label=decimal];
n3 -> n7  [key=1, style=dashed, color=darkseagreen4, label=string];
n3 -> n8  [key=1, style=dashed, color=darkseagreen4, label=decimal];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n8 -> n10  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid];
n9 -> n3  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_14  [key=2, style=dotted];
m0_10 -> m0_15  [key=2, style=dotted];
m0_10 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_10 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_10 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_16  [key=2, style=dotted];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_7  [key=2, style=dotted];
m0_13 -> m0_8  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_5  [key=2, style=dotted];
m0_1 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label=list];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_6  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_7  [key=2, style=dotted];
m0_4 -> m0_0  [key=0, style=bold, color=blue];
m0_17 -> m0_18  [key=0, style=solid];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_19 -> m0_17  [key=0, style=bold, color=blue];
m0_20 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_2  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_0  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_0 -> m2_3  [key=3, color=darkorchid, style=bold, label="method methodReturn QuantConnect.Packets.AlgorithmNodePacket NextJob"];
m2_0 -> m2_5  [key=3, color=darkorchid, style=bold, label="method methodReturn QuantConnect.Packets.AlgorithmNodePacket NextJob"];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_1 -> m2_7  [key=1, style=dashed, color=green, label="out string"];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_5  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_8  [key=2, style=dotted];
m2_3 -> m2_9  [key=2, style=dotted];
m2_3 -> m2_10  [key=2, style=dotted];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_11  [key=2, style=dotted];
m2_5 -> m2_9  [key=2, style=dotted];
m2_4 -> m2_7  [key=0, style=solid];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_0  [key=0, style=bold, color=blue];
m2_12 -> m2_13  [key=0, style=solid];
m2_13 -> m2_12  [key=0, style=bold, color=blue];
m2_14 -> m2_1  [key=1, style=dashed, color=green, label="QuantConnect.Queues.JobQueue"];
m2_14 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Queues.JobQueue"];
m2_14 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Queues.JobQueue"];
m2_14 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Queues.JobQueue"];
}
