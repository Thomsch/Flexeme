digraph  {
n0 [label="Entry QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)", span="36-36", cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)"];
n1 [label="var configuration = request.Configuration", span="38-38", cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)"];
n2 [label="var sourceFactory = (BaseData) Activator.CreateInstance(request.Configuration.Type)", span="39-39", cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)"];
n3 [label="return (\r\n                from date in request.TradableDays\r\n                let source = sourceFactory.GetSource(configuration, date, false)\r\n                let factory = SubscriptionDataSourceReader.ForSource(source, configuration, date, false)\r\n                let coarseFundamentalForDate = factory.Read(source)\r\n                select new BaseDataCollection(date.AddDays(1), configuration.Symbol, coarseFundamentalForDate)\r\n                ).GetEnumerator();", span="41-47", cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)", color=red, community=0];
n5 [label="Entry System.Activator.CreateInstance(System.Type)", span="0-0", cluster="System.Activator.CreateInstance(System.Type)"];
n4 [label="Exit QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)", span="36-36", cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)"];
n6 [label="Entry QuantConnect.Data.BaseData.GetSource(QuantConnect.Data.SubscriptionDataConfig, System.DateTime, bool)", span="157-157", cluster="QuantConnect.Data.BaseData.GetSource(QuantConnect.Data.SubscriptionDataConfig, System.DateTime, bool)"];
n7 [label="Entry Unk.ForSource", span="", cluster="Unk.ForSource"];
n8 [label="Entry Unk.Read", span="", cluster="Unk.Read"];
n9 [label="Entry BaseDataCollection.cstr", span="", cluster="BaseDataCollection.cstr"];
n10 [label="Entry Unk.AddDays", span="", cluster="Unk.AddDays"];
n11 [label="Entry Unk.GetEnumerator", span="", cluster="Unk.GetEnumerator"];
d4 [label="Model = new EquityTransactionModel()", span="51-51", cluster="QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)", color=green, community=0];
d10 [label="QuantConnect.Securities.Equity.Equity", span=""];
d3 [label="Exchange = new EquityExchange()", span="48-48", cluster="QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)"];
d5 [label="Exit QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)", span="42-42", cluster="QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)"];
d9 [label="Entry QuantConnect.Securities.Equity.EquityTransactionModel.EquityTransactionModel()", span="51-51", cluster="QuantConnect.Securities.Equity.EquityTransactionModel.EquityTransactionModel()"];
d1 [label="Cache = new EquityCache()", span="46-46", cluster="QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)"];
d2 [label="Holdings = new EquityHolding(symbol, this.Model)", span="47-47", cluster="QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)"];
d8 [label="Entry QuantConnect.Securities.Equity.EquityExchange.EquityExchange()", span="44-44", cluster="QuantConnect.Securities.Equity.EquityExchange.EquityExchange()"];
d0 [label="Entry QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)", span="42-42", cluster="QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)"];
d6 [label="Entry QuantConnect.Securities.Equity.EquityCache.EquityCache()", span="40-40", cluster="QuantConnect.Securities.Equity.EquityCache.EquityCache()"];
d7 [label="Entry QuantConnect.Securities.Equity.EquityHolding.EquityHolding(string, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", span="43-43", cluster="QuantConnect.Securities.Equity.EquityHolding.EquityHolding(string, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)"];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.UniverseSelection.SubscriptionRequest"];
n0 -> n3  [key=1, style=dashed, color=red, label="QuantConnect.Data.UniverseSelection.SubscriptionRequest"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=1, style=dashed, color=red, label=configuration];
n2 -> n3  [key=0, style=solid, color=red];
n2 -> n5  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid, color=red];
n3 -> n6  [key=2, style=dotted, color=red];
n3 -> n7  [key=2, style=dotted, color=red];
n3 -> n8  [key=2, style=dotted, color=red];
n3 -> n9  [key=2, style=dotted, color=red];
n3 -> n10  [key=2, style=dotted, color=red];
n3 -> n11  [key=2, style=dotted, color=red];
n3 -> n3  [key=1, style=dashed, color=red, label=date];
n4 -> n0  [key=0, style=bold, color=blue];
d4 -> d5  [key=0, style=solid, color=green];
d4 -> d9  [key=2, style=dotted, color=green];
d10 -> d4  [key=1, style=dashed, color=green, label="QuantConnect.Securities.Equity.Equity"];
d10 -> d1  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Securities.Equity.Equity"];
d10 -> d2  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Securities.Equity.Equity"];
d10 -> d3  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Securities.Equity.Equity"];
d3 -> d4  [key=0, style=solid, color=green];
d3 -> d8  [key=2, style=dotted];
d5 -> d0  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid];
d1 -> d6  [key=2, style=dotted];
d2 -> d3  [key=0, style=solid];
d2 -> d7  [key=2, style=dotted];
d0 -> d1  [key=0, style=solid];
d0 -> d2  [key=1, style=dashed, color=darkseagreen4, label=string];
}
