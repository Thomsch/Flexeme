digraph  {
n0 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)", label="Entry QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)", span="36-36"];
n1 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)", label="var configuration = request.Configuration", span="38-38"];
n2 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)", label="var sourceFactory = (BaseData) Activator.CreateInstance(request.Configuration.Type)", span="39-39"];
n3 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)", color=red, community=0, label="0: return (\r\n                from date in request.TradableDays\r\n                let source = sourceFactory.GetSource(configuration, date, false)\r\n                let factory = SubscriptionDataSourceReader.ForSource(source, configuration, date, false)\r\n                let coarseFundamentalForDate = factory.Read(source)\r\n                select new BaseDataCollection(date.AddDays(1), configuration.Symbol, coarseFundamentalForDate)\r\n                ).GetEnumerator();", span="41-47"];
n5 [cluster="System.Activator.CreateInstance(System.Type)", label="Entry System.Activator.CreateInstance(System.Type)", span="0-0"];
n4 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)", label="Exit QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscripionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest)", span="36-36"];
n6 [cluster="QuantConnect.Data.BaseData.GetSource(QuantConnect.Data.SubscriptionDataConfig, System.DateTime, bool)", label="Entry QuantConnect.Data.BaseData.GetSource(QuantConnect.Data.SubscriptionDataConfig, System.DateTime, bool)", span="157-157"];
n7 [cluster="Unk.ForSource", label="Entry Unk.ForSource", span=""];
n8 [cluster="Unk.Read", label="Entry Unk.Read", span=""];
n9 [cluster="BaseDataCollection.cstr", label="Entry BaseDataCollection.cstr", span=""];
n10 [cluster="Unk.AddDays", label="Entry Unk.AddDays", span=""];
n11 [cluster="Unk.GetEnumerator", label="Entry Unk.GetEnumerator", span=""];
d4 [cluster="QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)", color=green, community=0, label="0: Model = new EquityTransactionModel()", span="51-51"];
d10 [label="QuantConnect.Securities.Equity.Equity", span=""];
d3 [cluster="QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)", label="Exchange = new EquityExchange()", span="48-48"];
d5 [cluster="QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)", label="Exit QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)", span="42-42"];
d9 [cluster="QuantConnect.Securities.Equity.EquityTransactionModel.EquityTransactionModel()", label="Entry QuantConnect.Securities.Equity.EquityTransactionModel.EquityTransactionModel()", span="51-51"];
d1 [cluster="QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)", label="Cache = new EquityCache()", span="46-46"];
d2 [cluster="QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)", label="Holdings = new EquityHolding(symbol, this.Model)", span="47-47"];
d8 [cluster="QuantConnect.Securities.Equity.EquityExchange.EquityExchange()", label="Entry QuantConnect.Securities.Equity.EquityExchange.EquityExchange()", span="44-44"];
d0 [cluster="QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)", label="Entry QuantConnect.Securities.Equity.Equity.Equity(string, QuantConnect.Resolution, bool, decimal, bool, bool)", span="42-42"];
d6 [cluster="QuantConnect.Securities.Equity.EquityCache.EquityCache()", label="Entry QuantConnect.Securities.Equity.EquityCache.EquityCache()", span="40-40"];
d7 [cluster="QuantConnect.Securities.Equity.EquityHolding.EquityHolding(string, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", label="Entry QuantConnect.Securities.Equity.EquityHolding.EquityHolding(string, QuantConnect.Securities.Interfaces.ISecurityTransactionModel)", span="43-43"];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SubscriptionRequest", style=dashed];
n0 -> n3  [color=red, key=1, label="QuantConnect.Data.UniverseSelection.SubscriptionRequest", style=dashed];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [color=red, key=1, label=configuration, style=dashed];
n2 -> n3  [color=red, key=0, style=solid];
n2 -> n5  [key=2, style=dotted];
n3 -> n4  [color=red, key=0, style=solid];
n3 -> n6  [color=red, key=2, style=dotted];
n3 -> n7  [color=red, key=2, style=dotted];
n3 -> n8  [color=red, key=2, style=dotted];
n3 -> n9  [color=red, key=2, style=dotted];
n3 -> n10  [color=red, key=2, style=dotted];
n3 -> n11  [color=red, key=2, style=dotted];
n3 -> n3  [color=red, key=1, label=date, style=dashed];
n4 -> n0  [color=blue, key=0, style=bold];
d4 -> d5  [color=green, key=0, style=solid];
d4 -> d9  [color=green, key=2, style=dotted];
d10 -> d4  [color=green, key=1, label="QuantConnect.Securities.Equity.Equity", style=dashed];
d10 -> d1  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Equity.Equity", style=dashed];
d10 -> d2  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Equity.Equity", style=dashed];
d10 -> d3  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Equity.Equity", style=dashed];
d3 -> d4  [color=green, key=0, style=solid];
d3 -> d8  [key=2, style=dotted];
d5 -> d0  [color=blue, key=0, style=bold];
d1 -> d2  [key=0, style=solid];
d1 -> d6  [key=2, style=dotted];
d2 -> d3  [key=0, style=solid];
d2 -> d7  [key=2, style=dotted];
d0 -> d1  [key=0, style=solid];
d0 -> d2  [color=darkseagreen4, key=1, label=string, style=dashed];
}
