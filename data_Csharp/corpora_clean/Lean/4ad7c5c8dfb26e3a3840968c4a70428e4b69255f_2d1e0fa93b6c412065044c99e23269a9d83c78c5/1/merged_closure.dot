digraph  {
n25 [label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", span=""];
n0 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", label="Entry QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", span="34-34"];
n1 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", label="UniverseSettings.Resolution = Resolution.Minute", span="37-37"];
n2 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", label="SetStartDate(2013, 10, 07)", span="39-39"];
n3 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", label="SetEndDate(2013, 10, 11)", span="40-40"];
n9 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", span="1093-1093"];
n4 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", label="SetCash(100000)", span="41-41"];
n10 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", span="1118-1118"];
n5 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", label="var symbols = new List<Symbol>\r\n            {\r\n                QuantConnect.Symbol.Create(''SPY'', SecurityType.Equity, Market.USA)\r\n            }", span="47-50"];
n11 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", span="1042-1042"];
n6 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", label="PortfolioSelection = new ManualPortfolioSelectionModel(symbols, UniverseSettings, SecurityInitializer)", span="52-52"];
n12 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n13 [cluster="QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", label="Entry QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", span="45-45"];
n7 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", label="Signal = new ConstantSignalModel(SignalType.Price, Direction.Up)", span="53-53"];
n14 [cluster="QuantConnect.Algorithm.Framework.Selection.ManualPortfolioSelectionModel.ManualPortfolioSelectionModel(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, QuantConnect.Data.UniverseSelection.UniverseSettings, QuantConnect.Securities.ISecurityInitializer)", label="Entry QuantConnect.Algorithm.Framework.Selection.ManualPortfolioSelectionModel.ManualPortfolioSelectionModel(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, QuantConnect.Data.UniverseSelection.UniverseSettings, QuantConnect.Securities.ISecurityInitializer)", span="50-50"];
n8 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", span="34-34"];
n15 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.ConstantSignalModel(QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction)", label="Entry QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.ConstantSignalModel(QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction)", span="41-41"];
n16 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnData(QuantConnect.Data.Slice)", label="Entry QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnData(QuantConnect.Data.Slice)", span="60-60"];
n22 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnData(QuantConnect.Data.Slice)", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnData(QuantConnect.Data.Slice)", span="60-60"];
n23 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", span="876-876"];
n24 [cluster="QuantConnect.Algorithm.QCAlgorithm.Debug(string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.Debug(string)", span="1659-1659"];
d6 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", color=green, community=0, label="PortfolioSelection = new ManualPortfolioSelectionModel(symbols, UniverseSettings, SecurityInitializer)", prediction=0, span="54-54"];
d24 [label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", span=""];
d5 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", label="var symbols = new List<Symbol>\r\n            {\r\n                QuantConnect.Symbol.Create(''SPY'', SecurityType.Equity, Market.USA)\r\n            }", span="49-52"];
d7 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", label="Signal = new ConstantSignalModel(SignalType.Price, Direction.Up)", span="55-55"];
d19 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", color=green, community=0, label="orderEvent.Status.IsFill()", prediction=1, span="61-61"];
d18 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", label="Entry QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", span="59-59"];
d20 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", color=green, community=0, label="Debug($''Purchased Stock: {orderEvent.Symbol}'')", prediction=2, span="63-63"];
d21 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", span="59-59"];
d22 [cluster="QuantConnect.Orders.OrderStatus.IsFill()", label="Entry QuantConnect.Orders.OrderStatus.IsFill()", span="50-50"];
d8 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", label="PortfolioConstruction = new SimplePortfolioConstructionModel()", span="56-56"];
d9 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm.Initialize()", span="36-36"];
d17 [cluster="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.SimplePortfolioConstructionModel()", label="Entry QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.SimplePortfolioConstructionModel()", span="28-28"];
m0_1 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.ConstantSignalModel(QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction)", file="ConstantSignalModel.cs", label="Exit QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.ConstantSignalModel(QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction)", span="41-41"];
m0_9 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="ConstantSignalModel.cs", label="Entry QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", span="69-69"];
m0_10 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="ConstantSignalModel.cs", label="return _securities.Select(security => new Signal(\r\n                security.Symbol,\r\n                _type,\r\n                _direction,\r\n                _percentChange,\r\n                _confidence,\r\n                _period\r\n            ));", span="71-78"];
m0_11 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="ConstantSignalModel.cs", label="Exit QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", span="69-69"];
m0_2 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.ConstantSignalModel(QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction, double?, double?, System.TimeSpan?)", file="ConstantSignalModel.cs", label="Entry QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.ConstantSignalModel(QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction, double?, double?, System.TimeSpan?)", span="54-54"];
m0_3 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.ConstantSignalModel(QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction, double?, double?, System.TimeSpan?)", file="ConstantSignalModel.cs", label="_type = type", span="56-56"];
m0_4 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.ConstantSignalModel(QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction, double?, double?, System.TimeSpan?)", file="ConstantSignalModel.cs", label="_direction = direction", span="57-57"];
m0_5 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.ConstantSignalModel(QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction, double?, double?, System.TimeSpan?)", file="ConstantSignalModel.cs", label="_percentChange = percentChange", span="58-58"];
m0_6 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.ConstantSignalModel(QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction, double?, double?, System.TimeSpan?)", file="ConstantSignalModel.cs", label="_confidence = confidence", span="59-59"];
m0_7 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.ConstantSignalModel(QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction, double?, double?, System.TimeSpan?)", file="ConstantSignalModel.cs", label="_period = period", span="60-60"];
m0_8 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.ConstantSignalModel(QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction, double?, double?, System.TimeSpan?)", file="ConstantSignalModel.cs", label="Exit QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.ConstantSignalModel(QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction, double?, double?, System.TimeSpan?)", span="54-54"];
m0_24 [cluster="System.Collections.Generic.HashSet<T>.Remove(T)", file="ConstantSignalModel.cs", label="Entry System.Collections.Generic.HashSet<T>.Remove(T)", span="0-0"];
m0_12 [cluster="Unk.Select", file="ConstantSignalModel.cs", label="Entry Unk.Select", span=""];
m0_16 [cluster="QuantConnect.Algorithm.Framework.Signals.Signal.Signal(QuantConnect.Symbol, QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction, double?, double?, System.TimeSpan?)", file="ConstantSignalModel.cs", label="Entry QuantConnect.Algorithm.Framework.Signals.Signal.Signal(QuantConnect.Symbol, QuantConnect.Algorithm.Framework.Signals.SignalType, QuantConnect.Algorithm.Framework.Signals.Direction, double?, double?, System.TimeSpan?)", span="63-63"];
m0_23 [cluster="System.Collections.Generic.HashSet<T>.Add(T)", file="ConstantSignalModel.cs", label="Entry System.Collections.Generic.HashSet<T>.Add(T)", span="0-0"];
m0_17 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="ConstantSignalModel.cs", label="Entry QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="86-86"];
m0_18 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", color=green, community=0, file="ConstantSignalModel.cs", label="changes.AddedSecurities", prediction=3, span="88-88"];
m0_22 [cluster="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="ConstantSignalModel.cs", label="Exit QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="86-86"];
m0_13 [cluster="lambda expression", file="ConstantSignalModel.cs", label="Entry lambda expression", span="71-78"];
m0_14 [cluster="lambda expression", file="ConstantSignalModel.cs", label="new Signal(\r\n                security.Symbol,\r\n                _type,\r\n                _direction,\r\n                _percentChange,\r\n                _confidence,\r\n                _period\r\n            )", span="71-78"];
m0_15 [cluster="lambda expression", file="ConstantSignalModel.cs", label="Exit lambda expression", span="71-78"];
m0_25 [file="ConstantSignalModel.cs", label="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel", span=""];
m5_6 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="NotifiedSecurityChanged.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m5_7 [cluster="System.Collections.Generic.ICollection<T>.Remove(T)", file="NotifiedSecurityChanged.cs", label="Entry System.Collections.Generic.ICollection<T>.Remove(T)", span="0-0"];
m5_0 [cluster="QuantConnect.Algorithm.Framework.NotifiedSecurityChanged.UpdateCollection(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="NotifiedSecurityChanged.cs", label="Entry QuantConnect.Algorithm.Framework.NotifiedSecurityChanged.UpdateCollection(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="31-31"];
m5_1 [cluster="QuantConnect.Algorithm.Framework.NotifiedSecurityChanged.UpdateCollection(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, QuantConnect.Data.UniverseSelection.SecurityChanges)", color=green, community=0, file="NotifiedSecurityChanged.cs", label="changes.AddedSecurities", prediction=4, span="33-33"];
m5_2 [cluster="QuantConnect.Algorithm.Framework.NotifiedSecurityChanged.UpdateCollection(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, QuantConnect.Data.UniverseSelection.SecurityChanges)", color=green, community=0, file="NotifiedSecurityChanged.cs", label="securities.Add(added)", prediction=5, span="35-35"];
m5_3 [cluster="QuantConnect.Algorithm.Framework.NotifiedSecurityChanged.UpdateCollection(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, QuantConnect.Data.UniverseSelection.SecurityChanges)", color=green, community=0, file="NotifiedSecurityChanged.cs", label="changes.RemovedSecurities", prediction=5, span="37-37"];
m5_4 [cluster="QuantConnect.Algorithm.Framework.NotifiedSecurityChanged.UpdateCollection(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, QuantConnect.Data.UniverseSelection.SecurityChanges)", color=green, community=0, file="NotifiedSecurityChanged.cs", label="securities.Remove(removed)", prediction=5, span="39-39"];
m5_5 [cluster="QuantConnect.Algorithm.Framework.NotifiedSecurityChanged.UpdateCollection(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="NotifiedSecurityChanged.cs", label="Exit QuantConnect.Algorithm.Framework.NotifiedSecurityChanged.UpdateCollection(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="31-31"];
m6_17 [cluster="QuantConnect.Indicators.IndicatorBase<T>.WeightedBy<T, TWeight>(TWeight, int)", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.WeightedBy<T, TWeight>(TWeight, int)", span="71-71"];
m6_0 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.Initialize()", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.Initialize()", span="40-40"];
m6_1 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.Initialize()", color=green, community=0, file="PercentPortfolioTarget.cs", label="SetStartDate(2015, 02, 01)", prediction=8, span="42-42"];
m6_2 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.Initialize()", color=green, community=0, file="PercentPortfolioTarget.cs", label="SetEndDate(2015, 03, 01)", prediction=8, span="43-43"];
m6_3 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.Initialize()", color=green, community=0, file="PercentPortfolioTarget.cs", label="SetCash(100000)", prediction=8, span="44-44"];
m6_4 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.Initialize()", color=green, community=0, file="PercentPortfolioTarget.cs", label="EURUSD = AddForex(''EURUSD'', Resolution.Minute).Symbol", prediction=11, span="47-47"];
m6_5 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.Initialize()", color=green, community=0, file="PercentPortfolioTarget.cs", label="AddData<FxcmVolume>(''EURUSD_Vol'', Resolution.Hour, DateTimeZone.Utc)", prediction=8, span="49-49"];
m6_6 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.Initialize()", color=green, community=0, file="PercentPortfolioTarget.cs", label="var _price = Identity(EURUSD, Resolution.Hour)", prediction=13, span="50-50"];
m6_7 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.Initialize()", color=green, community=0, file="PercentPortfolioTarget.cs", label="fastVWMA = _price.WeightedBy(volume, period: 15)", prediction=14, span="51-51"];
m6_8 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.Initialize()", color=green, community=0, file="PercentPortfolioTarget.cs", label="slowVWMA = _price.WeightedBy(volume, period: 300)", prediction=15, span="52-52"];
m6_9 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.Initialize()", color=green, community=0, file="PercentPortfolioTarget.cs", label="PlotIndicator(''VWMA'', fastVWMA.Minus(slowVWMA))", prediction=8, span="53-53"];
m6_10 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.Initialize()", file="PercentPortfolioTarget.cs", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.Initialize()", span="40-40"];
m6_20 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Slice)", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Slice)", span="60-60"];
m6_21 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Slice)", color=green, community=0, file="PercentPortfolioTarget.cs", label="!slowVWMA.IsReady", prediction=8, span="62-62"];
m6_22 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Slice)", color=green, community=0, file="PercentPortfolioTarget.cs", label="return;", prediction=18, span="62-62"];
m6_23 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Slice)", color=green, community=0, file="PercentPortfolioTarget.cs", label="!Portfolio.Invested || Portfolio[EURUSD].IsShort", prediction=8, span="63-63"];
m6_24 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Slice)", color=green, community=0, file="PercentPortfolioTarget.cs", label="fastVWMA > slowVWMA", prediction=8, span="65-65"];
m6_27 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Slice)", file="PercentPortfolioTarget.cs", label="fastVWMA < slowVWMA", span="73-73"];
m6_25 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Slice)", file="PercentPortfolioTarget.cs", label="SetHoldings(EURUSD, percentage: 1)", span="67-67"];
m6_26 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Slice)", file="PercentPortfolioTarget.cs", label="Log(Time.ToString(''g'') + '' Take a Long Position.'')", span="68-68"];
m6_28 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Slice)", file="PercentPortfolioTarget.cs", label="SetHoldings(EURUSD, percentage: -1)", span="75-75"];
m6_29 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Slice)", file="PercentPortfolioTarget.cs", label="Log(Time.ToString(''g'') + '' Take a Short Position.'')", span="76-76"];
m6_30 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Slice)", file="PercentPortfolioTarget.cs", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Slice)", span="60-60"];
m6_16 [cluster="QuantConnect.Algorithm.QCAlgorithm.Identity(QuantConnect.Symbol, QuantConnect.Resolution, System.Func<QuantConnect.Data.IBaseData, decimal>, string)", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Identity(QuantConnect.Symbol, QuantConnect.Resolution, System.Func<QuantConnect.Data.IBaseData, decimal>, string)", span="493-493"];
m6_18 [cluster="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Minus(QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>)", span="170-170"];
m6_37 [cluster="QuantConnect.Indicators.IndicatorDataPoint.IndicatorDataPoint()", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Indicators.IndicatorDataPoint.IndicatorDataPoint()", span="29-29"];
m6_33 [cluster="QuantConnect.Algorithm.QCAlgorithm.Log(string)", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Log(string)", span="1672-1672"];
m6_38 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Update(T)", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.Update(T)", span="74-74"];
m6_19 [cluster="QuantConnect.Algorithm.QCAlgorithm.PlotIndicator<T>(string, params QuantConnect.Indicators.IndicatorBase<T>[])", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.PlotIndicator<T>(string, params QuantConnect.Indicators.IndicatorBase<T>[])", span="230-230"];
m6_32 [cluster="System.DateTime.ToString(string)", file="PercentPortfolioTarget.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m6_14 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddForex(string, QuantConnect.Resolution, string, bool, decimal)", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddForex(string, QuantConnect.Resolution, string, bool, decimal)", span="1518-1518"];
m6_34 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Custom.FxcmVolume)", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Custom.FxcmVolume)", span="81-81"];
m6_35 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Custom.FxcmVolume)", file="PercentPortfolioTarget.cs", label="volume.Update(new IndicatorDataPoint\r\n            {\r\n                Time = Time,\r\n                Value = fxVolume.Volume\r\n            })", span="83-87"];
m6_36 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Custom.FxcmVolume)", file="PercentPortfolioTarget.cs", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm.OnData(QuantConnect.Data.Custom.FxcmVolume)", span="81-81"];
m6_11 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", span="1093-1093"];
m6_15 [cluster="Unk.>", file="PercentPortfolioTarget.cs", label="Entry Unk.>", span=""];
m6_13 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", span="1042-1042"];
m6_31 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", file="PercentPortfolioTarget.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", span="861-861"];
m6_39 [file="PercentPortfolioTarget.cs", label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", span=""];
m7_3 [cluster="QuantConnect.Algorithm.Framework.Portfolio.PercentPortfolioTarget.PercentPortfolioTarget(QuantConnect.Symbol, decimal)", file="PortfolioTarget.cs", label="Entry QuantConnect.Algorithm.Framework.Portfolio.PercentPortfolioTarget.PercentPortfolioTarget(QuantConnect.Symbol, decimal)", span="39-39"];
m7_7 [cluster="QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget.QuantityPortfolioTarget(QuantConnect.Symbol, decimal)", file="PortfolioTarget.cs", label="Entry QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget.QuantityPortfolioTarget(QuantConnect.Symbol, decimal)", span="38-38"];
m7_0 [cluster="QuantConnect.Algorithm.Framework.Portfolio.PortfolioTarget.Percent(QuantConnect.Symbol, decimal)", file="PortfolioTarget.cs", label="Entry QuantConnect.Algorithm.Framework.Portfolio.PortfolioTarget.Percent(QuantConnect.Symbol, decimal)", span="28-28"];
m7_1 [cluster="QuantConnect.Algorithm.Framework.Portfolio.PortfolioTarget.Percent(QuantConnect.Symbol, decimal)", color=green, community=0, file="PortfolioTarget.cs", label="return new PercentPortfolioTarget(symbol, percent);", prediction=21, span="30-30"];
m7_2 [cluster="QuantConnect.Algorithm.Framework.Portfolio.PortfolioTarget.Percent(QuantConnect.Symbol, decimal)", file="PortfolioTarget.cs", label="Exit QuantConnect.Algorithm.Framework.Portfolio.PortfolioTarget.Percent(QuantConnect.Symbol, decimal)", span="28-28"];
m7_4 [cluster="QuantConnect.Algorithm.Framework.Portfolio.PortfolioTarget.Quantity(QuantConnect.Symbol, decimal)", file="PortfolioTarget.cs", label="Entry QuantConnect.Algorithm.Framework.Portfolio.PortfolioTarget.Quantity(QuantConnect.Symbol, decimal)", span="39-39"];
m7_5 [cluster="QuantConnect.Algorithm.Framework.Portfolio.PortfolioTarget.Quantity(QuantConnect.Symbol, decimal)", color=green, community=0, file="PortfolioTarget.cs", label="return new QuantityPortfolioTarget(symbol, quantity);", prediction=22, span="41-41"];
m7_6 [cluster="QuantConnect.Algorithm.Framework.Portfolio.PortfolioTarget.Quantity(QuantConnect.Symbol, decimal)", file="PortfolioTarget.cs", label="Exit QuantConnect.Algorithm.Framework.Portfolio.PortfolioTarget.Quantity(QuantConnect.Symbol, decimal)", span="39-39"];
m8_10 [cluster="System.Type.GetMethod(string, System.Type[])", file="QCAlgorithmFramework.cs", label="Entry System.Type.GetMethod(string, System.Type[])", span="0-0"];
m8_12 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", span="57-57"];
m8_13 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", file="QCAlgorithmFramework.cs", label="CheckModels()", span="59-59"];
m8_14 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", file="QCAlgorithmFramework.cs", label="PortfolioSelection.CreateUniverses(this)", span="61-61"];
m8_15 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", file="QCAlgorithmFramework.cs", label="AddUniverse(universe)", span="63-63"];
m8_16 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", file="QCAlgorithmFramework.cs", label="base.PostInitialize()", span="66-66"];
m8_17 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.Framework.QCAlgorithmFramework.PostInitialize()", span="57-57"];
m8_35 [cluster="QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget.GetTargetQuantity(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget.GetTargetQuantity(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", span="33-33"];
m8_33 [cluster="QuantConnect.Securities.SecurityTransactionManager.GetOpenOrders(QuantConnect.Symbol)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.GetOpenOrders(QuantConnect.Symbol)", span="254-254"];
m8_18 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", span="91-91"];
m8_45 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", color=green, community=0, file="QCAlgorithmFramework.cs", label="PortfolioSelection == null", prediction=23, span="93-93"];
m8_46 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", color=green, community=0, file="QCAlgorithmFramework.cs", label="throw new Exception(''Framework algorithms must specify a portfolio selection model using the 'PortfolioSelection' property.'');", prediction=24, span="95-95"];
m8_47 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", color=green, community=0, file="QCAlgorithmFramework.cs", label="Signal == null", prediction=23, span="97-97"];
m8_48 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", color=green, community=0, file="QCAlgorithmFramework.cs", label="throw new Exception(''Framework algorithms must specify a signal model using the 'Signal' property.'');", prediction=26, span="99-99"];
m8_49 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", color=green, community=0, file="QCAlgorithmFramework.cs", label="PortfolioConstruction == null", prediction=23, span="101-101"];
m8_50 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", color=green, community=0, file="QCAlgorithmFramework.cs", label="throw new Exception(''Framework algorithms must specify a portfolio construction model using the 'PortfolioConstruction' property'');", prediction=28, span="103-103"];
m8_51 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", color=green, community=0, file="QCAlgorithmFramework.cs", label="Execution == null", prediction=29, span="105-105"];
m8_52 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="throw new Exception(''Framework algorithms must specify an execution model using the 'Execution' property.'');", span="107-107"];
m8_53 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.Framework.QCAlgorithmFramework.CheckModels()", span="91-91"];
m8_11 [cluster="System.Exception.Exception(string)", file="QCAlgorithmFramework.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m8_31 [cluster="QuantConnect.Algorithm.Framework.Signals.ISignalModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.Signals.ISignalModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", span="32-32"];
m8_0 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", span="42-42"];
m8_1 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", color=green, community=0, file="QCAlgorithmFramework.cs", label="var type = GetType()", prediction=30, span="44-44"];
m8_2 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", color=green, community=0, file="QCAlgorithmFramework.cs", label="var onDataSlice = type.GetMethod(''OnData'', new[] { typeof(Slice) })", prediction=31, span="45-45"];
m8_5 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", file="QCAlgorithmFramework.cs", label="var onSecuritiesChanged = type.GetMethod(''OnSecuritiesChanged'', new[] { typeof(SecurityChanges) })", span="50-50"];
m8_3 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", color=green, community=0, file="QCAlgorithmFramework.cs", label="onDataSlice.DeclaringType != typeof(QCAlgorithmFramework)", prediction=32, span="46-46"];
m8_4 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", file="QCAlgorithmFramework.cs", label="throw new Exception(''Framework algorithms can not override OnData(Slice)'');", span="48-48"];
m8_6 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", file="QCAlgorithmFramework.cs", label="onSecuritiesChanged.DeclaringType != typeof(QCAlgorithmFramework)", span="51-51"];
m8_7 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", file="QCAlgorithmFramework.cs", label="throw new Exception(''Framework algorithms can not override OnSecuritiesChanged(SecurityChanges)'');", span="53-53"];
m8_8 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.Framework.QCAlgorithmFramework.QCAlgorithmFramework()", span="42-42"];
m8_44 [cluster="QuantConnect.Algorithm.Framework.INotifiedSecuritiesChanged.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.INotifiedSecuritiesChanged.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="29-29"];
m8_36 [cluster="Unk.MarketOrder", file="QCAlgorithmFramework.cs", label="Entry Unk.MarketOrder", span=""];
m8_20 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddUniverse(QuantConnect.Data.UniverseSelection.Universe)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddUniverse(QuantConnect.Data.UniverseSelection.Universe)", span="59-59"];
m8_32 [cluster="QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, System.Collections.Generic.IEnumerable<QuantConnect.Algorithm.Framework.Signals.Signal>)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, System.Collections.Generic.IEnumerable<QuantConnect.Algorithm.Framework.Signals.Signal>)", span="31-31"];
m8_9 [cluster="object.GetType()", file="QCAlgorithmFramework.cs", label="Entry object.GetType()", span="0-0"];
m8_19 [cluster="QuantConnect.Algorithm.Framework.Selection.IPortfolioSelectionModel.CreateUniverses(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.Selection.IPortfolioSelectionModel.CreateUniverses(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", span="31-31"];
m8_40 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnSecuritiesChanged(QuantConnect.Data.UniverseSelection.SecurityChanges)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnSecuritiesChanged(QuantConnect.Data.UniverseSelection.SecurityChanges)", span="85-85"];
m8_41 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnSecuritiesChanged(QuantConnect.Data.UniverseSelection.SecurityChanges)", color=green, community=0, file="QCAlgorithmFramework.cs", label="Signal.OnSecuritiesChanged(this, changes)", prediction=23, span="87-87"];
m8_42 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnSecuritiesChanged(QuantConnect.Data.UniverseSelection.SecurityChanges)", color=green, community=0, file="QCAlgorithmFramework.cs", label="PortfolioConstruction.OnSecuritiesChanged(this, changes)", prediction=23, span="88-88"];
m8_43 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnSecuritiesChanged(QuantConnect.Data.UniverseSelection.SecurityChanges)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnSecuritiesChanged(QuantConnect.Data.UniverseSelection.SecurityChanges)", span="85-85"];
m8_21 [cluster="QuantConnect.Algorithm.QCAlgorithm.PostInitialize()", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.PostInitialize()", span="485-485"];
m8_34 [cluster="Unk.Sum", file="QCAlgorithmFramework.cs", label="Entry Unk.Sum", span=""];
m8_22 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnData(QuantConnect.Data.Slice)", file="QCAlgorithmFramework.cs", label="Entry QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnData(QuantConnect.Data.Slice)", span="69-69"];
m8_27 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnData(QuantConnect.Data.Slice)", color=green, community=0, file="QCAlgorithmFramework.cs", label="var quantity = target.GetTargetQuantity(this) - existing", prediction=35, span="77-77"];
m8_25 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnData(QuantConnect.Data.Slice)", file="QCAlgorithmFramework.cs", label=targets, span="73-73"];
m8_26 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnData(QuantConnect.Data.Slice)", file="QCAlgorithmFramework.cs", label="var existing = Securities[target.Symbol].Holdings.Quantity\r\n                    + Transactions.GetOpenOrders(target.Symbol).Sum(o => o.Quantity)", span="75-76"];
m8_28 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnData(QuantConnect.Data.Slice)", color=green, community=0, file="QCAlgorithmFramework.cs", label="quantity != 0", prediction=36, span="78-78"];
m8_29 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnData(QuantConnect.Data.Slice)", file="QCAlgorithmFramework.cs", label="MarketOrder(target.Symbol, quantity)", span="80-80"];
m8_23 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnData(QuantConnect.Data.Slice)", file="QCAlgorithmFramework.cs", label="var signals = Signal.Update(this, slice)", span="71-71"];
m8_24 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnData(QuantConnect.Data.Slice)", file="QCAlgorithmFramework.cs", label="var targets = PortfolioConstruction.CreateTargets(this, signals)", span="72-72"];
m8_30 [cluster="QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnData(QuantConnect.Data.Slice)", file="QCAlgorithmFramework.cs", label="Exit QuantConnect.Algorithm.Framework.QCAlgorithmFramework.OnData(QuantConnect.Data.Slice)", span="69-69"];
m8_37 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Entry lambda expression", span="76-76"];
m8_38 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="o.Quantity", span="76-76"];
m8_39 [cluster="lambda expression", file="QCAlgorithmFramework.cs", label="Exit lambda expression", span="76-76"];
m8_54 [file="QCAlgorithmFramework.cs", label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", span=""];
m9_0 [cluster="QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget.QuantityPortfolioTarget(QuantConnect.Symbol, decimal)", file="QuantityPortfolioTarget.cs", label="Entry QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget.QuantityPortfolioTarget(QuantConnect.Symbol, decimal)", span="38-38"];
m9_1 [cluster="QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget.QuantityPortfolioTarget(QuantConnect.Symbol, decimal)", color=green, community=0, file="QuantityPortfolioTarget.cs", label="Symbol = symbol", prediction=37, span="40-40"];
m9_2 [cluster="QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget.QuantityPortfolioTarget(QuantConnect.Symbol, decimal)", color=green, community=0, file="QuantityPortfolioTarget.cs", label="Quantity = quantity", prediction=38, span="41-41"];
m9_3 [cluster="QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget.QuantityPortfolioTarget(QuantConnect.Symbol, decimal)", file="QuantityPortfolioTarget.cs", label="Exit QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget.QuantityPortfolioTarget(QuantConnect.Symbol, decimal)", span="38-38"];
m9_4 [cluster="QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget.GetTargetQuantity(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", file="QuantityPortfolioTarget.cs", label="Entry QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget.GetTargetQuantity(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", span="49-49"];
m9_5 [cluster="QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget.GetTargetQuantity(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", color=green, community=0, file="QuantityPortfolioTarget.cs", label="return Quantity;", prediction=39, span="51-51"];
m9_6 [cluster="QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget.GetTargetQuantity(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", file="QuantityPortfolioTarget.cs", label="Exit QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget.GetTargetQuantity(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", span="49-49"];
m9_7 [file="QuantityPortfolioTarget.cs", label="QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget", span=""];
m10_12 [cluster="QuantConnect.Algorithm.Framework.NotifiedSecurityChanged.UpdateCollection(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="SimplePortfolioConstructionModel.cs", label="Entry QuantConnect.Algorithm.Framework.NotifiedSecurityChanged.UpdateCollection(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="31-31"];
m10_9 [cluster="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="SimplePortfolioConstructionModel.cs", label="Entry QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="58-58"];
m10_10 [cluster="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", color=green, community=0, file="SimplePortfolioConstructionModel.cs", label="NotifiedSecurityChanged.UpdateCollection(_securities, changes)", prediction=40, span="60-60"];
m10_11 [cluster="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="SimplePortfolioConstructionModel.cs", label="Exit QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="58-58"];
m10_8 [cluster="QuantConnect.Algorithm.Framework.Portfolio.PortfolioTarget.Percent(QuantConnect.Symbol, decimal)", file="SimplePortfolioConstructionModel.cs", label="Entry QuantConnect.Algorithm.Framework.Portfolio.PortfolioTarget.Percent(QuantConnect.Symbol, decimal)", span="28-28"];
m10_0 [cluster="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, System.Collections.Generic.IEnumerable<QuantConnect.Algorithm.Framework.Signals.Signal>)", file="SimplePortfolioConstructionModel.cs", label="Entry QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, System.Collections.Generic.IEnumerable<QuantConnect.Algorithm.Framework.Signals.Signal>)", span="38-38"];
m10_1 [cluster="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, System.Collections.Generic.IEnumerable<QuantConnect.Algorithm.Framework.Signals.Signal>)", color=green, community=0, file="SimplePortfolioConstructionModel.cs", label="_securities.Count == 0", prediction=40, span="40-40"];
m10_2 [cluster="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, System.Collections.Generic.IEnumerable<QuantConnect.Algorithm.Framework.Signals.Signal>)", color=green, community=0, file="SimplePortfolioConstructionModel.cs", label="yield break;", prediction=42, span="42-42"];
m10_3 [cluster="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, System.Collections.Generic.IEnumerable<QuantConnect.Algorithm.Framework.Signals.Signal>)", color=green, community=0, file="SimplePortfolioConstructionModel.cs", label="var percent = 1m / _securities.Count", prediction=43, span="45-45"];
m10_6 [cluster="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, System.Collections.Generic.IEnumerable<QuantConnect.Algorithm.Framework.Signals.Signal>)", color=green, community=0, file="SimplePortfolioConstructionModel.cs", label="yield return PortfolioTarget.Percent(signal.Symbol, target);", prediction=44, span="49-49"];
m10_4 [cluster="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, System.Collections.Generic.IEnumerable<QuantConnect.Algorithm.Framework.Signals.Signal>)", color=green, community=0, file="SimplePortfolioConstructionModel.cs", label=signals, prediction=44, span="46-46"];
m10_5 [cluster="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, System.Collections.Generic.IEnumerable<QuantConnect.Algorithm.Framework.Signals.Signal>)", color=green, community=0, file="SimplePortfolioConstructionModel.cs", label="var target = (int)signal.Direction * percent", prediction=46, span="48-48"];
m10_7 [cluster="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, System.Collections.Generic.IEnumerable<QuantConnect.Algorithm.Framework.Signals.Signal>)", file="SimplePortfolioConstructionModel.cs", label="Exit QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, System.Collections.Generic.IEnumerable<QuantConnect.Algorithm.Framework.Signals.Signal>)", span="38-38"];
m10_13 [file="SimplePortfolioConstructionModel.cs", label="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel", span=""];
n25 -> n2  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
n25 -> n3  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
n25 -> n4  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
d24 -> d20  [color=green, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
d24 -> n2  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
d24 -> n3  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
d24 -> n4  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFrameworkAlgorithm", style=dashed];
d18 -> d20  [color=green, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m0_10 -> m0_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_25 -> m0_10  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel", style=dashed];
m0_25 -> m0_14  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Signals.ConstantSignalModel", style=dashed];
m5_0 -> m5_2  [color=green, key=1, label="System.Collections.Generic.ICollection<QuantConnect.Securities.Security>", style=dashed];
m5_0 -> m5_3  [color=green, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m5_0 -> m5_4  [color=green, key=1, label="System.Collections.Generic.ICollection<QuantConnect.Securities.Security>", style=dashed];
m6_39 -> m6_1  [color=green, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", style=dashed];
m6_39 -> m6_2  [color=green, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", style=dashed];
m6_39 -> m6_3  [color=green, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", style=dashed];
m6_39 -> m6_5  [color=green, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", style=dashed];
m6_39 -> m6_9  [color=green, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", style=dashed];
m6_39 -> m6_21  [color=green, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", style=dashed];
m6_39 -> m6_23  [color=green, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", style=dashed];
m6_39 -> m6_24  [color=green, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", style=dashed];
m6_39 -> m6_25  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", style=dashed];
m6_39 -> m6_26  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", style=dashed];
m6_39 -> m6_27  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", style=dashed];
m6_39 -> m6_28  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", style=dashed];
m6_39 -> m6_29  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFxcmVolumeAlgorithm", style=dashed];
m8_40 -> m8_42  [color=green, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m8_27 -> m8_29  [color=green, key=1, label=quantity, style=dashed];
m8_25 -> m8_29  [color=darkseagreen4, key=1, label=target, style=dashed];
m8_26 -> m8_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_54 -> m8_41  [color=green, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m8_54 -> m8_42  [color=green, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m8_54 -> m8_45  [color=green, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m8_54 -> m8_47  [color=green, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m8_54 -> m8_49  [color=green, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m8_54 -> m8_13  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m8_54 -> m8_14  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m8_54 -> m8_15  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m8_54 -> m8_16  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m8_54 -> m8_29  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m9_7 -> m9_5  [color=green, key=1, label="QuantConnect.Algorithm.Framework.Portfolio.QuantityPortfolioTarget", style=dashed];
m10_0 -> m10_4  [color=green, key=1, label="System.Collections.Generic.IEnumerable<QuantConnect.Algorithm.Framework.Signals.Signal>", style=dashed];
m10_4 -> m10_6  [color=green, key=1, label=signal, style=dashed];
m10_13 -> m10_1  [color=green, key=1, label="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel", style=dashed];
m10_13 -> m10_10  [color=green, key=1, label="QuantConnect.Algorithm.Framework.Portfolio.SimplePortfolioConstructionModel", style=dashed];
}
