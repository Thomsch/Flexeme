digraph  {
n619 [label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", span=""];
n0 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong(decimal)", span="57-57"];
n1 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong(decimal)", label="Security msft", span="59-59"];
n2 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="60-60"];
n3 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong(decimal)", label="Update(msft, 25)", span="62-62"];
n7 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal)", span="1162-1162"];
n4 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="63-63"];
n8 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.Update(QuantConnect.Securities.Security, decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.Update(QuantConnect.Securities.Security, decimal)", span="1186-1186"];
n5 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong(decimal)", label="Assert.AreEqual(2000, actual)", span="64-64"];
n9 [cluster="QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", label="Entry QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol, decimal)", span="927-927"];
n6 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong(decimal)", span="57-57"];
n10 [cluster="Unk.AreEqual", label="Entry Unk.AreEqual", span=""];
n11 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_SmallConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_SmallConstantFeeStructure(decimal)", span="68-68"];
n12 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_SmallConstantFeeStructure(decimal)", label="Security msft", span="70-70"];
n13 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_SmallConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 1)", span="71-71"];
n14 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_SmallConstantFeeStructure(decimal)", label="Update(msft, 25)", span="73-73"];
n15 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_SmallConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="74-74"];
n16 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_SmallConstantFeeStructure(decimal)", label="Assert.AreEqual(1999, actual)", span="76-76"];
n17 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_SmallConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_SmallConstantFeeStructure(decimal)", span="68-68"];
n18 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_HighConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_HighConstantFeeStructure(decimal)", span="80-80"];
n19 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_HighConstantFeeStructure(decimal)", label="Security msft", span="82-82"];
n20 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_HighConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 10000)", span="83-83"];
n21 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_HighConstantFeeStructure(decimal)", label="Update(msft, 25)", span="85-85"];
n22 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_HighConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="86-86"];
n23 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_HighConstantFeeStructure(decimal)", label="Assert.AreEqual(1600, actual)", span="88-88"];
n24 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_HighConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToLong_HighConstantFeeStructure(decimal)", span="80-80"];
n25 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort(decimal)", span="92-92"];
n26 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort(decimal)", label="Security msft", span="94-94"];
n27 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="95-95"];
n28 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort(decimal)", label="Update(msft, 25)", span="97-97"];
n29 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.5m)", span="98-98"];
n30 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort(decimal)", label="Assert.AreEqual(-2000, actual)", span="99-99"];
n31 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort(decimal)", span="92-92"];
n32 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_SmallConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_SmallConstantFeeStructure(decimal)", span="103-103"];
n33 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_SmallConstantFeeStructure(decimal)", label="Security msft", span="105-105"];
n34 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_SmallConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 1)", span="106-106"];
n35 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_SmallConstantFeeStructure(decimal)", label="Update(msft, 25)", span="108-108"];
n36 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_SmallConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.5m)", span="109-109"];
n37 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_SmallConstantFeeStructure(decimal)", label="Assert.AreEqual(-1999, actual)", span="110-110"];
n38 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_SmallConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_SmallConstantFeeStructure(decimal)", span="103-103"];
n39 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_HighConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_HighConstantFeeStructure(decimal)", span="114-114"];
n40 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_HighConstantFeeStructure(decimal)", label="Security msft", span="116-116"];
n41 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_HighConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 10000)", span="117-117"];
n42 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_HighConstantFeeStructure(decimal)", label="Update(msft, 25)", span="119-119"];
n43 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_HighConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.5m)", span="120-120"];
n44 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_HighConstantFeeStructure(decimal)", label="Assert.AreEqual(-1600, actual)", span="121-121"];
n45 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_HighConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ZeroToShort_HighConstantFeeStructure(decimal)", span="114-114"];
n46 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger(decimal)", span="125-125"];
n47 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger(decimal)", label="Security msft", span="127-127"];
n48 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="128-128"];
n49 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger(decimal)", label="Update(msft, 25)", span="130-130"];
n50 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger(decimal)", label="algo.Portfolio.SetCash(50000)", span="132-132"];
n51 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="133-133"];
n52 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.75m)", span="135-135"];
n55 [cluster="QuantConnect.Securities.SecurityPortfolioManager.SetCash(decimal)", label="Entry QuantConnect.Securities.SecurityPortfolioManager.SetCash(decimal)", span="472-472"];
n56 [cluster="QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", label="Entry QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", span="383-383"];
n53 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger(decimal)", label="Assert.AreEqual(1000, actual)", span="136-136"];
n54 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger(decimal)", span="125-125"];
n57 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_SmallConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_SmallConstantFeeStructure(decimal)", span="140-140"];
n58 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_SmallConstantFeeStructure(decimal)", label="Security msft", span="142-142"];
n59 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_SmallConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 1)", span="143-143"];
n60 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_SmallConstantFeeStructure(decimal)", label="Update(msft, 25)", span="145-145"];
n61 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_SmallConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(50000)", span="147-147"];
n62 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_SmallConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="148-148"];
n63 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_SmallConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.75m)", span="150-150"];
n64 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_SmallConstantFeeStructure(decimal)", label="Assert.AreEqual(999, actual)", span="151-151"];
n65 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_SmallConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_SmallConstantFeeStructure(decimal)", span="140-140"];
n66 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_HighConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_HighConstantFeeStructure(decimal)", span="155-155"];
n67 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_HighConstantFeeStructure(decimal)", label="Security msft", span="157-157"];
n68 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_HighConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 10000)", span="158-158"];
n69 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_HighConstantFeeStructure(decimal)", label="Update(msft, 25)", span="160-160"];
n70 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_HighConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(50000)", span="162-162"];
n71 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_HighConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="163-163"];
n72 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_HighConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.75m)", span="165-165"];
n73 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_HighConstantFeeStructure(decimal)", label="Assert.AreEqual(600, actual)", span="166-166"];
n74 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_HighConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_HighConstantFeeStructure(decimal)", span="155-155"];
n75 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong(decimal)", span="170-170"];
n76 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong(decimal)", label="Security msft", span="172-172"];
n77 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="173-173"];
n78 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong(decimal)", label="Update(msft, 25)", span="175-175"];
n79 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong(decimal)", label="algo.Portfolio.SetCash(25000)", span="177-177"];
n80 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 3000)", span="178-178"];
n81 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="180-180"];
n82 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong(decimal)", label="Assert.AreEqual(-1000, actual)", span="181-181"];
n83 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong(decimal)", span="170-170"];
n84 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_SmallConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_SmallConstantFeeStructure(decimal)", span="185-185"];
n85 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_SmallConstantFeeStructure(decimal)", label="Security msft", span="187-187"];
n86 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_SmallConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 1)", span="188-188"];
n87 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_SmallConstantFeeStructure(decimal)", label="Update(msft, 25)", span="190-190"];
n88 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_SmallConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(25000)", span="192-192"];
n89 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_SmallConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 3000)", span="193-193"];
n90 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_SmallConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="195-195"];
n91 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_SmallConstantFeeStructure(decimal)", label="Assert.AreEqual(-999, actual)", span="196-196"];
n92 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_SmallConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_SmallConstantFeeStructure(decimal)", span="185-185"];
n93 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_HighConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_HighConstantFeeStructure(decimal)", span="200-200"];
n94 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_HighConstantFeeStructure(decimal)", label="Security msft", span="202-202"];
n95 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_HighConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 10000)", span="203-203"];
n96 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_HighConstantFeeStructure(decimal)", label="Update(msft, 25)", span="205-205"];
n97 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_HighConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(25000)", span="207-207"];
n98 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_HighConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 3000)", span="208-208"];
n99 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_HighConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="210-210"];
n100 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_HighConstantFeeStructure(decimal)", label="Assert.AreEqual(-600, actual)", span="211-211"];
n101 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_HighConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_HighConstantFeeStructure(decimal)", span="200-200"];
n102 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero(decimal)", span="215-215"];
n103 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero(decimal)", label="Security msft", span="217-217"];
n104 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="218-218"];
n105 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero(decimal)", label="Update(msft, 25)", span="220-220"];
n106 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero(decimal)", label="algo.Portfolio.SetCash(50000)", span="222-222"];
n107 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="223-223"];
n108 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0m)", span="225-225"];
n109 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero(decimal)", label="Assert.AreEqual(-2000, actual)", span="226-226"];
n110 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero(decimal)", span="215-215"];
n111 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_SmallConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_SmallConstantFeeStructure(decimal)", span="230-230"];
n112 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_SmallConstantFeeStructure(decimal)", label="Security msft", span="232-232"];
n113 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_SmallConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 1)", span="233-233"];
n114 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_SmallConstantFeeStructure(decimal)", label="Update(msft, 25)", span="235-235"];
n115 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_SmallConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(50000)", span="237-237"];
n116 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_SmallConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="238-238"];
n117 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_SmallConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0m)", span="240-240"];
n118 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_SmallConstantFeeStructure(decimal)", label="Assert.AreEqual(-2000, actual)", span="241-241"];
n119 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_SmallConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_SmallConstantFeeStructure(decimal)", span="230-230"];
n120 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_HighConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_HighConstantFeeStructure(decimal)", span="245-245"];
n121 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_HighConstantFeeStructure(decimal)", label="Security msft", span="247-247"];
n122 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_HighConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 10000)", span="248-248"];
n123 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_HighConstantFeeStructure(decimal)", label="Update(msft, 25)", span="250-250"];
n124 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_HighConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(50000)", span="252-252"];
n125 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_HighConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="253-253"];
n126 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_HighConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0m)", span="255-255"];
n127 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_HighConstantFeeStructure(decimal)", label="Assert.AreEqual(-2000, actual)", span="256-256"];
n128 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_HighConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToZero_HighConstantFeeStructure(decimal)", span="245-245"];
n129 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort(decimal)", span="260-260"];
n130 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort(decimal)", label="Security msft", span="262-262"];
n131 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="263-263"];
n132 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort(decimal)", label="Update(msft, 25)", span="265-265"];
n133 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort(decimal)", label="algo.Portfolio.SetCash(50000)", span="267-267"];
n134 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="268-268"];
n135 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.5m)", span="271-271"];
n136 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort(decimal)", label="Assert.AreEqual(-4000, actual)", span="272-272"];
n137 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort(decimal)", span="260-260"];
n138 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_SmallConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_SmallConstantFeeStructure(decimal)", span="276-276"];
n139 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_SmallConstantFeeStructure(decimal)", label="Security msft", span="278-278"];
n140 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_SmallConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 1)", span="279-279"];
n141 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_SmallConstantFeeStructure(decimal)", label="Update(msft, 25)", span="281-281"];
n142 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_SmallConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(50000)", span="283-283"];
n143 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_SmallConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="284-284"];
n144 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_SmallConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.5m)", span="287-287"];
n145 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_SmallConstantFeeStructure(decimal)", label="Assert.AreEqual(-3999, actual)", span="288-288"];
n146 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_SmallConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_SmallConstantFeeStructure(decimal)", span="276-276"];
n147 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_HighConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_HighConstantFeeStructure(decimal)", span="292-292"];
n148 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_HighConstantFeeStructure(decimal)", label="Security msft", span="294-294"];
n149 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_HighConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 10000)", span="295-295"];
n150 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_HighConstantFeeStructure(decimal)", label="Update(msft, 25)", span="297-297"];
n151 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_HighConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(50000)", span="299-299"];
n152 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_HighConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="300-300"];
n153 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_HighConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.5m)", span="303-303"];
n154 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_HighConstantFeeStructure(decimal)", label="Assert.AreEqual(-3600, actual)", span="304-304"];
n155 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_HighConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_HighConstantFeeStructure(decimal)", span="292-292"];
n156 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort(decimal)", span="308-308"];
n157 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort(decimal)", label="Security msft", span="310-310"];
n158 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="311-311"];
n159 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort(decimal)", label="Update(msft, 25)", span="313-313"];
n160 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort(decimal)", label="algo.Portfolio.SetCash(50000)", span="315-315"];
n161 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="316-316"];
n162 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -1m)", span="319-319"];
n163 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort(decimal)", label="Assert.AreEqual(-6000, actual)", span="320-320"];
n164 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort(decimal)", span="308-308"];
n165 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure(decimal)", span="324-324"];
n166 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure(decimal)", label="Security msft", span="326-326"];
n167 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 1)", span="327-327"];
n168 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure(decimal)", label="Update(msft, 25)", span="329-329"];
n169 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(50000)", span="331-331"];
n170 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="332-332"];
n171 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -1m)", span="335-335"];
n172 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure(decimal)", label="Assert.AreEqual(-5999, actual)", span="336-336"];
n173 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure(decimal)", span="324-324"];
n174 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure(decimal)", span="340-340"];
n175 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure(decimal)", label="Security msft", span="342-342"];
n176 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 10000)", span="343-343"];
n177 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure(decimal)", label="Update(msft, 25)", span="345-345"];
n178 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(50000)", span="347-347"];
n179 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="348-348"];
n180 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -1m)", span="351-351"];
n181 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure(decimal)", label="Assert.AreEqual(-5600, actual)", span="352-352"];
n182 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure(decimal)", span="340-340"];
n183 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero(decimal)", span="356-356"];
n184 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero(decimal)", label="Security msft", span="358-358"];
n185 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="359-359"];
n186 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero(decimal)", label="Update(msft, 25)", span="361-361"];
n187 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero(decimal)", label="algo.Portfolio.SetCash(150000)", span="363-363"];
n188 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, -2000)", span="364-364"];
n189 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0m)", span="366-366"];
n190 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero(decimal)", label="Assert.AreEqual(2000, actual)", span="367-367"];
n191 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero(decimal)", span="356-356"];
n192 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_SmallConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_SmallConstantFeeStructure(decimal)", span="371-371"];
n193 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_SmallConstantFeeStructure(decimal)", label="Security msft", span="373-373"];
n194 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_SmallConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 1)", span="374-374"];
n195 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_SmallConstantFeeStructure(decimal)", label="Update(msft, 25)", span="376-376"];
n196 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_SmallConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(150000)", span="378-378"];
n197 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_SmallConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, -2000)", span="379-379"];
n198 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_SmallConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0m)", span="381-381"];
n199 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_SmallConstantFeeStructure(decimal)", label="Assert.AreEqual(2000, actual)", span="382-382"];
n200 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_SmallConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_SmallConstantFeeStructure(decimal)", span="371-371"];
n201 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_HighConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_HighConstantFeeStructure(decimal)", span="386-386"];
n202 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_HighConstantFeeStructure(decimal)", label="Security msft", span="388-388"];
n203 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_HighConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 10000)", span="389-389"];
n204 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_HighConstantFeeStructure(decimal)", label="Update(msft, 25)", span="391-391"];
n205 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_HighConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(150000)", span="393-393"];
n206 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_HighConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, -2000)", span="394-394"];
n207 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_HighConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0m)", span="396-396"];
n208 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_HighConstantFeeStructure(decimal)", label="Assert.AreEqual(2000, actual)", span="397-397"];
n209 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_HighConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToZero_HighConstantFeeStructure(decimal)", span="386-386"];
n210 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter(decimal)", span="401-401"];
n211 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter(decimal)", label="Security msft", span="403-403"];
n212 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="404-404"];
n213 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter(decimal)", label="Update(msft, 25)", span="406-406"];
n214 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter(decimal)", label="algo.Portfolio.SetCash(150000)", span="408-408"];
n215 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, -2000)", span="409-409"];
n216 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.75m)", span="417-417"];
n217 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter(decimal)", label="Assert.AreEqual(-1000, actual)", span="418-418"];
n218 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter(decimal)", span="401-401"];
n219 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_SmallConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_SmallConstantFeeStructure(decimal)", span="422-422"];
n220 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_SmallConstantFeeStructure(decimal)", label="Security msft", span="424-424"];
n221 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_SmallConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 1)", span="425-425"];
n222 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_SmallConstantFeeStructure(decimal)", label="Update(msft, 25)", span="427-427"];
n223 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_SmallConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(150000)", span="429-429"];
n224 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_SmallConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, -2000)", span="430-430"];
n225 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_SmallConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.75m)", span="438-438"];
n226 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_SmallConstantFeeStructure(decimal)", label="Assert.AreEqual(-999, actual)", span="439-439"];
n227 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_SmallConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_SmallConstantFeeStructure(decimal)", span="422-422"];
n228 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_HighConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_HighConstantFeeStructure(decimal)", span="443-443"];
n229 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_HighConstantFeeStructure(decimal)", label="Security msft", span="445-445"];
n230 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_HighConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 10000)", span="446-446"];
n231 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_HighConstantFeeStructure(decimal)", label="Update(msft, 25)", span="448-448"];
n232 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_HighConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(150000)", span="450-450"];
n233 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_HighConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, -2000)", span="451-451"];
n234 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_HighConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.75m)", span="459-459"];
n235 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_HighConstantFeeStructure(decimal)", label="Assert.AreEqual(-600, actual)", span="460-460"];
n236 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_HighConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_HighConstantFeeStructure(decimal)", span="443-443"];
n237 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong(decimal)", span="464-464"];
n238 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong(decimal)", label="Security msft", span="466-466"];
n239 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="467-467"];
n240 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong(decimal)", label="Update(msft, 25)", span="469-469"];
n241 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong(decimal)", label="algo.Portfolio.SetCash(150000)", span="471-471"];
n242 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, -2000)", span="472-472"];
n243 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="474-474"];
n244 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong(decimal)", label="Assert.AreEqual(4000, actual)", span="475-475"];
n245 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong(decimal)", span="464-464"];
n246 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_SmallConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_SmallConstantFeeStructure(decimal)", span="479-479"];
n247 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_SmallConstantFeeStructure(decimal)", label="Security msft", span="481-481"];
n248 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_SmallConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 1)", span="482-482"];
n249 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_SmallConstantFeeStructure(decimal)", label="Update(msft, 25)", span="484-484"];
n250 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_SmallConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(150000)", span="486-486"];
n251 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_SmallConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, -2000)", span="487-487"];
n252 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_SmallConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="489-489"];
n253 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_SmallConstantFeeStructure(decimal)", label="Assert.AreEqual(3999, actual)", span="490-490"];
n254 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_SmallConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_SmallConstantFeeStructure(decimal)", span="479-479"];
n255 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_HighConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_HighConstantFeeStructure(decimal)", span="494-494"];
n256 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_HighConstantFeeStructure(decimal)", label="Security msft", span="496-496"];
n257 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_HighConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 10000)", span="497-497"];
n258 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_HighConstantFeeStructure(decimal)", label="Update(msft, 25)", span="499-499"];
n259 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_HighConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(150000)", span="501-501"];
n260 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_HighConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, -2000)", span="502-502"];
n261 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_HighConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="504-504"];
n262 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_HighConstantFeeStructure(decimal)", label="Assert.AreEqual(3600, actual)", span="505-505"];
n263 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_HighConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_HighConstantFeeStructure(decimal)", span="494-494"];
n264 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_DifferentMargins(decimal, decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_DifferentMargins(decimal, decimal)", span="509-509"];
n265 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_DifferentMargins(decimal, decimal)", label="Security msft", span="511-511"];
n266 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_DifferentMargins(decimal, decimal)", label="var algo = GetAlgorithm(out msft, initialMarginRequirement, maintenanceMarginRequirement, 0)", span="512-512"];
n267 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_DifferentMargins(decimal, decimal)", label="Update(msft, 25)", span="514-514"];
n273 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal, decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal, decimal)", span="1174-1174"];
n268 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_DifferentMargins(decimal, decimal)", label="algo.Portfolio.SetCash(50000)", span="516-516"];
n269 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_DifferentMargins(decimal, decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="517-517"];
n270 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_DifferentMargins(decimal, decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.5m)", span="520-520"];
n271 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_DifferentMargins(decimal, decimal)", label="Assert.AreEqual(-4000, actual)", span="521-521"];
n272 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_DifferentMargins(decimal, decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_DifferentMargins(decimal, decimal)", span="509-509"];
n274 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", span="525-525"];
n275 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Security msft", span="527-527"];
n276 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="var algo = GetAlgorithm(out msft, initialMarginRequirement, maintenanceMarginRequirement, 1)", span="528-528"];
n277 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Update(msft, 25)", span="530-530"];
n278 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="algo.Portfolio.SetCash(50000)", span="532-532"];
n279 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="533-533"];
n280 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.5m)", span="536-536"];
n281 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Assert.AreEqual(-3999, actual)", span="537-537"];
n282 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", span="525-525"];
n283 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", span="541-541"];
n284 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Security msft", span="543-543"];
n285 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="var algo = GetAlgorithm(out msft, initialMarginRequirement, maintenanceMarginRequirement, 10000)", span="544-544"];
n286 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Update(msft, 25)", span="546-546"];
n287 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="algo.Portfolio.SetCash(50000)", span="548-548"];
n288 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="549-549"];
n289 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.5m)", span="552-552"];
n290 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Assert.AreEqual(-3600, actual)", span="553-553"];
n291 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToHalfShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", span="541-541"];
n292 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_DifferentMargins(decimal, decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_DifferentMargins(decimal, decimal)", span="557-557"];
n293 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_DifferentMargins(decimal, decimal)", label="Security msft", span="559-559"];
n294 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_DifferentMargins(decimal, decimal)", label="var algo = GetAlgorithm(out msft, initialMarginRequirement, maintenanceMarginRequirement, 0)", span="560-560"];
n295 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_DifferentMargins(decimal, decimal)", label="Update(msft, 25)", span="562-562"];
n296 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_DifferentMargins(decimal, decimal)", label="algo.Portfolio.SetCash(50000)", span="564-564"];
n297 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_DifferentMargins(decimal, decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="565-565"];
n298 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_DifferentMargins(decimal, decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -1m)", span="568-568"];
n299 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_DifferentMargins(decimal, decimal)", label="Assert.AreEqual(-6000, actual)", span="569-569"];
n300 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_DifferentMargins(decimal, decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_DifferentMargins(decimal, decimal)", span="557-557"];
n301 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", span="573-573"];
n302 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Security msft", span="575-575"];
n303 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="var algo = GetAlgorithm(out msft, initialMarginRequirement, maintenanceMarginRequirement, 1)", span="576-576"];
n304 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Update(msft, 25)", span="578-578"];
n305 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="algo.Portfolio.SetCash(50000)", span="580-580"];
n306 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="581-581"];
n307 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -1m)", span="584-584"];
n308 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Assert.AreEqual(-5999, actual)", span="585-585"];
n309 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", span="573-573"];
n310 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", span="589-589"];
n311 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Security msft", span="591-591"];
n312 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="var algo = GetAlgorithm(out msft, initialMarginRequirement, maintenanceMarginRequirement, 10000)", span="592-592"];
n313 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Update(msft, 25)", span="594-594"];
n314 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="algo.Portfolio.SetCash(50000)", span="596-596"];
n315 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="597-597"];
n316 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -1m)", span="600-600"];
n317 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Assert.AreEqual(-5600, actual)", span="601-601"];
n318 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFullShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", span="589-589"];
n319 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_DifferentMargins(decimal, decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_DifferentMargins(decimal, decimal)", span="605-605"];
n320 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_DifferentMargins(decimal, decimal)", label="Security msft", span="607-607"];
n321 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_DifferentMargins(decimal, decimal)", label="var algo = GetAlgorithm(out msft, initialMarginRequirement, maintenanceMarginRequirement, 0)", span="608-608"];
n322 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_DifferentMargins(decimal, decimal)", label="Update(msft, 25)", span="610-610"];
n323 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_DifferentMargins(decimal, decimal)", label="algo.Portfolio.SetCash(50000)", span="612-612"];
n324 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_DifferentMargins(decimal, decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="613-613"];
n325 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_DifferentMargins(decimal, decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -2m)", span="616-616"];
n326 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_DifferentMargins(decimal, decimal)", label="Assert.AreEqual(-10000, actual)", span="617-617"];
n327 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_DifferentMargins(decimal, decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_DifferentMargins(decimal, decimal)", span="605-605"];
n328 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", span="621-621"];
n329 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Security msft", span="623-623"];
n330 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="var algo = GetAlgorithm(out msft, initialMarginRequirement, maintenanceMarginRequirement, 1)", span="624-624"];
n331 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Update(msft, 25)", span="626-626"];
n332 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="algo.Portfolio.SetCash(50000)", span="628-628"];
n333 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="629-629"];
n334 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -2m)", span="632-632"];
n335 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Assert.AreEqual(-9999, actual)", span="633-633"];
n336 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_SmallConstantFeeStructure_DifferentMargins(decimal, decimal)", span="621-621"];
n337 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", span="637-637"];
n338 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Security msft", span="639-639"];
n339 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="var algo = GetAlgorithm(out msft, initialMarginRequirement, maintenanceMarginRequirement, 10000)", span="640-640"];
n340 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Update(msft, 25)", span="642-642"];
n341 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="algo.Portfolio.SetCash(50000)", span="644-644"];
n342 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="645-645"];
n343 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -2m)", span="648-648"];
n344 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Assert.AreEqual(-9200, actual)", span="649-649"];
n345 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_HalfLongToFull2xShort_HighConstantFeeStructure_DifferentMargins(decimal, decimal)", span="637-637"];
n346 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise(decimal)", span="658-658"];
n347 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise(decimal)", label="Security msft", span="660-660"];
n348 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="661-661"];
n349 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise(decimal)", label="Update(msft, 25)", span="663-663"];
n350 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise(decimal)", label="algo.Portfolio.SetCash(50000)", span="666-666"];
n351 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="667-667"];
n352 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise(decimal)", label="Update(msft, 50)", span="670-670"];
n353 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="674-674"];
n354 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise(decimal)", label="Assert.AreEqual(-500, actual)", span="677-677"];
n355 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise(decimal)", span="658-658"];
n356 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_SmallConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_SmallConstantFeeStructure(decimal)", span="681-681"];
n357 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_SmallConstantFeeStructure(decimal)", label="Security msft", span="683-683"];
n358 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_SmallConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 1)", span="684-684"];
n359 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_SmallConstantFeeStructure(decimal)", label="Update(msft, 25)", span="686-686"];
n360 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_SmallConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(50000)", span="689-689"];
n361 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_SmallConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="690-690"];
n362 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_SmallConstantFeeStructure(decimal)", label="Update(msft, 50)", span="693-693"];
n363 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_SmallConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="697-697"];
n364 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_SmallConstantFeeStructure(decimal)", label="Assert.AreEqual(-499, actual)", span="700-700"];
n365 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_SmallConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_SmallConstantFeeStructure(decimal)", span="681-681"];
n366 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_HighConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_HighConstantFeeStructure(decimal)", span="704-704"];
n367 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_HighConstantFeeStructure(decimal)", label="Security msft", span="706-706"];
n368 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_HighConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 10000)", span="707-707"];
n369 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_HighConstantFeeStructure(decimal)", label="Update(msft, 25)", span="709-709"];
n370 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_HighConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(50000)", span="712-712"];
n371 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_HighConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="713-713"];
n372 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_HighConstantFeeStructure(decimal)", label="Update(msft, 50)", span="716-716"];
n373 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_HighConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="720-720"];
n374 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_HighConstantFeeStructure(decimal)", label="Assert.AreEqual(-300, actual)", span="723-723"];
n375 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_HighConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongFixed_PriceRise_HighConstantFeeStructure(decimal)", span="704-704"];
n376 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise(decimal)", span="727-727"];
n377 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise(decimal)", label="Security msft", span="729-729"];
n378 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="730-730"];
n379 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise(decimal)", label="Update(msft, 25)", span="732-732"];
n380 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise(decimal)", label="algo.Portfolio.SetCash(50000)", span="734-734"];
n381 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="735-735"];
n382 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise(decimal)", label="Update(msft, 50)", span="738-738"];
n383 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.75m)", span="742-742"];
n384 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise(decimal)", label="Assert.AreEqual(250, actual)", span="745-745"];
n385 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise(decimal)", span="727-727"];
n386 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_SmallConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_SmallConstantFeeStructure(decimal)", span="749-749"];
n387 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_SmallConstantFeeStructure(decimal)", label="Security msft", span="751-751"];
n388 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_SmallConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 1)", span="752-752"];
n389 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_SmallConstantFeeStructure(decimal)", label="Update(msft, 25)", span="754-754"];
n390 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_SmallConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(50000)", span="756-756"];
n391 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_SmallConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="757-757"];
n392 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_SmallConstantFeeStructure(decimal)", label="Update(msft, 50)", span="760-760"];
n393 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_SmallConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.75m)", span="764-764"];
n394 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_SmallConstantFeeStructure(decimal)", label="Assert.AreEqual(249, actual)", span="767-767"];
n395 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_SmallConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_SmallConstantFeeStructure(decimal)", span="749-749"];
n396 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_HighConstantFeeStructure(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_HighConstantFeeStructure(decimal)", span="771-771"];
n397 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_HighConstantFeeStructure(decimal)", label="Security msft", span="773-773"];
n398 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_HighConstantFeeStructure(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 10000)", span="774-774"];
n399 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_HighConstantFeeStructure(decimal)", label="Update(msft, 25)", span="776-776"];
n400 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_HighConstantFeeStructure(decimal)", label="algo.Portfolio.SetCash(50000)", span="778-778"];
n401 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_HighConstantFeeStructure(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="779-779"];
n402 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_HighConstantFeeStructure(decimal)", label="Update(msft, 50)", span="782-782"];
n403 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_HighConstantFeeStructure(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.75m)", span="786-786"];
n404 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_HighConstantFeeStructure(decimal)", label="Assert.AreEqual(50, actual)", span="789-789"];
n405 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_HighConstantFeeStructure(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToLonger_PriceRise_HighConstantFeeStructure(decimal)", span="771-771"];
n406 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_PriceRise(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_PriceRise(decimal)", span="793-793"];
n407 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_PriceRise(decimal)", label="Security msft", span="795-795"];
n408 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_PriceRise(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="796-796"];
n409 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_PriceRise(decimal)", label="Update(msft, 25)", span="798-798"];
n410 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_PriceRise(decimal)", label="algo.Portfolio.SetCash(25000)", span="801-801"];
n411 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_PriceRise(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 3000)", span="802-802"];
n412 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_PriceRise(decimal)", label="Update(msft, 50)", span="805-805"];
n413 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_PriceRise(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="809-809"];
n414 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_PriceRise(decimal)", label="Assert.AreEqual(-1250, actual)", span="812-812"];
n415 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_PriceRise(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongerToLong_PriceRise(decimal)", span="793-793"];
n416 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_PriceRise(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_PriceRise(decimal)", span="816-816"];
n417 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_PriceRise(decimal)", label="Security msft", span="818-818"];
n418 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_PriceRise(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="819-819"];
n419 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_PriceRise(decimal)", label="Update(msft, 25)", span="821-821"];
n420 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_PriceRise(decimal)", label="algo.Portfolio.SetCash(50000)", span="823-823"];
n421 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_PriceRise(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, 2000)", span="824-824"];
n422 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_PriceRise(decimal)", label="Update(msft, 50)", span="827-827"];
n423 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_PriceRise(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.5m)", span="830-830"];
n424 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_PriceRise(decimal)", label="Assert.AreEqual(-3500, actual)", span="833-833"];
n425 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_PriceRise(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_LongToShort_PriceRise(decimal)", span="816-816"];
n426 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_PriceRise(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_PriceRise(decimal)", span="837-837"];
n427 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_PriceRise(decimal)", label="Security msft", span="839-839"];
n428 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_PriceRise(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="840-840"];
n429 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_PriceRise(decimal)", label="Update(msft, 25)", span="842-842"];
n430 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_PriceRise(decimal)", label="algo.Portfolio.SetCash(150000)", span="844-844"];
n431 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_PriceRise(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, -2000)", span="845-845"];
n432 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_PriceRise(decimal)", label="Update(msft, 50)", span="848-848"];
n433 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_PriceRise(decimal)", label="Assert.AreEqual(50000, algo.Portfolio.TotalPortfolioValue)", span="853-853"];
n434 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_PriceRise(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.75m)", span="856-856"];
n435 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_PriceRise(decimal)", label="Assert.AreEqual(1250, actual)", span="859-859"];
n436 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_PriceRise(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToShorter_PriceRise(decimal)", span="837-837"];
n437 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise_ZeroValue(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise_ZeroValue(decimal)", span="863-863"];
n438 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise_ZeroValue(decimal)", label="Security msft", span="865-865"];
n439 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise_ZeroValue(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="866-866"];
n440 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise_ZeroValue(decimal)", label="Update(msft, 25)", span="868-868"];
n441 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise_ZeroValue(decimal)", label="algo.Portfolio.SetCash(150000)", span="870-870"];
n442 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise_ZeroValue(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, -2000)", span="871-871"];
n443 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise_ZeroValue(decimal)", label="Update(msft, 50m)", span="874-874"];
n444 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise_ZeroValue(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="877-877"];
n445 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise_ZeroValue(decimal)", label="Assert.AreEqual(2500, actual)", span="880-880"];
n446 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise_ZeroValue(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise_ZeroValue(decimal)", span="863-863"];
n447 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise(decimal)", span="884-884"];
n448 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise(decimal)", label="Security msft", span="886-886"];
n449 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="887-887"];
n450 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise(decimal)", label="Update(msft, 25)", span="889-889"];
n451 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise(decimal)", label="algo.Portfolio.SetCash(150000)", span="891-891"];
n452 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, -2000)", span="892-892"];
n453 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise(decimal)", label="Update(msft, 50m)", span="895-895"];
n454 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise(decimal)", label="Assert.AreEqual(50000, algo.Portfolio.TotalPortfolioValue)", span="900-900"];
n455 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, 0.5m)", span="903-903"];
n456 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise(decimal)", label="Assert.AreEqual(2500, actual)", span="906-906"];
n457 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortToLong_PriceRise(decimal)", span="884-884"];
n458 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortFixed_PriceFall(decimal)", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortFixed_PriceFall(decimal)", span="916-916"];
n459 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortFixed_PriceFall(decimal)", label="Security msft", span="918-918"];
n460 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortFixed_PriceFall(decimal)", label="var algo = GetAlgorithm(out msft, leverage, 0)", span="919-919"];
n461 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortFixed_PriceFall(decimal)", label="Update(msft, 25)", span="921-921"];
n462 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortFixed_PriceFall(decimal)", label="algo.Portfolio.SetCash(150000)", span="923-923"];
n463 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortFixed_PriceFall(decimal)", label="algo.Portfolio[Symbols.MSFT].SetHoldings(25, -2000)", span="924-924"];
n464 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortFixed_PriceFall(decimal)", label="Update(msft, 12.5m)", span="926-926"];
n465 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortFixed_PriceFall(decimal)", label="var actual = algo.CalculateOrderQuantity(Symbols.MSFT, -0.5m)", span="935-935"];
n466 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortFixed_PriceFall(decimal)", label="Assert.AreEqual(-3000, actual)", span="936-936"];
n467 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortFixed_PriceFall(decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_ShortFixed_PriceFall(decimal)", span="916-916"];
n468 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_RoundOff()", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_RoundOff()", span="944-944"];
n469 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_RoundOff()", label="var algo = new QCAlgorithm()", span="946-946"];
n470 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_RoundOff()", label="algo.AddSecurity(SecurityType.Forex, ''EURUSD'')", span="947-947"];
n479 [cluster="QuantConnect.Algorithm.QCAlgorithm.QCAlgorithm()", label="Entry QuantConnect.Algorithm.QCAlgorithm.QCAlgorithm()", span="90-90"];
n471 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_RoundOff()", label="algo.SetCash(100000)", span="948-948"];
n472 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_RoundOff()", label="algo.SetBrokerageModel(BrokerageName.FxcmBrokerage)", span="949-949"];
n473 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_RoundOff()", label="algo.Securities[Symbols.EURUSD].TransactionModel = new ConstantFeeTransactionModel(0)", span="950-950"];
n474 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_RoundOff()", label="Security eurusd = algo.Securities[Symbols.EURUSD]", span="951-951"];
n476 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_RoundOff()", label="var actual = algo.CalculateOrderQuantity(Symbols.EURUSD, 1m)", span="955-955"];
n480 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, bool, bool)", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, bool, bool)", span="1268-1268"];
n481 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", span="1025-1025"];
n482 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", span="890-890"];
n483 [cluster="QuantConnect.Securities.ConstantFeeTransactionModel.ConstantFeeTransactionModel(decimal)", label="Entry QuantConnect.Securities.ConstantFeeTransactionModel.ConstantFeeTransactionModel(decimal)", span="31-31"];
n475 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_RoundOff()", label="Update(eurusd, 26)", span="953-953"];
n477 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_RoundOff()", label="Assert.AreEqual(3000m, actual)", span="956-956"];
n478 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_RoundOff()", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_RoundOff()", span="944-944"];
n484 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Short_RoundOff()", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Short_RoundOff()", span="961-961"];
n485 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Short_RoundOff()", label="var algo = new QCAlgorithm()", span="963-963"];
n486 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Short_RoundOff()", label="algo.AddSecurity(SecurityType.Forex, ''EURUSD'')", span="964-964"];
n487 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Short_RoundOff()", label="algo.SetCash(100000)", span="965-965"];
n488 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Short_RoundOff()", label="algo.SetBrokerageModel(BrokerageName.FxcmBrokerage)", span="966-966"];
n489 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Short_RoundOff()", label="algo.Securities[Symbols.EURUSD].TransactionModel = new ConstantFeeTransactionModel(0)", span="967-967"];
n490 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Short_RoundOff()", label="Security eurusd = algo.Securities[Symbols.EURUSD]", span="968-968"];
n492 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Short_RoundOff()", label="var actual = algo.CalculateOrderQuantity(Symbols.EURUSD, -1m)", span="972-972"];
n491 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Short_RoundOff()", label="Update(eurusd, 26)", span="970-970"];
n493 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Short_RoundOff()", label="Assert.AreEqual(-3000m, actual)", span="973-973"];
n494 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Short_RoundOff()", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Short_RoundOff()", span="961-961"];
n495 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_ToZero_RoundOff()", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_ToZero_RoundOff()", span="977-977"];
n496 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_ToZero_RoundOff()", label="var algo = new QCAlgorithm()", span="979-979"];
n497 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_ToZero_RoundOff()", label="algo.AddSecurity(SecurityType.Forex, ''EURUSD'')", span="980-980"];
n498 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_ToZero_RoundOff()", label="algo.SetCash(10000)", span="981-981"];
n499 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_ToZero_RoundOff()", label="algo.SetBrokerageModel(BrokerageName.FxcmBrokerage)", span="982-982"];
n500 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_ToZero_RoundOff()", label="algo.Securities[Symbols.EURUSD].TransactionModel = new ConstantFeeTransactionModel(0)", span="983-983"];
n501 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_ToZero_RoundOff()", label="Security eurusd = algo.Securities[Symbols.EURUSD]", span="984-984"];
n503 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_ToZero_RoundOff()", label="var actual = algo.CalculateOrderQuantity(Symbols.EURUSD, 1m)", span="988-988"];
n502 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_ToZero_RoundOff()", label="Update(eurusd, 25)", span="986-986"];
n504 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_ToZero_RoundOff()", label="Assert.AreEqual(0m, actual)", span="989-989"];
n505 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_ToZero_RoundOff()", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.SetHoldings_Long_ToZero_RoundOff()", span="977-977"];
n506 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="Entry QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", span="1098-1098"];
n507 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="Security msft", span="1100-1100"];
n508 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="var algo = GetAlgorithm(out msft, 1, 0)", span="1101-1101"];
n509 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="Update(msft, 25)", span="1103-1103"];
n510 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Portfolio.SetCash(150000)", span="1105-1105"];
n514 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Transactions.SetOrderProcessor(mock.Object)", span="1110-1110"];
n515 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Buy(Symbols.MSFT, 1)", span="1112-1112"];
n516 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Buy(Symbols.MSFT, 1.0)", span="1113-1113"];
n517 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Buy(Symbols.MSFT, 1.0m)", span="1114-1114"];
n518 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Buy(Symbols.MSFT, 1.0f)", span="1115-1115"];
n519 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Sell(Symbols.MSFT, 1)", span="1117-1117"];
n520 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Sell(Symbols.MSFT, 1.0)", span="1118-1118"];
n521 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Sell(Symbols.MSFT, 1.0m)", span="1119-1119"];
n522 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Sell(Symbols.MSFT, 1.0f)", span="1120-1120"];
n523 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Order(Symbols.MSFT, 1)", span="1122-1122"];
n524 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Order(Symbols.MSFT, 1.0)", span="1123-1123"];
n525 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Order(Symbols.MSFT, 1.0m)", span="1124-1124"];
n526 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.Order(Symbols.MSFT, 1.0f)", span="1125-1125"];
n527 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.MarketOrder(Symbols.MSFT, 1)", span="1127-1127"];
n528 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.MarketOrder(Symbols.MSFT, 1.0)", span="1128-1128"];
n529 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.MarketOrder(Symbols.MSFT, 1.0m)", span="1129-1129"];
n530 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.MarketOrder(Symbols.MSFT, 1.0f)", span="1130-1130"];
n531 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.MarketOnOpenOrder(Symbols.MSFT, 1)", span="1132-1132"];
n532 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.MarketOnOpenOrder(Symbols.MSFT, 1.0)", span="1133-1133"];
n533 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.MarketOnOpenOrder(Symbols.MSFT, 1.0m)", span="1134-1134"];
n534 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.MarketOnCloseOrder(Symbols.MSFT, 1)", span="1136-1136"];
n535 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.MarketOnCloseOrder(Symbols.MSFT, 1.0)", span="1137-1137"];
n536 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.MarketOnCloseOrder(Symbols.MSFT, 1.0m)", span="1138-1138"];
n537 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.LimitOrder(Symbols.MSFT, 1, 1)", span="1140-1140"];
n538 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.LimitOrder(Symbols.MSFT, 1.0, 1)", span="1141-1141"];
n539 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.LimitOrder(Symbols.MSFT, 1.0m, 1)", span="1142-1142"];
n540 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.StopMarketOrder(Symbols.MSFT, 1, 1)", span="1144-1144"];
n541 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.StopMarketOrder(Symbols.MSFT, 1.0, 1)", span="1145-1145"];
n542 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.StopMarketOrder(Symbols.MSFT, 1.0m, 1)", span="1146-1146"];
n543 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.StopLimitOrder(Symbols.MSFT, 1, 1, 2)", span="1148-1148"];
n544 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.StopLimitOrder(Symbols.MSFT, 1.0, 1, 2)", span="1149-1149"];
n545 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.StopLimitOrder(Symbols.MSFT, 1.0m, 1, 2)", span="1150-1150"];
n546 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.SetHoldings(Symbols.MSFT, 1)", span="1152-1152"];
n547 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.SetHoldings(Symbols.MSFT, 1.0)", span="1153-1153"];
n548 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.SetHoldings(Symbols.MSFT, 1.0m)", span="1154-1154"];
n549 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="algo.SetHoldings(Symbols.MSFT, 1.0f)", span="1155-1155"];
n551 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="Assert.AreEqual(expected, algo.Transactions.LastOrderId)", span="1158-1158"];
n511 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="var mock = new Mock<IOrderProcessor>()", span="1107-1107"];
n553 [cluster="Mock<IOrderProcessor>.cstr", label="Entry Mock<IOrderProcessor>.cstr", span=""];
n513 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="mock.Setup(m => m.Process(It.IsAny<Orders.OrderRequest>())).Returns(new Orders.OrderTicket(null, request.Object))", span="1109-1109"];
n554 [cluster="Mock<Orders.SubmitOrderRequest>.cstr", label="Entry Mock<Orders.SubmitOrderRequest>.cstr", span=""];
n555 [cluster="Unk.Setup", label="Entry Unk.Setup", span=""];
n556 [cluster="Orders.OrderTicket.cstr", label="Entry Orders.OrderTicket.cstr", span=""];
n557 [cluster="Unk.Returns", label="Entry Unk.Returns", span=""];
n592 [cluster="lambda expression", label="Entry lambda expression", span="1109-1109"];
n558 [cluster="Unk.SetOrderProcessor", label="Entry Unk.SetOrderProcessor", span=""];
n559 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, int)", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, int)", span="39-39"];
n560 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, double)", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, double)", span="50-50"];
n561 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", span="61-61"];
n562 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, float)", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, float)", span="72-72"];
n563 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, int)", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, int)", span="84-84"];
n564 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, double)", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, double)", span="95-95"];
n565 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, decimal)", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, decimal)", span="117-117"];
n566 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, float)", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol, float)", span="106-106"];
n567 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int)", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, int)", span="135-135"];
n568 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", span="126-126"];
n569 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal)", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal)", span="144-144"];
n570 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, int, bool, string)", span="170-170"];
n571 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, double, bool, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, double, bool, string)", span="183-183"];
n572 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol, decimal, bool, string)", span="196-196"];
n573 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, int, string)", span="259-259"];
n574 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, double, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, double, string)", span="247-247"];
n575 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, decimal, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol, decimal, string)", span="271-271"];
n576 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, int, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, int, string)", span="291-291"];
n577 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, double, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, double, string)", span="303-303"];
n578 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, decimal, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol, decimal, string)", span="315-315"];
n579 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", span="336-336"];
n580 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, double, decimal, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, double, decimal, string)", span="349-349"];
n581 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, decimal, decimal, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, decimal, decimal, string)", span="362-362"];
n582 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, int, decimal, string)", span="383-383"];
n583 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, double, decimal, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, double, decimal, string)", span="396-396"];
n584 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, string)", span="409-409"];
n585 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, int, decimal, decimal, string)", span="431-431"];
n586 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, double, decimal, decimal, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, double, decimal, decimal, string)", span="445-445"];
n587 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, decimal, decimal, decimal, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol, decimal, decimal, decimal, string)", span="459-459"];
n588 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, int, bool, string)", span="860-860"];
n589 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", span="834-834"];
n590 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", span="875-875"];
n550 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="int expected = 32", span="1157-1157"];
n591 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, float, bool, string)", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, float, bool, string)", span="847-847"];
n552 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.OrderQuantityConversionTest()", span="1098-1098"];
n593 [cluster="lambda expression", label="m.Process(It.IsAny<Orders.OrderRequest>())", span="1109-1109"];
n594 [cluster="lambda expression", label="Exit lambda expression", span="1109-1109"];
n595 [cluster="Unk.>", label="Entry Unk.>", span=""];
n596 [cluster="Unk.Process", label="Entry Unk.Process", span=""];
n597 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal)", label="var algo = new QCAlgorithm()", span="1165-1165"];
n600 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal)", label="algo.Securities[Symbols.MSFT].TransactionModel = new ConstantFeeTransactionModel(fee)", span="1168-1168"];
n602 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal)", label="msft.SetLeverage(leverage)", span="1170-1170"];
n598 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal)", label="algo.AddSecurity(SecurityType.Equity, ''MSFT'')", span="1166-1166"];
n599 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal)", label="algo.SetCash(100000)", span="1167-1167"];
n601 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal)", label="msft = algo.Securities[Symbols.MSFT]", span="1169-1169"];
n603 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal)", label="return algo;", span="1171-1171"];
n604 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal)", span="1162-1162"];
n605 [cluster="QuantConnect.Securities.Security.SetLeverage(decimal)", label="Entry QuantConnect.Securities.Security.SetLeverage(decimal)", span="654-654"];
n606 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal, decimal)", label="var algo = new QCAlgorithm()", span="1177-1177"];
n609 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal, decimal)", label="algo.Securities[Symbols.MSFT].TransactionModel = new ConstantFeeTransactionModel(fee)", span="1180-1180"];
n611 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal, decimal)", label="msft.MarginModel = new SecurityMarginModel(initialMarginRequirement, maintenanceMarginRequirement)", span="1182-1182"];
n607 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal, decimal)", label="algo.AddSecurity(SecurityType.Equity, ''MSFT'')", span="1178-1178"];
n608 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal, decimal)", label="algo.SetCash(100000)", span="1179-1179"];
n610 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal, decimal)", label="msft = algo.Securities[Symbols.MSFT]", span="1181-1181"];
n612 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal, decimal)", label="return algo;", span="1183-1183"];
n613 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal, decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.GetAlgorithm(out QuantConnect.Securities.Security, decimal, decimal, decimal)", span="1174-1174"];
n614 [cluster="QuantConnect.Securities.SecurityMarginModel.SecurityMarginModel(decimal, decimal)", label="Entry QuantConnect.Securities.SecurityMarginModel.SecurityMarginModel(decimal, decimal)", span="35-35"];
n615 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.Update(QuantConnect.Securities.Security, decimal)", label="security.SetMarketPrice(new TradeBar\r\n            {\r\n                Time = DateTime.Now,\r\n                Symbol = security.Symbol,\r\n                Open = close,\r\n                High = close,\r\n                Low = close,\r\n                Close = close\r\n            })", span="1188-1196"];
n616 [cluster="QuantConnect.Tests.Algorithm.AlgorithmTradingTests.Update(QuantConnect.Securities.Security, decimal)", label="Exit QuantConnect.Tests.Algorithm.AlgorithmTradingTests.Update(QuantConnect.Securities.Security, decimal)", span="1186-1186"];
n617 [cluster="QuantConnect.Data.Market.TradeBar.TradeBar()", label="Entry QuantConnect.Data.Market.TradeBar.TradeBar()", span="120-120"];
n618 [cluster="QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", label="Entry QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", span="612-612"];
m0_13 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorDataPoint)", file="InteractiveBrokersBrokerage.cs", label="Entry QuantConnect.Indicators.LeastSquaresMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorDataPoint)", span="75-75"];
m0_14 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorDataPoint)", file="InteractiveBrokersBrokerage.cs", label="!IsReady", span="78-78"];
m0_15 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorDataPoint)", file="InteractiveBrokersBrokerage.cs", label="return input;", span="78-78"];
m0_16 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorDataPoint)", file="InteractiveBrokersBrokerage.cs", label="var series = window\r\n                .OrderBy(i => i.Time)\r\n                .Select(i => Convert.ToDouble(i.Value))\r\n                .ToArray()", span="81-84"];
m0_18 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorDataPoint)", file="InteractiveBrokersBrokerage.cs", label="Intercept.Update(input.Time, (decimal)ols.Item1)", span="87-87"];
m0_19 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorDataPoint)", file="InteractiveBrokersBrokerage.cs", label="Slope.Update(input.Time, (decimal)ols.Item2)", span="88-88"];
m0_17 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorDataPoint)", file="InteractiveBrokersBrokerage.cs", label="var ols = Fit.Line(x: t, y: series)", span="86-86"];
m0_20 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorDataPoint)", file="InteractiveBrokersBrokerage.cs", label="return Intercept + Slope * Period;", span="91-91"];
m0_21 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorDataPoint)", file="InteractiveBrokersBrokerage.cs", label="Exit QuantConnect.Indicators.LeastSquaresMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow<QuantConnect.Indicators.IndicatorDataPoint>, QuantConnect.Indicators.IndicatorDataPoint)", span="75-75"];
m0_11 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.LeastSquaresMovingAverage(int)", file="InteractiveBrokersBrokerage.cs", label="Entry QuantConnect.Indicators.LeastSquaresMovingAverage.LeastSquaresMovingAverage(int)", span="62-62"];
m0_12 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.LeastSquaresMovingAverage(int)", file="InteractiveBrokersBrokerage.cs", label="Exit QuantConnect.Indicators.LeastSquaresMovingAverage.LeastSquaresMovingAverage(int)", span="62-62"];
m0_25 [cluster="QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Update(System.DateTime, decimal)", file="InteractiveBrokersBrokerage.cs", label="Entry QuantConnect.Indicators.IndicatorBase<QuantConnect.Indicators.IndicatorDataPoint>.Update(System.DateTime, decimal)", span="36-36"];
m0_33 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.Reset()", file="InteractiveBrokersBrokerage.cs", label="Entry QuantConnect.Indicators.LeastSquaresMovingAverage.Reset()", span="97-97"];
m0_34 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.Reset()", file="InteractiveBrokersBrokerage.cs", label="Intercept.Reset()", span="99-99"];
m0_35 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.Reset()", file="InteractiveBrokersBrokerage.cs", label="Slope.Reset()", span="100-100"];
m0_36 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.Reset()", file="InteractiveBrokersBrokerage.cs", label="base.Reset()", span="101-101"];
m0_37 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.Reset()", file="InteractiveBrokersBrokerage.cs", label="Exit QuantConnect.Indicators.LeastSquaresMovingAverage.Reset()", span="97-97"];
m0_7 [cluster="QuantConnect.Indicators.Identity.Identity(string)", file="InteractiveBrokersBrokerage.cs", label="Entry QuantConnect.Indicators.Identity.Identity(string)", span="27-27"];
m0_0 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.LeastSquaresMovingAverage(string, int)", file="InteractiveBrokersBrokerage.cs", label="Entry QuantConnect.Indicators.LeastSquaresMovingAverage.LeastSquaresMovingAverage(string, int)", span="50-50"];
m0_1 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.LeastSquaresMovingAverage(string, int)", file="InteractiveBrokersBrokerage.cs", label="t = Vector<double>.Build.Dense(period, i => i + 1).ToArray()", span="53-53"];
m0_2 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.LeastSquaresMovingAverage(string, int)", file="InteractiveBrokersBrokerage.cs", label="Intercept = new Identity(name + ''_Intercept'')", span="54-54"];
m0_3 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.LeastSquaresMovingAverage(string, int)", file="InteractiveBrokersBrokerage.cs", label="Slope = new Identity(name + ''_Slope'')", span="55-55"];
m0_4 [cluster="QuantConnect.Indicators.LeastSquaresMovingAverage.LeastSquaresMovingAverage(string, int)", file="InteractiveBrokersBrokerage.cs", label="Exit QuantConnect.Indicators.LeastSquaresMovingAverage.LeastSquaresMovingAverage(string, int)", span="50-50"];
m0_32 [cluster="System.Convert.ToDouble(decimal)", file="InteractiveBrokersBrokerage.cs", label="Entry System.Convert.ToDouble(decimal)", span="0-0"];
m0_5 [cluster="Unk.Dense", file="InteractiveBrokersBrokerage.cs", label="Entry Unk.Dense", span=""];
m0_22 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="InteractiveBrokersBrokerage.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
m0_39 [cluster="QuantConnect.Indicators.WindowIndicator<T>.Reset()", file="InteractiveBrokersBrokerage.cs", label="Entry QuantConnect.Indicators.WindowIndicator<T>.Reset()", span="69-69"];
m0_23 [cluster="Unk.Select", file="InteractiveBrokersBrokerage.cs", label="Entry Unk.Select", span=""];
m0_6 [cluster="Unk.ToArray", file="InteractiveBrokersBrokerage.cs", label="Entry Unk.ToArray", span=""];
m0_24 [cluster="Unk.Line", file="InteractiveBrokersBrokerage.cs", label="Entry Unk.Line", span=""];
m0_38 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Reset()", file="InteractiveBrokersBrokerage.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.Reset()", span="102-102"];
m0_29 [cluster="lambda expression", file="InteractiveBrokersBrokerage.cs", label="Entry lambda expression", span="83-83"];
m0_8 [cluster="lambda expression", file="InteractiveBrokersBrokerage.cs", label="Entry lambda expression", span="53-53"];
m0_9 [cluster="lambda expression", file="InteractiveBrokersBrokerage.cs", label="i + 1", span="53-53"];
m0_10 [cluster="lambda expression", file="InteractiveBrokersBrokerage.cs", label="Exit lambda expression", span="53-53"];
m0_26 [cluster="lambda expression", file="InteractiveBrokersBrokerage.cs", label="Entry lambda expression", span="82-82"];
m0_27 [cluster="lambda expression", file="InteractiveBrokersBrokerage.cs", label="i.Time", span="82-82"];
m0_28 [cluster="lambda expression", file="InteractiveBrokersBrokerage.cs", label="Exit lambda expression", span="82-82"];
m0_30 [cluster="lambda expression", file="InteractiveBrokersBrokerage.cs", label="Convert.ToDouble(i.Value)", span="83-83"];
m0_31 [cluster="lambda expression", file="InteractiveBrokersBrokerage.cs", label="Exit lambda expression", span="83-83"];
m0_40 [file="InteractiveBrokersBrokerage.cs", label="QuantConnect.Indicators.LeastSquaresMovingAverage", span=""];
m1_76 [cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)", file="Order.cs", label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98"];
m1_66 [cluster="System.Math.Abs(decimal)", file="Order.cs", label="Entry System.Math.Abs(decimal)", span="0-0"];
m1_71 [cluster="System.Math.Sign(decimal)", file="Order.cs", label="Entry System.Math.Sign(decimal)", span="0-0"];
m1_75 [cluster="QuantConnect.Securities.SecurityPortfolioManager.AddTransactionRecord(System.DateTime, decimal)", file="Order.cs", label="Entry QuantConnect.Securities.SecurityPortfolioManager.AddTransactionRecord(System.DateTime, decimal)", span="781-781"];
m1_72 [cluster="QuantConnect.Securities.SecurityHolding.AddNewProfit(decimal)", file="Order.cs", label="Entry QuantConnect.Securities.SecurityHolding.AddNewProfit(decimal)", span="357-357"];
m1_69 [cluster="QuantConnect.Securities.ISettlementModel.ApplyFunds(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, System.DateTime, string, decimal)", file="Order.cs", label="Entry QuantConnect.Securities.ISettlementModel.ApplyFunds(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, System.DateTime, string, decimal)", span="32-32"];
m1_0 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="Entry QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", span="34-34"];
m1_1 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var quoteCash = security.QuoteCurrency", span="36-36"];
m1_2 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var isLong = security.Holdings.IsLong", span="39-39"];
m1_3 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var isShort = security.Holdings.IsShort", span="40-40"];
m1_5 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var quantityHoldings = (decimal)security.Holdings.Quantity", span="43-43"];
m1_6 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var absoluteHoldingsQuantity = security.Holdings.AbsoluteQuantity", span="44-44"];
m1_7 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var averageHoldingsPrice = security.Holdings.AveragePrice", span="45-45"];
m1_8 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="security.Type == SecurityType.Future", span="50-50"];
m1_9 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var saleValueInQuoteCurrency = fill.FillPrice * Convert.ToDecimal(fill.AbsoluteFillQuantity)", span="53-53"];
m1_11 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="security.Holdings.AddNewSale(saleValue)", span="55-55"];
m1_12 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var saleValueInQuoteCurrency = fill.FillPrice * Convert.ToDecimal(fill.AbsoluteFillQuantity) * security.SymbolProperties.ContractMultiplier", span="59-59"];
m1_14 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="security.Holdings.AddNewSale(saleValue)", span="61-61"];
m1_15 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var feeThisOrder = Math.Abs(fill.OrderFee)", span="65-65"];
m1_16 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="security.Holdings.AddNewFee(feeThisOrder)", span="66-66"];
m1_17 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="portfolio.CashBook[CashBook.AccountCurrency].AddAmount(-feeThisOrder)", span="67-67"];
m1_18 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="security.Type != SecurityType.Future", span="71-71"];
m1_19 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="security.SettlementModel.ApplyFunds(portfolio, security, fill.UtcTime, quoteCash.Symbol, -fill.FillQuantity * fill.FillPrice * security.SymbolProperties.ContractMultiplier)", span="73-73"];
m1_20 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="security.Type == SecurityType.Forex", span="75-75"];
m1_21 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var forex = (Forex.Forex) security", span="78-78"];
m1_22 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="security.SettlementModel.ApplyFunds(portfolio, security, fill.UtcTime, forex.BaseCurrencySymbol, fill.FillQuantity)", span="79-79"];
m1_23 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="closedPosition = isLong && fill.Direction == OrderDirection.Sell\r\n                             || isShort && fill.Direction == OrderDirection.Buy", span="83-84"];
m1_25 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var absoluteQuantityClosed = Math.Min(fill.AbsoluteFillQuantity, absoluteHoldingsQuantity)", span="92-92"];
m1_26 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var closedSaleValueInQuoteCurrency = Math.Sign(-fill.FillQuantity)*fill.FillPrice*absoluteQuantityClosed", span="93-93"];
m1_27 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var closedCost = Math.Sign(-fill.FillQuantity)*absoluteQuantityClosed*averageHoldingsPrice", span="94-94"];
m1_28 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var conversionFactor = security.QuoteCurrency.ConversionRate*security.SymbolProperties.ContractMultiplier", span="95-95"];
m1_30 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="security.Type == SecurityType.Future", span="99-99"];
m1_31 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="security.SettlementModel.ApplyFunds(portfolio, security, fill.UtcTime, quoteCash.Symbol, lastTradeProfit)", span="101-101"];
m1_32 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="security.Holdings.AddNewProfit(lastTradeProfit)", span="105-105"];
m1_33 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="security.Holdings.SetLastTradeProfit(lastTradeProfit)", span="106-106"];
m1_34 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="portfolio.AddTransactionRecord(security.LocalTime.ConvertToUtc(security.Exchange.TimeZone), lastTradeProfit - 2*feeThisOrder)", span="107-107"];
m1_36 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="averageHoldingsPrice = fill.FillPrice", span="115-115"];
m1_37 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="quantityHoldings = fill.FillQuantity", span="116-116"];
m1_39 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="fill.Direction", span="121-121"];
m1_41 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="averageHoldingsPrice = ((averageHoldingsPrice*quantityHoldings) + (fill.FillQuantity*fill.FillPrice))/(quantityHoldings + fill.FillQuantity)", span="125-125"];
m1_42 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="quantityHoldings += fill.FillQuantity", span="127-127"];
m1_44 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="quantityHoldings += fill.FillQuantity", span="131-131"];
m1_46 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="averageHoldingsPrice = fill.FillPrice", span="135-135"];
m1_50 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="fill.Direction", span="147-147"];
m1_52 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="quantityHoldings += fill.FillQuantity", span="151-151"];
m1_54 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="averageHoldingsPrice = fill.FillPrice", span="155-155"];
m1_58 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="averageHoldingsPrice = ((averageHoldingsPrice*quantityHoldings) + (fill.FillQuantity*fill.FillPrice))/(quantityHoldings + fill.FillQuantity)", span="167-167"];
m1_59 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="quantityHoldings += fill.FillQuantity", span="168-168"];
m1_62 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="security.Holdings.SetHoldings(averageHoldingsPrice, quantityHoldings)", span="179-179"];
m1_10 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var saleValue = saleValueInQuoteCurrency * quoteCash.ConversionRate", span="54-54"];
m1_13 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var saleValue = saleValueInQuoteCurrency * quoteCash.ConversionRate", span="60-60"];
m1_38 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label=isLong, span="118-118"];
m1_4 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var closedPosition = false", span="41-41"];
m1_49 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label=isShort, span="144-144"];
m1_35 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="quantityHoldings == 0", span="112-112"];
m1_24 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label=closedPosition, span="87-87"];
m1_29 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="var lastTradeProfit = (closedSaleValueInQuoteCurrency - closedCost)*conversionFactor", span="96-96"];
m1_40 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="OrderDirection.Buy", span="123-123"];
m1_43 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="OrderDirection.Sell", span="130-130"];
m1_45 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="quantityHoldings < 0", span="132-132"];
m1_47 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="quantityHoldings == 0", span="137-137"];
m1_48 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="averageHoldingsPrice = 0", span="139-139"];
m1_60 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label=Exception, span="173-173"];
m1_51 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="OrderDirection.Buy", span="149-149"];
m1_57 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="OrderDirection.Sell", span="163-163"];
m1_53 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="quantityHoldings > 0", span="152-152"];
m1_55 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="quantityHoldings == 0", span="157-157"];
m1_56 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="averageHoldingsPrice = 0", span="159-159"];
m1_61 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="Log.Error(err)", span="175-175"];
m1_63 [cluster="QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", file="Order.cs", label="Exit QuantConnect.Securities.SecurityPortfolioModel.ProcessFill(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.OrderEvent)", span="34-34"];
m1_70 [cluster="System.Math.Min(decimal, decimal)", file="Order.cs", label="Entry System.Math.Min(decimal, decimal)", span="0-0"];
m1_64 [cluster="System.Convert.ToDecimal(decimal)", file="Order.cs", label="Entry System.Convert.ToDecimal(decimal)", span="0-0"];
m1_73 [cluster="QuantConnect.Securities.SecurityHolding.SetLastTradeProfit(decimal)", file="Order.cs", label="Entry QuantConnect.Securities.SecurityHolding.SetLastTradeProfit(decimal)", span="375-375"];
m1_77 [cluster="QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, decimal)", file="Order.cs", label="Entry QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, decimal)", span="392-392"];
m1_68 [cluster="QuantConnect.Securities.Cash.AddAmount(decimal)", file="Order.cs", label="Entry QuantConnect.Securities.Cash.AddAmount(decimal)", span="101-101"];
m1_67 [cluster="QuantConnect.Securities.SecurityHolding.AddNewFee(decimal)", file="Order.cs", label="Entry QuantConnect.Securities.SecurityHolding.AddNewFee(decimal)", span="348-348"];
m1_65 [cluster="QuantConnect.Securities.SecurityHolding.AddNewSale(decimal)", file="Order.cs", label="Entry QuantConnect.Securities.SecurityHolding.AddNewSale(decimal)", span="366-366"];
m1_74 [cluster="System.DateTime.ConvertToUtc(DateTimeZone, bool)", file="Order.cs", label="Entry System.DateTime.ConvertToUtc(DateTimeZone, bool)", span="576-576"];
n619 -> n3  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n14  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n21  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n28  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n35  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n42  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n49  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n60  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n69  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n78  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n87  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n96  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n105  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n114  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n123  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n132  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n141  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n150  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n159  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n168  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n177  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n186  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n195  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n204  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n213  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n222  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n231  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n240  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n249  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n258  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n267  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n277  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n286  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n295  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n304  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n313  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n322  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n331  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n340  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n349  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n352  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n359  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n362  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n369  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n372  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n379  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n382  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n389  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n392  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n399  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n402  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n409  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n412  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n419  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n422  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n429  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n432  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n440  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n443  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n450  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n453  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n461  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n464  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n475  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n491  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n502  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n619 -> n509  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Algorithm.AlgorithmTradingTests", style=dashed];
n7 -> n602  [color=darkseagreen4, key=1, label=decimal, style=dashed];
n48 -> n50  [color=darkseagreen4, key=1, label=algo, style=dashed];
n48 -> n51  [color=darkseagreen4, key=1, label=algo, style=dashed];
n59 -> n61  [color=darkseagreen4, key=1, label=algo, style=dashed];
n59 -> n62  [color=darkseagreen4, key=1, label=algo, style=dashed];
n68 -> n70  [color=darkseagreen4, key=1, label=algo, style=dashed];
n68 -> n71  [color=darkseagreen4, key=1, label=algo, style=dashed];
n77 -> n79  [color=darkseagreen4, key=1, label=algo, style=dashed];
n77 -> n80  [color=darkseagreen4, key=1, label=algo, style=dashed];
n86 -> n88  [color=darkseagreen4, key=1, label=algo, style=dashed];
n86 -> n89  [color=darkseagreen4, key=1, label=algo, style=dashed];
n95 -> n97  [color=darkseagreen4, key=1, label=algo, style=dashed];
n95 -> n98  [color=darkseagreen4, key=1, label=algo, style=dashed];
n104 -> n106  [color=darkseagreen4, key=1, label=algo, style=dashed];
n104 -> n107  [color=darkseagreen4, key=1, label=algo, style=dashed];
n113 -> n115  [color=darkseagreen4, key=1, label=algo, style=dashed];
n113 -> n116  [color=darkseagreen4, key=1, label=algo, style=dashed];
n122 -> n124  [color=darkseagreen4, key=1, label=algo, style=dashed];
n122 -> n125  [color=darkseagreen4, key=1, label=algo, style=dashed];
n131 -> n133  [color=darkseagreen4, key=1, label=algo, style=dashed];
n131 -> n134  [color=darkseagreen4, key=1, label=algo, style=dashed];
n140 -> n142  [color=darkseagreen4, key=1, label=algo, style=dashed];
n140 -> n143  [color=darkseagreen4, key=1, label=algo, style=dashed];
n149 -> n151  [color=darkseagreen4, key=1, label=algo, style=dashed];
n149 -> n152  [color=darkseagreen4, key=1, label=algo, style=dashed];
n158 -> n160  [color=darkseagreen4, key=1, label=algo, style=dashed];
n158 -> n161  [color=darkseagreen4, key=1, label=algo, style=dashed];
n167 -> n169  [color=darkseagreen4, key=1, label=algo, style=dashed];
n167 -> n170  [color=darkseagreen4, key=1, label=algo, style=dashed];
n176 -> n178  [color=darkseagreen4, key=1, label=algo, style=dashed];
n176 -> n179  [color=darkseagreen4, key=1, label=algo, style=dashed];
n185 -> n187  [color=darkseagreen4, key=1, label=algo, style=dashed];
n185 -> n188  [color=darkseagreen4, key=1, label=algo, style=dashed];
n194 -> n196  [color=darkseagreen4, key=1, label=algo, style=dashed];
n194 -> n197  [color=darkseagreen4, key=1, label=algo, style=dashed];
n203 -> n205  [color=darkseagreen4, key=1, label=algo, style=dashed];
n203 -> n206  [color=darkseagreen4, key=1, label=algo, style=dashed];
n212 -> n214  [color=darkseagreen4, key=1, label=algo, style=dashed];
n212 -> n215  [color=darkseagreen4, key=1, label=algo, style=dashed];
n221 -> n223  [color=darkseagreen4, key=1, label=algo, style=dashed];
n221 -> n224  [color=darkseagreen4, key=1, label=algo, style=dashed];
n230 -> n232  [color=darkseagreen4, key=1, label=algo, style=dashed];
n230 -> n233  [color=darkseagreen4, key=1, label=algo, style=dashed];
n239 -> n241  [color=darkseagreen4, key=1, label=algo, style=dashed];
n239 -> n242  [color=darkseagreen4, key=1, label=algo, style=dashed];
n248 -> n250  [color=darkseagreen4, key=1, label=algo, style=dashed];
n248 -> n251  [color=darkseagreen4, key=1, label=algo, style=dashed];
n257 -> n259  [color=darkseagreen4, key=1, label=algo, style=dashed];
n257 -> n260  [color=darkseagreen4, key=1, label=algo, style=dashed];
n266 -> n268  [color=darkseagreen4, key=1, label=algo, style=dashed];
n266 -> n269  [color=darkseagreen4, key=1, label=algo, style=dashed];
n276 -> n278  [color=darkseagreen4, key=1, label=algo, style=dashed];
n276 -> n279  [color=darkseagreen4, key=1, label=algo, style=dashed];
n285 -> n287  [color=darkseagreen4, key=1, label=algo, style=dashed];
n285 -> n288  [color=darkseagreen4, key=1, label=algo, style=dashed];
n294 -> n296  [color=darkseagreen4, key=1, label=algo, style=dashed];
n294 -> n297  [color=darkseagreen4, key=1, label=algo, style=dashed];
n303 -> n305  [color=darkseagreen4, key=1, label=algo, style=dashed];
n303 -> n306  [color=darkseagreen4, key=1, label=algo, style=dashed];
n312 -> n314  [color=darkseagreen4, key=1, label=algo, style=dashed];
n312 -> n315  [color=darkseagreen4, key=1, label=algo, style=dashed];
n321 -> n323  [color=darkseagreen4, key=1, label=algo, style=dashed];
n321 -> n324  [color=darkseagreen4, key=1, label=algo, style=dashed];
n330 -> n332  [color=darkseagreen4, key=1, label=algo, style=dashed];
n330 -> n333  [color=darkseagreen4, key=1, label=algo, style=dashed];
n339 -> n341  [color=darkseagreen4, key=1, label=algo, style=dashed];
n339 -> n342  [color=darkseagreen4, key=1, label=algo, style=dashed];
n348 -> n350  [color=darkseagreen4, key=1, label=algo, style=dashed];
n348 -> n351  [color=darkseagreen4, key=1, label=algo, style=dashed];
n348 -> n352  [color=darkseagreen4, key=1, label=msft, style=dashed];
n358 -> n360  [color=darkseagreen4, key=1, label=algo, style=dashed];
n358 -> n361  [color=darkseagreen4, key=1, label=algo, style=dashed];
n358 -> n362  [color=darkseagreen4, key=1, label=msft, style=dashed];
n368 -> n370  [color=darkseagreen4, key=1, label=algo, style=dashed];
n368 -> n371  [color=darkseagreen4, key=1, label=algo, style=dashed];
n368 -> n372  [color=darkseagreen4, key=1, label=msft, style=dashed];
n378 -> n380  [color=darkseagreen4, key=1, label=algo, style=dashed];
n378 -> n381  [color=darkseagreen4, key=1, label=algo, style=dashed];
n378 -> n382  [color=darkseagreen4, key=1, label=msft, style=dashed];
n388 -> n390  [color=darkseagreen4, key=1, label=algo, style=dashed];
n388 -> n391  [color=darkseagreen4, key=1, label=algo, style=dashed];
n388 -> n392  [color=darkseagreen4, key=1, label=msft, style=dashed];
n398 -> n400  [color=darkseagreen4, key=1, label=algo, style=dashed];
n398 -> n401  [color=darkseagreen4, key=1, label=algo, style=dashed];
n398 -> n402  [color=darkseagreen4, key=1, label=msft, style=dashed];
n408 -> n410  [color=darkseagreen4, key=1, label=algo, style=dashed];
n408 -> n411  [color=darkseagreen4, key=1, label=algo, style=dashed];
n408 -> n412  [color=darkseagreen4, key=1, label=msft, style=dashed];
n418 -> n420  [color=darkseagreen4, key=1, label=algo, style=dashed];
n418 -> n421  [color=darkseagreen4, key=1, label=algo, style=dashed];
n418 -> n422  [color=darkseagreen4, key=1, label=msft, style=dashed];
n428 -> n430  [color=darkseagreen4, key=1, label=algo, style=dashed];
n428 -> n431  [color=darkseagreen4, key=1, label=algo, style=dashed];
n428 -> n432  [color=darkseagreen4, key=1, label=msft, style=dashed];
n428 -> n433  [color=darkseagreen4, key=1, label=algo, style=dashed];
n439 -> n441  [color=darkseagreen4, key=1, label=algo, style=dashed];
n439 -> n442  [color=darkseagreen4, key=1, label=algo, style=dashed];
n439 -> n443  [color=darkseagreen4, key=1, label=msft, style=dashed];
n449 -> n451  [color=darkseagreen4, key=1, label=algo, style=dashed];
n449 -> n452  [color=darkseagreen4, key=1, label=algo, style=dashed];
n449 -> n453  [color=darkseagreen4, key=1, label=msft, style=dashed];
n449 -> n454  [color=darkseagreen4, key=1, label=algo, style=dashed];
n460 -> n462  [color=darkseagreen4, key=1, label=algo, style=dashed];
n460 -> n463  [color=darkseagreen4, key=1, label=algo, style=dashed];
n460 -> n464  [color=darkseagreen4, key=1, label=msft, style=dashed];
n469 -> n471  [color=darkseagreen4, key=1, label=algo, style=dashed];
n469 -> n472  [color=darkseagreen4, key=1, label=algo, style=dashed];
n485 -> n487  [color=darkseagreen4, key=1, label=algo, style=dashed];
n485 -> n488  [color=darkseagreen4, key=1, label=algo, style=dashed];
n496 -> n498  [color=darkseagreen4, key=1, label=algo, style=dashed];
n496 -> n499  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n510  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n514  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n515  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n516  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n517  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n518  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n519  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n520  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n521  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n522  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n523  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n524  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n525  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n526  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n527  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n528  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n529  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n530  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n531  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n532  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n533  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n534  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n535  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n536  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n537  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n538  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n539  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n540  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n541  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n542  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n543  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n544  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n545  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n546  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n547  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n548  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n549  [color=darkseagreen4, key=1, label=algo, style=dashed];
n508 -> n551  [color=darkseagreen4, key=1, label=algo, style=dashed];
n511 -> n513  [color=darkseagreen4, key=1, label=mock, style=dashed];
n511 -> n514  [color=darkseagreen4, key=1, label=mock, style=dashed];
n513 -> n592  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n597 -> n599  [color=darkseagreen4, key=1, label=algo, style=dashed];
n597 -> n603  [color=darkseagreen4, key=1, label=algo, style=dashed];
n601 -> n604  [color=darkseagreen4, key=1, label="out QuantConnect.Securities.Security", style=dashed];
n606 -> n608  [color=darkseagreen4, key=1, label=algo, style=dashed];
n606 -> n612  [color=darkseagreen4, key=1, label=algo, style=dashed];
n610 -> n613  [color=darkseagreen4, key=1, label="out QuantConnect.Securities.Security", style=dashed];
m0_13 -> m0_15  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorDataPoint", style=dashed];
m0_13 -> m0_18  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorDataPoint", style=dashed];
m0_13 -> m0_19  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.IndicatorDataPoint", style=dashed];
m0_16 -> m0_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_16 -> m0_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_17 -> m0_19  [color=darkseagreen4, key=1, label=ols, style=dashed];
m0_1 -> m0_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_40 -> m0_14  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.LeastSquaresMovingAverage", style=dashed];
m0_40 -> m0_18  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.LeastSquaresMovingAverage", style=dashed];
m0_40 -> m0_19  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.LeastSquaresMovingAverage", style=dashed];
m0_40 -> m0_20  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.LeastSquaresMovingAverage", style=dashed];
m0_40 -> m0_34  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.LeastSquaresMovingAverage", style=dashed];
m0_40 -> m0_35  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.LeastSquaresMovingAverage", style=dashed];
m0_40 -> m0_36  [color=darkseagreen4, key=1, label="QuantConnect.Indicators.LeastSquaresMovingAverage", style=dashed];
m1_0 -> m1_8  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m1_0 -> m1_11  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m1_0 -> m1_14  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m1_0 -> m1_16  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m1_0 -> m1_17  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m1_0 -> m1_18  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m1_0 -> m1_19  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m1_0 -> m1_20  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m1_0 -> m1_22  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m1_0 -> m1_30  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m1_0 -> m1_31  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m1_0 -> m1_32  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m1_0 -> m1_33  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m1_0 -> m1_34  [color=darkseagreen4, key=1, label="QuantConnect.Securities.SecurityPortfolioManager", style=dashed];
m1_0 -> m1_39  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m1_0 -> m1_50  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderEvent", style=dashed];
m1_0 -> m1_62  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m1_1 -> m1_19  [color=darkseagreen4, key=1, label=quoteCash, style=dashed];
m1_1 -> m1_31  [color=darkseagreen4, key=1, label=quoteCash, style=dashed];
m1_2 -> m1_38  [color=darkseagreen4, key=1, label=isLong, style=dashed];
m1_3 -> m1_49  [color=darkseagreen4, key=1, label=isShort, style=dashed];
m1_5 -> m1_35  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
m1_5 -> m1_62  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
m1_7 -> m1_62  [color=darkseagreen4, key=1, label=averageHoldingsPrice, style=dashed];
m1_15 -> m1_17  [color=darkseagreen4, key=1, label=feeThisOrder, style=dashed];
m1_15 -> m1_34  [color=darkseagreen4, key=1, label=feeThisOrder, style=dashed];
m1_36 -> m1_62  [color=darkseagreen4, key=1, label=averageHoldingsPrice, style=dashed];
m1_41 -> m1_62  [color=darkseagreen4, key=1, label=averageHoldingsPrice, style=dashed];
m1_44 -> m1_47  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
m1_44 -> m1_62  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
m1_52 -> m1_55  [color=darkseagreen4, key=1, label=quantityHoldings, style=dashed];
m1_58 -> m1_62  [color=darkseagreen4, key=1, label=averageHoldingsPrice, style=dashed];
m1_29 -> m1_31  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
m1_29 -> m1_32  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
m1_29 -> m1_33  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
m1_29 -> m1_34  [color=darkseagreen4, key=1, label=lastTradeProfit, style=dashed];
}
