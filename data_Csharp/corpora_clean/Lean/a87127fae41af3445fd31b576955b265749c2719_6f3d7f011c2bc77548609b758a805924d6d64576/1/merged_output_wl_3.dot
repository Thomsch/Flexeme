digraph  {
n214 [label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", span=""];
n215 [label=algorithmName, span=""];
n216 [label=liveJob, span=""];
n217 [label="QuantConnect.Interfaces.IAlgorithm", span=""];
n218 [label="QuantConnect.Packets.AlgorithmNodePacket", span=""];
n219 [label="QuantConnect.Lean.Engine.RealTime.IRealTimeHandler", span=""];
n220 [label="QuantConnect.Interfaces.IBrokerage", span=""];
n221 [label=liveJob, span=""];
n222 [label=order, span=""];
n0 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", span="72-72"];
n1 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", label="Errors = new List<string>()", span="74-74"];
n2 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", label="MaximumRuntime = TimeSpan.FromDays(10*365)", span="75-75"];
n5 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n3 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", label="MaxOrders = int.MaxValue", span="76-76"];
n6 [cluster="System.TimeSpan.FromDays(double)", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
n4 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", span="72-72"];
n7 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", span="85-85"];
n8 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="string error", span="87-87"];
n10 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="var loader = new Loader(algorithmNodePacket.Language, TimeSpan.FromSeconds(15), names =>\r\n            {\r\n                // if there's only one use that guy\r\n                if (names.Count == 1)\r\n                {\r\n                    return names.Single();\r\n                }\r\n\r\n                // if there's more than one then check configuration for which one we should use\r\n                var algorithmName = Config.Get(''algorithm-type-name'');\r\n                return names.Single(x => x.Contains(''.'' + algorithmName));\r\n            })", span="91-102"];
n11 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="var complete = loader.TryCreateAlgorithmInstanceWithIsolator(assemblyPath, algorithmNodePacket.RamAllocation, out algorithm, out error)", span="104-104"];
n9 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="IAlgorithm algorithm", span="88-88"];
n16 [cluster="Loader.cstr", label="Entry Loader.cstr", span=""];
n17 [cluster="System.TimeSpan.FromSeconds(double)", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
n21 [cluster="lambda expression", label="names.Count == 1", span="94-94"];
n22 [cluster="lambda expression", label="return names.Single();", span="96-96"];
n24 [cluster="lambda expression", label="return names.Single(x => x.Contains(''.'' + algorithmName));", span="101-101"];
n12 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="!complete", span="105-105"];
n18 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", label="Entry QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", span="348-348"];
n13 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="throw new Exception(error + '' Try re-building algorithm and remove duplicate QCAlgorithm base classes.'');", span="105-105"];
n14 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="return algorithm;", span="107-107"];
n15 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", span="85-85"];
n19 [cluster="System.Exception.Exception(string)", label="Entry System.Exception.Exception(string)", span="0-0"];
n20 [cluster="lambda expression", label="Entry lambda expression", span="91-102"];
n23 [cluster="lambda expression", label="var algorithmName = Config.Get(''algorithm-type-name'')", span="100-100"];
n27 [cluster="QuantConnect.Configuration.Config.Get(string, string)", label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="90-90"];
n30 [cluster="lambda expression", label="x.Contains(''.'' + algorithmName)", span="101-101"];
n25 [cluster="lambda expression", label="Exit lambda expression", span="91-102"];
n28 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n29 [cluster="lambda expression", label="Entry lambda expression", span="101-101"];
n26 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
n31 [cluster="lambda expression", label="Exit lambda expression", span="101-101"];
n32 [cluster="string.Contains(string)", label="Entry string.Contains(string)", span="0-0"];
n33 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", span="117-117"];
n34 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="var liveJob = algorithmNodePacket as LiveNodePacket", span="119-119"];
n39 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="var brokerage = _factory.CreateBrokerage(liveJob, uninitializedAlgorithm)", span="130-130"];
n35 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="liveJob == null", span="120-120"];
n37 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="_factory = Composer.Instance.Single<IBrokerageFactory>(brokerageFactory => brokerageFactory.BrokerageType.MatchesTypeName(liveJob.Brokerage))", span="126-126"];
n46 [cluster="lambda expression", label="brokerageFactory.BrokerageType.MatchesTypeName(liveJob.Brokerage)", span="126-126"];
n36 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="throw new ArgumentException(''BrokerageSetupHandler.CreateBrokerage requires a live node packet'');", span="122-122"];
n38 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="factory = _factory", span="127-127"];
n43 [cluster="QuantConnect.Util.Composer.Single<T>(System.Func<T, bool>)", label="Entry QuantConnect.Util.Composer.Single<T>(System.Func<T, bool>)", span="60-60"];
n45 [cluster="lambda expression", label="Entry lambda expression", span="126-126"];
n41 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", span="117-117"];
n40 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", label="return brokerage;", span="132-132"];
n44 [cluster="QuantConnect.Interfaces.IBrokerageFactory.CreateBrokerage(QuantConnect.Packets.LiveNodePacket, QuantConnect.Interfaces.IAlgorithm)", label="Entry QuantConnect.Interfaces.IBrokerageFactory.CreateBrokerage(QuantConnect.Packets.LiveNodePacket, QuantConnect.Interfaces.IAlgorithm)", span="55-55"];
n42 [cluster="System.ArgumentException.ArgumentException(string)", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
n47 [cluster="lambda expression", label="Exit lambda expression", span="126-126"];
n48 [cluster="System.Type.MatchesTypeName(string)", label="Entry System.Type.MatchesTypeName(string)", span="608-608"];
n49 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", span="145-145"];
n50 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", color=red, community=0, label="0: _algorithm = algorithm", span="147-147"];
n51 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var liveJob = job as LiveNodePacket", span="150-150"];
n60 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="resultHandler.SendStatusUpdate(AlgorithmStatus.Initializing, ''Initializing algorithm...'')", span="178-178"];
n61 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var controls = job.Controls", span="181-181"];
n63 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", color=red, community=0, label="0: var initializeComplete = isolator.ExecuteWithTimeLimit(TimeSpan.FromSeconds(300), () =>\r\n                {\r\n                    try\r\n                    {\r\n                        //Set the default brokerage model before initialize\r\n                        algorithm.SetBrokerageModel(_factory.BrokerageModel);\r\n                        //Margin calls are disabled by default in live mode\r\n                        algorithm.Portfolio.MarginCallModel = MarginCallModel.Null;\r\n                        //Set our parameters\r\n                        algorithm.SetParameters(job.Parameters);\r\n                        algorithm.SetAvailableDataTypes(GetConfiguredDataFeeds());\r\n                        //Algorithm is live, not backtesting:\r\n                        algorithm.SetLiveMode(true);\r\n                        //Initialize the algorithm's starting date\r\n                        algorithm.SetDateTime(DateTime.UtcNow);\r\n                        //Set the source impl for the event scheduling\r\n                        algorithm.Schedule.SetEventSchedule(realTimeHandler);\r\n\r\n                        // If we're using IB, set the default subscription limit to 100,\r\n                        // algorithms can override this setting in the Initialize method\r\n                        if (brokerage is InteractiveBrokersBrokerage)\r\n                        {\r\n                            algorithm.Settings.DataSubscriptionLimit = 100;\r\n                        }\r\n\r\n                        //Initialise the algorithm, get the required data:\r\n                        algorithm.Initialize();\r\n                        if (liveJob.Brokerage != ''PaperBrokerage'')\r\n                        {\r\n                            //Zero the CashBook - we'll populate directly from brokerage\r\n                            foreach (var kvp in algorithm.Portfolio.CashBook)\r\n                            {\r\n                                kvp.Value.SetAmount(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (Exception err)\r\n                    {\r\n                        AddInitializationError(err.Message);\r\n                    }\r\n                }, controls.RamAllocation)", span="183-223"];
n161 [cluster="lambda expression", label="algorithm.SetBrokerageModel(_factory.BrokerageModel)", span="188-188"];
n162 [cluster="lambda expression", label="algorithm.Portfolio.MarginCallModel = MarginCallModel.Null", span="190-190"];
n163 [cluster="lambda expression", label="algorithm.SetParameters(job.Parameters)", span="192-192"];
n164 [cluster="lambda expression", label="algorithm.SetAvailableDataTypes(GetConfiguredDataFeeds())", span="193-193"];
n165 [cluster="lambda expression", label="algorithm.SetLiveMode(true)", span="195-195"];
n166 [cluster="lambda expression", label="algorithm.SetDateTime(DateTime.UtcNow)", span="197-197"];
n167 [cluster="lambda expression", label="algorithm.Schedule.SetEventSchedule(realTimeHandler)", span="199-199"];
n168 [cluster="lambda expression", color=red, community=0, label="0: brokerage is InteractiveBrokersBrokerage", span="203-203"];
n169 [cluster="lambda expression", label="algorithm.Settings.DataSubscriptionLimit = 100", span="205-205"];
n170 [cluster="lambda expression", label="algorithm.Initialize()", span="209-209"];
n172 [cluster="lambda expression", label="algorithm.Portfolio.CashBook", span="213-213"];
n67 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="resultHandler.SendStatusUpdate(AlgorithmStatus.LoggingIn, ''Logging into brokerage...'')", span="232-232"];
n68 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="brokerage.Message += brokerageOnMessage", span="234-234"];
n70 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="brokerage.Connect()", span="240-240"];
n75 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="!brokerage.IsConnected", span="250-250"];
n79 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var cashBalance = brokerage.GetCashBalance()", span="261-261"];
n82 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="algorithm.Portfolio.SetCash(cash.Symbol, cash.Amount, cash.ConversionRate)", span="265-265"];
n88 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var openOrders = brokerage.GetOpenOrders()", span="279-279"];
n91 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="order.Id = algorithm.Transactions.GetIncrementOrderId()", span="284-284"];
n92 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="transactionHandler.Orders.AddOrUpdate(order.Id, order, (i, o) => order)", span="285-285"];
n98 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var holdings = brokerage.GetAccountHoldings()", span="299-299"];
n100 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var minResolution = new Lazy<Resolution>(() => algorithm.Securities.Select(x => x.Value.Resolution).DefaultIfEmpty(Resolution.Second).Min())", span="301-301"];
n190 [cluster="lambda expression", label="algorithm.Securities.Select(x => x.Value.Resolution).DefaultIfEmpty(Resolution.Second).Min()", span="301-301"];
n106 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="!algorithm.Portfolio.ContainsKey(holding.Symbol)", span="317-317"];
n109 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="algorithm.AddOptionContract(holding.Symbol, minResolution.Value, true, 1.0m)", span="324-324"];
n111 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="algorithm.AddFutureContract(holding.Symbol, minResolution.Value, true, 1.0m)", span="329-329"];
n112 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="algorithm.AddSecurity(holding.Type, holding.Symbol.Value, minResolution.Value, null, true, 1.0m, false)", span="334-334"];
n113 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="algorithm.Portfolio[holding.Symbol].SetHoldings(holding.AveragePrice, (int) holding.Quantity)", span="338-338"];
n114 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="algorithm.Securities[holding.Symbol].SetMarketPrice(new TradeBar\r\n                        {\r\n                            Time = DateTime.Now,\r\n                            Open = holding.MarketPrice,\r\n                            High = holding.MarketPrice,\r\n                            Low = holding.MarketPrice,\r\n                            Close = holding.MarketPrice,\r\n                            Volume = 0,\r\n                            Symbol = holding.Symbol,\r\n                            DataType = MarketDataType.TradeBar\r\n                        })", span="339-349"];
n119 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="algorithm.PostInitialize()", span="359-359"];
n120 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="StartingPortfolioValue = algorithm.Portfolio.TotalPortfolioValue", span="362-362"];
n52 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="liveJob == null", span="151-151"];
n55 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="string.IsNullOrWhiteSpace(liveJob.Brokerage)", span="158-158"];
n171 [cluster="lambda expression", label="liveJob.Brokerage != ''PaperBrokerage''", span="210-210"];
n53 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''BrokerageSetupHandler requires a LiveNodePacket'')", span="153-153"];
n54 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="154-154"];
n126 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)", span="402-402"];
n56 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''A brokerage must be specified'')", span="160-160"];
n58 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="EventHandler<BrokerageMessageEvent> brokerageOnMessage = (sender, args) =>\r\n            {\r\n                if (args.Type == BrokerageMessageType.Error)\r\n                {\r\n                    AddInitializationError(string.Format(''Brokerage Error Code: {0} - {1}'', args.Code, args.Message));\r\n                }\r\n            }", span="166-172"];
n127 [cluster="string.IsNullOrWhiteSpace(string)", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
n57 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="161-161"];
n59 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Initializing algorithm...'')", span="176-176"];
n156 [cluster="lambda expression", label="args.Type == BrokerageMessageType.Error", span="168-168"];
n157 [cluster="lambda expression", label="AddInitializationError(string.Format(''Brokerage Error Code: {0} - {1}'', args.Code, args.Message))", span="170-170"];
n128 [cluster="QuantConnect.Logging.Log.Trace(string, bool)", label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106"];
n129 [cluster="QuantConnect.Lean.Engine.Results.IResultHandler.SendStatusUpdate(QuantConnect.AlgorithmStatus, string)", label="Entry QuantConnect.Lean.Engine.Results.IResultHandler.SendStatusUpdate(QuantConnect.AlgorithmStatus, string)", span="219-219"];
n62 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var isolator = new Isolator()", span="182-182"];
n130 [cluster="QuantConnect.Isolator.Isolator()", label="Entry QuantConnect.Isolator.Isolator()", span="55-55"];
n64 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="!initializeComplete", span="225-225"];
n131 [cluster="QuantConnect.Isolator.ExecuteWithTimeLimit(System.TimeSpan, System.Action, long)", label="Entry QuantConnect.Isolator.ExecuteWithTimeLimit(System.TimeSpan, System.Action, long)", span="145-145"];
n160 [cluster="lambda expression", label="Entry lambda expression", span="183-223"];
n65 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''Initialization timed out.'')", span="227-227"];
n66 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="228-228"];
n69 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Connecting to brokerage...'')", span="236-236"];
n71 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=Exception, span="242-242"];
n132 [cluster="QuantConnect.Interfaces.IBrokerage.Connect()", label="Entry QuantConnect.Interfaces.IBrokerage.Connect()", span="103-103"];
n72 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Error(err)", span="244-244"];
n73 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(string.Format(''Error connecting to brokerage: {0}. '' +\r\n                        ''This may be caused by incorrect login credentials or an unsupported account type.'', err.Message))", span="245-246"];
n133 [cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)", label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98"];
n74 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="247-247"];
n134 [cluster="string.Format(string, object)", label="Entry string.Format(string, object)", span="0-0"];
n76 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''Unable to connect to brokerage.'')", span="253-253"];
n78 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Fetching cash balance from brokerage...'')", span="257-257"];
n77 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="254-254"];
n80 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=cashBalance, span="262-262"];
n135 [cluster="QuantConnect.Interfaces.IBrokerage.GetCashBalance()", label="Entry QuantConnect.Interfaces.IBrokerage.GetCashBalance()", span="77-77"];
n81 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Setting '' + cash.Symbol + '' cash to '' + cash.Amount)", span="264-264"];
n83 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=Exception, span="268-268"];
n87 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Fetching open orders from brokerage...'')", span="275-275"];
n136 [cluster="QuantConnect.Securities.SecurityPortfolioManager.SetCash(string, decimal, decimal)", label="Entry QuantConnect.Securities.SecurityPortfolioManager.SetCash(string, decimal, decimal)", span="483-483"];
n84 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Error(err)", span="270-270"];
n85 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''Error getting cash balance from brokerage: '' + err.Message)", span="271-271"];
n86 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="272-272"];
n89 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=openOrders, span="280-280"];
n137 [cluster="QuantConnect.Interfaces.IBrokerage.GetOpenOrders()", label="Entry QuantConnect.Interfaces.IBrokerage.GetOpenOrders()", span="65-65"];
n90 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", color=red, community=0, label="0: Log.Trace(''BrokerageSetupHandler.Setup(): Has open order: '' + order.Symbol.ToString() + '' - '' + order.Quantity)", span="283-283"];
n93 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=Exception, span="288-288"];
n97 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Fetching holdings from brokerage...'')", span="295-295"];
n187 [cluster="lambda expression", label=order, span="285-285"];
n138 [cluster="QuantConnect.Symbol.ToString()", label="Entry QuantConnect.Symbol.ToString()", span="350-350"];
n139 [cluster="QuantConnect.Securities.SecurityTransactionManager.GetIncrementOrderId()", label="Entry QuantConnect.Securities.SecurityTransactionManager.GetIncrementOrderId()", span="365-365"];
n140 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)", span="0-0"];
n186 [cluster="lambda expression", label="Entry lambda expression", span="285-285"];
n94 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Error(err)", span="290-290"];
n95 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''Error getting open orders from brokerage: '' + err.Message)", span="291-291"];
n96 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="292-292"];
n99 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="var supportedSecurityTypes = new HashSet<SecurityType> { SecurityType.Equity, SecurityType.Forex, SecurityType.Cfd, SecurityType.Option, SecurityType.Future }", span="300-300"];
n141 [cluster="QuantConnect.Interfaces.IBrokerage.GetAccountHoldings()", label="Entry QuantConnect.Interfaces.IBrokerage.GetAccountHoldings()", span="71-71"];
n101 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=holdings, span="302-302"];
n142 [cluster="System.Collections.Generic.HashSet<T>.HashSet()", label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0"];
n103 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="!supportedSecurityTypes.Contains(holding.Type)", span="307-307"];
n105 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''Found unsupported security type in existing brokerage holdings: '' + holding.Type + ''. '' +\r\n                                ''QuantConnect currently supports the following security types: '' + string.Join('','', supportedSecurityTypes))", span="310-311"];
n143 [cluster="Lazy<Resolution>.cstr", label="Entry Lazy<Resolution>.cstr", span=""];
n102 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Has existing holding: '' + holding)", span="304-304"];
n115 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=Exception, span="352-352"];
n104 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Error(''BrokerageSetupHandler.Setup(): Unsupported security type: '' + holding.Type + ''-'' + holding.Symbol.Value)", span="309-309"];
n107 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Trace(''BrokerageSetupHandler.Setup(): Adding unrequested security: '' + holding.Symbol.Value)", span="319-319"];
n108 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="holding.Type == SecurityType.Option", span="321-321"];
n110 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="holding.Type == SecurityType.Future", span="326-326"];
n144 [cluster="System.Collections.Generic.HashSet<T>.Contains(T)", label="Entry System.Collections.Generic.HashSet<T>.Contains(T)", span="0-0"];
n145 [cluster="QuantConnect.Logging.Log.Error(string, bool)", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="65-65"];
n147 [cluster="QuantConnect.Securities.SecurityPortfolioManager.ContainsKey(QuantConnect.Symbol)", label="Entry QuantConnect.Securities.SecurityPortfolioManager.ContainsKey(QuantConnect.Symbol)", span="129-129"];
n148 [cluster="QuantConnect.Interfaces.IAlgorithm.AddOptionContract(QuantConnect.Symbol, QuantConnect.Resolution, bool, decimal)", label="Entry QuantConnect.Interfaces.IAlgorithm.AddOptionContract(QuantConnect.Symbol, QuantConnect.Resolution, bool, decimal)", span="486-486"];
n150 [cluster="QuantConnect.Interfaces.IAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, string, bool, decimal, bool)", label="Entry QuantConnect.Interfaces.IAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, string, bool, decimal, bool)", span="466-466"];
n149 [cluster="QuantConnect.Interfaces.IAlgorithm.AddFutureContract(QuantConnect.Symbol, QuantConnect.Resolution, bool, decimal)", label="Entry QuantConnect.Interfaces.IAlgorithm.AddFutureContract(QuantConnect.Symbol, QuantConnect.Resolution, bool, decimal)", span="476-476"];
n151 [cluster="QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", label="Entry QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", span="383-383"];
n152 [cluster="QuantConnect.Data.Market.TradeBar.TradeBar()", label="Entry QuantConnect.Data.Market.TradeBar.TradeBar()", span="121-121"];
n153 [cluster="QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", label="Entry QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", span="610-610"];
n146 [cluster="string.Join<T>(string, System.Collections.Generic.IEnumerable<T>)", label="Entry string.Join<T>(string, System.Collections.Generic.IEnumerable<T>)", span="0-0"];
n116 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Log.Error(err)", span="354-354"];
n117 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(''Error getting account holdings from brokerage: '' + err.Message)", span="355-355"];
n118 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return false;", span="356-356"];
n154 [cluster="QuantConnect.Interfaces.IAlgorithm.PostInitialize()", label="Entry QuantConnect.Interfaces.IAlgorithm.PostInitialize()", span="300-300"];
n121 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="StartingDate = DateTime.Now", span="363-363"];
n122 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label=Exception, span="365-365"];
n124 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="return Errors.Count == 0;", span="377-377"];
n123 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="AddInitializationError(err.Message)", span="367-367"];
n125 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", span="145-145"];
n155 [cluster="lambda expression", label="Entry lambda expression", span="166-172"];
n158 [cluster="lambda expression", label="Exit lambda expression", span="166-172"];
n159 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
n177 [cluster="QuantConnect.Interfaces.IAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.IBrokerageModel)", label="Entry QuantConnect.Interfaces.IAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.IBrokerageModel)", span="322-322"];
n178 [cluster="QuantConnect.Interfaces.IAlgorithm.SetParameters(System.Collections.Generic.Dictionary<string, string>)", label="Entry QuantConnect.Interfaces.IAlgorithm.SetParameters(System.Collections.Generic.Dictionary<string, string>)", span="314-314"];
n179 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", span="384-384"];
n180 [cluster="QuantConnect.Interfaces.IAlgorithm.SetAvailableDataTypes(System.Collections.Generic.Dictionary<QuantConnect.SecurityType, System.Collections.Generic.List<QuantConnect.TickType>>)", label="Entry QuantConnect.Interfaces.IAlgorithm.SetAvailableDataTypes(System.Collections.Generic.Dictionary<QuantConnect.SecurityType, System.Collections.Generic.List<QuantConnect.TickType>>)", span="571-571"];
n181 [cluster="QuantConnect.Interfaces.IAlgorithm.SetLiveMode(bool)", label="Entry QuantConnect.Interfaces.IAlgorithm.SetLiveMode(bool)", span="521-521"];
n182 [cluster="QuantConnect.Interfaces.IAlgorithm.SetDateTime(System.DateTime)", label="Entry QuantConnect.Interfaces.IAlgorithm.SetDateTime(System.DateTime)", span="431-431"];
n183 [cluster="QuantConnect.Scheduling.ScheduleManager.SetEventSchedule(QuantConnect.Scheduling.IEventSchedule)", label="Entry QuantConnect.Scheduling.ScheduleManager.SetEventSchedule(QuantConnect.Scheduling.IEventSchedule)", span="65-65"];
n184 [cluster="QuantConnect.Interfaces.IAlgorithm.Initialize()", label="Entry QuantConnect.Interfaces.IAlgorithm.Initialize()", span="294-294"];
n174 [cluster="lambda expression", label=Exception, span="219-219"];
n176 [cluster="lambda expression", label="Exit lambda expression", span="183-223"];
n173 [cluster="lambda expression", label="kvp.Value.SetAmount(0)", span="215-215"];
n185 [cluster="QuantConnect.Securities.Cash.SetAmount(decimal)", label="Entry QuantConnect.Securities.Cash.SetAmount(decimal)", span="114-114"];
n175 [cluster="lambda expression", label="AddInitializationError(err.Message)", span="221-221"];
n188 [cluster="lambda expression", label="Exit lambda expression", span="285-285"];
n189 [cluster="lambda expression", label="Entry lambda expression", span="301-301"];
n191 [cluster="lambda expression", label="Exit lambda expression", span="301-301"];
n192 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n193 [cluster="Unk.DefaultIfEmpty", label="Entry Unk.DefaultIfEmpty", span=""];
n194 [cluster="Unk.Min", label="Entry Unk.Min", span=""];
n195 [cluster="lambda expression", label="Entry lambda expression", span="301-301"];
n196 [cluster="lambda expression", label="x.Value.Resolution", span="301-301"];
n197 [cluster="lambda expression", label="Exit lambda expression", span="301-301"];
n198 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="var dataFeedsConfigString = Config.Get(''security-data-feeds'')", span="386-386"];
n199 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="Dictionary<SecurityType, List<TickType>> dataFeeds = new Dictionary<SecurityType, List<TickType>>()", span="388-388"];
n200 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="dataFeedsConfigString != string.Empty", span="389-389"];
n201 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="dataFeeds = JsonConvert.DeserializeObject<Dictionary<SecurityType, List<TickType>>>(dataFeedsConfigString)", span="391-391"];
n204 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n202 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="return dataFeeds;", span="394-394"];
n205 [cluster="Unk.>", label="Entry Unk.>", span=""];
n203 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", span="384-384"];
n206 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)", label="Errors.Add(''Failed to initialize algorithm: '' + message)", span="404-404"];
n207 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)", span="402-402"];
n208 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n209 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", span="411-411"];
n210 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", label="_factory != null", span="413-413"];
n211 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", label="_factory.Dispose()", span="415-415"];
n212 [cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", span="411-411"];
n213 [cluster="System.IDisposable.Dispose()", label="Entry System.IDisposable.Dispose()", span="0-0"];
m0_41 [cluster="QuantConnect.TimeKeeper.AddTimeZone(DateTimeZone)", file="SubscriptionManager.cs", label="Entry QuantConnect.TimeKeeper.AddTimeZone(DateTimeZone)", span="108-108"];
m0_36 [cluster="Unk.Where", file="SubscriptionManager.cs", label="Entry Unk.Where", span=""];
m0_61 [cluster="Unk.IsAssignableFrom", file="SubscriptionManager.cs", label="Entry Unk.IsAssignableFrom", span=""];
m0_8 [cluster="QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", file="SubscriptionManager.cs", label="Entry QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", span="91-91"];
m0_9 [cluster="QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", file="SubscriptionManager.cs", label="var dataType = typeof(TradeBar)", span="94-94"];
m0_10 [cluster="QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", file="SubscriptionManager.cs", label="resolution == Resolution.Tick", span="95-95"];
m0_12 [cluster="QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", file="SubscriptionManager.cs", label="return Add(dataType, symbol, resolution, timeZone, exchangeTimeZone, isCustomData, fillDataForward, extendedMarketHours);", span="99-99"];
m0_11 [cluster="QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", file="SubscriptionManager.cs", label="dataType = typeof(Tick)", span="97-97"];
m0_13 [cluster="QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", file="SubscriptionManager.cs", label="Exit QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", span="91-91"];
m0_89 [cluster="QuantConnect.Util.LeanData.GetDataType(QuantConnect.Resolution, QuantConnect.TickType)", file="SubscriptionManager.cs", label="Entry QuantConnect.Util.LeanData.GetDataType(QuantConnect.Resolution, QuantConnect.TickType)", span="251-251"];
m0_45 [cluster="QuantConnect.Symbol.IsCanonical()", file="SubscriptionManager.cs", label="Entry QuantConnect.Symbol.IsCanonical()", span="164-164"];
m0_35 [cluster="System.Collections.Generic.HashSet<T>.Add(T)", file="SubscriptionManager.cs", label="Entry System.Collections.Generic.HashSet<T>.Add(T)", span="0-0"];
m0_86 [cluster="lambda expression", file="SubscriptionManager.cs", label="Entry lambda expression", span="239-239"];
m0_42 [cluster="lambda expression", file="SubscriptionManager.cs", label="Entry lambda expression", span="142-142"];
m0_46 [cluster="lambda expression", file="SubscriptionManager.cs", label="Entry lambda expression", span="143-143"];
m0_43 [cluster="lambda expression", file="SubscriptionManager.cs", label="!x.Symbol.IsCanonical()", span="142-142"];
m0_44 [cluster="lambda expression", file="SubscriptionManager.cs", label="Exit lambda expression", span="142-142"];
m0_47 [cluster="lambda expression", file="SubscriptionManager.cs", label="x.Symbol.Value", span="143-143"];
m0_48 [cluster="lambda expression", file="SubscriptionManager.cs", label="Exit lambda expression", span="143-143"];
m0_67 [cluster="lambda expression", file="SubscriptionManager.cs", label="x.Symbol == symbol", span="170-170"];
m0_66 [cluster="lambda expression", file="SubscriptionManager.cs", label="Entry lambda expression", span="170-170"];
m0_69 [cluster="lambda expression", file="SubscriptionManager.cs", label="Entry lambda expression", span="192-192"];
m0_68 [cluster="lambda expression", file="SubscriptionManager.cs", label="Exit lambda expression", span="170-170"];
m0_70 [cluster="lambda expression", file="SubscriptionManager.cs", label="x.Type.Name", span="192-192"];
m0_71 [cluster="lambda expression", file="SubscriptionManager.cs", label="Exit lambda expression", span="192-192"];
m0_87 [cluster="lambda expression", file="SubscriptionManager.cs", label="LeanData.GetDataType(resolution, tickType)", span="239-239"];
m0_88 [cluster="lambda expression", file="SubscriptionManager.cs", label="Exit lambda expression", span="239-239"];
m0_32 [cluster="QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", file="SubscriptionManager.cs", label="Entry QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", span="161-161"];
m0_14 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="Entry QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", span="117-117"];
m0_15 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="dataTimeZone == null", span="119-119"];
m0_17 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="exchangeTimeZone == null", span="123-123"];
m0_19 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="var newConfig = new SubscriptionDataConfig(dataType, symbol, resolution, dataTimeZone, exchangeTimeZone, fillDataForward, extendedMarketHours, isInternalFeed, isCustomData, isFilteredSubscription: isFilteredSubscription)", span="129-129"];
m0_27 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="_timeKeeper.AddTimeZone(exchangeTimeZone)", span="154-154"];
m0_28 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="HasCustomData = HasCustomData || isCustomData", span="157-157"];
m0_16 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="throw new ArgumentNullException(''dataTimeZone'', ''DataTimeZone is a required parameter for new subscriptions.  Set to the time zone the raw data is time stamped in.'');", span="121-121"];
m0_18 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="throw new ArgumentNullException(''exchangeTimeZone'', ''ExchangeTimeZone is a required parameter for new subscriptions.  Set to the time zone the security exchange resides in.'');", span="125-125"];
m0_20 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", color=red, community=0, file="SubscriptionManager.cs", label="0: Subscriptions.Contains(newConfig)", span="132-132"];
m0_21 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", color=red, community=0, file="SubscriptionManager.cs", label="0: Log.Trace(''SubscriptionManager.Add(): subscription already added: '' + newConfig)", span="134-134"];
m0_22 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", color=red, community=0, file="SubscriptionManager.cs", label="0: return newConfig;", span="135-135"];
m0_23 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="Subscriptions.Add(newConfig)", span="138-138"];
m0_29 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="return newConfig;", span="159-159"];
m0_24 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="var uniqueCount = Subscriptions\r\n                .Where(x => !x.Symbol.IsCanonical())\r\n                .DistinctBy(x => x.Symbol.Value)\r\n                .Count()", span="141-144"];
m0_25 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="uniqueCount > _algorithmSettings.DataSubscriptionLimit", span="145-145"];
m0_26 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="throw new Exception(\r\n                    string.Format(\r\n                        ''The maximum number of concurrent market data subscriptions was exceeded ({0}). Please reduce the number of symbols requested or increase the limit using Settings.DataSubscriptionLimit.'',\r\n                        _algorithmSettings.DataSubscriptionLimit));", span="147-150"];
m0_30 [cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs", label="Exit QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", span="117-117"];
m0_6 [cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="SubscriptionManager.cs", label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0"];
m0_37 [cluster="Unk.DistinctBy", file="SubscriptionManager.cs", label="Entry Unk.DistinctBy", span=""];
m0_39 [cluster="System.Exception.Exception(string)", file="SubscriptionManager.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m0_76 [cluster="QuantConnect.Data.SubscriptionManager.GetDataTypesForSecurity(QuantConnect.SecurityType)", file="SubscriptionManager.cs", label="Entry QuantConnect.Data.SubscriptionManager.GetDataTypesForSecurity(QuantConnect.SecurityType)", span="215-215"];
m0_77 [cluster="QuantConnect.Data.SubscriptionManager.GetDataTypesForSecurity(QuantConnect.SecurityType)", file="SubscriptionManager.cs", label="return AvailableDataTypes[securityType];", span="217-217"];
m0_78 [cluster="QuantConnect.Data.SubscriptionManager.GetDataTypesForSecurity(QuantConnect.SecurityType)", file="SubscriptionManager.cs", label="Exit QuantConnect.Data.SubscriptionManager.GetDataTypesForSecurity(QuantConnect.SecurityType)", span="215-215"];
m0_59 [cluster="Unk.ToList", file="SubscriptionManager.cs", label="Entry Unk.ToList", span=""];
m0_7 [cluster="QuantConnect.Data.SubscriptionManager.DefaultDataTypes()", file="SubscriptionManager.cs", label="Entry QuantConnect.Data.SubscriptionManager.DefaultDataTypes()", span="198-198"];
m0_72 [cluster="QuantConnect.Data.SubscriptionManager.DefaultDataTypes()", file="SubscriptionManager.cs", label="return new Dictionary<SecurityType, List<TickType>>()\r\n            {\r\n                {SecurityType.Base, new List<TickType>() { TickType.Trade } },\r\n                {SecurityType.Forex, new List<TickType>() { TickType.Quote } },\r\n                {SecurityType.Equity, new List<TickType>() { TickType.Trade } },\r\n                {SecurityType.Option, new List<TickType>() { TickType.Quote, TickType.Trade, TickType.OpenInterest } },\r\n                {SecurityType.Cfd, new List<TickType>() { TickType.Quote } },\r\n                {SecurityType.Future, new List<TickType>() { TickType.Quote, TickType.Trade, TickType.OpenInterest } },\r\n                {SecurityType.Commodity, new List<TickType>() { TickType.Trade } }\r\n            };", span="200-209"];
m0_73 [cluster="QuantConnect.Data.SubscriptionManager.DefaultDataTypes()", file="SubscriptionManager.cs", label="Exit QuantConnect.Data.SubscriptionManager.DefaultDataTypes()", span="198-198"];
m0_60 [cluster="System.ArgumentException.ArgumentException(string)", file="SubscriptionManager.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m0_33 [cluster="System.Collections.Generic.HashSet<T>.Contains(T)", file="SubscriptionManager.cs", label="Entry System.Collections.Generic.HashSet<T>.Contains(T)", span="0-0"];
m0_62 [cluster="Unk.Add", file="SubscriptionManager.cs", label="Entry Unk.Add", span=""];
m0_81 [cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs", label="return new List<Type>() { typeof(ZipEntryName) };", span="231-231"];
m0_79 [cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs", label="Entry QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", span="227-227"];
m0_80 [cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs", label=isCanonical, span="229-229"];
m0_82 [cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs", label="resolution == Resolution.Tick", span="234-234"];
m0_84 [cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs", label="return AvailableDataTypes[symbolSecurityType].Select(tickType => LeanData.GetDataType(resolution, tickType)).ToList();", span="239-239"];
m0_83 [cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs", label="return new List<Type>() { typeof(Tick) };", span="236-236"];
m0_85 [cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs", label="Exit QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", span="227-227"];
m0_0 [cluster="QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", file="SubscriptionManager.cs", label="Entry QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", span="57-57"];
m0_1 [cluster="QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", file="SubscriptionManager.cs", label="_algorithmSettings = algorithmSettings", span="59-59"];
m0_2 [cluster="QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", file="SubscriptionManager.cs", label="_timeKeeper = timeKeeper", span="60-60"];
m0_3 [cluster="QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", color=red, community=0, file="SubscriptionManager.cs", label="0: Subscriptions = new HashSet<SubscriptionDataConfig>()", span="62-62"];
m0_4 [cluster="QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", file="SubscriptionManager.cs", label="AvailableDataTypes = DefaultDataTypes()", span="65-65"];
m0_5 [cluster="QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", file="SubscriptionManager.cs", label="Exit QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", span="57-57"];
m0_40 [cluster="string.Format(string, object)", file="SubscriptionManager.cs", label="Entry string.Format(string, object)", span="0-0"];
m0_49 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs", label="Entry QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", span="167-167"];
m0_50 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs", label="var subscriptions = Subscriptions.Where(x => x.Symbol == symbol).ToList()", span="170-170"];
m0_52 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs", label="throw new ArgumentException(''Please subscribe to this symbol before adding a consolidator for it. Symbol: '' + symbol.Value);", span="175-175"];
m0_54 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs", label="consolidator.InputType.IsAssignableFrom(subscription.Type)", span="181-181"];
m0_55 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs", label="subscription.Consolidators.Add(consolidator)", span="183-183"];
m0_57 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs", label="throw new ArgumentException(string.Format(''Type mismatch found between consolidator and symbol. '' +\r\n                ''Symbol: {0} does not support input type: {1}. Supported types: {2}.'',\r\n                symbol.Value, \r\n                consolidator.InputType.Name,\r\n                string.Join('','', subscriptions.Select(x => x.Type.Name))));", span="188-192"];
m0_51 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs", label="subscriptions.Count == 0", span="172-172"];
m0_53 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs", label=subscriptions, span="178-178"];
m0_56 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs", label="return;", span="184-184"];
m0_58 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs", label="Exit QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", span="167-167"];
m0_64 [cluster="Unk.Join", file="SubscriptionManager.cs", label="Entry Unk.Join", span=""];
m0_74 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SubscriptionManager.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_65 [cluster="string.Format(string, object, object, object)", file="SubscriptionManager.cs", label="Entry string.Format(string, object, object, object)", span="0-0"];
m0_34 [cluster="QuantConnect.Logging.Log.Trace(string, bool)", file="SubscriptionManager.cs", label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106"];
m0_63 [cluster="Unk.Select", file="SubscriptionManager.cs", label="Entry Unk.Select", span=""];
m0_38 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="SubscriptionManager.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m0_31 [cluster="System.ArgumentNullException.ArgumentNullException(string, string)", file="SubscriptionManager.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string, string)", span="0-0"];
m0_90 [file="SubscriptionManager.cs", label="QuantConnect.Data.SubscriptionManager", span=""];
m0_91 [file="SubscriptionManager.cs", label="QuantConnect.Symbol", span=""];
m0_92 [file="SubscriptionManager.cs", label="QuantConnect.Resolution", span=""];
n214 -> n1  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n2  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n3  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n37  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n38  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n39  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n50  [color=red, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n53  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n56  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n58  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n157  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n63  [color=red, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n161  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n175  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n65  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n73  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n76  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n85  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n95  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n105  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n117  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n120  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n121  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n123  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n124  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n206  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n210  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n214 -> n211  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", style=dashed];
n215 -> n30  [color=darkseagreen4, key=1, label=algorithmName, style=dashed];
n216 -> n46  [color=darkseagreen4, key=1, label=liveJob, style=dashed];
n217 -> n161  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n217 -> n162  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n217 -> n163  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n217 -> n164  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n217 -> n165  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n217 -> n166  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n217 -> n167  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n217 -> n169  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n217 -> n170  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n217 -> n172  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n217 -> n190  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n218 -> n163  [color=darkseagreen4, key=1, label="QuantConnect.Packets.AlgorithmNodePacket", style=dashed];
n219 -> n167  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.RealTime.IRealTimeHandler", style=dashed];
n220 -> n168  [color=red, key=1, label="QuantConnect.Interfaces.IBrokerage", style=dashed];
n221 -> n171  [color=darkseagreen4, key=1, label=liveJob, style=dashed];
n222 -> n187  [color=darkseagreen4, key=1, label=order, style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n5  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n6  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n4 -> n0  [color=blue, key=0, style=bold];
n7 -> n8  [key=0, style=solid];
n7 -> n10  [color=darkseagreen4, key=1, label="QuantConnect.Packets.AlgorithmNodePacket", style=dashed];
n7 -> n11  [color=darkseagreen4, key=1, label="QuantConnect.Packets.AlgorithmNodePacket", style=dashed];
n7 -> n9  [color=darkorchid, key=3, label="method methodReturn QuantConnect.Interfaces.IAlgorithm CreateAlgorithmInstance", style=bold];
n8 -> n9  [key=0, style=solid];
n10 -> n11  [key=0, style=solid];
n10 -> n16  [key=2, style=dotted];
n10 -> n17  [key=2, style=dotted];
n10 -> n21  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<string>", style=dashed];
n10 -> n22  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<string>", style=dashed];
n10 -> n24  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<string>", style=dashed];
n11 -> n12  [key=0, style=solid];
n11 -> n18  [key=2, style=dotted];
n11 -> n13  [color=darkseagreen4, key=1, label=error, style=dashed];
n11 -> n14  [color=darkseagreen4, key=1, label=algorithm, style=dashed];
n9 -> n10  [key=0, style=solid];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [key=0, style=solid];
n22 -> n25  [key=0, style=solid];
n22 -> n26  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid];
n24 -> n28  [key=2, style=dotted];
n24 -> n29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n12 -> n13  [key=0, style=solid];
n12 -> n14  [key=0, style=solid];
n13 -> n15  [key=0, style=solid];
n13 -> n19  [key=2, style=dotted];
n14 -> n15  [key=0, style=solid];
n15 -> n7  [color=blue, key=0, style=bold];
n20 -> n21  [key=0, style=solid];
n20 -> n22  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<string>", style=dashed];
n20 -> n24  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<string>", style=dashed];
n23 -> n24  [key=0, style=solid];
n23 -> n27  [key=2, style=dotted];
n23 -> n30  [color=darkseagreen4, key=1, label=algorithmName, style=dashed];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=2, style=dotted];
n25 -> n20  [color=blue, key=0, style=bold];
n29 -> n30  [key=0, style=solid];
n31 -> n29  [color=blue, key=0, style=bold];
n33 -> n34  [key=0, style=solid];
n33 -> n39  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n34 -> n35  [key=0, style=solid];
n34 -> n37  [color=darkseagreen4, key=1, label=liveJob, style=dashed];
n34 -> n46  [color=darkseagreen4, key=1, label=liveJob, style=dashed];
n34 -> n39  [color=darkseagreen4, key=1, label=liveJob, style=dashed];
n39 -> n40  [key=0, style=solid];
n39 -> n44  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n35 -> n37  [key=0, style=solid];
n37 -> n38  [key=0, style=solid];
n37 -> n43  [key=2, style=dotted];
n37 -> n45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n46 -> n47  [key=0, style=solid];
n46 -> n48  [key=2, style=dotted];
n36 -> n41  [key=0, style=solid];
n36 -> n42  [key=2, style=dotted];
n38 -> n39  [key=0, style=solid];
n38 -> n41  [color=darkseagreen4, key=1, label="out QuantConnect.Interfaces.IBrokerageFactory", style=dashed];
n45 -> n46  [key=0, style=solid];
n41 -> n33  [color=blue, key=0, style=bold];
n40 -> n41  [key=0, style=solid];
n47 -> n45  [color=blue, key=0, style=bold];
n49 -> n50  [color=red, key=0, style=solid];
n49 -> n51  [color=darkseagreen4, key=1, label="QuantConnect.Packets.AlgorithmNodePacket", style=dashed];
n49 -> n60  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.IResultHandler", style=dashed];
n49 -> n61  [color=darkseagreen4, key=1, label="QuantConnect.Packets.AlgorithmNodePacket", style=dashed];
n49 -> n63  [color=red, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n161  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n162  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n163  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n164  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n165  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n166  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n167  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n168  [color=red, key=1, label="QuantConnect.Interfaces.IBrokerage", style=dashed];
n49 -> n169  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n170  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n172  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n67  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.IResultHandler", style=dashed];
n49 -> n68  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IBrokerage", style=dashed];
n49 -> n70  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IBrokerage", style=dashed];
n49 -> n75  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IBrokerage", style=dashed];
n49 -> n79  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IBrokerage", style=dashed];
n49 -> n82  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n88  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IBrokerage", style=dashed];
n49 -> n91  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n92  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler", style=dashed];
n49 -> n98  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IBrokerage", style=dashed];
n49 -> n100  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n190  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n106  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n109  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n111  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n112  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n113  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n114  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n119  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n120  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
n49 -> n54  [color=darkorchid, key=3, label="method methodReturn bool Setup", style=bold];
n50 -> n51  [color=red, key=0, style=solid];
n51 -> n52  [key=0, style=solid];
n51 -> n55  [color=darkseagreen4, key=1, label=liveJob, style=dashed];
n51 -> n63  [color=red, key=1, label=liveJob, style=dashed];
n51 -> n171  [color=darkseagreen4, key=1, label=liveJob, style=dashed];
n60 -> n61  [key=0, style=solid];
n60 -> n129  [key=2, style=dotted];
n61 -> n62  [key=0, style=solid];
n61 -> n63  [color=red, key=1, label=controls, style=dashed];
n63 -> n64  [color=red, key=0, style=solid];
n63 -> n17  [color=red, key=2, style=dotted];
n63 -> n131  [color=red, key=2, style=dotted];
n63 -> n160  [color=red, key=1, label="lambda expression", style=dashed];
n161 -> n162  [key=0, style=solid];
n161 -> n177  [key=2, style=dotted];
n162 -> n163  [key=0, style=solid];
n163 -> n164  [key=0, style=solid];
n163 -> n178  [key=2, style=dotted];
n164 -> n165  [key=0, style=solid];
n164 -> n179  [key=2, style=dotted];
n164 -> n180  [key=2, style=dotted];
n165 -> n166  [key=0, style=solid];
n165 -> n181  [key=2, style=dotted];
n166 -> n167  [key=0, style=solid];
n166 -> n182  [key=2, style=dotted];
n167 -> n168  [color=red, key=0, style=solid];
n167 -> n183  [key=2, style=dotted];
n168 -> n169  [color=red, key=0, style=solid];
n168 -> n170  [color=red, key=0, style=solid];
n169 -> n170  [key=0, style=solid];
n170 -> n171  [key=0, style=solid];
n170 -> n184  [key=2, style=dotted];
n172 -> n173  [key=0, style=solid];
n172 -> n174  [key=0, style=solid];
n172 -> n176  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n67 -> n129  [key=2, style=dotted];
n68 -> n69  [key=0, style=solid];
n70 -> n71  [key=0, style=solid];
n70 -> n75  [key=0, style=solid];
n70 -> n132  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n78  [key=0, style=solid];
n79 -> n80  [key=0, style=solid];
n79 -> n135  [key=2, style=dotted];
n82 -> n80  [key=0, style=solid];
n82 -> n136  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n88 -> n137  [key=2, style=dotted];
n91 -> n92  [key=0, style=solid];
n91 -> n139  [key=2, style=dotted];
n92 -> n89  [key=0, style=solid];
n92 -> n140  [key=2, style=dotted];
n92 -> n186  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n98 -> n99  [key=0, style=solid];
n98 -> n141  [key=2, style=dotted];
n98 -> n101  [color=darkseagreen4, key=1, label=holdings, style=dashed];
n100 -> n101  [key=0, style=solid];
n100 -> n143  [key=2, style=dotted];
n100 -> n109  [color=darkseagreen4, key=1, label=minResolution, style=dashed];
n100 -> n111  [color=darkseagreen4, key=1, label=minResolution, style=dashed];
n100 -> n112  [color=darkseagreen4, key=1, label=minResolution, style=dashed];
n190 -> n191  [key=0, style=solid];
n190 -> n192  [key=2, style=dotted];
n190 -> n193  [key=2, style=dotted];
n190 -> n194  [key=2, style=dotted];
n190 -> n195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n106 -> n107  [key=0, style=solid];
n106 -> n113  [key=0, style=solid];
n106 -> n147  [key=2, style=dotted];
n109 -> n113  [key=0, style=solid];
n109 -> n148  [key=2, style=dotted];
n111 -> n113  [key=0, style=solid];
n111 -> n149  [key=2, style=dotted];
n112 -> n113  [key=0, style=solid];
n112 -> n150  [key=2, style=dotted];
n113 -> n114  [key=0, style=solid];
n113 -> n151  [key=2, style=dotted];
n114 -> n101  [key=0, style=solid];
n114 -> n152  [key=2, style=dotted];
n114 -> n153  [key=2, style=dotted];
n119 -> n120  [key=0, style=solid];
n119 -> n154  [key=2, style=dotted];
n120 -> n121  [key=0, style=solid];
n52 -> n53  [key=0, style=solid];
n52 -> n55  [key=0, style=solid];
n55 -> n56  [key=0, style=solid];
n55 -> n58  [key=0, style=solid];
n55 -> n127  [key=2, style=dotted];
n171 -> n172  [key=0, style=solid];
n171 -> n174  [key=0, style=solid];
n171 -> n176  [key=0, style=solid];
n53 -> n54  [key=0, style=solid];
n53 -> n126  [key=2, style=dotted];
n54 -> n125  [key=0, style=solid];
n126 -> n206  [key=0, style=solid];
n126 -> n53  [color=darkorchid, key=3, label="Parameter variable string message", style=bold];
n126 -> n56  [color=darkorchid, key=3, label="Parameter variable string message", style=bold];
n126 -> n65  [color=darkorchid, key=3, label="Parameter variable string message", style=bold];
n126 -> n76  [color=darkorchid, key=3, label="Parameter variable string message", style=bold];
n56 -> n57  [key=0, style=solid];
n56 -> n126  [key=2, style=dotted];
n58 -> n59  [key=0, style=solid];
n58 -> n156  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BrokerageMessageEvent", style=dashed];
n58 -> n157  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BrokerageMessageEvent", style=dashed];
n58 -> n68  [color=darkseagreen4, key=1, label=brokerageOnMessage, style=dashed];
n58 -> n58  [color=darkorchid, key=3, label="Local variable System.EventHandler<QuantConnect.Brokerages.BrokerageMessageEvent> brokerageOnMessage", style=bold];
n57 -> n125  [key=0, style=solid];
n59 -> n60  [key=0, style=solid];
n59 -> n128  [key=2, style=dotted];
n156 -> n157  [key=0, style=solid];
n156 -> n158  [key=0, style=solid];
n157 -> n158  [key=0, style=solid];
n157 -> n159  [key=2, style=dotted];
n157 -> n126  [key=2, style=dotted];
n62 -> n63  [color=red, key=0, style=solid];
n62 -> n130  [key=2, style=dotted];
n64 -> n65  [key=0, style=solid];
n64 -> n67  [key=0, style=solid];
n160 -> n161  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n65 -> n126  [key=2, style=dotted];
n66 -> n124  [key=0, style=solid];
n66 -> n125  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n128  [key=2, style=dotted];
n71 -> n72  [key=0, style=solid];
n72 -> n73  [key=0, style=solid];
n72 -> n133  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n73 -> n134  [key=2, style=dotted];
n73 -> n126  [key=2, style=dotted];
n74 -> n124  [key=0, style=solid];
n74 -> n125  [key=0, style=solid];
n76 -> n77  [key=0, style=solid];
n76 -> n126  [key=2, style=dotted];
n78 -> n79  [key=0, style=solid];
n78 -> n128  [key=2, style=dotted];
n77 -> n124  [key=0, style=solid];
n77 -> n125  [key=0, style=solid];
n80 -> n81  [key=0, style=solid];
n80 -> n83  [key=0, style=solid];
n80 -> n87  [key=0, style=solid];
n80 -> n82  [color=darkseagreen4, key=1, label=cash, style=dashed];
n81 -> n82  [key=0, style=solid];
n81 -> n128  [key=2, style=dotted];
n83 -> n84  [key=0, style=solid];
n87 -> n88  [key=0, style=solid];
n87 -> n128  [key=2, style=dotted];
n84 -> n85  [key=0, style=solid];
n84 -> n133  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid];
n85 -> n126  [key=2, style=dotted];
n86 -> n124  [key=0, style=solid];
n86 -> n125  [key=0, style=solid];
n89 -> n90  [color=red, key=0, style=solid];
n89 -> n93  [key=0, style=solid];
n89 -> n97  [key=0, style=solid];
n89 -> n91  [color=darkseagreen4, key=1, label=order, style=dashed];
n89 -> n92  [color=darkseagreen4, key=1, label=order, style=dashed];
n89 -> n187  [color=darkseagreen4, key=1, label=order, style=dashed];
n90 -> n91  [color=red, key=0, style=solid];
n90 -> n138  [color=red, key=2, style=dotted];
n90 -> n128  [color=red, key=2, style=dotted];
n93 -> n94  [key=0, style=solid];
n97 -> n98  [key=0, style=solid];
n97 -> n128  [key=2, style=dotted];
n187 -> n188  [key=0, style=solid];
n186 -> n187  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n94 -> n133  [key=2, style=dotted];
n95 -> n96  [key=0, style=solid];
n95 -> n126  [key=2, style=dotted];
n96 -> n124  [key=0, style=solid];
n96 -> n125  [key=0, style=solid];
n99 -> n100  [key=0, style=solid];
n99 -> n142  [key=2, style=dotted];
n99 -> n103  [color=darkseagreen4, key=1, label=supportedSecurityTypes, style=dashed];
n99 -> n105  [color=darkseagreen4, key=1, label=supportedSecurityTypes, style=dashed];
n101 -> n102  [key=0, style=solid];
n101 -> n115  [key=0, style=solid];
n101 -> n119  [key=0, style=solid];
n101 -> n103  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n104  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n105  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n106  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n107  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n108  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n109  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n110  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n111  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n112  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n113  [color=darkseagreen4, key=1, label=holding, style=dashed];
n101 -> n114  [color=darkseagreen4, key=1, label=holding, style=dashed];
n103 -> n104  [key=0, style=solid];
n103 -> n106  [key=0, style=solid];
n103 -> n144  [key=2, style=dotted];
n105 -> n101  [key=0, style=solid];
n105 -> n146  [key=2, style=dotted];
n105 -> n126  [key=2, style=dotted];
n102 -> n103  [key=0, style=solid];
n102 -> n128  [key=2, style=dotted];
n115 -> n116  [key=0, style=solid];
n104 -> n105  [key=0, style=solid];
n104 -> n145  [key=2, style=dotted];
n107 -> n108  [key=0, style=solid];
n107 -> n128  [key=2, style=dotted];
n108 -> n109  [key=0, style=solid];
n108 -> n110  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n110 -> n112  [key=0, style=solid];
n116 -> n117  [key=0, style=solid];
n116 -> n133  [key=2, style=dotted];
n117 -> n118  [key=0, style=solid];
n117 -> n126  [key=2, style=dotted];
n118 -> n124  [key=0, style=solid];
n118 -> n125  [key=0, style=solid];
n121 -> n122  [key=0, style=solid];
n121 -> n124  [key=0, style=solid];
n122 -> n123  [key=0, style=solid];
n124 -> n125  [key=0, style=solid];
n123 -> n124  [key=0, style=solid];
n123 -> n126  [key=2, style=dotted];
n125 -> n49  [color=blue, key=0, style=bold];
n155 -> n156  [key=0, style=solid];
n155 -> n157  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BrokerageMessageEvent", style=dashed];
n158 -> n155  [color=blue, key=0, style=bold];
n179 -> n198  [key=0, style=solid];
n179 -> n199  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.Dictionary<QuantConnect.SecurityType, System.Collections.Generic.List<QuantConnect.TickType>> GetConfiguredDataFeeds", style=bold];
n174 -> n175  [key=0, style=solid];
n176 -> n160  [color=blue, key=0, style=bold];
n173 -> n172  [key=0, style=solid];
n173 -> n185  [key=2, style=dotted];
n173 -> n173  [color=darkseagreen4, key=1, label=kvp, style=dashed];
n175 -> n176  [key=0, style=solid];
n175 -> n126  [key=2, style=dotted];
n188 -> n186  [color=blue, key=0, style=bold];
n189 -> n190  [key=0, style=solid];
n191 -> n189  [color=blue, key=0, style=bold];
n195 -> n196  [key=0, style=solid];
n196 -> n197  [key=0, style=solid];
n196 -> n196  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<QuantConnect.Symbol, QuantConnect.Securities.Security>", style=dashed];
n197 -> n195  [color=blue, key=0, style=bold];
n198 -> n199  [key=0, style=solid];
n198 -> n27  [key=2, style=dotted];
n198 -> n200  [color=darkseagreen4, key=1, label=dataFeedsConfigString, style=dashed];
n198 -> n201  [color=darkseagreen4, key=1, label=dataFeedsConfigString, style=dashed];
n199 -> n200  [key=0, style=solid];
n199 -> n204  [key=2, style=dotted];
n199 -> n202  [color=darkseagreen4, key=1, label=dataFeeds, style=dashed];
n200 -> n201  [key=0, style=solid];
n200 -> n202  [key=0, style=solid];
n201 -> n202  [key=0, style=solid];
n201 -> n205  [key=2, style=dotted];
n202 -> n203  [key=0, style=solid];
n203 -> n179  [color=blue, key=0, style=bold];
n206 -> n207  [key=0, style=solid];
n206 -> n208  [key=2, style=dotted];
n207 -> n126  [color=blue, key=0, style=bold];
n209 -> n210  [key=0, style=solid];
n210 -> n211  [key=0, style=solid];
n210 -> n212  [key=0, style=solid];
n211 -> n212  [key=0, style=solid];
n211 -> n213  [key=2, style=dotted];
n212 -> n209  [color=blue, key=0, style=bold];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_10  [color=darkseagreen4, key=1, label="QuantConnect.Resolution", style=dashed];
m0_8 -> m0_12  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m0_8 -> m0_14  [color=darkorchid, key=3, label="method methodReturn QuantConnect.Data.SubscriptionDataConfig Add", style=bold];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_12  [color=darkseagreen4, key=1, label=dataType, style=dashed];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_12  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=2, style=dotted];
m0_11 -> m0_12  [key=0, style=solid];
m0_13 -> m0_8  [color=blue, key=0, style=bold];
m0_86 -> m0_87  [key=0, style=solid];
m0_42 -> m0_43  [key=0, style=solid];
m0_46 -> m0_47  [key=0, style=solid];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_45  [key=2, style=dotted];
m0_44 -> m0_42  [color=blue, key=0, style=bold];
m0_47 -> m0_48  [key=0, style=solid];
m0_48 -> m0_46  [color=blue, key=0, style=bold];
m0_67 -> m0_68  [key=0, style=solid];
m0_66 -> m0_67  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_68 -> m0_66  [color=blue, key=0, style=bold];
m0_70 -> m0_71  [key=0, style=solid];
m0_71 -> m0_69  [color=blue, key=0, style=bold];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_89  [key=2, style=dotted];
m0_88 -> m0_86  [color=blue, key=0, style=bold];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_17  [color=darkseagreen4, key=1, label=DateTimeZone, style=dashed];
m0_14 -> m0_19  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_14 -> m0_27  [color=darkseagreen4, key=1, label=DateTimeZone, style=dashed];
m0_14 -> m0_28  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_14 -> m0_9  [color=darkorchid, key=3, label="Parameter variable System.Type dataType", style=bold];
m0_14 -> m0_8  [color=darkorchid, key=3, label="Parameter variable bool extendedMarketHours", style=bold];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_17  [key=0, style=solid];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=0, style=solid];
m0_19 -> m0_20  [color=red, key=0, style=solid];
m0_19 -> m0_32  [key=2, style=dotted];
m0_19 -> m0_21  [color=red, key=1, label=newConfig, style=dashed];
m0_19 -> m0_22  [color=red, key=1, label=newConfig, style=dashed];
m0_19 -> m0_23  [color=darkseagreen4, key=1, label=newConfig, style=dashed];
m0_19 -> m0_29  [color=darkseagreen4, key=1, label=newConfig, style=dashed];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_41  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_16 -> m0_30  [key=0, style=solid];
m0_16 -> m0_31  [key=2, style=dotted];
m0_18 -> m0_30  [key=0, style=solid];
m0_18 -> m0_31  [key=2, style=dotted];
m0_20 -> m0_21  [color=red, key=0, style=solid];
m0_20 -> m0_23  [color=red, key=0, style=solid];
m0_20 -> m0_33  [color=red, key=2, style=dotted];
m0_21 -> m0_22  [color=red, key=0, style=solid];
m0_21 -> m0_34  [color=red, key=2, style=dotted];
m0_22 -> m0_30  [color=red, key=0, style=solid];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_35  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_36  [key=2, style=dotted];
m0_24 -> m0_37  [key=2, style=dotted];
m0_24 -> m0_38  [key=2, style=dotted];
m0_24 -> m0_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_24 -> m0_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [key=0, style=solid];
m0_26 -> m0_30  [key=0, style=solid];
m0_26 -> m0_39  [key=2, style=dotted];
m0_26 -> m0_40  [key=2, style=dotted];
m0_30 -> m0_14  [color=blue, key=0, style=bold];
m0_76 -> m0_77  [key=0, style=solid];
m0_77 -> m0_78  [key=0, style=solid];
m0_78 -> m0_76  [color=blue, key=0, style=bold];
m0_7 -> m0_72  [key=0, style=solid];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_74  [key=2, style=dotted];
m0_72 -> n5  [key=2, style=dotted];
m0_73 -> m0_7  [color=blue, key=0, style=bold];
m0_81 -> m0_85  [key=0, style=solid];
m0_81 -> n5  [key=2, style=dotted];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_82  [color=darkseagreen4, key=1, label="QuantConnect.Resolution", style=dashed];
m0_79 -> m0_84  [color=darkseagreen4, key=1, label="QuantConnect.SecurityType", style=dashed];
m0_79 -> m0_87  [color=darkseagreen4, key=1, label="QuantConnect.Resolution", style=dashed];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_82  [key=0, style=solid];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_84  [key=0, style=solid];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_63  [key=2, style=dotted];
m0_84 -> m0_59  [key=2, style=dotted];
m0_84 -> m0_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_83 -> m0_85  [key=0, style=solid];
m0_83 -> n5  [key=2, style=dotted];
m0_85 -> m0_79  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_2  [color=darkseagreen4, key=1, label="QuantConnect.TimeKeeper", style=dashed];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_3  [color=red, key=0, style=solid];
m0_3 -> m0_4  [color=red, key=0, style=solid];
m0_3 -> m0_6  [color=red, key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_7  [key=2, style=dotted];
m0_5 -> m0_0  [color=blue, key=0, style=bold];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_67  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m0_49 -> m0_52  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m0_49 -> m0_54  [color=darkseagreen4, key=1, label="QuantConnect.Data.Consolidators.IDataConsolidator", style=dashed];
m0_49 -> m0_55  [color=darkseagreen4, key=1, label="QuantConnect.Data.Consolidators.IDataConsolidator", style=dashed];
m0_49 -> m0_57  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_36  [key=2, style=dotted];
m0_50 -> m0_59  [key=2, style=dotted];
m0_50 -> m0_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_50 -> m0_53  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m0_50 -> m0_57  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m0_52 -> m0_58  [key=0, style=solid];
m0_52 -> m0_60  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_53  [key=0, style=solid];
m0_54 -> m0_61  [key=2, style=dotted];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_62  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_60  [key=2, style=dotted];
m0_57 -> m0_63  [key=2, style=dotted];
m0_57 -> m0_64  [key=2, style=dotted];
m0_57 -> m0_65  [key=2, style=dotted];
m0_57 -> m0_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_53  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_57  [key=0, style=solid];
m0_53 -> m0_55  [color=darkseagreen4, key=1, label=subscription, style=dashed];
m0_56 -> m0_58  [key=0, style=solid];
m0_58 -> m0_49  [color=blue, key=0, style=bold];
m0_90 -> m0_1  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_2  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_3  [color=red, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_4  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_12  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_20  [color=red, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_23  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_24  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_25  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_26  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_27  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_28  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_50  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_77  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_90 -> m0_84  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionManager", style=dashed];
m0_91 -> m0_67  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m0_92 -> m0_87  [color=darkseagreen4, key=1, label="QuantConnect.Resolution", style=dashed];
}
