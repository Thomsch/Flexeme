digraph  {
n214 [label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler", span=""];
n215 [label=algorithmName, span=""];
n216 [label=liveJob, span=""];
n217 [label="QuantConnect.Interfaces.IAlgorithm", span=""];
n218 [label="QuantConnect.Packets.AlgorithmNodePacket", span=""];
n219 [label="QuantConnect.Lean.Engine.RealTime.IRealTimeHandler", span=""];
n220 [label="QuantConnect.Interfaces.IBrokerage", span=""];
n221 [label=liveJob, span=""];
n222 [label=order, span=""];
n0 [label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", span="72-72", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()"];
n1 [label="Errors = new List<string>()", span="74-74", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()"];
n2 [label="MaximumRuntime = TimeSpan.FromDays(10*365)", span="75-75", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()"];
n5 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n3 [label="MaxOrders = int.MaxValue", span="76-76", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()"];
n6 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)"];
n4 [label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()", span="72-72", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.BrokerageSetupHandler()"];
n7 [label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", span="85-85", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)"];
n8 [label="string error", span="87-87", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)"];
n10 [label="var loader = new Loader(algorithmNodePacket.Language, TimeSpan.FromSeconds(15), names =>\r\n            {\r\n                // if there's only one use that guy\r\n                if (names.Count == 1)\r\n                {\r\n                    return names.Single();\r\n                }\r\n\r\n                // if there's more than one then check configuration for which one we should use\r\n                var algorithmName = Config.Get(''algorithm-type-name'');\r\n                return names.Single(x => x.Contains(''.'' + algorithmName));\r\n            })", span="91-102", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)"];
n11 [label="var complete = loader.TryCreateAlgorithmInstanceWithIsolator(assemblyPath, algorithmNodePacket.RamAllocation, out algorithm, out error)", span="104-104", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)"];
n9 [label="IAlgorithm algorithm", span="88-88", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)"];
n16 [label="Entry Loader.cstr", span="", cluster="Loader.cstr"];
n17 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)"];
n21 [label="names.Count == 1", span="94-94", cluster="lambda expression"];
n22 [label="return names.Single();", span="96-96", cluster="lambda expression"];
n24 [label="return names.Single(x => x.Contains(''.'' + algorithmName));", span="101-101", cluster="lambda expression"];
n12 [label="!complete", span="105-105", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)"];
n18 [label="Entry QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", span="348-348", cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)"];
n13 [label="throw new Exception(error + '' Try re-building algorithm and remove duplicate QCAlgorithm base classes.'');", span="105-105", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)"];
n14 [label="return algorithm;", span="107-107", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)"];
n15 [label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)", span="85-85", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateAlgorithmInstance(QuantConnect.Packets.AlgorithmNodePacket, string)"];
n19 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)"];
n20 [label="Entry lambda expression", span="91-102", cluster="lambda expression"];
n23 [label="var algorithmName = Config.Get(''algorithm-type-name'')", span="100-100", cluster="lambda expression"];
n27 [label="Entry QuantConnect.Configuration.Config.Get(string, string)", span="90-90", cluster="QuantConnect.Configuration.Config.Get(string, string)"];
n30 [label="x.Contains(''.'' + algorithmName)", span="101-101", cluster="lambda expression"];
n25 [label="Exit lambda expression", span="91-102", cluster="lambda expression"];
n28 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
n29 [label="Entry lambda expression", span="101-101", cluster="lambda expression"];
n26 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()"];
n31 [label="Exit lambda expression", span="101-101", cluster="lambda expression"];
n32 [label="Entry string.Contains(string)", span="0-0", cluster="string.Contains(string)"];
n33 [label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", span="117-117", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)"];
n34 [label="var liveJob = algorithmNodePacket as LiveNodePacket", span="119-119", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)"];
n39 [label="var brokerage = _factory.CreateBrokerage(liveJob, uninitializedAlgorithm)", span="130-130", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)"];
n35 [label="liveJob == null", span="120-120", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)"];
n37 [label="_factory = Composer.Instance.Single<IBrokerageFactory>(brokerageFactory => brokerageFactory.BrokerageType.MatchesTypeName(liveJob.Brokerage))", span="126-126", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)"];
n46 [label="brokerageFactory.BrokerageType.MatchesTypeName(liveJob.Brokerage)", span="126-126", cluster="lambda expression"];
n36 [label="throw new ArgumentException(''BrokerageSetupHandler.CreateBrokerage requires a live node packet'');", span="122-122", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)"];
n38 [label="factory = _factory", span="127-127", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)"];
n43 [label="Entry QuantConnect.Util.Composer.Single<T>(System.Func<T, bool>)", span="60-60", cluster="QuantConnect.Util.Composer.Single<T>(System.Func<T, bool>)"];
n45 [label="Entry lambda expression", span="126-126", cluster="lambda expression"];
n41 [label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)", span="117-117", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)"];
n40 [label="return brokerage;", span="132-132", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.CreateBrokerage(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IAlgorithm, out QuantConnect.Interfaces.IBrokerageFactory)"];
n44 [label="Entry QuantConnect.Interfaces.IBrokerageFactory.CreateBrokerage(QuantConnect.Packets.LiveNodePacket, QuantConnect.Interfaces.IAlgorithm)", span="55-55", cluster="QuantConnect.Interfaces.IBrokerageFactory.CreateBrokerage(QuantConnect.Packets.LiveNodePacket, QuantConnect.Interfaces.IAlgorithm)"];
n42 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)"];
n47 [label="Exit lambda expression", span="126-126", cluster="lambda expression"];
n48 [label="Entry System.Type.MatchesTypeName(string)", span="608-608", cluster="System.Type.MatchesTypeName(string)"];
n49 [label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", span="145-145", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n50 [label="_algorithm = algorithm", span="147-147", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", color=red, community=0];
n51 [label="var liveJob = job as LiveNodePacket", span="150-150", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n60 [label="resultHandler.SendStatusUpdate(AlgorithmStatus.Initializing, ''Initializing algorithm...'')", span="178-178", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n61 [label="var controls = job.Controls", span="181-181", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n63 [label="var initializeComplete = isolator.ExecuteWithTimeLimit(TimeSpan.FromSeconds(300), () =>\r\n                {\r\n                    try\r\n                    {\r\n                        //Set the default brokerage model before initialize\r\n                        algorithm.SetBrokerageModel(_factory.BrokerageModel);\r\n                        //Margin calls are disabled by default in live mode\r\n                        algorithm.Portfolio.MarginCallModel = MarginCallModel.Null;\r\n                        //Set our parameters\r\n                        algorithm.SetParameters(job.Parameters);\r\n                        algorithm.SetAvailableDataTypes(GetConfiguredDataFeeds());\r\n                        //Algorithm is live, not backtesting:\r\n                        algorithm.SetLiveMode(true);\r\n                        //Initialize the algorithm's starting date\r\n                        algorithm.SetDateTime(DateTime.UtcNow);\r\n                        //Set the source impl for the event scheduling\r\n                        algorithm.Schedule.SetEventSchedule(realTimeHandler);\r\n\r\n                        // If we're using IB, set the default subscription limit to 100,\r\n                        // algorithms can override this setting in the Initialize method\r\n                        if (brokerage is InteractiveBrokersBrokerage)\r\n                        {\r\n                            algorithm.Settings.DataSubscriptionLimit = 100;\r\n                        }\r\n\r\n                        //Initialise the algorithm, get the required data:\r\n                        algorithm.Initialize();\r\n                        if (liveJob.Brokerage != ''PaperBrokerage'')\r\n                        {\r\n                            //Zero the CashBook - we'll populate directly from brokerage\r\n                            foreach (var kvp in algorithm.Portfolio.CashBook)\r\n                            {\r\n                                kvp.Value.SetAmount(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (Exception err)\r\n                    {\r\n                        AddInitializationError(err.Message);\r\n                    }\r\n                }, controls.RamAllocation)", span="183-223", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", color=red, community=0];
n161 [label="algorithm.SetBrokerageModel(_factory.BrokerageModel)", span="188-188", cluster="lambda expression"];
n162 [label="algorithm.Portfolio.MarginCallModel = MarginCallModel.Null", span="190-190", cluster="lambda expression"];
n163 [label="algorithm.SetParameters(job.Parameters)", span="192-192", cluster="lambda expression"];
n164 [label="algorithm.SetAvailableDataTypes(GetConfiguredDataFeeds())", span="193-193", cluster="lambda expression"];
n165 [label="algorithm.SetLiveMode(true)", span="195-195", cluster="lambda expression"];
n166 [label="algorithm.SetDateTime(DateTime.UtcNow)", span="197-197", cluster="lambda expression"];
n167 [label="algorithm.Schedule.SetEventSchedule(realTimeHandler)", span="199-199", cluster="lambda expression"];
n168 [label="brokerage is InteractiveBrokersBrokerage", span="203-203", cluster="lambda expression", color=red, community=0];
n169 [label="algorithm.Settings.DataSubscriptionLimit = 100", span="205-205", cluster="lambda expression"];
n170 [label="algorithm.Initialize()", span="209-209", cluster="lambda expression"];
n172 [label="algorithm.Portfolio.CashBook", span="213-213", cluster="lambda expression"];
n67 [label="resultHandler.SendStatusUpdate(AlgorithmStatus.LoggingIn, ''Logging into brokerage...'')", span="232-232", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n68 [label="brokerage.Message += brokerageOnMessage", span="234-234", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n70 [label="brokerage.Connect()", span="240-240", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n75 [label="!brokerage.IsConnected", span="250-250", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n79 [label="var cashBalance = brokerage.GetCashBalance()", span="261-261", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n82 [label="algorithm.Portfolio.SetCash(cash.Symbol, cash.Amount, cash.ConversionRate)", span="265-265", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n88 [label="var openOrders = brokerage.GetOpenOrders()", span="279-279", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n91 [label="order.Id = algorithm.Transactions.GetIncrementOrderId()", span="284-284", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n92 [label="transactionHandler.Orders.AddOrUpdate(order.Id, order, (i, o) => order)", span="285-285", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n98 [label="var holdings = brokerage.GetAccountHoldings()", span="299-299", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n100 [label="var minResolution = new Lazy<Resolution>(() => algorithm.Securities.Select(x => x.Value.Resolution).DefaultIfEmpty(Resolution.Second).Min())", span="301-301", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n190 [label="algorithm.Securities.Select(x => x.Value.Resolution).DefaultIfEmpty(Resolution.Second).Min()", span="301-301", cluster="lambda expression"];
n106 [label="!algorithm.Portfolio.ContainsKey(holding.Symbol)", span="317-317", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n109 [label="algorithm.AddOptionContract(holding.Symbol, minResolution.Value, true, 1.0m)", span="324-324", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n111 [label="algorithm.AddFutureContract(holding.Symbol, minResolution.Value, true, 1.0m)", span="329-329", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n112 [label="algorithm.AddSecurity(holding.Type, holding.Symbol.Value, minResolution.Value, null, true, 1.0m, false)", span="334-334", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n113 [label="algorithm.Portfolio[holding.Symbol].SetHoldings(holding.AveragePrice, (int) holding.Quantity)", span="338-338", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n114 [label="algorithm.Securities[holding.Symbol].SetMarketPrice(new TradeBar\r\n                        {\r\n                            Time = DateTime.Now,\r\n                            Open = holding.MarketPrice,\r\n                            High = holding.MarketPrice,\r\n                            Low = holding.MarketPrice,\r\n                            Close = holding.MarketPrice,\r\n                            Volume = 0,\r\n                            Symbol = holding.Symbol,\r\n                            DataType = MarketDataType.TradeBar\r\n                        })", span="339-349", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n119 [label="algorithm.PostInitialize()", span="359-359", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n120 [label="StartingPortfolioValue = algorithm.Portfolio.TotalPortfolioValue", span="362-362", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n52 [label="liveJob == null", span="151-151", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n55 [label="string.IsNullOrWhiteSpace(liveJob.Brokerage)", span="158-158", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n171 [label="liveJob.Brokerage != ''PaperBrokerage''", span="210-210", cluster="lambda expression"];
n53 [label="AddInitializationError(''BrokerageSetupHandler requires a LiveNodePacket'')", span="153-153", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n54 [label="return false;", span="154-154", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n126 [label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)", span="402-402", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)"];
n56 [label="AddInitializationError(''A brokerage must be specified'')", span="160-160", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n58 [label="EventHandler<BrokerageMessageEvent> brokerageOnMessage = (sender, args) =>\r\n            {\r\n                if (args.Type == BrokerageMessageType.Error)\r\n                {\r\n                    AddInitializationError(string.Format(''Brokerage Error Code: {0} - {1}'', args.Code, args.Message));\r\n                }\r\n            }", span="166-172", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n127 [label="Entry string.IsNullOrWhiteSpace(string)", span="0-0", cluster="string.IsNullOrWhiteSpace(string)"];
n57 [label="return false;", span="161-161", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n59 [label="Log.Trace(''BrokerageSetupHandler.Setup(): Initializing algorithm...'')", span="176-176", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n156 [label="args.Type == BrokerageMessageType.Error", span="168-168", cluster="lambda expression"];
n157 [label="AddInitializationError(string.Format(''Brokerage Error Code: {0} - {1}'', args.Code, args.Message))", span="170-170", cluster="lambda expression"];
n128 [label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106", cluster="QuantConnect.Logging.Log.Trace(string, bool)"];
n129 [label="Entry QuantConnect.Lean.Engine.Results.IResultHandler.SendStatusUpdate(QuantConnect.AlgorithmStatus, string)", span="219-219", cluster="QuantConnect.Lean.Engine.Results.IResultHandler.SendStatusUpdate(QuantConnect.AlgorithmStatus, string)"];
n62 [label="var isolator = new Isolator()", span="182-182", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n130 [label="Entry QuantConnect.Isolator.Isolator()", span="55-55", cluster="QuantConnect.Isolator.Isolator()"];
n64 [label="!initializeComplete", span="225-225", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n131 [label="Entry QuantConnect.Isolator.ExecuteWithTimeLimit(System.TimeSpan, System.Action, long)", span="145-145", cluster="QuantConnect.Isolator.ExecuteWithTimeLimit(System.TimeSpan, System.Action, long)"];
n160 [label="Entry lambda expression", span="183-223", cluster="lambda expression"];
n65 [label="AddInitializationError(''Initialization timed out.'')", span="227-227", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n66 [label="return false;", span="228-228", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n69 [label="Log.Trace(''BrokerageSetupHandler.Setup(): Connecting to brokerage...'')", span="236-236", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n71 [label=Exception, span="242-242", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n132 [label="Entry QuantConnect.Interfaces.IBrokerage.Connect()", span="103-103", cluster="QuantConnect.Interfaces.IBrokerage.Connect()"];
n72 [label="Log.Error(err)", span="244-244", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n73 [label="AddInitializationError(string.Format(''Error connecting to brokerage: {0}. '' +\r\n                        ''This may be caused by incorrect login credentials or an unsupported account type.'', err.Message))", span="245-246", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n133 [label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98", cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)"];
n74 [label="return false;", span="247-247", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n134 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)"];
n76 [label="AddInitializationError(''Unable to connect to brokerage.'')", span="253-253", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n78 [label="Log.Trace(''BrokerageSetupHandler.Setup(): Fetching cash balance from brokerage...'')", span="257-257", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n77 [label="return false;", span="254-254", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n80 [label=cashBalance, span="262-262", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n135 [label="Entry QuantConnect.Interfaces.IBrokerage.GetCashBalance()", span="77-77", cluster="QuantConnect.Interfaces.IBrokerage.GetCashBalance()"];
n81 [label="Log.Trace(''BrokerageSetupHandler.Setup(): Setting '' + cash.Symbol + '' cash to '' + cash.Amount)", span="264-264", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n83 [label=Exception, span="268-268", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n87 [label="Log.Trace(''BrokerageSetupHandler.Setup(): Fetching open orders from brokerage...'')", span="275-275", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n136 [label="Entry QuantConnect.Securities.SecurityPortfolioManager.SetCash(string, decimal, decimal)", span="483-483", cluster="QuantConnect.Securities.SecurityPortfolioManager.SetCash(string, decimal, decimal)"];
n84 [label="Log.Error(err)", span="270-270", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n85 [label="AddInitializationError(''Error getting cash balance from brokerage: '' + err.Message)", span="271-271", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n86 [label="return false;", span="272-272", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n89 [label=openOrders, span="280-280", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n137 [label="Entry QuantConnect.Interfaces.IBrokerage.GetOpenOrders()", span="65-65", cluster="QuantConnect.Interfaces.IBrokerage.GetOpenOrders()"];
n90 [label="Log.Trace(''BrokerageSetupHandler.Setup(): Has open order: '' + order.Symbol.ToString() + '' - '' + order.Quantity)", span="283-283", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", color=red, community=0];
n93 [label=Exception, span="288-288", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n97 [label="Log.Trace(''BrokerageSetupHandler.Setup(): Fetching holdings from brokerage...'')", span="295-295", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n187 [label=order, span="285-285", cluster="lambda expression"];
n138 [label="Entry QuantConnect.Symbol.ToString()", span="350-350", cluster="QuantConnect.Symbol.ToString()"];
n139 [label="Entry QuantConnect.Securities.SecurityTransactionManager.GetIncrementOrderId()", span="365-365", cluster="QuantConnect.Securities.SecurityTransactionManager.GetIncrementOrderId()"];
n140 [label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)", span="0-0", cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)"];
n186 [label="Entry lambda expression", span="285-285", cluster="lambda expression"];
n94 [label="Log.Error(err)", span="290-290", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n95 [label="AddInitializationError(''Error getting open orders from brokerage: '' + err.Message)", span="291-291", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n96 [label="return false;", span="292-292", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n99 [label="var supportedSecurityTypes = new HashSet<SecurityType> { SecurityType.Equity, SecurityType.Forex, SecurityType.Cfd, SecurityType.Option, SecurityType.Future }", span="300-300", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n141 [label="Entry QuantConnect.Interfaces.IBrokerage.GetAccountHoldings()", span="71-71", cluster="QuantConnect.Interfaces.IBrokerage.GetAccountHoldings()"];
n101 [label=holdings, span="302-302", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n142 [label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0", cluster="System.Collections.Generic.HashSet<T>.HashSet()"];
n103 [label="!supportedSecurityTypes.Contains(holding.Type)", span="307-307", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n105 [label="AddInitializationError(''Found unsupported security type in existing brokerage holdings: '' + holding.Type + ''. '' +\r\n                                ''QuantConnect currently supports the following security types: '' + string.Join('','', supportedSecurityTypes))", span="310-311", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n143 [label="Entry Lazy<Resolution>.cstr", span="", cluster="Lazy<Resolution>.cstr"];
n102 [label="Log.Trace(''BrokerageSetupHandler.Setup(): Has existing holding: '' + holding)", span="304-304", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n115 [label=Exception, span="352-352", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n104 [label="Log.Error(''BrokerageSetupHandler.Setup(): Unsupported security type: '' + holding.Type + ''-'' + holding.Symbol.Value)", span="309-309", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n107 [label="Log.Trace(''BrokerageSetupHandler.Setup(): Adding unrequested security: '' + holding.Symbol.Value)", span="319-319", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n108 [label="holding.Type == SecurityType.Option", span="321-321", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n110 [label="holding.Type == SecurityType.Future", span="326-326", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n144 [label="Entry System.Collections.Generic.HashSet<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.HashSet<T>.Contains(T)"];
n145 [label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="65-65", cluster="QuantConnect.Logging.Log.Error(string, bool)"];
n147 [label="Entry QuantConnect.Securities.SecurityPortfolioManager.ContainsKey(QuantConnect.Symbol)", span="129-129", cluster="QuantConnect.Securities.SecurityPortfolioManager.ContainsKey(QuantConnect.Symbol)"];
n148 [label="Entry QuantConnect.Interfaces.IAlgorithm.AddOptionContract(QuantConnect.Symbol, QuantConnect.Resolution, bool, decimal)", span="486-486", cluster="QuantConnect.Interfaces.IAlgorithm.AddOptionContract(QuantConnect.Symbol, QuantConnect.Resolution, bool, decimal)"];
n150 [label="Entry QuantConnect.Interfaces.IAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, string, bool, decimal, bool)", span="466-466", cluster="QuantConnect.Interfaces.IAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, string, bool, decimal, bool)"];
n149 [label="Entry QuantConnect.Interfaces.IAlgorithm.AddFutureContract(QuantConnect.Symbol, QuantConnect.Resolution, bool, decimal)", span="476-476", cluster="QuantConnect.Interfaces.IAlgorithm.AddFutureContract(QuantConnect.Symbol, QuantConnect.Resolution, bool, decimal)"];
n151 [label="Entry QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)", span="383-383", cluster="QuantConnect.Securities.SecurityHolding.SetHoldings(decimal, int)"];
n152 [label="Entry QuantConnect.Data.Market.TradeBar.TradeBar()", span="121-121", cluster="QuantConnect.Data.Market.TradeBar.TradeBar()"];
n153 [label="Entry QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", span="610-610", cluster="QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)"];
n146 [label="Entry string.Join<T>(string, System.Collections.Generic.IEnumerable<T>)", span="0-0", cluster="string.Join<T>(string, System.Collections.Generic.IEnumerable<T>)"];
n116 [label="Log.Error(err)", span="354-354", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n117 [label="AddInitializationError(''Error getting account holdings from brokerage: '' + err.Message)", span="355-355", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n118 [label="return false;", span="356-356", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n154 [label="Entry QuantConnect.Interfaces.IAlgorithm.PostInitialize()", span="300-300", cluster="QuantConnect.Interfaces.IAlgorithm.PostInitialize()"];
n121 [label="StartingDate = DateTime.Now", span="363-363", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n122 [label=Exception, span="365-365", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n124 [label="return Errors.Count == 0;", span="377-377", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n123 [label="AddInitializationError(err.Message)", span="367-367", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n125 [label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)", span="145-145", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Setup(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Lean.Engine.Results.IResultHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler, QuantConnect.Lean.Engine.RealTime.IRealTimeHandler)"];
n155 [label="Entry lambda expression", span="166-172", cluster="lambda expression"];
n158 [label="Exit lambda expression", span="166-172", cluster="lambda expression"];
n159 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)"];
n177 [label="Entry QuantConnect.Interfaces.IAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.IBrokerageModel)", span="322-322", cluster="QuantConnect.Interfaces.IAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.IBrokerageModel)"];
n178 [label="Entry QuantConnect.Interfaces.IAlgorithm.SetParameters(System.Collections.Generic.Dictionary<string, string>)", span="314-314", cluster="QuantConnect.Interfaces.IAlgorithm.SetParameters(System.Collections.Generic.Dictionary<string, string>)"];
n179 [label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", span="384-384", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()"];
n180 [label="Entry QuantConnect.Interfaces.IAlgorithm.SetAvailableDataTypes(System.Collections.Generic.Dictionary<QuantConnect.SecurityType, System.Collections.Generic.List<QuantConnect.TickType>>)", span="571-571", cluster="QuantConnect.Interfaces.IAlgorithm.SetAvailableDataTypes(System.Collections.Generic.Dictionary<QuantConnect.SecurityType, System.Collections.Generic.List<QuantConnect.TickType>>)"];
n181 [label="Entry QuantConnect.Interfaces.IAlgorithm.SetLiveMode(bool)", span="521-521", cluster="QuantConnect.Interfaces.IAlgorithm.SetLiveMode(bool)"];
n182 [label="Entry QuantConnect.Interfaces.IAlgorithm.SetDateTime(System.DateTime)", span="431-431", cluster="QuantConnect.Interfaces.IAlgorithm.SetDateTime(System.DateTime)"];
n183 [label="Entry QuantConnect.Scheduling.ScheduleManager.SetEventSchedule(QuantConnect.Scheduling.IEventSchedule)", span="65-65", cluster="QuantConnect.Scheduling.ScheduleManager.SetEventSchedule(QuantConnect.Scheduling.IEventSchedule)"];
n184 [label="Entry QuantConnect.Interfaces.IAlgorithm.Initialize()", span="294-294", cluster="QuantConnect.Interfaces.IAlgorithm.Initialize()"];
n174 [label=Exception, span="219-219", cluster="lambda expression"];
n176 [label="Exit lambda expression", span="183-223", cluster="lambda expression"];
n173 [label="kvp.Value.SetAmount(0)", span="215-215", cluster="lambda expression"];
n185 [label="Entry QuantConnect.Securities.Cash.SetAmount(decimal)", span="114-114", cluster="QuantConnect.Securities.Cash.SetAmount(decimal)"];
n175 [label="AddInitializationError(err.Message)", span="221-221", cluster="lambda expression"];
n188 [label="Exit lambda expression", span="285-285", cluster="lambda expression"];
n189 [label="Entry lambda expression", span="301-301", cluster="lambda expression"];
n191 [label="Exit lambda expression", span="301-301", cluster="lambda expression"];
n192 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n193 [label="Entry Unk.DefaultIfEmpty", span="", cluster="Unk.DefaultIfEmpty"];
n194 [label="Entry Unk.Min", span="", cluster="Unk.Min"];
n195 [label="Entry lambda expression", span="301-301", cluster="lambda expression"];
n196 [label="x.Value.Resolution", span="301-301", cluster="lambda expression"];
n197 [label="Exit lambda expression", span="301-301", cluster="lambda expression"];
n198 [label="var dataFeedsConfigString = Config.Get(''security-data-feeds'')", span="386-386", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()"];
n199 [label="Dictionary<SecurityType, List<TickType>> dataFeeds = new Dictionary<SecurityType, List<TickType>>()", span="388-388", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()"];
n200 [label="dataFeedsConfigString != string.Empty", span="389-389", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()"];
n201 [label="dataFeeds = JsonConvert.DeserializeObject<Dictionary<SecurityType, List<TickType>>>(dataFeedsConfigString)", span="391-391", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()"];
n204 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
n202 [label="return dataFeeds;", span="394-394", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()"];
n205 [label="Entry Unk.>", span="", cluster="Unk.>"];
n203 [label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()", span="384-384", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.GetConfiguredDataFeeds()"];
n206 [label="Errors.Add(''Failed to initialize algorithm: '' + message)", span="404-404", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)"];
n207 [label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)", span="402-402", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.AddInitializationError(string)"];
n208 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
n209 [label="Entry QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", span="411-411", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()"];
n210 [label="_factory != null", span="413-413", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()"];
n211 [label="_factory.Dispose()", span="415-415", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()"];
n212 [label="Exit QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()", span="411-411", cluster="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler.Dispose()"];
n213 [label="Entry System.IDisposable.Dispose()", span="0-0", cluster="System.IDisposable.Dispose()"];
m0_41 [label="Entry QuantConnect.TimeKeeper.AddTimeZone(DateTimeZone)", span="108-108", cluster="QuantConnect.TimeKeeper.AddTimeZone(DateTimeZone)", file="SubscriptionManager.cs"];
m0_36 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="SubscriptionManager.cs"];
m0_61 [label="Entry Unk.IsAssignableFrom", span="", cluster="Unk.IsAssignableFrom", file="SubscriptionManager.cs"];
m0_8 [label="Entry QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", span="91-91", cluster="QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_9 [label="var dataType = typeof(TradeBar)", span="94-94", cluster="QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_10 [label="resolution == Resolution.Tick", span="95-95", cluster="QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_12 [label="return Add(dataType, symbol, resolution, timeZone, exchangeTimeZone, isCustomData, fillDataForward, extendedMarketHours);", span="99-99", cluster="QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_11 [label="dataType = typeof(Tick)", span="97-97", cluster="QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_13 [label="Exit QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", span="91-91", cluster="QuantConnect.Data.SubscriptionManager.Add(QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_89 [label="Entry QuantConnect.Util.LeanData.GetDataType(QuantConnect.Resolution, QuantConnect.TickType)", span="251-251", cluster="QuantConnect.Util.LeanData.GetDataType(QuantConnect.Resolution, QuantConnect.TickType)", file="SubscriptionManager.cs"];
m0_45 [label="Entry QuantConnect.Symbol.IsCanonical()", span="164-164", cluster="QuantConnect.Symbol.IsCanonical()", file="SubscriptionManager.cs"];
m0_35 [label="Entry System.Collections.Generic.HashSet<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.HashSet<T>.Add(T)", file="SubscriptionManager.cs"];
m0_86 [label="Entry lambda expression", span="239-239", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_42 [label="Entry lambda expression", span="142-142", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_46 [label="Entry lambda expression", span="143-143", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_43 [label="!x.Symbol.IsCanonical()", span="142-142", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_44 [label="Exit lambda expression", span="142-142", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_47 [label="x.Symbol.Value", span="143-143", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_48 [label="Exit lambda expression", span="143-143", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_67 [label="x.Symbol == symbol", span="170-170", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_66 [label="Entry lambda expression", span="170-170", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_69 [label="Entry lambda expression", span="192-192", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_68 [label="Exit lambda expression", span="170-170", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_70 [label="x.Type.Name", span="192-192", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_71 [label="Exit lambda expression", span="192-192", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_87 [label="LeanData.GetDataType(resolution, tickType)", span="239-239", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_88 [label="Exit lambda expression", span="239-239", cluster="lambda expression", file="SubscriptionManager.cs"];
m0_32 [label="Entry QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", span="161-161", cluster="QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", file="SubscriptionManager.cs"];
m0_14 [label="Entry QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", span="117-117", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_15 [label="dataTimeZone == null", span="119-119", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_17 [label="exchangeTimeZone == null", span="123-123", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_19 [label="var newConfig = new SubscriptionDataConfig(dataType, symbol, resolution, dataTimeZone, exchangeTimeZone, fillDataForward, extendedMarketHours, isInternalFeed, isCustomData, isFilteredSubscription: isFilteredSubscription)", span="129-129", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_27 [label="_timeKeeper.AddTimeZone(exchangeTimeZone)", span="154-154", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_28 [label="HasCustomData = HasCustomData || isCustomData", span="157-157", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_16 [label="throw new ArgumentNullException(''dataTimeZone'', ''DataTimeZone is a required parameter for new subscriptions.  Set to the time zone the raw data is time stamped in.'');", span="121-121", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_18 [label="throw new ArgumentNullException(''exchangeTimeZone'', ''ExchangeTimeZone is a required parameter for new subscriptions.  Set to the time zone the security exchange resides in.'');", span="125-125", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_20 [label="Subscriptions.Contains(newConfig)", span="132-132", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", color=red, community=0, file="SubscriptionManager.cs"];
m0_21 [label="Log.Trace(''SubscriptionManager.Add(): subscription already added: '' + newConfig)", span="134-134", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", color=red, community=0, file="SubscriptionManager.cs"];
m0_22 [label="return newConfig;", span="135-135", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", color=red, community=0, file="SubscriptionManager.cs"];
m0_23 [label="Subscriptions.Add(newConfig)", span="138-138", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_29 [label="return newConfig;", span="159-159", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_24 [label="var uniqueCount = Subscriptions\r\n                .Where(x => !x.Symbol.IsCanonical())\r\n                .DistinctBy(x => x.Symbol.Value)\r\n                .Count()", span="141-144", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_25 [label="uniqueCount > _algorithmSettings.DataSubscriptionLimit", span="145-145", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_26 [label="throw new Exception(\r\n                    string.Format(\r\n                        ''The maximum number of concurrent market data subscriptions was exceeded ({0}). Please reduce the number of symbols requested or increase the limit using Settings.DataSubscriptionLimit.'',\r\n                        _algorithmSettings.DataSubscriptionLimit));", span="147-150", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_30 [label="Exit QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", span="117-117", cluster="QuantConnect.Data.SubscriptionManager.Add(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, bool)", file="SubscriptionManager.cs"];
m0_6 [label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0", cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="SubscriptionManager.cs"];
m0_37 [label="Entry Unk.DistinctBy", span="", cluster="Unk.DistinctBy", file="SubscriptionManager.cs"];
m0_39 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)", file="SubscriptionManager.cs"];
m0_76 [label="Entry QuantConnect.Data.SubscriptionManager.GetDataTypesForSecurity(QuantConnect.SecurityType)", span="215-215", cluster="QuantConnect.Data.SubscriptionManager.GetDataTypesForSecurity(QuantConnect.SecurityType)", file="SubscriptionManager.cs"];
m0_77 [label="return AvailableDataTypes[securityType];", span="217-217", cluster="QuantConnect.Data.SubscriptionManager.GetDataTypesForSecurity(QuantConnect.SecurityType)", file="SubscriptionManager.cs"];
m0_78 [label="Exit QuantConnect.Data.SubscriptionManager.GetDataTypesForSecurity(QuantConnect.SecurityType)", span="215-215", cluster="QuantConnect.Data.SubscriptionManager.GetDataTypesForSecurity(QuantConnect.SecurityType)", file="SubscriptionManager.cs"];
m0_59 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="SubscriptionManager.cs"];
m0_7 [label="Entry QuantConnect.Data.SubscriptionManager.DefaultDataTypes()", span="198-198", cluster="QuantConnect.Data.SubscriptionManager.DefaultDataTypes()", file="SubscriptionManager.cs"];
m0_72 [label="return new Dictionary<SecurityType, List<TickType>>()\r\n            {\r\n                {SecurityType.Base, new List<TickType>() { TickType.Trade } },\r\n                {SecurityType.Forex, new List<TickType>() { TickType.Quote } },\r\n                {SecurityType.Equity, new List<TickType>() { TickType.Trade } },\r\n                {SecurityType.Option, new List<TickType>() { TickType.Quote, TickType.Trade, TickType.OpenInterest } },\r\n                {SecurityType.Cfd, new List<TickType>() { TickType.Quote } },\r\n                {SecurityType.Future, new List<TickType>() { TickType.Quote, TickType.Trade, TickType.OpenInterest } },\r\n                {SecurityType.Commodity, new List<TickType>() { TickType.Trade } }\r\n            };", span="200-209", cluster="QuantConnect.Data.SubscriptionManager.DefaultDataTypes()", file="SubscriptionManager.cs"];
m0_73 [label="Exit QuantConnect.Data.SubscriptionManager.DefaultDataTypes()", span="198-198", cluster="QuantConnect.Data.SubscriptionManager.DefaultDataTypes()", file="SubscriptionManager.cs"];
m0_60 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)", file="SubscriptionManager.cs"];
m0_33 [label="Entry System.Collections.Generic.HashSet<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.HashSet<T>.Contains(T)", file="SubscriptionManager.cs"];
m0_62 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="SubscriptionManager.cs"];
m0_81 [label="return new List<Type>() { typeof(ZipEntryName) };", span="231-231", cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs"];
m0_79 [label="Entry QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", span="227-227", cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs"];
m0_80 [label=isCanonical, span="229-229", cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs"];
m0_82 [label="resolution == Resolution.Tick", span="234-234", cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs"];
m0_84 [label="return AvailableDataTypes[symbolSecurityType].Select(tickType => LeanData.GetDataType(resolution, tickType)).ToList();", span="239-239", cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs"];
m0_83 [label="return new List<Type>() { typeof(Tick) };", span="236-236", cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs"];
m0_85 [label="Exit QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", span="227-227", cluster="QuantConnect.Data.SubscriptionManager.LookupSubscriptionConfigDataTypes(QuantConnect.SecurityType, QuantConnect.Resolution, bool)", file="SubscriptionManager.cs"];
m0_0 [label="Entry QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", span="57-57", cluster="QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", file="SubscriptionManager.cs"];
m0_1 [label="_algorithmSettings = algorithmSettings", span="59-59", cluster="QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", file="SubscriptionManager.cs"];
m0_2 [label="_timeKeeper = timeKeeper", span="60-60", cluster="QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", file="SubscriptionManager.cs"];
m0_3 [label="Subscriptions = new HashSet<SubscriptionDataConfig>()", span="62-62", cluster="QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", color=red, community=0, file="SubscriptionManager.cs"];
m0_4 [label="AvailableDataTypes = DefaultDataTypes()", span="65-65", cluster="QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", file="SubscriptionManager.cs"];
m0_5 [label="Exit QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", span="57-57", cluster="QuantConnect.Data.SubscriptionManager.SubscriptionManager(QuantConnect.AlgorithmSettings, QuantConnect.TimeKeeper)", file="SubscriptionManager.cs"];
m0_40 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SubscriptionManager.cs"];
m0_49 [label="Entry QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", span="167-167", cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs"];
m0_50 [label="var subscriptions = Subscriptions.Where(x => x.Symbol == symbol).ToList()", span="170-170", cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs"];
m0_52 [label="throw new ArgumentException(''Please subscribe to this symbol before adding a consolidator for it. Symbol: '' + symbol.Value);", span="175-175", cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs"];
m0_54 [label="consolidator.InputType.IsAssignableFrom(subscription.Type)", span="181-181", cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs"];
m0_55 [label="subscription.Consolidators.Add(consolidator)", span="183-183", cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs"];
m0_57 [label="throw new ArgumentException(string.Format(''Type mismatch found between consolidator and symbol. '' +\r\n                ''Symbol: {0} does not support input type: {1}. Supported types: {2}.'',\r\n                symbol.Value, \r\n                consolidator.InputType.Name,\r\n                string.Join('','', subscriptions.Select(x => x.Type.Name))));", span="188-192", cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs"];
m0_51 [label="subscriptions.Count == 0", span="172-172", cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs"];
m0_53 [label=subscriptions, span="178-178", cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs"];
m0_56 [label="return;", span="184-184", cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs"];
m0_58 [label="Exit QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", span="167-167", cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SubscriptionManager.cs"];
m0_64 [label="Entry Unk.Join", span="", cluster="Unk.Join", file="SubscriptionManager.cs"];
m0_74 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SubscriptionManager.cs"];
m0_65 [label="Entry string.Format(string, object, object, object)", span="0-0", cluster="string.Format(string, object, object, object)", file="SubscriptionManager.cs"];
m0_34 [label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106", cluster="QuantConnect.Logging.Log.Trace(string, bool)", file="SubscriptionManager.cs"];
m0_63 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SubscriptionManager.cs"];
m0_38 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="SubscriptionManager.cs"];
m0_31 [label="Entry System.ArgumentNullException.ArgumentNullException(string, string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string, string)", file="SubscriptionManager.cs"];
m0_90 [label="QuantConnect.Data.SubscriptionManager", span="", file="SubscriptionManager.cs"];
m0_91 [label="QuantConnect.Symbol", span="", file="SubscriptionManager.cs"];
m0_92 [label="QuantConnect.Resolution", span="", file="SubscriptionManager.cs"];
n214 -> n1  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n2  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n3  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n37  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n38  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n39  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n50  [key=1, style=dashed, color=red, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n53  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n56  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n58  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n157  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n63  [key=1, style=dashed, color=red, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n161  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n175  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n65  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n73  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n76  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n85  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n95  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n105  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n117  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n120  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n121  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n123  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n124  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n206  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n210  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n214 -> n211  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler"];
n215 -> n30  [key=1, style=dashed, color=darkseagreen4, label=algorithmName];
n216 -> n46  [key=1, style=dashed, color=darkseagreen4, label=liveJob];
n217 -> n161  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n217 -> n162  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n217 -> n163  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n217 -> n164  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n217 -> n165  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n217 -> n166  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n217 -> n167  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n217 -> n169  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n217 -> n170  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n217 -> n172  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n217 -> n190  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n218 -> n163  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Packets.AlgorithmNodePacket"];
n219 -> n167  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.RealTime.IRealTimeHandler"];
n220 -> n168  [key=1, style=dashed, color=red, label="QuantConnect.Interfaces.IBrokerage"];
n221 -> n171  [key=1, style=dashed, color=darkseagreen4, label=liveJob];
n222 -> n187  [key=1, style=dashed, color=darkseagreen4, label=order];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n5  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n6  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n4 -> n0  [key=0, style=bold, color=blue];
n7 -> n8  [key=0, style=solid];
n7 -> n10  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Packets.AlgorithmNodePacket"];
n7 -> n11  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Packets.AlgorithmNodePacket"];
n7 -> n9  [key=3, color=darkorchid, style=bold, label="method methodReturn QuantConnect.Interfaces.IAlgorithm CreateAlgorithmInstance"];
n8 -> n9  [key=0, style=solid];
n10 -> n11  [key=0, style=solid];
n10 -> n16  [key=2, style=dotted];
n10 -> n17  [key=2, style=dotted];
n10 -> n21  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.List<string>"];
n10 -> n22  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.List<string>"];
n10 -> n24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.List<string>"];
n11 -> n12  [key=0, style=solid];
n11 -> n18  [key=2, style=dotted];
n11 -> n13  [key=1, style=dashed, color=darkseagreen4, label=error];
n11 -> n14  [key=1, style=dashed, color=darkseagreen4, label=algorithm];
n9 -> n10  [key=0, style=solid];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [key=0, style=solid];
n22 -> n25  [key=0, style=solid];
n22 -> n26  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid];
n24 -> n28  [key=2, style=dotted];
n24 -> n29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n12 -> n13  [key=0, style=solid];
n12 -> n14  [key=0, style=solid];
n13 -> n15  [key=0, style=solid];
n13 -> n19  [key=2, style=dotted];
n14 -> n15  [key=0, style=solid];
n15 -> n7  [key=0, style=bold, color=blue];
n20 -> n21  [key=0, style=solid];
n20 -> n22  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.List<string>"];
n20 -> n24  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.List<string>"];
n23 -> n24  [key=0, style=solid];
n23 -> n27  [key=2, style=dotted];
n23 -> n30  [key=1, style=dashed, color=darkseagreen4, label=algorithmName];
n30 -> n31  [key=0, style=solid];
n30 -> n32  [key=2, style=dotted];
n25 -> n20  [key=0, style=bold, color=blue];
n29 -> n30  [key=0, style=solid];
n31 -> n29  [key=0, style=bold, color=blue];
n33 -> n34  [key=0, style=solid];
n33 -> n39  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n34 -> n35  [key=0, style=solid];
n34 -> n37  [key=1, style=dashed, color=darkseagreen4, label=liveJob];
n34 -> n46  [key=1, style=dashed, color=darkseagreen4, label=liveJob];
n34 -> n39  [key=1, style=dashed, color=darkseagreen4, label=liveJob];
n39 -> n40  [key=0, style=solid];
n39 -> n44  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n35 -> n37  [key=0, style=solid];
n37 -> n38  [key=0, style=solid];
n37 -> n43  [key=2, style=dotted];
n37 -> n45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n46 -> n47  [key=0, style=solid];
n46 -> n48  [key=2, style=dotted];
n36 -> n41  [key=0, style=solid];
n36 -> n42  [key=2, style=dotted];
n38 -> n39  [key=0, style=solid];
n38 -> n41  [key=1, style=dashed, color=darkseagreen4, label="out QuantConnect.Interfaces.IBrokerageFactory"];
n45 -> n46  [key=0, style=solid];
n41 -> n33  [key=0, style=bold, color=blue];
n40 -> n41  [key=0, style=solid];
n47 -> n45  [key=0, style=bold, color=blue];
n49 -> n50  [key=0, style=solid, color=red];
n49 -> n51  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Packets.AlgorithmNodePacket"];
n49 -> n60  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Results.IResultHandler"];
n49 -> n61  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Packets.AlgorithmNodePacket"];
n49 -> n63  [key=1, style=dashed, color=red, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n161  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n162  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n163  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n164  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n165  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n166  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n167  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n168  [key=1, style=dashed, color=red, label="QuantConnect.Interfaces.IBrokerage"];
n49 -> n169  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n170  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n172  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n67  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.Results.IResultHandler"];
n49 -> n68  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IBrokerage"];
n49 -> n70  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IBrokerage"];
n49 -> n75  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IBrokerage"];
n49 -> n79  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IBrokerage"];
n49 -> n82  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n88  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IBrokerage"];
n49 -> n91  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n92  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler"];
n49 -> n98  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IBrokerage"];
n49 -> n100  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n190  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n106  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n109  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n111  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n112  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n113  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n114  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n119  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n120  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Interfaces.IAlgorithm"];
n49 -> n54  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Setup"];
n50 -> n51  [key=0, style=solid, color=red];
n51 -> n52  [key=0, style=solid];
n51 -> n55  [key=1, style=dashed, color=darkseagreen4, label=liveJob];
n51 -> n63  [key=1, style=dashed, color=red, label=liveJob];
n51 -> n171  [key=1, style=dashed, color=darkseagreen4, label=liveJob];
n60 -> n61  [key=0, style=solid];
n60 -> n129  [key=2, style=dotted];
n61 -> n62  [key=0, style=solid];
n61 -> n63  [key=1, style=dashed, color=red, label=controls];
n63 -> n64  [key=0, style=solid, color=red];
n63 -> n17  [key=2, style=dotted, color=red];
n63 -> n131  [key=2, style=dotted, color=red];
n63 -> n160  [key=1, style=dashed, color=red, label="lambda expression"];
n161 -> n162  [key=0, style=solid];
n161 -> n177  [key=2, style=dotted];
n162 -> n163  [key=0, style=solid];
n163 -> n164  [key=0, style=solid];
n163 -> n178  [key=2, style=dotted];
n164 -> n165  [key=0, style=solid];
n164 -> n179  [key=2, style=dotted];
n164 -> n180  [key=2, style=dotted];
n165 -> n166  [key=0, style=solid];
n165 -> n181  [key=2, style=dotted];
n166 -> n167  [key=0, style=solid];
n166 -> n182  [key=2, style=dotted];
n167 -> n168  [key=0, style=solid, color=red];
n167 -> n183  [key=2, style=dotted];
n168 -> n169  [key=0, style=solid, color=red];
n168 -> n170  [key=0, style=solid, color=red];
n169 -> n170  [key=0, style=solid];
n170 -> n171  [key=0, style=solid];
n170 -> n184  [key=2, style=dotted];
n172 -> n173  [key=0, style=solid];
n172 -> n174  [key=0, style=solid];
n172 -> n176  [key=0, style=solid];
n67 -> n68  [key=0, style=solid];
n67 -> n129  [key=2, style=dotted];
n68 -> n69  [key=0, style=solid];
n70 -> n71  [key=0, style=solid];
n70 -> n75  [key=0, style=solid];
n70 -> n132  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n78  [key=0, style=solid];
n79 -> n80  [key=0, style=solid];
n79 -> n135  [key=2, style=dotted];
n82 -> n80  [key=0, style=solid];
n82 -> n136  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n88 -> n137  [key=2, style=dotted];
n91 -> n92  [key=0, style=solid];
n91 -> n139  [key=2, style=dotted];
n92 -> n89  [key=0, style=solid];
n92 -> n140  [key=2, style=dotted];
n92 -> n186  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n98 -> n99  [key=0, style=solid];
n98 -> n141  [key=2, style=dotted];
n98 -> n101  [key=1, style=dashed, color=darkseagreen4, label=holdings];
n100 -> n101  [key=0, style=solid];
n100 -> n143  [key=2, style=dotted];
n100 -> n109  [key=1, style=dashed, color=darkseagreen4, label=minResolution];
n100 -> n111  [key=1, style=dashed, color=darkseagreen4, label=minResolution];
n100 -> n112  [key=1, style=dashed, color=darkseagreen4, label=minResolution];
n190 -> n191  [key=0, style=solid];
n190 -> n192  [key=2, style=dotted];
n190 -> n193  [key=2, style=dotted];
n190 -> n194  [key=2, style=dotted];
n190 -> n195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n106 -> n107  [key=0, style=solid];
n106 -> n113  [key=0, style=solid];
n106 -> n147  [key=2, style=dotted];
n109 -> n113  [key=0, style=solid];
n109 -> n148  [key=2, style=dotted];
n111 -> n113  [key=0, style=solid];
n111 -> n149  [key=2, style=dotted];
n112 -> n113  [key=0, style=solid];
n112 -> n150  [key=2, style=dotted];
n113 -> n114  [key=0, style=solid];
n113 -> n151  [key=2, style=dotted];
n114 -> n101  [key=0, style=solid];
n114 -> n152  [key=2, style=dotted];
n114 -> n153  [key=2, style=dotted];
n119 -> n120  [key=0, style=solid];
n119 -> n154  [key=2, style=dotted];
n120 -> n121  [key=0, style=solid];
n52 -> n53  [key=0, style=solid];
n52 -> n55  [key=0, style=solid];
n55 -> n56  [key=0, style=solid];
n55 -> n58  [key=0, style=solid];
n55 -> n127  [key=2, style=dotted];
n171 -> n172  [key=0, style=solid];
n171 -> n174  [key=0, style=solid];
n171 -> n176  [key=0, style=solid];
n53 -> n54  [key=0, style=solid];
n53 -> n126  [key=2, style=dotted];
n54 -> n125  [key=0, style=solid];
n126 -> n206  [key=0, style=solid];
n126 -> n53  [key=3, color=darkorchid, style=bold, label="Parameter variable string message"];
n126 -> n56  [key=3, color=darkorchid, style=bold, label="Parameter variable string message"];
n126 -> n65  [key=3, color=darkorchid, style=bold, label="Parameter variable string message"];
n126 -> n76  [key=3, color=darkorchid, style=bold, label="Parameter variable string message"];
n56 -> n57  [key=0, style=solid];
n56 -> n126  [key=2, style=dotted];
n58 -> n59  [key=0, style=solid];
n58 -> n156  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Brokerages.BrokerageMessageEvent"];
n58 -> n157  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Brokerages.BrokerageMessageEvent"];
n58 -> n68  [key=1, style=dashed, color=darkseagreen4, label=brokerageOnMessage];
n58 -> n58  [key=3, color=darkorchid, style=bold, label="Local variable System.EventHandler<QuantConnect.Brokerages.BrokerageMessageEvent> brokerageOnMessage"];
n57 -> n125  [key=0, style=solid];
n59 -> n60  [key=0, style=solid];
n59 -> n128  [key=2, style=dotted];
n156 -> n157  [key=0, style=solid];
n156 -> n158  [key=0, style=solid];
n157 -> n158  [key=0, style=solid];
n157 -> n159  [key=2, style=dotted];
n157 -> n126  [key=2, style=dotted];
n62 -> n63  [key=0, style=solid, color=red];
n62 -> n130  [key=2, style=dotted];
n64 -> n65  [key=0, style=solid];
n64 -> n67  [key=0, style=solid];
n160 -> n161  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n65 -> n126  [key=2, style=dotted];
n66 -> n124  [key=0, style=solid];
n66 -> n125  [key=0, style=solid];
n69 -> n70  [key=0, style=solid];
n69 -> n128  [key=2, style=dotted];
n71 -> n72  [key=0, style=solid];
n72 -> n73  [key=0, style=solid];
n72 -> n133  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n73 -> n134  [key=2, style=dotted];
n73 -> n126  [key=2, style=dotted];
n74 -> n124  [key=0, style=solid];
n74 -> n125  [key=0, style=solid];
n76 -> n77  [key=0, style=solid];
n76 -> n126  [key=2, style=dotted];
n78 -> n79  [key=0, style=solid];
n78 -> n128  [key=2, style=dotted];
n77 -> n124  [key=0, style=solid];
n77 -> n125  [key=0, style=solid];
n80 -> n81  [key=0, style=solid];
n80 -> n83  [key=0, style=solid];
n80 -> n87  [key=0, style=solid];
n80 -> n82  [key=1, style=dashed, color=darkseagreen4, label=cash];
n81 -> n82  [key=0, style=solid];
n81 -> n128  [key=2, style=dotted];
n83 -> n84  [key=0, style=solid];
n87 -> n88  [key=0, style=solid];
n87 -> n128  [key=2, style=dotted];
n84 -> n85  [key=0, style=solid];
n84 -> n133  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid];
n85 -> n126  [key=2, style=dotted];
n86 -> n124  [key=0, style=solid];
n86 -> n125  [key=0, style=solid];
n89 -> n90  [key=0, style=solid, color=red];
n89 -> n93  [key=0, style=solid];
n89 -> n97  [key=0, style=solid];
n89 -> n91  [key=1, style=dashed, color=darkseagreen4, label=order];
n89 -> n92  [key=1, style=dashed, color=darkseagreen4, label=order];
n89 -> n187  [key=1, style=dashed, color=darkseagreen4, label=order];
n90 -> n91  [key=0, style=solid, color=red];
n90 -> n138  [key=2, style=dotted, color=red];
n90 -> n128  [key=2, style=dotted, color=red];
n93 -> n94  [key=0, style=solid];
n97 -> n98  [key=0, style=solid];
n97 -> n128  [key=2, style=dotted];
n187 -> n188  [key=0, style=solid];
n186 -> n187  [key=0, style=solid];
n94 -> n95  [key=0, style=solid];
n94 -> n133  [key=2, style=dotted];
n95 -> n96  [key=0, style=solid];
n95 -> n126  [key=2, style=dotted];
n96 -> n124  [key=0, style=solid];
n96 -> n125  [key=0, style=solid];
n99 -> n100  [key=0, style=solid];
n99 -> n142  [key=2, style=dotted];
n99 -> n103  [key=1, style=dashed, color=darkseagreen4, label=supportedSecurityTypes];
n99 -> n105  [key=1, style=dashed, color=darkseagreen4, label=supportedSecurityTypes];
n101 -> n102  [key=0, style=solid];
n101 -> n115  [key=0, style=solid];
n101 -> n119  [key=0, style=solid];
n101 -> n103  [key=1, style=dashed, color=darkseagreen4, label=holding];
n101 -> n104  [key=1, style=dashed, color=darkseagreen4, label=holding];
n101 -> n105  [key=1, style=dashed, color=darkseagreen4, label=holding];
n101 -> n106  [key=1, style=dashed, color=darkseagreen4, label=holding];
n101 -> n107  [key=1, style=dashed, color=darkseagreen4, label=holding];
n101 -> n108  [key=1, style=dashed, color=darkseagreen4, label=holding];
n101 -> n109  [key=1, style=dashed, color=darkseagreen4, label=holding];
n101 -> n110  [key=1, style=dashed, color=darkseagreen4, label=holding];
n101 -> n111  [key=1, style=dashed, color=darkseagreen4, label=holding];
n101 -> n112  [key=1, style=dashed, color=darkseagreen4, label=holding];
n101 -> n113  [key=1, style=dashed, color=darkseagreen4, label=holding];
n101 -> n114  [key=1, style=dashed, color=darkseagreen4, label=holding];
n103 -> n104  [key=0, style=solid];
n103 -> n106  [key=0, style=solid];
n103 -> n144  [key=2, style=dotted];
n105 -> n101  [key=0, style=solid];
n105 -> n146  [key=2, style=dotted];
n105 -> n126  [key=2, style=dotted];
n102 -> n103  [key=0, style=solid];
n102 -> n128  [key=2, style=dotted];
n115 -> n116  [key=0, style=solid];
n104 -> n105  [key=0, style=solid];
n104 -> n145  [key=2, style=dotted];
n107 -> n108  [key=0, style=solid];
n107 -> n128  [key=2, style=dotted];
n108 -> n109  [key=0, style=solid];
n108 -> n110  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n110 -> n112  [key=0, style=solid];
n116 -> n117  [key=0, style=solid];
n116 -> n133  [key=2, style=dotted];
n117 -> n118  [key=0, style=solid];
n117 -> n126  [key=2, style=dotted];
n118 -> n124  [key=0, style=solid];
n118 -> n125  [key=0, style=solid];
n121 -> n122  [key=0, style=solid];
n121 -> n124  [key=0, style=solid];
n122 -> n123  [key=0, style=solid];
n124 -> n125  [key=0, style=solid];
n123 -> n124  [key=0, style=solid];
n123 -> n126  [key=2, style=dotted];
n125 -> n49  [key=0, style=bold, color=blue];
n155 -> n156  [key=0, style=solid];
n155 -> n157  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Brokerages.BrokerageMessageEvent"];
n158 -> n155  [key=0, style=bold, color=blue];
n179 -> n198  [key=0, style=solid];
n179 -> n199  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.Dictionary<QuantConnect.SecurityType, System.Collections.Generic.List<QuantConnect.TickType>> GetConfiguredDataFeeds"];
n174 -> n175  [key=0, style=solid];
n176 -> n160  [key=0, style=bold, color=blue];
n173 -> n172  [key=0, style=solid];
n173 -> n185  [key=2, style=dotted];
n173 -> n173  [key=1, style=dashed, color=darkseagreen4, label=kvp];
n175 -> n176  [key=0, style=solid];
n175 -> n126  [key=2, style=dotted];
n188 -> n186  [key=0, style=bold, color=blue];
n189 -> n190  [key=0, style=solid];
n191 -> n189  [key=0, style=bold, color=blue];
n195 -> n196  [key=0, style=solid];
n196 -> n197  [key=0, style=solid];
n196 -> n196  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<QuantConnect.Symbol, QuantConnect.Securities.Security>"];
n197 -> n195  [key=0, style=bold, color=blue];
n198 -> n199  [key=0, style=solid];
n198 -> n27  [key=2, style=dotted];
n198 -> n200  [key=1, style=dashed, color=darkseagreen4, label=dataFeedsConfigString];
n198 -> n201  [key=1, style=dashed, color=darkseagreen4, label=dataFeedsConfigString];
n199 -> n200  [key=0, style=solid];
n199 -> n204  [key=2, style=dotted];
n199 -> n202  [key=1, style=dashed, color=darkseagreen4, label=dataFeeds];
n200 -> n201  [key=0, style=solid];
n200 -> n202  [key=0, style=solid];
n201 -> n202  [key=0, style=solid];
n201 -> n205  [key=2, style=dotted];
n202 -> n203  [key=0, style=solid];
n203 -> n179  [key=0, style=bold, color=blue];
n206 -> n207  [key=0, style=solid];
n206 -> n208  [key=2, style=dotted];
n207 -> n126  [key=0, style=bold, color=blue];
n209 -> n210  [key=0, style=solid];
n210 -> n211  [key=0, style=solid];
n210 -> n212  [key=0, style=solid];
n211 -> n212  [key=0, style=solid];
n211 -> n213  [key=2, style=dotted];
n212 -> n209  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Resolution"];
m0_8 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Symbol"];
m0_8 -> m0_14  [key=3, color=darkorchid, style=bold, label="method methodReturn QuantConnect.Data.SubscriptionDataConfig Add"];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label=dataType];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_12  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=2, style=dotted];
m0_11 -> m0_12  [key=0, style=solid];
m0_13 -> m0_8  [key=0, style=bold, color=blue];
m0_86 -> m0_87  [key=0, style=solid];
m0_42 -> m0_43  [key=0, style=solid];
m0_46 -> m0_47  [key=0, style=solid];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_45  [key=2, style=dotted];
m0_44 -> m0_42  [key=0, style=bold, color=blue];
m0_47 -> m0_48  [key=0, style=solid];
m0_48 -> m0_46  [key=0, style=bold, color=blue];
m0_67 -> m0_68  [key=0, style=solid];
m0_66 -> m0_67  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_68 -> m0_66  [key=0, style=bold, color=blue];
m0_70 -> m0_71  [key=0, style=solid];
m0_71 -> m0_69  [key=0, style=bold, color=blue];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_89  [key=2, style=dotted];
m0_88 -> m0_86  [key=0, style=bold, color=blue];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=DateTimeZone];
m0_14 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_14 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=DateTimeZone];
m0_14 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_14 -> m0_9  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type dataType"];
m0_14 -> m0_8  [key=3, color=darkorchid, style=bold, label="Parameter variable bool extendedMarketHours"];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_17  [key=0, style=solid];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=0, style=solid];
m0_19 -> m0_20  [key=0, style=solid, color=red];
m0_19 -> m0_32  [key=2, style=dotted];
m0_19 -> m0_21  [key=1, style=dashed, color=red, label=newConfig];
m0_19 -> m0_22  [key=1, style=dashed, color=red, label=newConfig];
m0_19 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label=newConfig];
m0_19 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=newConfig];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_41  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_16 -> m0_30  [key=0, style=solid];
m0_16 -> m0_31  [key=2, style=dotted];
m0_18 -> m0_30  [key=0, style=solid];
m0_18 -> m0_31  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid, color=red];
m0_20 -> m0_23  [key=0, style=solid, color=red];
m0_20 -> m0_33  [key=2, style=dotted, color=red];
m0_21 -> m0_22  [key=0, style=solid, color=red];
m0_21 -> m0_34  [key=2, style=dotted, color=red];
m0_22 -> m0_30  [key=0, style=solid, color=red];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_35  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_36  [key=2, style=dotted];
m0_24 -> m0_37  [key=2, style=dotted];
m0_24 -> m0_38  [key=2, style=dotted];
m0_24 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_24 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [key=0, style=solid];
m0_26 -> m0_30  [key=0, style=solid];
m0_26 -> m0_39  [key=2, style=dotted];
m0_26 -> m0_40  [key=2, style=dotted];
m0_30 -> m0_14  [key=0, style=bold, color=blue];
m0_76 -> m0_77  [key=0, style=solid];
m0_77 -> m0_78  [key=0, style=solid];
m0_78 -> m0_76  [key=0, style=bold, color=blue];
m0_7 -> m0_72  [key=0, style=solid];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_74  [key=2, style=dotted];
m0_72 -> n5  [key=2, style=dotted];
m0_73 -> m0_7  [key=0, style=bold, color=blue];
m0_81 -> m0_85  [key=0, style=solid];
m0_81 -> n5  [key=2, style=dotted];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Resolution"];
m0_79 -> m0_84  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.SecurityType"];
m0_79 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Resolution"];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_82  [key=0, style=solid];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_84  [key=0, style=solid];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_63  [key=2, style=dotted];
m0_84 -> m0_59  [key=2, style=dotted];
m0_84 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_83 -> m0_85  [key=0, style=solid];
m0_83 -> n5  [key=2, style=dotted];
m0_85 -> m0_79  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.TimeKeeper"];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_3  [key=0, style=solid, color=red];
m0_3 -> m0_4  [key=0, style=solid, color=red];
m0_3 -> m0_6  [key=2, style=dotted, color=red];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_7  [key=2, style=dotted];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_67  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Symbol"];
m0_49 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Symbol"];
m0_49 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.Consolidators.IDataConsolidator"];
m0_49 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.Consolidators.IDataConsolidator"];
m0_49 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Symbol"];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_36  [key=2, style=dotted];
m0_50 -> m0_59  [key=2, style=dotted];
m0_50 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_50 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label=subscriptions];
m0_50 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label=subscriptions];
m0_52 -> m0_58  [key=0, style=solid];
m0_52 -> m0_60  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_53  [key=0, style=solid];
m0_54 -> m0_61  [key=2, style=dotted];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_62  [key=2, style=dotted];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_60  [key=2, style=dotted];
m0_57 -> m0_63  [key=2, style=dotted];
m0_57 -> m0_64  [key=2, style=dotted];
m0_57 -> m0_65  [key=2, style=dotted];
m0_57 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_53  [key=0, style=solid];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_57  [key=0, style=solid];
m0_53 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label=subscription];
m0_56 -> m0_58  [key=0, style=solid];
m0_58 -> m0_49  [key=0, style=bold, color=blue];
m0_90 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_3  [key=1, style=dashed, color=red, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_20  [key=1, style=dashed, color=red, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.SubscriptionManager"];
m0_90 -> m0_84  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Data.SubscriptionManager"];
m0_91 -> m0_67  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Symbol"];
m0_92 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label="QuantConnect.Resolution"];
}
