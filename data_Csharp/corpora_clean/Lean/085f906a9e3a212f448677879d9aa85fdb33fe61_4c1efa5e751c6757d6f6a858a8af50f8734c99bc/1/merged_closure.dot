digraph  {
n10 [label="QuantConnect.Orders.LimitOrder", span=""];
n0 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder()", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder()", span="38-38"];
n1 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder()", label="Type = OrderType.Limit", span="40-40"];
n2 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder()", label="Exit QuantConnect.Orders.LimitOrder.LimitOrder()", span="38-38"];
n3 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="53-53"];
n4 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", label="LimitPrice = limitPrice", span="56-56"];
n6 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", label="tag == ''''", span="59-59"];
n7 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", label="Tag = ''Limit Price: '' + limitPrice.ToString(''C'')", span="62-62"];
n5 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", label="Type = OrderType.Limit", span="57-57"];
n8 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", label="Exit QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="53-53"];
n9 [cluster="decimal.ToString(string)", label="Entry decimal.ToString(string)", span="0-0"];
m0_45 [cluster="QuantConnect.Algorithm.QCAlgorithm.ResolveConsolidator(QuantConnect.Symbol, System.TimeSpan?)", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.ResolveConsolidator(QuantConnect.Symbol, System.TimeSpan?)", span="1464-1464"];
m0_51 [cluster="QuantConnect.Data.SubscriptionManager.RemoveConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Data.SubscriptionManager.RemoveConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", span="202-202"];
m0_6 [cluster="System.Math.Abs(decimal)", file="LiveTradingResultHandler.cs", label="Entry System.Math.Abs(decimal)", span="0-0"];
m0_34 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.SymbolData(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Securities.Security, System.TimeSpan)", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.SymbolData(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Securities.Security, System.TimeSpan)", span="119-119"];
m0_39 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.SymbolData(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Securities.Security, System.TimeSpan)", file="LiveTradingResultHandler.cs", label="Security = security", span="121-121"];
m0_40 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.SymbolData(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Securities.Security, System.TimeSpan)", file="LiveTradingResultHandler.cs", label="Consolidator = algorithm.ResolveConsolidator(security.Symbol, period)", span="122-122"];
m0_41 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.SymbolData(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Securities.Security, System.TimeSpan)", file="LiveTradingResultHandler.cs", label="algorithm.SubscriptionManager.AddConsolidator(security.Symbol, Consolidator)", span="123-123"];
m0_42 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.SymbolData(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Securities.Security, System.TimeSpan)", file="LiveTradingResultHandler.cs", label="MACD = new MovingAverageConvergenceDivergence(12, 26, 9, MovingAverageType.Exponential)", span="125-125"];
m0_43 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.SymbolData(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Securities.Security, System.TimeSpan)", file="LiveTradingResultHandler.cs", label="Consolidator.DataConsolidated += OnDataConsolidated", span="127-127"];
m0_44 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.SymbolData(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Securities.Security, System.TimeSpan)", file="LiveTradingResultHandler.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.SymbolData(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Securities.Security, System.TimeSpan)", span="119-119"];
m0_36 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="LiveTradingResultHandler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m0_22 [cluster="QuantConnect.Algorithm.Framework.Alphas.Alpha.Alpha(QuantConnect.Symbol, QuantConnect.Algorithm.Framework.Alphas.AlphaType, QuantConnect.Algorithm.Framework.Alphas.AlphaDirection, System.TimeSpan)", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Alpha.Alpha(QuantConnect.Symbol, QuantConnect.Algorithm.Framework.Alphas.AlphaType, QuantConnect.Algorithm.Framework.Alphas.AlphaDirection, System.TimeSpan)", span="111-111"];
m0_35 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="LiveTradingResultHandler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m0_23 [cluster="QuantConnect.Algorithm.Framework.Alphas.Alpha.Equals(QuantConnect.Algorithm.Framework.Alphas.Alpha)", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Alpha.Equals(QuantConnect.Algorithm.Framework.Alphas.Alpha)", span="210-210"];
m0_47 [cluster="QuantConnect.Indicators.MovingAverageConvergenceDivergence.MovingAverageConvergenceDivergence(int, int, int, QuantConnect.Indicators.MovingAverageType)", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Indicators.MovingAverageConvergenceDivergence.MovingAverageConvergenceDivergence(int, int, int, QuantConnect.Indicators.MovingAverageType)", span="62-62"];
m0_25 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="94-94"];
m0_26 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="LiveTradingResultHandler.cs", label="changes.AddedSecurities", span="96-96"];
m0_27 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="LiveTradingResultHandler.cs", label="_symbolData.Add(added.Symbol, new SymbolData(algorithm, added, _consolidatorPeriod))", span="98-98"];
m0_28 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="LiveTradingResultHandler.cs", label="changes.RemovedSecurities", span="100-100"];
m0_31 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="LiveTradingResultHandler.cs", label="data.CleanUp(algorithm)", span="105-105"];
m0_29 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="LiveTradingResultHandler.cs", label="SymbolData data", span="102-102"];
m0_30 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="LiveTradingResultHandler.cs", label="_symbolData.TryGetValue(removed.Symbol, out data)", span="103-103"];
m0_32 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="LiveTradingResultHandler.cs", label="_symbolData.Remove(removed.Symbol)", span="106-106"];
m0_33 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="LiveTradingResultHandler.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="94-94"];
m0_52 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.OnDataConsolidated(object, QuantConnect.Data.IBaseData)", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.OnDataConsolidated(object, QuantConnect.Data.IBaseData)", span="140-140"];
m0_53 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.OnDataConsolidated(object, QuantConnect.Data.IBaseData)", file="LiveTradingResultHandler.cs", label="MACD.Update(consolidated.EndTime, consolidated.Value)", span="142-142"];
m0_54 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.OnDataConsolidated(object, QuantConnect.Data.IBaseData)", file="LiveTradingResultHandler.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.OnDataConsolidated(object, QuantConnect.Data.IBaseData)", span="140-140"];
m0_37 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.CleanUp(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.CleanUp(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", span="134-134"];
m0_48 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.CleanUp(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", file="LiveTradingResultHandler.cs", label="Consolidator.DataConsolidated -= OnDataConsolidated", span="136-136"];
m0_49 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.CleanUp(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", file="LiveTradingResultHandler.cs", label="algorithm.SubscriptionManager.RemoveConsolidator(Security.Symbol, Consolidator)", span="137-137"];
m0_50 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.CleanUp(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", file="LiveTradingResultHandler.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData.CleanUp(QuantConnect.Algorithm.Framework.QCAlgorithmFramework)", span="134-134"];
m0_24 [cluster="QuantConnect.Algorithm.Framework.Alphas.Alpha.Clone()", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Alpha.Clone()", span="163-163"];
m0_8 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", span="57-57"];
m0_9 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="_symbolData.Values", span="59-59"];
m0_20 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="yield return alpha;", span="84-84"];
m0_10 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="sd.Security.Price == 0", span="61-61"];
m0_12 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="var normalizedAlpha = sd.MACD.Signal / sd.Security.Price", span="67-67"];
m0_17 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="var alpha = new Alpha(sd.Security.Symbol, AlphaType.Price, direction, _alphaPeriod)", span="77-77"];
m0_18 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="alpha.Equals(sd.PreviousAlpha)", span="78-78"];
m0_19 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="sd.PreviousAlpha = alpha.Clone()", span="83-83"];
m0_11 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="var direction = AlphaDirection.Flat", span="66-66"];
m0_13 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="normalizedAlpha > _bounceThresholdPercent", span="68-68"];
m0_15 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="normalizedAlpha < -_bounceThresholdPercent", span="72-72"];
m0_14 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="direction = AlphaDirection.Up", span="70-70"];
m0_16 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="direction = AlphaDirection.Down", span="74-74"];
m0_21 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", file="LiveTradingResultHandler.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.Update(QuantConnect.Algorithm.Framework.QCAlgorithmFramework, QuantConnect.Data.Slice)", span="57-57"];
m0_46 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", span="169-169"];
m0_38 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", file="LiveTradingResultHandler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0"];
m0_0 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.MacdAlphaModel(System.TimeSpan, System.TimeSpan, decimal)", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.MacdAlphaModel(System.TimeSpan, System.TimeSpan, decimal)", span="43-43"];
m0_1 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.MacdAlphaModel(System.TimeSpan, System.TimeSpan, decimal)", file="LiveTradingResultHandler.cs", label="_alphaPeriod = alphaPeriod", span="45-45"];
m0_2 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.MacdAlphaModel(System.TimeSpan, System.TimeSpan, decimal)", file="LiveTradingResultHandler.cs", label="_consolidatorPeriod = consolidatorPeriod", span="46-46"];
m0_3 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.MacdAlphaModel(System.TimeSpan, System.TimeSpan, decimal)", file="LiveTradingResultHandler.cs", label="_bounceThresholdPercent = Math.Abs(bounceThresholdPercent)", span="47-47"];
m0_4 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.MacdAlphaModel(System.TimeSpan, System.TimeSpan, decimal)", file="LiveTradingResultHandler.cs", label="_symbolData = new Dictionary<Symbol, SymbolData>()", span="48-48"];
m0_5 [cluster="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.MacdAlphaModel(System.TimeSpan, System.TimeSpan, decimal)", file="LiveTradingResultHandler.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.MacdAlphaModel(System.TimeSpan, System.TimeSpan, decimal)", span="43-43"];
m0_55 [cluster="QuantConnect.Indicators.IndicatorBase<T>.Update(System.DateTime, decimal)", file="LiveTradingResultHandler.cs", label="Entry QuantConnect.Indicators.IndicatorBase<T>.Update(System.DateTime, decimal)", span="106-106"];
m0_7 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="LiveTradingResultHandler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_56 [file="LiveTradingResultHandler.cs", label="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel", span=""];
m0_57 [file="LiveTradingResultHandler.cs", label="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData", span=""];
m1_59 [cluster="Unk.Where", file="MarketOrder.cs", label="Entry Unk.Where", span=""];
m1_18 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetCash(string, decimal, decimal)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetCash(string, decimal, decimal)", span="1149-1149"];
m1_22 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", span="85-85"];
m1_23 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Time.Hour == 1 && Time.Minute == 0", span="87-87"];
m1_24 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="var limitPrice = Math.Round(Securities[''ETHUSD''].Price * 1.01m, 2)", span="90-90"];
m1_25 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="var quantity = Portfolio.CashBook[''ETH''].Amount", span="91-91"];
m1_26 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="LimitOrder(''ETHUSD'', -quantity, limitPrice)", span="92-92"];
m1_27 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Time.Hour == 2 && Time.Minute == 0", span="94-94"];
m1_28 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="var usdTotal = Portfolio.CashBook[''USD''].Amount", span="97-97"];
m1_29 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="var limitPrice = Math.Round(Securities[''BTCUSD''].Price * 0.95m, 2)", span="98-98"];
m1_31 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="LimitOrder(''BTCUSD'', quantity, limitPrice)", span="101-101"];
m1_32 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Time.Hour == 2 && Time.Minute == 1", span="103-103"];
m1_33 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="var usdTotal = Portfolio.CashBook[''USD''].Amount", span="106-106"];
m1_34 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="var usdReserved = Transactions.GetOpenOrders(x => x.Direction == OrderDirection.Buy && x.Type == OrderType.Limit)\r\n                    .Where(x => x.Symbol == ''BTCUSD'' || x.Symbol == ''ETHUSD'')\r\n                    .Sum(x => x.Quantity * ((LimitOrder) x).LimitPrice)", span="107-109"];
m1_36 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="var limitPrice = Math.Round(Securities[''ETHUSD''].Price * 1.01m, 2)", span="113-113"];
m1_38 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="LimitOrder(''ETHUSD'', quantity, limitPrice)", span="119-119"];
m1_40 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="LimitOrder(''ETHUSD'', quantity, limitPrice)", span="123-123"];
m1_41 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Time.Hour == 11 && Time.Minute == 0", span="125-125"];
m1_42 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="SetHoldings(''BTCUSD'', 0m)", span="128-128"];
m1_43 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Time.Hour == 12 && Time.Minute == 0", span="130-130"];
m1_44 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Buy(''BTCEUR'', 1m)", span="133-133"];
m1_45 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="var limitPrice = Math.Round(Securities[''BTCEUR''].Price * 1.1m, 2)", span="136-136"];
m1_46 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="LimitOrder(''BTCEUR'', -1, limitPrice)", span="137-137"];
m1_47 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Time.Hour == 13 && Time.Minute == 0", span="139-139"];
m1_48 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Transactions.CancelOpenOrders(''BTCEUR'')", span="142-142"];
m1_49 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Time.Hour > 13", span="144-144"];
m1_50 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="_fast > _slow", span="149-149"];
m1_51 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Portfolio.CashBook[''LTC''].Amount == 0", span="151-151"];
m1_52 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Buy(''LTCUSD'', 10)", span="153-153"];
m1_53 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Portfolio.CashBook[''LTC''].Amount > 0", span="158-158"];
m1_54 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Liquidate(''LTCUSD'')", span="163-163"];
m1_30 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="var quantity = usdTotal * 0.5m / limitPrice", span="100-100"];
m1_35 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="var usdAvailable = usdTotal - usdReserved", span="110-110"];
m1_37 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="var quantity = usdAvailable / limitPrice", span="116-116"];
m1_39 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="quantity = usdAvailable * 0.5m / limitPrice", span="122-122"];
m1_55 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", file="MarketOrder.cs", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnData(QuantConnect.Data.Slice)", span="85-85"];
m1_74 [cluster="lambda expression", file="MarketOrder.cs", label="Entry lambda expression", span="109-109"];
m1_68 [cluster="lambda expression", file="MarketOrder.cs", label="Entry lambda expression", span="107-107"];
m1_71 [cluster="lambda expression", file="MarketOrder.cs", label="Entry lambda expression", span="108-108"];
m1_70 [cluster="lambda expression", file="MarketOrder.cs", label="Exit lambda expression", span="107-107"];
m1_69 [cluster="lambda expression", file="MarketOrder.cs", label="x.Direction == OrderDirection.Buy && x.Type == OrderType.Limit", span="107-107"];
m1_73 [cluster="lambda expression", file="MarketOrder.cs", label="Exit lambda expression", span="108-108"];
m1_72 [cluster="lambda expression", file="MarketOrder.cs", label="x.Symbol == ''BTCUSD'' || x.Symbol == ''ETHUSD''", span="108-108"];
m1_75 [cluster="lambda expression", file="MarketOrder.cs", label="x.Quantity * ((LimitOrder) x).LimitPrice", span="109-109"];
m1_76 [cluster="lambda expression", file="MarketOrder.cs", label="Exit lambda expression", span="109-109"];
m1_62 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", span="885-885"];
m1_81 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnEndOfAlgorithm()", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnEndOfAlgorithm()", span="175-175"];
m1_82 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnEndOfAlgorithm()", file="MarketOrder.cs", label="Log($''{Time} - TotalPortfolioValue: {Portfolio.TotalPortfolioValue}'')", span="177-177"];
m1_83 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnEndOfAlgorithm()", file="MarketOrder.cs", label="Log($''{Time} - CashBook: {Portfolio.CashBook}'')", span="178-178"];
m1_84 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnEndOfAlgorithm()", file="MarketOrder.cs", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnEndOfAlgorithm()", span="175-175"];
m1_57 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, decimal, decimal, string)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, decimal, decimal, string)", span="363-363"];
m1_77 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", span="170-170"];
m1_78 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", file="MarketOrder.cs", label="Debug(Time + '' '' + orderEvent)", span="172-172"];
m1_79 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", file="MarketOrder.cs", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)", span="170-170"];
m1_66 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, int)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, int)", span="40-40"];
m1_3 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", color=green, community=0, file="MarketOrder.cs", label="SetCash(10000)", prediction=0, span="48-48"];
m1_4 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", file="MarketOrder.cs", label="SetCash(''EUR'', 10000, 1.23m)", span="52-52"];
m1_5 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", file="MarketOrder.cs", label="SetCash(''BTC'', 1m, 7300m)", span="57-57"];
m1_20 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddCrypto(string, QuantConnect.Resolution, string, bool, decimal)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddCrypto(string, QuantConnect.Resolution, string, bool, decimal)", span="1638-1638"];
m1_15 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", span="1172-1172"];
m1_21 [cluster="QuantConnect.Algorithm.QCAlgorithm.EMA(QuantConnect.Symbol, int, QuantConnect.Resolution?, System.Func<QuantConnect.Data.IBaseData, decimal>)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.EMA(QuantConnect.Symbol, int, QuantConnect.Resolution?, System.Func<QuantConnect.Data.IBaseData, decimal>)", span="360-360"];
m1_0 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", span="40-40"];
m1_1 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", color=green, community=0, file="MarketOrder.cs", label="SetStartDate(2018, 4, 4)", prediction=0, span="42-42"];
m1_2 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", color=green, community=0, file="MarketOrder.cs", label="SetEndDate(2018, 4, 4)", prediction=0, span="43-43"];
m1_58 [cluster="QuantConnect.Securities.SecurityTransactionManager.GetOpenOrders(System.Func<QuantConnect.Orders.Order, bool>)", file="MarketOrder.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.GetOpenOrders(System.Func<QuantConnect.Orders.Order, bool>)", span="281-281"];
m1_6 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", file="MarketOrder.cs", label="QuantConnect.Orders.MarketOrder", span=""];
m1_7 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", file="MarketOrder.cs", label="SetBrokerageModel(BrokerageName.GDAX, AccountType.Cash)", span="63-63"];
m1_8 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", file="MarketOrder.cs", label="AddCrypto(''BTCUSD'')", span="71-71"];
m1_9 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", file="MarketOrder.cs", label="AddCrypto(''ETHUSD'')", span="72-72"];
m1_10 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", file="MarketOrder.cs", label="AddCrypto(''BTCEUR'')", span="73-73"];
m1_11 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", file="MarketOrder.cs", label="var symbol = AddCrypto(''LTCUSD'').Symbol", span="74-74"];
m1_12 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", file="MarketOrder.cs", label="_fast = EMA(symbol, 30, Resolution.Minute)", span="77-77"];
m1_13 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", file="MarketOrder.cs", label="_slow = EMA(symbol, 60, Resolution.Minute)", span="78-78"];
m1_14 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", file="MarketOrder.cs", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm.Initialize()", span="40-40"];
m1_80 [cluster="QuantConnect.Algorithm.QCAlgorithm.Debug(string)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Debug(string)", span="1791-1791"];
m1_85 [cluster="QuantConnect.Algorithm.QCAlgorithm.Log(string)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Log(string)", span="1837-1837"];
m1_64 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, int, decimal, string)", span="337-337"];
m1_63 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol, decimal)", span="62-62"];
m1_16 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", span="1197-1197"];
m1_19 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", span="978-978"];
m1_56 [cluster="System.Math.Round(decimal, int)", file="MarketOrder.cs", label="Entry System.Math.Round(decimal, int)", span="0-0"];
m1_67 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", span="770-770"];
m1_17 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", file="MarketOrder.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", span="1121-1121"];
m1_60 [cluster="Unk.Sum", file="MarketOrder.cs", label="Entry Unk.Sum", span=""];
m1_65 [cluster="QuantConnect.Securities.SecurityTransactionManager.CancelOpenOrders(QuantConnect.Symbol, string)", file="MarketOrder.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.CancelOpenOrders(QuantConnect.Symbol, string)", span="184-184"];
m1_61 [cluster="Unk.LimitOrder", file="MarketOrder.cs", label="Entry Unk.LimitOrder", span=""];
m1_86 [file="MarketOrder.cs", label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", span=""];
m2_38 [cluster="QuantConnect.Algorithm.Framework.Alphas.AlphaScore.SetScore(QuantConnect.Algorithm.Framework.Alphas.AlphaScoreType, double, System.DateTime)", file="Order.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.AlphaScore.SetScore(QuantConnect.Algorithm.Framework.Alphas.AlphaScoreType, double, System.DateTime)", span="76-76"];
m2_41 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.InitializeForRange(System.DateTime, System.DateTime, System.DateTime)", file="Order.cs", label="Entry QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.InitializeForRange(System.DateTime, System.DateTime, System.DateTime)", span="150-150"];
m2_42 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.InitializeForRange(System.DateTime, System.DateTime, System.DateTime)", file="Order.cs", label="Exit QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.InitializeForRange(System.DateTime, System.DateTime, System.DateTime)", span="150-150"];
m2_14 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaClosed(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Entry QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaClosed(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", span="84-84"];
m2_15 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaClosed(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Statistics.TotalAlphasClosed += 1", span="87-87"];
m2_16 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaClosed(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="var volume = _tradablePercentOfVolume * context.InitialValues.Volume", span="90-90"];
m2_17 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaClosed(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="var enterValue = volume * context.InitialValues.Price * context.InitialValues.QuoteCurrencyConversionRate", span="93-93"];
m2_18 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaClosed(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="var exitValue = volume * context.CurrentValues.Price * context.CurrentValues.QuoteCurrencyConversionRate", span="96-96"];
m2_19 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaClosed(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="var alphaValue = (int)context.Alpha.Direction * (exitValue - enterValue)", span="99-99"];
m2_20 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaClosed(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="context.Alpha.EstimatedValue = alphaValue", span="101-101"];
m2_21 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaClosed(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Statistics.TotalEstimatedAlphaValue += alphaValue", span="102-102"];
m2_22 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaClosed(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Exit QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaClosed(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", span="84-84"];
m2_23 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaAnalysisCompleted(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Entry QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaAnalysisCompleted(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", span="109-109"];
m2_24 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaAnalysisCompleted(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Statistics.TotalAlphasAnalysisCompleted += 1", span="112-112"];
m2_26 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaAnalysisCompleted(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="var score = context.Score.GetScore(scoreType)", span="116-116"];
m2_27 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaAnalysisCompleted(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="var currentTime = context.CurrentValues.TimeUtc", span="117-117"];
m2_25 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaAnalysisCompleted(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="AlphaManager.ScoreTypes", span="114-114"];
m2_28 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaAnalysisCompleted(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="var mean = Statistics.MeanPopulationScore.GetScore(scoreType)", span="120-120"];
m2_30 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaAnalysisCompleted(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Statistics.MeanPopulationScore.SetScore(scoreType, newMean, currentTime)", span="122-122"];
m2_35 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaAnalysisCompleted(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Statistics.RollingAveragedPopulationScore.SetScore(scoreType, newEma, currentTime)", span="131-131"];
m2_29 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaAnalysisCompleted(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="var newMean = mean + (score - mean) / Statistics.TotalAlphasAnalysisCompleted", span="121-121"];
m2_31 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaAnalysisCompleted(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="var newEma = score", span="124-124"];
m2_36 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaAnalysisCompleted(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Exit QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaAnalysisCompleted(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", span="109-109"];
m2_7 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaGenerated(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Entry QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaGenerated(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", span="63-63"];
m2_8 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaGenerated(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Statistics.TotalAlphasGenerated++", span="66-66"];
m2_9 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaGenerated(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="context.Alpha.Direction == AlphaDirection.Up", span="69-69"];
m2_11 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaGenerated(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="context.Alpha.Direction == AlphaDirection.Down", span="73-73"];
m2_10 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaGenerated(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Statistics.LongCount++", span="71-71"];
m2_12 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaGenerated(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Statistics.ShortCount++", span="75-75"];
m2_13 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaGenerated(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", file="Order.cs", label="Exit QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.OnAlphaGenerated(QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext)", span="63-63"];
m2_6 [cluster="QuantConnect.AlphaRuntimeStatistics.AlphaRuntimeStatistics()", file="Order.cs", label="Entry QuantConnect.AlphaRuntimeStatistics.AlphaRuntimeStatistics()", span="10-10"];
m2_0 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.StatisticsAlphaManagerExtension(decimal, int)", file="Order.cs", label="Entry QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.StatisticsAlphaManagerExtension(decimal, int)", span="48-48"];
m2_1 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.StatisticsAlphaManagerExtension(decimal, int)", file="Order.cs", label="Statistics = new AlphaRuntimeStatistics()", span="50-50"];
m2_2 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.StatisticsAlphaManagerExtension(decimal, int)", file="Order.cs", label="_tradablePercentOfVolume = tradablePercentOfVolume", span="51-51"];
m2_3 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.StatisticsAlphaManagerExtension(decimal, int)", file="Order.cs", label="_smoothingFactor = 2.0 / (period + 1.0)", span="52-52"];
m2_4 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.StatisticsAlphaManagerExtension(decimal, int)", file="Order.cs", label="_rollingAverageIsReadyCount = period", span="55-55"];
m2_5 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.StatisticsAlphaManagerExtension(decimal, int)", file="Order.cs", label="Exit QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.StatisticsAlphaManagerExtension(decimal, int)", span="48-48"];
m2_39 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.Step(System.DateTime)", file="Order.cs", label="Entry QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.Step(System.DateTime)", span="139-139"];
m2_40 [cluster="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.Step(System.DateTime)", file="Order.cs", label="Exit QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension.Step(System.DateTime)", span="139-139"];
m2_37 [cluster="QuantConnect.Algorithm.Framework.Alphas.AlphaScore.GetScore(QuantConnect.Algorithm.Framework.Alphas.AlphaScoreType)", file="Order.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.AlphaScore.GetScore(QuantConnect.Algorithm.Framework.Alphas.AlphaScoreType)", span="112-112"];
m2_43 [file="Order.cs", label="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension", span=""];
m3_18 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var bar = (TradeBar) data", span="66-66"];
m3_19 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds, Scale(bar.Open), Scale(bar.High), Scale(bar.Low), Scale(bar.Close), bar.Volume);", span="67-67"];
m3_20 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Hour", span="69-69"];
m3_21 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Daily", span="70-70"];
m3_22 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var bigBar = (TradeBar) data", span="71-71"];
m3_25 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="SecurityType.Cfd", span="77-77"];
m3_26 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label=resolution, span="78-78"];
m3_23 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(longTime, Scale(bigBar.Open), Scale(bigBar.High), Scale(bigBar.Low), Scale(bigBar.Close), bigBar.Volume);", span="72-72"];
m3_24 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="SecurityType.Forex", span="76-76"];
m3_27 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Tick", span="80-80"];
m3_128 [cluster="QuantConnect.Util.LeanData.GenerateZipFilePath(string, QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.GenerateZipFilePath(string, QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", span="283-283"];
m3_129 [cluster="QuantConnect.Util.LeanData.GenerateZipFilePath(string, QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", color=green, community=0, file="QCAlgorithm.Trading.cs", label="return Path.Combine(dataDirectory, GenerateRelativeZipFilePath(symbol, date, resolution, tickType));", prediction=3, span="285-285"];
m3_130 [cluster="QuantConnect.Util.LeanData.GenerateZipFilePath(string, QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GenerateZipFilePath(string, QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", span="283-283"];
m3_34 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Hour", span="91-91"];
m3_35 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Daily", span="92-92"];
m3_36 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var bigBar = (QuoteBar) data", span="93-93"];
m3_37 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(longTime,\r\n                                ToNonScaledCsv(bigBar.Bid), bigBar.LastBidSize,\r\n                                ToNonScaledCsv(bigBar.Ask), bigBar.LastAskSize);", span="94-96"];
m3_110 [cluster="QuantConnect.Util.LeanData.ToNonScaledCsv(QuantConnect.Data.Market.IBar)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.ToNonScaledCsv(QuantConnect.Data.Market.IBar)", span="660-660"];
m3_302 [cluster="QuantConnect.Util.LeanData.ToNonScaledCsv(QuantConnect.Data.Market.IBar)", file="QCAlgorithm.Trading.cs", label="return ToCsv(bar.Open, bar.High, bar.Low, bar.Close);", span="667-667"];
m3_301 [cluster="QuantConnect.Util.LeanData.ToNonScaledCsv(QuantConnect.Data.Market.IBar)", file="QCAlgorithm.Trading.cs", label="return ToCsv(string.Empty, string.Empty, string.Empty, string.Empty);", span="664-664"];
m3_300 [cluster="QuantConnect.Util.LeanData.ToNonScaledCsv(QuantConnect.Data.Market.IBar)", file="QCAlgorithm.Trading.cs", label="bar == null", span="662-662"];
m3_303 [cluster="QuantConnect.Util.LeanData.ToNonScaledCsv(QuantConnect.Data.Market.IBar)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.ToNonScaledCsv(QuantConnect.Data.Market.IBar)", span="660-660"];
m3_7 [cluster="QuantConnect.Algorithm.CSharp.BasicTemplateFuturesConsolidationAlgorithm.Initialize()", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.CSharp.BasicTemplateFuturesConsolidationAlgorithm.Initialize()", span="31-31"];
m3_89 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", color=green, community=0, file="QCAlgorithm.Trading.cs", label="var openInterest = data as OpenInterest", prediction=4, span="207-207"];
m3_87 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="tradeBar != null", span="202-202"];
m3_90 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", color=green, community=0, file="QCAlgorithm.Trading.cs", label="openInterest != null", prediction=5, span="208-208"];
m3_91 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds, openInterest.Value);", span="210-210"];
m3_104 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="throw new NotImplementedException(''LeanData.GenerateLine has not yet been implemented for security type: '' + securityType + '' at resolution: '' + resolution);", span="242-242"];
m3_8 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", span="1070-1070"];
m3_9 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", span="1095-1095"];
m3_10 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", span="1019-1019"];
m3_12 [cluster="System.TimeSpan.FromDays(double)", file="QCAlgorithm.Trading.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m3_14 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(System.Func<System.DateTime, decimal>)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(System.Func<System.DateTime, decimal>)", span="986-986"];
m3_28 [cluster="System.Collections.Generic.HashSet<T>.Contains(T)", file="QCAlgorithm.Trading.cs", label="Entry System.Collections.Generic.HashSet<T>.Contains(T)", span="0-0"];
m3_32 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", span="169-169"];
m3_39 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="QuantConnect.Algorithm.CSharp.BasicTemplateFuturesConsolidationAlgorithm", span=""];
m3_41 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var tick = (Tick)data", span="104-104"];
m3_50 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var quoteBar = data as QuoteBar", span="124-124"];
m3_53 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var tradeBar = data as TradeBar", span="131-131"];
m3_56 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var openInterest = data as OpenInterest", span="137-137"];
m3_61 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var bigQuoteBar = data as QuoteBar", span="147-147"];
m3_64 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var bigTradeBar = data as TradeBar", span="154-154"];
m3_67 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var bigOpenInterest = data as OpenInterest", span="159-159"];
m3_70 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="throw new ArgumentOutOfRangeException(''resolution'', resolution, null);", span="167-167"];
m3_72 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label=resolution, span="171-171"];
m3_74 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var tick = (Tick)data", span="174-174"];
m3_83 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var quoteBar = data as QuoteBar", span="194-194"];
m3_86 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var tradeBar = data as TradeBar", span="201-201"];
m3_94 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var bigQuoteBar = data as QuoteBar", span="217-217"];
m3_97 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var bigTradeBar = data as TradeBar", span="224-224"];
m3_100 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var bigOpenInterest = data as OpenInterest", span="229-229"];
m3_103 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="throw new ArgumentOutOfRangeException(''resolution'', resolution, null);", span="237-237"];
m3_88 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds,\r\n                                             tradeBar.Open, tradeBar.High, tradeBar.Low, tradeBar.Close, tradeBar.Volume);", span="204-205"];
m3_46 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="tick.TickType == TickType.OpenInterest", span="115-115"];
m3_57 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="openInterest != null", span="138-138"];
m3_68 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="bigOpenInterest != null", span="160-160"];
m3_79 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="tick.TickType == TickType.OpenInterest", span="185-185"];
m3_101 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="bigOpenInterest != null", span="230-230"];
m3_15 [cluster="lambda expression", file="QCAlgorithm.Trading.cs", label="Entry lambda expression", span="40-40"];
m3_29 [cluster="System.Collections.Generic.HashSet<T>.Add(T)", file="QCAlgorithm.Trading.cs", label="Entry System.Collections.Generic.HashSet<T>.Add(T)", span="0-0"];
m3_33 [cluster="QuantConnect.Algorithm.QCAlgorithm.Log(string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Log(string)", span="1636-1636"];
m3_43 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds,\r\n                                    Scale(tick.LastPrice), tick.Quantity, tick.Exchange, tick.SaleCondition, tick.Suspicious ? ''1'' : ''0'');", span="107-108"];
m3_45 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds,\r\n                                    Scale(tick.BidPrice), tick.BidSize, Scale(tick.AskPrice), tick.AskSize, tick.Exchange, tick.Suspicious ? ''1'' : ''0'');", span="112-113"];
m3_47 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds, tick.Value);", span="117-117"];
m3_52 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds,\r\n                                    ToScaledCsv(quoteBar.Bid), quoteBar.LastBidSize,\r\n                                    ToScaledCsv(quoteBar.Ask), quoteBar.LastAskSize);", span="127-129"];
m3_55 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds,\r\n                                    Scale(tradeBar.Open), Scale(tradeBar.High), Scale(tradeBar.Low), Scale(tradeBar.Close), tradeBar.Volume);", span="134-135"];
m3_58 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds, openInterest.Value);", span="140-140"];
m3_69 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds, bigOpenInterest.Value);", span="162-162"];
m3_76 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds,\r\n                                             tick.LastPrice, tick.Quantity, tick.Exchange, tick.SaleCondition, tick.Suspicious ? ''1'': ''0'');", span="177-178"];
m3_78 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds,\r\n                                             tick.BidPrice, tick.BidSize, tick.AskPrice, tick.AskSize, tick.Exchange, tick.Suspicious ? ''1'' : ''0'');", span="182-183"];
m3_80 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds, tick.Value);", span="187-187"];
m3_85 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(milliseconds,\r\n                                    ToNonScaledCsv(quoteBar.Bid), quoteBar.LastBidSize,\r\n                                    ToNonScaledCsv(quoteBar.Ask), quoteBar.LastAskSize);", span="197-199"];
m3_63 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(longTime,\r\n                                    ToScaledCsv(bigQuoteBar.Bid), bigQuoteBar.LastBidSize,\r\n                                    ToScaledCsv(bigQuoteBar.Ask), bigQuoteBar.LastAskSize);", span="150-152"];
m3_66 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(longTime, ToScaledCsv(bigTradeBar), bigTradeBar.Volume);", span="157-157"];
m3_96 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(longTime,\r\n                                    ToNonScaledCsv(bigQuoteBar.Bid), bigQuoteBar.LastBidSize,\r\n                                    ToNonScaledCsv(bigQuoteBar.Ask), bigQuoteBar.LastAskSize);", span="220-222"];
m3_99 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(longTime, ToNonScaledCsv(bigTradeBar), bigTradeBar.Volume);", span="227-227"];
m3_102 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return ToCsv(longTime, bigOpenInterest.Value);", span="232-232"];
m3_11 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddFuture(string, QuantConnect.Resolution, string, bool, decimal)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddFuture(string, QuantConnect.Resolution, string, bool, decimal)", span="1404-1404"];
m3_38 [cluster="QuantConnect.Data.BaseData.ToString()", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Data.BaseData.ToString()", span="272-272"];
m3_71 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="SecurityType.Future", span="170-170"];
m3_13 [cluster="QuantConnect.Securities.Future.Future.SetFilter(System.TimeSpan, System.TimeSpan)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Securities.Future.Future.SetFilter(System.TimeSpan, System.TimeSpan)", span="146-146"];
m3_16 [cluster="lambda expression", file="QCAlgorithm.Trading.cs", label=0, span="40-40"];
m3_17 [cluster="lambda expression", file="QCAlgorithm.Trading.cs", label="Exit lambda expression", span="40-40"];
m3_30 [cluster="QuantConnect.Data.Consolidators.QuoteBarConsolidator.QuoteBarConsolidator(System.TimeSpan)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Data.Consolidators.QuoteBarConsolidator.QuoteBarConsolidator(System.TimeSpan)", span="29-29"];
m3_31 [cluster="System.TimeSpan.FromMinutes(double)", file="QCAlgorithm.Trading.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m3_40 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Tick", span="103-103"];
m3_48 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Second", span="121-121"];
m3_59 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Hour", span="144-144"];
m3_42 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="tick.TickType == TickType.Trade", span="105-105"];
m3_44 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="tick.TickType == TickType.Quote", span="110-110"];
m3_49 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Minute", span="122-122"];
m3_51 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="quoteBar != null", span="125-125"];
m3_54 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="tradeBar != null", span="132-132"];
m3_60 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Daily", span="145-145"];
m3_62 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="bigQuoteBar != null", span="148-148"];
m3_65 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="bigTradeBar != null", span="155-155"];
m3_73 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Tick", span="173-173"];
m3_81 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Second", span="191-191"];
m3_92 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Hour", span="214-214"];
m3_75 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="tick.TickType == TickType.Trade", span="175-175"];
m3_77 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="tick.TickType == TickType.Quote", span="180-180"];
m3_82 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Minute", span="192-192"];
m3_84 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="quoteBar != null", span="195-195"];
m3_93 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Resolution.Daily", span="215-215"];
m3_95 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="bigQuoteBar != null", span="218-218"];
m3_98 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="bigTradeBar != null", span="225-225"];
m3_105 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.SecurityType, QuantConnect.Resolution)", span="50-50"];
m3_111 [cluster="QuantConnect.Util.LeanData.ToScaledCsv(QuantConnect.Data.Market.IBar)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.ToScaledCsv(QuantConnect.Data.Market.IBar)", span="646-646"];
m3_298 [cluster="QuantConnect.Util.LeanData.ToScaledCsv(QuantConnect.Data.Market.IBar)", file="QCAlgorithm.Trading.cs", label="return ToCsv(Scale(bar.Open), Scale(bar.High), Scale(bar.Low), Scale(bar.Close));", span="653-653"];
m3_297 [cluster="QuantConnect.Util.LeanData.ToScaledCsv(QuantConnect.Data.Market.IBar)", file="QCAlgorithm.Trading.cs", label="return ToCsv(string.Empty, string.Empty, string.Empty, string.Empty);", span="650-650"];
m3_296 [cluster="QuantConnect.Util.LeanData.ToScaledCsv(QuantConnect.Data.Market.IBar)", file="QCAlgorithm.Trading.cs", label="bar == null", span="648-648"];
m3_299 [cluster="QuantConnect.Util.LeanData.ToScaledCsv(QuantConnect.Data.Market.IBar)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.ToScaledCsv(QuantConnect.Data.Market.IBar)", span="646-646"];
m3_108 [cluster="QuantConnect.Util.LeanData.Scale(decimal)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.Scale(decimal)", span="620-620"];
m3_284 [cluster="QuantConnect.Util.LeanData.Scale(decimal)", file="QCAlgorithm.Trading.cs", label="return (long)(value*10000);", span="622-622"];
m3_285 [cluster="QuantConnect.Util.LeanData.Scale(decimal)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.Scale(decimal)", span="620-620"];
m3_346 [cluster="string.GetExtension()", file="QCAlgorithm.Trading.cs", label="Entry string.GetExtension()", span="409-409"];
m3_357 [cluster="QuantConnect.Logging.Log.Error(string, params object[])", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Logging.Log.Error(string, params object[])", span="131-131"];
m3_343 [cluster="System.Enum.GetNames(System.Type)", file="QCAlgorithm.Trading.cs", label="Entry System.Enum.GetNames(System.Type)", span="0-0"];
m3_109 [cluster="QuantConnect.Util.LeanData.ToCsv(params object[])", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.ToCsv(params object[])", span="628-628"];
m3_286 [cluster="QuantConnect.Util.LeanData.ToCsv(params object[])", file="QCAlgorithm.Trading.cs", label="var i = 0", span="631-631"];
m3_287 [cluster="QuantConnect.Util.LeanData.ToCsv(params object[])", file="QCAlgorithm.Trading.cs", label="i < args.Length", span="631-631"];
m3_288 [cluster="QuantConnect.Util.LeanData.ToCsv(params object[])", file="QCAlgorithm.Trading.cs", label="var value = args[i]", span="633-633"];
m3_290 [cluster="QuantConnect.Util.LeanData.ToCsv(params object[])", file="QCAlgorithm.Trading.cs", label="args[i] = ((decimal) value).Normalize().ToString(CultureInfo.InvariantCulture)", span="636-636"];
m3_292 [cluster="QuantConnect.Util.LeanData.ToCsv(params object[])", file="QCAlgorithm.Trading.cs", label="return string.Join('','', args);", span="640-640"];
m3_291 [cluster="QuantConnect.Util.LeanData.ToCsv(params object[])", file="QCAlgorithm.Trading.cs", label="i++", span="631-631"];
m3_289 [cluster="QuantConnect.Util.LeanData.ToCsv(params object[])", file="QCAlgorithm.Trading.cs", label="value is decimal", span="634-634"];
m3_293 [cluster="QuantConnect.Util.LeanData.ToCsv(params object[])", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.ToCsv(params object[])", span="628-628"];
m3_0 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.Resolution, DateTimeZone, DateTimeZone)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.Resolution, DateTimeZone, DateTimeZone)", span="40-40"];
m3_1 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.Resolution, DateTimeZone, DateTimeZone)", file="QCAlgorithm.Trading.cs", label="var clone = data.Clone()", span="42-42"];
m3_2 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.Resolution, DateTimeZone, DateTimeZone)", file="QCAlgorithm.Trading.cs", label="clone.Time = data.Time.ConvertTo(exchangeTimeZone, dataTimeZone)", span="43-43"];
m3_3 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.Resolution, DateTimeZone, DateTimeZone)", file="QCAlgorithm.Trading.cs", label="return GenerateLine(clone, clone.Symbol.ID.SecurityType, resolution);", span="44-44"];
m3_4 [cluster="QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.Resolution, DateTimeZone, DateTimeZone)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GenerateLine(QuantConnect.Data.IBaseData, QuantConnect.Resolution, DateTimeZone, DateTimeZone)", span="40-40"];
m3_5 [cluster="QuantConnect.Data.IBaseData.Clone()", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Data.IBaseData.Clone()", span="99-99"];
m3_6 [cluster="System.DateTime.ConvertTo(DateTimeZone, DateTimeZone, bool)", file="QCAlgorithm.Trading.cs", label="Entry System.DateTime.ConvertTo(DateTimeZone, DateTimeZone, bool)", span="545-545"];
m3_311 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="type == typeof(ZipEntryName)", span="691-691"];
m3_304 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", span="677-677"];
m3_305 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="type == typeof(TradeBar)", span="679-679"];
m3_307 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="type == typeof(QuoteBar)", span="683-683"];
m3_309 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="type == typeof(OpenInterest)", span="687-687"];
m3_313 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="type == typeof(Tick)", span="695-695"];
m3_314 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="securityType == SecurityType.Forex || securityType == SecurityType.Cfd", span="697-697"];
m3_310 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="return TickType.OpenInterest;", span="689-689"];
m3_306 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="return TickType.Trade;", span="681-681"];
m3_308 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="return TickType.Quote;", span="685-685"];
m3_312 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="return TickType.Quote;", span="693-693"];
m3_316 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="return TickType.Trade;", span="703-703"];
m3_315 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="return TickType.Quote;", span="699-699"];
m3_317 [cluster="QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GetCommonTickTypeForCommonDataTypes(System.Type, QuantConnect.SecurityType)", span="677-677"];
m3_113 [cluster="System.NotImplementedException.NotImplementedException(string)", file="QCAlgorithm.Trading.cs", label="Entry System.NotImplementedException.NotImplementedException(string)", span="0-0"];
m3_294 [cluster="decimal.Normalize()", file="QCAlgorithm.Trading.cs", label="Entry decimal.Normalize()", span="233-233"];
m3_276 [cluster="string.Split(params char[])", file="QCAlgorithm.Trading.cs", label="Entry string.Split(params char[])", span="0-0"];
m3_166 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", span="476-476"];
m3_211 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="var tickTypeString = tickType.ToLower()", span="478-478"];
m3_212 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="var formattedDate = date.ToString(DateFormat.EightCharacter)", span="479-479"];
m3_213 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="var isHourOrDaily = resolution == Resolution.Hour || resolution == Resolution.Daily", span="480-480"];
m3_214 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="symbol.ID.SecurityType", span="482-482"];
m3_220 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Format(''{0}.zip'', \r\n                            symbol.Value.ToLower()\r\n                            );", span="490-492"];
m3_224 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Format(''{0}_{1}_{2}.zip'', \r\n                            symbol.Underlying.Value.ToLower(), // underlying\r\n                            tickTypeString,\r\n                            symbol.ID.OptionStyle.ToLower()\r\n                            );", span="503-507"];
m3_225 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Format(''{0}_{1}_{2}.zip'', \r\n                        formattedDate, \r\n                        tickTypeString,\r\n                        symbol.ID.OptionStyle.ToLower()\r\n                        );", span="510-514"];
m3_228 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Format(''{0}_{1}.zip'',\r\n                            symbol.ID.Symbol.ToLower(),\r\n                            tickTypeString);", span="519-521"];
m3_221 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Format(''{0}_{1}.zip'', \r\n                        formattedDate, \r\n                        tickTypeString\r\n                        );", span="495-498"];
m3_229 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Format(''{0}_{1}.zip'',\r\n                        formattedDate,\r\n                        tickTypeString);", span="524-526"];
m3_231 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="throw new ArgumentOutOfRangeException();", span="530-530"];
m3_219 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label=isHourOrDaily, span="488-488"];
m3_223 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label=isHourOrDaily, span="501-501"];
m3_227 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label=isHourOrDaily, span="517-517"];
m3_215 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Base", span="484-484"];
m3_222 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Option", span="500-500"];
m3_226 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Future", span="516-516"];
m3_230 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Commodity", span="528-528"];
m3_218 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Cfd", span="487-487"];
m3_216 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Equity", span="485-485"];
m3_217 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Forex", span="486-486"];
m3_232 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", span="476-476"];
m3_364 [cluster="lambda expression", file="QCAlgorithm.Trading.cs", label="Entry lambda expression", span="737-737"];
m3_362 [cluster="lambda expression", file="QCAlgorithm.Trading.cs", label="x == fileName.First()", span="728-728"];
m3_358 [cluster="lambda expression", file="QCAlgorithm.Trading.cs", label="Entry lambda expression", span="720-720"];
m3_365 [cluster="lambda expression", file="QCAlgorithm.Trading.cs", label="securityTypes.Contains(x.ToLower())", span="737-737"];
m3_361 [cluster="lambda expression", file="QCAlgorithm.Trading.cs", label="Entry lambda expression", span="728-728"];
m3_363 [cluster="lambda expression", file="QCAlgorithm.Trading.cs", label="Exit lambda expression", span="728-728"];
m3_359 [cluster="lambda expression", file="QCAlgorithm.Trading.cs", label="x.ToLower()", span="720-720"];
m3_360 [cluster="lambda expression", file="QCAlgorithm.Trading.cs", label="Exit lambda expression", span="720-720"];
m3_366 [cluster="lambda expression", file="QCAlgorithm.Trading.cs", label="Exit lambda expression", span="737-737"];
m3_112 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, object, string)", file="QCAlgorithm.Trading.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, object, string)", span="0-0"];
m3_354 [cluster="string.Substring(int, int)", file="QCAlgorithm.Trading.cs", label="Entry string.Substring(int, int)", span="0-0"];
m3_281 [cluster="QuantConnect.Securities.Future.FuturesExpiryFunctions.FuturesExpiryFunction(string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Securities.Future.FuturesExpiryFunctions.FuturesExpiryFunction(string)", span="29-29"];
m3_163 [cluster="System.IO.Path.Combine(params string[])", file="QCAlgorithm.Trading.cs", label="Entry System.IO.Path.Combine(params string[])", span="0-0"];
m3_318 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", span="713-713"];
m3_319 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="symbol = null", span="715-715"];
m3_324 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="fileName = fileName.Replace(fileName.GetExtension(), '''')", span="725-725"];
m3_321 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="date = default(DateTime)", span="717-717"];
m3_331 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="resolution = (Resolution)Enum.Parse(typeof(Resolution), info[startIndex + 2], true)", span="742-742"];
m3_336 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="date = DateTime.ParseExact(info[startIndex + 4].Substring(0, 8), DateFormat.EightCharacter, null)", span="753-753"];
m3_337 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="symbol = Symbol.Create(ticker, securityType, market)", span="756-756"];
m3_341 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return true;", span="764-764"];
m3_340 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return false;", span="761-761"];
m3_320 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="resolution = Resolution.Daily", span="716-716"];
m3_323 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var securityTypes = Enum.GetNames(typeof(SecurityType)).Select(x => x.ToLower()).ToList()", span="720-720"];
m3_325 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="fileName.First() == '.' || pathSeparators.Any(x => x == fileName.First())", span="728-728"];
m3_326 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="fileName = fileName.Remove(0, 1)", span="730-730"];
m3_327 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var info = fileName.Split(pathSeparators, StringSplitOptions.RemoveEmptyEntries).ToList()", span="734-734"];
m3_339 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Log.Error(''LeanData.TryParsePath(): Error encountered while parsing the path {0}. Error: {1}'', fileName, ex.GetBaseException())", span="760-760"];
m3_322 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var pathSeparators = new[] { '/', '\\'}", span="719-719"];
m3_328 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var startIndex = info.FindIndex(x => securityTypes.Contains(x.ToLower()))", span="737-737"];
m3_330 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var ticker = info[startIndex + 3]", span="741-741"];
m3_332 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var securityType = (SecurityType)Enum.Parse(typeof(SecurityType), info[startIndex], true)", span="743-743"];
m3_335 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="resolution < Resolution.Hour", span="751-751"];
m3_329 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var market = info[startIndex + 1]", span="740-740"];
m3_338 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label=Exception, span="758-758"];
m3_334 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="throw new ArgumentException(''LeanData.TryParsePath(): Options and futures are not supported by this method.'');", span="747-747"];
m3_333 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="securityType == SecurityType.Option || securityType == SecurityType.Future", span="745-745"];
m3_342 [cluster="QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.TryParsePath(string, out QuantConnect.Symbol, out System.DateTime, out QuantConnect.Resolution)", span="713-713"];
m3_107 [cluster="System.DateTime.ToString(string)", file="QCAlgorithm.Trading.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m3_201 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.GenerateZipEntryName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", span="450-450"];
m3_203 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="throw new NotImplementedException(''This method only implements base, equity, forex and cfd security type.'');", span="454-454"];
m3_209 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Format(''{0}_{1}_{2}_{3}.csv'', date.ToString(DateFormat.EightCharacter), symbol, resolution.ToLower(), dataType.ToLower());", span="470-470"];
m3_202 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="securityType != SecurityType.Base && securityType != SecurityType.Equity && securityType != SecurityType.Forex && securityType != SecurityType.Cfd", span="452-452"];
m3_210 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GenerateZipEntryName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", span="450-450"];
m3_204 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="symbol = symbol.ToLower()", span="457-457"];
m3_207 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="securityType == SecurityType.Forex || securityType == SecurityType.Cfd", span="465-465"];
m3_208 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="dataType = TickType.Quote", span="467-467"];
m3_206 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return symbol + ''.csv'';", span="461-461"];
m3_205 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="resolution == Resolution.Hour || resolution == Resolution.Daily", span="459-459"];
m3_355 [cluster="QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", span="45-45"];
m3_156 [cluster="System.Enum.ToLower()", file="QCAlgorithm.Trading.cs", label="Entry System.Enum.ToLower()", span="826-826"];
m3_345 [cluster="Unk.ToList", file="QCAlgorithm.Trading.cs", label="Entry Unk.ToList", span=""];
m3_157 [cluster="string.ToLower()", file="QCAlgorithm.Trading.cs", label="Entry string.ToLower()", span="0-0"];
m3_278 [cluster="decimal.Parse(string)", file="QCAlgorithm.Trading.cs", label="Entry decimal.Parse(string)", span="0-0"];
m3_133 [cluster="QuantConnect.Util.LeanData.GenerateZipFilePath(string, string, QuantConnect.SecurityType, string, System.DateTime, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.GenerateZipFilePath(string, string, QuantConnect.SecurityType, string, System.DateTime, QuantConnect.Resolution)", span="291-291"];
m3_134 [cluster="QuantConnect.Util.LeanData.GenerateZipFilePath(string, string, QuantConnect.SecurityType, string, System.DateTime, QuantConnect.Resolution)", color=green, community=0, file="QCAlgorithm.Trading.cs", label="return Path.Combine(dataDirectory, GenerateRelativeZipFilePath(symbol, securityType, market, date, resolution));", prediction=6, span="293-293"];
m3_135 [cluster="QuantConnect.Util.LeanData.GenerateZipFilePath(string, string, QuantConnect.SecurityType, string, System.DateTime, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GenerateZipFilePath(string, string, QuantConnect.SecurityType, string, System.DateTime, QuantConnect.Resolution)", span="291-291"];
m3_353 [cluster="System.ArgumentException.ArgumentException(string)", file="QCAlgorithm.Trading.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m3_279 [cluster="System.DateTime.ParseExact(string, string, System.IFormatProvider)", file="QCAlgorithm.Trading.cs", label="Entry System.DateTime.ParseExact(string, string, System.IFormatProvider)", span="0-0"];
m3_295 [cluster="decimal.ToString(System.IFormatProvider)", file="QCAlgorithm.Trading.cs", label="Entry decimal.ToString(System.IFormatProvider)", span="0-0"];
m3_356 [cluster="System.Exception.GetBaseException()", file="QCAlgorithm.Trading.cs", label="Entry System.Exception.GetBaseException()", span="0-0"];
m3_172 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType?)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.GenerateZipFileName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType?)", span="537-537"];
m3_235 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType?)", file="QCAlgorithm.Trading.cs", label="resolution == Resolution.Hour || resolution == Resolution.Daily", span="539-539"];
m3_236 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType?)", file="QCAlgorithm.Trading.cs", label="return symbol.ToLower() + ''.zip'';", span="541-541"];
m3_237 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType?)", file="QCAlgorithm.Trading.cs", label="var zipFileName = date.ToString(DateFormat.EightCharacter)", span="544-544"];
m3_238 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType?)", file="QCAlgorithm.Trading.cs", label="tickType = tickType ?? (securityType == SecurityType.Forex || securityType == SecurityType.Cfd ? TickType.Quote : TickType.Trade)", span="545-545"];
m3_240 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType?)", file="QCAlgorithm.Trading.cs", label="return zipFileName + suffix;", span="547-547"];
m3_239 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType?)", file="QCAlgorithm.Trading.cs", label="var suffix = string.Format(''_{0}.zip'', tickType.Value.ToLower())", span="546-546"];
m3_241 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType?)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GenerateZipFileName(string, QuantConnect.SecurityType, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType?)", span="537-537"];
m3_275 [cluster="string.Replace(string, string)", file="QCAlgorithm.Trading.cs", label="Entry string.Replace(string, string)", span="0-0"];
m3_351 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="QCAlgorithm.Trading.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m3_198 [cluster="string.Format(string, object)", file="QCAlgorithm.Trading.cs", label="Entry string.Format(string, object)", span="0-0"];
m3_249 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var parts = zipEntryName.Replace(''.csv'', string.Empty).Split('_')", span="574-574"];
m3_273 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="throw new NotImplementedException(''ReadSymbolFromZipEntry is not implemented for '' + symbol.ID.SecurityType + '' '' + resolution);", span="613-613"];
m3_247 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", span="571-571"];
m3_250 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="symbol.ID.SecurityType", span="575-575"];
m3_274 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", span="571-571"];
m3_248 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var isHourlyOrDaily = resolution == Resolution.Hour || resolution == Resolution.Daily", span="573-573"];
m3_257 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="return Symbol.CreateOption(symbol.Underlying, Market.USA, style, right, strike, expiry);", span="584-584"];
m3_262 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="return Symbol.CreateOption(symbol.Underlying, Market.USA, style, right, strike, expiry);", span="592-592"];
m3_251 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="SecurityType.Option", span="577-577"];
m3_263 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="SecurityType.Future", span="596-596"];
m3_268 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="return Symbol.CreateFuture(parts[0], Market.USA, futureExpiry);", span="602-602"];
m3_272 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="return Symbol.CreateFuture(parts[1], Market.USA, futureExpiry);", span="609-609"];
m3_253 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var style = (OptionStyle)Enum.Parse(typeof(OptionStyle), parts[2], true)", span="580-580"];
m3_254 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var right = (OptionRight)Enum.Parse(typeof(OptionRight), parts[3], true)", span="581-581"];
m3_258 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var style = (OptionStyle)Enum.Parse(typeof(OptionStyle), parts[4], true)", span="588-588"];
m3_259 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var right = (OptionRight)Enum.Parse(typeof(OptionRight), parts[5], true)", span="589-589"];
m3_256 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var expiry = DateTime.ParseExact(parts[5], DateFormat.EightCharacter, null)", span="583-583"];
m3_261 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var expiry = DateTime.ParseExact(parts[7], DateFormat.EightCharacter, null)", span="591-591"];
m3_265 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var expiryYearMonth = DateTime.ParseExact(parts[2], DateFormat.YearMonth, null)", span="599-599"];
m3_269 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var expiryYearMonth = DateTime.ParseExact(parts[4], DateFormat.YearMonth, null)", span="606-606"];
m3_255 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var strike = decimal.Parse(parts[4]) / 10000m", span="582-582"];
m3_260 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var strike = decimal.Parse(parts[6]) / 10000m", span="590-590"];
m3_266 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1])", span="600-600"];
m3_270 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1])", span="607-607"];
m3_252 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label=isHourlyOrDaily, span="578-578"];
m3_264 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label=isHourlyOrDaily, span="597-597"];
m3_267 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var futureExpiry = futureExpiryFunc(expiryYearMonth)", span="601-601"];
m3_271 [cluster="QuantConnect.Util.LeanData.ReadSymbolFromZipEntry(QuantConnect.Symbol, QuantConnect.Resolution, string)", file="QCAlgorithm.Trading.cs", label="var futureExpiry = futureExpiryFunc(expiryYearMonth)", span="608-608"];
m3_283 [cluster="QuantConnect.Symbol.CreateFuture(string, string, System.DateTime, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Symbol.CreateFuture(string, string, System.DateTime, string)", span="143-143"];
m3_348 [cluster="Unk.Any", file="QCAlgorithm.Trading.cs", label="Entry Unk.Any", span=""];
m3_200 [cluster="string.Join(string, params string[])", file="QCAlgorithm.Trading.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m3_132 [cluster="System.IO.Path.Combine(string, string)", file="QCAlgorithm.Trading.cs", label="Entry System.IO.Path.Combine(string, string)", span="0-0"];
m3_123 [cluster="QuantConnect.Util.LeanData.IsCommonLeanDataType(System.Type)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.IsCommonLeanDataType(System.Type)", span="267-267"];
m3_126 [cluster="QuantConnect.Util.LeanData.IsCommonLeanDataType(System.Type)", color=green, community=0, file="QCAlgorithm.Trading.cs", label="return false;", prediction=7, span="276-276"];
m3_124 [cluster="QuantConnect.Util.LeanData.IsCommonLeanDataType(System.Type)", file="QCAlgorithm.Trading.cs", label="baseDataType == typeof(TradeBar) ||\r\n                baseDataType == typeof(QuoteBar) ||\r\n                baseDataType == typeof(OpenInterest)", span="269-271"];
m3_125 [cluster="QuantConnect.Util.LeanData.IsCommonLeanDataType(System.Type)", file="QCAlgorithm.Trading.cs", label="return true;", span="273-273"];
m3_127 [cluster="QuantConnect.Util.LeanData.IsCommonLeanDataType(System.Type)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.IsCommonLeanDataType(System.Type)", span="267-267"];
m3_160 [cluster="QuantConnect.Util.LeanData.GenerateRelativeFactorFilePath(QuantConnect.Symbol)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.GenerateRelativeFactorFilePath(QuantConnect.Symbol)", span="330-330"];
m3_161 [cluster="QuantConnect.Util.LeanData.GenerateRelativeFactorFilePath(QuantConnect.Symbol)", file="QCAlgorithm.Trading.cs", label="return Path.Combine(Globals.DataFolder,\r\n                                        ''equity'',\r\n                                        symbol.ID.Market,\r\n                                        ''factor_files'',\r\n                                        symbol.Value.ToLower() + ''.csv'');", span="332-336"];
m3_162 [cluster="QuantConnect.Util.LeanData.GenerateRelativeFactorFilePath(QuantConnect.Symbol)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GenerateRelativeFactorFilePath(QuantConnect.Symbol)", span="330-330"];
m3_350 [cluster="string.Split(char[], System.StringSplitOptions)", file="QCAlgorithm.Trading.cs", label="Entry string.Split(char[], System.StringSplitOptions)", span="0-0"];
m3_136 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(string, QuantConnect.SecurityType, string, System.DateTime, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(string, QuantConnect.SecurityType, string, System.DateTime, QuantConnect.Resolution)", span="350-350"];
m3_169 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(string, QuantConnect.SecurityType, string, System.DateTime, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="directory = Path.Combine(directory, symbol.ToLower())", span="355-355"];
m3_170 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(string, QuantConnect.SecurityType, string, System.DateTime, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return Path.Combine(directory, GenerateZipFileName(symbol, securityType, date, resolution));", span="358-358"];
m3_167 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(string, QuantConnect.SecurityType, string, System.DateTime, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var directory = Path.Combine(securityType.ToLower(), market.ToLower(), resolution.ToLower())", span="352-352"];
m3_168 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(string, QuantConnect.SecurityType, string, System.DateTime, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="resolution != Resolution.Daily && resolution != Resolution.Hour", span="353-353"];
m3_171 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(string, QuantConnect.SecurityType, string, System.DateTime, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(string, QuantConnect.SecurityType, string, System.DateTime, QuantConnect.Resolution)", span="350-350"];
m3_197 [cluster="string.Format(string, params object[])", file="QCAlgorithm.Trading.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m3_234 [cluster="string.Format(string, object, object, object)", file="QCAlgorithm.Trading.cs", label="Entry string.Format(string, object, object, object)", span="0-0"];
m3_349 [cluster="string.Remove(int, int)", file="QCAlgorithm.Trading.cs", label="Entry string.Remove(int, int)", span="0-0"];
m3_159 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException()", file="QCAlgorithm.Trading.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException()", span="0-0"];
m3_282 [cluster="System.Func<T, TResult>.Invoke(T)", file="QCAlgorithm.Trading.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m3_131 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", span="342-342"];
m3_164 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return Path.Combine(GenerateRelativeZipFileDirectory(symbol, resolution), GenerateZipFileName(symbol, date, resolution, tickType));", span="344-344"];
m3_165 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", span="342-342"];
m3_233 [cluster="string.Format(string, object, object)", file="QCAlgorithm.Trading.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m3_196 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", span="364-364"];
m3_174 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="var formattedDate = date.ToString(DateFormat.EightCharacter)", span="366-366"];
m3_188 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Join(''_'',\r\n                            symbol.Underlying.Value.ToLower(), // underlying\r\n                            tickType.ToLower(),\r\n                            symbol.ID.OptionStyle.ToLower(),\r\n                            symbol.ID.OptionRight.ToLower(),\r\n                            Scale(symbol.ID.StrikePrice),\r\n                            symbol.ID.Date.ToString(DateFormat.EightCharacter)\r\n                            ) + ''.csv'';", span="402-409"];
m3_189 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Join(''_'',\r\n                        formattedDate,\r\n                        symbol.Underlying.Value.ToLower(), // underlying\r\n                        resolution.ToLower(),\r\n                        tickType.ToLower(),\r\n                        symbol.ID.OptionStyle.ToLower(),\r\n                        symbol.ID.OptionRight.ToLower(),\r\n                        Scale(symbol.ID.StrikePrice),\r\n                        symbol.ID.Date.ToString(DateFormat.EightCharacter)\r\n                        ) + ''.csv'';", span="412-421"];
m3_192 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Join(''_'',\r\n                            symbol.ID.Symbol.ToLower(),\r\n                            tickType.ToLower(),\r\n                            symbol.ID.Date.ToString(DateFormat.YearMonth)\r\n                            ) + ''.csv'';", span="426-430"];
m3_193 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Join(''_'',\r\n                        formattedDate,\r\n                        symbol.ID.Symbol.ToLower(),\r\n                        resolution.ToLower(),\r\n                        tickType.ToLower(),\r\n                        symbol.ID.Date.ToString(DateFormat.YearMonth)\r\n                        ) + ''.csv'';", span="433-439"];
m3_182 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Format(''{0}_{1}_{2}_{3}.csv'',\r\n                            formattedDate,\r\n                            symbol.Value.ToLower(),\r\n                            tickType,\r\n                            resolution\r\n                        );", span="377-382"];
m3_184 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Format(''{0}.csv'', \r\n                            symbol.Value.ToLower()\r\n                            );", span="387-389"];
m3_185 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="return string.Format(''{0}_{1}_{2}_{3}.csv'', \r\n                        formattedDate, \r\n                        symbol.Value.ToLower(), \r\n                        resolution.ToLower(), \r\n                        tickType.ToLower()\r\n                        );", span="392-397"];
m3_173 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", span="364-364"];
m3_175 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="var isHourOrDaily = resolution == Resolution.Hour || resolution == Resolution.Daily", span="367-367"];
m3_187 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label=isHourOrDaily, span="400-400"];
m3_191 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label=isHourOrDaily, span="424-424"];
m3_181 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="resolution == Resolution.Tick && symbol.SecurityType == SecurityType.Equity", span="375-375"];
m3_183 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label=isHourOrDaily, span="385-385"];
m3_176 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="symbol.ID.SecurityType", span="369-369"];
m3_186 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Option", span="399-399"];
m3_195 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="throw new ArgumentOutOfRangeException();", span="443-443"];
m3_190 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Future", span="423-423"];
m3_180 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Cfd", span="374-374"];
m3_177 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Base", span="371-371"];
m3_194 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Commodity", span="441-441"];
m3_179 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Forex", span="373-373"];
m3_178 [cluster="QuantConnect.Util.LeanData.GenerateZipEntryName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="QCAlgorithm.Trading.cs", label="SecurityType.Equity", span="372-372"];
m3_137 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", span="299-299"];
m3_148 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return !isHourOrDaily ? Path.Combine(directory, symbol.Value.ToLower()) : directory;", span="312-312"];
m3_150 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return !isHourOrDaily ? Path.Combine(directory, symbol.Underlying.Value.ToLower()) : directory;", span="316-316"];
m3_152 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="return !isHourOrDaily ? Path.Combine(directory, symbol.ID.Symbol.ToLower()) : directory;", span="319-319"];
m3_138 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var isHourOrDaily = resolution == Resolution.Hour || resolution == Resolution.Daily", span="301-301"];
m3_139 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var securityType = symbol.ID.SecurityType.ToLower()", span="302-302"];
m3_140 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var market = symbol.ID.Market.ToLower()", span="303-303"];
m3_141 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var res = resolution.ToLower()", span="304-304"];
m3_143 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="symbol.ID.SecurityType", span="306-306"];
m3_142 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="var directory = Path.Combine(securityType, market, res)", span="305-305"];
m3_147 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="SecurityType.Cfd", span="311-311"];
m3_149 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="SecurityType.Option", span="314-314"];
m3_151 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="SecurityType.Future", span="318-318"];
m3_154 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="throw new ArgumentOutOfRangeException();", span="323-323"];
m3_144 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="SecurityType.Base", span="308-308"];
m3_153 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="SecurityType.Commodity", span="321-321"];
m3_146 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="SecurityType.Forex", span="310-310"];
m3_145 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="SecurityType.Equity", span="309-309"];
m3_155 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GenerateRelativeZipFileDirectory(QuantConnect.Symbol, QuantConnect.Resolution)", span="299-299"];
m3_352 [cluster="System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)", file="QCAlgorithm.Trading.cs", label="Entry System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)", span="0-0"];
m3_367 [cluster="Unk.Contains", file="QCAlgorithm.Trading.cs", label="Entry Unk.Contains", span=""];
m3_242 [cluster="QuantConnect.Util.LeanData.GetCommonTickType(QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Util.LeanData.GetCommonTickType(QuantConnect.SecurityType)", span="555-555"];
m3_245 [cluster="QuantConnect.Util.LeanData.GetCommonTickType(QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="return TickType.Trade;", span="561-561"];
m3_243 [cluster="QuantConnect.Util.LeanData.GetCommonTickType(QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="securityType == SecurityType.Forex || securityType == SecurityType.Cfd", span="557-557"];
m3_244 [cluster="QuantConnect.Util.LeanData.GetCommonTickType(QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="return TickType.Quote;", span="559-559"];
m3_246 [cluster="QuantConnect.Util.LeanData.GetCommonTickType(QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Util.LeanData.GetCommonTickType(QuantConnect.SecurityType)", span="555-555"];
m3_277 [cluster="System.Enum.Parse(System.Type, string, bool)", file="QCAlgorithm.Trading.cs", label="Entry System.Enum.Parse(System.Type, string, bool)", span="0-0"];
m3_347 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="QCAlgorithm.Trading.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m3_106 [cluster="double.ToString(System.IFormatProvider)", file="QCAlgorithm.Trading.cs", label="Entry double.ToString(System.IFormatProvider)", span="0-0"];
m3_280 [cluster="QuantConnect.Symbol.CreateOption(QuantConnect.Symbol, string, QuantConnect.OptionStyle, QuantConnect.OptionRight, decimal, System.DateTime, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Symbol.CreateOption(QuantConnect.Symbol, string, QuantConnect.OptionStyle, QuantConnect.OptionRight, decimal, System.DateTime, string)", span="115-115"];
m3_344 [cluster="Unk.Select", file="QCAlgorithm.Trading.cs", label="Entry Unk.Select", span=""];
m3_199 [cluster="string.Join(string, params object[])", file="QCAlgorithm.Trading.cs", label="Entry string.Join(string, params object[])", span="0-0"];
m3_158 [cluster="System.IO.Path.Combine(string, string, string)", file="QCAlgorithm.Trading.cs", label="Entry System.IO.Path.Combine(string, string, string)", span="0-0"];
m3_368 [file="QCAlgorithm.Trading.cs", label=string, span=""];
m3_369 [file="QCAlgorithm.Trading.cs", label=securityTypes, span=""];
m4_41 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.TimeSpan, QuantConnect.Resolution?)", span="168-168"];
m4_42 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History<T>(symbols, Time - span, Time, resolution).Memoize();", span="171-171"];
m4_43 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.TimeSpan, QuantConnect.Resolution?)", span="168-168"];
m4_224 [cluster="QuantConnect.Data.HistoryRequest.HistoryRequest(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SecurityExchangeHours, System.DateTime, System.DateTime)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Data.HistoryRequest.HistoryRequest(QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SecurityExchangeHours, System.DateTime, System.DateTime)", span="151-151"];
m4_50 [cluster="Unk.Where", file="SecurityTransactionManager.cs", label="Entry Unk.Where", span=""];
m4_0 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmup(System.TimeSpan)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetWarmup(System.TimeSpan)", span="51-51"];
m4_1 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmup(System.TimeSpan)", file="SecurityTransactionManager.cs", label="_warmupBarCount = null", span="53-53"];
m4_2 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmup(System.TimeSpan)", file="SecurityTransactionManager.cs", label="_warmupTimeSpan = timeSpan", span="54-54"];
m4_3 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmup(System.TimeSpan)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetWarmup(System.TimeSpan)", span="51-51"];
m4_174 [cluster="QuantConnect.Data.HistoryRequest.HistoryRequest()", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Data.HistoryRequest.HistoryRequest()", span="84-84"];
m4_227 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderByDescending<TSource, TKey>(System.Func<TSource, TKey>)", file="SecurityTransactionManager.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderByDescending<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
m4_175 [cluster="System.Collections.Generic.List<T>.List()", file="SecurityTransactionManager.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m4_11 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(int)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(int)", span="86-86"];
m4_12 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(int)", file="SecurityTransactionManager.cs", label="SetWarmup(barCount)", span="88-88"];
m4_13 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(int)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(int)", span="86-86"];
m4_33 [cluster="System.Collections.Generic.IEnumerable<T>.Memoize<T>()", file="SecurityTransactionManager.cs", label="Entry System.Collections.Generic.IEnumerable<T>.Memoize<T>()", span="218-218"];
m4_124 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Data.HistoryRequest)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Data.HistoryRequest)", span="393-393"];
m4_153 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Data.HistoryRequest)", file="SecurityTransactionManager.cs", label="return History(new[] {request}).Memoize();", span="395-395"];
m4_154 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Data.HistoryRequest)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Data.HistoryRequest)", span="393-393"];
m4_171 [cluster="QuantConnect.Symbol.IsCanonical()", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Symbol.IsCanonical()", span="163-163"];
m4_229 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Entry lambda expression", span="545-545"];
m4_59 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Resolution? res = resolution ?? security.Resolution", span="193-193"];
m4_60 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="var start = GetStartTimeAlgoTz(x, periods, resolution).ConvertToUtc(TimeZone)", span="194-194"];
m4_61 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="return CreateHistoryRequest(security, config, start, UtcTime.RoundDown(res.Value.ToTimeSpan()), resolution);", span="195-195"];
m4_54 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Entry lambda expression", span="187-196"];
m4_69 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Entry lambda expression", span="198-198"];
m4_55 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="var security = Securities[x]", span="189-189"];
m4_56 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="var config = GetMatchingSubscription(security, typeof(T))", span="190-190"];
m4_57 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="config == null", span="191-191"];
m4_58 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="return null;", span="191-191"];
m4_62 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Exit lambda expression", span="187-196"];
m4_70 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="x != null", span="198-198"];
m4_71 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Exit lambda expression", span="198-198"];
m4_80 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="return CreateHistoryRequest(security, config, start, end, resolution);", span="219-219"];
m4_75 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Entry lambda expression", span="213-220"];
m4_82 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Entry lambda expression", span="222-222"];
m4_76 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="var security = Securities[x]", span="215-215"];
m4_77 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="var config = GetMatchingSubscription(security, typeof(T))", span="216-216"];
m4_78 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="config == null", span="217-217"];
m4_79 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="return null;", span="217-217"];
m4_81 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Exit lambda expression", span="213-220"];
m4_83 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="x != null", span="222-222"];
m4_84 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Exit lambda expression", span="222-222"];
m4_112 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Entry lambda expression", span="273-273"];
m4_113 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="x.Type.Name", span="273-273"];
m4_114 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Exit lambda expression", span="273-273"];
m4_126 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Entry lambda expression", span="298-298"];
m4_127 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="x.Type.Name", span="298-298"];
m4_128 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Exit lambda expression", span="298-298"];
m4_203 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="var request = CreateHistoryRequest(security, config, startAlgoTz, endAlgoTz, resolution)", span="505-505"];
m4_204 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Resolution? res = resolution ?? security.Resolution", span="508-508"];
m4_205 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="fillForward.HasValue", span="509-509"];
m4_206 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="request.FillForwardResolution = fillForward.Value ? res : null", span="509-509"];
m4_207 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="extendedMarket.HasValue", span="510-510"];
m4_208 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="request.IncludeExtendedMarketHours = extendedMarket.Value", span="510-510"];
m4_200 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Entry lambda expression", span="501-512"];
m4_201 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="var security = Securities[x]", span="503-503"];
m4_202 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="var config = GetMatchingSubscription(security, typeof (BaseData))", span="504-504"];
m4_209 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="return request;", span="511-511"];
m4_210 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Exit lambda expression", span="501-512"];
m4_215 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Resolution? res = resolution ?? security.Resolution", span="523-523"];
m4_216 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="var start = GetStartTimeAlgoTz(x, periods, res)", span="524-524"];
m4_218 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="return CreateHistoryRequest(security, config, start, Time.RoundDown(res.Value.ToTimeSpan()), resolution);", span="526-526"];
m4_213 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Entry lambda expression", span="520-527"];
m4_214 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="var security = Securities[x]", span="522-522"];
m4_217 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="var config = GetMatchingSubscription(security, typeof(BaseData))", span="525-525"];
m4_219 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Exit lambda expression", span="520-527"];
m4_230 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="s.Resolution", span="545-545"];
m4_231 [cluster="lambda expression", file="SecurityTransactionManager.cs", label="Exit lambda expression", span="545-545"];
m4_51 [cluster="Unk.History", file="SecurityTransactionManager.cs", label="Entry Unk.History", span=""];
m4_63 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetMatchingSubscription(QuantConnect.Securities.Security, System.Type)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.GetMatchingSubscription(QuantConnect.Securities.Security, System.Type)", span="542-542"];
m4_225 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetMatchingSubscription(QuantConnect.Securities.Security, System.Type)", file="SecurityTransactionManager.cs", label="return (from sub in security.Subscriptions.OrderByDescending(s => s.Resolution)\r\n                    where type.IsAssignableFrom(sub.Type)\r\n                    select sub).FirstOrDefault();", span="545-547"];
m4_226 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetMatchingSubscription(QuantConnect.Securities.Security, System.Type)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.GetMatchingSubscription(QuantConnect.Securities.Security, System.Type)", span="542-542"];
m4_111 [cluster="QuantConnect.Symbol.ToString()", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Symbol.ToString()", span="348-348"];
m4_64 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTz(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTz(QuantConnect.Symbol, int, QuantConnect.Resolution?)", span="378-378"];
m4_145 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTz(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var security = Securities[symbol]", span="380-380"];
m4_146 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTz(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var timeSpan = (resolution ?? security.Resolution).ToTimeSpan()", span="381-381"];
m4_148 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTz(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var localStartTime = QuantConnect.Time.GetStartTimeForTradeBars(security.Exchange.Hours, UtcTime.ConvertFromUtc(security.Exchange.TimeZone), timeSpan, periods, security.IsExtendedMarketHours)", span="384-384"];
m4_149 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTz(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return localStartTime.ConvertTo(security.Exchange.TimeZone, TimeZone);", span="385-385"];
m4_147 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTz(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="timeSpan = timeSpan < QuantConnect.Time.OneSecond ? QuantConnect.Time.OneSecond : timeSpan", span="383-383"];
m4_150 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTz(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTz(QuantConnect.Symbol, int, QuantConnect.Resolution?)", span="378-378"];
m4_95 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", span="263-263"];
m4_96 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="resolution == Resolution.Tick", span="266-266"];
m4_98 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var security = Securities[symbol]", span="267-267"];
m4_103 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="throw new ArgumentException(''The specified security is not of the requested type. Symbol: '' + symbol.ToString() + '' Requested Type: '' + requestedType.Name + '' Actual Type: '' + actualType);", span="274-274"];
m4_104 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var start = GetStartTimeAlgoTz(symbol, periods, resolution)", span="277-277"];
m4_105 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History<T>(symbol, start, Time.RoundDown((resolution ?? security.Resolution).ToTimeSpan()), resolution).Memoize();", span="278-278"];
m4_97 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="throw new ArgumentException(''History functions that accept a 'periods' parameter can not be used with Resolution.Tick'');", span="266-266"];
m4_99 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var requestedType = typeof(T)", span="269-269"];
m4_100 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var config = GetMatchingSubscription(security, requestedType)", span="270-270"];
m4_102 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var actualType = security.Subscriptions.Select(x => x.Type.Name).DefaultIfEmpty(''[None]'').FirstOrDefault()", span="273-273"];
m4_101 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="config == null", span="271-271"];
m4_106 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, int, QuantConnect.Resolution?)", span="263-263"];
m4_172 [cluster="System.Math.Max(int, int)", file="SecurityTransactionManager.cs", label="Entry System.Math.Max(int, int)", span="0-0"];
m4_14 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetFinishedWarmingUp()", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetFinishedWarmingUp()", span="94-94"];
m4_15 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetFinishedWarmingUp()", file="SecurityTransactionManager.cs", label="IsWarmingUp = false", span="96-96"];
m4_16 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetFinishedWarmingUp()", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetFinishedWarmingUp()", span="94-94"];
m4_7 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmup(int)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetWarmup(int)", span="73-73"];
m4_8 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmup(int)", file="SecurityTransactionManager.cs", label="_warmupTimeSpan = null", span="75-75"];
m4_9 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmup(int)", file="SecurityTransactionManager.cs", label="_warmupBarCount = barCount", span="76-76"];
m4_10 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmup(int)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetWarmup(int)", span="73-73"];
m4_94 [cluster="System.Collections.Generic.IEnumerable<QuantConnect.Data.Slice>.Get(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="Entry System.Collections.Generic.IEnumerable<QuantConnect.Data.Slice>.Get(QuantConnect.Symbol)", span="55-55"];
m4_34 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History(int, QuantConnect.Resolution?)", span="140-140"];
m4_35 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History(Securities.Keys, periods, resolution).Memoize();", span="142-142"];
m4_36 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History(int, QuantConnect.Resolution?)", span="140-140"];
m4_67 [cluster="System.DateTime.RoundDown(System.TimeSpan)", file="SecurityTransactionManager.cs", label="Entry System.DateTime.RoundDown(System.TimeSpan)", span="457-457"];
m4_110 [cluster="ArgumentException.cstr", file="SecurityTransactionManager.cs", label="Entry ArgumentException.cstr", span=""];
m4_173 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTzForSecurity(QuantConnect.Securities.Security, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTzForSecurity(QuantConnect.Securities.Security, int, QuantConnect.Resolution?)", span="459-459"];
m4_178 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTzForSecurity(QuantConnect.Securities.Security, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var timeSpan = (resolution ?? security.Resolution).ToTimeSpan()", span="461-461"];
m4_180 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTzForSecurity(QuantConnect.Securities.Security, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var localStartTime = QuantConnect.Time.GetStartTimeForTradeBars(security.Exchange.Hours, UtcTime.ConvertFromUtc(security.Exchange.TimeZone), timeSpan, periods, security.IsExtendedMarketHours)", span="466-466"];
m4_181 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTzForSecurity(QuantConnect.Securities.Security, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return localStartTime.ConvertTo(security.Exchange.TimeZone, TimeZone);", span="467-467"];
m4_179 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTzForSecurity(QuantConnect.Securities.Security, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="timeSpan = timeSpan < QuantConnect.Time.OneSecond ? QuantConnect.Time.OneSecond : timeSpan", span="464-464"];
m4_182 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTzForSecurity(QuantConnect.Securities.Security, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTzForSecurity(QuantConnect.Securities.Security, int, QuantConnect.Resolution?)", span="459-459"];
m4_52 [cluster="Unk.>", file="SecurityTransactionManager.cs", label="Entry Unk.>", span=""];
m4_107 [cluster="System.ArgumentException.ArgumentException(string)", file="SecurityTransactionManager.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m4_228 [cluster="System.Type.IsAssignableFrom(System.Type)", file="SecurityTransactionManager.cs", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
m4_132 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.TimeSpan, QuantConnect.Resolution?)", span="340-340"];
m4_136 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History(symbols, Time - span, Time, resolution).Memoize();", span="342-342"];
m4_137 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.TimeSpan, QuantConnect.Resolution?)", span="340-340"];
m4_196 [cluster="QuantConnect.Algorithm.QCAlgorithm.Debug(string)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Debug(string)", span="1511-1511"];
m4_45 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", span="184-184"];
m4_46 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var requests = symbols.Select(x =>\r\n            {\r\n                var security = Securities[x];\r\n                var config = GetMatchingSubscription(security, typeof(T));\r\n                if (config == null) return null;\r\n\r\n                Resolution? res = resolution ?? security.Resolution;\r\n                var start = GetStartTimeAlgoTz(x, periods, resolution).ConvertToUtc(TimeZone);\r\n                return CreateHistoryRequest(security, config, start, UtcTime.RoundDown(res.Value.ToTimeSpan()), resolution);\r\n            })", span="187-196"];
m4_47 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History(requests.Where(x => x != null)).Get<T>().Memoize();", span="198-198"];
m4_48 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", span="184-184"];
m4_125 [cluster="System.Collections.Generic.IEnumerable<QuantConnect.Data.Slice>.Get<T>(QuantConnect.Symbol)", file="SecurityTransactionManager.cs", label="Entry System.Collections.Generic.IEnumerable<QuantConnect.Data.Slice>.Get<T>(QuantConnect.Symbol)", span="134-134"];
m4_29 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History(System.TimeSpan, QuantConnect.Resolution?)", span="127-127"];
m4_30 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History(Securities.Keys, Time - span, Time, resolution).Memoize();", span="129-129"];
m4_31 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History(System.TimeSpan, QuantConnect.Resolution?)", span="127-127"];
m4_109 [cluster="Unk.FirstOrDefault", file="SecurityTransactionManager.cs", label="Entry Unk.FirstOrDefault", span=""];
m4_89 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, int, QuantConnect.Resolution?)", span="247-247"];
m4_90 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var security = Securities[symbol]", span="249-249"];
m4_91 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var start = GetStartTimeAlgoTz(symbol, periods, resolution)", span="250-250"];
m4_92 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History(new[] {symbol}, start, Time.RoundDown((resolution ?? security.Resolution).ToTimeSpan()), resolution).Get(symbol).Memoize();", span="251-251"];
m4_93 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, int, QuantConnect.Resolution?)", span="247-247"];
m4_129 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Resolution?)", span="313-313"];
m4_130 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History(new[] {symbol}, span, resolution).Get(symbol).Memoize();", span="315-315"];
m4_131 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Resolution?)", span="313-313"];
m4_195 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="SecurityTransactionManager.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m4_152 [cluster="System.DateTime.ConvertTo(DateTimeZone, DateTimeZone, bool)", file="SecurityTransactionManager.cs", label="Entry System.DateTime.ConvertTo(DateTimeZone, DateTimeZone, bool)", span="527-527"];
m4_28 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SecurityTransactionManager.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m4_133 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", span="326-326"];
m4_134 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History(new[] {symbol}, start, end, resolution).Get(symbol).Memoize();", span="328-328"];
m4_135 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", span="326-326"];
m4_38 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History<T>(System.TimeSpan, QuantConnect.Resolution?)", span="153-153"];
m4_39 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History<T>(Securities.Keys, span, resolution).Memoize();", span="156-156"];
m4_40 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History<T>(System.TimeSpan, QuantConnect.Resolution?)", span="153-153"];
m4_85 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Resolution?)", span="233-233"];
m4_86 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History<T>(symbol, Time - span, Time, resolution).Memoize();", span="236-236"];
m4_87 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.TimeSpan, QuantConnect.Resolution?)", span="233-233"];
m4_176 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="SecurityTransactionManager.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m4_32 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?, bool?, bool?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?, bool?, bool?)", span="370-370"];
m4_143 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?, bool?, bool?)", file="SecurityTransactionManager.cs", label="return History(CreateDateRangeHistoryRequests(symbols, start, end, resolution, fillForward, extendedMarket)).Memoize();", span="372-372"];
m4_144 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?, bool?, bool?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?, bool?, bool?)", span="370-370"];
m4_27 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateDateRangeHistoryRequests(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?, bool?, bool?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.CreateDateRangeHistoryRequests(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?, bool?, bool?)", span="499-499"];
m4_198 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateDateRangeHistoryRequests(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?, bool?, bool?)", file="SecurityTransactionManager.cs", label="return symbols.Select(x =>\r\n            {\r\n                var security = Securities[x];\r\n                var config = GetMatchingSubscription(security, typeof (BaseData));\r\n                var request = CreateHistoryRequest(security, config, startAlgoTz, endAlgoTz, resolution);\r\n\r\n                // apply overrides\r\n                Resolution? res = resolution ?? security.Resolution;\r\n                if (fillForward.HasValue) request.FillForwardResolution = fillForward.Value ? res : null;\r\n                if (extendedMarket.HasValue) request.IncludeExtendedMarketHours = extendedMarket.Value;\r\n                return request;\r\n            });", span="501-512"];
m4_199 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateDateRangeHistoryRequests(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?, bool?, bool?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.CreateDateRangeHistoryRequests(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?, bool?, bool?)", span="499-499"];
m4_17 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetWarmupHistoryRequests()", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.GetWarmupHistoryRequests()", span="103-103"];
m4_18 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetWarmupHistoryRequests()", file="SecurityTransactionManager.cs", label="_warmupBarCount.HasValue", span="105-105"];
m4_19 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetWarmupHistoryRequests()", file="SecurityTransactionManager.cs", label="return CreateBarCountHistoryRequests(Securities.Keys, _warmupBarCount.Value);", span="107-107"];
m4_20 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetWarmupHistoryRequests()", file="SecurityTransactionManager.cs", label="_warmupTimeSpan.HasValue", span="109-109"];
m4_21 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetWarmupHistoryRequests()", file="SecurityTransactionManager.cs", label="var end = UtcTime.ConvertFromUtc(TimeZone)", span="111-111"];
m4_23 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetWarmupHistoryRequests()", file="SecurityTransactionManager.cs", label="return Enumerable.Empty<HistoryRequest>();", span="116-116"];
m4_22 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetWarmupHistoryRequests()", file="SecurityTransactionManager.cs", label="return CreateDateRangeHistoryRequests(Securities.Keys, end - _warmupTimeSpan.Value, end);", span="112-112"];
m4_24 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetWarmupHistoryRequests()", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.GetWarmupHistoryRequests()", span="103-103"];
m4_197 [cluster="QuantConnect.Interfaces.IHistoryProvider.GetHistory(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Interfaces.IHistoryProvider.GetHistory(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", span="53-53"];
m4_65 [cluster="System.DateTime.ConvertToUtc(DateTimeZone, bool)", file="SecurityTransactionManager.cs", label="Entry System.DateTime.ConvertToUtc(DateTimeZone, bool)", span="558-558"];
m4_142 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>)", span="403-403"];
m4_155 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>)", file="SecurityTransactionManager.cs", label="return History(requests, TimeZone).Memoize();", span="405-405"];
m4_156 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>)", span="403-403"];
m4_37 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", span="354-354"];
m4_138 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="resolution == Resolution.Tick", span="356-356"];
m4_140 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History(CreateBarCountHistoryRequests(symbols, periods, resolution)).Memoize();", span="357-357"];
m4_139 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="throw new ArgumentException(''History functions that accept a 'periods' parameter can not be used with Resolution.Tick'');", span="356-356"];
m4_141 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", span="354-354"];
m4_157 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", span="470-470"];
m4_183 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label="var sentMessage = false", span="472-472"];
m4_184 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label="var reqs = requests.ToList()", span="473-473"];
m4_193 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label="return ((IAlgorithm) this).HistoryProvider.GetHistory(reqs, timeZone);", span="493-493"];
m4_190 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label="!sentMessage", span="484-484"];
m4_185 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label=reqs, span="474-474"];
m4_186 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label="request.EndTimeUtc > UtcTime", span="477-477"];
m4_187 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label="request.EndTimeUtc = UtcTime", span="479-479"];
m4_188 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label="request.StartTimeUtc > request.EndTimeUtc", span="480-480"];
m4_189 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label="request.StartTimeUtc = request.EndTimeUtc", span="482-482"];
m4_191 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label="sentMessage = true", span="486-486"];
m4_192 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label="Debug(''Request for future history modified to end now.'')", span="487-487"];
m4_194 [cluster="QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable<QuantConnect.Data.HistoryRequest>, DateTimeZone)", span="470-470"];
m4_158 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", span="414-414"];
m4_159 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="security.Symbol.IsCanonical()", span="417-417"];
m4_161 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="var resolution = (Resolution)Math.Max((int)Resolution.Minute, (int)security.Resolution)", span="423-423"];
m4_162 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="var startTime = GetStartTimeAlgoTzForSecurity(security, 1, resolution)", span="425-425"];
m4_164 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="var subscriptionDataConfig = GetMatchingSubscription(security, typeof(BaseData))", span="429-429"];
m4_165 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="var request = new HistoryRequest()\r\n            {\r\n                StartTimeUtc = startTime.ConvertToUtc(_localTimeKeeper.TimeZone),\r\n                EndTimeUtc = endTime.ConvertToUtc(_localTimeKeeper.TimeZone),\r\n                DataType = subscriptionDataConfig != null ? subscriptionDataConfig.Type :  typeof(TradeBar),\r\n                Resolution = resolution,\r\n                FillForwardResolution = resolution,\r\n                Symbol = security.Symbol,\r\n                Market = security.Symbol.ID.Market,\r\n                ExchangeHours = security.Exchange.Hours,\r\n                SecurityType = security.Type\r\n            }", span="431-442"];
m4_160 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="return null;", span="419-419"];
m4_163 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="var endTime   = Time.RoundDown(resolution.ToTimeSpan())", span="426-426"];
m4_166 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="var history = History(new List<HistoryRequest> { request })", span="444-444"];
m4_167 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="history.Any() && history.First().Values.Any()", span="446-446"];
m4_168 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="return history.First().Values.First();", span="448-448"];
m4_169 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="return null;", span="452-452"];
m4_170 [cluster="QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)", span="414-414"];
m4_25 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateBarCountHistoryRequests(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.CreateBarCountHistoryRequests(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", span="518-518"];
m4_211 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateBarCountHistoryRequests(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return symbols.Select(x =>\r\n            {\r\n                var security = Securities[x];\r\n                Resolution? res = resolution ?? security.Resolution;\r\n                var start = GetStartTimeAlgoTz(x, periods, res);\r\n                var config = GetMatchingSubscription(security, typeof(BaseData));\r\n                return CreateHistoryRequest(security, config, start, Time.RoundDown(res.Value.ToTimeSpan()), resolution);\r\n            });", span="520-527"];
m4_212 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateBarCountHistoryRequests(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.CreateBarCountHistoryRequests(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, int, QuantConnect.Resolution?)", span="518-518"];
m4_4 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(System.TimeSpan)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(System.TimeSpan)", span="61-61"];
m4_5 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(System.TimeSpan)", file="SecurityTransactionManager.cs", label="SetWarmup(timeSpan)", span="63-63"];
m4_6 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(System.TimeSpan)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(System.TimeSpan)", span="61-61"];
m4_53 [cluster="Unk.Memoize", file="SecurityTransactionManager.cs", label="Entry Unk.Memoize", span=""];
m4_88 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", span="289-289"];
m4_115 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var security = Securities[symbol]", span="292-292"];
m4_120 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="throw new ArgumentException(''The specified security is not of the requested type. Symbol: '' + symbol.ToString() + '' Requested Type: '' + requestedType.Name + '' Actual Type: '' + actualType);", span="299-299"];
m4_121 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var request = CreateHistoryRequest(security, config, start, end, resolution)", span="302-302"];
m4_122 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History(request).Get<T>(symbol).Memoize();", span="303-303"];
m4_116 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var requestedType = typeof(T)", span="294-294"];
m4_117 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var config = GetMatchingSubscription(security, requestedType)", span="295-295"];
m4_119 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var actualType = security.Subscriptions.Select(x => x.Type.Name).DefaultIfEmpty(''[None]'').FirstOrDefault()", span="298-298"];
m4_118 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="config == null", span="296-296"];
m4_123 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History<T>(QuantConnect.Symbol, System.DateTime, System.DateTime, QuantConnect.Resolution?)", span="289-289"];
m4_44 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?)", span="210-210"];
m4_72 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var requests = symbols.Select(x =>\r\n            {\r\n                var security = Securities[x];\r\n                var config = GetMatchingSubscription(security, typeof(T));\r\n                if (config == null) return null;\r\n\r\n                return CreateHistoryRequest(security, config, start, end, resolution);\r\n            })", span="213-220"];
m4_73 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return History(requests.Where(x => x != null)).Get<T>().Memoize();", span="222-222"];
m4_74 [cluster="QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.History<T>(System.Collections.Generic.IEnumerable<QuantConnect.Symbol>, System.DateTime, System.DateTime, QuantConnect.Resolution?)", span="210-210"];
m4_151 [cluster="QuantConnect.Time.GetStartTimeForTradeBars(QuantConnect.Securities.SecurityExchangeHours, System.DateTime, System.TimeSpan, int, bool)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Time.GetStartTimeForTradeBars(QuantConnect.Securities.SecurityExchangeHours, System.DateTime, System.TimeSpan, int, bool)", span="390-390"];
m4_66 [cluster="QuantConnect.Resolution.ToTimeSpan()", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Resolution.ToTimeSpan()", span="654-654"];
m4_68 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateHistoryRequest(QuantConnect.Securities.Security, QuantConnect.Data.SubscriptionDataConfig, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.CreateHistoryRequest(QuantConnect.Securities.Security, QuantConnect.Data.SubscriptionDataConfig, System.DateTime, System.DateTime, QuantConnect.Resolution?)", span="530-530"];
m4_220 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateHistoryRequest(QuantConnect.Securities.Security, QuantConnect.Data.SubscriptionDataConfig, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="resolution = resolution ?? security.Resolution", span="532-532"];
m4_221 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateHistoryRequest(QuantConnect.Securities.Security, QuantConnect.Data.SubscriptionDataConfig, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="var request = new HistoryRequest(subscription, security.Exchange.Hours, startAlgoTz.ConvertToUtc(TimeZone), endAlgoTz.ConvertToUtc(TimeZone))\r\n            {\r\n                DataType = subscription.IsCustomData || resolution != Resolution.Tick ? subscription.Type : typeof(Tick),\r\n                Resolution = resolution.Value,\r\n                FillForwardResolution = subscription.FillDataForward ? resolution : null\r\n            }", span="533-538"];
m4_222 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateHistoryRequest(QuantConnect.Securities.Security, QuantConnect.Data.SubscriptionDataConfig, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="return request;", span="539-539"];
m4_223 [cluster="QuantConnect.Algorithm.QCAlgorithm.CreateHistoryRequest(QuantConnect.Securities.Security, QuantConnect.Data.SubscriptionDataConfig, System.DateTime, System.DateTime, QuantConnect.Resolution?)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.CreateHistoryRequest(QuantConnect.Securities.Security, QuantConnect.Data.SubscriptionDataConfig, System.DateTime, System.DateTime, QuantConnect.Resolution?)", span="530-530"];
m4_49 [cluster="Unk.Select", file="SecurityTransactionManager.cs", label="Entry Unk.Select", span=""];
m4_177 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="SecurityTransactionManager.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m4_108 [cluster="Unk.DefaultIfEmpty", file="SecurityTransactionManager.cs", label="Entry Unk.DefaultIfEmpty", span=""];
m4_26 [cluster="System.DateTime.ConvertFromUtc(DateTimeZone, bool)", file="SecurityTransactionManager.cs", label="Entry System.DateTime.ConvertFromUtc(DateTimeZone, bool)", span="546-546"];
m4_232 [file="SecurityTransactionManager.cs", label="QuantConnect.Algorithm.QCAlgorithm", span=""];
m4_233 [file="SecurityTransactionManager.cs", label="QuantConnect.Resolution?", span=""];
m4_234 [file="SecurityTransactionManager.cs", label=int, span=""];
m4_235 [file="SecurityTransactionManager.cs", label="System.DateTime", span=""];
m4_236 [file="SecurityTransactionManager.cs", label="System.DateTime", span=""];
m4_237 [file="SecurityTransactionManager.cs", label="QuantConnect.Resolution?", span=""];
m4_238 [file="SecurityTransactionManager.cs", label="System.DateTime", span=""];
m4_239 [file="SecurityTransactionManager.cs", label="System.DateTime", span=""];
m4_240 [file="SecurityTransactionManager.cs", label="QuantConnect.Resolution?", span=""];
m4_241 [file="SecurityTransactionManager.cs", label="bool?", span=""];
m4_242 [file="SecurityTransactionManager.cs", label="bool?", span=""];
m4_243 [file="SecurityTransactionManager.cs", label="QuantConnect.Resolution?", span=""];
m4_244 [file="SecurityTransactionManager.cs", label=int, span=""];
m5_0 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder()", file="StopMarketOrder.cs", label="Entry QuantConnect.Orders.StopMarketOrder.StopMarketOrder()", span="38-38"];
m5_1 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder()", file="StopMarketOrder.cs", label="Type = OrderType.StopMarket", span="40-40"];
m5_2 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder()", file="StopMarketOrder.cs", label="Exit QuantConnect.Orders.StopMarketOrder.StopMarketOrder()", span="38-38"];
m5_3 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="StopMarketOrder.cs", label="Entry QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="52-52"];
m5_4 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="StopMarketOrder.cs", label="StopPrice = stopPrice", span="55-55"];
m5_6 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="StopMarketOrder.cs", label="tag == ''''", span="58-58"];
m5_7 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="StopMarketOrder.cs", label="Tag = ''Stop Price: '' + stopPrice.ToString(''C'')", span="61-61"];
m5_5 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="StopMarketOrder.cs", label="Type = OrderType.StopMarket", span="56-56"];
m5_8 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="StopMarketOrder.cs", label="Exit QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="52-52"];
m5_10 [file="StopMarketOrder.cs", label="QuantConnect.Orders.StopMarketOrder", span=""];
n3 -> n6  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_34 -> m0_41  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m0_25 -> m0_27  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m0_25 -> m0_28  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m0_25 -> m0_31  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m0_28 -> m0_30  [color=darkseagreen4, key=1, label=removed, style=dashed];
m0_28 -> m0_32  [color=darkseagreen4, key=1, label=removed, style=dashed];
m0_37 -> m0_49  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.QCAlgorithmFramework", style=dashed];
m0_9 -> m0_18  [color=darkseagreen4, key=1, label=sd, style=dashed];
m0_12 -> m0_15  [color=darkseagreen4, key=1, label=normalizedAlpha, style=dashed];
m0_17 -> m0_20  [color=darkseagreen4, key=1, label=alpha, style=dashed];
m0_56 -> m0_9  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel", style=dashed];
m0_56 -> m0_13  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel", style=dashed];
m0_56 -> m0_15  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel", style=dashed];
m0_56 -> m0_27  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel", style=dashed];
m0_56 -> m0_30  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel", style=dashed];
m0_56 -> m0_32  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel", style=dashed];
m0_57 -> m0_41  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData", style=dashed];
m0_57 -> m0_49  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData", style=dashed];
m0_57 -> m0_53  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.MacdAlphaModel.SymbolData", style=dashed];
m1_24 -> m1_26  [color=darkseagreen4, key=1, label=limitPrice, style=dashed];
m1_29 -> m1_31  [color=darkseagreen4, key=1, label=limitPrice, style=dashed];
m1_34 -> m1_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_34 -> m1_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_34 -> m1_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_36 -> m1_38  [color=darkseagreen4, key=1, label=limitPrice, style=dashed];
m1_36 -> m1_40  [color=darkseagreen4, key=1, label=limitPrice, style=dashed];
m1_6 -> m1_1  [color=darkseagreen4, key=1, label="QuantConnect.Orders.MarketOrder", style=dashed];
m1_6 -> m1_4  [color=darkseagreen4, key=1, label="QuantConnect.Orders.MarketOrder", style=dashed];
m1_86 -> m1_1  [color=green, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_2  [color=green, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_3  [color=green, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_4  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_5  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_6  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_7  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_8  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_9  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_10  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_23  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_26  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_27  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_31  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_32  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_38  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_40  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_41  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_42  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_43  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_44  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_46  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_47  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_48  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_49  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_50  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_51  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_52  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_53  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_54  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_78  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_82  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m1_86 -> m1_83  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateCryptoAlgorithm", style=dashed];
m2_27 -> m2_30  [color=darkseagreen4, key=1, label=currentTime, style=dashed];
m2_27 -> m2_35  [color=darkseagreen4, key=1, label=currentTime, style=dashed];
m2_25 -> m2_30  [color=darkseagreen4, key=1, label=scoreType, style=dashed];
m2_25 -> m2_35  [color=darkseagreen4, key=1, label=scoreType, style=dashed];
m2_31 -> m2_35  [color=darkseagreen4, key=1, label=newEma, style=dashed];
m2_7 -> m2_9  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext", style=dashed];
m2_7 -> m2_11  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.Framework.Alphas.Analysis.AlphaAnalysisContext", style=dashed];
m2_43 -> m2_8  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension", style=dashed];
m2_43 -> m2_10  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension", style=dashed];
m2_43 -> m2_12  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension", style=dashed];
m2_43 -> m2_30  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension", style=dashed];
m2_43 -> m2_35  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Alphas.StatisticsAlphaManagerExtension", style=dashed];
m3_20 -> m3_20  [color=darkseagreen4, key=1, label=chain, style=dashed];
m3_20 -> m3_25  [color=darkseagreen4, key=1, label=contract, style=dashed];
m3_20 -> m3_26  [color=darkseagreen4, key=1, label=contract, style=dashed];
m3_23 -> m3_25  [color=darkseagreen4, key=1, label=consolidator, style=dashed];
m3_110 -> m3_302  [color=darkseagreen4, key=1, label="QuantConnect.Data.Market.IBar", style=dashed];
m3_7 -> m3_9  [color=darkseagreen4, key=1, label="QuantConnect.Data.IBaseData", style=dashed];
m3_7 -> m3_10  [color=darkseagreen4, key=1, label="QuantConnect.SecurityType", style=dashed];
m3_7 -> m3_12  [color=darkseagreen4, key=1, label="QuantConnect.Resolution", style=dashed];
m3_7 -> m3_14  [color=darkseagreen4, key=1, label="QuantConnect.Data.IBaseData", style=dashed];
m3_7 -> m3_26  [color=darkseagreen4, key=1, label="QuantConnect.Resolution", style=dashed];
m3_7 -> m3_28  [color=darkseagreen4, key=1, label="QuantConnect.Data.IBaseData", style=dashed];
m3_7 -> m3_32  [color=darkseagreen4, key=1, label="QuantConnect.Data.IBaseData", style=dashed];
m3_7 -> m3_39  [color=darkseagreen4, key=1, label="QuantConnect.Resolution", style=dashed];
m3_7 -> m3_70  [color=darkseagreen4, key=1, label="QuantConnect.Resolution", style=dashed];
m3_7 -> m3_72  [color=darkseagreen4, key=1, label="QuantConnect.Resolution", style=dashed];
m3_7 -> m3_103  [color=darkseagreen4, key=1, label="QuantConnect.Resolution", style=dashed];
m3_7 -> m3_104  [color=darkseagreen4, key=1, label="QuantConnect.SecurityType", style=dashed];
m3_89 -> m3_91  [color=green, key=1, label=openInterest, style=dashed];
m3_8 -> m3_91  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_15  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_19  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_29  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_33  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_43  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_45  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_47  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_52  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_55  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_58  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_69  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_76  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_78  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_80  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_85  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_8 -> m3_88  [color=darkseagreen4, key=1, label=milliseconds, style=dashed];
m3_9 -> m3_23  [color=darkseagreen4, key=1, label=longTime, style=dashed];
m3_9 -> m3_37  [color=darkseagreen4, key=1, label=longTime, style=dashed];
m3_9 -> m3_63  [color=darkseagreen4, key=1, label=longTime, style=dashed];
m3_9 -> m3_66  [color=darkseagreen4, key=1, label=longTime, style=dashed];
m3_9 -> m3_96  [color=darkseagreen4, key=1, label=longTime, style=dashed];
m3_9 -> m3_99  [color=darkseagreen4, key=1, label=longTime, style=dashed];
m3_9 -> m3_102  [color=darkseagreen4, key=1, label=longTime, style=dashed];
m3_39 -> m3_3  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFuturesConsolidationAlgorithm", style=dashed];
m3_39 -> m3_4  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFuturesConsolidationAlgorithm", style=dashed];
m3_39 -> m3_6  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFuturesConsolidationAlgorithm", style=dashed];
m3_39 -> m3_21  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFuturesConsolidationAlgorithm", style=dashed];
m3_39 -> m3_24  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFuturesConsolidationAlgorithm", style=dashed];
m3_39 -> m3_25  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFuturesConsolidationAlgorithm", style=dashed];
m3_39 -> m3_26  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFuturesConsolidationAlgorithm", style=dashed];
m3_39 -> m3_35  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.BasicTemplateFuturesConsolidationAlgorithm", style=dashed];
m3_41 -> m3_43  [color=darkseagreen4, key=1, label=tick, style=dashed];
m3_41 -> m3_44  [color=darkseagreen4, key=1, label=tick, style=dashed];
m3_41 -> m3_45  [color=darkseagreen4, key=1, label=tick, style=dashed];
m3_41 -> m3_46  [color=darkseagreen4, key=1, label=tick, style=dashed];
m3_41 -> m3_47  [color=darkseagreen4, key=1, label=tick, style=dashed];
m3_50 -> m3_52  [color=darkseagreen4, key=1, label=quoteBar, style=dashed];
m3_53 -> m3_55  [color=darkseagreen4, key=1, label=tradeBar, style=dashed];
m3_56 -> m3_58  [color=darkseagreen4, key=1, label=openInterest, style=dashed];
m3_61 -> m3_63  [color=darkseagreen4, key=1, label=bigQuoteBar, style=dashed];
m3_64 -> m3_66  [color=darkseagreen4, key=1, label=bigTradeBar, style=dashed];
m3_67 -> m3_69  [color=darkseagreen4, key=1, label=bigOpenInterest, style=dashed];
m3_74 -> m3_76  [color=darkseagreen4, key=1, label=tick, style=dashed];
m3_74 -> m3_77  [color=darkseagreen4, key=1, label=tick, style=dashed];
m3_74 -> m3_78  [color=darkseagreen4, key=1, label=tick, style=dashed];
m3_74 -> m3_79  [color=darkseagreen4, key=1, label=tick, style=dashed];
m3_74 -> m3_80  [color=darkseagreen4, key=1, label=tick, style=dashed];
m3_83 -> m3_85  [color=darkseagreen4, key=1, label=quoteBar, style=dashed];
m3_86 -> m3_88  [color=darkseagreen4, key=1, label=tradeBar, style=dashed];
m3_94 -> m3_96  [color=darkseagreen4, key=1, label=bigQuoteBar, style=dashed];
m3_97 -> m3_99  [color=darkseagreen4, key=1, label=bigTradeBar, style=dashed];
m3_100 -> m3_102  [color=darkseagreen4, key=1, label=bigOpenInterest, style=dashed];
m3_111 -> m3_298  [color=darkseagreen4, key=1, label="QuantConnect.Data.Market.IBar", style=dashed];
m3_109 -> m3_287  [color=darkseagreen4, key=1, label="params object[]", style=dashed];
m3_109 -> m3_292  [color=darkseagreen4, key=1, label="params object[]", style=dashed];
m3_286 -> m3_291  [color=darkseagreen4, key=1, label=i, style=dashed];
m3_291 -> m3_291  [color=darkseagreen4, key=1, label=i, style=dashed];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label="QuantConnect.Resolution", style=dashed];
m3_1 -> m3_3  [color=darkseagreen4, key=1, label=clone, style=dashed];
m3_6 -> m3_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_304 -> m3_307  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m3_304 -> m3_309  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m3_304 -> m3_311  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m3_304 -> m3_313  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m3_304 -> m3_314  [color=darkseagreen4, key=1, label="QuantConnect.SecurityType", style=dashed];
m3_166 -> m3_214  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_166 -> m3_220  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_166 -> m3_224  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_166 -> m3_225  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_166 -> m3_228  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_211 -> m3_221  [color=darkseagreen4, key=1, label=tickTypeString, style=dashed];
m3_211 -> m3_224  [color=darkseagreen4, key=1, label=tickTypeString, style=dashed];
m3_211 -> m3_225  [color=darkseagreen4, key=1, label=tickTypeString, style=dashed];
m3_211 -> m3_228  [color=darkseagreen4, key=1, label=tickTypeString, style=dashed];
m3_211 -> m3_229  [color=darkseagreen4, key=1, label=tickTypeString, style=dashed];
m3_212 -> m3_221  [color=darkseagreen4, key=1, label=formattedDate, style=dashed];
m3_212 -> m3_225  [color=darkseagreen4, key=1, label=formattedDate, style=dashed];
m3_212 -> m3_229  [color=darkseagreen4, key=1, label=formattedDate, style=dashed];
m3_213 -> m3_219  [color=darkseagreen4, key=1, label=isHourOrDaily, style=dashed];
m3_213 -> m3_223  [color=darkseagreen4, key=1, label=isHourOrDaily, style=dashed];
m3_213 -> m3_227  [color=darkseagreen4, key=1, label=isHourOrDaily, style=dashed];
m3_324 -> m3_362  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_324 -> m3_339  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_321 -> m3_342  [color=darkseagreen4, key=1, label="out System.DateTime", style=dashed];
m3_331 -> m3_342  [color=darkseagreen4, key=1, label="out QuantConnect.Resolution", style=dashed];
m3_331 -> m3_335  [color=darkseagreen4, key=1, label="out QuantConnect.Resolution", style=dashed];
m3_336 -> m3_342  [color=darkseagreen4, key=1, label="out System.DateTime", style=dashed];
m3_337 -> m3_342  [color=darkseagreen4, key=1, label="out QuantConnect.Symbol", style=dashed];
m3_323 -> m3_358  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_323 -> m3_365  [color=darkseagreen4, key=1, label=securityTypes, style=dashed];
m3_325 -> m3_361  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_326 -> m3_339  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_322 -> m3_325  [color=darkseagreen4, key=1, label=pathSeparators, style=dashed];
m3_328 -> m3_364  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_201 -> m3_209  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m3_201 -> m3_205  [color=darkseagreen4, key=1, label="QuantConnect.Resolution", style=dashed];
m3_201 -> m3_207  [color=darkseagreen4, key=1, label="QuantConnect.SecurityType", style=dashed];
m3_204 -> m3_209  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_204 -> m3_206  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_172 -> m3_236  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_237 -> m3_240  [color=darkseagreen4, key=1, label=zipFileName, style=dashed];
m3_249 -> m3_268  [color=darkseagreen4, key=1, label=parts, style=dashed];
m3_249 -> m3_272  [color=darkseagreen4, key=1, label=parts, style=dashed];
m3_247 -> m3_273  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_247 -> m3_250  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_247 -> m3_257  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_247 -> m3_262  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_248 -> m3_252  [color=darkseagreen4, key=1, label=isHourlyOrDaily, style=dashed];
m3_248 -> m3_264  [color=darkseagreen4, key=1, label=isHourlyOrDaily, style=dashed];
m3_253 -> m3_257  [color=darkseagreen4, key=1, label=style, style=dashed];
m3_254 -> m3_257  [color=darkseagreen4, key=1, label=right, style=dashed];
m3_258 -> m3_262  [color=darkseagreen4, key=1, label=style, style=dashed];
m3_259 -> m3_262  [color=darkseagreen4, key=1, label=right, style=dashed];
m3_255 -> m3_257  [color=darkseagreen4, key=1, label=strike, style=dashed];
m3_260 -> m3_262  [color=darkseagreen4, key=1, label=strike, style=dashed];
m3_136 -> m3_168  [color=darkseagreen4, key=1, label="QuantConnect.Resolution", style=dashed];
m3_136 -> m3_170  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_167 -> m3_170  [color=darkseagreen4, key=1, label=directory, style=dashed];
m3_174 -> m3_182  [color=darkseagreen4, key=1, label=formattedDate, style=dashed];
m3_174 -> m3_185  [color=darkseagreen4, key=1, label=formattedDate, style=dashed];
m3_174 -> m3_189  [color=darkseagreen4, key=1, label=formattedDate, style=dashed];
m3_174 -> m3_193  [color=darkseagreen4, key=1, label=formattedDate, style=dashed];
m3_173 -> m3_188  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_173 -> m3_189  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_173 -> m3_192  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_173 -> m3_193  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_173 -> m3_182  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_173 -> m3_184  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_173 -> m3_185  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_173 -> m3_176  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_173 -> m3_181  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_175 -> m3_183  [color=darkseagreen4, key=1, label=isHourOrDaily, style=dashed];
m3_175 -> m3_187  [color=darkseagreen4, key=1, label=isHourOrDaily, style=dashed];
m3_175 -> m3_191  [color=darkseagreen4, key=1, label=isHourOrDaily, style=dashed];
m3_137 -> m3_143  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_137 -> m3_148  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_137 -> m3_150  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_137 -> m3_152  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m3_138 -> m3_148  [color=darkseagreen4, key=1, label=isHourOrDaily, style=dashed];
m3_138 -> m3_150  [color=darkseagreen4, key=1, label=isHourOrDaily, style=dashed];
m3_138 -> m3_152  [color=darkseagreen4, key=1, label=isHourOrDaily, style=dashed];
m3_142 -> m3_148  [color=darkseagreen4, key=1, label=directory, style=dashed];
m3_142 -> m3_150  [color=darkseagreen4, key=1, label=directory, style=dashed];
m3_142 -> m3_152  [color=darkseagreen4, key=1, label=directory, style=dashed];
m3_368 -> m3_362  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_369 -> m3_365  [color=darkseagreen4, key=1, label=securityTypes, style=dashed];
m4_59 -> m4_61  [color=darkseagreen4, key=1, label=res, style=dashed];
m4_55 -> m4_61  [color=darkseagreen4, key=1, label=security, style=dashed];
m4_56 -> m4_61  [color=darkseagreen4, key=1, label=config, style=dashed];
m4_76 -> m4_80  [color=darkseagreen4, key=1, label=security, style=dashed];
m4_77 -> m4_80  [color=darkseagreen4, key=1, label=config, style=dashed];
m4_203 -> m4_209  [color=darkseagreen4, key=1, label=request, style=dashed];
m4_215 -> m4_218  [color=darkseagreen4, key=1, label=res, style=dashed];
m4_216 -> m4_218  [color=darkseagreen4, key=1, label=start, style=dashed];
m4_214 -> m4_218  [color=darkseagreen4, key=1, label=security, style=dashed];
m4_225 -> m4_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_225 -> m4_225  [color=darkseagreen4, key=1, label=sub, style=dashed];
m4_145 -> m4_149  [color=darkseagreen4, key=1, label=security, style=dashed];
m4_95 -> m4_103  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m4_95 -> m4_105  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m4_98 -> m4_105  [color=darkseagreen4, key=1, label=security, style=dashed];
m4_99 -> m4_103  [color=darkseagreen4, key=1, label=requestedType, style=dashed];
m4_102 -> m4_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_173 -> m4_181  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m4_45 -> m4_61  [color=darkseagreen4, key=1, label="QuantConnect.Resolution?", style=dashed];
m4_46 -> m4_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_47 -> m4_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_89 -> m4_92  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m4_90 -> m4_92  [color=darkseagreen4, key=1, label=security, style=dashed];
m4_27 -> m4_205  [color=darkseagreen4, key=1, label="bool?", style=dashed];
m4_27 -> m4_207  [color=darkseagreen4, key=1, label="bool?", style=dashed];
m4_198 -> m4_200  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_37 -> m4_140  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<QuantConnect.Symbol>", style=dashed];
m4_157 -> m4_193  [color=darkseagreen4, key=1, label=DateTimeZone, style=dashed];
m4_183 -> m4_190  [color=darkseagreen4, key=1, label=sentMessage, style=dashed];
m4_184 -> m4_193  [color=darkseagreen4, key=1, label=reqs, style=dashed];
m4_185 -> m4_188  [color=darkseagreen4, key=1, label=request, style=dashed];
m4_166 -> m4_168  [color=darkseagreen4, key=1, label=history, style=dashed];
m4_25 -> m4_218  [color=darkseagreen4, key=1, label="QuantConnect.Resolution?", style=dashed];
m4_211 -> m4_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_88 -> m4_120  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m4_88 -> m4_122  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m4_116 -> m4_120  [color=darkseagreen4, key=1, label=requestedType, style=dashed];
m4_119 -> m4_126  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_44 -> m4_80  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m4_72 -> m4_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_73 -> m4_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_232 -> m4_5  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_12  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_18  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_19  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_20  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_22  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_30  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_35  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_39  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_42  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_61  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_47  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_80  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_73  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_86  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_92  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_105  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_122  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_130  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_134  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_136  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_140  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_143  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_149  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_153  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_155  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_181  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_186  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_192  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_193  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_232 -> m4_218  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m4_233 -> m4_61  [color=darkseagreen4, key=1, label="QuantConnect.Resolution?", style=dashed];
m4_235 -> m4_80  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m4_236 -> m4_80  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m4_237 -> m4_80  [color=darkseagreen4, key=1, label="QuantConnect.Resolution?", style=dashed];
m4_241 -> m4_205  [color=darkseagreen4, key=1, label="bool?", style=dashed];
m4_242 -> m4_207  [color=darkseagreen4, key=1, label="bool?", style=dashed];
m4_243 -> m4_218  [color=darkseagreen4, key=1, label="QuantConnect.Resolution?", style=dashed];
m5_3 -> m5_6  [color=darkseagreen4, key=1, label=string, style=dashed];
}
