digraph  {
d38 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", color=green, community=0, label="fill = model.StopLimitFill(_algorithm.Securities[order.Symbol], order as StopLimitOrder)", prediction=0, span="158-158"];
d61 [label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", span=""];
d25 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label=orders, span="130-130"];
d29 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="var model = _algorithm.Securities[order.Symbol].Model", span="141-141"];
d37 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", color=green, community=0, label="OrderType.StopLimit", prediction=1, span="157-157"];
d39 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label=Exception, span="162-162"];
d44 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="order.Status != OrderStatus.None", span="175-175"];
d52 [cluster="Unk.StopLimitFill", label="Entry Unk.StopLimitFill", span=""];
d45 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OnOrderEvent(fill)", span="178-178"];
d30 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="order.Type", span="146-146"];
d1 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", label="_algorithm = algorithm", span="42-42"];
d2 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", label="_orders = _algorithm.Transactions.Orders", span="43-43"];
d5 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, string)", label="_algorithm = algorithm", span="54-54"];
d6 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, string)", label="_orders = _algorithm.Transactions.Orders", span="55-55"];
d24 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="var orders = (from order in _orders\r\n                          where order.Value.Status != OrderStatus.Filled &&\r\n                                order.Value.Status != OrderStatus.Canceled &&\r\n                                order.Value.Status != OrderStatus.Invalid\r\n                          orderby order.Value.Id ascending\r\n                          select order.Value)", span="122-127"];
d26 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="var sufficientBuyingPower = _algorithm.Transactions.GetSufficientCapitalForOrder(_algorithm.Portfolio, order)", span="133-133"];
d32 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="fill = model.LimitFill(_algorithm.Securities[order.Symbol], order as LimitOrder)", span="149-149"];
d34 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="fill = model.StopMarketFill(_algorithm.Securities[order.Symbol], order as StopMarketOrder)", span="152-152"];
d36 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="fill = model.MarketFill(_algorithm.Securities[order.Symbol], order as MarketOrder)", span="155-155"];
d41 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="_algorithm.Error(string.Format(''Order Error: id: {0}, Transaction model failed to fill for order type: {1} with error: {2}'', order.Id, order.Type, err.Message))", span="165-165"];
d43 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="_algorithm.Error(string.Format(''Order Error: id: {0}, Insufficient buying power to complete order.'', order.Id))", span="172-172"];
d46 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", span="114-114"];
d42 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="order.Status = OrderStatus.Invalid", span="171-171"];
d28 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label=sufficientBuyingPower, span="138-138"];
d40 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Log.Error(''BacktestingBrokerage.Scan(): '' + err.Message)", span="164-164"];
d27 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="var fill = new OrderEvent()", span="135-135"];
d56 [cluster="QuantConnect.Brokerages.Brokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)", label="Entry QuantConnect.Brokerages.Brokerage.OnOrderEvent(QuantConnect.Orders.OrderEvent)", span="102-102"];
d31 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OrderType.Limit", span="148-148"];
d33 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OrderType.StopMarket", span="151-151"];
d35 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="OrderType.Market", span="154-154"];
d0 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", span="39-39"];
d3 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", span="39-39"];
d4 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, string)", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, string)", span="51-51"];
d7 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, string)", label="Exit QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm, string)", span="51-51"];
d23 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.Scan()", span="114-114"];
d47 [cluster="Unk.GetSufficientCapitalForOrder", label="Entry Unk.GetSufficientCapitalForOrder", span=""];
d49 [cluster="QuantConnect.Securities.Interfaces.ISecurityTransactionModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", label="Entry QuantConnect.Securities.Interfaces.ISecurityTransactionModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", span="60-60"];
d50 [cluster="QuantConnect.Securities.Interfaces.ISecurityTransactionModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", label="Entry QuantConnect.Securities.Interfaces.ISecurityTransactionModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", span="52-52"];
d51 [cluster="QuantConnect.Securities.Interfaces.ISecurityTransactionModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", label="Entry QuantConnect.Securities.Interfaces.ISecurityTransactionModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", span="44-44"];
d54 [cluster="Unk.Format", label="Entry Unk.Format", span=""];
d55 [cluster="QuantConnect.Interfaces.IAlgorithm.Error(string)", label="Entry QuantConnect.Interfaces.IAlgorithm.Error(string)", span="246-246"];
d53 [cluster="QuantConnect.Logging.Log.Error(string, bool)", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="104-104"];
d48 [cluster="QuantConnect.Orders.OrderEvent.OrderEvent(int, string, QuantConnect.Orders.OrderStatus, decimal, int, string)", label="Entry QuantConnect.Orders.OrderEvent.OrderEvent(int, string, QuantConnect.Orders.OrderStatus, decimal, int, string)", span="92-92"];
m1_139 [cluster="System.Math.Abs(decimal)", file="QCAlgorithm.Trading.cs", label="Entry System.Math.Abs(decimal)", span="0-0"];
m1_111 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", span="414-414"];
m1_118 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="!Portfolio.ContainsKey(symbol)", span="417-417"];
m1_119 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Debug(symbol.ToUpper() + '' not found in portfolio. Request this data when initializing the algorithm.'')", span="419-419"];
m1_121 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="percentage > 1", span="424-424"];
m1_123 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="percentage < -1", span="425-425"];
m1_125 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label=liquidateExistingHoldings, span="428-428"];
m1_127 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="holdingSymbol != symbol && Portfolio[holdingSymbol].AbsoluteQuantity > 0", span="432-432"];
m1_129 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="var total = Portfolio.TotalHoldingsValue + Portfolio.Cash * Securities[symbol].Leverage", span="441-441"];
m1_130 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="var deltaValue = (total * percentage) - Portfolio[symbol].HoldingsValue", span="444-444"];
m1_132 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Math.Abs(Securities[symbol].Price) > 0", span="449-449"];
m1_133 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="deltaQuantity = Math.Round(deltaValue / Securities[symbol].Price)", span="452-452"];
m1_135 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="MarketOrder(symbol, (int)deltaQuantity, false, tag)", span="458-458"];
m1_120 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="return;", span="420-420"];
m1_122 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="percentage = 1", span="424-424"];
m1_124 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="percentage = -1", span="425-425"];
m1_126 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Portfolio.Keys", span="430-430"];
m1_128 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Order(holdingSymbol, -Portfolio[holdingSymbol].Quantity)", span="435-435"];
m1_131 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="var deltaQuantity = 0m", span="446-446"];
m1_134 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Math.Abs(deltaQuantity) > 0", span="456-456"];
m1_136 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, decimal, bool, string)", span="414-414"];
m1_112 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, float, bool, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, float, bool, string)", span="386-386"];
m1_113 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, float, bool, string)", file="QCAlgorithm.Trading.cs", label="SetHoldings(symbol, (decimal)percentage, liquidateExistingHoldings)", span="388-388"];
m1_114 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, float, bool, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, float, bool, string)", span="386-386"];
m1_58 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", span="261-261"];
m1_59 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="var error = PreOrderChecks(symbol, quantity, OrderType.StopMarket)", span="263-263"];
m1_62 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="var order = new StopMarketOrder(symbol, quantity, stopPrice, Time, tag, Securities[symbol].Type)", span="269-269"];
m1_60 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="error < 0", span="264-264"];
m1_61 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="return error;", span="266-266"];
m1_63 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="return Transactions.AddOrder(order);", span="272-272"];
m1_64 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(string, int, decimal, string)", span="261-261"];
m1_11 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal)", span="170-170"];
m1_29 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, (int) quantity);", span="172-172"];
m1_30 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal)", span="170-170"];
m1_24 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, decimal)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(string, decimal)", span="151-151"];
m1_25 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, decimal)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="153-153"];
m1_26 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, decimal)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(string, decimal)", span="151-151"];
m1_7 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, double)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(string, double)", span="160-160"];
m1_27 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, double)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, (int) quantity);", span="162-162"];
m1_28 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, double)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(string, double)", span="160-160"];
m1_105 [cluster="System.Collections.Generic.List<T>.List()", file="QCAlgorithm.Trading.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_45 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", span="280-280"];
m1_66 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="quantity == 0 || string.IsNullOrEmpty(symbol)", span="283-283"];
m1_68 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="symbol = symbol.ToUpper()", span="289-289"];
m1_81 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="type == OrderType.Market && !security.Exchange.ExchangeOpen", span="317-317"];
m1_67 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return -1;", span="285-285"];
m1_69 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="!Securities.ContainsKey(symbol) && !_sentNoDataError", span="292-292"];
m1_71 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Error(''You haven't requested '' + symbol + '' data. Add this with AddSecurity() in the Initialize() Method.'')", span="295-295"];
m1_73 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="var security = Securities[symbol]", span="300-300"];
m1_70 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="_sentNoDataError = true", span="294-294"];
m1_72 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return -1;", span="296-296"];
m1_74 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="var price = security.Price", span="301-301"];
m1_78 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="!security.HasData", span="310-310"];
m1_75 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="price == 0", span="303-303"];
m1_76 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Error(''Asset price is $0. If using custom data make sure you've set the 'Value' property.'')", span="305-305"];
m1_77 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return -1;", span="306-306"];
m1_79 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Error(''There is no data for this symbol yet, please check the security.HasData flag to ensure there is at least one data point.'')", span="312-312"];
m1_80 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return -1;", span="313-313"];
m1_82 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Error(''Market order and exchange not open'')", span="319-319"];
m1_84 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Orders.Count > (_endDate - _startDate).TotalDays * 100", span="324-324"];
m1_83 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return -3;", span="320-320"];
m1_85 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Error(''You have exceeded 100 orders per day'')", span="326-326"];
m1_87 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return 0;", span="330-330"];
m1_86 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return -5;", span="327-327"];
m1_88 [cluster="QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(string, int, QuantConnect.Orders.OrderType)", span="280-280"];
m1_147 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType)", span="497-497"];
m1_148 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="499-499"];
m1_149 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType)", span="497-497"];
m1_50 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", span="239-239"];
m1_51 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="var error = PreOrderChecks(symbol, quantity, OrderType.Limit)", span="241-241"];
m1_54 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="var order = new LimitOrder(symbol, quantity, limitPrice, Time, tag, Securities[symbol].Type)", span="247-247"];
m1_52 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="error < 0", span="242-242"];
m1_53 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="return error;", span="244-244"];
m1_55 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="return Transactions.AddOrder(order);", span="250-250"];
m1_56 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.LimitOrder(string, int, decimal, string)", span="239-239"];
m1_57 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="65-65"];
m1_92 [cluster="QuantConnect.Algorithm.QCAlgorithm.Error(string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Error(string)", span="735-735"];
m1_21 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, float)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(string, float)", span="140-140"];
m1_22 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, float)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="142-142"];
m1_23 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, float)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(string, float)", span="140-140"];
m1_12 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, float)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(string, float)", span="106-106"];
m1_13 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, float)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="108-108"];
m1_14 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, float)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Buy(string, float)", span="106-106"];
m1_3 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(string, int, bool, string)", span="183-183"];
m1_31 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="return MarketOrder(symbol, quantity, asynchronous, tag);", span="185-185"];
m1_32 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(string, int, bool, string)", span="183-183"];
m1_108 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, double, bool)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, double, bool)", span="373-373"];
m1_109 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, double, bool)", file="QCAlgorithm.Trading.cs", label="SetHoldings(symbol, (decimal)percentage, liquidateExistingHoldings)", span="375-375"];
m1_110 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, double, bool)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, double, bool)", span="373-373"];
m1_46 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder(string, int, System.DateTime, string, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder(string, int, System.DateTime, string, QuantConnect.SecurityType)", span="57-57"];
m1_65 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="63-63"];
m1_137 [cluster="QuantConnect.Securities.SecurityPortfolioManager.ContainsKey(string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Securities.SecurityPortfolioManager.ContainsKey(string)", span="110-110"];
m1_138 [cluster="QuantConnect.Algorithm.QCAlgorithm.Debug(string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Debug(string)", span="710-710"];
m1_0 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, int)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(string, int)", span="73-73"];
m1_1 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, int)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="75-75"];
m1_2 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, int)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Buy(string, int)", span="73-73"];
m1_90 [cluster="string.ToUpper()", file="QCAlgorithm.Trading.cs", label="Entry string.ToUpper()", span="0-0"];
m1_4 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, double)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(string, double)", span="84-84"];
m1_5 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, double)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="86-86"];
m1_6 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, double)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Buy(string, double)", span="84-84"];
m1_8 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, decimal)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Buy(string, decimal)", span="95-95"];
m1_9 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, decimal)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="97-97"];
m1_10 [cluster="QuantConnect.Algorithm.QCAlgorithm.Buy(string, decimal)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Buy(string, decimal)", span="95-95"];
m1_47 [cluster="QuantConnect.Securities.SecurityTransactionManager.AddOrder(QuantConnect.Orders.Order)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.AddOrder(QuantConnect.Orders.Order)", span="175-175"];
m1_49 [cluster="System.Threading.Thread.Sleep(int)", file="QCAlgorithm.Trading.cs", label="Entry System.Threading.Thread.Sleep(int)", span="0-0"];
m1_93 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", span="340-340"];
m1_94 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="var orderIdList = new List<int>()", span="342-342"];
m1_95 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="symbolToLiquidate = symbolToLiquidate.ToUpper()", span="343-343"];
m1_102 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="orderIdList.Add(Order(symbol, quantity))", span="360-360"];
m1_103 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="return orderIdList;", span="362-362"];
m1_96 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="Securities.Keys", span="345-345"];
m1_97 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="!Portfolio[symbol].HoldStock || (symbol != symbolToLiquidate && symbolToLiquidate != '''')", span="348-348"];
m1_99 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="Portfolio[symbol].IsLong", span="351-351"];
m1_100 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="quantity = -Portfolio[symbol].Quantity", span="353-353"];
m1_101 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="quantity = Math.Abs(Portfolio[symbol].Quantity)", span="357-357"];
m1_98 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="var quantity = 0", span="350-350"];
m1_104 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Liquidate(string)", span="340-340"];
m1_141 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", span="473-473"];
m1_142 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity, asynchronous, tag);", span="475-475"];
m1_143 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(string, int, QuantConnect.Orders.OrderType, bool, string)", span="473-473"];
m1_33 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", span="196-196"];
m1_34 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="var error = PreOrderChecks(symbol, quantity, OrderType.Market)", span="199-199"];
m1_37 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="var order = new MarketOrder(symbol, quantity, Time, tag, Securities[symbol].Type)", span="205-205"];
m1_38 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="order.Price = Securities[symbol].Price", span="208-208"];
m1_40 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="!asynchronous", span="215-215"];
m1_35 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="error < 0", span="200-200"];
m1_36 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="return error;", span="202-202"];
m1_39 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="var orderId = Transactions.AddOrder(order)", span="211-211"];
m1_41 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="!Transactions.Orders.ContainsKey(orderId) ||\r\n                       (Transactions.Orders[orderId].Status != OrderStatus.Filled &&\r\n                        Transactions.Orders[orderId].Status != OrderStatus.Invalid &&\r\n                        Transactions.Orders[orderId].Status != OrderStatus.Canceled) || _processingOrder", span="219-222"];
m1_43 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="return orderId;", span="228-228"];
m1_42 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="Thread.Sleep(1)", span="224-224"];
m1_44 [cluster="QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.MarketOrder(string, int, bool, string)", span="196-196"];
m1_48 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)", file="QCAlgorithm.Trading.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m1_140 [cluster="System.Math.Round(decimal)", file="QCAlgorithm.Trading.cs", label="Entry System.Math.Round(decimal)", span="0-0"];
m1_107 [cluster="System.Collections.Generic.List<T>.Add(T)", file="QCAlgorithm.Trading.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m1_18 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, double)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(string, double)", span="128-128"];
m1_19 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, double)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="130-130"];
m1_20 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, double)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(string, double)", span="128-128"];
m1_144 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal, QuantConnect.Orders.OrderType)", span="485-485"];
m1_145 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, (int)quantity);", span="487-487"];
m1_146 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal, QuantConnect.Orders.OrderType)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Order(string, decimal, QuantConnect.Orders.OrderType)", span="485-485"];
m1_89 [cluster="string.IsNullOrEmpty(string)", file="QCAlgorithm.Trading.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m1_15 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, int)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Sell(string, int)", span="117-117"];
m1_16 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, int)", file="QCAlgorithm.Trading.cs", label="return Order(symbol, quantity);", span="119-119"];
m1_17 [cluster="QuantConnect.Algorithm.QCAlgorithm.Sell(string, int)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.Sell(string, int)", span="117-117"];
m1_115 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, int, bool, string)", span="400-400"];
m1_116 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="SetHoldings(symbol, (decimal)percentage, liquidateExistingHoldings)", span="402-402"];
m1_117 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, int, bool, string)", file="QCAlgorithm.Trading.cs", label="Exit QuantConnect.Algorithm.QCAlgorithm.SetHoldings(string, int, bool, string)", span="400-400"];
m1_91 [cluster="QuantConnect.Securities.SecurityManager.ContainsKey(string)", file="QCAlgorithm.Trading.cs", label="Entry QuantConnect.Securities.SecurityManager.ContainsKey(string)", span="212-212"];
m1_106 [cluster="System.Math.Abs(int)", file="QCAlgorithm.Trading.cs", label="Entry System.Math.Abs(int)", span="0-0"];
m1_150 [file="QCAlgorithm.Trading.cs", label="QuantConnect.Algorithm.QCAlgorithm", span=""];
m2_27 [cluster="lambda expression", file="SecurityTransactionModel.cs", label="Entry lambda expression", span="61-64"];
m2_18 [cluster="lambda expression", file="SecurityTransactionModel.cs", label="HandleRenkoClose(consolidated)", span="49-49"];
m2_22 [cluster="lambda expression", file="SecurityTransactionModel.cs", label="(2 * x.Open + x.High + x.Low + 3 * x.Close) / 7m", span="60-60"];
m2_25 [cluster="lambda expression", file="SecurityTransactionModel.cs", label="x.Volume", span="60-60"];
m2_28 [cluster="lambda expression", file="SecurityTransactionModel.cs", label="HandleRenko7Bar(consolidated)", span="63-63"];
m2_17 [cluster="lambda expression", file="SecurityTransactionModel.cs", label="Entry lambda expression", span="46-50"];
m2_19 [cluster="lambda expression", file="SecurityTransactionModel.cs", label="Exit lambda expression", span="46-50"];
m2_21 [cluster="lambda expression", file="SecurityTransactionModel.cs", label="Entry lambda expression", span="60-60"];
m2_23 [cluster="lambda expression", file="SecurityTransactionModel.cs", label="Exit lambda expression", span="60-60"];
m2_24 [cluster="lambda expression", file="SecurityTransactionModel.cs", label="Entry lambda expression", span="60-60"];
m2_26 [cluster="lambda expression", file="SecurityTransactionModel.cs", label="Exit lambda expression", span="60-60"];
m2_29 [cluster="lambda expression", file="SecurityTransactionModel.cs", label="Exit lambda expression", span="61-64"];
m2_30 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.HandleRenko7Bar(QuantConnect.Data.Market.RenkoBar)", file="SecurityTransactionModel.cs", label="Entry QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.HandleRenko7Bar(QuantConnect.Data.Market.RenkoBar)", span="94-94"];
m2_40 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.HandleRenko7Bar(QuantConnect.Data.Market.RenkoBar)", file="SecurityTransactionModel.cs", label="Portfolio.Invested", span="96-96"];
m2_42 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.HandleRenko7Bar(QuantConnect.Data.Market.RenkoBar)", file="SecurityTransactionModel.cs", label="Log($''7BAR - {data.Time.ToString(''o'')} - {data.Open} {data.Close}'')", span="100-100"];
m2_43 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.HandleRenko7Bar(QuantConnect.Data.Market.RenkoBar)", file="SecurityTransactionModel.cs", label="Exit QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.HandleRenko7Bar(QuantConnect.Data.Market.RenkoBar)", span="94-94"];
m2_37 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", file="SecurityTransactionModel.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, double, bool)", span="844-844"];
m2_44 [cluster="QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", file="SecurityTransactionModel.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol, string)", span="770-770"];
m2_39 [cluster="QuantConnect.Algorithm.QCAlgorithm.Log(string)", file="SecurityTransactionModel.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Log(string)", span="1837-1837"];
m2_20 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.HandleRenkoClose(QuantConnect.Data.Market.RenkoBar)", file="SecurityTransactionModel.cs", label="Entry QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.HandleRenkoClose(QuantConnect.Data.Market.RenkoBar)", span="81-81"];
m2_33 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.HandleRenkoClose(QuantConnect.Data.Market.RenkoBar)", file="SecurityTransactionModel.cs", label="!Portfolio.Invested", span="83-83"];
m2_34 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.HandleRenkoClose(QuantConnect.Data.Market.RenkoBar)", file="SecurityTransactionModel.cs", label="SetHoldings(data.Symbol, 1.0)", span="85-85"];
m2_35 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.HandleRenkoClose(QuantConnect.Data.Market.RenkoBar)", file="SecurityTransactionModel.cs", label="Log($''CLOSE - {data.Time.ToString(''o'')} - {data.Open} {data.Close}'')", span="87-87"];
m2_36 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.HandleRenkoClose(QuantConnect.Data.Market.RenkoBar)", file="SecurityTransactionModel.cs", label="Exit QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.HandleRenkoClose(QuantConnect.Data.Market.RenkoBar)", span="81-81"];
m2_13 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddEquity(string, QuantConnect.Resolution, string, bool, decimal, bool)", file="SecurityTransactionModel.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddEquity(string, QuantConnect.Resolution, string, bool, decimal, bool)", span="1453-1453"];
m2_15 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="SecurityTransactionModel.cs", label="Entry QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", span="162-162"];
m2_38 [cluster="System.DateTime.ToString(string)", file="SecurityTransactionModel.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m2_12 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", file="SecurityTransactionModel.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", span="1197-1197"];
m2_14 [cluster="QuantConnect.Data.Consolidators.RenkoConsolidator.RenkoConsolidator(decimal, bool)", file="SecurityTransactionModel.cs", label="Entry QuantConnect.Data.Consolidators.RenkoConsolidator.RenkoConsolidator(decimal, bool)", span="81-81"];
m2_31 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", file="SecurityTransactionModel.cs", label="Entry QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", span="73-73"];
m2_32 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", file="SecurityTransactionModel.cs", label="Exit QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.OnData(QuantConnect.Data.Market.TradeBars)", span="73-73"];
m2_16 [cluster="QuantConnect.Data.Consolidators.RenkoConsolidator<TInput>.RenkoConsolidator(decimal, System.Func<TInput, decimal>, System.Func<TInput, decimal>, bool)", file="SecurityTransactionModel.cs", label="Entry QuantConnect.Data.Consolidators.RenkoConsolidator<TInput>.RenkoConsolidator(decimal, System.Func<TInput, decimal>, System.Func<TInput, decimal>, bool)", span="401-401"];
m2_11 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", file="SecurityTransactionModel.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", span="1172-1172"];
m2_0 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.Initialize()", file="SecurityTransactionModel.cs", label="Entry QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.Initialize()", span="34-34"];
m2_1 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.Initialize()", file="SecurityTransactionModel.cs", label="SetStartDate(2012, 01, 01)", span="36-36"];
m2_2 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.Initialize()", file="SecurityTransactionModel.cs", label="SetEndDate(2013, 01, 01)", span="37-37"];
m2_3 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.Initialize()", file="SecurityTransactionModel.cs", label="AddEquity(''SPY'', Resolution.Daily)", span="39-39"];
m2_4 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.Initialize()", file="SecurityTransactionModel.cs", label="var renkoClose = new RenkoConsolidator(2.5m)", span="45-45"];
m2_5 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.Initialize()", file="SecurityTransactionModel.cs", label="renkoClose.DataConsolidated += (sender, consolidated) =>\r\n            {\r\n                // call our event handler for renko data\r\n                HandleRenkoClose(consolidated);\r\n            }", span="46-50"];
m2_6 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.Initialize()", file="SecurityTransactionModel.cs", label="SubscriptionManager.AddConsolidator(''SPY'', renkoClose)", span="53-53"];
m2_7 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.Initialize()", file="SecurityTransactionModel.cs", label="var renko7bar = new RenkoConsolidator<TradeBar>(2.5m, x => (2 * x.Open + x.High + x.Low + 3 * x.Close) / 7m, x => x.Volume)", span="60-60"];
m2_8 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.Initialize()", file="SecurityTransactionModel.cs", label="renko7bar.DataConsolidated += (sender, consolidated) =>\r\n            {\r\n                HandleRenko7Bar(consolidated);\r\n            }", span="61-64"];
m2_10 [cluster="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.Initialize()", file="SecurityTransactionModel.cs", label="Exit QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm.Initialize()", span="34-34"];
m2_45 [file="SecurityTransactionModel.cs", label="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm", span=""];
d38 -> d45  [color=green, key=1, label=fill, style=dashed];
d61 -> d41  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
d61 -> d43  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
d61 -> d45  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage", style=dashed];
d25 -> d30  [color=darkseagreen4, key=1, label=order, style=dashed];
d25 -> d41  [color=darkseagreen4, key=1, label=order, style=dashed];
d25 -> d44  [color=darkseagreen4, key=1, label=order, style=dashed];
d26 -> d28  [color=darkseagreen4, key=1, label=sufficientBuyingPower, style=dashed];
d42 -> d44  [color=darkseagreen4, key=1, label=order, style=dashed];
d27 -> d45  [color=darkseagreen4, key=1, label=fill, style=dashed];
m1_111 -> m1_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_111 -> m1_121  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m1_111 -> m1_123  [color=darkseagreen4, key=1, label=decimal, style=dashed];
m1_111 -> m1_125  [color=darkseagreen4, key=1, label=bool, style=dashed];
m1_111 -> m1_127  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_111 -> m1_132  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_111 -> m1_135  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_133 -> m1_135  [color=darkseagreen4, key=1, label=deltaQuantity, style=dashed];
m1_126 -> m1_128  [color=darkseagreen4, key=1, label=holdingSymbol, style=dashed];
m1_131 -> m1_134  [color=darkseagreen4, key=1, label=deltaQuantity, style=dashed];
m1_131 -> m1_135  [color=darkseagreen4, key=1, label=deltaQuantity, style=dashed];
m1_59 -> m1_61  [color=darkseagreen4, key=1, label=error, style=dashed];
m1_45 -> m1_81  [color=darkseagreen4, key=1, label="QuantConnect.Orders.OrderType", style=dashed];
m1_68 -> m1_71  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_73 -> m1_78  [color=darkseagreen4, key=1, label=security, style=dashed];
m1_73 -> m1_81  [color=darkseagreen4, key=1, label=security, style=dashed];
m1_51 -> m1_53  [color=darkseagreen4, key=1, label=error, style=dashed];
m1_94 -> m1_102  [color=darkseagreen4, key=1, label=orderIdList, style=dashed];
m1_94 -> m1_103  [color=darkseagreen4, key=1, label=orderIdList, style=dashed];
m1_95 -> m1_97  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_96 -> m1_99  [color=darkseagreen4, key=1, label=symbol, style=dashed];
m1_96 -> m1_102  [color=darkseagreen4, key=1, label=symbol, style=dashed];
m1_33 -> m1_40  [color=darkseagreen4, key=1, label=bool, style=dashed];
m1_34 -> m1_36  [color=darkseagreen4, key=1, label=error, style=dashed];
m1_39 -> m1_41  [color=darkseagreen4, key=1, label=orderId, style=dashed];
m1_39 -> m1_43  [color=darkseagreen4, key=1, label=orderId, style=dashed];
m1_150 -> m1_1  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_5  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_9  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_13  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_16  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_19  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_22  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_25  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_27  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_29  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_31  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_41  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_55  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_63  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_69  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_71  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_76  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_79  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_82  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_84  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_85  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_96  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_97  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_99  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_102  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_109  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_113  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_116  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_118  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_119  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_126  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_127  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_128  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_132  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_135  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_142  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_145  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m1_150 -> m1_148  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.QCAlgorithm", style=dashed];
m2_30 -> m2_42  [color=darkseagreen4, key=1, label="QuantConnect.Data.Market.RenkoBar", style=dashed];
m2_20 -> m2_34  [color=darkseagreen4, key=1, label="QuantConnect.Data.Market.RenkoBar", style=dashed];
m2_20 -> m2_35  [color=darkseagreen4, key=1, label="QuantConnect.Data.Market.RenkoBar", style=dashed];
m2_4 -> m2_6  [color=darkseagreen4, key=1, label=renkoClose, style=dashed];
m2_5 -> m2_18  [color=darkseagreen4, key=1, label="QuantConnect.Data.Market.RenkoBar", style=dashed];
m2_7 -> m2_22  [color=darkseagreen4, key=1, label="QuantConnect.Data.Market.TradeBar", style=dashed];
m2_7 -> m2_25  [color=darkseagreen4, key=1, label="QuantConnect.Data.Market.TradeBar", style=dashed];
m2_8 -> m2_28  [color=darkseagreen4, key=1, label="QuantConnect.Data.Market.RenkoBar", style=dashed];
m2_45 -> m2_1  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm", style=dashed];
m2_45 -> m2_2  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm", style=dashed];
m2_45 -> m2_3  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm", style=dashed];
m2_45 -> m2_18  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm", style=dashed];
m2_45 -> m2_6  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm", style=dashed];
m2_45 -> m2_28  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm", style=dashed];
m2_45 -> m2_33  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm", style=dashed];
m2_45 -> m2_34  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm", style=dashed];
m2_45 -> m2_35  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm", style=dashed];
m2_45 -> m2_40  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm", style=dashed];
m2_45 -> m2_42  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.RenkoConsolidatorAlgorithm", style=dashed];
}
