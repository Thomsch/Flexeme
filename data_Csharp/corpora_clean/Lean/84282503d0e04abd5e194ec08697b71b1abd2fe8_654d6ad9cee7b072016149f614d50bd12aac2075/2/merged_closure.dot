digraph  {
n3 [label="QuantConnect.Packets.AlphaNodePacket", span=""];
n0 [cluster="QuantConnect.Packets.AlphaNodePacket.AlphaNodePacket()", label="Entry QuantConnect.Packets.AlphaNodePacket.AlphaNodePacket()", span="26-26"];
n1 [cluster="QuantConnect.Packets.AlphaNodePacket.AlphaNodePacket()", label="Type = PacketType.AlphaNode", span="28-28"];
n2 [cluster="QuantConnect.Packets.AlphaNodePacket.AlphaNodePacket()", label="Exit QuantConnect.Packets.AlphaNodePacket.AlphaNodePacket()", span="26-26"];
m0_0 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.FundamentalDataEventArgs.FundamentalDataEventArgs(int, string)", file="AlgorithmManagerTests.cs", label="Entry QuantConnect.Brokerages.InteractiveBrokers.Client.FundamentalDataEventArgs.FundamentalDataEventArgs(int, string)", span="37-37"];
m0_1 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.FundamentalDataEventArgs.FundamentalDataEventArgs(int, string)", file="AlgorithmManagerTests.cs", label="RequestId = requestId", span="39-39"];
m0_2 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.FundamentalDataEventArgs.FundamentalDataEventArgs(int, string)", file="AlgorithmManagerTests.cs", label="Data = data", span="40-40"];
m0_3 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.FundamentalDataEventArgs.FundamentalDataEventArgs(int, string)", file="AlgorithmManagerTests.cs", label="Exit QuantConnect.Brokerages.InteractiveBrokers.Client.FundamentalDataEventArgs.FundamentalDataEventArgs(int, string)", span="37-37"];
m0_4 [file="AlgorithmManagerTests.cs", label="QuantConnect.Brokerages.InteractiveBrokers.Client.FundamentalDataEventArgs", span=""];
m2_2 [cluster="QuantConnect.Packets.AlphaResultPacket.AlphaResultPacket(string, int, System.Collections.Generic.List<QuantConnect.Algorithm.Framework.Alphas.Alpha>)", file="AlgorithmTradingTests.cs", label="Entry QuantConnect.Packets.AlphaResultPacket.AlphaResultPacket(string, int, System.Collections.Generic.List<QuantConnect.Algorithm.Framework.Alphas.Alpha>)", span="60-60"];
m2_3 [cluster="QuantConnect.Packets.AlphaResultPacket.AlphaResultPacket(string, int, System.Collections.Generic.List<QuantConnect.Algorithm.Framework.Alphas.Alpha>)", file="AlgorithmTradingTests.cs", label="UserId = userId", span="63-63"];
m2_4 [cluster="QuantConnect.Packets.AlphaResultPacket.AlphaResultPacket(string, int, System.Collections.Generic.List<QuantConnect.Algorithm.Framework.Alphas.Alpha>)", file="AlgorithmTradingTests.cs", label="AlgorithmId = algorithmId", span="64-64"];
m2_5 [cluster="QuantConnect.Packets.AlphaResultPacket.AlphaResultPacket(string, int, System.Collections.Generic.List<QuantConnect.Algorithm.Framework.Alphas.Alpha>)", file="AlgorithmTradingTests.cs", label="Alphas = alphas", span="65-65"];
m2_6 [cluster="QuantConnect.Packets.AlphaResultPacket.AlphaResultPacket(string, int, System.Collections.Generic.List<QuantConnect.Algorithm.Framework.Alphas.Alpha>)", file="AlgorithmTradingTests.cs", label="Exit QuantConnect.Packets.AlphaResultPacket.AlphaResultPacket(string, int, System.Collections.Generic.List<QuantConnect.Algorithm.Framework.Alphas.Alpha>)", span="60-60"];
m2_0 [cluster="QuantConnect.Packets.AlphaResultPacket.AlphaResultPacket()", file="AlgorithmTradingTests.cs", label="Entry QuantConnect.Packets.AlphaResultPacket.AlphaResultPacket()", span="49-49"];
m2_1 [cluster="QuantConnect.Packets.AlphaResultPacket.AlphaResultPacket()", file="AlgorithmTradingTests.cs", label="Exit QuantConnect.Packets.AlphaResultPacket.AlphaResultPacket()", span="49-49"];
m2_7 [file="AlgorithmTradingTests.cs", label="QuantConnect.Packets.AlphaResultPacket", span=""];
m3_195 [cluster="QuantConnect.Util.FuncTextWriter.FuncTextWriter(System.Action<string>)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Util.FuncTextWriter.FuncTextWriter(System.Action<string>)", span="40-40"];
m3_350 [cluster="QuantConnect.Interfaces.IAlgorithm.GetChartUpdates(bool)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Interfaces.IAlgorithm.GetChartUpdates(bool)", span="516-516"];
m3_52 [cluster="System.Collections.Concurrent.ConcurrentQueue<T>.TryDequeue(out T)", file="BacktestingResultHandler.cs", label="Entry System.Collections.Concurrent.ConcurrentQueue<T>.TryDequeue(out T)", span="0-0"];
m3_208 [cluster="QuantConnect.Packets.DebugPacket.DebugPacket(int, string, string, string, bool)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Packets.DebugPacket.DebugPacket(int, string, string, string, bool)", span="74-74"];
m3_236 [cluster="QuantConnect.Packets.HandledErrorPacket.HandledErrorPacket(string, string, string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Packets.HandledErrorPacket.HandledErrorPacket(string, string, string)", span="54-54"];
m3_19 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="BacktestingResultHandler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m3_210 [cluster="System.DateTime.ToString(string)", file="BacktestingResultHandler.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m3_147 [cluster="QuantConnect.Lean.Engine.Results.BaseResultsHandler.SaveResults(string, QuantConnect.Result)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BaseResultsHandler.SaveResults(string, QuantConnect.Result)", span="34-34"];
m3_228 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ErrorMessage(string, string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ErrorMessage(string, string)", span="612-612"];
m3_229 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ErrorMessage(string, string)", file="BacktestingResultHandler.cs", label="message == _errorMessage", span="614-614"];
m3_231 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ErrorMessage(string, string)", file="BacktestingResultHandler.cs", label="Messages.Count > 500", span="615-615"];
m3_233 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ErrorMessage(string, string)", file="BacktestingResultHandler.cs", label="Messages.Enqueue(new HandledErrorPacket(_backtestId, message, stacktrace))", span="616-616"];
m3_234 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ErrorMessage(string, string)", file="BacktestingResultHandler.cs", label="_errorMessage = message", span="617-617"];
m3_230 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ErrorMessage(string, string)", file="BacktestingResultHandler.cs", label="return;", span="614-614"];
m3_232 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ErrorMessage(string, string)", file="BacktestingResultHandler.cs", label="return;", span="615-615"];
m3_235 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ErrorMessage(string, string)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ErrorMessage(string, string)", span="612-612"];
m3_58 [cluster="System.Console.SetError(System.IO.TextWriter)", file="BacktestingResultHandler.cs", label="Entry System.Console.SetError(System.IO.TextWriter)", span="0-0"];
m3_17 [cluster="System.Collections.Concurrent.ConcurrentDictionary<K, V>.AddOrUpdate<K, V>(K, V)", file="BacktestingResultHandler.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<K, V>.AddOrUpdate<K, V>(K, V)", span="135-135"];
m3_202 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.DebugMessage(string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.DebugMessage(string)", span="553-553"];
m3_205 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.DebugMessage(string)", file="BacktestingResultHandler.cs", label="_log.Add(_algorithm.Time.ToString(DateFormat.UI) + '' '' + message)", span="560-560"];
m3_203 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.DebugMessage(string)", file="BacktestingResultHandler.cs", label="Messages.Enqueue(new DebugPacket(_projectId, _backtestId, _compileId, message))", span="555-555"];
m3_204 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.DebugMessage(string)", file="BacktestingResultHandler.cs", label="_algorithm != null", span="558-558"];
m3_206 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.DebugMessage(string)", file="BacktestingResultHandler.cs", label="_debugMessage = message", span="562-562"];
m3_207 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.DebugMessage(string)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.DebugMessage(string)", span="553-553"];
m3_304 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendStatusUpdate(QuantConnect.AlgorithmStatus, string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendStatusUpdate(QuantConnect.AlgorithmStatus, string)", span="789-789"];
m3_305 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendStatusUpdate(QuantConnect.AlgorithmStatus, string)", file="BacktestingResultHandler.cs", label="var statusPacket = new AlgorithmStatusPacket(_algorithmId, _projectId, status, message)", span="791-791"];
m3_306 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendStatusUpdate(QuantConnect.AlgorithmStatus, string)", file="BacktestingResultHandler.cs", label="_messagingHandler.Send(statusPacket)", span="792-792"];
m3_307 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendStatusUpdate(QuantConnect.AlgorithmStatus, string)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendStatusUpdate(QuantConnect.AlgorithmStatus, string)", span="789-789"];
m3_111 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", span="414-414"];
m3_135 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", file="BacktestingResultHandler.cs", label=_chartLock, span="418-418"];
m3_140 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", file="BacktestingResultHandler.cs", label="result.Results.AlphaRuntimeStatistics = AlphaRuntimeStatistics", span="429-429"];
m3_141 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", file="BacktestingResultHandler.cs", label="var key = _job.BacktestId + ''.json''", span="432-432"];
m3_142 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", file="BacktestingResultHandler.cs", label="SaveResults(key, result.Results)", span="435-435"];
m3_136 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", file="BacktestingResultHandler.cs", label="packet.Type != PacketType.BacktestResult", span="421-421"];
m3_138 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", file="BacktestingResultHandler.cs", label="var result = packet as BacktestResultPacket", span="424-424"];
m3_139 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", file="BacktestingResultHandler.cs", label="result != null", span="426-426"];
m3_144 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", file="BacktestingResultHandler.cs", label=Exception, span="443-443"];
m3_137 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", file="BacktestingResultHandler.cs", label="return;", span="421-421"];
m3_143 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", file="BacktestingResultHandler.cs", label="Log.Error(''BacktestingResultHandler.StoreResult(): Result Null.'')", span="439-439"];
m3_145 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", file="BacktestingResultHandler.cs", label="Log.Error(err)", span="445-445"];
m3_146 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.StoreResult(QuantConnect.Packets.Packet, bool)", span="414-414"];
m3_288 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)", file="BacktestingResultHandler.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m3_112 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SplitPackets(System.Collections.Generic.Dictionary<string, QuantConnect.Chart>, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<string, string>, decimal)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SplitPackets(System.Collections.Generic.Dictionary<string, QuantConnect.Chart>, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<string, string>, decimal)", span="377-377"];
m3_122 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SplitPackets(System.Collections.Generic.Dictionary<string, QuantConnect.Chart>, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<string, string>, decimal)", file="BacktestingResultHandler.cs", label="splitPackets.Add(new BacktestResultPacket(_job, new BacktestResult\r\n                {\r\n                    IsFrameworkAlgorithm = _algorithm.IsFrameworkAlgorithm,\r\n                    Charts = new Dictionary<string, Chart>()\r\n                    {\r\n                        {chart.Name, chart}\r\n                    }\r\n                }, progress))", span="386-393"];
m3_123 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SplitPackets(System.Collections.Generic.Dictionary<string, QuantConnect.Chart>, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<string, string>, decimal)", file="BacktestingResultHandler.cs", label="splitPackets.Add(new BacktestResultPacket(_job, new BacktestResult {IsFrameworkAlgorithm = _algorithm.IsFrameworkAlgorithm, AlphaRuntimeStatistics = AlphaRuntimeStatistics}, progress))", span="397-397"];
m3_124 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SplitPackets(System.Collections.Generic.Dictionary<string, QuantConnect.Chart>, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<string, string>, decimal)", file="BacktestingResultHandler.cs", label="splitPackets.Add(new BacktestResultPacket(_job, new BacktestResult { IsFrameworkAlgorithm = _algorithm.IsFrameworkAlgorithm, Orders = deltaOrders }, progress))", span="400-400"];
m3_125 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SplitPackets(System.Collections.Generic.Dictionary<string, QuantConnect.Chart>, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<string, string>, decimal)", file="BacktestingResultHandler.cs", label="splitPackets.Add(new BacktestResultPacket(_job, new BacktestResult { IsFrameworkAlgorithm = _algorithm.IsFrameworkAlgorithm, RuntimeStatistics = runtimeStatistics }, progress))", span="403-403"];
m3_119 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SplitPackets(System.Collections.Generic.Dictionary<string, QuantConnect.Chart>, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<string, string>, decimal)", file="BacktestingResultHandler.cs", label="var splitPackets = new List<BacktestResultPacket>()", span="380-380"];
m3_120 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SplitPackets(System.Collections.Generic.Dictionary<string, QuantConnect.Chart>, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<string, string>, decimal)", file="BacktestingResultHandler.cs", label="deltaCharts.Values", span="381-381"];
m3_121 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SplitPackets(System.Collections.Generic.Dictionary<string, QuantConnect.Chart>, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<string, string>, decimal)", file="BacktestingResultHandler.cs", label="chart.Series.Values.Sum(x => x.Values.Count) == 0", span="384-384"];
m3_126 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SplitPackets(System.Collections.Generic.Dictionary<string, QuantConnect.Chart>, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<string, string>, decimal)", file="BacktestingResultHandler.cs", label="return splitPackets;", span="405-405"];
m3_127 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SplitPackets(System.Collections.Generic.Dictionary<string, QuantConnect.Chart>, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<string, string>, decimal)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SplitPackets(System.Collections.Generic.Dictionary<string, QuantConnect.Chart>, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<string, string>, decimal)", span="377-377"];
m3_265 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SamplePerformance(System.DateTime, decimal)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SamplePerformance(System.DateTime, decimal)", span="689-689"];
m3_266 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SamplePerformance(System.DateTime, decimal)", file="BacktestingResultHandler.cs", label="Sample(''Strategy Equity'', ''Daily Performance'', 1, SeriesType.Bar, time, value, ''%'')", span="692-692"];
m3_267 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SamplePerformance(System.DateTime, decimal)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SamplePerformance(System.DateTime, decimal)", span="689-689"];
m3_268 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleBenchmark(System.DateTime, decimal)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleBenchmark(System.DateTime, decimal)", span="701-701"];
m3_269 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleBenchmark(System.DateTime, decimal)", file="BacktestingResultHandler.cs", label="Sample(''Benchmark'', ''Benchmark'', 0, SeriesType.Line, time, value, ''$'')", span="703-703"];
m3_270 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleBenchmark(System.DateTime, decimal)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleBenchmark(System.DateTime, decimal)", span="701-701"];
m3_131 [cluster="System.Collections.Generic.List<T>.Add(T)", file="BacktestingResultHandler.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m3_261 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleEquity(System.DateTime, decimal)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleEquity(System.DateTime, decimal)", span="675-675"];
m3_262 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleEquity(System.DateTime, decimal)", file="BacktestingResultHandler.cs", label="Sample(''Strategy Equity'', ''Equity'', 0, SeriesType.Candle, time, value, ''$'')", span="678-678"];
m3_263 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleEquity(System.DateTime, decimal)", file="BacktestingResultHandler.cs", label="_daysProcessed = (time - _algorithm.StartDate).TotalDays", span="681-681"];
m3_264 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleEquity(System.DateTime, decimal)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleEquity(System.DateTime, decimal)", span="675-675"];
m3_293 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Exit()", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Exit()", span="759-759"];
m3_294 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Exit()", file="BacktestingResultHandler.cs", label="!_exitTriggered", span="762-762"];
m3_295 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Exit()", file="BacktestingResultHandler.cs", label="ProcessSynchronousEvents(true)", span="764-764"];
m3_296 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Exit()", file="BacktestingResultHandler.cs", label="var logLocation = SaveLogs(_algorithmId, _log)", span="765-765"];
m3_297 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Exit()", file="BacktestingResultHandler.cs", label="SystemDebugMessage(''Your log was successfully created and can be retrieved from: '' + logLocation)", span="766-766"];
m3_298 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Exit()", file="BacktestingResultHandler.cs", label="_exitTriggered = true", span="770-770"];
m3_299 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Exit()", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Exit()", span="759-759"];
m3_292 [cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", file="BacktestingResultHandler.cs", label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0"];
m3_55 [cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98"];
m3_218 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.LogMessage(string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.LogMessage(string)", span="585-585"];
m3_221 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.LogMessage(string)", file="BacktestingResultHandler.cs", label="_log.Add(_algorithm.Time.ToString(DateFormat.UI) + '' '' + message)", span="591-591"];
m3_219 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.LogMessage(string)", file="BacktestingResultHandler.cs", label="Messages.Enqueue(new LogPacket(_backtestId, message))", span="587-587"];
m3_220 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.LogMessage(string)", file="BacktestingResultHandler.cs", label="_algorithm != null", span="589-589"];
m3_222 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.LogMessage(string)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.LogMessage(string)", span="585-585"];
m3_12 [cluster="System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue()", file="BacktestingResultHandler.cs", label="Entry System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue()", span="0-0"];
m3_309 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleAssetPrices(QuantConnect.Symbol, System.DateTime, decimal)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleAssetPrices(QuantConnect.Symbol, System.DateTime, decimal)", span="801-801"];
m3_310 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleAssetPrices(QuantConnect.Symbol, System.DateTime, decimal)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleAssetPrices(QuantConnect.Symbol, System.DateTime, decimal)", span="801-801"];
m3_16 [cluster="QuantConnect.Chart.Chart(string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Chart.Chart(string)", span="64-64"];
m3_128 [cluster="System.Collections.Generic.List<T>.List()", file="BacktestingResultHandler.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m3_132 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Entry lambda expression", span="384-384"];
m3_200 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Log.Error(msg)", span="545-545"];
m3_197 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Log.Trace(msg)", span="544-544"];
m3_113 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Entry lambda expression", span="297-297"];
m3_116 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Entry lambda expression", span="297-297"];
m3_199 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Entry lambda expression", span="545-545"];
m3_201 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Exit lambda expression", span="545-545"];
m3_196 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Entry lambda expression", span="544-544"];
m3_198 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Exit lambda expression", span="544-544"];
m3_115 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Exit lambda expression", span="297-297"];
m3_114 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="t.Key", span="297-297"];
m3_118 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Exit lambda expression", span="297-297"];
m3_117 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="t.Value", span="297-297"];
m3_133 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="x.Values.Count", span="384-384"];
m3_134 [cluster="lambda expression", file="BacktestingResultHandler.cs", label="Exit lambda expression", span="384-384"];
m3_259 [cluster="QuantConnect.Time.UnixTimeStampToDateTime(double)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Time.UnixTimeStampToDateTime(double)", span="127-127"];
m3_244 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", span="642-642"];
m3_255 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", file="BacktestingResultHandler.cs", label="series.Values.Add(new ChartPoint(time, value))", span="665-665"];
m3_245 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", file="BacktestingResultHandler.cs", label=_chartLock, span="644-644"];
m3_247 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", file="BacktestingResultHandler.cs", label="!Charts.TryGetValue(chartName, out chart)", span="648-648"];
m3_249 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", file="BacktestingResultHandler.cs", label="Charts.AddOrUpdate(chartName, chart)", span="651-651"];
m3_251 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", file="BacktestingResultHandler.cs", label="!chart.Series.TryGetValue(seriesName, out series)", span="656-656"];
m3_252 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", file="BacktestingResultHandler.cs", label="series = new Series(seriesName, seriesType, seriesIndex, unit)", span="658-658"];
m3_254 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", file="BacktestingResultHandler.cs", label="series.Values.Count == 0 || time > Time.UnixTimeStampToDateTime(series.Values[series.Values.Count - 1].x)", span="663-663"];
m3_246 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", file="BacktestingResultHandler.cs", label="Chart chart", span="647-647"];
m3_248 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", file="BacktestingResultHandler.cs", label="chart = new Chart(chartName)", span="650-650"];
m3_250 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", file="BacktestingResultHandler.cs", label="Series series", span="655-655"];
m3_253 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", file="BacktestingResultHandler.cs", label="chart.Series.Add(seriesName, series)", span="659-659"];
m3_256 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Sample(string, string, int, QuantConnect.SeriesType, System.DateTime, decimal, string)", span="642-642"];
m3_190 [cluster="System.Convert.ToInt32(double)", file="BacktestingResultHandler.cs", label="Entry System.Convert.ToInt32(double)", span="0-0"];
m3_20 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", span="209-209"];
m3_21 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", file="BacktestingResultHandler.cs", label="_algorithmId = job.AlgorithmId", span="211-211"];
m3_22 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", file="BacktestingResultHandler.cs", label="_projectId = job.ProjectId", span="212-212"];
m3_23 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", file="BacktestingResultHandler.cs", label="_messagingHandler = messagingHandler", span="213-213"];
m3_24 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", file="BacktestingResultHandler.cs", label="_transactionHandler = transactionHandler", span="214-214"];
m3_25 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", file="BacktestingResultHandler.cs", label="_setupHandler = setupHandler", span="215-215"];
m3_26 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", file="BacktestingResultHandler.cs", label="_job = (BacktestNodePacket)job", span="216-216"];
m3_27 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", file="BacktestingResultHandler.cs", label="_job == null", span="217-217"];
m3_29 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", file="BacktestingResultHandler.cs", label="_compileId = _job.CompileId", span="218-218"];
m3_30 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", file="BacktestingResultHandler.cs", label="_backtestId = _job.BacktestId", span="219-219"];
m3_28 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", file="BacktestingResultHandler.cs", label="throw new Exception(''BacktestingResultHandler.Constructor(): Submitted Job type invalid.'');", span="217-217"];
m3_31 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Initialize(QuantConnect.Packets.AlgorithmNodePacket, QuantConnect.Interfaces.IMessagingHandler, QuantConnect.Interfaces.IApi, QuantConnect.Lean.Engine.DataFeeds.IDataFeed, QuantConnect.Lean.Engine.Setup.ISetupHandler, QuantConnect.Lean.Engine.TransactionHandlers.ITransactionHandler)", span="209-209"];
m3_300 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", span="841-841"];
m3_320 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="_algorithm == null", span="843-843"];
m3_322 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="var time = _algorithm.UtcTime", span="845-845"];
m3_323 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="time > _nextSample || forceProcess", span="847-847"];
m3_324 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="_nextSample = time.Add(ResamplePeriod)", span="850-850"];
m3_325 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="SampleEquity(time, Math.Round(_algorithm.Portfolio.TotalPortfolioValue, 4))", span="853-853"];
m3_326 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="SampleRange(_algorithm.GetChartUpdates())", span="856-856"];
m3_327 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="_algorithm.Securities", span="859-859"];
m3_329 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="SampleAssetPrices(security.Symbol, time, security.Price)", span="863-863"];
m3_331 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="_algorithm.DebugMessages.Count > 0 && DateTime.UtcNow.Ticks < endTime", span="869-869"];
m3_333 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="_algorithm.DebugMessages.TryDequeue(out message)", span="872-872"];
m3_334 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="DebugMessage(message)", span="874-874"];
m3_336 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="_algorithm.ErrorMessages.Count > 0 && DateTime.UtcNow.Ticks < endTime", span="880-880"];
m3_338 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="_algorithm.ErrorMessages.TryDequeue(out message)", span="883-883"];
m3_339 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="ErrorMessage(message)", span="885-885"];
m3_341 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="_algorithm.LogMessages.Count > 0 && DateTime.UtcNow.Ticks < endTime", span="891-891"];
m3_343 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="_algorithm.LogMessages.TryDequeue(out message)", span="894-894"];
m3_344 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="LogMessage(message)", span="896-896"];
m3_345 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="_algorithm.RuntimeStatistics", span="901-901"];
m3_346 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="RuntimeStatistic(pair.Key, pair.Value)", span="903-903"];
m3_321 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="return;", span="843-843"];
m3_330 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="var endTime = DateTime.UtcNow.AddMilliseconds(250).Ticks", span="868-868"];
m3_328 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="var security = kvp.Value", span="861-861"];
m3_332 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="string message", span="871-871"];
m3_335 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="endTime = DateTime.UtcNow.AddMilliseconds(250).Ticks", span="879-879"];
m3_337 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="string message", span="882-882"];
m3_340 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="endTime = DateTime.UtcNow.AddMilliseconds(250).Ticks", span="890-890"];
m3_342 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="string message", span="893-893"];
m3_347 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.ProcessSynchronousEvents(bool)", span="841-841"];
m3_223 [cluster="QuantConnect.Packets.LogPacket.LogPacket(string, string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Packets.LogPacket.LogPacket(string, string)", span="47-47"];
m3_54 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", span="278-278"];
m3_59 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="Algorithm == null || Algorithm.Transactions == null || _processingFinalPacket", span="283-283"];
m3_61 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="DateTime.Now <= _nextUpdate || !(_daysProcessed > (_lastDaysProcessed + 1))", span="288-288"];
m3_64 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="deltaOrders = (from order in _transactionHandler.Orders\r\n                        where order.Value.Time.Date >= _lastUpdate && order.Value.Status == OrderStatus.Filled\r\n                        select order).ToDictionary(t => t.Key, t => t.Value)", span="295-297"];
m3_69 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="_lastUpdate = Algorithm.Time.Date", span="310-310"];
m3_70 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="_lastDaysProcessed = _daysProcessed", span="311-311"];
m3_71 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="_nextUpdate = DateTime.Now.AddSeconds(0.5)", span="312-312"];
m3_75 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label=_chartLock, span="320-320"];
m3_76 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label=Charts, span="323-323"];
m3_80 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label=_runtimeLock, span="333-333"];
m3_81 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label=_runtimeStatistics, span="335-335"];
m3_83 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="runtimeStatistics.Add(''Unrealized'', ''$'' + _algorithm.Portfolio.TotalUnrealizedProfit.ToString(''N2''))", span="340-340"];
m3_84 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="runtimeStatistics.Add(''Fees'', ''-$'' + _algorithm.Portfolio.TotalFees.ToString(''N2''))", span="341-341"];
m3_85 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="runtimeStatistics.Add(''Net Profit'', ''$'' + (_algorithm.Portfolio.TotalProfit - _algorithm.Portfolio.TotalFees).ToString(''N2''))", span="342-342"];
m3_86 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="runtimeStatistics.Add(''Return'', ((_algorithm.Portfolio.TotalPortfolioValue - _setupHandler.StartingPortfolioValue) / _setupHandler.StartingPortfolioValue).ToString(''P''))", span="343-343"];
m3_87 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="runtimeStatistics.Add(''Equity'', ''$'' + _algorithm.Portfolio.TotalPortfolioValue.ToString(''N2''))", span="344-344"];
m3_88 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="var progress = Convert.ToDecimal(_daysProcessed / _jobDays)", span="347-347"];
m3_91 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="var completeResult = new BacktestResult(_algorithm.IsFrameworkAlgorithm, Charts, _transactionHandler.Orders, Algorithm.Transactions.TransactionRecord, new Dictionary<string, string>(), runtimeStatistics, new Dictionary<string, AlgorithmPerformance>())", span="351-351"];
m3_92 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="var complete = new BacktestResultPacket(_job, completeResult, progress)", span="352-352"];
m3_93 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="DateTime.Now > _nextS3Update", span="354-354"];
m3_94 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="_nextS3Update = DateTime.Now.AddSeconds(30)", span="356-356"];
m3_95 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="StoreResult(complete, false)", span="357-357"];
m3_96 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="var splitPackets = SplitPackets(deltaCharts, deltaOrders, runtimeStatistics, progress)", span="361-361"];
m3_98 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="_messagingHandler.Send(backtestingPacket)", span="365-365"];
m3_60 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="return;", span="285-285"];
m3_62 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="return;", span="288-288"];
m3_63 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="var deltaOrders = new Dictionary<int, Order>()", span="291-291"];
m3_65 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label=Exception, span="299-299"];
m3_67 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="deltaOrders.Count > 50", span="305-305"];
m3_68 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="deltaOrders.Clear()", span="305-305"];
m3_72 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label=Exception, span="314-314"];
m3_74 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="var deltaCharts = new Dictionary<string, Chart>()", span="319-319"];
m3_78 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="deltaCharts.Add(chart.Name, chart.GetUpdates())", span="327-327"];
m3_77 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="var chart = kvp.Value", span="325-325"];
m3_79 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="var runtimeStatistics = new Dictionary<string, string>()", span="332-332"];
m3_82 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="runtimeStatistics.Add(pair.Key, pair.Value)", span="337-337"];
m3_89 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="progress > 0.999m", span="348-348"];
m3_90 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="progress = 0.999m", span="348-348"];
m3_97 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label=splitPackets, span="363-363"];
m3_66 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="Log.Error(err, ''Transactions'')", span="301-301"];
m3_73 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="Log.Error(err, ''Can't update variables'')", span="316-316"];
m3_99 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label=Exception, span="368-368"];
m3_100 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="Log.Error(err)", span="370-370"];
m3_101 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Update()", span="278-278"];
m3_33 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", span="225-225"];
m3_49 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="Console.SetError(StandardError)", span="272-272"];
m3_35 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="_lastDaysProcessed = 5", span="229-229"];
m3_36 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="!(_exitTriggered && Messages.Count == 0)", span="237-237"];
m3_37 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="Messages.Count == 0", span="240-240"];
m3_40 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="Messages.TryDequeue(out packet)", span="248-248"];
m3_41 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="_messagingHandler.Send(packet)", span="250-250"];
m3_42 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="Update()", span="255-255"];
m3_45 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="_algorithm.RunTimeError = err", span="264-264"];
m3_47 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="_isActive = false", span="268-268"];
m3_48 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="Console.SetOut(StandardOut)", span="271-271"];
m3_34 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="var lastMessage = ''''", span="228-228"];
m3_43 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label=Exception, span="259-259"];
m3_46 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="Log.Trace(''BacktestingResultHandler.Run(): Ending Thread...'')", span="267-267"];
m3_38 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="Thread.Sleep(50)", span="242-242"];
m3_39 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="Packet packet", span="247-247"];
m3_44 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="Log.Error(err)", span="262-262"];
m3_50 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.Run()", span="225-225"];
m3_56 [cluster="QuantConnect.Logging.Log.Trace(string, bool)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106"];
m3_103 [cluster="Unk.ToDictionary", file="BacktestingResultHandler.cs", label="Entry Unk.ToDictionary", span=""];
m3_291 [cluster="QuantConnect.Series.Purge()", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Series.Purge()", span="349-349"];
m3_258 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="BacktestingResultHandler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m3_14 [cluster="object.Object()", file="BacktestingResultHandler.cs", label="Entry object.Object()", span="0-0"];
m3_163 [cluster="System.Collections.Generic.List<T>.Clear()", file="BacktestingResultHandler.cs", label="Entry System.Collections.Generic.List<T>.Clear()", span="0-0"];
m3_108 [cluster="System.Convert.ToDecimal(double)", file="BacktestingResultHandler.cs", label="Entry System.Convert.ToDecimal(double)", span="0-0"];
m3_193 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SecurityType(System.Collections.Generic.List<QuantConnect.SecurityType>)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SecurityType(System.Collections.Generic.List<QuantConnect.SecurityType>)", span="598-598"];
m3_225 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SecurityType(System.Collections.Generic.List<QuantConnect.SecurityType>)", file="BacktestingResultHandler.cs", label="Messages.Enqueue(packet)", span="604-604"];
m3_224 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SecurityType(System.Collections.Generic.List<QuantConnect.SecurityType>)", file="BacktestingResultHandler.cs", label="var packet = new SecurityTypesPacket\r\n            {\r\n                Types = types\r\n            }", span="600-603"];
m3_226 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SecurityType(System.Collections.Generic.List<QuantConnect.SecurityType>)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SecurityType(System.Collections.Generic.List<QuantConnect.SecurityType>)", span="598-598"];
m3_106 [cluster="QuantConnect.Chart.GetUpdates()", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Chart.GetUpdates()", span="91-91"];
m3_110 [cluster="QuantConnect.Packets.BacktestResultPacket.BacktestResultPacket(QuantConnect.Packets.BacktestNodePacket, QuantConnect.Packets.BacktestResult, decimal)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Packets.BacktestResultPacket.BacktestResultPacket(QuantConnect.Packets.BacktestNodePacket, QuantConnect.Packets.BacktestResult, decimal)", span="171-171"];
m3_32 [cluster="System.Exception.Exception(string)", file="BacktestingResultHandler.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m3_57 [cluster="System.Console.SetOut(System.IO.TextWriter)", file="BacktestingResultHandler.cs", label="Entry System.Console.SetOut(System.IO.TextWriter)", span="0-0"];
m3_271 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", span="710-710"];
m3_285 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="thisSeries.Values.Add(lastValue)", span="743-743"];
m3_272 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label=_chartLock, span="712-712"];
m3_274 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="!Charts.ContainsKey(update.Name)", span="717-717"];
m3_275 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="Charts.AddOrUpdate(update.Name, new Chart(update.Name))", span="719-719"];
m3_277 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="var chart = Charts[update.Name]", span="726-726"];
m3_280 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="var thisSeries = chart.Series[series.Name]", span="735-735"];
m3_283 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="var lastValue = series.Values.Last()", span="741-741"];
m3_284 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="thisSeries.Purge()", span="742-742"];
m3_276 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="update.Series.Values", span="723-723"];
m3_273 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label=updates, span="714-714"];
m3_278 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="!chart.Series.ContainsKey(series.Name)", span="727-727"];
m3_279 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="chart.Series.Add(series.Name, new Series(series.Name, series.SeriesType, series.Index, series.Unit)\r\n                            {\r\n                                Color = series.Color, ScatterMarkerSymbol = series.ScatterMarkerSymbol\r\n                            })", span="729-732"];
m3_286 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="chart.Series[series.Name].Values.AddRange(series.Values)", span="748-748"];
m3_281 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="series.Values.Count > 0", span="736-736"];
m3_282 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="series.SeriesType == SeriesType.Pie", span="739-739"];
m3_287 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SampleRange(System.Collections.Generic.List<QuantConnect.Chart>)", span="710-710"];
m3_109 [cluster="QuantConnect.Packets.BacktestResult.BacktestResult(bool, System.Collections.Generic.IDictionary<string, QuantConnect.Chart>, System.Collections.Generic.IDictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.IDictionary<System.DateTime, decimal>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.Dictionary<string, QuantConnect.Statistics.AlgorithmPerformance>, QuantConnect.Statistics.AlgorithmPerformance)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Packets.BacktestResult.BacktestResult(bool, System.Collections.Generic.IDictionary<string, QuantConnect.Chart>, System.Collections.Generic.IDictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.IDictionary<System.DateTime, decimal>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.Dictionary<string, QuantConnect.Statistics.AlgorithmPerformance>, QuantConnect.Statistics.AlgorithmPerformance)", span="224-224"];
m3_13 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary()", file="BacktestingResultHandler.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary()", span="0-0"];
m3_301 [cluster="QuantConnect.Lean.Engine.Results.BaseResultsHandler.SaveLogs(string, System.Collections.Generic.IEnumerable<string>)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BaseResultsHandler.SaveLogs(string, System.Collections.Generic.IEnumerable<string>)", span="22-22"];
m3_191 [cluster="System.Convert.ToInt32(int)", file="BacktestingResultHandler.cs", label="Entry System.Convert.ToInt32(int)", span="0-0"];
m3_53 [cluster="QuantConnect.Interfaces.IMessagingHandler.Send(QuantConnect.Packets.Packet)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Interfaces.IMessagingHandler.Send(QuantConnect.Packets.Packet)", span="50-50"];
m3_192 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="BacktestingResultHandler.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m3_164 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", span="503-503"];
m3_183 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", color=green, community=0, file="BacktestingResultHandler.cs", label="Console.SetError(new FuncTextWriter(algorithm.Error))", prediction=0, span="539-539"];
m3_182 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="Console.SetOut(new FuncTextWriter(algorithm.Debug))", span="538-538"];
m3_178 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", color=green, community=0, file="BacktestingResultHandler.cs", label="!types.Contains(security.Type)", prediction=1, span="531-531"];
m3_175 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="var types = new List<SecurityType>()", span="526-526"];
m3_177 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="var security = kvp.Value", span="529-529"];
m3_179 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", color=green, community=0, file="BacktestingResultHandler.cs", label="types.Add(security.Type)", prediction=1, span="531-531"];
m3_176 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="_algorithm.Securities", span="527-527"];
m3_180 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", color=green, community=0, file="BacktestingResultHandler.cs", label="SecurityType(types)", prediction=1, span="533-533"];
m3_181 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="Config.GetBool(''forward-console-messages'', true)", span="535-535"];
m3_165 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="_algorithm = algorithm", span="505-505"];
m3_185 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="Console.SetError(new FuncTextWriter(msg => Log.Error(msg)))", span="545-545"];
m3_184 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="Console.SetOut(new FuncTextWriter(msg => Log.Trace(msg)))", span="544-544"];
m3_174 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="_debugMessagePeriod = ''backtest''", span="523-523"];
m3_166 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="var totalMinutes = (_job.PeriodFinish - _job.PeriodStart).TotalMinutes", span="508-508"];
m3_168 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="_resamplePeriod = TimeSpan.FromMinutes(resampleMinutes)", span="510-510"];
m3_170 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="_jobDays = Algorithm.Securities.Count > 0\r\n                ? Time.TradeableDates(Algorithm.Securities.Values, _job.PeriodStart, _job.PeriodFinish)\r\n                : Convert.ToInt32((_job.PeriodFinish.Date - _job.PeriodStart.Date).TotalDays) + 1", span="514-516"];
m3_171 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="_debugMessageMax = Convert.ToInt32(10 * _jobDays)", span="519-519"];
m3_172 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="_debugMessageMax < _debugMessageMin", span="521-521"];
m3_173 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="_debugMessageMax = _debugMessageMin", span="521-521"];
m3_167 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="var resampleMinutes = (totalMinutes < (_minimumSamplePeriod * _samples)) ? _minimumSamplePeriod : (totalMinutes / _samples)", span="509-509"];
m3_169 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="Log.Trace(''BacktestingResultHandler(): Sample Period Set: '' + resampleMinutes.ToString(''00.00''))", span="511-511"];
m3_186 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SetAlgorithm(QuantConnect.Interfaces.IAlgorithm)", span="503-503"];
m3_349 [cluster="System.Math.Round(decimal, int)", file="BacktestingResultHandler.cs", label="Entry System.Math.Round(decimal, int)", span="0-0"];
m3_104 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Clear()", file="BacktestingResultHandler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Clear()", span="0-0"];
m3_211 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SystemDebugMessage(string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SystemDebugMessage(string)", span="569-569"];
m3_214 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SystemDebugMessage(string)", file="BacktestingResultHandler.cs", label="_log.Add(_algorithm.Time.ToString(DateFormat.UI) + '' '' + message)", span="576-576"];
m3_212 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SystemDebugMessage(string)", file="BacktestingResultHandler.cs", label="Messages.Enqueue(new SystemDebugPacket(_projectId, _backtestId, _compileId, message))", span="571-571"];
m3_213 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SystemDebugMessage(string)", file="BacktestingResultHandler.cs", label="_algorithm != null", span="574-574"];
m3_215 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SystemDebugMessage(string)", file="BacktestingResultHandler.cs", label="_debugMessage = message", span="578-578"];
m3_216 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SystemDebugMessage(string)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SystemDebugMessage(string)", span="569-569"];
m3_162 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="BacktestingResultHandler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0"];
m3_217 [cluster="QuantConnect.Packets.SystemDebugPacket.SystemDebugPacket(int, string, string, string, bool)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Packets.SystemDebugPacket.SystemDebugPacket(int, string, string, string, bool)", span="17-17"];
m3_15 [cluster="System.TimeSpan.FromSeconds(double)", file="BacktestingResultHandler.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m3_107 [cluster="decimal.ToString(string)", file="BacktestingResultHandler.cs", label="Entry decimal.ToString(string)", span="0-0"];
m3_313 [cluster="System.Collections.Concurrent.ConcurrentQueue<T>.Clear<T>()", file="BacktestingResultHandler.cs", label="Entry System.Collections.Concurrent.ConcurrentQueue<T>.Clear<T>()", span="72-72"];
m3_289 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="BacktestingResultHandler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m3_194 [cluster="QuantConnect.Configuration.Config.GetBool(string, bool)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Configuration.Config.GetBool(string, bool)", span="141-141"];
m3_308 [cluster="QuantConnect.Packets.AlgorithmStatusPacket.AlgorithmStatusPacket(string, int, QuantConnect.AlgorithmStatus, string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Packets.AlgorithmStatusPacket.AlgorithmStatusPacket(string, int, QuantConnect.AlgorithmStatus, string)", span="74-74"];
m3_18 [cluster="QuantConnect.Series.Series(string, QuantConnect.SeriesType, int, string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Series.Series(string, QuantConnect.SeriesType, int, string)", span="228-228"];
m3_290 [cluster="System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", file="BacktestingResultHandler.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", span="0-0"];
m3_351 [cluster="System.DateTime.AddMilliseconds(double)", file="BacktestingResultHandler.cs", label="Entry System.DateTime.AddMilliseconds(double)", span="0-0"];
m3_148 [cluster="QuantConnect.Logging.Log.Error(string, bool)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="65-65"];
m3_187 [cluster="System.TimeSpan.FromMinutes(double)", file="BacktestingResultHandler.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m3_348 [cluster="System.DateTime.Add(System.TimeSpan)", file="BacktestingResultHandler.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m3_130 [cluster="QuantConnect.Packets.BacktestResult.BacktestResult()", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Packets.BacktestResult.BacktestResult()", span="216-216"];
m3_237 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.RuntimeError(string, string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.RuntimeError(string, string)", span="625-625"];
m3_238 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.RuntimeError(string, string)", file="BacktestingResultHandler.cs", label="PurgeQueue()", span="627-627"];
m3_239 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.RuntimeError(string, string)", file="BacktestingResultHandler.cs", label="Messages.Enqueue(new RuntimeErrorPacket(_job.UserId, _backtestId, message, stacktrace))", span="628-628"];
m3_240 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.RuntimeError(string, string)", file="BacktestingResultHandler.cs", label="_errorMessage = message", span="629-629"];
m3_241 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.RuntimeError(string, string)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.RuntimeError(string, string)", span="625-625"];
m3_257 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="BacktestingResultHandler.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m3_129 [cluster="System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, int>)", file="BacktestingResultHandler.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, int>)", span="0-0"];
m3_314 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.RuntimeStatistic(string, string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.RuntimeStatistic(string, string)", span="820-820"];
m3_315 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.RuntimeStatistic(string, string)", file="BacktestingResultHandler.cs", label=_runtimeLock, span="822-822"];
m3_316 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.RuntimeStatistic(string, string)", file="BacktestingResultHandler.cs", label="_runtimeStatistics[key] = value", span="824-824"];
m3_317 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.RuntimeStatistic(string, string)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.RuntimeStatistic(string, string)", span="820-820"];
m3_242 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.PurgeQueue()", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.PurgeQueue()", span="809-809"];
m3_311 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.PurgeQueue()", file="BacktestingResultHandler.cs", label="Messages.Clear()", span="811-811"];
m3_312 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.PurgeQueue()", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.PurgeQueue()", span="809-809"];
m3_188 [cluster="double.ToString(string)", file="BacktestingResultHandler.cs", label="Entry double.ToString(string)", span="0-0"];
m3_51 [cluster="System.Threading.Thread.Sleep(int)", file="BacktestingResultHandler.cs", label="Entry System.Threading.Thread.Sleep(int)", span="0-0"];
m3_149 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", span="459-459"];
m3_150 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", file="BacktestingResultHandler.cs", label="FinalStatistics = statisticsResults.Summary", span="463-463"];
m3_151 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", file="BacktestingResultHandler.cs", label="var charts = new Dictionary<string, Chart>(Charts)", span="466-466"];
m3_152 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", file="BacktestingResultHandler.cs", label="_processingFinalPacket = true", span="467-467"];
m3_155 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", file="BacktestingResultHandler.cs", label="var result = new BacktestResultPacket((BacktestNodePacket) job,\r\n                    new BacktestResult(_algorithm.IsFrameworkAlgorithm, charts, orders, profitLoss, statisticsResults.Summary, banner, statisticsResults.RollingPerformances, statisticsResults.TotalPerformance), 1m)\r\n                {\r\n                    ProcessingTime = (DateTime.Now - _startTime).TotalSeconds,\r\n                    DateFinished = DateTime.Now,\r\n                    Progress = 1\r\n                }", span="476-482"];
m3_156 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", file="BacktestingResultHandler.cs", label="StoreResult(result)", span="485-485"];
m3_157 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", file="BacktestingResultHandler.cs", label="_messagingHandler.Send(result)", span="488-488"];
m3_153 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", file="BacktestingResultHandler.cs", label="statisticsResults.RollingPerformances.Values", span="470-470"];
m3_158 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", file="BacktestingResultHandler.cs", label="Log.Trace(''BacktestingResultHandler.SendAnalysisResult(): Processed final packet'')", span="490-490"];
m3_154 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", file="BacktestingResultHandler.cs", label="ap.ClosedTrades.Clear()", span="472-472"];
m3_159 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", file="BacktestingResultHandler.cs", label=Exception, span="492-492"];
m3_160 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", file="BacktestingResultHandler.cs", label="Log.Error(err)", span="494-494"];
m3_161 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.SendFinalResult(QuantConnect.Packets.AlgorithmNodePacket, System.Collections.Generic.Dictionary<int, QuantConnect.Orders.Order>, System.Collections.Generic.Dictionary<System.DateTime, decimal>, System.Collections.Generic.Dictionary<string, QuantConnect.Holding>, QuantConnect.Securities.CashBook, QuantConnect.Statistics.StatisticsResults, System.Collections.Generic.Dictionary<string, string>)", span="459-459"];
m3_227 [cluster="QuantConnect.Packets.SecurityTypesPacket.SecurityTypesPacket()", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Packets.SecurityTypesPacket.SecurityTypesPacket()", span="52-52"];
m3_243 [cluster="QuantConnect.Packets.RuntimeErrorPacket.RuntimeErrorPacket(int, string, string, string)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Packets.RuntimeErrorPacket.RuntimeErrorPacket(int, string, string, string)", span="60-60"];
m3_105 [cluster="System.DateTime.AddSeconds(double)", file="BacktestingResultHandler.cs", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
m3_102 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="BacktestingResultHandler.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m3_209 [cluster="System.Collections.Concurrent.ConcurrentQueue<T>.Enqueue(T)", file="BacktestingResultHandler.cs", label="Entry System.Collections.Concurrent.ConcurrentQueue<T>.Enqueue(T)", span="0-0"];
m3_0 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", span="179-179"];
m3_1 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", file="BacktestingResultHandler.cs", label="_messages = new ConcurrentQueue<Packet>()", span="182-182"];
m3_2 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", file="BacktestingResultHandler.cs", label="_charts = new ConcurrentDictionary<string, Chart>()", span="183-183"];
m3_3 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", file="BacktestingResultHandler.cs", label="_chartLock = new Object()", span="184-184"];
m3_4 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", file="BacktestingResultHandler.cs", label="_isActive = true", span="185-185"];
m3_5 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", file="BacktestingResultHandler.cs", label="_notificationPeriod = TimeSpan.FromSeconds(2)", span="188-188"];
m3_6 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", file="BacktestingResultHandler.cs", label="_exitTriggered = false", span="189-189"];
m3_7 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", file="BacktestingResultHandler.cs", label="_startTime = DateTime.Now", span="192-192"];
m3_8 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", file="BacktestingResultHandler.cs", label="Charts.AddOrUpdate(''Strategy Equity'', new Chart(''Strategy Equity''))", span="195-195"];
m3_9 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", file="BacktestingResultHandler.cs", label="Charts[''Strategy Equity''].Series.Add(''Equity'', new Series(''Equity'', SeriesType.Candle, 0, ''$''))", span="196-196"];
m3_10 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", file="BacktestingResultHandler.cs", label="Charts[''Strategy Equity''].Series.Add(''Daily Performance'', new Series(''Daily Performance'', SeriesType.Bar, 1, ''%''))", span="197-197"];
m3_11 [cluster="QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", file="BacktestingResultHandler.cs", label="Exit QuantConnect.Lean.Engine.Results.BacktestingResultHandler.BacktestingResultHandler()", span="179-179"];
m3_260 [cluster="QuantConnect.ChartPoint.ChartPoint(System.DateTime, decimal)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.ChartPoint.ChartPoint(System.DateTime, decimal)", span="411-411"];
m3_189 [cluster="QuantConnect.Time.TradeableDates(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, System.DateTime, System.DateTime)", file="BacktestingResultHandler.cs", label="Entry QuantConnect.Time.TradeableDates(System.Collections.Generic.ICollection<QuantConnect.Securities.Security>, System.DateTime, System.DateTime)", span="397-397"];
m3_352 [file="BacktestingResultHandler.cs", label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", span=""];
m4_0 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.BaseDataCollectionSubscriptionEnumeratorFactory(System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.BaseDataCollectionSubscriptionEnumeratorFactory(System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", span="38-38"];
m4_1 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.BaseDataCollectionSubscriptionEnumeratorFactory(System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="_tradableDaysProvider = tradableDaysProvider ?? (request => request.TradableDays)", span="40-40"];
m4_2 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.BaseDataCollectionSubscriptionEnumeratorFactory(System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.BaseDataCollectionSubscriptionEnumeratorFactory(System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", span="38-38"];
m4_22 [cluster="QuantConnect.Lean.Engine.DataFeeds.ISubscriptionDataSourceReader.Read(QuantConnect.Data.SubscriptionDataSource)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.ISubscriptionDataSourceReader.Read(QuantConnect.Data.SubscriptionDataSource)", span="23-23"];
m4_18 [cluster="System.Func<T, TResult>.Invoke(T)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m4_23 [cluster="QuantConnect.Data.UniverseSelection.BaseDataCollection.BaseDataCollection(System.DateTime, QuantConnect.Symbol, System.Collections.Generic.IEnumerable<QuantConnect.Data.BaseData>)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Data.UniverseSelection.BaseDataCollection.BaseDataCollection(System.DateTime, QuantConnect.Symbol, System.Collections.Generic.IEnumerable<QuantConnect.Data.BaseData>)", span="57-57"];
m4_17 [cluster="QuantConnect.Lean.Engine.DataFeeds.SingleEntryDataCacheProvider.SingleEntryDataCacheProvider(QuantConnect.Interfaces.IDataProvider)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.SingleEntryDataCacheProvider.SingleEntryDataCacheProvider(QuantConnect.Interfaces.IDataProvider)", span="37-37"];
m4_21 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionDataSourceReader.ForSource(QuantConnect.Data.SubscriptionDataSource, QuantConnect.Interfaces.IDataCacheProvider, QuantConnect.Data.SubscriptionDataConfig, System.DateTime, bool)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.SubscriptionDataSourceReader.ForSource(QuantConnect.Data.SubscriptionDataSource, QuantConnect.Interfaces.IDataCacheProvider, QuantConnect.Data.SubscriptionDataConfig, System.DateTime, bool)", span="37-37"];
m4_7 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="var dataCacheProvider = new SingleEntryDataCacheProvider(dataProvider)", span="51-51"];
m4_15 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", color=green, community=0, file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="yield return new BaseDataCollection(date.AddDays(1), configuration.Symbol, coarseFundamentalForDate);", prediction=4, span="63-63"];
m4_6 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", span="49-49"];
m4_8 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="var configuration = request.Configuration", span="53-53"];
m4_11 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", color=green, community=1, file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label=tradableDays, prediction=4, span="57-57"];
m4_14 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", color=green, community=0, file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="var coarseFundamentalForDate = factory.Read(source)", prediction=6, span="61-61"];
m4_9 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", color=green, community=0, file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="var tradableDays = _tradableDaysProvider(request)", prediction=4, span="54-54"];
m4_10 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", color=green, community=0, file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="var sourceFactory = (BaseData)Activator.CreateInstance(request.Configuration.Type)", prediction=8, span="55-55"];
m4_12 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", color=green, community=0, file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="var source = sourceFactory.GetSource(configuration, date, false)", prediction=9, span="59-59"];
m4_13 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", color=green, community=0, file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="var factory = SubscriptionDataSourceReader.ForSource(source, dataCacheProvider, configuration, date, false)", prediction=10, span="60-60"];
m4_16 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", span="49-49"];
m4_24 [cluster="System.DateTime.AddDays(double)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m4_20 [cluster="QuantConnect.Data.BaseData.GetSource(QuantConnect.Data.SubscriptionDataConfig, System.DateTime, bool)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Data.BaseData.GetSource(QuantConnect.Data.SubscriptionDataConfig, System.DateTime, bool)", span="160-160"];
m4_19 [cluster="System.Activator.CreateInstance(System.Type)", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Entry System.Activator.CreateInstance(System.Type)", span="0-0"];
m4_3 [cluster="lambda expression", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Entry lambda expression", span="40-40"];
m4_4 [cluster="lambda expression", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="request.TradableDays", span="40-40"];
m4_5 [cluster="lambda expression", file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="Exit lambda expression", span="40-40"];
m4_25 [file="BaseDataCollectionSubscriptionEnumeratorFactory.cs", label="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataCollectionSubscriptionEnumeratorFactory", span=""];
m5_12 [cluster="QuantConnect.Tests.Symbols.CreateEquitySymbol(string)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Exit QuantConnect.Tests.Symbols.CreateEquitySymbol(string)", span="84-84"];
m5_6 [cluster="QuantConnect.Tests.Symbols.CreateForexSymbol(string)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Tests.Symbols.CreateForexSymbol(string)", span="79-79"];
m5_5 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Entry lambda expression", span="47-47"];
m5_7 [cluster="QuantConnect.Tests.Symbols.CreateForexSymbol(string)", color=green, community=0, file="BaseDataSubscriptionEnumeratorFactory.cs", label="return Symbol.Create(symbol, SecurityType.Forex, Market.FXCM);", prediction=11, span="81-81"];
m5_13 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactory.cs", label="request.TradableDays", span="60-60"];
m5_14 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Exit lambda expression", span="60-60"];
m5_34 [cluster="QuantConnect.Lean.Engine.DataFeeds.ISubscriptionDataSourceReader.Read(QuantConnect.Data.SubscriptionDataSource)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.ISubscriptionDataSourceReader.Read(QuantConnect.Data.SubscriptionDataSource)", span="23-23"];
m5_9 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.BaseDataSubscriptionEnumeratorFactory(bool, System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="_isLiveMode = isLiveMode", span="59-59"];
m5_29 [cluster="System.Func<T, TResult>.Invoke(T)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m5_41 [cluster="QuantConnect.Data.Auxiliary.MapFileResolver.ResolveMapFile(string, System.DateTime)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Data.Auxiliary.MapFileResolver.ResolveMapFile(string, System.DateTime)", span="124-124"];
m5_10 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.BaseDataSubscriptionEnumeratorFactory(bool, System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="_tradableDaysProvider = tradableDaysProvider ?? (request => request.TradableDays)", span="60-60"];
m5_11 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.BaseDataSubscriptionEnumeratorFactory(bool, System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", color=green, community=0, file="BaseDataSubscriptionEnumeratorFactory.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.BaseDataSubscriptionEnumeratorFactory(bool, System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", prediction=12, span="57-57"];
m5_32 [cluster="QuantConnect.Data.BaseData.GetSource(QuantConnect.Data.SubscriptionDataConfig, System.DateTime, bool)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Data.BaseData.GetSource(QuantConnect.Data.SubscriptionDataConfig, System.DateTime, bool)", span="160-160"];
m5_8 [cluster="QuantConnect.Tests.Symbols.CreateForexSymbol(string)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Exit QuantConnect.Tests.Symbols.CreateForexSymbol(string)", span="79-79"];
m5_30 [cluster="QuantConnect.Lean.Engine.DataFeeds.SingleEntryDataCacheProvider.SingleEntryDataCacheProvider(QuantConnect.Interfaces.IDataProvider)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.SingleEntryDataCacheProvider.SingleEntryDataCacheProvider(QuantConnect.Interfaces.IDataProvider)", span="37-37"];
m5_33 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionDataSourceReader.ForSource(QuantConnect.Data.SubscriptionDataSource, QuantConnect.Interfaces.IDataCacheProvider, QuantConnect.Data.SubscriptionDataConfig, System.DateTime, bool)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.SubscriptionDataSourceReader.ForSource(QuantConnect.Data.SubscriptionDataSource, QuantConnect.Interfaces.IDataCacheProvider, QuantConnect.Data.SubscriptionDataConfig, System.DateTime, bool)", span="37-37"];
m5_42 [cluster="QuantConnect.Data.Auxiliary.MapFile.GetMappedSymbol(System.DateTime)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Data.Auxiliary.MapFile.GetMappedSymbol(System.DateTime)", span="68-68"];
m5_31 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.GetMappedSymbol(QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.DateTime)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.GetMappedSymbol(QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.DateTime)", span="91-91"];
m5_35 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.GetMappedSymbol(QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.DateTime)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="var config = request.Configuration", span="93-93"];
m5_38 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.GetMappedSymbol(QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.DateTime)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="return mapFile.GetMappedSymbol(date);", span="101-101"];
m5_36 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.GetMappedSymbol(QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.DateTime)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="config.Symbol.ID.SecurityType == SecurityType.Option ||\r\n                config.Symbol.ID.SecurityType == SecurityType.Equity", span="94-95"];
m5_37 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.GetMappedSymbol(QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.DateTime)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="var mapFile = config.Symbol.HasUnderlying ?\r\n                        _mapFileResolver.ResolveMapFile(config.Symbol.Underlying.ID.Symbol, config.Symbol.Underlying.ID.Date) :\r\n                        _mapFileResolver.ResolveMapFile(config.Symbol.ID.Symbol, config.Symbol.ID.Date)", span="97-99"];
m5_39 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.GetMappedSymbol(QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.DateTime)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="return config.MappedSymbol;", span="105-105"];
m5_40 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.GetMappedSymbol(QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.DateTime)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.GetMappedSymbol(QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.DateTime)", span="91-91"];
m5_0 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.BaseDataSubscriptionEnumeratorFactory(bool, QuantConnect.Data.Auxiliary.MapFileResolver, QuantConnect.Interfaces.IFactorFileProvider, System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.BaseDataSubscriptionEnumeratorFactory(bool, QuantConnect.Data.Auxiliary.MapFileResolver, QuantConnect.Interfaces.IFactorFileProvider, System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", span="44-44"];
m5_1 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.BaseDataSubscriptionEnumeratorFactory(bool, QuantConnect.Data.Auxiliary.MapFileResolver, QuantConnect.Interfaces.IFactorFileProvider, System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="_isLiveMode = isLiveMode", span="46-46"];
m5_2 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.BaseDataSubscriptionEnumeratorFactory(bool, QuantConnect.Data.Auxiliary.MapFileResolver, QuantConnect.Interfaces.IFactorFileProvider, System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="_tradableDaysProvider = tradableDaysProvider ?? (request => request.TradableDays)", span="47-47"];
m5_3 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.BaseDataSubscriptionEnumeratorFactory(bool, QuantConnect.Data.Auxiliary.MapFileResolver, QuantConnect.Interfaces.IFactorFileProvider, System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="_mapFileResolver = mapFileResolver", span="48-48"];
m5_4 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.BaseDataSubscriptionEnumeratorFactory(bool, QuantConnect.Data.Auxiliary.MapFileResolver, QuantConnect.Interfaces.IFactorFileProvider, System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.BaseDataSubscriptionEnumeratorFactory(bool, QuantConnect.Data.Auxiliary.MapFileResolver, QuantConnect.Interfaces.IFactorFileProvider, System.Func<QuantConnect.Data.UniverseSelection.SubscriptionRequest, System.Collections.Generic.IEnumerable<System.DateTime>>)", span="44-44"];
m5_15 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", span="69-69"];
m5_16 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="var sourceFactory = (BaseData)ObjectActivator.GetActivator(request.Configuration.Type).Invoke(new object[] { request.Configuration.Type })", span="71-71"];
m5_27 [cluster="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory.CreateEnumerator(QuantConnect.Data.UniverseSelection.SubscriptionRequest, QuantConnect.Interfaces.IDataProvider)", span="69-69"];
m5_28 [cluster="QuantConnect.Util.ObjectActivator.GetActivator(System.Type)", file="BaseDataSubscriptionEnumeratorFactory.cs", label="Entry QuantConnect.Util.ObjectActivator.GetActivator(System.Type)", span="50-50"];
m5_43 [file="BaseDataSubscriptionEnumeratorFactory.cs", label="QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories.BaseDataSubscriptionEnumeratorFactory", span=""];
m6_67 [cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98"];
m6_98 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Subscribe(QuantConnect.Packets.LiveNodePacket, System.Collections.Generic.IEnumerable<QuantConnect.Symbol>)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.BaseWebsocketsBrokerage.Subscribe(QuantConnect.Packets.LiveNodePacket, System.Collections.Generic.IEnumerable<QuantConnect.Symbol>)", span="244-244"];
m6_99 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Subscribe(QuantConnect.Packets.LiveNodePacket, System.Collections.Generic.IEnumerable<QuantConnect.Symbol>)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Exit QuantConnect.Brokerages.BaseWebsocketsBrokerage.Subscribe(QuantConnect.Packets.LiveNodePacket, System.Collections.Generic.IEnumerable<QuantConnect.Symbol>)", span="244-244"];
m6_108 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m6_106 [cluster="System.Collections.Generic.List<T>.List()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m6_64 [cluster="QuantConnect.Brokerages.BrokerageMessageEvent.Reconnected(string)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.BrokerageMessageEvent.Reconnected(string)", span="78-78"];
m6_9 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.OnMessage(object, MessageReceivedEventArgs)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.BaseWebsocketsBrokerage.OnMessage(object, MessageReceivedEventArgs)", span="95-95"];
m6_10 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.OnMessage(object, MessageReceivedEventArgs)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Exit QuantConnect.Brokerages.BaseWebsocketsBrokerage.OnMessage(object, MessageReceivedEventArgs)", span="95-95"];
m6_87 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry lambda expression", span="215-215"];
m6_28 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry lambda expression", span="106-106"];
m6_55 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Log.Error(exception)", span="167-167"];
m6_58 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Log.Error(exception)", span="176-176"];
m6_29 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="WebSocket.IsOpen", span="106-106"];
m6_30 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Exit lambda expression", span="106-106"];
m6_31 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry lambda expression", span="109-178"];
m6_32 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="var nextReconnectionAttemptUtcTime = DateTime.UtcNow", span="111-111"];
m6_33 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="double nextReconnectionAttemptSeconds = 1", span="112-112"];
m6_49 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="DateTime.UtcNow > nextReconnectionAttemptUtcTime", span="150-150"];
m6_34 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label=_lockerConnectionMonitor, span="114-114"];
m6_42 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds)", span="133-133"];
m6_52 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2, 60)", span="159-159"];
m6_35 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="LastHeartbeatUtcTime = DateTime.UtcNow", span="116-116"];
m6_36 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="!_cancellationTokenSource.IsCancellationRequested", span="121-121"];
m6_37 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="TimeSpan elapsed", span="124-124"];
m6_57 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label=Exception, span="174-174"];
m6_59 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Exit lambda expression", span="109-178"];
m6_38 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label=_lockerConnectionMonitor, span="125-125"];
m6_39 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="elapsed = DateTime.UtcNow - LastHeartbeatUtcTime", span="127-127"];
m6_40 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="!_connectionLost && elapsed > TimeSpan.FromSeconds(_heartbeatTimeout)", span="130-130"];
m6_45 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="elapsed <= TimeSpan.FromSeconds(_heartbeatTimeout)", span="141-141"];
m6_41 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="_connectionLost = true", span="132-132"];
m6_44 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label=_connectionLost, span="137-137"];
m6_43 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="OnMessage(BrokerageMessageEvent.Disconnected(''Connection with server lost. This could be because of internet connectivity issues.''))", span="135-135"];
m6_56 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Thread.Sleep(10000)", span="171-171"];
m6_46 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="_connectionLost = false", span="143-143"];
m6_47 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="nextReconnectionAttemptSeconds = 1", span="144-144"];
m6_48 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="OnMessage(BrokerageMessageEvent.Reconnected(''Connection with server restored.''))", span="146-146"];
m6_50 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Reconnect()", span="154-154"];
m6_54 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label=Exception, span="165-165"];
m6_51 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label=Exception, span="156-156"];
m6_53 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds)", span="160-160"];
m6_84 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry lambda expression", span="210-210"];
m6_85 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="!WebSocket.IsOpen", span="210-210"];
m6_86 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Exit lambda expression", span="210-210"];
m6_88 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="WebSocket.IsOpen", span="215-215"];
m6_89 [cluster="lambda expression", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Exit lambda expression", span="215-215"];
m6_82 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.GetSubscribed()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.BaseWebsocketsBrokerage.GetSubscribed()", span="250-250"];
m6_100 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.GetSubscribed()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="IList<Symbol> list = new List<Symbol>()", span="252-252"];
m6_101 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.GetSubscribed()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label=ChannelList, span="253-253"];
m6_103 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.GetSubscribed()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="list.Add(Symbol.Create(item.Value.Symbol, SecurityType.Forex, _market))", span="257-257"];
m6_104 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.GetSubscribed()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="return list;", span="260-260"];
m6_102 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.GetSubscribed()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label=ChannelList, span="255-255"];
m6_105 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.GetSubscribed()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Exit QuantConnect.Brokerages.BaseWebsocketsBrokerage.GetSubscribed()", span="250-250"];
m6_22 [cluster="QuantConnect.Brokerages.IWebSocket.Connect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.IWebSocket.Connect()", span="46-46"];
m6_66 [cluster="System.Math.Min(double, double)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry System.Math.Min(double, double)", span="0-0"];
m6_71 [cluster="Unk.ToString", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry Unk.ToString", span=""];
m6_96 [cluster="System.Exception.Exception(string)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m6_11 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", span="100-100"];
m6_12 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="WebSocket.OnMessage += OnMessage", span="102-102"];
m6_13 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="WebSocket.OnError += OnError", span="103-103"];
m6_14 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="WebSocket.Connect()", span="105-105"];
m6_15 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Wait(_connectionTimeout, () => WebSocket.IsOpen)", span="106-106"];
m6_16 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="_cancellationTokenSource = new CancellationTokenSource()", span="108-108"];
m6_17 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="_connectionMonitorThread = new Thread(() =>\r\n            {\r\n                var nextReconnectionAttemptUtcTime = DateTime.UtcNow;\r\n                double nextReconnectionAttemptSeconds = 1;\r\n\r\n                lock (_lockerConnectionMonitor)\r\n                {\r\n                    LastHeartbeatUtcTime = DateTime.UtcNow;\r\n                }\r\n\r\n                try\r\n                {\r\n                    while (!_cancellationTokenSource.IsCancellationRequested)\r\n                    {\r\n\r\n                        TimeSpan elapsed;\r\n                        lock (_lockerConnectionMonitor)\r\n                        {\r\n                            elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;\r\n                        }\r\n\r\n                        if (!_connectionLost && elapsed > TimeSpan.FromSeconds(_heartbeatTimeout))\r\n                        {\r\n                            _connectionLost = true;\r\n                            nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);\r\n\r\n                            OnMessage(BrokerageMessageEvent.Disconnected(''Connection with server lost. This could be because of internet connectivity issues.''));\r\n                        }\r\n                        else if (_connectionLost)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (elapsed <= TimeSpan.FromSeconds(_heartbeatTimeout))\r\n                                {\r\n                                    _connectionLost = false;\r\n                                    nextReconnectionAttemptSeconds = 1;\r\n\r\n                                    OnMessage(BrokerageMessageEvent.Reconnected(''Connection with server restored.''));\r\n                                }\r\n                                else\r\n                                {\r\n                                    if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)\r\n                                    {\r\n                                        try\r\n                                        {\r\n                                            Reconnect();\r\n                                        }\r\n                                        catch (Exception)\r\n                                        {\r\n                                            // double the interval between attempts (capped to 1 minute)\r\n                                            nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2, 60);\r\n                                            nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            catch (Exception exception)\r\n                            {\r\n                                Log.Error(exception);\r\n                            }\r\n                        }\r\n\r\n                        Thread.Sleep(10000);\r\n                    }\r\n                }\r\n                catch (Exception exception)\r\n                {\r\n                    Log.Error(exception);\r\n                }\r\n            })", span="109-178"];
m6_18 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="_connectionMonitorThread.Start()", span="179-179"];
m6_19 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="!_connectionMonitorThread.IsAlive", span="180-180"];
m6_20 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Thread.Sleep(1)", span="182-182"];
m6_21 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Exit QuantConnect.Brokerages.BaseWebsocketsBrokerage.Connect()", span="100-100"];
m6_107 [cluster="QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", span="45-45"];
m6_68 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.OnError(object, ErrorEventArgs)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.BaseWebsocketsBrokerage.OnError(object, ErrorEventArgs)", span="191-191"];
m6_69 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.OnError(object, ErrorEventArgs)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Log.Debug(e.Exception.ToString())", span="193-193"];
m6_70 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.OnError(object, ErrorEventArgs)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Exit QuantConnect.Brokerages.BaseWebsocketsBrokerage.OnError(object, ErrorEventArgs)", span="191-191"];
m6_25 [cluster="System.Threading.Thread.Thread(System.Threading.ThreadStart)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry System.Threading.Thread.Thread(System.Threading.ThreadStart)", span="0-0"];
m6_26 [cluster="System.Threading.Thread.Start()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry System.Threading.Thread.Start()", span="0-0"];
m6_97 [cluster="System.Func<TResult>.Invoke()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m6_83 [cluster="QuantConnect.Brokerages.IWebSocket.Close()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.IWebSocket.Close()", span="51-51"];
m6_24 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m6_63 [cluster="QuantConnect.Brokerages.Brokerage.OnMessage(QuantConnect.Brokerages.BrokerageMessageEvent)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.Brokerage.OnMessage(QuantConnect.Brokerages.BrokerageMessageEvent)", span="170-170"];
m6_62 [cluster="QuantConnect.Brokerages.BrokerageMessageEvent.Disconnected(string)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.BrokerageMessageEvent.Disconnected(string)", span="68-68"];
m6_72 [cluster="Unk.Debug", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry Unk.Debug", span=""];
m6_27 [cluster="System.Threading.Thread.Sleep(int)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry System.Threading.Thread.Sleep(int)", span="0-0"];
m6_65 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Reconnect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.BaseWebsocketsBrokerage.Reconnect()", span="199-199"];
m6_73 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Reconnect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="var subscribed = GetSubscribed()", span="201-201"];
m6_74 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Reconnect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="WebSocket.OnError -= this.OnError", span="203-203"];
m6_75 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Reconnect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label=IsConnected, span="207-207"];
m6_76 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Reconnect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="WebSocket.Close()", span="209-209"];
m6_78 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Reconnect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="!IsConnected", span="212-212"];
m6_77 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Reconnect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Wait(_connectionTimeout, () => !WebSocket.IsOpen)", span="210-210"];
m6_79 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Reconnect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="WebSocket.Connect()", span="214-214"];
m6_80 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Reconnect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Wait(_connectionTimeout, () => WebSocket.IsOpen)", span="215-215"];
m6_81 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Reconnect()", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Exit QuantConnect.Brokerages.BaseWebsocketsBrokerage.Reconnect()", span="199-199"];
m6_61 [cluster="System.DateTime.AddSeconds(double)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
m6_23 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Wait(int, System.Func<bool>)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.BaseWebsocketsBrokerage.Wait(int, System.Func<bool>)", span="225-225"];
m6_90 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Wait(int, System.Func<bool>)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="var StartTime = Environment.TickCount", span="227-227"];
m6_91 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Wait(int, System.Func<bool>)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Environment.TickCount > StartTime + timeout", span="230-230"];
m6_94 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Wait(int, System.Func<bool>)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="!state()", span="236-236"];
m6_92 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Wait(int, System.Func<bool>)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="throw new Exception(''Websockets connection timeout.'');", span="232-232"];
m6_93 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Wait(int, System.Func<bool>)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Thread.Sleep(1)", span="234-234"];
m6_95 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.Wait(int, System.Func<bool>)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Exit QuantConnect.Brokerages.BaseWebsocketsBrokerage.Wait(int, System.Func<bool>)", span="225-225"];
m6_8 [cluster="QuantConnect.Brokerages.IWebSocket.Initialize(string)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.IWebSocket.Initialize(string)", span="35-35"];
m6_0 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.BaseWebsocketsBrokerage(string, QuantConnect.Brokerages.IWebSocket, IRestClient, string, string, string, string)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Brokerages.BaseWebsocketsBrokerage.BaseWebsocketsBrokerage(string, QuantConnect.Brokerages.IWebSocket, IRestClient, string, string, string, string)", span="80-80"];
m6_1 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.BaseWebsocketsBrokerage(string, QuantConnect.Brokerages.IWebSocket, IRestClient, string, string, string, string)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="WebSocket = websocket", span="82-82"];
m6_2 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.BaseWebsocketsBrokerage(string, QuantConnect.Brokerages.IWebSocket, IRestClient, string, string, string, string)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="WebSocket.Initialize(wssUrl)", span="83-83"];
m6_3 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.BaseWebsocketsBrokerage(string, QuantConnect.Brokerages.IWebSocket, IRestClient, string, string, string, string)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="RestClient = restClient", span="84-84"];
m6_4 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.BaseWebsocketsBrokerage(string, QuantConnect.Brokerages.IWebSocket, IRestClient, string, string, string, string)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="_market = market", span="85-85"];
m6_5 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.BaseWebsocketsBrokerage(string, QuantConnect.Brokerages.IWebSocket, IRestClient, string, string, string, string)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="ApiSecret = apiSecret", span="86-86"];
m6_6 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.BaseWebsocketsBrokerage(string, QuantConnect.Brokerages.IWebSocket, IRestClient, string, string, string, string)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="ApiKey = apiKey", span="87-87"];
m6_7 [cluster="QuantConnect.Brokerages.BaseWebsocketsBrokerage.BaseWebsocketsBrokerage(string, QuantConnect.Brokerages.IWebSocket, IRestClient, string, string, string, string)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Exit QuantConnect.Brokerages.BaseWebsocketsBrokerage.BaseWebsocketsBrokerage(string, QuantConnect.Brokerages.IWebSocket, IRestClient, string, string, string, string)", span="80-80"];
m6_60 [cluster="System.TimeSpan.FromSeconds(double)", file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m6_109 [file="BaseDataSubscriptionEnumeratorFactoryTests.cs", label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", span=""];
m7_15 [cluster="QuantConnect.Securities.Security.Security(QuantConnect.Data.SubscriptionDataConfig, decimal, bool)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Securities.Security.Security(QuantConnect.Data.SubscriptionDataConfig, decimal, bool)", span="206-206"];
m7_50 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="55-55"];
m7_98 [cluster="QuantConnect.Securities.SecurityTransactionModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Securities.SecurityTransactionModel.StopLimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopLimitOrder)", span="168-168"];
m7_14 [cluster="QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.SecurityType, string, QuantConnect.Resolution, bool, bool, bool, bool, bool, int)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.SecurityType, string, QuantConnect.Resolution, bool, bool, bool, bool, bool, int)", span="129-129"];
m7_97 [cluster="QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Orders.StopLimitOrder.StopLimitOrder(string, int, decimal, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="65-65"];
m7_13 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder(string, int, System.DateTime, string, QuantConnect.SecurityType)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder(string, int, System.DateTime, string, QuantConnect.SecurityType)", span="51-51"];
m7_20 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsMarketFillSell()", span="48-48"];
m7_31 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Exit QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsMarketFillSell()", span="48-48"];
m7_0 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsMarketFillBuy()", span="32-32"];
m7_11 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Exit QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsMarketFillBuy()", span="32-32"];
m7_16 [cluster="QuantConnect.Indicators.IndicatorDataPoint.IndicatorDataPoint(string, System.DateTime, decimal)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Indicators.IndicatorDataPoint.IndicatorDataPoint(string, System.DateTime, decimal)", span="52-52"];
m7_141 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Orders.StopMarketOrder.StopMarketOrder(string, int, decimal, System.DateTime, string, QuantConnect.SecurityType)", span="54-54"];
m7_123 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", span="191-191"];
m7_124 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var model = new EquityTransactionModel()", span="193-193"];
m7_125 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var order = new StopMarketOrder(Symbol, 100, 101.5m, DateTime.Now, type: SecurityType.Equity)", span="194-194"];
m7_129 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var fill = model.StopMarketFill(security, order)", span="199-199"];
m7_135 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="fill = model.StopMarketFill(security, order)", span="208-208"];
m7_126 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var config = new SubscriptionDataConfig(typeof(TradeBar), SecurityType.Equity, Symbol, Resolution.Minute, true, true, true, true, false, 0)", span="195-195"];
m7_133 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, order.Status)", span="204-204"];
m7_136 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(order.Quantity, fill.FillQuantity)", span="211-211"];
m7_137 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(Math.Max(security.Price, order.StopPrice), fill.FillPrice)", span="212-212"];
m7_139 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.Filled, order.Status)", span="214-214"];
m7_127 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var security = new Security(config, 1)", span="196-196"];
m7_128 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new IndicatorDataPoint(Symbol, DateTime.Now, 101m))", span="197-197"];
m7_134 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new IndicatorDataPoint(Symbol, DateTime.Now, 102.5m))", span="206-206"];
m7_130 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillQuantity)", span="201-201"];
m7_131 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillPrice)", span="202-202"];
m7_132 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, fill.Status)", span="203-203"];
m7_138 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.Filled, fill.Status)", span="213-213"];
m7_140 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Exit QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillBuy()", span="191-191"];
m7_99 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", span="155-155"];
m7_100 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var model = new EquityTransactionModel()", span="157-157"];
m7_101 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var order = new StopLimitOrder(Symbol, -100, 101.75m, 101.50m, DateTime.Now, type: SecurityType.Equity)", span="158-158"];
m7_105 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var fill = model.StopLimitFill(security, order)", span="163-163"];
m7_111 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="fill = model.StopLimitFill(security, order)", span="172-172"];
m7_117 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="fill = model.StopLimitFill(security, order)", span="181-181"];
m7_102 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var config = new SubscriptionDataConfig(typeof(TradeBar), SecurityType.Equity, Symbol, Resolution.Minute, true, true, true, true, false, 0)", span="159-159"];
m7_109 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, order.Status)", span="168-168"];
m7_115 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, order.Status)", span="177-177"];
m7_118 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(order.Quantity, fill.FillQuantity)", span="184-184"];
m7_119 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(order.LimitPrice, fill.FillPrice)", span="185-185"];
m7_121 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.Filled, order.Status)", span="187-187"];
m7_103 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var security = new Security(config, 1)", span="160-160"];
m7_104 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new IndicatorDataPoint(Symbol, DateTime.Now, 102m))", span="161-161"];
m7_110 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new IndicatorDataPoint(Symbol, DateTime.Now, 101m))", span="170-170"];
m7_116 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new IndicatorDataPoint(Symbol, DateTime.Now, 101.66m))", span="179-179"];
m7_106 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillQuantity)", span="165-165"];
m7_107 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillPrice)", span="166-166"];
m7_108 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, fill.Status)", span="167-167"];
m7_112 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillQuantity)", span="174-174"];
m7_113 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillPrice)", span="175-175"];
m7_114 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, fill.Status)", span="176-176"];
m7_120 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.Filled, fill.Status)", span="186-186"];
m7_122 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Exit QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillSell()", span="155-155"];
m7_32 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", span="65-65"];
m7_33 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var model = new EquityTransactionModel()", span="67-67"];
m7_34 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var order = new LimitOrder(Symbol, 100, 101.5m, DateTime.Now, type: SecurityType.Equity)", span="68-68"];
m7_38 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var fill = model.LimitFill(security, order)", span="73-73"];
m7_44 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="fill = model.LimitFill(security, order)", span="82-82"];
m7_35 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var config = new SubscriptionDataConfig(typeof(TradeBar), SecurityType.Equity, Symbol, Resolution.Minute, true, true, true, true, false, 0)", span="69-69"];
m7_42 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, order.Status)", span="78-78"];
m7_45 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(order.Quantity, fill.FillQuantity)", span="85-85"];
m7_46 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(Math.Min(order.LimitPrice, security.High), fill.FillPrice)", span="86-86"];
m7_48 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.Filled, order.Status)", span="88-88"];
m7_36 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var security = new Security(config, 1)", span="70-70"];
m7_37 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new IndicatorDataPoint(Symbol, DateTime.Now, 102m))", span="71-71"];
m7_43 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new TradeBar(DateTime.Now, Symbol, 102m, 103m, 101m, 102.3m, 100))", span="80-80"];
m7_39 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillQuantity)", span="75-75"];
m7_40 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillPrice)", span="76-76"];
m7_41 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, fill.Status)", span="77-77"];
m7_47 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.Filled, fill.Status)", span="87-87"];
m7_49 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Exit QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillBuy()", span="65-65"];
m7_19 [cluster="Unk.AreEqual", file="BasicTemplateCryptoAlgorithm.cs", label="Entry Unk.AreEqual", span=""];
m7_12 [cluster="QuantConnect.Securities.Equity.EquityTransactionModel.EquityTransactionModel()", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Securities.Equity.EquityTransactionModel.EquityTransactionModel()", span="26-26"];
m7_17 [cluster="QuantConnect.Securities.Security.SetMarketPrice(System.DateTime, QuantConnect.Data.BaseData)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Securities.Security.SetMarketPrice(System.DateTime, QuantConnect.Data.BaseData)", span="392-392"];
m7_18 [cluster="QuantConnect.Securities.SecurityTransactionModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Securities.SecurityTransactionModel.MarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.MarketOrder)", span="42-42"];
m7_51 [cluster="QuantConnect.Securities.SecurityTransactionModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Securities.SecurityTransactionModel.LimitFill(QuantConnect.Securities.Security, QuantConnect.Orders.LimitOrder)", span="242-242"];
m7_142 [cluster="QuantConnect.Securities.SecurityTransactionModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Securities.SecurityTransactionModel.StopMarketFill(QuantConnect.Securities.Security, QuantConnect.Orders.StopMarketOrder)", span="93-93"];
m7_54 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", span="92-92"];
m7_55 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var model = new EquityTransactionModel()", span="94-94"];
m7_56 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var order = new LimitOrder(Symbol, -100, 101.5m, DateTime.Now, type: SecurityType.Equity)", span="95-95"];
m7_60 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var fill = model.LimitFill(security, order)", span="100-100"];
m7_66 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="fill = model.LimitFill(security, order)", span="109-109"];
m7_57 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var config = new SubscriptionDataConfig(typeof(TradeBar), SecurityType.Equity, Symbol, Resolution.Minute, true, true, true, true, false, 0)", span="96-96"];
m7_64 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, order.Status)", span="105-105"];
m7_67 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(order.Quantity, fill.FillQuantity)", span="112-112"];
m7_68 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(Math.Max(order.LimitPrice, security.Low), fill.FillPrice)", span="113-113"];
m7_70 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.Filled, order.Status)", span="115-115"];
m7_58 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var security = new Security(config, 1)", span="97-97"];
m7_59 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new IndicatorDataPoint(Symbol, DateTime.Now, 101m))", span="98-98"];
m7_65 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new TradeBar(DateTime.Now, Symbol, 102m, 103m, 101m, 102.3m, 100))", span="107-107"];
m7_61 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillQuantity)", span="102-102"];
m7_62 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillPrice)", span="103-103"];
m7_63 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, fill.Status)", span="104-104"];
m7_69 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.Filled, fill.Status)", span="114-114"];
m7_71 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Exit QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsLimitFillSell()", span="92-92"];
m7_72 [cluster="System.Math.Max(decimal, decimal)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry System.Math.Max(decimal, decimal)", span="0-0"];
m7_53 [cluster="System.Math.Min(decimal, decimal)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry System.Math.Min(decimal, decimal)", span="0-0"];
m7_73 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", span="119-119"];
m7_74 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var model = new EquityTransactionModel()", span="121-121"];
m7_75 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var order = new StopLimitOrder(Symbol, 100, 101.5m, 101.75m, DateTime.Now, type: SecurityType.Equity)", span="122-122"];
m7_79 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var fill = model.StopLimitFill(security, order)", span="127-127"];
m7_85 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="fill = model.StopLimitFill(security, order)", span="136-136"];
m7_91 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="fill = model.StopLimitFill(security, order)", span="145-145"];
m7_76 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var config = new SubscriptionDataConfig(typeof(TradeBar), SecurityType.Equity, Symbol, Resolution.Minute, true, true, true, true, false, 0)", span="123-123"];
m7_83 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, order.Status)", span="132-132"];
m7_89 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, order.Status)", span="141-141"];
m7_92 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(order.Quantity, fill.FillQuantity)", span="148-148"];
m7_93 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(order.LimitPrice, fill.FillPrice)", span="149-149"];
m7_95 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.Filled, order.Status)", span="151-151"];
m7_77 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="var security = new Security(config, 1)", span="124-124"];
m7_78 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new IndicatorDataPoint(Symbol, DateTime.Now, 100m))", span="125-125"];
m7_84 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new IndicatorDataPoint(Symbol, DateTime.Now, 102m))", span="134-134"];
m7_90 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new IndicatorDataPoint(Symbol, DateTime.Now, 101.66m))", span="143-143"];
m7_80 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillQuantity)", span="129-129"];
m7_81 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillPrice)", span="130-130"];
m7_82 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, fill.Status)", span="131-131"];
m7_86 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillQuantity)", span="138-138"];
m7_87 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillPrice)", span="139-139"];
m7_88 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, fill.Status)", span="140-140"];
m7_94 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.Filled, fill.Status)", span="150-150"];
m7_96 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", file="BasicTemplateCryptoAlgorithm.cs", label="Exit QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopLimitFillBuy()", span="119-119"];
m7_143 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", span="218-218"];
m7_144 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var model = new EquityTransactionModel()", span="220-220"];
m7_145 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var order = new StopMarketOrder(Symbol, -100, 101.5m, DateTime.Now, type: SecurityType.Equity)", span="221-221"];
m7_149 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var fill = model.StopMarketFill(security, order)", span="226-226"];
m7_155 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="fill = model.StopMarketFill(security, order)", span="235-235"];
m7_146 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var config = new SubscriptionDataConfig(typeof(TradeBar), SecurityType.Equity, Symbol, Resolution.Minute, true, true, true, true, false, 0)", span="222-222"];
m7_153 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, order.Status)", span="231-231"];
m7_156 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(order.Quantity, fill.FillQuantity)", span="238-238"];
m7_157 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(Math.Min(security.Price, order.StopPrice), fill.FillPrice)", span="239-239"];
m7_159 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.Filled, order.Status)", span="241-241"];
m7_147 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="var security = new Security(config, 1)", span="223-223"];
m7_148 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new IndicatorDataPoint(Symbol, DateTime.Now, 102m))", span="224-224"];
m7_154 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="security.SetMarketPrice(DateTime.Now, new IndicatorDataPoint(Symbol, DateTime.Now, 101m))", span="233-233"];
m7_150 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillQuantity)", span="228-228"];
m7_151 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(0, fill.FillPrice)", span="229-229"];
m7_152 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.None, fill.Status)", span="230-230"];
m7_158 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Assert.AreEqual(OrderStatus.Filled, fill.Status)", span="240-240"];
m7_160 [cluster="QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", file="BasicTemplateCryptoAlgorithm.cs", label="Exit QuantConnect.Tests.Common.Securities.Equity.EquityTransactionModelTests.PerformsStopMarketFillSell()", span="218-218"];
m7_52 [cluster="QuantConnect.Data.Market.TradeBar.TradeBar(System.DateTime, string, decimal, decimal, decimal, decimal, long, System.TimeSpan?)", file="BasicTemplateCryptoAlgorithm.cs", label="Entry QuantConnect.Data.Market.TradeBar.TradeBar(System.DateTime, string, decimal, decimal, decimal, decimal, long, System.TimeSpan?)", span="131-131"];
m8_33 [cluster="Unk.GetFillModel", file="BrokerageModelPythonWrapper.cs", label="Entry Unk.GetFillModel", span=""];
m8_53 [cluster="Unk.GetBuyingPowerModel", file="BrokerageModelPythonWrapper.cs", label="Entry Unk.GetBuyingPowerModel", span=""];
m8_24 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetFeeModel(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="Entry QuantConnect.Python.BrokerageModelPythonWrapper.GetFeeModel(QuantConnect.Securities.Security)", span="142-142"];
m8_25 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetFeeModel(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="Py.GIL()", span="144-144"];
m8_26 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetFeeModel(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="return _model.GetFeeModel(security);", span="146-146"];
m8_27 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetFeeModel(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="Exit QuantConnect.Python.BrokerageModelPythonWrapper.GetFeeModel(QuantConnect.Securities.Security)", span="142-142"];
m8_23 [cluster="Unk.CanUpdateOrder", file="BrokerageModelPythonWrapper.cs", label="Entry Unk.CanUpdateOrder", span=""];
m8_19 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.CanUpdateOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, QuantConnect.Orders.UpdateOrderRequest, out QuantConnect.Brokerages.BrokerageMessageEvent)", file="BrokerageModelPythonWrapper.cs", label="Entry QuantConnect.Python.BrokerageModelPythonWrapper.CanUpdateOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, QuantConnect.Orders.UpdateOrderRequest, out QuantConnect.Brokerages.BrokerageMessageEvent)", span="129-129"];
m8_20 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.CanUpdateOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, QuantConnect.Orders.UpdateOrderRequest, out QuantConnect.Brokerages.BrokerageMessageEvent)", file="BrokerageModelPythonWrapper.cs", label="Py.GIL()", span="131-131"];
m8_21 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.CanUpdateOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, QuantConnect.Orders.UpdateOrderRequest, out QuantConnect.Brokerages.BrokerageMessageEvent)", file="BrokerageModelPythonWrapper.cs", label="return _model.CanUpdateOrder(security, order, out message);", span="133-133"];
m8_22 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.CanUpdateOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, QuantConnect.Orders.UpdateOrderRequest, out QuantConnect.Brokerages.BrokerageMessageEvent)", file="BrokerageModelPythonWrapper.cs", label="Exit QuantConnect.Python.BrokerageModelPythonWrapper.CanUpdateOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, QuantConnect.Orders.UpdateOrderRequest, out QuantConnect.Brokerages.BrokerageMessageEvent)", span="129-129"];
m8_39 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetSettlementModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", file="BrokerageModelPythonWrapper.cs", label="Entry QuantConnect.Python.BrokerageModelPythonWrapper.GetSettlementModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", span="182-182"];
m8_40 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetSettlementModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", file="BrokerageModelPythonWrapper.cs", label="Py.GIL()", span="184-184"];
m8_41 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetSettlementModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", file="BrokerageModelPythonWrapper.cs", label="return _model.GetSettlementModel(security, accountType);", span="186-186"];
m8_42 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetSettlementModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", file="BrokerageModelPythonWrapper.cs", label="Exit QuantConnect.Python.BrokerageModelPythonWrapper.GetSettlementModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", span="182-182"];
m8_48 [cluster="Unk.GetSlippageModel", file="BrokerageModelPythonWrapper.cs", label="Entry Unk.GetSlippageModel", span=""];
m8_29 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetFillModel(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="Entry QuantConnect.Python.BrokerageModelPythonWrapper.GetFillModel(QuantConnect.Securities.Security)", span="155-155"];
m8_30 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetFillModel(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="Py.GIL()", span="157-157"];
m8_31 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetFillModel(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="return _model.GetFillModel(security);", span="159-159"];
m8_32 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetFillModel(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="Exit QuantConnect.Python.BrokerageModelPythonWrapper.GetFillModel(QuantConnect.Securities.Security)", span="155-155"];
m8_49 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetBuyingPowerModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", file="BrokerageModelPythonWrapper.cs", label="Entry QuantConnect.Python.BrokerageModelPythonWrapper.GetBuyingPowerModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", span="210-210"];
m8_52 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetBuyingPowerModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", file="BrokerageModelPythonWrapper.cs", label="Exit QuantConnect.Python.BrokerageModelPythonWrapper.GetBuyingPowerModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", span="210-210"];
m8_34 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetLeverage(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="Entry QuantConnect.Python.BrokerageModelPythonWrapper.GetLeverage(QuantConnect.Securities.Security)", span="168-168"];
m8_35 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetLeverage(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="Py.GIL()", span="170-170"];
m8_36 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetLeverage(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="return _model.GetLeverage(security);", span="172-172"];
m8_37 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetLeverage(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="Exit QuantConnect.Python.BrokerageModelPythonWrapper.GetLeverage(QuantConnect.Securities.Security)", span="168-168"];
m8_9 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.CanExecuteOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="BrokerageModelPythonWrapper.cs", label="Entry QuantConnect.Python.BrokerageModelPythonWrapper.CanExecuteOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="94-94"];
m8_10 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.CanExecuteOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="BrokerageModelPythonWrapper.cs", label="Py.GIL()", span="96-96"];
m8_11 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.CanExecuteOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="BrokerageModelPythonWrapper.cs", label="return _model.CanExecuteOrder(security, order);", span="98-98"];
m8_12 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.CanExecuteOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="BrokerageModelPythonWrapper.cs", label="Exit QuantConnect.Python.BrokerageModelPythonWrapper.CanExecuteOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="94-94"];
m8_38 [cluster="Unk.GetLeverage", file="BrokerageModelPythonWrapper.cs", label="Entry Unk.GetLeverage", span=""];
m8_28 [cluster="Unk.GetFeeModel", file="BrokerageModelPythonWrapper.cs", label="Entry Unk.GetFeeModel", span=""];
m8_7 [cluster="Unk.GIL", file="BrokerageModelPythonWrapper.cs", label="Entry Unk.GIL", span=""];
m8_44 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetSlippageModel(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="Entry QuantConnect.Python.BrokerageModelPythonWrapper.GetSlippageModel(QuantConnect.Securities.Security)", span="195-195"];
m8_45 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetSlippageModel(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="Py.GIL()", span="197-197"];
m8_46 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetSlippageModel(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="return _model.GetSlippageModel(security);", span="199-199"];
m8_47 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.GetSlippageModel(QuantConnect.Securities.Security)", file="BrokerageModelPythonWrapper.cs", label="Exit QuantConnect.Python.BrokerageModelPythonWrapper.GetSlippageModel(QuantConnect.Securities.Security)", span="195-195"];
m8_14 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", file="BrokerageModelPythonWrapper.cs", label="Entry QuantConnect.Python.BrokerageModelPythonWrapper.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", span="113-113"];
m8_15 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", file="BrokerageModelPythonWrapper.cs", label="Py.GIL()", span="115-115"];
m8_16 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", file="BrokerageModelPythonWrapper.cs", label="return _model.CanSubmitOrder(security, order, out message);", span="117-117"];
m8_17 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", file="BrokerageModelPythonWrapper.cs", label="Exit QuantConnect.Python.BrokerageModelPythonWrapper.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", span="113-113"];
m8_18 [cluster="Unk.CanSubmitOrder", file="BrokerageModelPythonWrapper.cs", label="Entry Unk.CanSubmitOrder", span=""];
m8_3 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.ApplySplit(System.Collections.Generic.List<QuantConnect.Orders.OrderTicket>, QuantConnect.Data.Market.Split)", file="BrokerageModelPythonWrapper.cs", label="Entry QuantConnect.Python.BrokerageModelPythonWrapper.ApplySplit(System.Collections.Generic.List<QuantConnect.Orders.OrderTicket>, QuantConnect.Data.Market.Split)", span="76-76"];
m8_4 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.ApplySplit(System.Collections.Generic.List<QuantConnect.Orders.OrderTicket>, QuantConnect.Data.Market.Split)", file="BrokerageModelPythonWrapper.cs", label="Py.GIL()", span="78-78"];
m8_5 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.ApplySplit(System.Collections.Generic.List<QuantConnect.Orders.OrderTicket>, QuantConnect.Data.Market.Split)", file="BrokerageModelPythonWrapper.cs", label="_model.ApplySplit(tickets, split)", span="80-80"];
m8_6 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.ApplySplit(System.Collections.Generic.List<QuantConnect.Orders.OrderTicket>, QuantConnect.Data.Market.Split)", file="BrokerageModelPythonWrapper.cs", label="Exit QuantConnect.Python.BrokerageModelPythonWrapper.ApplySplit(System.Collections.Generic.List<QuantConnect.Orders.OrderTicket>, QuantConnect.Data.Market.Split)", span="76-76"];
m8_43 [cluster="Unk.GetSettlementModel", file="BrokerageModelPythonWrapper.cs", label="Entry Unk.GetSettlementModel", span=""];
m8_0 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.BrokerageModelPythonWrapper(PyObject)", file="BrokerageModelPythonWrapper.cs", label="Entry QuantConnect.Python.BrokerageModelPythonWrapper.BrokerageModelPythonWrapper(PyObject)", span="38-38"];
m8_1 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.BrokerageModelPythonWrapper(PyObject)", file="BrokerageModelPythonWrapper.cs", label="_model = model", span="40-40"];
m8_2 [cluster="QuantConnect.Python.BrokerageModelPythonWrapper.BrokerageModelPythonWrapper(PyObject)", file="BrokerageModelPythonWrapper.cs", label="Exit QuantConnect.Python.BrokerageModelPythonWrapper.BrokerageModelPythonWrapper(PyObject)", span="38-38"];
m8_13 [cluster="Unk.CanExecuteOrder", file="BrokerageModelPythonWrapper.cs", label="Entry Unk.CanExecuteOrder", span=""];
m8_8 [cluster="Unk.ApplySplit", file="BrokerageModelPythonWrapper.cs", label="Entry Unk.ApplySplit", span=""];
m8_54 [file="BrokerageModelPythonWrapper.cs", label="QuantConnect.Python.BrokerageModelPythonWrapper", span=""];
m9_22 [cluster="QuantConnect.Securities.ISecuritySeeder.SeedSecurity(QuantConnect.Securities.Security)", file="BrokerageModelSecurityInitializer.cs", label="Entry QuantConnect.Securities.ISecuritySeeder.SeedSecurity(QuantConnect.Securities.Security)", span="28-28"];
m9_16 [cluster="QuantConnect.Securities.Security.SetLeverage(decimal)", file="BrokerageModelSecurityInitializer.cs", label="Entry QuantConnect.Securities.Security.SetLeverage(decimal)", span="582-582"];
m9_15 [cluster="QuantConnect.Brokerages.IBrokerageModel.GetLeverage(QuantConnect.Securities.Security)", file="BrokerageModelSecurityInitializer.cs", label="Entry QuantConnect.Brokerages.IBrokerageModel.GetLeverage(QuantConnect.Securities.Security)", span="92-92"];
m9_6 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.Initialize(QuantConnect.Securities.Security)", file="BrokerageModelSecurityInitializer.cs", label="Entry QuantConnect.Securities.BrokerageModelSecurityInitializer.Initialize(QuantConnect.Securities.Security)", span="55-55"];
m9_7 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.Initialize(QuantConnect.Securities.Security)", file="BrokerageModelSecurityInitializer.cs", label="security.SetLeverage(_brokerageModel.GetLeverage(security))", span="58-58"];
m9_8 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.Initialize(QuantConnect.Securities.Security)", file="BrokerageModelSecurityInitializer.cs", label="security.FillModel = _brokerageModel.GetFillModel(security)", span="59-59"];
m9_9 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.Initialize(QuantConnect.Securities.Security)", file="BrokerageModelSecurityInitializer.cs", label="security.FeeModel = _brokerageModel.GetFeeModel(security)", span="60-60"];
m9_10 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.Initialize(QuantConnect.Securities.Security)", file="BrokerageModelSecurityInitializer.cs", label="security.SlippageModel = _brokerageModel.GetSlippageModel(security)", span="61-61"];
m9_11 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.Initialize(QuantConnect.Securities.Security)", file="BrokerageModelSecurityInitializer.cs", label="security.SettlementModel = _brokerageModel.GetSettlementModel(security, _brokerageModel.AccountType)", span="62-62"];
m9_13 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.Initialize(QuantConnect.Securities.Security)", file="BrokerageModelSecurityInitializer.cs", label="_securitySeeder.SeedSecurity(security)", span="65-65"];
m9_14 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.Initialize(QuantConnect.Securities.Security)", file="BrokerageModelSecurityInitializer.cs", label="Exit QuantConnect.Securities.BrokerageModelSecurityInitializer.Initialize(QuantConnect.Securities.Security)", span="55-55"];
m9_2 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.BrokerageModelSecurityInitializer(QuantConnect.Brokerages.IBrokerageModel, QuantConnect.Securities.ISecuritySeeder)", file="BrokerageModelSecurityInitializer.cs", label="Entry QuantConnect.Securities.BrokerageModelSecurityInitializer.BrokerageModelSecurityInitializer(QuantConnect.Brokerages.IBrokerageModel, QuantConnect.Securities.ISecuritySeeder)", span="45-45"];
m9_3 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.BrokerageModelSecurityInitializer(QuantConnect.Brokerages.IBrokerageModel, QuantConnect.Securities.ISecuritySeeder)", file="BrokerageModelSecurityInitializer.cs", label="_brokerageModel = brokerageModel", span="47-47"];
m9_4 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.BrokerageModelSecurityInitializer(QuantConnect.Brokerages.IBrokerageModel, QuantConnect.Securities.ISecuritySeeder)", file="BrokerageModelSecurityInitializer.cs", label="_securitySeeder = securitySeeder", span="48-48"];
m9_5 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.BrokerageModelSecurityInitializer(QuantConnect.Brokerages.IBrokerageModel, QuantConnect.Securities.ISecuritySeeder)", file="BrokerageModelSecurityInitializer.cs", label="Exit QuantConnect.Securities.BrokerageModelSecurityInitializer.BrokerageModelSecurityInitializer(QuantConnect.Brokerages.IBrokerageModel, QuantConnect.Securities.ISecuritySeeder)", span="45-45"];
m9_19 [cluster="QuantConnect.Brokerages.IBrokerageModel.GetSlippageModel(QuantConnect.Securities.Security)", file="BrokerageModelSecurityInitializer.cs", label="Entry QuantConnect.Brokerages.IBrokerageModel.GetSlippageModel(QuantConnect.Securities.Security)", span="113-113"];
m9_0 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.BrokerageModelSecurityInitializer()", file="BrokerageModelSecurityInitializer.cs", label="Entry QuantConnect.Securities.BrokerageModelSecurityInitializer.BrokerageModelSecurityInitializer()", span="34-34"];
m9_1 [cluster="QuantConnect.Securities.BrokerageModelSecurityInitializer.BrokerageModelSecurityInitializer()", file="BrokerageModelSecurityInitializer.cs", label="Exit QuantConnect.Securities.BrokerageModelSecurityInitializer.BrokerageModelSecurityInitializer()", span="34-34"];
m9_17 [cluster="QuantConnect.Brokerages.IBrokerageModel.GetFillModel(QuantConnect.Securities.Security)", file="BrokerageModelSecurityInitializer.cs", label="Entry QuantConnect.Brokerages.IBrokerageModel.GetFillModel(QuantConnect.Securities.Security)", span="99-99"];
m9_21 [cluster="QuantConnect.Brokerages.IBrokerageModel.GetBuyingPowerModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", file="BrokerageModelSecurityInitializer.cs", label="Entry QuantConnect.Brokerages.IBrokerageModel.GetBuyingPowerModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", span="129-129"];
m9_18 [cluster="QuantConnect.Brokerages.IBrokerageModel.GetFeeModel(QuantConnect.Securities.Security)", file="BrokerageModelSecurityInitializer.cs", label="Entry QuantConnect.Brokerages.IBrokerageModel.GetFeeModel(QuantConnect.Securities.Security)", span="106-106"];
m9_20 [cluster="QuantConnect.Brokerages.IBrokerageModel.GetSettlementModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", file="BrokerageModelSecurityInitializer.cs", label="Entry QuantConnect.Brokerages.IBrokerageModel.GetSettlementModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", span="121-121"];
m9_23 [file="BrokerageModelSecurityInitializer.cs", label="QuantConnect.Securities.BrokerageModelSecurityInitializer", span=""];
m11_130 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", span="439-439"];
m11_247 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitStopMarketOrder(QuantConnect.Symbol, decimal, decimal)", span="439-439"];
m11_20 [cluster="QuantConnect.Securities.CashBook.Add(string, decimal, decimal)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.CashBook.Add(string, decimal, decimal)", span="63-63"];
m11_155 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", span="288-288"];
m11_164 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderRequiresBaseCurrencyInPortfolioPlusFees()", span="288-288"];
m11_44 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetReservedBuyingPowerForPosition(QuantConnect.Securities.Security)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.GetReservedBuyingPowerForPosition(QuantConnect.Securities.Security)", span="190-190"];
m11_34 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.TearDown()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.TearDown()", span="92-92"];
m11_36 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.TearDown()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.TearDown()", span="92-92"];
m11_180 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", span="338-338"];
m11_198 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketSellOrderChecksOpenOrders()", span="338-338"];
m11_19 [cluster="QuantConnect.Algorithm.QCAlgorithm.QCAlgorithm()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.QCAlgorithm()", span="96-96"];
m11_131 [cluster="QuantConnect.Orders.StopMarketOrder.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Orders.StopMarketOrder.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="55-55"];
m11_33 [cluster="QuantConnect.Securities.CashBuyingPowerModel.CashBuyingPowerModel()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.CashBuyingPowerModel()", span="24-24"];
m11_248 [cluster="QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, string)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol, decimal, decimal, string)", span="410-410"];
m11_60 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="55-55"];
m11_209 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", span="391-391"];
m11_226 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.CalculatesMaximumOrderQuantityCorrectly()", span="391-391"];
m11_83 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", span="164-164"];
m11_96 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderChecksOpenOrders()", span="164-164"];
m11_208 [cluster="QuantConnect.Securities.Cash.AddAmount(decimal)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.Cash.AddAmount(decimal)", span="112-112"];
m11_102 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", span="191-191"];
m11_129 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderChecksOpenOrders()", span="191-191"];
m11_249 [cluster="lambda expression", file="CashBuyingPowerModelTests.cs", label="Entry lambda expression", span="443-443"];
m11_237 [cluster="lambda expression", file="CashBuyingPowerModelTests.cs", label="Entry lambda expression", span="427-427"];
m11_239 [cluster="lambda expression", file="CashBuyingPowerModelTests.cs", label="Exit lambda expression", span="427-427"];
m11_251 [cluster="lambda expression", file="CashBuyingPowerModelTests.cs", label="Exit lambda expression", span="443-443"];
m11_31 [cluster="QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Data.SubscriptionDataConfig.SubscriptionDataConfig(System.Type, QuantConnect.Symbol, QuantConnect.Resolution, DateTimeZone, DateTimeZone, bool, bool, bool, bool, QuantConnect.TickType?, bool, QuantConnect.DataNormalizationMode)", span="157-157"];
m11_63 [cluster="Unk.IsFalse", file="CashBuyingPowerModelTests.cs", label="Entry Unk.IsFalse", span=""];
m11_99 [cluster="QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", span="540-540"];
m11_235 [cluster="QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, decimal, decimal, string)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol, decimal, decimal, string)", span="363-363"];
m11_73 [cluster="QuantConnect.Securities.SecurityPortfolioManager.SetCash(string, decimal, decimal)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.SecurityPortfolioManager.SetCash(string, decimal, decimal)", span="485-485"];
m11_234 [cluster="System.Threading.ManualResetEvent.ManualResetEvent(bool)", file="CashBuyingPowerModelTests.cs", label="Entry System.Threading.ManualResetEvent.ManualResetEvent(bool)", span="0-0"];
m11_37 [cluster="QuantConnect.Lean.Engine.TransactionHandlers.BrokerageTransactionHandler.Exit()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Lean.Engine.TransactionHandlers.BrokerageTransactionHandler.Exit()", span="608-608"];
m11_100 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetFinishedWarmingUp()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetFinishedWarmingUp()", span="142-142"];
m11_62 [cluster="Unk.IsTrue", file="CashBuyingPowerModelTests.cs", label="Entry Unk.IsTrue", span=""];
m11_97 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddCrypto(string, QuantConnect.Resolution, string, bool, decimal)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddCrypto(string, QuantConnect.Resolution, string, bool, decimal)", span="1613-1613"];
m11_25 [cluster="QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler.Initialize(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Lean.Engine.Results.IResultHandler)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler.Initialize(QuantConnect.Interfaces.IAlgorithm, QuantConnect.Interfaces.IBrokerage, QuantConnect.Lean.Engine.Results.IResultHandler)", span="36-36"];
m11_24 [cluster="QuantConnect.Tests.Engine.TestResultHandler.TestResultHandler(System.Action<QuantConnect.Packets.Packet>)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Engine.TestResultHandler.TestResultHandler(System.Action<QuantConnect.Packets.Packet>)", span="51-51"];
m11_143 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.GetMaximumOrderQuantityForTargetValue(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, decimal)", span="117-117"];
m11_50 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", span="113-113"];
m11_58 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithUsdRequiresUsdInPortfolio()", span="113-113"];
m11_26 [cluster="System.Threading.Thread.Thread(System.Threading.ThreadStart)", file="CashBuyingPowerModelTests.cs", label="Entry System.Threading.Thread.Thread(System.Threading.ThreadStart)", span="0-0"];
m11_27 [cluster="System.Threading.Thread.Start()", file="CashBuyingPowerModelTests.cs", label="Entry System.Threading.Thread.Start()", span="0-0"];
m11_64 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", span="131-131"];
m11_72 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyBtcWithEurRequiresEurInPortfolio()", span="131-131"];
m11_0 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", span="46-46"];
m11_18 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.Initialize()", span="46-46"];
m11_49 [cluster="QuantConnect.Securities.CashBuyingPowerModel.SetLeverage(QuantConnect.Securities.Security, decimal)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.SetLeverage(QuantConnect.Securities.Security, decimal)", span="45-45"];
m11_82 [cluster="QuantConnect.Securities.Cash.SetAmount(decimal)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.Cash.SetAmount(decimal)", span="125-125"];
m11_45 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SetLeverageDoesNotUpdateLeverage()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SetLeverageDoesNotUpdateLeverage()", span="105-105"];
m11_48 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SetLeverageDoesNotUpdateLeverage()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SetLeverageDoesNotUpdateLeverage()", span="105-105"];
m11_23 [cluster="QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Brokerages.Backtesting.BacktestingBrokerage.BacktestingBrokerage(QuantConnect.Interfaces.IAlgorithm)", span="50-50"];
m11_30 [cluster="QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", span="82-82"];
m11_43 [cluster="Unk.AreEqual", file="CashBuyingPowerModelTests.cs", label="Entry Unk.AreEqual", span=""];
m11_28 [cluster="QuantConnect.Securities.SecurityTransactionManager.SetOrderProcessor(QuantConnect.Securities.IOrderProcessor)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.SecurityTransactionManager.SetOrderProcessor(QuantConnect.Securities.IOrderProcessor)", span="335-335"];
m11_142 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="49-49"];
m11_199 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", span="374-374"];
m11_206 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitBuyOrderIncludesFees()", span="374-374"];
m11_42 [cluster="QuantConnect.Securities.CashBuyingPowerModel.GetLeverage(QuantConnect.Securities.Security)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.GetLeverage(QuantConnect.Securities.Security)", span="31-31"];
m11_207 [cluster="QuantConnect.Orders.Fees.ConstantFeeModel.ConstantFeeModel(decimal)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Orders.Fees.ConstantFeeModel.ConstantFeeModel(decimal)", span="31-31"];
m11_61 [cluster="QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.CashBuyingPowerModel.HasSufficientBuyingPowerForOrder(QuantConnect.Securities.SecurityPortfolioManager, QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="57-57"];
m11_29 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", span="37-37"];
m11_22 [cluster="QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler.BacktestingTransactionHandler()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler.BacktestingTransactionHandler()", span="25-25"];
m11_21 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", span="967-967"];
m11_101 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", span="423-423"];
m11_233 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.SubmitLimitOrder(QuantConnect.Symbol, decimal, decimal)", span="423-423"];
m11_132 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", span="245-245"];
m11_141 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithUsdRequiresUsdInPortfolioPlusFees()", span="245-245"];
m11_38 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.InitializesCorrectly()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.InitializesCorrectly()", span="98-98"];
m11_41 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.InitializesCorrectly()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.InitializesCorrectly()", span="98-98"];
m11_236 [cluster="System.Threading.WaitHandle.WaitOne()", file="CashBuyingPowerModelTests.cs", label="Entry System.Threading.WaitHandle.WaitOne()", span="0-0"];
m11_59 [cluster="QuantConnect.Securities.SecurityPortfolioManager.SetCash(decimal)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.SecurityPortfolioManager.SetCash(decimal)", span="474-474"];
m11_144 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", span="266-266"];
m11_154 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyBtcWithEurRequiresEurInPortfolioPlusFees()", span="266-266"];
m11_32 [cluster="QuantConnect.Securities.SymbolProperties.SymbolProperties(string, string, decimal, decimal, decimal)", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Securities.SymbolProperties.SymbolProperties(string, string, decimal, decimal, decimal)", span="70-70"];
m11_165 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", span="308-308"];
m11_179 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.MarketBuyOrderChecksOpenOrders()", span="308-308"];
m11_74 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", span="149-149"];
m11_81 [cluster="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", file="CashBuyingPowerModelTests.cs", label="Exit QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests.LimitSellOrderRequiresBaseCurrencyInPortfolio()", span="149-149"];
m11_98 [cluster="QuantConnect.Data.Market.Tick.Tick()", file="CashBuyingPowerModelTests.cs", label="Entry QuantConnect.Data.Market.Tick.Tick()", span="98-98"];
m11_240 [cluster="System.Threading.EventWaitHandle.Set()", file="CashBuyingPowerModelTests.cs", label="Entry System.Threading.EventWaitHandle.Set()", span="0-0"];
m11_252 [file="CashBuyingPowerModelTests.cs", label="QuantConnect.Tests.Common.Securities.CashBuyingPowerModelTests", span=""];
m11_253 [file="CashBuyingPowerModelTests.cs", label=resetEvent, span=""];
m11_254 [file="CashBuyingPowerModelTests.cs", label=resetEvent, span=""];
m12_8 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Symbol, QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", file="Crypto.cs", label="Entry QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Symbol, QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", span="69-69"];
m12_9 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Symbol, QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", file="Crypto.cs", label="Holdings = new CryptoHolding(this)", span="86-86"];
m12_11 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Symbol, QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", file="Crypto.cs", label="Forex.Forex.DecomposeCurrencyPair(symbol.Value, out baseCurrencySymbol, out quoteCurrencySymbol)", span="90-90"];
m12_10 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Symbol, QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", file="Crypto.cs", label="string baseCurrencySymbol, quoteCurrencySymbol", span="89-89"];
m12_12 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Symbol, QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", file="Crypto.cs", label="BaseCurrencySymbol = baseCurrencySymbol", span="91-91"];
m12_13 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Symbol, QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", file="Crypto.cs", label="Exit QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Symbol, QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", span="69-69"];
m12_6 [cluster="QuantConnect.Securities.Crypto.CryptoHolding.CryptoHolding(QuantConnect.Securities.Crypto.Crypto)", file="Crypto.cs", label="Entry QuantConnect.Securities.Crypto.CryptoHolding.CryptoHolding(QuantConnect.Securities.Crypto.Crypto)", span="27-27"];
m12_0 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", file="Crypto.cs", label="Entry QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", span="37-37"];
m12_1 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", file="Crypto.cs", label="Holdings = new CryptoHolding(this)", span="54-54"];
m12_3 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", file="Crypto.cs", label="Forex.Forex.DecomposeCurrencyPair(config.Symbol.Value, out baseCurrencySymbol, out quoteCurrencySymbol)", span="58-58"];
m12_2 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", file="Crypto.cs", label="string baseCurrencySymbol, quoteCurrencySymbol", span="57-57"];
m12_4 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", file="Crypto.cs", label="BaseCurrencySymbol = baseCurrencySymbol", span="59-59"];
m12_5 [cluster="QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", file="Crypto.cs", label="Exit QuantConnect.Securities.Crypto.Crypto.Crypto(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Securities.Cash, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.SymbolProperties)", span="37-37"];
m12_7 [cluster="QuantConnect.Securities.Forex.Forex.DecomposeCurrencyPair(string, out string, out string)", file="Crypto.cs", label="Entry QuantConnect.Securities.Forex.Forex.DecomposeCurrencyPair(string, out string, out string)", span="108-108"];
m12_14 [file="Crypto.cs", label="QuantConnect.Securities.Crypto.Crypto", span=""];
m13_48 [cluster="QuantConnect.Logging.Log.Error(string, bool)", file="DefaultBrokerageModel.cs", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="65-65"];
m13_50 [cluster="QuantConnect.Messaging.Messaging.SendNotification(QuantConnect.Notifications.Notification)", file="DefaultBrokerageModel.cs", label="Entry QuantConnect.Messaging.Messaging.SendNotification(QuantConnect.Notifications.Notification)", span="152-152"];
m13_51 [cluster="QuantConnect.Messaging.Messaging.SendNotification(QuantConnect.Notifications.Notification)", file="DefaultBrokerageModel.cs", label="var type = notification.GetType()", span="154-154"];
m13_55 [cluster="QuantConnect.Messaging.Messaging.SendNotification(QuantConnect.Notifications.Notification)", file="DefaultBrokerageModel.cs", label="notification.Send()", span="162-162"];
m13_52 [cluster="QuantConnect.Messaging.Messaging.SendNotification(QuantConnect.Notifications.Notification)", file="DefaultBrokerageModel.cs", label="type == typeof (NotificationEmail)\r\n             || type == typeof (NotificationWeb)\r\n             || type == typeof (NotificationSms)", span="155-157"];
m13_53 [cluster="QuantConnect.Messaging.Messaging.SendNotification(QuantConnect.Notifications.Notification)", file="DefaultBrokerageModel.cs", label="Log.Error(''Messaging.SendNotification(): Send not implemented for notification of type: '' + type.Name)", span="159-159"];
m13_54 [cluster="QuantConnect.Messaging.Messaging.SendNotification(QuantConnect.Notifications.Notification)", file="DefaultBrokerageModel.cs", label="return;", span="160-160"];
m13_56 [cluster="QuantConnect.Messaging.Messaging.SendNotification(QuantConnect.Notifications.Notification)", file="DefaultBrokerageModel.cs", label="Exit QuantConnect.Messaging.Messaging.SendNotification(QuantConnect.Notifications.Notification)", span="152-152"];
m13_58 [cluster="QuantConnect.Notifications.Notification.Send()", file="DefaultBrokerageModel.cs", label="Entry QuantConnect.Notifications.Notification.Send()", span="26-26"];
m13_2 [cluster="QuantConnect.Messaging.Messaging.SetAuthentication(QuantConnect.Packets.AlgorithmNodePacket)", file="DefaultBrokerageModel.cs", label="Entry QuantConnect.Messaging.Messaging.SetAuthentication(QuantConnect.Packets.AlgorithmNodePacket)", span="55-55"];
m13_3 [cluster="QuantConnect.Messaging.Messaging.SetAuthentication(QuantConnect.Packets.AlgorithmNodePacket)", file="DefaultBrokerageModel.cs", label="_job = job", span="57-57"];
m13_4 [cluster="QuantConnect.Messaging.Messaging.SetAuthentication(QuantConnect.Packets.AlgorithmNodePacket)", file="DefaultBrokerageModel.cs", label="Exit QuantConnect.Messaging.Messaging.SetAuthentication(QuantConnect.Packets.AlgorithmNodePacket)", span="55-55"];
m13_47 [cluster="string.IsNullOrEmpty(string)", file="DefaultBrokerageModel.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m13_46 [cluster="QuantConnect.Logging.Log.Trace(string, bool)", file="DefaultBrokerageModel.cs", label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106"];
m13_57 [cluster="object.GetType()", file="DefaultBrokerageModel.cs", label="Entry object.GetType()", span="0-0"];
m13_0 [cluster="QuantConnect.Messaging.Messaging.Initialize()", file="DefaultBrokerageModel.cs", label="Entry QuantConnect.Messaging.Messaging.Initialize()", span="47-47"];
m13_1 [cluster="QuantConnect.Messaging.Messaging.Initialize()", file="DefaultBrokerageModel.cs", label="Exit QuantConnect.Messaging.Messaging.Initialize()", span="47-47"];
m13_5 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Entry QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", span="63-63"];
m13_6 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="packet.Type", span="65-65"];
m13_8 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="var debug = (DebugPacket) packet", span="68-68"];
m13_11 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="var systemDebug = (SystemDebugPacket)packet", span="73-73"];
m13_14 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="var log = (LogPacket) packet", span="78-78"];
m13_17 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="var runtime = (RuntimeErrorPacket) packet", span="83-83"];
m13_21 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="var handled = (HandledErrorPacket) packet", span="89-89"];
m13_26 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="var result = (BacktestResultPacket) packet", span="104-104"];
m13_44 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="StreamingApi.Transmit(_job.UserId, _job.Channel, packet)", span="145-145"];
m13_7 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="PacketType.Debug", span="67-67"];
m13_10 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="PacketType.SystemDebug", span="72-72"];
m13_13 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="PacketType.Log", span="77-77"];
m13_16 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="PacketType.RuntimeError", span="82-82"];
m13_20 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="PacketType.HandledError", span="88-88"];
m13_24 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="PacketType.AlphaResult", span="94-94"];
m13_25 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="PacketType.BacktestResult", span="103-103"];
m13_12 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace(''Debug: '' + systemDebug.Message)", span="74-74"];
m13_15 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace(''Log: '' + log.Message)", span="79-79"];
m13_18 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="var rstack = (!string.IsNullOrEmpty(runtime.StackTrace) ? (Environment.NewLine + '' '' + runtime.StackTrace) : string.Empty)", span="84-84"];
m13_19 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Error(runtime.Message + rstack)", span="85-85"];
m13_22 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="var hstack = (!string.IsNullOrEmpty(handled.StackTrace) ? (Environment.NewLine + '' '' + handled.StackTrace) : string.Empty)", span="90-90"];
m13_23 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Error(handled.Message + hstack)", span="91-91"];
m13_27 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="result.Progress == 1", span="106-106"];
m13_28 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="result.Results.Statistics", span="111-111"];
m13_30 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="result.Results.IsFrameworkAlgorithm", span="117-117"];
m13_31 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="var stats = result.Results.AlphaRuntimeStatistics", span="119-119"];
m13_43 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="StreamingApi.IsEnabled", span="143-143"];
m13_29 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace(''STATISTICS:: '' + pair.Key + '' '' + pair.Value)", span="113-113"];
m13_32 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace(''ALPHA STATISTICS'')", span="120-120"];
m13_33 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace($''\tTotal Alphas Generated           {stats.TotalAlphasGenerated}'')", span="121-121"];
m13_34 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace($''\tTotal Alphas Closed              {stats.TotalAlphasClosed}'')", span="122-122"];
m13_35 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace($''\tTotal Alphas Analysis Completed  {stats.TotalAlphasAnalysisCompleted}'')", span="123-123"];
m13_36 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace($''\tTotal Estimated Value           ${stats.TotalEstimatedAlphaValue:.0000}'')", span="124-124"];
m13_37 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace($''\tEstimated Value/Alpha           ${stats.MeanPopulationEstimatedAlphaValue:.0000}'')", span="125-125"];
m13_38 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace($''\tMean Population Direction        {100 * stats.MeanPopulationScore.Direction:.0000}%'')", span="126-126"];
m13_39 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace($''\tMean Population Magnitude        {100 * stats.MeanPopulationScore.Magnitude:.0000}%'')", span="127-127"];
m13_40 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace($''\tRolling Population Direction     {100 * stats.RollingAveragedPopulationScore.Direction:.0000}%'')", span="128-128"];
m13_41 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace($''\tRolling Population Magnitude     {100 * stats.RollingAveragedPopulationScore.Magnitude:.0000}%'')", span="129-129"];
m13_42 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Log.Trace($''\tLong/Short Ratio                 {100*stats.LongShortRatio:.0000}%'')", span="130-130"];
m13_45 [cluster="QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Exit QuantConnect.Messaging.Messaging.Send(QuantConnect.Packets.Packet)", span="63-63"];
m13_49 [cluster="QuantConnect.Messaging.StreamingApi.Transmit(int, string, QuantConnect.Packets.Packet)", file="DefaultBrokerageModel.cs", label="Entry QuantConnect.Messaging.StreamingApi.Transmit(int, string, QuantConnect.Packets.Packet)", span="48-48"];
m13_59 [file="DefaultBrokerageModel.cs", label="QuantConnect.Messaging.Messaging", span=""];
m14_7 [cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98"];
m14_18 [cluster="System.Action<T>.Invoke(T)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m14_8 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", span="29-29"];
m14_9 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="disposable == null", span="31-31"];
m14_11 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="disposable.Dispose()", span="38-38"];
m14_14 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="errorHandler(error)", span="43-43"];
m14_10 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="return false;", span="33-33"];
m14_12 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="return true;", span="39-39"];
m14_13 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label=Exception, span="41-41"];
m14_15 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="return false;", span="44-44"];
m14_16 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="Exit QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", span="29-29"];
m14_17 [cluster="System.IDisposable.Dispose()", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="Entry System.IDisposable.Dispose()", span="0-0"];
m14_3 [cluster="System.IDisposable.DisposeSafely(System.Action<System.Exception>)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="Entry System.IDisposable.DisposeSafely(System.Action<System.Exception>)", span="29-29"];
m14_0 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="Entry QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable)", span="15-15"];
m14_1 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="return disposable.DisposeSafely(error => Log.Error(error));", span="17-17"];
m14_2 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable)", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="Exit QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable)", span="15-15"];
m14_4 [cluster="lambda expression", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="Entry lambda expression", span="17-17"];
m14_5 [cluster="lambda expression", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="Log.Error(error)", span="17-17"];
m14_6 [cluster="lambda expression", file="FineFundamentalSubscriptionEnumeratorFactoryTests.cs", label="Exit lambda expression", span="17-17"];
m15_40 [cluster="System.Math.Truncate(decimal)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry System.Math.Truncate(decimal)", span="0-0"];
m15_19 [cluster="QuantConnect.Securities.SecurityMarginModel.SecurityMarginModel(decimal)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Securities.SecurityMarginModel.SecurityMarginModel(decimal)", span="63-63"];
m15_39 [cluster="System.Math.Abs(decimal)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry System.Math.Abs(decimal)", span="0-0"];
m15_43 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol, decimal, bool, string)", span="885-885"];
m15_23 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", span="53-53"];
m15_24 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="var quantity = Math.Truncate((Portfolio.Cash + Portfolio.TotalFees) / Math.Abs(e.Value + 1))", span="55-55"];
m15_25 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="!Portfolio.Invested", span="56-56"];
m15_26 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="Order(''BTCUSD'', quantity)", span="58-58"];
m15_27 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="Portfolio[''BTCUSD''].Quantity == quantity", span="60-60"];
m15_29 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="Portfolio[''BTCUSD''].Quantity == quantity + 0.1m", span="64-64"];
m15_31 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="Portfolio[''BTCUSD''].Quantity == quantity + 0.11m", span="68-68"];
m15_33 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="Portfolio[''BTCUSD''].Quantity == quantity + 0.09m", span="72-72"];
m15_28 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="Order(''BTCUSD'', 0.1)", span="62-62"];
m15_30 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="Order(''BTCUSD'', 0.01)", span="66-66"];
m15_32 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="Order(''BTCUSD'', -0.02)", span="70-70"];
m15_34 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="Order(''BTCUSD'', 0.00001)", span="75-75"];
m15_35 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="SetHoldings(''BTCUSD'', -2.0m)", span="77-77"];
m15_36 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="SetHoldings(''BTCUSD'', 2.0m)", span="78-78"];
m15_37 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="Quit()", span="79-79"];
m15_38 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", file="FractionalQuantityRegressionAlgorithm.cs", label="Exit QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.DataConsolidated(object, QuantConnect.Data.Market.QuoteBar)", span="53-53"];
m15_42 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, double)", span="127-127"];
m15_20 [cluster="QuantConnect.Data.Consolidators.QuoteBarConsolidator.QuoteBarConsolidator(int)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Data.Consolidators.QuoteBarConsolidator.QuoteBarConsolidator(int)", span="38-38"];
m15_18 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, string, bool, decimal, bool)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType, string, QuantConnect.Resolution, string, bool, decimal, bool)", span="1376-1376"];
m15_22 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(QuantConnect.Symbol)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(QuantConnect.Symbol)", span="1060-1060"];
m15_21 [cluster="QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Data.SubscriptionManager.AddConsolidator(QuantConnect.Symbol, QuantConnect.Data.Consolidators.IDataConsolidator)", span="169-169"];
m15_41 [cluster="QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol, decimal)", span="145-145"];
m15_0 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", span="31-31"];
m15_1 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", file="FractionalQuantityRegressionAlgorithm.cs", label="SetStartDate(2015, 11, 12)", span="33-33"];
m15_2 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", file="FractionalQuantityRegressionAlgorithm.cs", label="SetEndDate(2016, 04, 01)", span="34-34"];
m15_3 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", file="FractionalQuantityRegressionAlgorithm.cs", label="SetCash(100000)", span="37-37"];
m15_4 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", file="FractionalQuantityRegressionAlgorithm.cs", label="SetBrokerageModel(BrokerageName.GDAX, AccountType.Cash)", span="38-38"];
m15_5 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", file="FractionalQuantityRegressionAlgorithm.cs", label="SetTimeZone(NodaTime.DateTimeZone.Utc)", span="40-40"];
m15_6 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", file="FractionalQuantityRegressionAlgorithm.cs", label="var security = AddSecurity(SecurityType.Crypto, ''BTCUSD'', Resolution.Daily, Market.GDAX, false, 3.3m, true)", span="41-41"];
m15_11 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", file="FractionalQuantityRegressionAlgorithm.cs", label="SetBenchmark(security.Symbol)", span="50-50"];
m15_8 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", file="FractionalQuantityRegressionAlgorithm.cs", label="var con = new QuoteBarConsolidator(1)", span="47-47"];
m15_9 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", file="FractionalQuantityRegressionAlgorithm.cs", label="SubscriptionManager.AddConsolidator(''BTCUSD'', con)", span="48-48"];
m15_10 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", file="FractionalQuantityRegressionAlgorithm.cs", label="con.DataConsolidated += DataConsolidated", span="49-49"];
m15_12 [cluster="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", file="FractionalQuantityRegressionAlgorithm.cs", label="Exit QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm.Initialize()", span="31-31"];
m15_14 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", span="1179-1179"];
m15_44 [cluster="QuantConnect.Algorithm.QCAlgorithm.Quit(string)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.Quit(string)", span="1777-1777"];
m15_16 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", span="967-967"];
m15_17 [cluster="Unk.SetTimeZone", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry Unk.SetTimeZone", span=""];
m15_13 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", span="1154-1154"];
m15_15 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", file="FractionalQuantityRegressionAlgorithm.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", span="1103-1103"];
m15_45 [file="FractionalQuantityRegressionAlgorithm.cs", label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", span=""];
m17_25 [cluster="System.Math.Min(int, int)", file="GDAXBrokerageModel.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m17_2 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.ForexMarginModel(decimal)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Securities.Forex.ForexMarginModel.ForexMarginModel(decimal)", span="43-43"];
m17_3 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.ForexMarginModel(decimal)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Securities.Forex.ForexMarginModel.ForexMarginModel(decimal)", span="43-43"];
m17_26 [cluster="QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, string, int, decimal, decimal, System.DateTime, string)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, string, int, decimal, decimal, System.DateTime, string)", span="92-92"];
m17_0 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.ForexMarginModel(decimal, decimal)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Securities.Forex.ForexMarginModel.ForexMarginModel(decimal, decimal)", span="34-34"];
m17_1 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.ForexMarginModel(decimal, decimal)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Securities.Forex.ForexMarginModel.ForexMarginModel(decimal, decimal)", span="34-34"];
m17_11 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", span="74-74"];
m17_14 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", file="GDAXBrokerageModel.cs", label="var forex = (Forex)security", span="80-80"];
m17_17 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", file="GDAXBrokerageModel.cs", label="decimal delta = (totalMargin - netLiquidationValue)/forex.QuoteCurrency.ConversionRate", span="89-89"];
m17_18 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", file="GDAXBrokerageModel.cs", label="int quantity = (int) Math.Round(delta/security.Price, MidpointRounding.AwayFromZero)", span="92-92"];
m17_19 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", file="GDAXBrokerageModel.cs", label="quantity = Math.Min((int)security.Holdings.AbsoluteQuantity, quantity)", span="95-95"];
m17_20 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", file="GDAXBrokerageModel.cs", label="security.Holdings.IsLong", span="96-96"];
m17_22 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", file="GDAXBrokerageModel.cs", label="return new SubmitOrderRequest(OrderType.Market, security.Type, security.Symbol, quantity, 0, 0, security.Time, ''Margin Call'');", span="102-102"];
m17_13 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", file="GDAXBrokerageModel.cs", label="return null;", span="78-78"];
m17_15 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", file="GDAXBrokerageModel.cs", label="forex.Price == 0m || forex.QuoteCurrency.ConversionRate == 0m", span="83-83"];
m17_16 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", file="GDAXBrokerageModel.cs", label="return null;", span="85-85"];
m17_21 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", file="GDAXBrokerageModel.cs", label="quantity *= -1", span="99-99"];
m17_23 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Securities.Forex.ForexMarginModel.GenerateMarginCallOrder(QuantConnect.Securities.Security, decimal, decimal)", span="74-74"];
m17_10 [cluster="QuantConnect.Securities.Interfaces.ISecurityTransactionModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Securities.Interfaces.ISecurityTransactionModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="87-87"];
m17_4 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageModel.cs", label="Entry QuantConnect.Securities.Forex.ForexMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="54-54"];
m17_5 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageModel.cs", label="var forex = (Forex)security", span="56-56"];
m17_6 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageModel.cs", label="var orderFees = security.TransactionModel.GetOrderFee(security, order)", span="60-60"];
m17_7 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageModel.cs", label="var orderCostInAccountCurrency = order.Price*order.AbsoluteQuantity*forex.QuoteCurrency.ConversionRate", span="62-62"];
m17_8 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageModel.cs", label="return orderCostInAccountCurrency*InitialMarginRequirement + orderFees;", span="63-63"];
m17_9 [cluster="QuantConnect.Securities.Forex.ForexMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageModel.cs", label="Exit QuantConnect.Securities.Forex.ForexMarginModel.GetInitialMarginRequiredForOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="54-54"];
m17_24 [cluster="System.Math.Round(decimal, System.MidpointRounding)", file="GDAXBrokerageModel.cs", label="Entry System.Math.Round(decimal, System.MidpointRounding)", span="0-0"];
m17_27 [file="GDAXBrokerageModel.cs", label="QuantConnect.Securities.Forex.ForexMarginModel", span=""];
m18_4 [cluster="QuantConnect.Brokerages.GDAXBrokerageModel.GetLeverage(QuantConnect.Securities.Security)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Brokerages.GDAXBrokerageModel.GetLeverage(QuantConnect.Securities.Security)", span="73-73"];
m18_61 [cluster="QuantConnect.Orders.Fees.GDAXFeeModel.GDAXFeeModel()", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Orders.Fees.GDAXFeeModel.GDAXFeeModel()", span="23-23"];
m18_39 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanOnlySubmitCryptoOrders(QuantConnect.SecurityType, bool)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanOnlySubmitCryptoOrders(QuantConnect.SecurityType, bool)", span="93-93"];
m18_40 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanOnlySubmitCryptoOrders(QuantConnect.SecurityType, bool)", file="GDAXBrokerageModelTests.cs", label="BrokerageMessageEvent message", span="95-95"];
m18_43 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanOnlySubmitCryptoOrders(QuantConnect.SecurityType, bool)", file="GDAXBrokerageModelTests.cs", label="Assert.AreEqual(isValidSecurityType, _unit.CanSubmitOrder(GDAXTestsHelpers.GetSecurity(1.0m, securityType), order.Object, out message))", span="99-99"];
m18_42 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanOnlySubmitCryptoOrders(QuantConnect.SecurityType, bool)", file="GDAXBrokerageModelTests.cs", label="order.Object.Quantity = 10.0m", span="97-97"];
m18_44 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanOnlySubmitCryptoOrders(QuantConnect.SecurityType, bool)", file="GDAXBrokerageModelTests.cs", label="Exit QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanOnlySubmitCryptoOrders(QuantConnect.SecurityType, bool)", span="93-93"];
m18_21 [cluster="Unk.CanUpdateOrder", file="GDAXBrokerageModelTests.cs", label="Entry Unk.CanUpdateOrder", span=""];
m18_19 [cluster="QuantConnect.Orders.UpdateOrderRequest.UpdateOrderRequest(System.DateTime, int, QuantConnect.Orders.UpdateOrderFields)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Orders.UpdateOrderRequest.UpdateOrderRequest(System.DateTime, int, QuantConnect.Orders.UpdateOrderFields)", span="54-54"];
m18_66 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForMakerOrder()", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForMakerOrder()", span="129-129"];
m18_67 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForMakerOrder()", file="GDAXBrokerageModelTests.cs", label="var security = GDAXTestsHelpers.GetSecurity()", span="131-131"];
m18_68 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForMakerOrder()", file="GDAXBrokerageModelTests.cs", label="security.FeeModel = new GDAXFeeModel()", span="132-132"];
m18_69 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForMakerOrder()", file="GDAXBrokerageModelTests.cs", label="security.SetMarketPrice(new TradeBar { Symbol = security.Symbol, Close = 5000m })", span="133-133"];
m18_70 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForMakerOrder()", file="GDAXBrokerageModelTests.cs", label="var orderFee = security.FeeModel.GetOrderFee(security, new LimitOrder(security.Symbol, 1, 5000m, DateTime.MinValue))", span="134-134"];
m18_71 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForMakerOrder()", file="GDAXBrokerageModelTests.cs", label="Assert.AreEqual(0, orderFee)", span="136-136"];
m18_72 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForMakerOrder()", file="GDAXBrokerageModelTests.cs", label="Exit QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForMakerOrder()", span="129-129"];
m18_73 [cluster="QuantConnect.Orders.LimitOrder.LimitOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Orders.LimitOrder.LimitOrder(QuantConnect.Symbol, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="55-55"];
m18_31 [cluster="System.Collections.Generic.List<T>.List()", file="GDAXBrokerageModelTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m18_15 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanUpdateOrderTest()", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanUpdateOrderTest()", span="52-52"];
m18_16 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanUpdateOrderTest()", file="GDAXBrokerageModelTests.cs", label="BrokerageMessageEvent message", span="54-54"];
m18_18 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanUpdateOrderTest()", file="GDAXBrokerageModelTests.cs", label="Exit QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanUpdateOrderTest()", span="52-52"];
m18_52 [cluster="QuantConnect.Orders.Order.CreateOrder(QuantConnect.Orders.SubmitOrderRequest)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Orders.Order.CreateOrder(QuantConnect.Orders.SubmitOrderRequest)", span="268-268"];
m18_3 [cluster="QuantConnect.Tests.Brokerages.GDAX.GDAXTestsHelpers.GetSecurity(decimal, QuantConnect.SecurityType)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Tests.Brokerages.GDAX.GDAXTestsHelpers.GetSecurity(decimal, QuantConnect.SecurityType)", span="12-12"];
m18_77 [cluster="lambda expression", file="GDAXBrokerageModelTests.cs", label="Entry lambda expression", span="142-145"];
m18_79 [cluster="lambda expression", file="GDAXBrokerageModelTests.cs", label="Exit lambda expression", span="142-145"];
m18_20 [cluster="QuantConnect.Orders.UpdateOrderFields.UpdateOrderFields()", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Orders.UpdateOrderFields.UpdateOrderFields()", span="20-20"];
m18_63 [cluster="QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Securities.Security.SetMarketPrice(QuantConnect.Data.BaseData)", span="540-540"];
m18_74 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.ThrowsWhenCalledWithMarginAccountType()", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.ThrowsWhenCalledWithMarginAccountType()", span="140-140"];
m18_76 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.ThrowsWhenCalledWithMarginAccountType()", file="GDAXBrokerageModelTests.cs", label="Exit QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.ThrowsWhenCalledWithMarginAccountType()", span="140-140"];
m18_6 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.GetFeeModelTest()", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.GetFeeModelTest()", span="40-40"];
m18_7 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.GetFeeModelTest()", file="GDAXBrokerageModelTests.cs", label="Assert.IsInstanceOf<GDAXFeeModel>(_unit.GetFeeModel(GDAXTestsHelpers.GetSecurity()))", span="42-42"];
m18_8 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.GetFeeModelTest()", file="GDAXBrokerageModelTests.cs", label="Exit QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.GetFeeModelTest()", span="40-40"];
m18_10 [cluster="Unk.>", file="GDAXBrokerageModelTests.cs", label="Entry Unk.>", span=""];
m18_22 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenBrokerageIdIsCorrect(bool)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenBrokerageIdIsCorrect(bool)", span="61-61"];
m18_23 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenBrokerageIdIsCorrect(bool)", file="GDAXBrokerageModelTests.cs", label="BrokerageMessageEvent message", span="63-63"];
m18_26 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenBrokerageIdIsCorrect(bool)", file="GDAXBrokerageModelTests.cs", label=isUpdate, span="67-67"];
m18_28 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenBrokerageIdIsCorrect(bool)", file="GDAXBrokerageModelTests.cs", label="Assert.AreEqual(!isUpdate, _unit.CanSubmitOrder(GDAXTestsHelpers.GetSecurity(), order.Object, out message))", span="72-72"];
m18_25 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenBrokerageIdIsCorrect(bool)", file="GDAXBrokerageModelTests.cs", label="order.Object.Quantity = 10.0m", span="65-65"];
m18_27 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenBrokerageIdIsCorrect(bool)", file="GDAXBrokerageModelTests.cs", label="order.Object.BrokerId = new List<string>() {''abc123''}", span="69-69"];
m18_29 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenBrokerageIdIsCorrect(bool)", file="GDAXBrokerageModelTests.cs", label="Exit QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenBrokerageIdIsCorrect(bool)", span="61-61"];
m18_5 [cluster="Unk.AreEqual", file="GDAXBrokerageModelTests.cs", label="Entry Unk.AreEqual", span=""];
m18_9 [cluster="QuantConnect.Brokerages.GDAXBrokerageModel.GetFeeModel(QuantConnect.Securities.Security)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Brokerages.GDAXBrokerageModel.GetFeeModel(QuantConnect.Securities.Security)", span="84-84"];
m18_54 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForTakerOrder()", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForTakerOrder()", span="118-118"];
m18_55 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForTakerOrder()", file="GDAXBrokerageModelTests.cs", label="var security = GDAXTestsHelpers.GetSecurity()", span="120-120"];
m18_56 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForTakerOrder()", file="GDAXBrokerageModelTests.cs", label="security.FeeModel = new GDAXFeeModel()", span="121-121"];
m18_57 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForTakerOrder()", file="GDAXBrokerageModelTests.cs", label="security.SetMarketPrice(new TradeBar { Symbol = security.Symbol, Close = 5000m })", span="122-122"];
m18_58 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForTakerOrder()", file="GDAXBrokerageModelTests.cs", label="var orderFee = security.FeeModel.GetOrderFee(security, new MarketOrder(security.Symbol, 1, DateTime.MinValue))", span="123-123"];
m18_59 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForTakerOrder()", file="GDAXBrokerageModelTests.cs", label="Assert.AreEqual(12.5m, orderFee)", span="125-125"];
m18_60 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForTakerOrder()", file="GDAXBrokerageModelTests.cs", label="Exit QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.FeeModelReturnsCorrectOrderFeeForTakerOrder()", span="118-118"];
m18_64 [cluster="QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Orders.MarketOrder.MarketOrder(QuantConnect.Symbol, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="49-49"];
m18_30 [cluster="Mock<Order>.cstr", file="GDAXBrokerageModelTests.cs", label="Entry Mock<Order>.cstr", span=""];
m18_14 [cluster="QuantConnect.Brokerages.GDAXBrokerageModel.GetBuyingPowerModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Brokerages.GDAXBrokerageModel.GetBuyingPowerModel(QuantConnect.Securities.Security, QuantConnect.AccountType)", span="167-167"];
m18_65 [cluster="QuantConnect.Orders.Fees.IFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Orders.Fees.IFeeModel.GetOrderFee(QuantConnect.Securities.Security, QuantConnect.Orders.Order)", span="31-31"];
m18_51 [cluster="QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, QuantConnect.Symbol, decimal, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Orders.SubmitOrderRequest.SubmitOrderRequest(QuantConnect.Orders.OrderType, QuantConnect.SecurityType, QuantConnect.Symbol, decimal, decimal, decimal, System.DateTime, string, QuantConnect.Interfaces.IOrderProperties)", span="102-102"];
m18_80 [cluster="QuantConnect.Brokerages.GDAXBrokerageModel.GDAXBrokerageModel(QuantConnect.AccountType)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Brokerages.GDAXBrokerageModel.GDAXBrokerageModel(QuantConnect.AccountType)", span="59-59"];
m18_53 [cluster="QuantConnect.Brokerages.GDAXBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Brokerages.GDAXBrokerageModel.CanSubmitOrder(QuantConnect.Securities.Security, QuantConnect.Orders.Order, out QuantConnect.Brokerages.BrokerageMessageEvent)", span="110-110"];
m18_11 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.GetBuyingPowerModelTest()", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.GetBuyingPowerModelTest()", span="46-46"];
m18_13 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.GetBuyingPowerModelTest()", file="GDAXBrokerageModelTests.cs", label="Exit QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.GetBuyingPowerModelTest()", span="46-46"];
m18_32 [cluster="Unk.CanSubmitOrder", file="GDAXBrokerageModelTests.cs", label="Entry Unk.CanSubmitOrder", span=""];
m18_33 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenQuantityIsLargeEnough(decimal, bool)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenQuantityIsLargeEnough(decimal, bool)", span="77-77"];
m18_34 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenQuantityIsLargeEnough(decimal, bool)", file="GDAXBrokerageModelTests.cs", label="BrokerageMessageEvent message", span="79-79"];
m18_36 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenQuantityIsLargeEnough(decimal, bool)", file="GDAXBrokerageModelTests.cs", label="order.Object.Quantity = orderQuantity", span="82-82"];
m18_37 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenQuantityIsLargeEnough(decimal, bool)", file="GDAXBrokerageModelTests.cs", label="Assert.AreEqual(isValidOrderQuantity, _unit.CanSubmitOrder(GDAXTestsHelpers.GetSecurity(), order.Object, out message))", span="84-84"];
m18_38 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenQuantityIsLargeEnough(decimal, bool)", file="GDAXBrokerageModelTests.cs", label="Exit QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmitOrder_WhenQuantityIsLargeEnough(decimal, bool)", span="77-77"];
m18_45 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmit_CertainOrderTypes(QuantConnect.Orders.OrderType, bool)", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmit_CertainOrderTypes(QuantConnect.Orders.OrderType, bool)", span="108-108"];
m18_46 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmit_CertainOrderTypes(QuantConnect.Orders.OrderType, bool)", file="GDAXBrokerageModelTests.cs", label="BrokerageMessageEvent message", span="110-110"];
m18_48 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmit_CertainOrderTypes(QuantConnect.Orders.OrderType, bool)", file="GDAXBrokerageModelTests.cs", label="var order = Order.CreateOrder(new SubmitOrderRequest(orderType, SecurityType.Crypto, security.Symbol, 10.0m, 1.0m, 10.0m, DateTime.Now, ''Test Order''))", span="112-112"];
m18_49 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmit_CertainOrderTypes(QuantConnect.Orders.OrderType, bool)", file="GDAXBrokerageModelTests.cs", label="Assert.AreEqual(isValidOrderType, _unit.CanSubmitOrder(security, order, out message))", span="114-114"];
m18_47 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmit_CertainOrderTypes(QuantConnect.Orders.OrderType, bool)", file="GDAXBrokerageModelTests.cs", label="var security = GDAXTestsHelpers.GetSecurity()", span="111-111"];
m18_50 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmit_CertainOrderTypes(QuantConnect.Orders.OrderType, bool)", file="GDAXBrokerageModelTests.cs", label="Exit QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.CanSubmit_CertainOrderTypes(QuantConnect.Orders.OrderType, bool)", span="108-108"];
m18_62 [cluster="QuantConnect.Data.Market.TradeBar.TradeBar()", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Data.Market.TradeBar.TradeBar()", span="120-120"];
m18_0 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.GetLeverageTest()", file="GDAXBrokerageModelTests.cs", label="Entry QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.GetLeverageTest()", span="34-34"];
m18_2 [cluster="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.GetLeverageTest()", file="GDAXBrokerageModelTests.cs", label="Exit QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests.GetLeverageTest()", span="34-34"];
m18_81 [file="GDAXBrokerageModelTests.cs", label="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests", span=""];
m19_72 [cluster="Unk.Single", file="IBrokerageModel.cs", label="Entry Unk.Single", span=""];
m19_49 [cluster="QuantConnect.Securities.SymbolPropertiesDatabase.FromDataFolder()", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.SymbolPropertiesDatabase.FromDataFolder()", span="87-87"];
m19_44 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, object, string)", file="IBrokerageModel.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, object, string)", span="0-0"];
m19_9 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorThrowsOnSymbolTooShort()", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.ConstructorThrowsOnSymbolTooShort()", span="53-53"];
m19_10 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorThrowsOnSymbolTooShort()", file="IBrokerageModel.cs", label="var cash = new Cash(''s'', 0, 0)", span="55-55"];
m19_11 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorThrowsOnSymbolTooShort()", file="IBrokerageModel.cs", label="Exit QuantConnect.Tests.Common.Securities.CashTests.ConstructorThrowsOnSymbolTooShort()", span="53-53"];
m19_171 [cluster="QuantConnect.Securities.Cash.Update(QuantConnect.Data.BaseData)", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.Cash.Update(QuantConnect.Data.BaseData)", span="86-86"];
m19_200 [cluster="QuantConnect.Tests.Common.Securities.CashTests.AlwaysOpenMarketHoursDatabaseImpl.AlwaysOpenMarketHoursDatabaseImpl()", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.AlwaysOpenMarketHoursDatabaseImpl.AlwaysOpenMarketHoursDatabaseImpl()", span="280-280"];
m19_201 [cluster="QuantConnect.Tests.Common.Securities.CashTests.AlwaysOpenMarketHoursDatabaseImpl.AlwaysOpenMarketHoursDatabaseImpl()", file="IBrokerageModel.cs", label="Exit QuantConnect.Tests.Common.Securities.CashTests.AlwaysOpenMarketHoursDatabaseImpl.AlwaysOpenMarketHoursDatabaseImpl()", span="280-280"];
m19_45 [cluster="QuantConnect.Securities.SecurityManager.SecurityManager(QuantConnect.TimeKeeper)", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.SecurityManager.SecurityManager(QuantConnect.TimeKeeper)", span="55-55"];
m19_42 [cluster="QuantConnect.Brokerages.FxcmBrokerageModel.FxcmBrokerageModel(QuantConnect.AccountType)", file="IBrokerageModel.cs", label="Entry QuantConnect.Brokerages.FxcmBrokerageModel.FxcmBrokerageModel(QuantConnect.AccountType)", span="55-55"];
m19_153 [cluster="lambda expression", file="IBrokerageModel.cs", label="Entry lambda expression", span="197-197"];
m19_52 [cluster="lambda expression", file="IBrokerageModel.cs", label="Entry lambda expression", span="92-92"];
m19_55 [cluster="lambda expression", file="IBrokerageModel.cs", label="Entry lambda expression", span="93-93"];
m19_53 [cluster="lambda expression", file="IBrokerageModel.cs", label="x.Symbol == Symbols.USDJPY", span="92-92"];
m19_54 [cluster="lambda expression", file="IBrokerageModel.cs", label="Exit lambda expression", span="92-92"];
m19_56 [cluster="lambda expression", file="IBrokerageModel.cs", label="x.Symbol == Symbols.USDJPY", span="93-93"];
m19_57 [cluster="lambda expression", file="IBrokerageModel.cs", label="Exit lambda expression", span="93-93"];
m19_73 [cluster="lambda expression", file="IBrokerageModel.cs", label="Entry lambda expression", span="112-112"];
m19_74 [cluster="lambda expression", file="IBrokerageModel.cs", label="x.Symbol == Symbols.USDJPY", span="112-112"];
m19_75 [cluster="lambda expression", file="IBrokerageModel.cs", label="Exit lambda expression", span="112-112"];
m19_90 [cluster="lambda expression", file="IBrokerageModel.cs", label="Entry lambda expression", span="129-129"];
m19_92 [cluster="lambda expression", file="IBrokerageModel.cs", label="Exit lambda expression", span="129-129"];
m19_107 [cluster="lambda expression", file="IBrokerageModel.cs", label="Entry lambda expression", span="147-147"];
m19_108 [cluster="lambda expression", file="IBrokerageModel.cs", label="x.Symbol == Symbols.USDJPY", span="147-147"];
m19_109 [cluster="lambda expression", file="IBrokerageModel.cs", label="Exit lambda expression", span="147-147"];
m19_130 [cluster="lambda expression", file="IBrokerageModel.cs", label="Entry lambda expression", span="169-169"];
m19_133 [cluster="lambda expression", file="IBrokerageModel.cs", label="Entry lambda expression", span="173-173"];
m19_132 [cluster="lambda expression", file="IBrokerageModel.cs", label="Exit lambda expression", span="169-169"];
m19_134 [cluster="lambda expression", file="IBrokerageModel.cs", label="x.Symbol == Symbols.GBPUSD", span="173-173"];
m19_135 [cluster="lambda expression", file="IBrokerageModel.cs", label="Exit lambda expression", span="173-173"];
m19_154 [cluster="lambda expression", file="IBrokerageModel.cs", label="sdc.Symbol", span="197-197"];
m19_155 [cluster="lambda expression", file="IBrokerageModel.cs", label="Exit lambda expression", span="197-197"];
m19_0 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorCapitalizedSymbol()", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.ConstructorCapitalizedSymbol()", span="38-38"];
m19_1 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorCapitalizedSymbol()", file="IBrokerageModel.cs", label="var cash = new Cash(''low'', 0, 0)", span="40-40"];
m19_2 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorCapitalizedSymbol()", file="IBrokerageModel.cs", label="Assert.AreEqual(''LOW'', cash.Symbol)", span="41-41"];
m19_3 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorCapitalizedSymbol()", file="IBrokerageModel.cs", label="Exit QuantConnect.Tests.Common.Securities.CashTests.ConstructorCapitalizedSymbol()", span="38-38"];
m19_106 [cluster="Unk.IsFalse", file="IBrokerageModel.cs", label="Entry Unk.IsFalse", span=""];
m19_170 [cluster="QuantConnect.Data.Market.Tick.Tick(System.DateTime, QuantConnect.Symbol, decimal, decimal, decimal)", file="IBrokerageModel.cs", label="Entry QuantConnect.Data.Market.Tick.Tick(System.DateTime, QuantConnect.Symbol, decimal, decimal, decimal)", span="161-161"];
m19_21 [cluster="QuantConnect.Brokerages.BrokerageModel.Create(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", file="IBrokerageModel.cs", label=brokerage, span="145-145"];
m19_22 [cluster="QuantConnect.Brokerages.BrokerageModel.Create(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", file="IBrokerageModel.cs", label="BrokerageName.Default", span="147-147"];
m19_23 [cluster="QuantConnect.Brokerages.BrokerageModel.Create(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", color=green, community=0, file="IBrokerageModel.cs", label="return new DefaultBrokerageModel(accountType);", prediction=13, span="148-148"];
m19_24 [cluster="QuantConnect.Brokerages.BrokerageModel.Create(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", file="IBrokerageModel.cs", label="BrokerageName.InteractiveBrokersBrokerage", span="150-150"];
m19_25 [cluster="QuantConnect.Brokerages.BrokerageModel.Create(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", color=green, community=0, file="IBrokerageModel.cs", label="return new InteractiveBrokersBrokerageModel(accountType);", prediction=13, span="151-151"];
m19_26 [cluster="QuantConnect.Brokerages.BrokerageModel.Create(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", file="IBrokerageModel.cs", label="BrokerageName.TradierBrokerage", span="153-153"];
m19_197 [cluster="QuantConnect.Securities.MarketHoursDatabase.GetEntry(string, string, QuantConnect.SecurityType)", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.MarketHoursDatabase.GetEntry(string, string, QuantConnect.SecurityType)", span="170-170"];
m19_48 [cluster="QuantConnect.Securities.SecurityManager.Add(QuantConnect.Symbol, QuantConnect.Securities.Security)", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.SecurityManager.Add(QuantConnect.Symbol, QuantConnect.Securities.Security)", span="68-68"];
m19_41 [cluster="QuantConnect.Brokerages.OandaBrokerageModel.OandaBrokerageModel(QuantConnect.AccountType)", file="IBrokerageModel.cs", label="Entry QuantConnect.Brokerages.OandaBrokerageModel.OandaBrokerageModel(QuantConnect.AccountType)", span="56-56"];
m19_93 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", span="134-134"];
m19_94 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", file="IBrokerageModel.cs", label="int quantity = 100", span="136-136"];
m19_95 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", file="IBrokerageModel.cs", label="decimal conversionRate = 1 / 100m", span="137-137"];
m19_96 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", file="IBrokerageModel.cs", label="var cash = new Cash(''JPY'', quantity, conversionRate)", span="138-138"];
m19_97 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", file="IBrokerageModel.cs", label="var cashBook = new CashBook()", span="139-139"];
m19_98 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", file="IBrokerageModel.cs", label="cashBook.Add(''JPY'', cash)", span="140-140"];
m19_102 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", file="IBrokerageModel.cs", label="cash.EnsureCurrencyDataFeed(securities, subscriptions, AlwaysOpenMarketHoursDatabase, SymbolPropertiesDatabase.FromDataFolder(), MarketMap, cashBook)", span="146-146"];
m19_99 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", file="IBrokerageModel.cs", label="var subscriptions = new SubscriptionManager(AlgorithmSettings, TimeKeeper)", span="142-142"];
m19_100 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", file="IBrokerageModel.cs", label="var securities = new SecurityManager(TimeKeeper)", span="143-143"];
m19_101 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", file="IBrokerageModel.cs", label="securities.Add(Symbols.USDJPY, new Security(SecurityExchangeHours, subscriptions.Add(Symbols.USDJPY, Resolution.Minute, TimeZone, TimeZone), new Cash(CashBook.AccountCurrency, 0, 1m), SymbolProperties.GetDefault(CashBook.AccountCurrency)))", span="144-144"];
m19_103 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", file="IBrokerageModel.cs", label="var config = subscriptions.Subscriptions.Single(x => x.Symbol == Symbols.USDJPY)", span="147-147"];
m19_104 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", file="IBrokerageModel.cs", label="Assert.IsFalse(config.IsInternalFeed)", span="148-148"];
m19_105 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", file="IBrokerageModel.cs", label="Exit QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedDoesNotMarkIsCurrencyDataFeedForExistantSubscriptions()", span="134-134"];
m19_89 [cluster="Unk.IsTrue", file="IBrokerageModel.cs", label="Entry Unk.IsTrue", span=""];
m19_136 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", span="178-178"];
m19_137 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", file="IBrokerageModel.cs", label="var book = new CashBook\r\n            {\r\n                {''USD'', new Cash(''USD'', 100, 1) },\r\n                {''BTC'', new Cash(''BTC'', 100, 6000) },\r\n                {''LTC'', new Cash(''LTC'', 100, 55) },\r\n                {''ETH'', new Cash(''ETH'', 100, 290) },\r\n                {''EUR'', new Cash(''EUR'', 100, 1.2m) },\r\n                {''JPY'', new Cash(''JPY'', 100, 0.0088m) },\r\n                {''XAG'', new Cash(''XAG'', 100, 1275) },\r\n                {''XAU'', new Cash(''XAU'', 100, 17) }\r\n            }", span="180-190"];
m19_138 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", file="IBrokerageModel.cs", label="var subscriptions = new SubscriptionManager(AlgorithmSettings, TimeKeeper)", span="192-192"];
m19_140 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", file="IBrokerageModel.cs", label="book.EnsureCurrencyDataFeeds(securities, subscriptions, AlwaysOpenMarketHoursDatabase, SymbolPropertiesDatabase.FromDataFolder(), MarketMap)", span="195-195"];
m19_139 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", file="IBrokerageModel.cs", label="var securities = new SecurityManager(TimeKeeper)", span="193-193"];
m19_141 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", file="IBrokerageModel.cs", label="var symbols = subscriptions.Subscriptions.Select(sdc => sdc.Symbol).ToHashSet()", span="197-197"];
m19_142 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", file="IBrokerageModel.cs", label="Assert.IsTrue(symbols.Contains(Symbols.BTCUSD))", span="199-199"];
m19_143 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", file="IBrokerageModel.cs", label="Assert.IsTrue(symbols.Contains(Symbols.LTCUSD))", span="200-200"];
m19_144 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", file="IBrokerageModel.cs", label="Assert.IsTrue(symbols.Contains(Symbols.ETHUSD))", span="201-201"];
m19_145 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", file="IBrokerageModel.cs", label="Assert.IsTrue(symbols.Contains(Symbols.EURUSD))", span="202-202"];
m19_146 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", file="IBrokerageModel.cs", label="Assert.IsTrue(symbols.Contains(Symbols.XAGUSD))", span="203-203"];
m19_147 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", file="IBrokerageModel.cs", label="Assert.IsTrue(symbols.Contains(Symbols.XAUUSD))", span="204-204"];
m19_148 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", file="IBrokerageModel.cs", label="Exit QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedForCryptoCurrency()", span="178-178"];
m19_198 [cluster="QuantConnect.Securities.MarketHoursDatabase.Entry.Entry(DateTimeZone, QuantConnect.Securities.SecurityExchangeHours)", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.MarketHoursDatabase.Entry.Entry(DateTimeZone, QuantConnect.Securities.SecurityExchangeHours)", span="259-259"];
m19_12 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorSetsProperties()", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.ConstructorSetsProperties()", span="59-59"];
m19_13 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorSetsProperties()", file="IBrokerageModel.cs", label="string symbol = ''JPY''", span="61-61"];
m19_14 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorSetsProperties()", file="IBrokerageModel.cs", label="int quantity = 1", span="62-62"];
m19_16 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorSetsProperties()", file="IBrokerageModel.cs", label="var cash = new Cash(symbol, quantity, conversionRate)", span="64-64"];
m19_17 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorSetsProperties()", file="IBrokerageModel.cs", label="Assert.AreEqual(symbol, cash.Symbol)", span="65-65"];
m19_15 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorSetsProperties()", file="IBrokerageModel.cs", label="decimal conversionRate = 1.2m", span="63-63"];
m19_18 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorSetsProperties()", file="IBrokerageModel.cs", label="Assert.AreEqual(quantity, cash.Amount)", span="66-66"];
m19_19 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorSetsProperties()", file="IBrokerageModel.cs", label="Assert.AreEqual(conversionRate, cash.ConversionRate)", span="67-67"];
m19_20 [cluster="QuantConnect.Brokerages.BrokerageModel.Create(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", file="IBrokerageModel.cs", label="Entry QuantConnect.Brokerages.BrokerageModel.Create(QuantConnect.Brokerages.BrokerageName, QuantConnect.AccountType)", span="143-143"];
m19_32 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedAddsSubscription()", color=green, community=0, file="IBrokerageModel.cs", label="cashBook.Add(''JPY'', cash)", prediction=15, span="86-86"];
m19_33 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedAddsSubscription()", file="IBrokerageModel.cs", label="var subscriptions = new SubscriptionManager(AlgorithmSettings, TimeKeeper)", span="87-87"];
m19_27 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedAddsSubscription()", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedAddsSubscription()", span="80-80"];
m19_29 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedAddsSubscription()", file="IBrokerageModel.cs", label="decimal conversionRate = 1 / 100m", span="83-83"];
m19_31 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedAddsSubscription()", file="IBrokerageModel.cs", label="var cashBook = new CashBook()", span="85-85"];
m19_35 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedAddsSubscription()", file="IBrokerageModel.cs", label="var securities = new SecurityManager(TimeKeeper)", span="89-89"];
m19_36 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedAddsSubscription()", file="IBrokerageModel.cs", label="securities.Add(Symbols.SPY, new Security(SecurityExchangeHours, abcConfig, new Cash(CashBook.AccountCurrency, 0, 1m), SymbolProperties.GetDefault(CashBook.AccountCurrency)))", span="90-90"];
m19_28 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedAddsSubscription()", file="IBrokerageModel.cs", label="int quantity = 100", span="82-82"];
m19_30 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedAddsSubscription()", file="IBrokerageModel.cs", label="var cash = new Cash(''JPY'', quantity, conversionRate)", span="84-84"];
m19_34 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedAddsSubscription()", file="IBrokerageModel.cs", label="var abcConfig = subscriptions.Add(Symbols.SPY, Resolution.Minute, TimeZone, TimeZone)", span="88-88"];
m19_37 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedAddsSubscription()", file="IBrokerageModel.cs", label="cash.EnsureCurrencyDataFeed(securities, subscriptions, AlwaysOpenMarketHoursDatabase, SymbolPropertiesDatabase.FromDataFolder(), MarketMap, cashBook)", span="91-91"];
m19_129 [cluster="QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", file="IBrokerageModel.cs", label="Entry QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", span="45-45"];
m19_76 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedMarksIsCurrencyDataFeedForNewSubscriptions()", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedMarksIsCurrencyDataFeedForNewSubscriptions()", span="116-116"];
m19_77 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedMarksIsCurrencyDataFeedForNewSubscriptions()", file="IBrokerageModel.cs", label="int quantity = 100", span="118-118"];
m19_78 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedMarksIsCurrencyDataFeedForNewSubscriptions()", file="IBrokerageModel.cs", label="decimal conversionRate = 1 / 100m", span="119-119"];
m19_79 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedMarksIsCurrencyDataFeedForNewSubscriptions()", file="IBrokerageModel.cs", label="var cash = new Cash(''JPY'', quantity, conversionRate)", span="120-120"];
m19_80 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedMarksIsCurrencyDataFeedForNewSubscriptions()", file="IBrokerageModel.cs", label="var cashBook = new CashBook()", span="121-121"];
m19_81 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedMarksIsCurrencyDataFeedForNewSubscriptions()", file="IBrokerageModel.cs", label="cashBook.Add(''JPY'', cash)", span="122-122"];
m19_87 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedMarksIsCurrencyDataFeedForNewSubscriptions()", file="IBrokerageModel.cs", label="Assert.IsTrue(config.IsInternalFeed)", span="130-130"];
m19_88 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedMarksIsCurrencyDataFeedForNewSubscriptions()", file="IBrokerageModel.cs", label="Exit QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedMarksIsCurrencyDataFeedForNewSubscriptions()", span="116-116"];
m19_186 [cluster="QuantConnect.Tests.Common.Securities.CashTests.CashHasCorrectCurrencySymbol(string, string)", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.CashHasCorrectCurrencySymbol(string, string)", span="257-257"];
m19_187 [cluster="QuantConnect.Tests.Common.Securities.CashTests.CashHasCorrectCurrencySymbol(string, string)", file="IBrokerageModel.cs", label="var cash = new Cash(symbol, 1, 1)", span="259-259"];
m19_188 [cluster="QuantConnect.Tests.Common.Securities.CashTests.CashHasCorrectCurrencySymbol(string, string)", file="IBrokerageModel.cs", label="Assert.AreEqual(currencySymbol, cash.CurrencySymbol)", span="260-260"];
m19_189 [cluster="QuantConnect.Tests.Common.Securities.CashTests.CashHasCorrectCurrencySymbol(string, string)", file="IBrokerageModel.cs", label="Exit QuantConnect.Tests.Common.Securities.CashTests.CashHasCorrectCurrencySymbol(string, string)", span="257-257"];
m19_172 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", span="231-231"];
m19_173 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="int quantity = 100", span="233-233"];
m19_174 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="decimal conversionRate = 1 / 100m", span="234-234"];
m19_175 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="var cash = new Cash(''GBP'', quantity, conversionRate)", span="235-235"];
m19_176 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="var cashBook = new CashBook()", span="236-236"];
m19_177 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="cashBook.Add(''GBP'', cash)", span="237-237"];
m19_181 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="cash.EnsureCurrencyDataFeed(securities, subscriptions, AlwaysOpenMarketHoursDatabase, SymbolPropertiesDatabase.FromDataFolder(), MarketMap, cashBook)", span="244-244"];
m19_183 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="cash.Update(new Tick(DateTime.Now, Symbols.GBPUSD, last, last * 1.009m, last * 0.009m))", span="247-247"];
m19_184 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="Assert.AreEqual(last, cash.ConversionRate)", span="250-250"];
m19_178 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="var subscriptions = new SubscriptionManager(AlgorithmSettings, TimeKeeper)", span="239-239"];
m19_179 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="var securities = new SecurityManager(TimeKeeper)", span="240-240"];
m19_180 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="securities.Add(Symbols.GBPUSD, new Security(SecurityExchangeHours, subscriptions.Add(Symbols.GBPUSD, Resolution.Minute, TimeZone, TimeZone), new Cash(CashBook.AccountCurrency, 0, 1m), SymbolProperties.GetDefault(CashBook.AccountCurrency)))", span="241-241"];
m19_182 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="var last = 1.5m", span="246-246"];
m19_185 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", file="IBrokerageModel.cs", label="Exit QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRate()", span="231-231"];
m19_38 [cluster="QuantConnect.Brokerages.DefaultBrokerageModel.DefaultBrokerageModel(QuantConnect.AccountType)", file="IBrokerageModel.cs", label="Entry QuantConnect.Brokerages.DefaultBrokerageModel.DefaultBrokerageModel(QuantConnect.AccountType)", span="71-71"];
m19_39 [cluster="QuantConnect.Brokerages.InteractiveBrokersBrokerageModel.InteractiveBrokersBrokerageModel(QuantConnect.AccountType)", file="IBrokerageModel.cs", label="Entry QuantConnect.Brokerages.InteractiveBrokersBrokerageModel.InteractiveBrokersBrokerageModel(QuantConnect.AccountType)", span="34-34"];
m19_40 [cluster="QuantConnect.Brokerages.TradierBrokerageModel.TradierBrokerageModel(QuantConnect.AccountType)", file="IBrokerageModel.cs", label="Entry QuantConnect.Brokerages.TradierBrokerageModel.TradierBrokerageModel(QuantConnect.AccountType)", span="39-39"];
m19_195 [cluster="QuantConnect.Securities.SecurityDatabaseKey.SecurityDatabaseKey(string, string, QuantConnect.SecurityType)", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.SecurityDatabaseKey.SecurityDatabaseKey(string, string, QuantConnect.SecurityType)", span="50-50"];
m19_199 [cluster="QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.SecurityExchangeHours.AlwaysOpen(DateTimeZone)", span="82-82"];
m19_5 [cluster="Unk.AreEqual", file="IBrokerageModel.cs", label="Entry Unk.AreEqual", span=""];
m19_43 [cluster="QuantConnect.Brokerages.GDAXBrokerageModel.GDAXBrokerageModel(QuantConnect.AccountType)", file="IBrokerageModel.cs", label="Entry QuantConnect.Brokerages.GDAXBrokerageModel.GDAXBrokerageModel(QuantConnect.AccountType)", span="59-59"];
m19_6 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorThrowsOnSymbolTooLong()", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.ConstructorThrowsOnSymbolTooLong()", span="46-46"];
m19_7 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorThrowsOnSymbolTooLong()", file="IBrokerageModel.cs", label="var cash = new Cash(''too long'', 0, 0)", span="48-48"];
m19_8 [cluster="QuantConnect.Tests.Common.Securities.CashTests.ConstructorThrowsOnSymbolTooLong()", file="IBrokerageModel.cs", label="Exit QuantConnect.Tests.Common.Securities.CashTests.ConstructorThrowsOnSymbolTooLong()", span="46-46"];
m19_149 [cluster="QuantConnect.Securities.CashBook.EnsureCurrencyDataFeeds(QuantConnect.Securities.SecurityManager, QuantConnect.Data.SubscriptionManager, QuantConnect.Securities.MarketHoursDatabase, QuantConnect.Securities.SymbolPropertiesDatabase, System.Collections.Generic.IReadOnlyDictionary<QuantConnect.SecurityType, string>)", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.CashBook.EnsureCurrencyDataFeeds(QuantConnect.Securities.SecurityManager, QuantConnect.Data.SubscriptionManager, QuantConnect.Securities.MarketHoursDatabase, QuantConnect.Securities.SymbolPropertiesDatabase, System.Collections.Generic.IReadOnlyDictionary<QuantConnect.SecurityType, string>)", span="78-78"];
m19_46 [cluster="QuantConnect.Securities.Security.Security(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.Security.Security(QuantConnect.Securities.SecurityExchangeHours, QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Securities.Cash, QuantConnect.Securities.SymbolProperties)", span="286-286"];
m19_156 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", span="208-208"];
m19_157 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="int quantity = 100", span="210-210"];
m19_158 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="decimal conversionRate = 1 / 100m", span="211-211"];
m19_159 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="var cash = new Cash(''JPY'', quantity, conversionRate)", span="212-212"];
m19_160 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="var cashBook = new CashBook()", span="213-213"];
m19_161 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="cashBook.Add(''JPY'', cash)", span="214-214"];
m19_165 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="cash.EnsureCurrencyDataFeed(securities, subscriptions, AlwaysOpenMarketHoursDatabase, SymbolPropertiesDatabase.FromDataFolder(), MarketMap, cashBook)", span="221-221"];
m19_167 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="cash.Update(new Tick(DateTime.Now, Symbols.USDJPY, last, 119.95m, 120.05m))", span="224-224"];
m19_168 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="Assert.AreEqual(1 / last, cash.ConversionRate)", span="227-227"];
m19_162 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="var subscriptions = new SubscriptionManager(AlgorithmSettings, TimeKeeper)", span="216-216"];
m19_163 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="var securities = new SecurityManager(TimeKeeper)", span="217-217"];
m19_164 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="securities.Add(Symbols.USDJPY, new Security(SecurityExchangeHours, subscriptions.Add(Symbols.USDJPY, Resolution.Minute, TimeZone, TimeZone), new Cash(CashBook.AccountCurrency, 0, 1m), SymbolProperties.GetDefault(CashBook.AccountCurrency)))", span="218-218"];
m19_166 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="var last = 120m", span="223-223"];
m19_169 [cluster="QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", file="IBrokerageModel.cs", label="Exit QuantConnect.Tests.Common.Securities.CashTests.UpdateModifiesConversionRateAsInvertedValue()", span="208-208"];
m19_58 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", span="97-97"];
m19_59 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="int quantity = 100", span="99-99"];
m19_60 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="decimal conversionRate = 1 / 100m", span="100-100"];
m19_62 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="var cash = new Cash(''JPY'', quantity, conversionRate)", span="102-102"];
m19_61 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="Resolution minimumResolution = Resolution.Second", span="101-101"];
m19_68 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="securities.Add(Symbols.EURUSD, new Security(SecurityExchangeHours, subscriptions.Add(Symbols.EURUSD, minimumResolution, TimeZone, TimeZone), new Cash(CashBook.AccountCurrency, 0, 1m), SymbolProperties.GetDefault(CashBook.AccountCurrency)))", span="109-109"];
m19_70 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="Assert.AreEqual(minimumResolution, subscriptions.Subscriptions.Single(x => x.Symbol == Symbols.USDJPY).Resolution)", span="112-112"];
m19_63 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="var cashBook = new CashBook()", span="103-103"];
m19_64 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="cashBook.Add(''JPY'', cash)", span="104-104"];
m19_69 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="cash.EnsureCurrencyDataFeed(securities, subscriptions, AlwaysOpenMarketHoursDatabase, SymbolPropertiesDatabase.FromDataFolder(), MarketMap, cashBook)", span="111-111"];
m19_65 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="var subscriptions = new SubscriptionManager(AlgorithmSettings, TimeKeeper)", span="106-106"];
m19_66 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="var securities = new SecurityManager(TimeKeeper)", span="107-107"];
m19_67 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="securities.Add(Symbols.SPY, new Security(SecurityExchangeHours, subscriptions.Add(Symbols.SPY, Resolution.Minute, TimeZone, TimeZone), new Cash(CashBook.AccountCurrency, 0, 1m), SymbolProperties.GetDefault(CashBook.AccountCurrency)))", span="108-108"];
m19_71 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", file="IBrokerageModel.cs", label="Exit QuantConnect.Tests.Common.Securities.CashTests.EnsureCurrencyDataFeedsAddsSubscriptionAtMinimumResolution()", span="97-97"];
m19_110 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", span="152-152"];
m19_111 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="int quantity = 100", span="154-154"];
m19_113 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="var cashJPY = new Cash(''JPY'', quantity, conversionRate)", span="156-156"];
m19_114 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="var cashGBP = new Cash(''GBP'', quantity, conversionRate)", span="157-157"];
m19_116 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="cashBook.Add(''JPY'', cashJPY)", span="159-159"];
m19_122 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="cashJPY.EnsureCurrencyDataFeed(securities, subscriptions, AlwaysOpenMarketHoursDatabase, SymbolPropertiesDatabase.FromDataFolder(), MarketMap, cashBook)", span="168-168"];
m19_117 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="cashBook.Add(''GBP'', cashGBP)", span="160-160"];
m19_125 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="cashGBP.EnsureCurrencyDataFeed(securities, subscriptions, AlwaysOpenMarketHoursDatabase, SymbolPropertiesDatabase.FromDataFolder(), MarketMap, cashBook)", span="172-172"];
m19_118 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="var symbol = Symbol.Create(''GBPJPY'', SecurityType.Forex, Market.FXCM)", span="162-162"];
m19_119 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="var subscriptions = new SubscriptionManager(AlgorithmSettings, TimeKeeper)", span="164-164"];
m19_121 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="securities.Add(symbol, new Security(SecurityExchangeHours, subscriptions.Add(symbol, Resolution.Minute, TimeZone, TimeZone), new Cash(CashBook.AccountCurrency, 0, 1m), SymbolProperties.GetDefault(CashBook.AccountCurrency)))", span="166-166"];
m19_120 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="var securities = new SecurityManager(TimeKeeper)", span="165-165"];
m19_126 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="var config2 = subscriptions.Subscriptions.Single(x => x.Symbol == Symbols.GBPUSD)", span="173-173"];
m19_124 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="Assert.IsTrue(config1.IsInternalFeed)", span="170-170"];
m19_127 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="Assert.IsTrue(config2.IsInternalFeed)", span="174-174"];
m19_128 [cluster="QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", file="IBrokerageModel.cs", label="Exit QuantConnect.Tests.Common.Securities.CashTests.EnsureInternalCurrencyDataFeedsForNonUsdQuoteCurrencyGetAdded()", span="152-152"];
m19_47 [cluster="QuantConnect.Securities.SymbolProperties.GetDefault(string)", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.SymbolProperties.GetDefault(string)", span="84-84"];
m19_194 [cluster="QuantConnect.Tests.Common.Securities.CashTests.AlwaysOpenMarketHoursDatabaseImpl.GetEntry(string, string, QuantConnect.SecurityType)", file="IBrokerageModel.cs", label="Exit QuantConnect.Tests.Common.Securities.CashTests.AlwaysOpenMarketHoursDatabaseImpl.GetEntry(string, string, QuantConnect.SecurityType)", span="270-270"];
m19_190 [cluster="QuantConnect.Tests.Common.Securities.CashTests.AlwaysOpenMarketHoursDatabaseImpl.GetEntry(string, string, QuantConnect.SecurityType)", file="IBrokerageModel.cs", label="Entry QuantConnect.Tests.Common.Securities.CashTests.AlwaysOpenMarketHoursDatabaseImpl.GetEntry(string, string, QuantConnect.SecurityType)", span="270-270"];
m19_191 [cluster="QuantConnect.Tests.Common.Securities.CashTests.AlwaysOpenMarketHoursDatabaseImpl.GetEntry(string, string, QuantConnect.SecurityType)", file="IBrokerageModel.cs", label="var key = new SecurityDatabaseKey(market, symbol, securityType)", span="272-272"];
m19_192 [cluster="QuantConnect.Tests.Common.Securities.CashTests.AlwaysOpenMarketHoursDatabaseImpl.GetEntry(string, string, QuantConnect.SecurityType)", file="IBrokerageModel.cs", label="var tz = ContainsKey(key)\r\n                    ? base.GetEntry(market, symbol, securityType).ExchangeHours.TimeZone\r\n                    : DateTimeZone.Utc", span="273-275"];
m19_193 [cluster="QuantConnect.Tests.Common.Securities.CashTests.AlwaysOpenMarketHoursDatabaseImpl.GetEntry(string, string, QuantConnect.SecurityType)", file="IBrokerageModel.cs", label="return new Entry(tz, SecurityExchangeHours.AlwaysOpen(tz));", span="277-277"];
m19_4 [cluster="QuantConnect.Securities.Cash.Cash(string, decimal, decimal)", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.Cash.Cash(string, decimal, decimal)", span="70-70"];
m19_51 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", file="IBrokerageModel.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>(System.Func<TSource, bool>)", span="0-0"];
m19_152 [cluster="Unk.Contains", file="IBrokerageModel.cs", label="Entry Unk.Contains", span=""];
m19_151 [cluster="Unk.ToHashSet", file="IBrokerageModel.cs", label="Entry Unk.ToHashSet", span=""];
m19_50 [cluster="QuantConnect.Securities.Cash.EnsureCurrencyDataFeed(QuantConnect.Securities.SecurityManager, QuantConnect.Data.SubscriptionManager, QuantConnect.Securities.MarketHoursDatabase, QuantConnect.Securities.SymbolPropertiesDatabase, System.Collections.Generic.IReadOnlyDictionary<QuantConnect.SecurityType, string>, QuantConnect.Securities.CashBook)", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.Cash.EnsureCurrencyDataFeed(QuantConnect.Securities.SecurityManager, QuantConnect.Data.SubscriptionManager, QuantConnect.Securities.MarketHoursDatabase, QuantConnect.Securities.SymbolPropertiesDatabase, System.Collections.Generic.IReadOnlyDictionary<QuantConnect.SecurityType, string>, QuantConnect.Securities.CashBook)", span="136-136"];
m19_150 [cluster="Unk.Select", file="IBrokerageModel.cs", label="Entry Unk.Select", span=""];
m19_196 [cluster="QuantConnect.Securities.MarketHoursDatabase.ContainsKey(QuantConnect.Securities.SecurityDatabaseKey)", file="IBrokerageModel.cs", label="Entry QuantConnect.Securities.MarketHoursDatabase.ContainsKey(QuantConnect.Securities.SecurityDatabaseKey)", span="236-236"];
m19_202 [file="IBrokerageModel.cs", label="QuantConnect.Tests.Common.Securities.CashTests.AlwaysOpenMarketHoursDatabaseImpl", span=""];
m20_24 [cluster="Unk.ToLower", file="LeanDataPathComponentsTests.cs", label="Entry Unk.ToLower", span=""];
m20_43 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", file="LeanDataPathComponentsTests.cs", label="Entry QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", span="63-63"];
m20_44 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", file="LeanDataPathComponentsTests.cs", label="var sourceString = LeanData.GenerateRelativeZipFilePath(args.Symbol, args.Date, args.Resolution, args.TickType)", span="65-65"];
m20_46 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", file="LeanDataPathComponentsTests.cs", label="var expectedFileName = LeanData.GenerateZipFileName(args.Symbol, args.Date, args.Resolution, args.TickType)", span="68-68"];
m20_47 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", file="LeanDataPathComponentsTests.cs", label="Assert.AreEqual(args.Symbol, decomposed.Symbol)", span="70-70"];
m20_48 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", file="LeanDataPathComponentsTests.cs", label="Assert.AreEqual(args.Date, decomposed.Date)", span="71-71"];
m20_50 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", file="LeanDataPathComponentsTests.cs", label="Assert.AreEqual(args.Symbol.ID.SecurityType, decomposed.SecurityType)", span="73-73"];
m20_51 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", file="LeanDataPathComponentsTests.cs", label="Assert.AreEqual(args.Symbol.ID.Market, decomposed.Market)", span="74-74"];
m20_52 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", file="LeanDataPathComponentsTests.cs", label="Assert.AreEqual(args.TickType, decomposed.TickType)", span="75-75"];
m20_53 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", file="LeanDataPathComponentsTests.cs", label="Assert.AreEqual(args.Market, decomposed.Market)", span="76-76"];
m20_45 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", file="LeanDataPathComponentsTests.cs", label="var decomposed = LeanDataPathComponents.Parse(sourceString)", span="66-66"];
m20_49 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", file="LeanDataPathComponentsTests.cs", label="Assert.AreEqual(expectedFileName, decomposed.Filename)", span="72-72"];
m20_54 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", file="LeanDataPathComponentsTests.cs", label="Exit QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.DecomposesAccordingToLeanDataFileGeneration(QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments)", span="63-63"];
m20_22 [cluster="Unk.Where", file="LeanDataPathComponentsTests.cs", label="Entry Unk.Where", span=""];
m20_0 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments.Arguments(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, string, QuantConnect.TickType)", file="LeanDataPathComponentsTests.cs", label="Entry QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments.Arguments(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, string, QuantConnect.TickType)", span="18-18"];
m20_1 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments.Arguments(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, string, QuantConnect.TickType)", file="LeanDataPathComponentsTests.cs", label="Symbol = symbol", span="20-20"];
m20_2 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments.Arguments(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, string, QuantConnect.TickType)", file="LeanDataPathComponentsTests.cs", label="Date = date", span="21-21"];
m20_3 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments.Arguments(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, string, QuantConnect.TickType)", file="LeanDataPathComponentsTests.cs", label="Resolution = resolution", span="22-22"];
m20_4 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments.Arguments(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, string, QuantConnect.TickType)", file="LeanDataPathComponentsTests.cs", label="TickType = tickType", span="23-23"];
m20_5 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments.Arguments(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, string, QuantConnect.TickType)", file="LeanDataPathComponentsTests.cs", label="Market = market", span="24-24"];
m20_6 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments.Arguments(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, string, QuantConnect.TickType)", file="LeanDataPathComponentsTests.cs", label="symbol.ID.SecurityType != SecurityType.Option && (resolution == Resolution.Hour || resolution == Resolution.Daily)", span="25-25"];
m20_7 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments.Arguments(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, string, QuantConnect.TickType)", file="LeanDataPathComponentsTests.cs", label="TickType = TickType.Trade", span="28-28"];
m20_8 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments.Arguments(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, string, QuantConnect.TickType)", file="LeanDataPathComponentsTests.cs", label="Exit QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments.Arguments(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, string, QuantConnect.TickType)", span="18-18"];
m20_32 [cluster="Unk.ToArray", file="LeanDataPathComponentsTests.cs", label="Entry Unk.ToArray", span=""];
m20_57 [cluster="QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="LeanDataPathComponentsTests.cs", label="Entry QuantConnect.Util.LeanData.GenerateZipFileName(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", span="538-538"];
m20_40 [cluster="lambda expression", file="LeanDataPathComponentsTests.cs", label="Entry lambda expression", span="51-51"];
m20_33 [cluster="lambda expression", file="LeanDataPathComponentsTests.cs", label="Entry lambda expression", span="40-40"];
m20_36 [cluster="lambda expression", file="LeanDataPathComponentsTests.cs", label="Entry lambda expression", span="41-41"];
m20_41 [cluster="lambda expression", file="LeanDataPathComponentsTests.cs", label="Symbol.Create(name, securityType, market)", span="51-51"];
m20_34 [cluster="lambda expression", file="LeanDataPathComponentsTests.cs", label="f.IsLiteral && !f.IsInitOnly", span="40-40"];
m20_35 [cluster="lambda expression", file="LeanDataPathComponentsTests.cs", label="Exit lambda expression", span="40-40"];
m20_37 [cluster="lambda expression", file="LeanDataPathComponentsTests.cs", label="(string) f.GetValue(null)", span="41-41"];
m20_38 [cluster="lambda expression", file="LeanDataPathComponentsTests.cs", label="Exit lambda expression", span="41-41"];
m20_42 [cluster="lambda expression", file="LeanDataPathComponentsTests.cs", label="Exit lambda expression", span="51-51"];
m20_18 [cluster="System.DateTime.DateTime(int, int, int)", file="LeanDataPathComponentsTests.cs", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
m20_27 [cluster="Unk.Create", file="LeanDataPathComponentsTests.cs", label="Entry Unk.Create", span=""];
m20_39 [cluster="Unk.GetValue", file="LeanDataPathComponentsTests.cs", label="Entry Unk.GetValue", span=""];
m20_29 [cluster="TestCaseData.cstr", file="LeanDataPathComponentsTests.cs", label="Entry TestCaseData.cstr", span=""];
m20_64 [cluster="System.Action.Invoke()", file="LeanDataPathComponentsTests.cs", label="Entry System.Action.Invoke()", span="0-0"];
m20_30 [cluster="Arguments.cstr", file="LeanDataPathComponentsTests.cs", label="Entry Arguments.cstr", span=""];
m20_58 [cluster="Unk.AreEqual", file="LeanDataPathComponentsTests.cs", label="Entry Unk.AreEqual", span=""];
m20_9 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.GetTestCases()", file="LeanDataPathComponentsTests.cs", label="Entry QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.GetTestCases()", span="33-33"];
m20_10 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.GetTestCases()", file="LeanDataPathComponentsTests.cs", label="var referenceDate = new DateTime(2016, 11, 1)", span="35-35"];
m20_11 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.GetTestCases()", file="LeanDataPathComponentsTests.cs", label="var tickTypes = Enum.GetValues(typeof(TickType)).Cast<TickType>()", span="37-37"];
m20_12 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.GetTestCases()", file="LeanDataPathComponentsTests.cs", label="var resolutions = Enum.GetValues(typeof (Resolution)).Cast<Resolution>()", span="38-38"];
m20_13 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.GetTestCases()", file="LeanDataPathComponentsTests.cs", label="var securityTypes = Enum.GetValues(typeof (SecurityType)).Cast<SecurityType>()", span="39-39"];
m20_14 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.GetTestCases()", file="LeanDataPathComponentsTests.cs", label="var markets = typeof (Market).GetFields().Where(f => f.IsLiteral && !f.IsInitOnly)\r\n                .Select(f => (string) f.GetValue(null))", span="40-41"];
m20_16 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.GetTestCases()", file="LeanDataPathComponentsTests.cs", label="return results;", span="59-59"];
m20_17 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.GetTestCases()", file="LeanDataPathComponentsTests.cs", label="Exit QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.GetTestCases()", span="33-33"];
m20_25 [cluster="string.Format(string, params object[])", file="LeanDataPathComponentsTests.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m20_20 [cluster="System.Collections.IEnumerable.Cast<TResult>()", file="LeanDataPathComponentsTests.cs", label="Entry System.Collections.IEnumerable.Cast<TResult>()", span="0-0"];
m20_28 [cluster="Unk.CreateOption", file="LeanDataPathComponentsTests.cs", label="Entry Unk.CreateOption", span=""];
m20_19 [cluster="System.Enum.GetValues(System.Type)", file="LeanDataPathComponentsTests.cs", label="Entry System.Enum.GetValues(System.Type)", span="0-0"];
m20_56 [cluster="QuantConnect.Util.LeanDataPathComponents.Parse(string)", file="LeanDataPathComponentsTests.cs", label="Entry QuantConnect.Util.LeanDataPathComponents.Parse(string)", span="101-101"];
m20_21 [cluster="System.Type.GetFields()", file="LeanDataPathComponentsTests.cs", label="Entry System.Type.GetFields()", span="0-0"];
m20_55 [cluster="QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", file="LeanDataPathComponentsTests.cs", label="Entry QuantConnect.Util.LeanData.GenerateRelativeZipFilePath(QuantConnect.Symbol, System.DateTime, QuantConnect.Resolution, QuantConnect.TickType)", span="403-403"];
m20_31 [cluster="Unk.SetName", file="LeanDataPathComponentsTests.cs", label="Entry Unk.SetName", span=""];
m20_23 [cluster="Unk.Select", file="LeanDataPathComponentsTests.cs", label="Entry Unk.Select", span=""];
m20_26 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.TryInvoke(System.Action)", file="LeanDataPathComponentsTests.cs", label="Entry QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.TryInvoke(System.Action)", span="79-79"];
m20_59 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.TryInvoke(System.Action)", file="LeanDataPathComponentsTests.cs", label="action()", span="83-83"];
m20_60 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.TryInvoke(System.Action)", file="LeanDataPathComponentsTests.cs", label="return true;", span="84-84"];
m20_62 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.TryInvoke(System.Action)", file="LeanDataPathComponentsTests.cs", label="return false;", span="88-88"];
m20_63 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.TryInvoke(System.Action)", file="LeanDataPathComponentsTests.cs", label="throw;", span="89-89"];
m20_61 [cluster="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.TryInvoke(System.Action)", file="LeanDataPathComponentsTests.cs", label="Exit QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.TryInvoke(System.Action)", span="79-79"];
m20_65 [file="LeanDataPathComponentsTests.cs", label="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments", span=""];
m20_66 [file="LeanDataPathComponentsTests.cs", label=securityType, span=""];
m20_67 [file="LeanDataPathComponentsTests.cs", label=market, span=""];
m20_68 [file="LeanDataPathComponentsTests.cs", label=name, span=""];
m21_65 [cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)", file="Loader.cs", label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98"];
m21_120 [cluster="QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", file="Loader.cs", label="Entry QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", span="304-304"];
m21_127 [cluster="QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", file="Loader.cs", label="var types = new List<string>()", span="306-306"];
m21_129 [cluster="QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", file="Loader.cs", label="assemblyTypes = assembly.GetTypes()", span="312-312"];
m21_128 [cluster="QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", file="Loader.cs", label="Type[] assemblyTypes", span="309-309"];
m21_137 [cluster="QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", file="Loader.cs", label="return types;", span="339-339"];
m21_130 [cluster="QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", file="Loader.cs", label=ReflectionTypeLoadException, span="314-314"];
m21_132 [cluster="QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", file="Loader.cs", label="assemblyTypes != null && assemblyTypes.Length > 0", span="319-319"];
m21_131 [cluster="QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", file="Loader.cs", label="assemblyTypes = e.Types", span="316-316"];
m21_133 [cluster="QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", file="Loader.cs", label="types = (from t in assemblyTypes\r\n                             where t.IsClass                                    // require class\r\n                             where !t.IsAbstract                                // require concrete impl\r\n                             where AlgorithmInterfaceType.IsAssignableFrom(t)   // require derived from IAlgorithm\r\n                             where t.FullName != AlgorithmBaseTypeFullName      // require not equal to QuantConnect.QCAlgorithm\r\n                             where t.GetConstructor(Type.EmptyTypes) != null    // require default ctor\r\n                             select t.FullName).ToList()", span="321-327"];
m21_134 [cluster="QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", file="Loader.cs", label="Log.Error(''API.GetExtendedTypeNames(): No types found in assembly.'')", span="331-331"];
m21_135 [cluster="QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", file="Loader.cs", label=Exception, span="334-334"];
m21_136 [cluster="QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", file="Loader.cs", label="Log.Error(err)", span="336-336"];
m21_138 [cluster="QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", file="Loader.cs", label="Exit QuantConnect.AlgorithmFactory.Loader.GetExtendedTypeNames(System.Reflection.Assembly)", span="304-304"];
m21_141 [cluster="Unk.IsAssignableFrom", file="Loader.cs", label="Entry Unk.IsAssignableFrom", span=""];
m21_58 [cluster="Unk.Initialize", file="Loader.cs", label="Entry Unk.Initialize", span=""];
m21_139 [cluster="System.Collections.Generic.List<T>.List()", file="Loader.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m21_126 [cluster="object.GetType()", file="Loader.cs", label="Entry object.GetType()", span="0-0"];
m21_121 [cluster="string.Join(string, System.Collections.Generic.IEnumerable<string>)", file="Loader.cs", label="Entry string.Join(string, System.Collections.Generic.IEnumerable<string>)", span="0-0"];
m21_15 [cluster="System.Environment.SetEnvironmentVariable(string, string)", file="Loader.cs", label="Entry System.Environment.SetEnvironmentVariable(string, string)", span="0-0"];
m21_5 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="Loader.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m21_158 [cluster="lambda expression", file="Loader.cs", label="Entry lambda expression", span="357-360"];
m21_2 [cluster="lambda expression", file="Loader.cs", label="Entry lambda expression", span="64-64"];
m21_3 [cluster="lambda expression", file="Loader.cs", label="names.SingleOrDefault()", span="64-64"];
m21_4 [cluster="lambda expression", file="Loader.cs", label="Exit lambda expression", span="64-64"];
m21_159 [cluster="lambda expression", file="Loader.cs", label="success = TryCreateAlgorithmInstance(assemblyPath, out instance, out error)", span="359-359"];
m21_160 [cluster="lambda expression", file="Loader.cs", label="Exit lambda expression", span="357-360"];
m21_115 [cluster="string.Substring(int, int)", file="Loader.cs", label="Entry string.Substring(int, int)", span="0-0"];
m21_16 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Entry QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(string, out QuantConnect.Interfaces.IAlgorithm, out string)", span="106-106"];
m21_17 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="algorithmInstance = null", span="109-109"];
m21_19 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="!File.Exists(assemblyPath)", span="113-113"];
m21_23 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="TryCreatePythonAlgorithm(assemblyPath, out algorithmInstance, out errorMessage)", span="121-121"];
m21_24 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="TryCreateILAlgorithm(assemblyPath, out algorithmInstance, out errorMessage)", span="125-125"];
m21_18 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="errorMessage = ''''", span="110-110"];
m21_20 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="return false;", span="115-115"];
m21_21 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label=_language, span="118-118"];
m21_22 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Language.Python", span="120-120"];
m21_25 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="return algorithmInstance != null;", span="130-130"];
m21_26 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Exit QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstance(string, out QuantConnect.Interfaces.IAlgorithm, out string)", span="106-106"];
m21_119 [cluster="QuantConnect.Logging.Log.Error(string, bool)", file="Loader.cs", label="Entry QuantConnect.Logging.Log.Error(string, bool)", span="65-65"];
m21_144 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Entry QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", span="350-350"];
m21_145 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="IAlgorithm instance = null", span="352-352"];
m21_149 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="var complete = isolator.ExecuteWithTimeLimit(_loaderTimeLimit, () =>\r\n            {\r\n                success = TryCreateAlgorithmInstance(assemblyPath, out instance, out error);\r\n            }, ramLimit)", span="357-360"];
m21_146 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="var error = string.Empty", span="353-353"];
m21_147 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="var success = false", span="355-355"];
m21_148 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="var isolator = new Isolator()", span="356-356"];
m21_150 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="algorithmInstance = instance", span="362-362"];
m21_151 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="errorMessage = error", span="363-363"];
m21_152 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="!complete", span="366-366"];
m21_153 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="errorMessage = ''Failed to create algorithm instance within 10 seconds. Try re-building algorithm. '' + error", span="368-368"];
m21_154 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="return complete && success && algorithmInstance != null;", span="371-371"];
m21_155 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Exit QuantConnect.AlgorithmFactory.Loader.TryCreateAlgorithmInstanceWithIsolator(string, int, out QuantConnect.Interfaces.IAlgorithm, out string)", span="350-350"];
m21_142 [cluster="Unk.GetConstructor", file="Loader.cs", label="Entry Unk.GetConstructor", span=""];
m21_59 [cluster="Unk.BeginAllowThreads", file="Loader.cs", label="Entry Unk.BeginAllowThreads", span=""];
m21_29 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Entry QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", span="203-203"];
m21_66 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="errorMessage = ''''", span="205-205"];
m21_69 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="var directoryName = new FileInfo(assemblyPath).DirectoryName", span="214-214"];
m21_71 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="var mdbFilename = assemblyPath + ''.mdb''", span="218-218"];
m21_72 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="var pdbFilename = assemblyPath.Substring(0, assemblyPath.Length - 4) + ''.pdb''", span="219-219"];
m21_80 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="assembly = Assembly.LoadFrom(assemblyPath)", span="236-236"];
m21_82 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="var assemblyBytes = File.ReadAllBytes(assemblyPath)", span="241-241"];
m21_67 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="algorithmInstance = null", span="206-206"];
m21_68 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="byte[] debugInformationBytes = null", span="210-210"];
m21_78 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="debugInformationBytes == null", span="233-233"];
m21_83 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="assembly = Assembly.Load(assemblyBytes, debugInformationBytes)", span="242-242"];
m21_70 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="directoryName != null && directoryName.TrimEnd(Path.DirectorySeparatorChar) != AppDomain.CurrentDomain.BaseDirectory.TrimEnd(Path.DirectorySeparatorChar)", span="215-215"];
m21_77 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Assembly assembly", span="232-232"];
m21_75 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="File.Exists(mdbFilename)", span="225-225"];
m21_76 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="debugInformationBytes = File.ReadAllBytes(mdbFilename)", span="227-227"];
m21_73 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="File.Exists(pdbFilename)", span="220-220"];
m21_74 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="debugInformationBytes = File.ReadAllBytes(pdbFilename)", span="222-222"];
m21_79 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Log.Trace(''Loader.TryCreateILAlgorithm(): Loading only the algorithm assembly'')", span="235-235"];
m21_81 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Log.Trace(''Loader.TryCreateILAlgorithm(): Loading debug information with algorithm'')", span="240-240"];
m21_84 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="assembly == null", span="244-244"];
m21_88 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="var types = GetExtendedTypeNames(assembly)", span="252-252"];
m21_100 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="algorithmInstance = (IAlgorithm)assembly.CreateInstance(types[0], true)", span="276-276"];
m21_85 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="errorMessage = ''Assembly is null.''", span="246-246"];
m21_86 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Log.Error(''Loader.TryCreateILAlgorithm(): Assembly is null'')", span="247-247"];
m21_87 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="return false;", span="248-248"];
m21_89 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Log.Debug(''Loader.TryCreateILAlgorithm(): Assembly types: '' + string.Join('','', types))", span="253-253"];
m21_90 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="types.Count == 0", span="256-256"];
m21_94 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="types.Count > 1", span="263-263"];
m21_95 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="types[0] = _multipleTypeNameResolverFunction.Invoke(types)", span="266-266"];
m21_96 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="string.IsNullOrEmpty(types[0])", span="268-268"];
m21_91 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="errorMessage = ''Algorithm type was not found.''", span="258-258"];
m21_92 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Log.Error(''Loader.TryCreateILAlgorithm(): Types array empty, no algorithm type found.'')", span="259-259"];
m21_93 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="return false;", span="260-260"];
m21_97 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="errorMessage = ''Please verify algorithm type name matches the algorithm name in the configuration file. Unable to resolve multiple algorithm types to a single type.''", span="270-270"];
m21_98 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Log.Error(''Loader.TryCreateILAlgorithm(): Failed resolving multiple algorithm types to a single type.'')", span="271-271"];
m21_99 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="return false;", span="272-272"];
m21_101 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="algorithmInstance != null", span="278-278"];
m21_102 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Log.Trace(''Loader.TryCreateILAlgorithm(): Loaded '' + algorithmInstance.GetType().Name)", span="280-280"];
m21_103 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label=ReflectionTypeLoadException, span="284-284"];
m21_108 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label=Exception, span="290-290"];
m21_112 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="return true;", span="296-296"];
m21_104 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Log.Error(err)", span="286-286"];
m21_105 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Log.Error(''Loader.TryCreateILAlgorithm(1): '' + err.LoaderExceptions[0])", span="287-287"];
m21_106 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="err.InnerException != null", span="288-288"];
m21_107 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="errorMessage = err.InnerException.Message", span="288-288"];
m21_109 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Log.Error(err)", span="292-292"];
m21_110 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="err.InnerException != null", span="293-293"];
m21_111 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="errorMessage = err.InnerException.Message", span="293-293"];
m21_113 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Exit QuantConnect.AlgorithmFactory.Loader.TryCreateILAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", span="203-203"];
m21_156 [cluster="QuantConnect.Isolator.Isolator()", file="Loader.cs", label="Entry QuantConnect.Isolator.Isolator()", span="55-55"];
m21_14 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Loader.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m21_117 [cluster="System.Reflection.Assembly.LoadFrom(string)", file="Loader.cs", label="Entry System.Reflection.Assembly.LoadFrom(string)", span="0-0"];
m21_63 [cluster="AlgorithmPythonWrapper.cstr", file="Loader.cs", label="Entry AlgorithmPythonWrapper.cstr", span=""];
m21_143 [cluster="Unk.ToList", file="Loader.cs", label="Entry Unk.ToList", span=""];
m21_157 [cluster="QuantConnect.Isolator.ExecuteWithTimeLimit(System.TimeSpan, System.Action, long)", file="Loader.cs", label="Entry QuantConnect.Isolator.ExecuteWithTimeLimit(System.TimeSpan, System.Action, long)", span="145-145"];
m21_114 [cluster="string.TrimEnd(params char[])", file="Loader.cs", label="Entry string.TrimEnd(params char[])", span="0-0"];
m21_57 [cluster="string.Replace(string, string)", file="Loader.cs", label="Entry string.Replace(string, string)", span="0-0"];
m21_122 [cluster="QuantConnect.Logging.Log.Debug(string, int, int)", file="Loader.cs", label="Entry QuantConnect.Logging.Log.Debug(string, int, int)", span="142-142"];
m21_27 [cluster="System.IO.File.Exists(string)", file="Loader.cs", label="Entry System.IO.File.Exists(string)", span="0-0"];
m21_62 [cluster="Unk.Import", file="Loader.cs", label="Entry Unk.Import", span=""];
m21_60 [cluster="Unk.GIL", file="Loader.cs", label="Entry Unk.GIL", span=""];
m21_0 [cluster="QuantConnect.AlgorithmFactory.Loader.Loader()", file="Loader.cs", label="Entry QuantConnect.AlgorithmFactory.Loader.Loader()", span="63-63"];
m21_1 [cluster="QuantConnect.AlgorithmFactory.Loader.Loader()", file="Loader.cs", label="Exit QuantConnect.AlgorithmFactory.Loader.Loader()", span="63-63"];
m21_161 [cluster="QuantConnect.AlgorithmFactory.Loader.Unload()", file="Loader.cs", label="Entry QuantConnect.AlgorithmFactory.Loader.Unload()", span="380-380"];
m21_162 [cluster="QuantConnect.AlgorithmFactory.Loader.Unload()", file="Loader.cs", label="appDomain != null", span="381-381"];
m21_163 [cluster="QuantConnect.AlgorithmFactory.Loader.Unload()", file="Loader.cs", label="AppDomain.Unload(appDomain)", span="383-383"];
m21_164 [cluster="QuantConnect.AlgorithmFactory.Loader.Unload()", file="Loader.cs", label="appDomain = null", span="384-384"];
m21_165 [cluster="QuantConnect.AlgorithmFactory.Loader.Unload()", file="Loader.cs", label="Exit QuantConnect.AlgorithmFactory.Loader.Unload()", span="380-380"];
m21_140 [cluster="System.Reflection.Assembly.GetTypes()", file="Loader.cs", label="Entry System.Reflection.Assembly.GetTypes()", span="0-0"];
m21_118 [cluster="System.Reflection.Assembly.Load(byte[], byte[])", file="Loader.cs", label="Entry System.Reflection.Assembly.Load(byte[], byte[])", span="0-0"];
m21_123 [cluster="System.Func<T, TResult>.Invoke(T)", file="Loader.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m21_125 [cluster="System.Reflection.Assembly.CreateInstance(string, bool)", file="Loader.cs", label="Entry System.Reflection.Assembly.CreateInstance(string, bool)", span="0-0"];
m21_56 [cluster="System.IO.FileInfo.FileInfo(string)", file="Loader.cs", label="Entry System.IO.FileInfo.FileInfo(string)", span="0-0"];
m21_6 [cluster="QuantConnect.AlgorithmFactory.Loader.Loader(QuantConnect.Language, System.TimeSpan, System.Func<System.Collections.Generic.List<string>, string>)", file="Loader.cs", label="Entry QuantConnect.AlgorithmFactory.Loader.Loader(QuantConnect.Language, System.TimeSpan, System.Func<System.Collections.Generic.List<string>, string>)", span="82-82"];
m21_7 [cluster="QuantConnect.AlgorithmFactory.Loader.Loader(QuantConnect.Language, System.TimeSpan, System.Func<System.Collections.Generic.List<string>, string>)", file="Loader.cs", label="_language = language", span="84-84"];
m21_8 [cluster="QuantConnect.AlgorithmFactory.Loader.Loader(QuantConnect.Language, System.TimeSpan, System.Func<System.Collections.Generic.List<string>, string>)", file="Loader.cs", label="multipleTypeNameResolverFunction == null", span="86-86"];
m21_10 [cluster="QuantConnect.AlgorithmFactory.Loader.Loader(QuantConnect.Language, System.TimeSpan, System.Func<System.Collections.Generic.List<string>, string>)", file="Loader.cs", label="_loaderTimeLimit = loaderTimeLimit", span="91-91"];
m21_11 [cluster="QuantConnect.AlgorithmFactory.Loader.Loader(QuantConnect.Language, System.TimeSpan, System.Func<System.Collections.Generic.List<string>, string>)", file="Loader.cs", label="_multipleTypeNameResolverFunction = multipleTypeNameResolverFunction", span="92-92"];
m21_9 [cluster="QuantConnect.AlgorithmFactory.Loader.Loader(QuantConnect.Language, System.TimeSpan, System.Func<System.Collections.Generic.List<string>, string>)", file="Loader.cs", label="throw new ArgumentNullException(''multipleTypeNameResolverFunction'');", span="88-88"];
m21_12 [cluster="QuantConnect.AlgorithmFactory.Loader.Loader(QuantConnect.Language, System.TimeSpan, System.Func<System.Collections.Generic.List<string>, string>)", file="Loader.cs", label="Environment.SetEnvironmentVariable(''PYTHONPATH'', Environment.CurrentDirectory)", span="95-95"];
m21_13 [cluster="QuantConnect.AlgorithmFactory.Loader.Loader(QuantConnect.Language, System.TimeSpan, System.Func<System.Collections.Generic.List<string>, string>)", file="Loader.cs", label="Exit QuantConnect.AlgorithmFactory.Loader.Loader(QuantConnect.Language, System.TimeSpan, System.Func<System.Collections.Generic.List<string>, string>)", span="82-82"];
m21_166 [cluster="System.AppDomain.Unload(System.AppDomain)", file="Loader.cs", label="Entry System.AppDomain.Unload(System.AppDomain)", span="0-0"];
m21_28 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Entry QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", span="140-140"];
m21_30 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="algorithmInstance = null", span="142-142"];
m21_32 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="!File.Exists(assemblyPath)", span="146-146"];
m21_35 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="var pythonFile = new FileInfo(assemblyPath)", span="154-154"];
m21_31 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="errorMessage = string.Empty", span="143-143"];
m21_34 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="return false;", span="149-149"];
m21_36 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="var moduleName = pythonFile.Name.Replace(''.pyc'', '''').Replace(''.py'', '''')", span="155-155"];
m21_37 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Environment.SetEnvironmentVariable(''PYTHONPATH'', pythonFile.DirectoryName)", span="158-158"];
m21_44 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="var module = Py.Import(moduleName)", span="172-172"];
m21_38 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="!PythonEngine.IsInitialized", span="161-161"];
m21_39 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="PythonEngine.Initialize()", span="163-163"];
m21_41 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Py.GIL()", span="168-168"];
m21_40 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="PythonEngine.BeginAllowThreads()", span="164-164"];
m21_45 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="module == null", span="174-174"];
m21_49 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="algorithmInstance = new AlgorithmPythonWrapper(module)", span="182-182"];
m21_50 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="ObjectActivator.SetPythonModule(module)", span="183-183"];
m21_48 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Log.Trace(''Loader.TryCreatePythonAlgorithm(): Creating IAlgorithm instance.'')", span="180-180"];
m21_47 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="return false;", span="177-177"];
m21_54 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="return algorithmInstance != null;", span="193-193"];
m21_51 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label=Exception, span="186-186"];
m21_52 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Log.Error(e)", span="188-188"];
m21_55 [cluster="QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", file="Loader.cs", label="Exit QuantConnect.AlgorithmFactory.Loader.TryCreatePythonAlgorithm(string, out QuantConnect.Interfaces.IAlgorithm, out string)", span="140-140"];
m21_64 [cluster="Unk.SetPythonModule", file="Loader.cs", label="Entry Unk.SetPythonModule", span=""];
m21_116 [cluster="System.IO.File.ReadAllBytes(string)", file="Loader.cs", label="Entry System.IO.File.ReadAllBytes(string)", span="0-0"];
m21_124 [cluster="string.IsNullOrEmpty(string)", file="Loader.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m21_61 [cluster="QuantConnect.Logging.Log.Trace(string, bool)", file="Loader.cs", label="Entry QuantConnect.Logging.Log.Trace(string, bool)", span="106-106"];
m21_167 [file="Loader.cs", label="QuantConnect.AlgorithmFactory.Loader", span=""];
m21_168 [file="Loader.cs", label=string, span=""];
m22_54 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.DateTime)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.DateTime)", span="1258-1258"];
m22_14 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.Parameters.Parameters(int, QuantConnect.Resolution, System.DateTime, System.DateTime)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.Parameters.Parameters(int, QuantConnect.Resolution, System.DateTime, System.DateTime)", span="103-103"];
m22_62 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.Parameters.Parameters(int, QuantConnect.Resolution, System.DateTime, System.DateTime)", file="PerformanceBenchmarkAlgorithms.cs", label="Exit QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.Parameters.Parameters(int, QuantConnect.Resolution, System.DateTime, System.DateTime)", span="103-103"];
m22_46 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.EquityBenchmarkAlgorithm.Initialize()", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.EquityBenchmarkAlgorithm.Initialize()", span="83-83"];
m22_52 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.EquityBenchmarkAlgorithm.Initialize()", file="PerformanceBenchmarkAlgorithms.cs", label="Exit QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.EquityBenchmarkAlgorithm.Initialize()", span="83-83"];
m22_26 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetCash(int)", span="1103-1103"];
m22_40 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
m22_13 [cluster="System.Exception.Exception(string)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m22_11 [cluster="System.DateTime.DateTime(int, int, int)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
m22_28 [cluster="QuantConnect.Algorithm.QCAlgorithm.AddEquity(string, QuantConnect.Resolution, string, bool, decimal, bool)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.AddEquity(string, QuantConnect.Resolution, string, bool, decimal, bool)", span="1428-1428"];
m22_17 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.SingleSecurity_Second_BenchmarkTest.Initialize()", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.SingleSecurity_Second_BenchmarkTest.Initialize()", span="49-49"];
m22_18 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.SingleSecurity_Second_BenchmarkTest.Initialize()", file="PerformanceBenchmarkAlgorithms.cs", label="SetStartDate(2008, 01, 01)", span="51-51"];
m22_19 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.SingleSecurity_Second_BenchmarkTest.Initialize()", file="PerformanceBenchmarkAlgorithms.cs", label="SetEndDate(2009, 01, 01)", span="52-52"];
m22_20 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.SingleSecurity_Second_BenchmarkTest.Initialize()", file="PerformanceBenchmarkAlgorithms.cs", label="SetCash(100000)", span="53-53"];
m22_21 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.SingleSecurity_Second_BenchmarkTest.Initialize()", file="PerformanceBenchmarkAlgorithms.cs", label="SetBenchmark(time => 0m)", span="54-54"];
m22_23 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.SingleSecurity_Second_BenchmarkTest.Initialize()", file="PerformanceBenchmarkAlgorithms.cs", label="Exit QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.SingleSecurity_Second_BenchmarkTest.Initialize()", span="49-49"];
m22_24 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetStartDate(int, int, int)", span="1154-1154"];
m22_25 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetEndDate(int, int, int)", span="1179-1179"];
m22_27 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(System.Func<System.DateTime, decimal>)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(System.Func<System.DateTime, decimal>)", span="1070-1070"];
m22_0 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.CreateBenchmarkAlgorithm(int, QuantConnect.Resolution)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.CreateBenchmarkAlgorithm(int, QuantConnect.Resolution)", span="27-27"];
m22_10 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.CreateBenchmarkAlgorithm(int, QuantConnect.Resolution)", file="PerformanceBenchmarkAlgorithms.cs", label="Exit QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.CreateBenchmarkAlgorithm(int, QuantConnect.Resolution)", span="27-27"];
m22_12 [cluster="QuantConnect.Resolution.ToTimeSpan()", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Resolution.ToTimeSpan()", span="723-723"];
m22_32 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.FiveHundredSecurity_Second_BenchmarkTest.Initialize()", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.FiveHundredSecurity_Second_BenchmarkTest.Initialize()", span="61-61"];
m22_39 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.FiveHundredSecurity_Second_BenchmarkTest.Initialize()", file="PerformanceBenchmarkAlgorithms.cs", label="Exit QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.FiveHundredSecurity_Second_BenchmarkTest.Initialize()", span="61-61"];
m22_15 [cluster="System.DateTime.AddDays(double)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m22_53 [cluster="QuantConnect.Algorithm.QCAlgorithm.SetStartDate(System.DateTime)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Algorithm.QCAlgorithm.SetStartDate(System.DateTime)", span="1212-1212"];
m22_16 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.EquityBenchmarkAlgorithm.EquityBenchmarkAlgorithm(QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.Parameters)", file="PerformanceBenchmarkAlgorithms.cs", label="Entry QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.EquityBenchmarkAlgorithm.EquityBenchmarkAlgorithm(QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.Parameters)", span="78-78"];
m22_45 [cluster="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.EquityBenchmarkAlgorithm.EquityBenchmarkAlgorithm(QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.Parameters)", file="PerformanceBenchmarkAlgorithms.cs", label="Exit QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.EquityBenchmarkAlgorithm.EquityBenchmarkAlgorithm(QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.Parameters)", span="78-78"];
m22_55 [cluster="lambda expression", file="PerformanceBenchmarkAlgorithms.cs", label="Entry lambda expression", span="87-87"];
m22_29 [cluster="lambda expression", file="PerformanceBenchmarkAlgorithms.cs", label="Entry lambda expression", span="54-54"];
m22_30 [cluster="lambda expression", file="PerformanceBenchmarkAlgorithms.cs", label="0m", span="54-54"];
m22_31 [cluster="lambda expression", file="PerformanceBenchmarkAlgorithms.cs", label="Exit lambda expression", span="54-54"];
m22_41 [cluster="lambda expression", file="PerformanceBenchmarkAlgorithms.cs", label="Entry lambda expression", span="66-66"];
m22_43 [cluster="lambda expression", file="PerformanceBenchmarkAlgorithms.cs", label="Exit lambda expression", span="66-66"];
m22_57 [cluster="lambda expression", file="PerformanceBenchmarkAlgorithms.cs", label="Exit lambda expression", span="87-87"];
m22_63 [file="PerformanceBenchmarkAlgorithms.cs", label="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.SingleSecurity_Second_BenchmarkTest", span=""];
m22_64 [file="PerformanceBenchmarkAlgorithms.cs", label="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.FiveHundredSecurity_Second_BenchmarkTest", span=""];
m22_65 [file="PerformanceBenchmarkAlgorithms.cs", label="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.EquityBenchmarkAlgorithm", span=""];
m22_66 [file="PerformanceBenchmarkAlgorithms.cs", label="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.Parameters", span=""];
m23_10 [cluster="QuantConnect.Data.Slice.ContainsKey(QuantConnect.Symbol)", file="PythonSlice.cs", label="Entry QuantConnect.Data.Slice.ContainsKey(QuantConnect.Symbol)", span="281-281"];
m23_4 [cluster="QuantConnect.Python.PythonSlice.PythonSlice(QuantConnect.Data.Slice)", file="PythonSlice.cs", label="Entry QuantConnect.Python.PythonSlice.PythonSlice(QuantConnect.Data.Slice)", span="57-57"];
m23_6 [cluster="QuantConnect.Python.PythonSlice.PythonSlice(QuantConnect.Data.Slice)", file="PythonSlice.cs", label="Exit QuantConnect.Python.PythonSlice.PythonSlice(QuantConnect.Data.Slice)", span="57-57"];
m23_0 [cluster="QuantConnect.Python.PythonSlice.PythonSlice()", file="PythonSlice.cs", label="Entry QuantConnect.Python.PythonSlice.PythonSlice()", span="32-32"];
m23_2 [cluster="QuantConnect.Python.PythonSlice.PythonSlice()", file="PythonSlice.cs", label="Exit QuantConnect.Python.PythonSlice.PythonSlice()", span="32-32"];
m23_3 [cluster="Unk.ModuleFromString", file="PythonSlice.cs", label="Entry Unk.ModuleFromString", span=""];
m23_14 [cluster="QuantConnect.Data.Slice.TryGetValue(QuantConnect.Symbol, out dynamic)", file="PythonSlice.cs", label="Entry QuantConnect.Data.Slice.TryGetValue(QuantConnect.Symbol, out dynamic)", span="292-292"];
m23_7 [cluster="QuantConnect.Python.PythonSlice.ContainsKey(QuantConnect.Symbol)", file="PythonSlice.cs", label="Entry QuantConnect.Python.PythonSlice.ContainsKey(QuantConnect.Symbol)", span="137-137"];
m23_9 [cluster="QuantConnect.Python.PythonSlice.ContainsKey(QuantConnect.Symbol)", file="PythonSlice.cs", label="Exit QuantConnect.Python.PythonSlice.ContainsKey(QuantConnect.Symbol)", span="137-137"];
m23_11 [cluster="QuantConnect.Python.PythonSlice.TryGetValue(QuantConnect.Symbol, out dynamic)", file="PythonSlice.cs", label="Entry QuantConnect.Python.PythonSlice.TryGetValue(QuantConnect.Symbol, out dynamic)", span="148-148"];
m23_13 [cluster="QuantConnect.Python.PythonSlice.TryGetValue(QuantConnect.Symbol, out dynamic)", file="PythonSlice.cs", label="Exit QuantConnect.Python.PythonSlice.TryGetValue(QuantConnect.Symbol, out dynamic)", span="148-148"];
m23_15 [file="PythonSlice.cs", label="QuantConnect.Python.PythonSlice", span=""];
m24_47 [cluster="lambda expression", file="RegressionTests.cs", label="Entry lambda expression", span="766-766"];
m24_48 [cluster="lambda expression", file="RegressionTests.cs", label="new TestCaseData(x).SetName(x.Language + ''/'' + x.Algorithm)", span="766-766"];
m24_49 [cluster="lambda expression", file="RegressionTests.cs", label="Exit lambda expression", span="766-766"];
m24_0 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="RegressionTests.cs", label="Entry QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", span="25-25"];
m24_1 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="RegressionTests.cs", label="QuantConnect.Configuration.Config.Set(''quandl-auth-token'', ''WyAazVXnq7ATy_fefTqm'')", span="27-27"];
m24_3 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="RegressionTests.cs", label="parameters.Algorithm == ''OptionChainConsistencyRegressionAlgorithm''", span="30-30"];
m24_7 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="RegressionTests.cs", label="AlgorithmRunner.RunLocalBacktest(parameters.Algorithm, parameters.Statistics, parameters.AlphaStatistics, parameters.Language)", span="38-38"];
m24_2 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="RegressionTests.cs", label="QuantConnect.Configuration.Config.Set(''forward-console-messages'', ''false'')", span="28-28"];
m24_4 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="RegressionTests.cs", label="QuantConnect.Configuration.Config.Set(''symbol-minute-limit'', ''100'')", span="33-33"];
m24_5 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="RegressionTests.cs", label="QuantConnect.Configuration.Config.Set(''symbol-second-limit'', ''100'')", span="34-34"];
m24_6 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="RegressionTests.cs", label="QuantConnect.Configuration.Config.Set(''symbol-tick-limit'', ''100'')", span="35-35"];
m24_8 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", file="RegressionTests.cs", label="Exit QuantConnect.Tests.RegressionTests.AlgorithmStatisticsRegression(QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters)", span="25-25"];
m24_44 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="RegressionTests.cs", label="Entry QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", span="776-776"];
m24_52 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="RegressionTests.cs", label="Algorithm = algorithm", span="778-778"];
m24_53 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="RegressionTests.cs", label="Statistics = statistics", span="779-779"];
m24_54 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="RegressionTests.cs", label="Language = language", span="780-780"];
m24_55 [cluster="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", file="RegressionTests.cs", label="Exit QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters.AlgorithmStatisticsTestParameters(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.Language)", span="776-776"];
m24_51 [cluster="Unk.SetName", file="RegressionTests.cs", label="Entry Unk.SetName", span=""];
m24_11 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="Entry QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", span="41-41"];
m24_12 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var basicTemplateStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''264.956%''},\r\n                {''Drawdown'', ''2.200%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.669%''},\r\n                {''Sharpe Ratio'', ''4.411''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.007''},\r\n                {''Beta'', ''76.375''},\r\n                {''Annual Standard Deviation'', ''0.193''},\r\n                {''Annual Variance'', ''0.037''},\r\n                {''Information Ratio'', ''4.355''},\r\n                {''Tracking Error'', ''0.193''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$3.09''}\r\n            }", span="43-64"];
m24_13 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var basicTemplateFrameworkStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''264.956%''},\r\n                {''Drawdown'', ''2.200%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.669%''},\r\n                {''Sharpe Ratio'', ''4.411''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.007''},\r\n                {''Beta'', ''76.375''},\r\n                {''Annual Standard Deviation'', ''0.193''},\r\n                {''Annual Variance'', ''0.037''},\r\n                {''Information Ratio'', ''4.355''},\r\n                {''Tracking Error'', ''0.193''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$3.09''},\r\n                {''Total Alphas Generated'', ''100''},\r\n                {''Total Alphas Closed'', ''99''},\r\n                {''Total Alphas Analysis Completed'', ''86''},\r\n                {''Long Alpha Count'', ''100''},\r\n                {''Short Alpha Count'', ''0''},\r\n                {''Long/Short Ratio'', ''100%''},\r\n                {''Total Estimated Alpha Value'', ''$24404.2897''},\r\n                {''Mean Population Estimated Alpha Value'', ''$246.508''},\r\n                {''Mean Population Direction'', ''48.8372%''},\r\n                {''Mean Population Magnitude'', ''48.8372%''},\r\n                {''Rolling Averaged Population Direction'', ''68.2411%''},\r\n                {''Rolling Averaged Population Magnitude'', ''68.2411%''}\r\n            }", span="66-99"];
m24_14 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var basicTemplateOptionsStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.28%''},\r\n                {''Compounding Annual Return'', ''-78.105%''},\r\n                {''Drawdown'', ''0.300%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.280%''},\r\n                {''Sharpe Ratio'', ''0''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="101-122"];
m24_15 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var limitFillRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''34''},\r\n                {''Average Win'', ''0.02%''},\r\n                {''Average Loss'', ''-0.02%''},\r\n                {''Compounding Annual Return'', ''8.350%''},\r\n                {''Drawdown'', ''0.400%''},\r\n                {''Expectancy'', ''0.447''},\r\n                {''Net Profit'', ''0.103%''},\r\n                {''Sharpe Ratio'', ''1.747''},\r\n                {''Loss Rate'', ''31%''},\r\n                {''Win Rate'', ''69%''},\r\n                {''Profit-Loss Ratio'', ''1.10''},\r\n                {''Alpha'', ''-0.107''},\r\n                {''Beta'', ''14.444''},\r\n                {''Annual Standard Deviation'', ''0.03''},\r\n                {''Annual Variance'', ''0.001''},\r\n                {''Information Ratio'', ''1.379''},\r\n                {''Tracking Error'', ''0.03''},\r\n                {''Treynor Ratio'', ''0.004''},\r\n                {''Total Fees'', ''$34.00''}\r\n            }", span="124-145"];
m24_16 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var updateOrderRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''21''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-1.71%''},\r\n                {''Compounding Annual Return'', ''-8.289%''},\r\n                {''Drawdown'', ''16.700%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-15.892%''},\r\n                {''Sharpe Ratio'', ''-1.225''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.147''},\r\n                {''Beta'', ''4.789''},\r\n                {''Annual Standard Deviation'', ''0.056''},\r\n                {''Annual Variance'', ''0.003''},\r\n                {''Information Ratio'', ''-1.515''},\r\n                {''Tracking Error'', ''0.056''},\r\n                {''Treynor Ratio'', ''-0.014''},\r\n                {''Total Fees'', ''$21.00''}\r\n            }", span="147-168"];
m24_17 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var regressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''5433''},\r\n                {''Average Win'', ''0.00%''},\r\n                {''Average Loss'', ''0.00%''},\r\n                {''Compounding Annual Return'', ''-3.886%''},\r\n                {''Drawdown'', ''0.100%''},\r\n                {''Expectancy'', ''-0.991''},\r\n                {''Net Profit'', ''-0.054%''},\r\n                {''Sharpe Ratio'', ''-30.336''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''2.40''},\r\n                {''Alpha'', ''-0.019''},\r\n                {''Beta'', ''-0.339''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''-38.93''},\r\n                {''Tracking Error'', ''0.001''},\r\n                {''Treynor Ratio'', ''0.067''},\r\n                {''Total Fees'', ''$5433.00''}\r\n            }", span="170-191"];
m24_18 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var universeSelectionRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''5''},\r\n                {''Average Win'', ''0.70%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''-73.872%''},\r\n                {''Drawdown'', ''6.600%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''-6.060%''},\r\n                {''Sharpe Ratio'', ''-3.562''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''100%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-1.623''},\r\n                {''Beta'', ''39.211''},\r\n                {''Annual Standard Deviation'', ''0.284''},\r\n                {''Annual Variance'', ''0.08''},\r\n                {''Information Ratio'', ''-3.617''},\r\n                {''Tracking Error'', ''0.283''},\r\n                {''Treynor Ratio'', ''-0.026''},\r\n                {''Total Fees'', ''$5.00''}\r\n            }", span="193-214"];
m24_19 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var customDataRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''155.365%''},\r\n                {''Drawdown'', ''84.800%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''5123.170%''},\r\n                {''Sharpe Ratio'', ''1.2''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.008''},\r\n                {''Beta'', ''73.725''},\r\n                {''Annual Standard Deviation'', ''0.84''},\r\n                {''Annual Variance'', ''0.706''},\r\n                {''Information Ratio'', ''1.183''},\r\n                {''Tracking Error'', ''0.84''},\r\n                {''Treynor Ratio'', ''0.014''},\r\n                {''Total Fees'', ''$0.00''}\r\n            }", span="216-237"];
m24_20 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var addRemoveSecurityRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''5''},\r\n                {''Average Win'', ''0.49%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''307.853%''},\r\n                {''Drawdown'', ''1.400%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.814%''},\r\n                {''Sharpe Ratio'', ''6.474''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''100%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.004''},\r\n                {''Beta'', ''82.594''},\r\n                {''Annual Standard Deviation'', ''0.141''},\r\n                {''Annual Variance'', ''0.02''},\r\n                {''Information Ratio'', ''6.4''},\r\n                {''Tracking Error'', ''0.141''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$25.20''}\r\n            }", span="239-260"];
m24_21 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var dropboxBaseDataUniverseSelectionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''90''},\r\n                {''Average Win'', ''0.78%''},\r\n                {''Average Loss'', ''-0.40%''},\r\n                {''Compounding Annual Return'', ''18.626%''},\r\n                {''Drawdown'', ''4.700%''},\r\n                {''Expectancy'', ''1.071''},\r\n                {''Net Profit'', ''18.626%''},\r\n                {''Sharpe Ratio'', ''1.989''},\r\n                {''Loss Rate'', ''30%''},\r\n                {''Win Rate'', ''70%''},\r\n                {''Profit-Loss Ratio'', ''1.97''},\r\n                {''Alpha'', ''0.124''},\r\n                {''Beta'', ''2.375''},\r\n                {''Annual Standard Deviation'', ''0.085''},\r\n                {''Annual Variance'', ''0.007''},\r\n                {''Information Ratio'', ''1.761''},\r\n                {''Tracking Error'', ''0.085''},\r\n                {''Treynor Ratio'', ''0.072''},\r\n                {''Total Fees'', ''$240.17''}\r\n            }", span="262-283"];
m24_22 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var dropboxUniverseSelectionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''66''},\r\n                {''Average Win'', ''1.06%''},\r\n                {''Average Loss'', ''-0.50%''},\r\n                {''Compounding Annual Return'', ''18.581%''},\r\n                {''Drawdown'', ''7.100%''},\r\n                {''Expectancy'', ''0.815''},\r\n                {''Net Profit'', ''18.581%''},\r\n                {''Sharpe Ratio'', ''1.435''},\r\n                {''Loss Rate'', ''42%''},\r\n                {''Win Rate'', ''58%''},\r\n                {''Profit-Loss Ratio'', ''2.13''},\r\n                {''Alpha'', ''0.303''},\r\n                {''Beta'', ''-9.888''},\r\n                {''Annual Standard Deviation'', ''0.1''},\r\n                {''Annual Variance'', ''0.01''},\r\n                {''Information Ratio'', ''1.273''},\r\n                {''Tracking Error'', ''0.1''},\r\n                {''Treynor Ratio'', ''-0.014''},\r\n                {''Total Fees'', ''$185.37''}\r\n            }", span="285-306"];
m24_23 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var parameterizedStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''278.616%''},\r\n                {''Drawdown'', ''0.300%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.717%''},\r\n                {''Sharpe Ratio'', ''11.017''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''78.067''},\r\n                {''Annual Standard Deviation'', ''0.078''},\r\n                {''Annual Variance'', ''0.006''},\r\n                {''Information Ratio'', ''10.897''},\r\n                {''Tracking Error'', ''0.078''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$3.09''},\r\n            }", span="308-329"];
m24_24 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var historyAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''372.677%''},\r\n                {''Drawdown'', ''1.100%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''1.717%''},\r\n                {''Sharpe Ratio'', ''4.521''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''79.192''},\r\n                {''Annual Standard Deviation'', ''0.193''},\r\n                {''Annual Variance'', ''0.037''},\r\n                {''Information Ratio'', ''4.466''},\r\n                {''Tracking Error'', ''0.193''},\r\n                {''Treynor Ratio'', ''0.011''},\r\n                {''Total Fees'', ''$3.09''},\r\n            }", span="331-352"];
m24_25 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var coarseFundamentalTop5AlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''10''},\r\n                {''Average Win'', ''1.15%''},\r\n                {''Average Loss'', ''-0.47%''},\r\n                {''Compounding Annual Return'', ''-0.746%''},\r\n                {''Drawdown'', ''3.000%''},\r\n                {''Expectancy'', ''-0.313''},\r\n                {''Net Profit'', ''-0.746%''},\r\n                {''Sharpe Ratio'', ''-0.266''},\r\n                {''Loss Rate'', ''80%''},\r\n                {''Win Rate'', ''20%''},\r\n                {''Profit-Loss Ratio'', ''2.44''},\r\n                {''Alpha'', ''-0.008''},\r\n                {''Beta'', ''0.028''},\r\n                {''Annual Standard Deviation'', ''0.026''},\r\n                {''Annual Variance'', ''0.001''},\r\n                {''Information Ratio'', ''-1.012''},\r\n                {''Tracking Error'', ''0.026''},\r\n                {''Treynor Ratio'', ''-0.249''},\r\n                {''Total Fees'', ''$10.61''},\r\n            }", span="354-375"];
m24_26 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var coarseFineFundamentalRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''6''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.84%''},\r\n                {''Compounding Annual Return'', ''-57.345%''},\r\n                {''Drawdown'', ''9.100%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-6.763%''},\r\n                {''Sharpe Ratio'', ''-3.288''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.105''},\r\n                {''Beta'', ''-46.73''},\r\n                {''Annual Standard Deviation'', ''0.235''},\r\n                {''Annual Variance'', ''0.055''},\r\n                {''Information Ratio'', ''-3.366''},\r\n                {''Tracking Error'', ''0.236''},\r\n                {''Treynor Ratio'', ''0.017''},\r\n                {''Total Fees'', ''$13.92''},\r\n            }", span="377-398"];
m24_27 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var macdTrendAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''84''},\r\n                {''Average Win'', ''4.79%''},\r\n                {''Average Loss'', ''-4.17%''},\r\n                {''Compounding Annual Return'', ''2.967%''},\r\n                {''Drawdown'', ''34.800%''},\r\n                {''Expectancy'', ''0.228''},\r\n                {''Net Profit'', ''37.970%''},\r\n                {''Sharpe Ratio'', ''0.27''},\r\n                {''Loss Rate'', ''43%''},\r\n                {''Win Rate'', ''57%''},\r\n                {''Profit-Loss Ratio'', ''1.15''},\r\n                {''Alpha'', ''0.064''},\r\n                {''Beta'', ''-2.051''},\r\n                {''Annual Standard Deviation'', ''0.112''},\r\n                {''Annual Variance'', ''0.013''},\r\n                {''Information Ratio'', ''0.124''},\r\n                {''Tracking Error'', ''0.112''},\r\n                {''Treynor Ratio'', ''-0.015''},\r\n                {''Total Fees'', ''$420.57''},\r\n            }", span="400-421"];
m24_28 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var optionSplitRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'',''2''},\r\n                {''Average Win'',''0%''},\r\n                {''Average Loss'',''-0.02%''},\r\n                {''Compounding Annual Return'',''-1.242%''},\r\n                {''Drawdown'',''0.000%''},\r\n                {''Expectancy'',''-1''},\r\n                {''Net Profit'',''-0.017%''},\r\n                {''Sharpe Ratio'',''-7.099''},\r\n                {''Loss Rate'',''100%''},\r\n                {''Win Rate'',''0%''},\r\n                {''Profit-Loss Ratio'',''0''},\r\n                {''Alpha'',''-0.01''},\r\n                {''Beta'',''0''},\r\n                {''Annual Standard Deviation'',''0.001''},\r\n                {''Annual Variance'',''0''},\r\n                {''Information Ratio'',''7.126''},\r\n                {''Tracking Error'',''6.064''},\r\n                {''Treynor Ratio'',''174.306''},\r\n                {''Total Fees'',''$0.50''},\r\n            }", span="423-444"];
m24_29 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var optionRenameRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''4''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.02%''},\r\n                {''Compounding Annual Return'', ''-0.472%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.006%''},\r\n                {''Sharpe Ratio'', ''-3.403''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''-0.016''},\r\n                {''Beta'', ''-0.001''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''10.014''},\r\n                {''Tracking Error'', ''0.877''},\r\n                {''Treynor Ratio'', ''4.203''},\r\n                {''Total Fees'', ''$2.50''},\r\n            }", span="446-467"];
m24_30 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var optionOpenInterestRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-0.01%''},\r\n                {''Compounding Annual Return'', ''-2.042%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.010%''},\r\n                {''Sharpe Ratio'', ''-11.225''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''-0.036''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''-11.225''},\r\n                {''Tracking Error'', ''0.033''},\r\n                {''Treynor Ratio'', ''0.355''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="469-490"];
m24_31 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var optionChainConsistencyRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''2''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''-3.86%''},\r\n                {''Compounding Annual Return'', ''-100.000%''},\r\n                {''Drawdown'', ''3.900%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-3.855%''},\r\n                {''Sharpe Ratio'', ''0''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="492-513"];
m24_32 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var weeklyUniverseSelectionRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''8''},\r\n                {''Average Win'', ''0.28%''},\r\n                {''Average Loss'', ''-0.33%''},\r\n                {''Compounding Annual Return'', ''-1.247%''},\r\n                {''Drawdown'', ''1.300%''},\r\n                {''Expectancy'', ''-0.078''},\r\n                {''Net Profit'', ''-0.105%''},\r\n                {''Sharpe Ratio'', ''-0.27''},\r\n                {''Loss Rate'', ''50%''},\r\n                {''Win Rate'', ''50%''},\r\n                {''Profit-Loss Ratio'', ''0.84''},\r\n                {''Alpha'', ''-0.239''},\r\n                {''Beta'', ''12.675''},\r\n                {''Annual Standard Deviation'', ''0.04''},\r\n                {''Annual Variance'', ''0.002''},\r\n                {''Information Ratio'', ''-0.723''},\r\n                {''Tracking Error'', ''0.04''},\r\n                {''Treynor Ratio'', ''-0.001''},\r\n                {''Total Fees'', ''$23.23''},\r\n            }", span="515-536"];
m24_33 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var optionExerciseAssignRegressionAlgorithmStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''4''},\r\n                {''Average Win'', ''0.30%''},\r\n                {''Average Loss'', ''-0.32%''},\r\n                {''Compounding Annual Return'', ''-85.023%''},\r\n                {''Drawdown'', ''0.400%''},\r\n                {''Expectancy'', ''-0.359''},\r\n                {''Net Profit'', ''-0.350%''},\r\n                {''Sharpe Ratio'', ''0''},\r\n                {''Loss Rate'', ''67%''},\r\n                {''Win Rate'', ''33%''},\r\n                {''Profit-Loss Ratio'', ''0.92''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$0.50''},\r\n            }", span="538-559"];
m24_34 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var basicTemplateDailyStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''244.780%''},\r\n                {''Drawdown'', ''1.100%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''4.153%''},\r\n                {''Sharpe Ratio'', ''6.165''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0.865''},\r\n                {''Beta'', ''-0.004''},\r\n                {''Annual Standard Deviation'', ''0.14''},\r\n                {''Annual Variance'', ''0.02''},\r\n                {''Information Ratio'', ''6.066''},\r\n                {''Tracking Error'', ''0.14''},\r\n                {''Treynor Ratio'', ''-212.611''},\r\n                {''Total Fees'', ''$3.09''}\r\n            }", span="561-582"];
m24_35 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var hourSplitStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''-0.096%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''-0.001%''},\r\n                {''Sharpe Ratio'', ''-11.225''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$1.00''}\r\n            }", span="584-605"];
m24_36 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var hourReverseSplitStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''1''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0%''},\r\n                {''Compounding Annual Return'', ''-1.444%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''0''},\r\n                {''Net Profit'', ''-0.007%''},\r\n                {''Sharpe Ratio'', ''-11.225''},\r\n                {''Loss Rate'', ''0%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0.001''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$1.00''}\r\n            }", span="607-628"];
m24_37 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var fractionalQuantityRegressionStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''6''},\r\n                {''Average Win'', ''0.95%''},\r\n                {''Average Loss'', ''-2.02%''},\r\n                {''Compounding Annual Return'', ''254.081%''},\r\n                {''Drawdown'', ''6.600%''},\r\n                {''Expectancy'', ''-0.018''},\r\n                {''Net Profit'', ''1.395%''},\r\n                {''Sharpe Ratio'', ''1.176''},\r\n                {''Loss Rate'', ''33%''},\r\n                {''Win Rate'', ''67%''},\r\n                {''Profit-Loss Ratio'', ''0.47''},\r\n                {''Alpha'', ''-1.18''},\r\n                {''Beta'', ''1.249''},\r\n                {''Annual Standard Deviation'', ''0.813''},\r\n                {''Annual Variance'', ''0.66''},\r\n                {''Information Ratio'', ''-4.245''},\r\n                {''Tracking Error'', ''0.178''},\r\n                {''Treynor Ratio'', ''0.765''},\r\n                {''Total Fees'', ''$2045.20''}\r\n            }", span="630-651"];
m24_38 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="var basicTemplateFuturesAlgorithmDailyStatistics = new Dictionary<string, string>\r\n            {\r\n                {''Total Trades'', ''8''},\r\n                {''Average Win'', ''0%''},\r\n                {''Average Loss'', ''0.00%''},\r\n                {''Compounding Annual Return'', ''-1.655%''},\r\n                {''Drawdown'', ''0.000%''},\r\n                {''Expectancy'', ''-1''},\r\n                {''Net Profit'', ''-0.018%''},\r\n                {''Sharpe Ratio'', ''-23.092''},\r\n                {''Loss Rate'', ''100%''},\r\n                {''Win Rate'', ''0%''},\r\n                {''Profit-Loss Ratio'', ''0''},\r\n                {''Alpha'', ''0''},\r\n                {''Beta'', ''0''},\r\n                {''Annual Standard Deviation'', ''0''},\r\n                {''Annual Variance'', ''0''},\r\n                {''Information Ratio'', ''0''},\r\n                {''Tracking Error'', ''0''},\r\n                {''Treynor Ratio'', ''0''},\r\n                {''Total Fees'', ''$14.80''}\r\n            }", span="653-674"];
m24_41 [cluster="QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", file="RegressionTests.cs", label="Exit QuantConnect.Tests.RegressionTests.GetRegressionTestParameters()", span="41-41"];
m24_43 [cluster="System.Collections.Generic.List<T>.List()", file="RegressionTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m24_50 [cluster="TestCaseData.cstr", file="RegressionTests.cs", label="Entry TestCaseData.cstr", span=""];
m24_10 [cluster="QuantConnect.Tests.AlgorithmRunner.RunLocalBacktest(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.AlphaRuntimeStatistics, QuantConnect.Language)", file="RegressionTests.cs", label="Entry QuantConnect.Tests.AlgorithmRunner.RunLocalBacktest(string, System.Collections.Generic.Dictionary<string, string>, QuantConnect.AlphaRuntimeStatistics, QuantConnect.Language)", span="36-36"];
m24_45 [cluster="Unk.Select", file="RegressionTests.cs", label="Entry Unk.Select", span=""];
m24_46 [cluster="Unk.ToArray", file="RegressionTests.cs", label="Entry Unk.ToArray", span=""];
m24_9 [cluster="QuantConnect.Configuration.Config.Set(string, string)", file="RegressionTests.cs", label="Entry QuantConnect.Configuration.Config.Set(string, string)", span="118-118"];
m24_42 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RegressionTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m24_56 [file="RegressionTests.cs", label="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters", span=""];
m25_40 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.ToString()", file="SecurityChanges.cs", label="Entry QuantConnect.Data.UniverseSelection.SecurityChanges.ToString()", span="117-117"];
m25_41 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.ToString()", file="SecurityChanges.cs", label="AddedSecurities.Count == 0 && RemovedSecurities.Count == 0", span="119-119"];
m25_42 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.ToString()", file="SecurityChanges.cs", label="return ''SecurityChanges: None'';", span="121-121"];
m25_43 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.ToString()", file="SecurityChanges.cs", label="var added = string.Empty", span="123-123"];
m25_44 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.ToString()", file="SecurityChanges.cs", label="AddedSecurities.Count != 0", span="124-124"];
m25_49 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.ToString()", file="SecurityChanges.cs", label="return ''SecurityChanges: '' + added + removed;", span="134-134"];
m25_45 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.ToString()", file="SecurityChanges.cs", label="added = '' Added: '' + string.Join('','', AddedSecurities.Select(x => x.Symbol.ID))", span="126-126"];
m25_46 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.ToString()", file="SecurityChanges.cs", label="var removed = string.Empty", span="128-128"];
m25_47 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.ToString()", file="SecurityChanges.cs", label="RemovedSecurities.Count != 0", span="129-129"];
m25_48 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.ToString()", file="SecurityChanges.cs", label="removed = '' Removed: '' + string.Join('','', RemovedSecurities.Select(x => x.Symbol.ID))", span="131-131"];
m25_50 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.ToString()", file="SecurityChanges.cs", label="Exit QuantConnect.Data.UniverseSelection.SecurityChanges.ToString()", span="117-117"];
m25_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="SecurityChanges.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m25_33 [cluster="Unk.Where", file="SecurityChanges.cs", label="Entry Unk.Where", span=""];
m25_39 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="SecurityChanges.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m25_16 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="SecurityChanges.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m25_18 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.Removed(params QuantConnect.Securities.Security[])", file="SecurityChanges.cs", label="Entry QuantConnect.Data.UniverseSelection.SecurityChanges.Removed(params QuantConnect.Securities.Security[])", span="85-85"];
m25_19 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.Removed(params QuantConnect.Securities.Security[])", file="SecurityChanges.cs", label="securities == null || securities.Length == 0", span="87-87"];
m25_21 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.Removed(params QuantConnect.Securities.Security[])", file="SecurityChanges.cs", label="return new SecurityChanges(new List<Security>(), securities.ToList());", span="88-88"];
m25_20 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.Removed(params QuantConnect.Securities.Security[])", file="SecurityChanges.cs", label="return None;", span="87-87"];
m25_22 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.Removed(params QuantConnect.Securities.Security[])", file="SecurityChanges.cs", label="Exit QuantConnect.Data.UniverseSelection.SecurityChanges.Removed(params QuantConnect.Securities.Security[])", span="85-85"];
m25_10 [cluster="Unk.ToHashSet", file="SecurityChanges.cs", label="Entry Unk.ToHashSet", span=""];
m25_17 [cluster="System.Collections.Generic.List<T>.List()", file="SecurityChanges.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m25_35 [cluster="SecurityChanges.cstr", file="SecurityChanges.cs", label="Entry SecurityChanges.cstr", span=""];
m25_34 [cluster="Unk.ToList", file="SecurityChanges.cs", label="Entry Unk.ToList", span=""];
m25_52 [cluster="Unk.Join", file="SecurityChanges.cs", label="Entry Unk.Join", span=""];
m25_51 [cluster="Unk.Select", file="SecurityChanges.cs", label="Entry Unk.Select", span=""];
m25_6 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.SecurityChanges(System.Collections.Generic.IEnumerable<QuantConnect.Securities.Security>, System.Collections.Generic.IEnumerable<QuantConnect.Securities.Security>)", file="SecurityChanges.cs", label="Entry QuantConnect.Data.UniverseSelection.SecurityChanges.SecurityChanges(System.Collections.Generic.IEnumerable<QuantConnect.Securities.Security>, System.Collections.Generic.IEnumerable<QuantConnect.Securities.Security>)", span="63-63"];
m25_7 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.SecurityChanges(System.Collections.Generic.IEnumerable<QuantConnect.Securities.Security>, System.Collections.Generic.IEnumerable<QuantConnect.Securities.Security>)", file="SecurityChanges.cs", label="_addedSecurities = addedSecurities.ToHashSet()", span="65-65"];
m25_8 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.SecurityChanges(System.Collections.Generic.IEnumerable<QuantConnect.Securities.Security>, System.Collections.Generic.IEnumerable<QuantConnect.Securities.Security>)", file="SecurityChanges.cs", label="_removedSecurities = removedSecurities.ToHashSet()", span="66-66"];
m25_9 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.SecurityChanges(System.Collections.Generic.IEnumerable<QuantConnect.Securities.Security>, System.Collections.Generic.IEnumerable<QuantConnect.Securities.Security>)", file="SecurityChanges.cs", label="Exit QuantConnect.Data.UniverseSelection.SecurityChanges.SecurityChanges(System.Collections.Generic.IEnumerable<QuantConnect.Securities.Security>, System.Collections.Generic.IEnumerable<QuantConnect.Securities.Security>)", span="63-63"];
m25_23 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.operator +(QuantConnect.Data.UniverseSelection.SecurityChanges, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="SecurityChanges.cs", label="Entry QuantConnect.Data.UniverseSelection.SecurityChanges.operator +(QuantConnect.Data.UniverseSelection.SecurityChanges, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="97-97"];
m25_24 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.operator +(QuantConnect.Data.UniverseSelection.SecurityChanges, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="SecurityChanges.cs", label="left == None", span="100-100"];
m25_25 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.operator +(QuantConnect.Data.UniverseSelection.SecurityChanges, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="SecurityChanges.cs", label="return right;", span="100-100"];
m25_26 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.operator +(QuantConnect.Data.UniverseSelection.SecurityChanges, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="SecurityChanges.cs", label="right == None", span="101-101"];
m25_27 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.operator +(QuantConnect.Data.UniverseSelection.SecurityChanges, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="SecurityChanges.cs", label="return left;", span="101-101"];
m25_28 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.operator +(QuantConnect.Data.UniverseSelection.SecurityChanges, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="SecurityChanges.cs", label="var additions = left.AddedSecurities.Union(right.AddedSecurities).ToList()", span="103-103"];
m25_29 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.operator +(QuantConnect.Data.UniverseSelection.SecurityChanges, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="SecurityChanges.cs", label="var removals = left.RemovedSecurities.Union(right.RemovedSecurities).Where(x => !additions.Contains(x)).ToList()", span="104-104"];
m25_30 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.operator +(QuantConnect.Data.UniverseSelection.SecurityChanges, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="SecurityChanges.cs", label="return new SecurityChanges(additions, removals);", span="105-105"];
m25_31 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.operator +(QuantConnect.Data.UniverseSelection.SecurityChanges, QuantConnect.Data.UniverseSelection.SecurityChanges)", file="SecurityChanges.cs", label="Exit QuantConnect.Data.UniverseSelection.SecurityChanges.operator +(QuantConnect.Data.UniverseSelection.SecurityChanges, QuantConnect.Data.UniverseSelection.SecurityChanges)", span="97-97"];
m25_11 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.Added(params QuantConnect.Securities.Security[])", file="SecurityChanges.cs", label="Entry QuantConnect.Data.UniverseSelection.SecurityChanges.Added(params QuantConnect.Securities.Security[])", span="74-74"];
m25_12 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.Added(params QuantConnect.Securities.Security[])", file="SecurityChanges.cs", label="securities == null || securities.Length == 0", span="76-76"];
m25_14 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.Added(params QuantConnect.Securities.Security[])", file="SecurityChanges.cs", label="return new SecurityChanges(securities.ToList(), new List<Security>());", span="77-77"];
m25_13 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.Added(params QuantConnect.Securities.Security[])", file="SecurityChanges.cs", label="return None;", span="76-76"];
m25_15 [cluster="QuantConnect.Data.UniverseSelection.SecurityChanges.Added(params QuantConnect.Securities.Security[])", file="SecurityChanges.cs", label="Exit QuantConnect.Data.UniverseSelection.SecurityChanges.Added(params QuantConnect.Securities.Security[])", span="74-74"];
m25_56 [cluster="lambda expression", file="SecurityChanges.cs", label="Entry lambda expression", span="131-131"];
m25_0 [cluster="lambda expression", file="SecurityChanges.cs", label="Entry lambda expression", span="45-45"];
m25_1 [cluster="lambda expression", file="SecurityChanges.cs", label="x.Symbol.Value", span="45-45"];
m25_2 [cluster="lambda expression", file="SecurityChanges.cs", label="Exit lambda expression", span="45-45"];
m25_3 [cluster="lambda expression", file="SecurityChanges.cs", label="Entry lambda expression", span="55-55"];
m25_4 [cluster="lambda expression", file="SecurityChanges.cs", label="x.Symbol.Value", span="55-55"];
m25_5 [cluster="lambda expression", file="SecurityChanges.cs", label="Exit lambda expression", span="55-55"];
m25_37 [cluster="lambda expression", file="SecurityChanges.cs", label="!additions.Contains(x)", span="104-104"];
m25_36 [cluster="lambda expression", file="SecurityChanges.cs", label="Entry lambda expression", span="104-104"];
m25_38 [cluster="lambda expression", file="SecurityChanges.cs", label="Exit lambda expression", span="104-104"];
m25_53 [cluster="lambda expression", file="SecurityChanges.cs", label="Entry lambda expression", span="126-126"];
m25_54 [cluster="lambda expression", file="SecurityChanges.cs", label="x.Symbol.ID", span="126-126"];
m25_55 [cluster="lambda expression", file="SecurityChanges.cs", label="Exit lambda expression", span="126-126"];
m25_57 [cluster="lambda expression", file="SecurityChanges.cs", label="x.Symbol.ID", span="131-131"];
m25_58 [cluster="lambda expression", file="SecurityChanges.cs", label="Exit lambda expression", span="131-131"];
m25_59 [file="SecurityChanges.cs", label="QuantConnect.Data.UniverseSelection.SecurityChanges", span=""];
m25_60 [file="SecurityChanges.cs", label=additions, span=""];
m26_0 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs.RequestEndEventArgs(int)", file="SecurityTransactionManager.cs", label="Entry QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs.RequestEndEventArgs(int)", span="39-39"];
m26_1 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs.RequestEndEventArgs(int)", file="SecurityTransactionManager.cs", label="RequestId = requestId", span="41-41"];
m26_2 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs.RequestEndEventArgs(int)", file="SecurityTransactionManager.cs", label="Exit QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs.RequestEndEventArgs(int)", span="39-39"];
m26_3 [file="SecurityTransactionManager.cs", label="QuantConnect.Brokerages.InteractiveBrokers.Client.RequestEndEventArgs", span=""];
m27_0 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.CurrentTimeUtcEventArgs.CurrentTimeUtcEventArgs(System.DateTime)", file="Subscription.cs", label="Entry QuantConnect.Brokerages.InteractiveBrokers.Client.CurrentTimeUtcEventArgs.CurrentTimeUtcEventArgs(System.DateTime)", span="32-32"];
m27_1 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.CurrentTimeUtcEventArgs.CurrentTimeUtcEventArgs(System.DateTime)", file="Subscription.cs", label="CurrentTimeUtc = currentTimeUtc", span="34-34"];
m27_2 [cluster="QuantConnect.Brokerages.InteractiveBrokers.Client.CurrentTimeUtcEventArgs.CurrentTimeUtcEventArgs(System.DateTime)", file="Subscription.cs", label="Exit QuantConnect.Brokerages.InteractiveBrokers.Client.CurrentTimeUtcEventArgs.CurrentTimeUtcEventArgs(System.DateTime)", span="32-32"];
m27_3 [file="Subscription.cs", label="QuantConnect.Brokerages.InteractiveBrokers.Client.CurrentTimeUtcEventArgs", span=""];
m28_48 [cluster="lambda expression", file="SubscriptionCollection.cs", label="Entry lambda expression", span="127-127"];
m28_42 [cluster="lambda expression", file="SubscriptionCollection.cs", label="Entry lambda expression", span="125-125"];
m28_45 [cluster="lambda expression", file="SubscriptionCollection.cs", label="Entry lambda expression", span="126-126"];
m28_43 [cluster="lambda expression", file="SubscriptionCollection.cs", label="x.Value", span="125-125"];
m28_44 [cluster="lambda expression", file="SubscriptionCollection.cs", label="Exit lambda expression", span="125-125"];
m28_47 [cluster="lambda expression", file="SubscriptionCollection.cs", label="Exit lambda expression", span="126-126"];
m28_50 [cluster="lambda expression", file="SubscriptionCollection.cs", label="Exit lambda expression", span="127-127"];
m28_4 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary()", file="SubscriptionCollection.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary()", span="0-0"];
m28_18 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryGetValue(QuantConnect.Data.SubscriptionDataConfig, out QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryGetValue(QuantConnect.Data.SubscriptionDataConfig, out QuantConnect.Lean.Engine.DataFeeds.Subscription)", span="76-76"];
m28_19 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryGetValue(QuantConnect.Data.SubscriptionDataConfig, out QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="return _subscriptions.TryGetValue(configuration, out subscription);", span="78-78"];
m28_20 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryGetValue(QuantConnect.Data.SubscriptionDataConfig, out QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryGetValue(QuantConnect.Data.SubscriptionDataConfig, out QuantConnect.Lean.Engine.DataFeeds.Subscription)", span="76-76"];
m28_40 [cluster="Unk.ThenBy", file="SubscriptionCollection.cs", label="Entry Unk.ThenBy", span=""];
m28_0 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.SubscriptionCollection()", file="SubscriptionCollection.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.SubscriptionCollection()", span="38-38"];
m28_1 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.SubscriptionCollection()", file="SubscriptionCollection.cs", label="_subscriptions = new ConcurrentDictionary<SubscriptionDataConfig, Subscription>()", span="40-40"];
m28_2 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.SubscriptionCollection()", file="SubscriptionCollection.cs", label="_subscriptionsByTickType = new List<Subscription>()", span="41-41"];
m28_3 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.SubscriptionCollection()", file="SubscriptionCollection.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.SubscriptionCollection()", span="38-38"];
m28_32 [cluster="System.Collections.Generic.List<T>.GetEnumerator()", file="SubscriptionCollection.cs", label="Entry System.Collections.Generic.List<T>.GetEnumerator()", span="0-0"];
m28_10 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryAdd(QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryAdd(QuantConnect.Lean.Engine.DataFeeds.Subscription)", span="60-60"];
m28_11 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryAdd(QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="!_subscriptions.TryAdd(subscription.Configuration, subscription)", span="62-62"];
m28_12 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryAdd(QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="return false;", span="63-63"];
m28_13 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryAdd(QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="SortSubscriptions()", span="65-65"];
m28_14 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryAdd(QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="return true;", span="67-67"];
m28_15 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryAdd(QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryAdd(QuantConnect.Lean.Engine.DataFeeds.Subscription)", span="60-60"];
m28_29 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.GetEnumerator()", file="SubscriptionCollection.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.GetEnumerator()", span="103-103"];
m28_30 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.GetEnumerator()", file="SubscriptionCollection.cs", label="return _subscriptionsByTickType.GetEnumerator();", span="105-105"];
m28_31 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.GetEnumerator()", file="SubscriptionCollection.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.GetEnumerator()", span="103-103"];
m28_17 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.SortSubscriptions()", file="SubscriptionCollection.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.SortSubscriptions()", span="119-119"];
m28_37 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.SortSubscriptions()", file="SubscriptionCollection.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.SortSubscriptions()", span="119-119"];
m28_5 [cluster="System.Collections.Generic.List<T>.List()", file="SubscriptionCollection.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m28_39 [cluster="Unk.OrderBy", file="SubscriptionCollection.cs", label="Entry Unk.OrderBy", span=""];
m28_16 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue)", file="SubscriptionCollection.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue)", span="0-0"];
m28_33 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.System.Collections.IEnumerable.GetEnumerator()", file="SubscriptionCollection.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.System.Collections.IEnumerable.GetEnumerator()", span="114-114"];
m28_34 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.System.Collections.IEnumerable.GetEnumerator()", file="SubscriptionCollection.cs", label="return GetEnumerator();", span="116-116"];
m28_35 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.System.Collections.IEnumerable.GetEnumerator()", file="SubscriptionCollection.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.System.Collections.IEnumerable.GetEnumerator()", span="114-114"];
m28_41 [cluster="Unk.ToList", file="SubscriptionCollection.cs", label="Entry Unk.ToList", span=""];
m28_38 [cluster="Unk.Select", file="SubscriptionCollection.cs", label="Entry Unk.Select", span=""];
m28_22 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryRemove(QuantConnect.Data.SubscriptionDataConfig, out QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryRemove(QuantConnect.Data.SubscriptionDataConfig, out QuantConnect.Lean.Engine.DataFeeds.Subscription)", span="87-87"];
m28_23 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryRemove(QuantConnect.Data.SubscriptionDataConfig, out QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="!_subscriptions.TryRemove(configuration, out subscription)", span="89-89"];
m28_24 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryRemove(QuantConnect.Data.SubscriptionDataConfig, out QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="return false;", span="90-90"];
m28_25 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryRemove(QuantConnect.Data.SubscriptionDataConfig, out QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="SortSubscriptions()", span="92-92"];
m28_26 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryRemove(QuantConnect.Data.SubscriptionDataConfig, out QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="return true;", span="94-94"];
m28_27 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryRemove(QuantConnect.Data.SubscriptionDataConfig, out QuantConnect.Lean.Engine.DataFeeds.Subscription)", file="SubscriptionCollection.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.TryRemove(QuantConnect.Data.SubscriptionDataConfig, out QuantConnect.Lean.Engine.DataFeeds.Subscription)", span="87-87"];
m28_9 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)", file="SubscriptionCollection.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m28_6 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.Contains(QuantConnect.Data.SubscriptionDataConfig)", file="SubscriptionCollection.cs", label="Entry QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.Contains(QuantConnect.Data.SubscriptionDataConfig)", span="49-49"];
m28_7 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.Contains(QuantConnect.Data.SubscriptionDataConfig)", file="SubscriptionCollection.cs", label="return _subscriptions.ContainsKey(configuration);", span="51-51"];
m28_8 [cluster="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.Contains(QuantConnect.Data.SubscriptionDataConfig)", file="SubscriptionCollection.cs", label="Exit QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection.Contains(QuantConnect.Data.SubscriptionDataConfig)", span="49-49"];
m28_28 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryRemove(TKey, out TValue)", file="SubscriptionCollection.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryRemove(TKey, out TValue)", span="0-0"];
m28_21 [cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="SubscriptionCollection.cs", label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m28_51 [file="SubscriptionCollection.cs", label="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection", span=""];
m29_0 [cluster="QuantConnect.Algorithm.Framework.Alphas.Analysis.ISecurityValuesProvider.GetValues(QuantConnect.Symbol)", file="SubscriptionSynchronizerTests.cs", label="Entry QuantConnect.Algorithm.Framework.Alphas.Analysis.ISecurityValuesProvider.GetValues(QuantConnect.Symbol)", span="28-28"];
m29_1 [cluster="QuantConnect.Algorithm.Framework.Alphas.Analysis.ISecurityValuesProvider.GetValues(QuantConnect.Symbol)", file="SubscriptionSynchronizerTests.cs", label="Exit QuantConnect.Algorithm.Framework.Alphas.Analysis.ISecurityValuesProvider.GetValues(QuantConnect.Symbol)", span="28-28"];
m30_5 [cluster="System.Reflection.FieldInfo.GetValue(object)", file="Symbols.cs", label="Entry System.Reflection.FieldInfo.GetValue(object)", span="0-0"];
m30_10 [cluster="QuantConnect.Tests.Symbols.CreateEquitySymbol(string)", file="Symbols.cs", label="Entry QuantConnect.Tests.Symbols.CreateEquitySymbol(string)", span="92-92"];
m30_11 [cluster="QuantConnect.Tests.Symbols.CreateEquitySymbol(string)", file="Symbols.cs", label="return Symbol.Create(symbol, SecurityType.Equity, Market.USA);", span="94-94"];
m30_12 [cluster="QuantConnect.Tests.Symbols.CreateEquitySymbol(string)", file="Symbols.cs", label="Exit QuantConnect.Tests.Symbols.CreateEquitySymbol(string)", span="92-92"];
m30_3 [cluster="System.Enum.ToString()", file="Symbols.cs", label="Entry System.Enum.ToString()", span="0-0"];
m30_13 [cluster="QuantConnect.Tests.Symbols.CreateFutureSymbol(string, System.DateTime)", file="Symbols.cs", label="Entry QuantConnect.Tests.Symbols.CreateFutureSymbol(string, System.DateTime)", span="96-96"];
m30_14 [cluster="QuantConnect.Tests.Symbols.CreateFutureSymbol(string, System.DateTime)", file="Symbols.cs", label="return Symbol.CreateFuture(symbol, Market.USA, expiry);", span="98-98"];
m30_15 [cluster="QuantConnect.Tests.Symbols.CreateFutureSymbol(string, System.DateTime)", file="Symbols.cs", label="Exit QuantConnect.Tests.Symbols.CreateFutureSymbol(string, System.DateTime)", span="96-96"];
m30_16 [cluster="QuantConnect.Symbol.CreateFuture(string, string, System.DateTime, string)", file="Symbols.cs", label="Entry QuantConnect.Symbol.CreateFuture(string, string, System.DateTime, string)", span="147-147"];
m30_4 [cluster="System.Type.GetField(string, System.Reflection.BindingFlags)", file="Symbols.cs", label="Entry System.Type.GetField(string, System.Reflection.BindingFlags)", span="0-0"];
m30_20 [cluster="QuantConnect.Tests.Symbols.CreateOptionSymbol(string, QuantConnect.OptionRight, decimal, System.DateTime)", file="Symbols.cs", label="Entry QuantConnect.Tests.Symbols.CreateOptionSymbol(string, QuantConnect.OptionRight, decimal, System.DateTime)", span="106-106"];
m30_21 [cluster="QuantConnect.Tests.Symbols.CreateOptionSymbol(string, QuantConnect.OptionRight, decimal, System.DateTime)", file="Symbols.cs", label="return Symbol.CreateOption(symbol, Market.USA, OptionStyle.American, right, strike, expiry);", span="108-108"];
m30_22 [cluster="QuantConnect.Tests.Symbols.CreateOptionSymbol(string, QuantConnect.OptionRight, decimal, System.DateTime)", file="Symbols.cs", label="Exit QuantConnect.Tests.Symbols.CreateOptionSymbol(string, QuantConnect.OptionRight, decimal, System.DateTime)", span="106-106"];
m30_0 [cluster="QuantConnect.Tests.Symbols.Lookup(QuantConnect.Tests.Symbols.SymbolsKey)", file="Symbols.cs", label="Entry QuantConnect.Tests.Symbols.Lookup(QuantConnect.Tests.Symbols.SymbolsKey)", span="82-82"];
m30_1 [cluster="QuantConnect.Tests.Symbols.Lookup(QuantConnect.Tests.Symbols.SymbolsKey)", file="Symbols.cs", label="return (Symbol)typeof(Symbols).GetField(key.ToString(), BindingFlags.Public | BindingFlags.Static).GetValue(null);", span="84-84"];
m30_2 [cluster="QuantConnect.Tests.Symbols.Lookup(QuantConnect.Tests.Symbols.SymbolsKey)", file="Symbols.cs", label="Exit QuantConnect.Tests.Symbols.Lookup(QuantConnect.Tests.Symbols.SymbolsKey)", span="82-82"];
m30_17 [cluster="QuantConnect.Tests.Symbols.CreateCfdSymbol(string, string)", file="Symbols.cs", label="Entry QuantConnect.Tests.Symbols.CreateCfdSymbol(string, string)", span="101-101"];
m30_18 [cluster="QuantConnect.Tests.Symbols.CreateCfdSymbol(string, string)", file="Symbols.cs", label="return Symbol.Create(symbol, SecurityType.Cfd, market);", span="103-103"];
m30_19 [cluster="QuantConnect.Tests.Symbols.CreateCfdSymbol(string, string)", file="Symbols.cs", label="Exit QuantConnect.Tests.Symbols.CreateCfdSymbol(string, string)", span="101-101"];
m30_6 [cluster="QuantConnect.Tests.Symbols.CreateForexSymbol(string)", file="Symbols.cs", label="Entry QuantConnect.Tests.Symbols.CreateForexSymbol(string)", span="87-87"];
m30_7 [cluster="QuantConnect.Tests.Symbols.CreateForexSymbol(string)", file="Symbols.cs", label="return Symbol.Create(symbol, SecurityType.Forex, Market.FXCM);", span="89-89"];
m30_8 [cluster="QuantConnect.Tests.Symbols.CreateForexSymbol(string)", file="Symbols.cs", label="Exit QuantConnect.Tests.Symbols.CreateForexSymbol(string)", span="87-87"];
m30_23 [cluster="QuantConnect.Symbol.CreateOption(string, string, QuantConnect.OptionStyle, QuantConnect.OptionRight, decimal, System.DateTime, string, bool)", file="Symbols.cs", label="Entry QuantConnect.Symbol.CreateOption(string, string, QuantConnect.OptionStyle, QuantConnect.OptionRight, decimal, System.DateTime, string, bool)", span="99-99"];
m30_9 [cluster="QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", file="Symbols.cs", label="Entry QuantConnect.Symbol.Create(string, QuantConnect.SecurityType, string, string)", span="45-45"];
m30_24 [cluster="QuantConnect.Tests.Symbols.CreateCryptoSymbol(string)", file="Symbols.cs", label="Entry QuantConnect.Tests.Symbols.CreateCryptoSymbol(string)", span="111-111"];
m30_25 [cluster="QuantConnect.Tests.Symbols.CreateCryptoSymbol(string)", file="Symbols.cs", label="return Symbol.Create(symbol, SecurityType.Crypto, Market.GDAX);", span="113-113"];
m30_26 [cluster="QuantConnect.Tests.Symbols.CreateCryptoSymbol(string)", file="Symbols.cs", label="Exit QuantConnect.Tests.Symbols.CreateCryptoSymbol(string)", span="111-111"];
m31_7 [cluster="QuantConnect.Logging.Log.Error(System.Exception, string, bool)", file="TimeSlice.cs", label="Entry QuantConnect.Logging.Log.Error(System.Exception, string, bool)", span="98-98"];
m31_18 [cluster="System.Action<T>.Invoke(T)", file="TimeSlice.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m31_8 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="TimeSlice.cs", label="Entry QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", span="29-29"];
m31_9 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="TimeSlice.cs", label="disposable == null", span="31-31"];
m31_11 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="TimeSlice.cs", label="disposable.Dispose()", span="38-38"];
m31_14 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="TimeSlice.cs", label="errorHandler(error)", span="43-43"];
m31_10 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="TimeSlice.cs", label="return false;", span="33-33"];
m31_12 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="TimeSlice.cs", label="return true;", span="39-39"];
m31_13 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="TimeSlice.cs", label=Exception, span="41-41"];
m31_15 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="TimeSlice.cs", label="return false;", span="44-44"];
m31_16 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", file="TimeSlice.cs", label="Exit QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable, System.Action<System.Exception>)", span="29-29"];
m31_17 [cluster="System.IDisposable.Dispose()", file="TimeSlice.cs", label="Entry System.IDisposable.Dispose()", span="0-0"];
m31_3 [cluster="System.IDisposable.DisposeSafely(System.Action<System.Exception>)", file="TimeSlice.cs", label="Entry System.IDisposable.DisposeSafely(System.Action<System.Exception>)", span="29-29"];
m31_0 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable)", file="TimeSlice.cs", label="Entry QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable)", span="15-15"];
m31_1 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable)", file="TimeSlice.cs", label="return disposable.DisposeSafely(error => Log.Error(error));", span="17-17"];
m31_2 [cluster="QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable)", file="TimeSlice.cs", label="Exit QuantConnect.Util.DisposableExtensions.DisposeSafely(System.IDisposable)", span="15-15"];
m31_4 [cluster="lambda expression", file="TimeSlice.cs", label="Entry lambda expression", span="17-17"];
m31_5 [cluster="lambda expression", file="TimeSlice.cs", label="Log.Error(error)", span="17-17"];
m31_6 [cluster="lambda expression", file="TimeSlice.cs", label="Exit lambda expression", span="17-17"];
m3_228 -> m3_233  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_202 -> m3_205  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_111 -> m3_136  [color=darkseagreen4, key=1, label="QuantConnect.Packets.Packet", style=dashed];
m3_138 -> m3_142  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_112 -> m3_120  [color=darkseagreen4, key=1, label="System.Collections.Generic.Dictionary<string, QuantConnect.Chart>", style=dashed];
m3_119 -> m3_126  [color=darkseagreen4, key=1, label=splitPackets, style=dashed];
m3_121 -> m3_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_218 -> m3_221  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_244 -> m3_255  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m3_244 -> m3_247  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_244 -> m3_249  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_244 -> m3_251  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_244 -> m3_253  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_244 -> m3_254  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m3_247 -> m3_251  [color=darkseagreen4, key=1, label=chart, style=dashed];
m3_247 -> m3_253  [color=darkseagreen4, key=1, label=chart, style=dashed];
m3_251 -> m3_255  [color=darkseagreen4, key=1, label=series, style=dashed];
m3_252 -> m3_255  [color=darkseagreen4, key=1, label=series, style=dashed];
m3_252 -> m3_254  [color=darkseagreen4, key=1, label=series, style=dashed];
m3_248 -> m3_251  [color=darkseagreen4, key=1, label=chart, style=dashed];
m3_248 -> m3_253  [color=darkseagreen4, key=1, label=chart, style=dashed];
m3_300 -> m3_323  [color=darkseagreen4, key=1, label=bool, style=dashed];
m3_322 -> m3_325  [color=darkseagreen4, key=1, label=time, style=dashed];
m3_322 -> m3_329  [color=darkseagreen4, key=1, label=time, style=dashed];
m3_346 -> m3_346  [color=darkseagreen4, key=1, label=pair, style=dashed];
m3_64 -> m3_113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_64 -> m3_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_64 -> m3_68  [color=darkseagreen4, key=1, label=deltaOrders, style=dashed];
m3_92 -> m3_95  [color=darkseagreen4, key=1, label=complete, style=dashed];
m3_74 -> m3_78  [color=darkseagreen4, key=1, label=deltaCharts, style=dashed];
m3_79 -> m3_83  [color=darkseagreen4, key=1, label=runtimeStatistics, style=dashed];
m3_79 -> m3_84  [color=darkseagreen4, key=1, label=runtimeStatistics, style=dashed];
m3_79 -> m3_85  [color=darkseagreen4, key=1, label=runtimeStatistics, style=dashed];
m3_79 -> m3_86  [color=darkseagreen4, key=1, label=runtimeStatistics, style=dashed];
m3_79 -> m3_87  [color=darkseagreen4, key=1, label=runtimeStatistics, style=dashed];
m3_79 -> m3_82  [color=darkseagreen4, key=1, label=runtimeStatistics, style=dashed];
m3_82 -> m3_82  [color=darkseagreen4, key=1, label=pair, style=dashed];
m3_271 -> m3_273  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<QuantConnect.Chart>", style=dashed];
m3_277 -> m3_286  [color=darkseagreen4, key=1, label=chart, style=dashed];
m3_280 -> m3_285  [color=darkseagreen4, key=1, label=thisSeries, style=dashed];
m3_280 -> m3_284  [color=darkseagreen4, key=1, label=thisSeries, style=dashed];
m3_283 -> m3_285  [color=darkseagreen4, key=1, label=lastValue, style=dashed];
m3_276 -> m3_278  [color=darkseagreen4, key=1, label=series, style=dashed];
m3_276 -> m3_281  [color=darkseagreen4, key=1, label=series, style=dashed];
m3_276 -> m3_282  [color=darkseagreen4, key=1, label=series, style=dashed];
m3_276 -> m3_286  [color=darkseagreen4, key=1, label=series, style=dashed];
m3_273 -> m3_275  [color=darkseagreen4, key=1, label=update, style=dashed];
m3_273 -> m3_276  [color=darkseagreen4, key=1, label=update, style=dashed];
m3_164 -> m3_183  [color=green, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
m3_164 -> m3_182  [color=darkseagreen4, key=1, label="QuantConnect.Interfaces.IAlgorithm", style=dashed];
m3_175 -> m3_178  [color=green, key=1, label=types, style=dashed];
m3_175 -> m3_179  [color=green, key=1, label=types, style=dashed];
m3_175 -> m3_180  [color=green, key=1, label=types, style=dashed];
m3_177 -> m3_179  [color=green, key=1, label=security, style=dashed];
m3_185 -> m3_200  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_184 -> m3_197  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_167 -> m3_169  [color=darkseagreen4, key=1, label=resampleMinutes, style=dashed];
m3_211 -> m3_214  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_237 -> m3_239  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_149 -> m3_153  [color=darkseagreen4, key=1, label="QuantConnect.Statistics.StatisticsResults", style=dashed];
m3_155 -> m3_157  [color=darkseagreen4, key=1, label=result, style=dashed];
m3_352 -> m3_180  [color=green, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_176  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_8  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_9  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_10  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_27  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_36  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_37  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_40  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_41  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_42  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_59  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_61  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_75  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_76  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_80  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_81  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_83  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_84  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_85  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_86  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_87  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_93  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_95  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_98  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_135  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_142  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_156  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_157  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_172  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_203  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_204  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_205  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_212  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_213  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_214  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_219  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_220  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_221  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_225  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_229  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_231  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_233  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_238  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_239  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_245  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_247  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_249  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_262  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_266  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_269  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_272  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_274  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_275  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_294  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_295  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_297  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_306  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_311  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_315  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_320  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_323  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_325  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_326  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_327  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_329  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_331  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_333  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_334  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_336  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_338  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_339  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_341  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_343  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_344  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_345  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m3_352 -> m3_346  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.Results.BacktestingResultHandler", style=dashed];
m4_1 -> m4_4  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SubscriptionRequest", style=dashed];
m4_8 -> m4_15  [color=green, key=1, label=configuration, style=dashed];
m4_11 -> m4_15  [color=green, key=1, label=date, style=dashed];
m4_9 -> m4_11  [color=green, key=1, label=tradableDays, style=dashed];
m5_10 -> m5_13  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SubscriptionRequest", style=dashed];
m5_31 -> m5_38  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m5_35 -> m5_39  [color=darkseagreen4, key=1, label=config, style=dashed];
m5_2 -> m5_6  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SubscriptionRequest", style=dashed];
m6_32 -> m6_49  [color=darkseagreen4, key=1, label=nextReconnectionAttemptUtcTime, style=dashed];
m6_39 -> m6_45  [color=darkseagreen4, key=1, label=elapsed, style=dashed];
m6_100 -> m6_103  [color=darkseagreen4, key=1, label=list, style=dashed];
m6_100 -> m6_104  [color=darkseagreen4, key=1, label=list, style=dashed];
m6_103 -> m6_103  [color=darkseagreen4, key=1, label=item, style=dashed];
m6_15 -> m6_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_17 -> m6_55  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_17 -> m6_58  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_77 -> m6_84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_80 -> m6_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_23 -> m6_91  [color=darkseagreen4, key=1, label=int, style=dashed];
m6_23 -> m6_94  [color=darkseagreen4, key=1, label="System.Func<bool>", style=dashed];
m6_0 -> m6_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_109 -> m6_2  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_14  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_15  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_29  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_34  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_36  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_38  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_40  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_43  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_44  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_48  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_50  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_18  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_19  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_75  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_76  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_77  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_85  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_78  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_79  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_80  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_88  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_101  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_102  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m6_109 -> m6_103  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BaseWebsocketsBrokerage", style=dashed];
m7_125 -> m7_133  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_125 -> m7_136  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_125 -> m7_137  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_125 -> m7_139  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_129 -> m7_131  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_129 -> m7_132  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_135 -> m7_137  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_135 -> m7_138  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_127 -> m7_134  [color=darkseagreen4, key=1, label=security, style=dashed];
m7_127 -> m7_137  [color=darkseagreen4, key=1, label=security, style=dashed];
m7_101 -> m7_109  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_101 -> m7_115  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_101 -> m7_118  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_101 -> m7_119  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_101 -> m7_121  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_105 -> m7_107  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_105 -> m7_108  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_111 -> m7_113  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_111 -> m7_114  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_117 -> m7_119  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_117 -> m7_120  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_103 -> m7_110  [color=darkseagreen4, key=1, label=security, style=dashed];
m7_103 -> m7_116  [color=darkseagreen4, key=1, label=security, style=dashed];
m7_34 -> m7_42  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_34 -> m7_45  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_34 -> m7_46  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_34 -> m7_48  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_38 -> m7_40  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_38 -> m7_41  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_44 -> m7_46  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_44 -> m7_47  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_36 -> m7_43  [color=darkseagreen4, key=1, label=security, style=dashed];
m7_36 -> m7_46  [color=darkseagreen4, key=1, label=security, style=dashed];
m7_56 -> m7_64  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_56 -> m7_67  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_56 -> m7_68  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_56 -> m7_70  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_60 -> m7_62  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_60 -> m7_63  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_66 -> m7_68  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_66 -> m7_69  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_58 -> m7_65  [color=darkseagreen4, key=1, label=security, style=dashed];
m7_58 -> m7_68  [color=darkseagreen4, key=1, label=security, style=dashed];
m7_75 -> m7_83  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_75 -> m7_89  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_75 -> m7_92  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_75 -> m7_93  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_75 -> m7_95  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_79 -> m7_81  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_79 -> m7_82  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_85 -> m7_87  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_85 -> m7_88  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_91 -> m7_93  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_91 -> m7_94  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_77 -> m7_84  [color=darkseagreen4, key=1, label=security, style=dashed];
m7_77 -> m7_90  [color=darkseagreen4, key=1, label=security, style=dashed];
m7_145 -> m7_153  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_145 -> m7_156  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_145 -> m7_157  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_145 -> m7_159  [color=darkseagreen4, key=1, label=order, style=dashed];
m7_149 -> m7_151  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_149 -> m7_152  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_155 -> m7_157  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_155 -> m7_158  [color=darkseagreen4, key=1, label=fill, style=dashed];
m7_147 -> m7_154  [color=darkseagreen4, key=1, label=security, style=dashed];
m7_147 -> m7_157  [color=darkseagreen4, key=1, label=security, style=dashed];
m8_24 -> m8_26  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m8_19 -> m8_21  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m8_39 -> m8_41  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m8_29 -> m8_31  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m8_34 -> m8_36  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m8_9 -> m8_11  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m8_44 -> m8_46  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m8_14 -> m8_16  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m8_3 -> m8_5  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<QuantConnect.Orders.OrderTicket>", style=dashed];
m8_54 -> m8_5  [color=darkseagreen4, key=1, label="QuantConnect.Python.BrokerageModelPythonWrapper", style=dashed];
m8_54 -> m8_11  [color=darkseagreen4, key=1, label="QuantConnect.Python.BrokerageModelPythonWrapper", style=dashed];
m8_54 -> m8_16  [color=darkseagreen4, key=1, label="QuantConnect.Python.BrokerageModelPythonWrapper", style=dashed];
m8_54 -> m8_21  [color=darkseagreen4, key=1, label="QuantConnect.Python.BrokerageModelPythonWrapper", style=dashed];
m8_54 -> m8_26  [color=darkseagreen4, key=1, label="QuantConnect.Python.BrokerageModelPythonWrapper", style=dashed];
m8_54 -> m8_31  [color=darkseagreen4, key=1, label="QuantConnect.Python.BrokerageModelPythonWrapper", style=dashed];
m8_54 -> m8_36  [color=darkseagreen4, key=1, label="QuantConnect.Python.BrokerageModelPythonWrapper", style=dashed];
m8_54 -> m8_41  [color=darkseagreen4, key=1, label="QuantConnect.Python.BrokerageModelPythonWrapper", style=dashed];
m8_54 -> m8_46  [color=darkseagreen4, key=1, label="QuantConnect.Python.BrokerageModelPythonWrapper", style=dashed];
m9_6 -> m9_13  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m9_23 -> m9_7  [color=darkseagreen4, key=1, label="QuantConnect.Securities.BrokerageModelSecurityInitializer", style=dashed];
m9_23 -> m9_13  [color=darkseagreen4, key=1, label="QuantConnect.Securities.BrokerageModelSecurityInitializer", style=dashed];
m12_8 -> m12_11  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m12_0 -> m12_3  [color=darkseagreen4, key=1, label="QuantConnect.Data.SubscriptionDataConfig", style=dashed];
m13_50 -> m13_55  [color=darkseagreen4, key=1, label="QuantConnect.Notifications.Notification", style=dashed];
m13_51 -> m13_53  [color=darkseagreen4, key=1, label=type, style=dashed];
m13_5 -> m13_44  [color=darkseagreen4, key=1, label="QuantConnect.Packets.Packet", style=dashed];
m13_17 -> m13_19  [color=darkseagreen4, key=1, label=runtime, style=dashed];
m13_21 -> m13_23  [color=darkseagreen4, key=1, label=handled, style=dashed];
m13_26 -> m13_28  [color=darkseagreen4, key=1, label=result, style=dashed];
m13_26 -> m13_30  [color=darkseagreen4, key=1, label=result, style=dashed];
m13_31 -> m13_33  [color=darkseagreen4, key=1, label=stats, style=dashed];
m13_31 -> m13_34  [color=darkseagreen4, key=1, label=stats, style=dashed];
m13_31 -> m13_35  [color=darkseagreen4, key=1, label=stats, style=dashed];
m13_31 -> m13_36  [color=darkseagreen4, key=1, label=stats, style=dashed];
m13_31 -> m13_37  [color=darkseagreen4, key=1, label=stats, style=dashed];
m13_31 -> m13_38  [color=darkseagreen4, key=1, label=stats, style=dashed];
m13_31 -> m13_39  [color=darkseagreen4, key=1, label=stats, style=dashed];
m13_31 -> m13_40  [color=darkseagreen4, key=1, label=stats, style=dashed];
m13_31 -> m13_41  [color=darkseagreen4, key=1, label=stats, style=dashed];
m13_31 -> m13_42  [color=darkseagreen4, key=1, label=stats, style=dashed];
m13_29 -> m13_29  [color=darkseagreen4, key=1, label=pair, style=dashed];
m13_59 -> m13_44  [color=darkseagreen4, key=1, label="QuantConnect.Messaging.Messaging", style=dashed];
m14_8 -> m14_11  [color=darkseagreen4, key=1, label="System.IDisposable", style=dashed];
m14_8 -> m14_14  [color=darkseagreen4, key=1, label="System.Action<System.Exception>", style=dashed];
m14_1 -> m14_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_24 -> m15_26  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m15_24 -> m15_27  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m15_24 -> m15_29  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m15_24 -> m15_31  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m15_24 -> m15_33  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m15_6 -> m15_11  [color=darkseagreen4, key=1, label=security, style=dashed];
m15_45 -> m15_1  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_2  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_3  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_4  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_5  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_9  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_11  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_25  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_26  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_27  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_28  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_29  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_30  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_31  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_32  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_33  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_34  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_35  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_36  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m15_45 -> m15_37  [color=darkseagreen4, key=1, label="QuantConnect.Algorithm.CSharp.FractionalQuantityRegressionAlgorithm", style=dashed];
m17_11 -> m17_20  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m17_11 -> m17_22  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Security", style=dashed];
m17_19 -> m17_22  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m17_6 -> m17_8  [color=darkseagreen4, key=1, label=orderFees, style=dashed];
m17_27 -> m17_8  [color=darkseagreen4, key=1, label="QuantConnect.Securities.Forex.ForexMarginModel", style=dashed];
m18_39 -> m18_43  [color=darkseagreen4, key=1, label="QuantConnect.SecurityType", style=dashed];
m18_22 -> m18_26  [color=darkseagreen4, key=1, label=bool, style=dashed];
m18_22 -> m18_28  [color=darkseagreen4, key=1, label=bool, style=dashed];
m18_25 -> m18_28  [color=darkseagreen4, key=1, label=order, style=dashed];
m18_33 -> m18_37  [color=darkseagreen4, key=1, label=bool, style=dashed];
m18_45 -> m18_49  [color=darkseagreen4, key=1, label=bool, style=dashed];
m18_47 -> m18_49  [color=darkseagreen4, key=1, label=security, style=dashed];
m18_81 -> m18_7  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests", style=dashed];
m18_81 -> m18_28  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests", style=dashed];
m18_81 -> m18_37  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests", style=dashed];
m18_81 -> m18_43  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests", style=dashed];
m18_81 -> m18_49  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Brokerages.GDAXBrokerageModelTests", style=dashed];
m19_22 -> m19_24  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m19_22 -> m19_25  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m19_23 -> m19_25  [color=darkseagreen4, key=1, label=conversionRate, style=dashed];
m19_96 -> m19_98  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_96 -> m19_102  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_97 -> m19_102  [color=darkseagreen4, key=1, label=cashBook, style=dashed];
m19_99 -> m19_101  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_99 -> m19_102  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_100 -> m19_102  [color=darkseagreen4, key=1, label=securities, style=dashed];
m19_103 -> m19_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_137 -> m19_140  [color=darkseagreen4, key=1, label=book, style=dashed];
m19_138 -> m19_140  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_141 -> m19_153  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_141 -> m19_143  [color=darkseagreen4, key=1, label=symbols, style=dashed];
m19_141 -> m19_144  [color=darkseagreen4, key=1, label=symbols, style=dashed];
m19_141 -> m19_145  [color=darkseagreen4, key=1, label=symbols, style=dashed];
m19_141 -> m19_146  [color=darkseagreen4, key=1, label=symbols, style=dashed];
m19_141 -> m19_147  [color=darkseagreen4, key=1, label=symbols, style=dashed];
m19_13 -> m19_17  [color=darkseagreen4, key=1, label=symbol, style=dashed];
m19_14 -> m19_18  [color=darkseagreen4, key=1, label=quantity, style=dashed];
m19_16 -> m19_18  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_16 -> m19_19  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_15 -> m19_19  [color=darkseagreen4, key=1, label=conversionRate, style=dashed];
m19_20 -> m19_23  [color=green, key=1, label="QuantConnect.AccountType", style=dashed];
m19_20 -> m19_25  [color=green, key=1, label="QuantConnect.AccountType", style=dashed];
m19_20 -> m19_27  [color=darkseagreen4, key=1, label="QuantConnect.AccountType", style=dashed];
m19_20 -> m19_36  [color=darkseagreen4, key=1, label="QuantConnect.Brokerages.BrokerageName", style=dashed];
m19_35 -> m19_39  [color=darkseagreen4, key=1, label=securities, style=dashed];
m19_30 -> m19_32  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_30 -> m19_37  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_34 -> m19_36  [color=darkseagreen4, key=1, label=abcConfig, style=dashed];
m19_79 -> m19_81  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_186 -> m19_188  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_175 -> m19_177  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_175 -> m19_181  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_175 -> m19_183  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_175 -> m19_184  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_176 -> m19_181  [color=darkseagreen4, key=1, label=cashBook, style=dashed];
m19_178 -> m19_180  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_178 -> m19_181  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_179 -> m19_181  [color=darkseagreen4, key=1, label=securities, style=dashed];
m19_182 -> m19_184  [color=darkseagreen4, key=1, label=last, style=dashed];
m19_38 -> m19_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_39 -> m19_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_159 -> m19_161  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_159 -> m19_165  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_159 -> m19_167  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_159 -> m19_168  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_160 -> m19_165  [color=darkseagreen4, key=1, label=cashBook, style=dashed];
m19_162 -> m19_164  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_162 -> m19_165  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_163 -> m19_165  [color=darkseagreen4, key=1, label=securities, style=dashed];
m19_166 -> m19_168  [color=darkseagreen4, key=1, label=last, style=dashed];
m19_62 -> m19_64  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_62 -> m19_69  [color=darkseagreen4, key=1, label=cash, style=dashed];
m19_61 -> m19_68  [color=darkseagreen4, key=1, label=minimumResolution, style=dashed];
m19_61 -> m19_70  [color=darkseagreen4, key=1, label=minimumResolution, style=dashed];
m19_70 -> m19_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_63 -> m19_69  [color=darkseagreen4, key=1, label=cashBook, style=dashed];
m19_65 -> m19_67  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_65 -> m19_68  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_65 -> m19_69  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_65 -> m19_70  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_66 -> m19_68  [color=darkseagreen4, key=1, label=securities, style=dashed];
m19_66 -> m19_69  [color=darkseagreen4, key=1, label=securities, style=dashed];
m19_113 -> m19_116  [color=darkseagreen4, key=1, label=cashJPY, style=dashed];
m19_113 -> m19_122  [color=darkseagreen4, key=1, label=cashJPY, style=dashed];
m19_114 -> m19_117  [color=darkseagreen4, key=1, label=cashGBP, style=dashed];
m19_114 -> m19_125  [color=darkseagreen4, key=1, label=cashGBP, style=dashed];
m19_118 -> m19_121  [color=darkseagreen4, key=1, label=symbol, style=dashed];
m19_119 -> m19_121  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_119 -> m19_122  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_119 -> m19_125  [color=darkseagreen4, key=1, label=subscriptions, style=dashed];
m19_120 -> m19_122  [color=darkseagreen4, key=1, label=securities, style=dashed];
m19_120 -> m19_125  [color=darkseagreen4, key=1, label=securities, style=dashed];
m19_126 -> m19_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_43 -> m20_47  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments", style=dashed];
m20_43 -> m20_48  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments", style=dashed];
m20_43 -> m20_50  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments", style=dashed];
m20_43 -> m20_51  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments", style=dashed];
m20_43 -> m20_52  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments", style=dashed];
m20_43 -> m20_53  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Common.Util.LeanDataPathComponentsTests.Arguments", style=dashed];
m20_46 -> m20_49  [color=darkseagreen4, key=1, label=expectedFileName, style=dashed];
m20_45 -> m20_47  [color=darkseagreen4, key=1, label=decomposed, style=dashed];
m20_45 -> m20_48  [color=darkseagreen4, key=1, label=decomposed, style=dashed];
m20_45 -> m20_49  [color=darkseagreen4, key=1, label=decomposed, style=dashed];
m20_45 -> m20_50  [color=darkseagreen4, key=1, label=decomposed, style=dashed];
m20_45 -> m20_51  [color=darkseagreen4, key=1, label=decomposed, style=dashed];
m20_45 -> m20_52  [color=darkseagreen4, key=1, label=decomposed, style=dashed];
m20_45 -> m20_53  [color=darkseagreen4, key=1, label=decomposed, style=dashed];
m20_0 -> m20_6  [color=darkseagreen4, key=1, label="QuantConnect.Symbol", style=dashed];
m20_14 -> m20_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_14 -> m20_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_66 -> m20_41  [color=darkseagreen4, key=1, label=securityType, style=dashed];
m20_67 -> m20_41  [color=darkseagreen4, key=1, label=market, style=dashed];
m20_68 -> m20_41  [color=darkseagreen4, key=1, label=name, style=dashed];
m21_127 -> m21_137  [color=darkseagreen4, key=1, label=types, style=dashed];
m21_16 -> m21_19  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_16 -> m21_23  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_16 -> m21_24  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_24 -> m21_26  [color=darkseagreen4, key=1, label="out QuantConnect.Interfaces.IAlgorithm", style=dashed];
m21_149 -> m21_158  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_149 -> m21_152  [color=darkseagreen4, key=1, label=complete, style=dashed];
m21_149 -> m21_154  [color=darkseagreen4, key=1, label=success, style=dashed];
m21_150 -> m21_154  [color=darkseagreen4, key=1, label="out QuantConnect.Interfaces.IAlgorithm", style=dashed];
m21_150 -> m21_155  [color=darkseagreen4, key=1, label="out QuantConnect.Interfaces.IAlgorithm", style=dashed];
m21_151 -> m21_155  [color=darkseagreen4, key=1, label="out string", style=dashed];
m21_153 -> m21_155  [color=darkseagreen4, key=1, label="out string", style=dashed];
m21_66 -> m21_113  [color=darkseagreen4, key=1, label="out string", style=dashed];
m21_71 -> m21_75  [color=darkseagreen4, key=1, label=mdbFilename, style=dashed];
m21_68 -> m21_78  [color=darkseagreen4, key=1, label=debugInformationBytes, style=dashed];
m21_76 -> m21_78  [color=darkseagreen4, key=1, label=debugInformationBytes, style=dashed];
m21_74 -> m21_78  [color=darkseagreen4, key=1, label=debugInformationBytes, style=dashed];
m21_88 -> m21_90  [color=darkseagreen4, key=1, label=types, style=dashed];
m21_88 -> m21_94  [color=darkseagreen4, key=1, label=types, style=dashed];
m21_88 -> m21_96  [color=darkseagreen4, key=1, label=types, style=dashed];
m21_100 -> m21_102  [color=darkseagreen4, key=1, label="out QuantConnect.Interfaces.IAlgorithm", style=dashed];
m21_100 -> m21_113  [color=darkseagreen4, key=1, label="out QuantConnect.Interfaces.IAlgorithm", style=dashed];
m21_85 -> m21_113  [color=darkseagreen4, key=1, label="out string", style=dashed];
m21_91 -> m21_113  [color=darkseagreen4, key=1, label="out string", style=dashed];
m21_97 -> m21_113  [color=darkseagreen4, key=1, label="out string", style=dashed];
m21_107 -> m21_113  [color=darkseagreen4, key=1, label="out string", style=dashed];
m21_111 -> m21_113  [color=darkseagreen4, key=1, label="out string", style=dashed];
m21_6 -> m21_8  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.List<string>, string>", style=dashed];
m21_28 -> m21_32  [color=darkseagreen4, key=1, label=string, style=dashed];
m21_35 -> m21_37  [color=darkseagreen4, key=1, label=pythonFile, style=dashed];
m21_44 -> m21_50  [color=darkseagreen4, key=1, label=module, style=dashed];
m21_49 -> m21_54  [color=darkseagreen4, key=1, label="out QuantConnect.Interfaces.IAlgorithm", style=dashed];
m21_49 -> m21_55  [color=darkseagreen4, key=1, label="out QuantConnect.Interfaces.IAlgorithm", style=dashed];
m21_167 -> m21_21  [color=darkseagreen4, key=1, label="QuantConnect.AlgorithmFactory.Loader", style=dashed];
m21_167 -> m21_23  [color=darkseagreen4, key=1, label="QuantConnect.AlgorithmFactory.Loader", style=dashed];
m21_167 -> m21_24  [color=darkseagreen4, key=1, label="QuantConnect.AlgorithmFactory.Loader", style=dashed];
m21_167 -> m21_162  [color=darkseagreen4, key=1, label="QuantConnect.AlgorithmFactory.Loader", style=dashed];
m21_167 -> m21_163  [color=darkseagreen4, key=1, label="QuantConnect.AlgorithmFactory.Loader", style=dashed];
m22_21 -> m22_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m22_63 -> m22_18  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.SingleSecurity_Second_BenchmarkTest", style=dashed];
m22_63 -> m22_19  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.SingleSecurity_Second_BenchmarkTest", style=dashed];
m22_63 -> m22_20  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.SingleSecurity_Second_BenchmarkTest", style=dashed];
m22_63 -> m22_21  [color=darkseagreen4, key=1, label="QuantConnect.Tests.Engine.PerformanceBenchmarkAlgorithms.SingleSecurity_Second_BenchmarkTest", style=dashed];
m24_0 -> m24_3  [color=darkseagreen4, key=1, label="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters", style=dashed];
m24_0 -> m24_7  [color=darkseagreen4, key=1, label="QuantConnect.Tests.RegressionTests.AlgorithmStatisticsTestParameters", style=dashed];
m25_43 -> m25_49  [color=darkseagreen4, key=1, label=added, style=dashed];
m25_45 -> m25_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m25_45 -> m25_49  [color=darkseagreen4, key=1, label=added, style=dashed];
m25_46 -> m25_49  [color=darkseagreen4, key=1, label=removed, style=dashed];
m25_48 -> m25_56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m25_18 -> m25_21  [color=darkseagreen4, key=1, label="params QuantConnect.Securities.Security[]", style=dashed];
m25_23 -> m25_25  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m25_23 -> m25_26  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m25_23 -> m25_27  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m25_28 -> m25_37  [color=darkseagreen4, key=1, label=additions, style=dashed];
m25_28 -> m25_30  [color=darkseagreen4, key=1, label=additions, style=dashed];
m25_29 -> m25_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m25_11 -> m25_14  [color=darkseagreen4, key=1, label="params QuantConnect.Securities.Security[]", style=dashed];
m25_59 -> m25_41  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m25_59 -> m25_44  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m25_59 -> m25_47  [color=darkseagreen4, key=1, label="QuantConnect.Data.UniverseSelection.SecurityChanges", style=dashed];
m25_60 -> m25_37  [color=darkseagreen4, key=1, label=additions, style=dashed];
m28_43 -> m28_43  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<QuantConnect.Data.SubscriptionDataConfig, QuantConnect.Lean.Engine.DataFeeds.Subscription>", style=dashed];
m28_23 -> m28_27  [color=darkseagreen4, key=1, label="out QuantConnect.Lean.Engine.DataFeeds.Subscription", style=dashed];
m28_51 -> m28_7  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection", style=dashed];
m28_51 -> m28_11  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection", style=dashed];
m28_51 -> m28_13  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection", style=dashed];
m28_51 -> m28_19  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection", style=dashed];
m28_51 -> m28_23  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection", style=dashed];
m28_51 -> m28_25  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection", style=dashed];
m28_51 -> m28_30  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection", style=dashed];
m28_51 -> m28_34  [color=darkseagreen4, key=1, label="QuantConnect.Lean.Engine.DataFeeds.SubscriptionCollection", style=dashed];
m31_8 -> m31_11  [color=darkseagreen4, key=1, label="System.IDisposable", style=dashed];
m31_8 -> m31_14  [color=darkseagreen4, key=1, label="System.Action<System.Exception>", style=dashed];
m31_1 -> m31_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
}
